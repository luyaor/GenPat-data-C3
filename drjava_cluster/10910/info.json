{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c45d1ef83e55ad821c33f03fa5dac81", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26e00967a167a822614c4e234ccf4a5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ReflectUtilTest.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testLoadObjectThrowsCorrectException()", "signatureAfterChange": "         public void testInvokeStaticMethod() throws Exception", "diff": ["-  ", "-  public void testLoadObjectThrowsCorrectException() {", "-    try { loadObject(\"fishing.boats\"); }", "-    try { loadObject(\"edu.rice.cs.plt.reflect.ReflectUtilTest\", 23); }", "-    try { loadObject(\"java.lang.Comparable\"); }", "-    try { loadObject(\"edu.rice.cs.plt.lambda.LazyThunk\", LambdaUtil.nullThunk()); }", "-    try { loadObject(\"java.lang.String\", new char[]{'a', 'b'}, -1, 23); }", "-    try { loadObject(\"edu.rice.cs.plt.reflect.ReflectUtilTest\", new Class[0], 23); }", "-    try { loadObject(\"edu.rice.cs.plt.lambda.LazyThunk\", new Class<?>[]{Thunk.class}, LambdaUtil.nullLambda()); }", "+  ", "+  public void testInvokeStaticMethod() throws Exception {", "+    Thunk<?> nullThunk = (Thunk<?>) invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"nullLambda\");", "+    assertEquals(null, nullThunk.value());", "+    ", "+    Object o = new Object();", "+    Thunk<?> valueThunk1 = (Thunk<?>) invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"valueLambda\", o);", "+    assertSame(o, valueThunk1.value());", "+    ", "+    Thunk<?> valueThunk2 = (Thunk<?>) invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"valueLambda\",", "+                                                         new Class<?>[]{ Object.class }, 2.83);", "+    assertEquals(2.83, valueThunk2.value());", "+    ", "+    assertEquals(\"123\", invokeStaticMethod(\"java.lang.String\", \"valueOf\", new Class<?>[]{ int.class }, 123));", "+    ", "+    ClassLoader l = new PathClassLoader(INTBOX_DIR, A_DIR, B_DIR, C_DIR, D_DIR);", "+    assertEquals(\"A\", invokeStaticMethod(l, \"A\", \"getName\"));", "+    assertEquals(\"B\", invokeStaticMethod(l, \"B\", \"getName\"));", "+    assertEquals(\"C\", invokeStaticMethod(l, \"C\", \"getName\"));", "+    assertEquals(\"D\", invokeStaticMethod(l, \"D\", \"getName\"));", "+    ", "+    try { invokeStaticMethod(\"A\", \"getName\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"ClassNotFound\"); }", "+    ", "+    try { invokeStaticMethod(\"fishing.boats\", \"foo\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"ClassNotFound\"); }", "+    ", "+    try { invokeStaticMethod(\"edu.rice.cs.plt.reflect.ReflectUtilTest\", \"mom\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"NoSuchMethod\"); }", "+    ", "+    try { invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"valueLambda\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"NoSuchMethod\"); }", "+    ", "+    try { invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"valueLambda\", 2.83); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"NoSuchMethod\"); }", "+    ", "+    try { invokeStaticMethod(\"java.lang.String\", \"length\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"NullPointer\"); }", "+    ", "+    try {", "+      invokeStaticMethod(\"java.lang.String\", \"valueOf\", new Class<?>[]{ int.class }, 12.3);", "+      fail(\"expected exception\");", "+    }", "+    catch (ReflectException e) { assertCorrectException(e, \"IllegalArgument\"); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c797be14bf2c388301aa3e6e5a081e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "b79563bf1d51671314589f6c744a87acc54fe8fa", "commitAfterChange": "517a134496ea28d3d08f7cd449813e2a756de857", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "signatureAfterChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "diff": ["+    // Set up a sample history", "+    ", "+    // Load the history as a script", "-    ism.nextInteraction();", "-    assertEquals(\"Should have put the first interaction into the interactions document.\",", "-                 line1, doc.getCurrentInteraction());", "+    ", "+    // Should not be able to get the previous interaction", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());", "+    ", "+    // Get the next (first) interaction", "+    assertTrue(\"Should have next\", ism.hasNextInteraction());", "-    assertEquals(\"Should have put the second interaction into the interactions document.\",", "+    assertEquals(\"Should have put the first line into the document.\",", "+                 line1, doc.getCurrentInteraction());", "+", "+    // Still should not be able to get the previous interaction", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());", "+    try {", "+      ism.prevInteraction();", "+      fail(\"Should not have been able to get previous interaction!\");", "+    }", "+    catch (IllegalStateException ise) {", "+      // good, continue", "+    }", "+    ", "+    // Skip it; get the next (second) interaction", "+    assertTrue(\"Should have next\", ism.hasNextInteraction());", "+    ism.nextInteraction();", "+    assertEquals(\"Should have put the second line into the document.\",", "+    ", "+    // Now we should be able to get the previous interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "+    ism.prevInteraction();", "+    assertEquals(\"Should have put the first line into the document.\",", "+                 line1, doc.getCurrentInteraction());", "+    ", "+    // Go back to the second line and execute it", "+    ism.nextInteraction();", "+    ", "+    // Should not be able to get the next interaction, since we're at the end", "+    assertTrue(\"Should have no next\", !ism.hasNextInteraction());", "+    // Get Previous should return the most recently executed interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "-    assertEquals(\"Should have put the first interaction into the interactions document.\",", "+    assertEquals(\"Should have put the second line into the document.\",", "+                 line2, doc.getCurrentInteraction());", "+    ", "+    // Get Previous should now return the first interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "+    ism.prevInteraction();", "+    assertEquals(\"Should have put the first line into the document.\",", "+    ", "+    // Should have no more previous", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());", "+    ", "+    // Now execute the first interaction", "+    ", "+    // Get Previous should return the most recent (first) interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "+    ism.prevInteraction();", "+    assertEquals(\"Should have put the first line into the document.\",", "+                 line1, doc.getCurrentInteraction());", "+    ", "+    // Should not be able to get the previous interaction this time", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());"]}], "num": 10910}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b220c663cd18f2a8579ea14bd8c9b9f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22ff4152731c689fd468feba80fbdbf4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 86, "signatureBeforeChange": "     @Override public Type forUnionTypeOnly(UnionType t, Iterable<? extends Type> normTypes)", "signatureAfterChange": "     @Override public Type forUnionTypeOnly(UnionType t, Iterable<? extends Type> normTypes)", "diff": ["-      Type result = JOIN_NORM.value(normTypes);", "+      Type result = new NormJoiner(_subtyper).value(normTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ab388a0b59c10a19fc9e3e6efde6c44", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 85, "signatureBeforeChange": "     @Override public Type forIntersectionTypeOnly(IntersectionType t, Iterable<? extends Type> normTypes)", "signatureAfterChange": "          @Override public Type forIntersectionTypeOnly(IntersectionType t, Iterable<? extends Type> normTypes)", "diff": ["-  private final TypeUpdateVisitor NORMALIZE = new TypeUpdateVisitor() {", "+    ", "-      debug.logStart(new String[]{\"t\",\"normTypes\"}, wrap(t), wrap(normTypes));", "-      Type result = MEET_NORM.value(normTypes);", "-      debug.logEnd(\"result\", wrap(result));", "+      //debug.logStart(new String[]{\"t\",\"normTypes\"}, wrap(t), wrap(normTypes)); try {", "+      Type result = new NormMeeter(_subtyper).value(normTypes);", "+      //} finally { debug.logEnd(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecdab7b6a059e0f8b1e9295de367f5dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "dac1911c42074b029b90bbb69267d350628d7300", "commitAfterChange": "6ac6b30c03b8f321199592a97e544cb4056701f0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "        public static void main(String... args)", "signatureAfterChange": "        public static void main(String... args)", "diff": ["-    ArgumentParser.Result parsedArgs = argParser.parse(args);", "+    final ArgumentParser.Result parsedArgs = argParser.parse(args);", "-    final TypeSystem ts = parsedArgs.hasOption(\"jls\") ? JLSTypeSystem.INSTANCE : ExtendedTypeSystem.INSTANCE;", "-      public TypeSystem typeSystem() { return ts; }", "-      public boolean enforceAllAccess() { return true; }", "+      @Override protected Thunk<? extends TypeSystem> typeSystemFactory() {", "+        TypeSystem result = parsedArgs.hasOption(\"jls\") ? new JLSTypeSystem(this) : new ExtendedTypeSystem(this);", "+        return LambdaUtil.valueLambda(result);", "+      }", "+      @Override public boolean enforceAllAccess() { return true; }", "+      @Override public boolean prohibitUncheckedCasts() { return false; }"]}], "num": 2643}
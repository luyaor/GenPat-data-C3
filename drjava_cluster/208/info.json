{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92ab49109ed9250877c3bea9c30ee900", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c40708cce5648637575e7aa0f000b35c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 54, "signatureBeforeChange": "   private void _resumeThread(ThreadReference thread, boolean fromStep) throws DebugException", "signatureAfterChange": "   private void _resumeThread(ThreadReference thread, boolean fromStep) throws DebugException", "diff": ["-    */", "-  private void _resumeThread(ThreadReference thread, boolean fromStep) throws DebugException {", "-    if (thread == null) {", "-      throw new IllegalArgumentException(\"Cannot resume a null thread\");", "-    }", "-", "-    int suspendCount = thread.suspendCount();", "-    _log.log(\"Getting suspendCount = \" + suspendCount);", "-", "-", "-    _runningThread = thread;", "-    if (!fromStep) {", "-      // Copy variables back into the thread", "-      _copyVariablesFromInterpreter();", "-      _updateWatches();", "-    }", "-    try {", "-      _removeCurrentDebugInterpreter(fromStep);", "-      currThreadResumed();", "-    }", "-    catch(DebugException e) { throw new UnexpectedException(e); }", "-", "-    // Must resume the correct number of times", "-    for (int i=suspendCount; i>0; i--) thread.resume();", "-", "-    // Notify listeners of a resume", "-", "-    // Switch to next suspended thread, if any", "-    if (! fromStep && ! _suspendedThreads.isEmpty()) _switchToSuspendedThread();", "-  }", "+    */", "+  private void _resumeThread(ThreadReference thread, boolean fromStep) throws DebugException {", "+    if (thread == null) {", "+      throw new IllegalArgumentException(\"Cannot resume a null thread\");", "+    }", "+", "+    int suspendCount = thread.suspendCount();", "+    _log.log(\"Getting suspendCount = \" + suspendCount);", "+", "+", "+    _runningThread = thread;", "+    if (!fromStep) {", "+      // Copy variables back into the thread", "+      _copyVariablesFromInterpreter();", "+      _updateWatches();", "+    }", "+    try {", "+      _removeCurrentDebugInterpreter(fromStep);", "+      _currThreadResumed();", "+    }", "+    catch(DebugException e) { throw new UnexpectedException(e); }", "+", "+    // Must resume the correct number of times", "+    for (int i=suspendCount; i>0; i--) thread.resume();", "+", "+    // Notify listeners of a resume", "+", "+    // Switch to next suspended thread, if any", "+    if (! fromStep && ! _suspendedThreads.isEmpty()) _switchToSuspendedThread();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbf805030aef3f9818988ae3841ca4e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 39, "signatureBeforeChange": "              public static void main(String... args)", "signatureAfterChange": "      public static void main(String... args)", "diff": ["-    ", "-  public static void main(String... args) {", "-    ArgumentParser argParser = new ArgumentParser();", "-    argParser.supportOption(\"classpath\", \"\");", "-    argParser.supportAlias(\"cp\", \"classpath\");", "-    argParser.supportOption(\"jls\");", "-    argParser.requireParams(1);", "-    final ArgumentParser.Result parsedArgs = argParser.parse(args);", "-    ", "-    Options opt = new Options() {", "-        TypeSystem result = parsedArgs.hasOption(\"jls\") ? new JLSTypeSystem(this) : new ExtendedTypeSystem(this);", "-    };", "+  ", "+  public static void main(String... args) {", "+    debug.logStart();", "+", "+    ArgumentParser argParser = new ArgumentParser();", "+    argParser.supportOption(\"classpath\", \"\");", "+    argParser.supportAlias(\"cp\", \"classpath\");", "+    argParser.supportOption(\"opt\", 1);", "+    argParser.requireParams(1);", "+    final ArgumentParser.Result parsedArgs = argParser.parse(args);", "+    if (parsedArgs.hasOption(\"opt\")) {", "+      Options opt = _options.get(parsedArgs.getUnaryOption(\"opt\"));", "+      if (opt == null) { System.out.println(\"Unrecognized options name: \" + parsedArgs.getUnaryOption(\"opt\")); }", "+      else { processFiles(sources, cp, opt); }", "+    }", "+      ", "+    else {", "+      Iterator<String> optNames = _options.keySet().iterator();", "+      String canonicalName = optNames.next();", "+      Iterable<CompilationUnit> canonical = processFiles(sources, cp, _options.get(canonicalName));", "+      Map<String, Iterable<CompilationUnit>> others = new LinkedHashMap<String, Iterable<CompilationUnit>>();", "+      while (optNames.hasNext()) {", "+        String n = optNames.next();", "+        others.put(n, processFiles(sources, cp, _options.get(n)));", "+      }", "+      NodeDiff diff = new NodeDiff();", "+      for (Map.Entry<String, Iterable<CompilationUnit>> e : others.entrySet()) {", "+        diff.compare(canonicalName, canonical, e.getKey(), e.getValue());", "+      }", "+    }", "+    ", "+    debug.logEnd();", "+  }", "-      new SourceChecker(opt, false).check(sources, cp);"]}], "num": 208}
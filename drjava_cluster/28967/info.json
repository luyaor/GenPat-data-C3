{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80ec723a39bf2c2b9a2539d3d8e890d2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d9c6e85ef86e54611fe26bc727824eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 34, "signatureBeforeChange": "   protected SymbolData getSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                       boolean addError, boolean checkImportedStuff)", "signatureAfterChange": "   protected SymbolData getSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                       boolean addError, boolean checkImportedStuff)", "diff": ["-    //_log.log(\"getSymbolData(\" + className + \", \" + si + \", \" + resolve + \", \" + fromClassFile + \", \" + addError +", "-    //         \", \" + checkImportedStuff);", "+//    if (className.equals(\"Constant\")) throw new RuntimeException(\"getSymbol called on Constant\");", "+    ", "+//    if (className.equals(\"Object\")) ", "+//      System.err.println(\"getSymbolData(\" + className + \", \" + si + \", \" + resolve + \", \" + fromClassFile + \", \" + addError +", "+//             \", \" + checkImportedStuff);", "-    else { indexOfNextDot = 0; }", "+    else { indexOfNextDot = 0; }  // ABOMINABLE CODING", "+//      if (s.equals(\"fully.qualified.Woah\")) throw new RuntimeException(s + \" passed to helper and newResolve = \" + resolve );", "-        if (whatever != null) { return whatever;}", "+        if (whatever != null && whatever != SymbolData.NOT_FOUND) { return whatever; }", "-          ", "-          if (addError) {", "-            _addAndIgnoreError(\"Class \" + innerClassName + \" is not an inner class of the class \" + ", "-                               outerClass.getName(), ", "-                               new NullLiteral(si));", "-          }", "-          return null;", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "532571ad0ebb5b47df4e976dad2e660e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": "   protected SymbolData getSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                       boolean addError, boolean checkImportedStuff)", "signatureAfterChange": "   protected SymbolData getSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                       boolean addError, boolean checkImportedStuff)", "diff": ["-      SymbolData sd = ", "-        getSymbolData(className.substring(0, className.length() - 2), si, resolve, fromClassFile, addError, ", "-                      checkImportedStuff);", "-      if (sd == null) return null; // Should not happen", "+      String rawClassName = className.substring(0, className.length() - 2);", "+      SymbolData sd = getSymbolData(rawClassName, si, resolve, fromClassFile, addError, checkImportedStuff);", "+      if (sd == null) return null;   // Should only happen in tests.", "-      /* We want to resolve after every piece until the last one because we need to know", "-       * when we actually have a class so that we can tell that the rest of the pieces", "-       * are inner classes.  We use the resolve parameter's value for the last piece", "-       * since that means there are no inner classes", "+      /* We want to resolve after every piece until the last one because we need to know when we actually have a class", "+       * so that we can tell that the rest of the pieces are inner classes.  We use the resolve parameter's value for ", "+       * the last piece since that means there are no inner classes"]}], "num": 28967}
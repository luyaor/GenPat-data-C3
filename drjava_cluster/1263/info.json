{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09b421914a7e3f8018154bbde2c4c62e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891ded7acee28cc78115f71385b7ad41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 230, "signatureBeforeChange": "     public void removeRegion(final R region)", "signatureAfterChange": "     public void removeRegion(final R region)", "diff": ["-    public void removeRegion(final R region) {", "-      _regions.remove(region);", "-", "+    public void removeRegion(final R region) {      ", "+      // if we're removing the current region, select a more recent region, if available", "+      // if a more recent region is not available, select a less recent region, if available", "+      // if a less recent region is not available either, set to null", "+      final R cur = _current; // so we can verify if _current got changed", "+      if (region==cur) {", "+        if (nextCurrentRegion().equals(cur)) {", "+          if (prevCurrentRegion().equals(cur)) {", "+            _current = null;", "+          }", "+        }", "+      }", "+      for(int i=0;i<_regions.size();++i) {", "+        if (region==_regions.get(i)) {", "+          _regions.remove(i);", "+          break;", "+        }", "+      }", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d98c8c18d59f4f32aa0993be88f49a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "8de007bf6be2b43ee2e0404f529aa96c640a30ed", "commitAfterChange": "4b5efbc2650bf8411daae8d8fd509fcb4fe26da2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   private void init(boolean info)", "signatureAfterChange": "   private void init(boolean info)", "diff": ["+          for(JComponent c: _optionalComponents) {", "+            if (e.getOppositeComponent() == c) { return; }", "+          }", "+          for(JComponent c: _optionalComponents) {", "+            if (e.getOppositeComponent() == c) { return; }", "+          }", "+    _optionalComponents = makeOptions();", "+    if (_optionalComponents.length>0) {", "+      _optionsPanel = new JPanel(new BorderLayout());", "+      _setupOptionsPanel(_optionalComponents);", "+      contentPane.add(_optionsPanel, c);", "+    }", "+    ", "+  }"]}], "num": 1263}
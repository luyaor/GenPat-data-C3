{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b878223e6c4df13afbc7448f264e9563", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44c52c8f0597a959b009f50742436111", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "27cb6e93149c6a1991393a8ca4c655137f9f0cb6", "commitAfterChange": "dd2df9abefe60137729d1e2ed7d31fad6497b670", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["-    _openRecursiveCheckBox = new JCheckBox(\"Recursive open\");", "+    _openRecursiveCheckBox = new JCheckBox(\"Open folders recursively\");", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e0e35d2dcfacc684f6a947a65f8f14e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "446fca085832de922e13498a639705c809ef278b", "commitAfterChange": "84efde1b7fc541921ab4db44b478a2fdd3fb2da6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public JPanel _jarMainClassSelector()", "signatureAfterChange": "   public JPanel _jarMainClassSelector()", "diff": ["-    chooser.setTopMessage(\"Select the main doucment for the project:\");", "+    chooser.setTopMessage(\"Select the main document for the project:\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad1a98938572c5bd79d993938dd72dc2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/TigerTest.java", "commitBeforeChange": "a6c0afbadc103bc26f8a5c30f4735e1c0d62a541", "commitAfterChange": "f77d59d2a07360ad309276a41936f8bee75e9ad9", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "    public void testNoNullPointerExceptionForEmptyEnum()", "signatureAfterChange": "    public void testNoNullPointerExceptionForEmptyEnum()", "diff": ["-    assertEquals(\"Interpreting empty null should return a null\", null, interpret(testString));", "+    assertEquals(\"Interpreting empty enum should return a null\", null, interpret(testString));"]}], "num": 24431}
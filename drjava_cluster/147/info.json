{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00bae4ee9b6d8ba6875e4a48a7defb8c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bbaa2e946c113346670ab1c36f445c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerError.java", "commitBeforeChange": "7933cc364884763a44a085994870596faa04b316", "commitAfterChange": "b978cac1d85997e83464382e4a499c19d736223c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public int compareTo(Object o)", "signatureAfterChange": "   public int compareTo(Object o)", "diff": ["-   */", "+    */", "-      if (other.file() == null)", "-        // Errors with files are bigger", "-        return 1;", "-      else {", "-        // Compare by file", "+      // \"this\" has a file", "+      if (other.file() != null) {", "+         // \"this\" and other have files; compare them", "-        // Compare by position", "+        // This and other have equal files; compare positions", "+      else return 1; // Other has no file so \"this\" is bigger   ", "-    // My file is null", "-    if (other.file() == null) {", "-      // All else equal.", "-      //                           I'm a warning.                I'm not a warning.", "-      return (this.isWarning() ? (other.isWarning() ? 0 : 1) : (other.isWarning()? -1:0));", "-    }", "-    else return -1; // Errors without files are smaller", "+    // \"this\" has no file", "+    if (other.file() != null) return -1; // Other has a file so \"this\" is smaller", "+    // Neither error has a file", "+    boolean otherWarning = other.isWarning();", "+    return compareErrorWarning(other);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0caf6b0d575ade42f82d645032f3b5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "97a825e752ef3da28458a0080f0990b0f0659788", "commitAfterChange": "3f50a00dbfaba534529de5a114a9d7c30612e9a7", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["+", "+      ", "+      final boolean searchAll = _machine.getSearchAllDocuments();", "-      if (pos != -1) { // found a match", "-        Caret c = _defPane.getCaret();", "-        c.setDot(c.getDot());", "-        ", "-        if (! matchDoc.equals(openDoc)) {", "-          _model.setActiveDocument(matchDoc);  // set active doc if matchDoc != openDoc", "-        }", "-        else _model.refreshActiveDocument();  // in a wraparound search, the unmodified active document may have been kicked out of the cache!", "-        ", "-        _defPane.setCaretPosition(pos);", "-        _caretChanged = true;", "-        _updateMachine();", "-      }", "-      else {  // If searching all documents, the current document may have been kicked out of the cache", "-        _model.refreshActiveDocument();", "-      }", "-      ", "-      if (fr.getWrapped() && !_machine.getSearchAllDocuments()) {", "+       if (searchAll) {", "+         if (! matchDoc.equals(openDoc))  _model.setActiveDocument(matchDoc);  // set active doc if matchDoc != openDoc", "+         else _model.refreshActiveDocument();  // the unmodified active document may have been kicked out of the cache!", "+       } ", "+     ", "+      if (fr.getWrapped() && ! searchAll) {", "-        else  _frame.setStatusMessage(\"Search wrapped to end.\");", "+        else _frame.setStatusMessage(\"Search wrapped to end.\");", "-      if (fr.getAllDocsWrapped() && _machine.getSearchAllDocuments()) {", "+      if (fr.getAllDocsWrapped() && searchAll) {", "-      if (pos >= 0) {  // defer executing this code until after active document switch (if any) is complete", "+      if (pos >=0) { // found a match", "+         Caret c = _defPane.getCaret();", "+         c.setDot(c.getDot());", "+         _defPane.setCaretPosition(pos);", "+         _caretChanged = true;", "+         _updateMachine();", "+      ", "+      // defer executing this code until after active document switch (if any) is complete"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef9c4ba179d8efa499856948da12d61d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "b42121281abc84b5922f4d3c2653d8341fced477", "commitAfterChange": "6b690d7e50bc9f782260d6c38aaf261dfe0715e0", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["-      _machine.setFindWord(_findField.getText());", "+      final String findWord = _findField.getText();", "+      _machine.setFindWord(findWord);", "-            _selectFoundItem();", "+            _selectFoundOrReplacedItem(findWord.length());", "-        if (_machine.getFindWord().length() <= 50) statusMessage.append(_machine.getFindWord());", "-        else statusMessage.append(_machine.getFindWord().substring(0, 49) + \"...\");", "+        if (findWord.length() <= 50) statusMessage.append(findWord);", "+        else statusMessage.append(findWord.substring(0, 49) + \"...\");"]}], "num": 147}
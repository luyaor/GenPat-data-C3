{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84b40d8bd3125abcb20daf534447ec19", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27f87be45eaffa90bf9506acd89f41c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/NameVisitorExtension.java", "commitBeforeChange": "df1e36f71885ed44596fe30b7349f6c2af6222fa", "commitAfterChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Node visit(VariableDeclaration node)", "signatureAfterChange": "   public Node visit(VariableDeclaration node)", "diff": ["-    // TypeChecker", "-    Class lc = node.getType().acceptVisitor(_tc);", "-    Node init = node.getInitializer();", "-    if (init != null) {", "-      Class rc = init.acceptVisitor(_tc);", "-      _checkAssignmentStaticRules(lc, rc, node, init);", "-    }", "-", "+    /** ", "+     * The following commented code was moved into the actual ", "+     * AbstractTypeChecker to reduce duplication of code and", "+     * to fix some bugs", "+     */", "+//    // TypeChecker", "+//    Class lc = node.getType().acceptVisitor(_tc);", "+//    Node init = node.getInitializer();", "+//    if (init != null) {", "+//      Class rc = init.acceptVisitor(_tc);", "+//      _checkAssignmentStaticRules(lc, rc, node, init);", "+//    }", "+    _tc.preCheckVariableDeclaration(node);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b00eb04ff262c6be8c67bf9d7e188261", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public Object visit(VariableDeclaration node)", "signatureAfterChange": "   public Class visit(VariableDeclaration node)", "diff": ["-     */", "-    public Object visit(VariableDeclaration node) {", "-        // Define the variable", "-        Class lc = (Class)node.getType().acceptVisitor(this);", "-        if (node.isFinal()) {", "-            context.defineConstant(node.getName(), lc);", "-        } else {", "-            context.define(node.getName(), lc);", "-        }", "-", "-\tNode init = node.getInitializer();", "-        if (init != null) {", "-            Class rc = (Class)init.acceptVisitor(this);", "-            checkAssignmentStaticRules(lc, rc, node, init);", "-        }", "-        return null;", "-    }", "+   */", "+  public Class visit(VariableDeclaration node) {", "+    // Define the variable", "+    Class lc = (Class)node.getType().acceptVisitor(this);", "+    if (node.isFinal()) {", "+      context.defineConstant(node.getName(), lc);", "+    } else {", "+      context.define(node.getName(), lc);", "+    }", "+    ", "+    Node init = node.getInitializer();", "+    if (init != null) {", "+      Class rc = (Class)init.acceptVisitor(this);", "+      checkAssignmentStaticRules(lc, rc, node, init);", "+    }", "+    return null;", "+  }"]}], "num": 23860}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71d7876de9ba8e0c5cc168693d7f2365", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1396c346ce0b4478f7f7b5e5f954cc8f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionEvaluator.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private Object handleConstructor(Expression node, Expression outer, Iterable<Expression> args)", "signatureAfterChange": "   private Object handleConstructor(Expression node, Expression outer, Iterable<Expression> args)", "diff": ["-    Object outerVal = (outer == null) ? null : value(outer);", "+    Object outerVal;", "+    if (outer == null) {", "+      if (hasEnclosingThis(node)) { outerVal = _bindings.getThis(getEnclosingThis(node)); }", "+      else { outerVal = null; }", "+    }", "+    else { outerVal = value(outer); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d20d5a270c946595c47e434ab05bbe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void setOuterData(Data outerData)", "signatureAfterChange": "   public void setOuterData(Data outerData)", "diff": ["-    if (outerData == null) return;  // Throwing an exception is another option but why abort this translation?", "+    if (outerData == null) {", "+      assert _outerData == null; // Client code should not try to nullify a defined outerData value", "+      return;", "+    }"]}], "num": 18328}
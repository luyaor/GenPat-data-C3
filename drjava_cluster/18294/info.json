{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0b17720e7e39555354b7eeeb581345b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f0950ff4426003e07298961148ad8ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "45afdf26640d7e2a166ed67c249ba6fd207b1d2b", "commitAfterChange": "e7a6b9c5a51a2cf7b9cfb5a10d90c24a3c7c3844", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 121, "signatureBeforeChange": "          public void testShouldBreak()", "signatureAfterChange": "          public void testShouldBreak()", "diff": ["-      assertEquals(\"Should be 1 error\", 1, errors.size());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "-                   errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+//                   errors.getLast().getFirst());", "+    ", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 6 errors\", 6, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 7 errors\", 7, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise and expressions cannot be used at any language level.\" + ", "-                   \"  Perhaps you meant to compare two values using regular and (&&)\", errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise and expressions cannot be used at any language level.\" + ", "+//                   \"  Perhaps you meant to compare two values using regular and (&&)\", errors.getLast().getFirst());", "-      assertEquals(\"Should be 8 errors\", 8, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise or expressions cannot be used at any language level.\" + ", "-                   \"  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise or expressions cannot be used at any language level.\" + ", "+//                   \"  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "-      assertEquals(\"Should be 9 errors\", 9, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise xor expressions cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise xor expressions cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 10 errors\", 10, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise not expressions cannot be used at any language level.\" +", "-                   \"  Perhaps you meant to negate this value using regular not (!)\", errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise not expressions cannot be used at any language level.\" +", "+//                   \"  Perhaps you meant to negate this value using regular not (!)\", errors.getLast().getFirst());", "-      ", "-      assertEquals(\"Should be 11 error\", 11, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 12 errors\", 12, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 13 errors\", 13, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 14 errors\", 14, errors.size());", "+      assertEquals(\"Should be 1 error\", 1, errors.size());", "-      assertEquals(\"Should be 15 errors\", 15, errors.size());", "+      assertEquals(\"Should be 2 errors\", 2, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b40e4d5bfcefed557810955be384158", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "d933be24919e2ab110f61a795910708e74f868c4", "commitAfterChange": "e58ae584c79a105cf065f585a2d99664f4ef8788", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "          public void testForInterfaceDef()", "signatureAfterChange": "          public void testForInterfaceDef()", "diff": ["-      ", "-      //Test that if the interface extends java.lang.Runnable, then an error is thrown.", "-      InterfaceDef id3 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"JimesH\"),", "-                                  new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Runnable\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-      SymbolData sd = new SymbolData(\"JimesH\");", "-      sd.setIsContinuation(false);", "-      sd.setInterface(true);", "-      ", "-      symbolTable.clear();", "-      SymbolData runnableSd = new SymbolData(\"java.lang.Runnable\");", "-      runnableSd.setMav(_publicMav);", "-      runnableSd.setIsContinuation(false);", "-      runnableSd.setPackage(\"java.lang\");", "-      runnableSd.setInterface(true);", "-      sd.addInterface(runnableSd);", "-      symbolTable.put(\"JimesH\", sd);", "-      symbolTable.remove(\"java.lang.Runnable\");", "-      symbolTable.put(\"java.lang.Runnable\", runnableSd);", "+      /* The Runnable restriction has been dropped. */", "+//      //Test that if the interface extends java.lang.Runnable, then an error is thrown.", "+//      InterfaceDef id3 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"JimesH\"),", "+//                                  new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Runnable\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+//      SymbolData sd = new SymbolData(\"JimesH\");", "+//      sd.setIsContinuation(false);", "+//      sd.setInterface(true);", "+//      ", "+//      symbolTable.clear();", "+//      SymbolData runnableSd = new SymbolData(\"java.lang.Runnable\");", "+//      runnableSd.setMav(_publicMav);", "+//      runnableSd.setIsContinuation(false);", "+//      runnableSd.setPackage(\"java.lang\");", "+//      runnableSd.setInterface(true);", "+//      sd.addInterface(runnableSd);", "+//      symbolTable.put(\"JimesH\", sd);", "+//      symbolTable.remove(\"java.lang.Runnable\");", "+//      symbolTable.put(\"java.lang.Runnable\", runnableSd);", "+//", "+//      id3.visit(_btc);", "+//      assertEquals(\"There should be 3 errors now\", 3, errors.size());", "+//      assertEquals(\"The error message should be correct\", \"JimesH extends the Runnable interface, which is not allowed at any language level\", errors.get(2).getFirst());", "-      id3.visit(_btc);", "-      assertEquals(\"There should be 3 errors now\", 3, errors.size());", "-      assertEquals(\"The error message should be correct\", \"JimesH extends the Runnable interface, which is not allowed at any language level\", errors.get(2).getFirst());", "-", "-      //Test that an error is thrown if you implement a class", "+      // Test that an error is thrown if you implement a class", "-      assertEquals(\"There should be 4 errors now \", 4, errors.size());", "-      assertEquals(\"The error message should be correct\", \"superC is not an interface and thus cannot appear after the keyword 'extends' here\", errors.get(3).getFirst());", "+      assertEquals(\"There should be 3 errors now \", 3, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"superC is not an interface and thus cannot appear after the keyword 'extends' here\", ", "+                   errors.getLast().getFirst());", "-      //Test that no error is thrown if you implement an interface", "+      // Test that no error is thrown if you implement an interface", "-      assertEquals(\"There should still just be 4 errors\", 4, errors.size());", "+      assertEquals(\"There should still just be 3 errors\", 3, errors.size());", "-      //Test that if a public interface is in a file of the wrong name, an error is thrown.", "+      // Test that if a public interface is in a file of the wrong name, an error is thrown.", "-      assertEquals(\"There should be 5 errorrs\", 5, errors.size());", "-      assertEquals(\"The error message should be correct\", \"Bart is public thus must be defined in a file with the same name.\", errors.get(4).getFirst());", "+      assertEquals(\"There should be 4 errorrs\", 4, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"Bart is public thus must be defined in a file with the same name.\", ", "+                   errors.getLast().getFirst());", "-      //Test that if a public interface is in a file of the right name, no error is thrown.", "+      // Test that if a public interface is in a file of the right name, no error is thrown.", "-      assertEquals(\"There should still just be 5 errors\", 5, errors.size());", "+      assertEquals(\"There should still just be 4 errors\", 4, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79b4697c9bf094bf1f1ace8409687ed5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 97, "signatureBeforeChange": "          public void testGetSymbolData_FromFileSystem()", "signatureAfterChange": "          public void testGetSymbolData_FromFileSystem()", "diff": ["-      ", "-      SymbolData sd2 = new SymbolData(\"fully.qualified.Woah\");", "+      SymbolData sd2 = new SymbolData(\"fully.qualified.Woah\");  // continuation", "-      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, false, true);", "-      assertEquals(\"Should return sd2, now unresolved.\", sd2, result);", "-      assertTrue(\"sd2 should not be resolved\", sd2.isContinuation());", "-      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, false, true);", "+//      assertEquals(\"Should return sd2, now unresolved.\", sd2, result);", "+//      assertTrue(\"sd2 should not be resolved\", sd2.isContinuation());", "+//      assertEquals(\"Should be no errors\", 0, errors.size());", "-      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, true, true);", "-      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "-      assertFalse(\"sd2 should now be resolved\", sd2.isContinuation());   ", "-      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, true, true);", "+//      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "+//      assertFalse(\"sd2 should now be resolved\", sd2.isContinuation());   ", "+//      assertEquals(\"Should be no errors\", 0, errors.size());", "-      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, true, true);", "-      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "+//      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, true, true);", "+//      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "-      assertFalse(\"sd2 should be resolved\", sd2.isContinuation());", "-      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertFalse(\"sd2 should be resolved\", sd2.isContinuation());", "+//      assertEquals(\"Should be no errors\", 0, errors.size());", "-      _llv._file = new File (\"testFiles/Cool.dj0\");", "+      _llv._file = new File (\"testFiles/Cool.dj0\");  // non-existent file", "-      assertEquals(\"Result should be a symbol data corresponding to James\", \"James\", result.getName());", "-      assertEquals(\"Result should have 3 variables.\", 3, result.getVars().size());", "-      assertEquals(\"Should be no errors\", 0, errors.size());", "+      assertEquals(\"Search for James should fail\", null, result);", "+//      assertEquals(\"Result should have 3 variables.\", 3, result.getVars().size());", "+//      assertEquals(\"Should be no errors\", 0, errors.size());", "-      //returning KEEP_GOING when it doesn't exist.", "+      //returning NOT_FOUND when it doesn't exist.", "-      assertEquals(\"Should return KEEP_GOING-does not exist.\", SymbolData.KEEP_GOING, ", "+      assertEquals(\"Should return NOT_FOUND-does not exist.\", SymbolData.NOT_FOUND, ", "-      ", "-      assertEquals(\"should have correct variable datas\", vds, result.getVars());", "-      assertFalse(\"should not be a continuation\", result.isContinuation());", "+// Since some list elements are arrays, comparison test is suspect", "+//      assertEquals(\"should have correct variable datas\", vds, result.getVars());", "+//      assertFalse(\"should not be a continuation\", result.isContinuation());"]}], "num": 18294}
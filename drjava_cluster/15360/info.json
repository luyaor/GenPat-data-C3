{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3913072d1e84d1eb96e292155535bd6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a827d13dd29f3f149231135f774135", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/KeyStrokeOptionComponent.java", "commitBeforeChange": "762f9487498790edfa8d7b58c3d83cb6592af447", "commitAfterChange": "1ea7874872b93b44444c8711a298524cf05a221e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public KeyStrokeOptionComponent (KeyStrokeOption opt, String text, Frame parent)", "signatureAfterChange": "    public KeyStrokeOptionComponent (KeyStrokeOption opt, String text, final Frame parent)", "diff": ["-  public KeyStrokeOptionComponent (KeyStrokeOption opt, String text, Frame parent) {", "+", "+  public KeyStrokeOptionComponent (KeyStrokeOption opt, String text, final Frame parent) {", "-    _jtf = new JTextField();", "-    _jtf.setText(_option.format(DrJava.CONFIG.getSetting(_option)));", "+  ", "+    _ks = DrJava.CONFIG.getSetting(opt);", "+    _configKs = _ks;", "+    ", "+    _jb = new JButton();", "+    _jb.setBackground(Color.white);", "+    _jb.setText(_option.format(_ks));", "+    _jb.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent ae) {", "+", "+        if (_getKeyDialog == null) {", "+          _getKeyDialog =    ", "+            new GetKeyDialog(parent, ", "+                             \"Specify Shortcut\", ", "+                             true);", "+        }", "+", "+        _getKeyDialog.promptKey(KeyStrokeOptionComponent.this);", "+      }", "+    });", "+   ", "-    this.add(_label);//, BorderLayout.WEST);", "-    this.add(_jtf);//, BorderLayout.CENTER);", "+    this.add(_label);", "+    this.add(_jb);", "+    _keyToKSOC.put(_ks, this);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b65799e3436cfe1a293f24cc0a06bd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "diff": ["-      try {", "-        // First, get the class name to use.  This relies on Java's convention of", "-        // one top-level class per file.", "-        String className = getDocument().getQualifiedClassName();", "-        ", "-        // Then clear the current interaction and replace it with a \"java X\" line.", "-        InteractionsDocument iDoc = _interactionsModel.getDocument();", "-        ", "-        synchronized(_interpreterControl) {  // why is this synchronization here?", "+      ", "+      // Get the class name for this document, the first top level class in the document.", "+      final String className = getDocument().getQualifiedClassName();", "+      final InteractionsDocument iDoc = _interactionsModel.getDocument();", "+      if (! checkIfClassFileInSync()) {", "+        iDoc.insertBeforeLastPrompt(DOCUMENT_OUT_OF_SYNC_MSG, InteractionsDocument.ERROR_STYLE);", "+        return;", "+      }", "+      ", "+      _runMain = new DummyGlobalModelListener() {", "+        public void interpreterReady(File wd) {", "+          ", "+          // Load the proper text into the interactions document", "-          if (!checkIfClassFileInSync()) {", "-            iDoc.insertBeforeLastPrompt(DOCUMENT_OUT_OF_SYNC_MSG, InteractionsDocument.ERROR_STYLE);", "-          }", "+          ", "+", "-", "-          // Notify listeners that the file is about to be run.", "-          _notifier.runStarted(this);", "-", "-          // Finally, execute the new interaction.", "+          ", "+          // Finally, execute the new interaction and record that event", "+          _notifier.runStarted(ConcreteOpenDefDoc.this);", "+          SwingUtilities.invokeLater(new Runnable() {", "+            public void run() { ", "+              /* Remove _runMain listener AFTER this interpreterReady listener completes and DROPS it readLock on", "+               * _interactionsModel._notifier. */", "+              _interactionsModel.removeListener(_runMain);", "+            }", "+          });", "+          ", "-      }", "-      catch (EditDocumentException e) {", "-        // This was thrown by insertText - and shouldn't have happened.", "-        throw new UnexpectedException(e);", "-      }", "+      };", "+      ", "+      _interactionsModel.addListener(_runMain);", "+      ", "+      // Reset interactions to the soure root for this document; class will be executed when new interpreter is ready", "+      resetInteractions(getSourceRoot());", "+        "]}], "num": 15360}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f99ab0b44af80e3020c63ef1a28a12c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dc84c72180e61df27cb6bf3f0220c9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d187ef0ae751d72da55c4bc4f82be93731c1e46f", "commitAfterChange": "d8ed07c181201a238142caf2537f1e0f6da8bb42", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 152, "signatureBeforeChange": "    private void _setUpTabs()", "signatureAfterChange": "    private void _setUpTabs()", "diff": ["-    _outputPane = new OutputPane(_model);", "+    _consoleController = new ConsoleController(_model.getConsoleDocument(),", "+                                               _model.getSwingConsoleDocument());", "+    _consolePane = _consoleController.getPane();", "+    _model.setInputListener(_consoleController.getInputListener());", "+", "-    final JScrollPane outputScroll = ", "-      new BorderlessScrollPane(_outputPane);", "+    final JScrollPane consoleScroll = new BorderlessScrollPane(_consolePane);", "+    final JScrollPane interactionsScroll = new BorderlessScrollPane(_interactionsPane);", "-        if (_tabbedPane.getSelectedComponent() == outputScroll) {", "-          outputScroll.revalidate();", "-          outputScroll.repaint();", "+        if (_tabbedPane.getSelectedComponent() == interactionsScroll) {", "+          _interactionsPane.requestFocus();", "+        }", "+        else if (_tabbedPane.getSelectedComponent() == consoleScroll) {", "+//           consoleScroll.revalidate();", "+//           consoleScroll.repaint();", "+          _consolePane.requestFocus();", "-    _tabbedPane.add(\"Interactions\", new BorderlessScrollPane(_interactionsPane));", "-    _tabbedPane.add(\"Console\", outputScroll);", "+    _tabbedPane.add(\"Interactions\", interactionsScroll);", "+    _tabbedPane.add(\"Console\", consoleScroll);", "-    ", "-    // Select interactions pane when interactions tab is selected", "-    _tabbedPane.addChangeListener(new ChangeListener() {", "-      public void stateChanged(ChangeEvent e) {", "-      if (_tabbedPane.getSelectedIndex() == INTERACTIONS_TAB) {", "-        _interactionsPane.requestFocus();", "-      }", "-    }", "-    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af2ef78e1cf972b9ae31e4c9f69c1ecb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 240, "methodNumberAfterChange": 234, "signatureBeforeChange": "      public StaticMethodInvocation lookupStaticMethod(Type t, String name,                                                     final Iterable<? extends Type> typeArgs,                                                     final Iterable<? extends Expression> args,                                                    final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "      public StaticMethodInvocation lookupStaticMethod(Type t, String name,                                                     final Iterable<? extends Type> typeArgs,                                                     final Iterable<? extends Expression> args,                                                    final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-    MethodFinder<StaticMethodInvocation> finder = new MethodFinder<StaticMethodInvocation>(name, true) {", "-      public StaticMethodInvocationCandidate makeInvocationCandidate(DJMethod m, ClassType declaringType) {", "-        return new StaticMethodInvocationCandidate(m, declaringType, typeArgs, args, expected);", "-      }", "-    };", "-    return finder.findSingleMethod(t);", "+    FunctionInvocationCandidate<DJMethod> result =", "+        new MethodFinder(name, true).findSingleMethod(t, typeArgs, args, expected);", "+    DJMethod m = result.function();", "+    SubstitutionMap sigma = result.substitution();", "+    return new StaticMethodInvocation(m, substitute(m.returnType(), sigma), result.typeArguments(),", "+                                      result.arguments(), substitute(m.thrownTypes(), sigma));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b24460bca064106018333e48d5898492", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "b9f87cd074abdafacdb2719b29e0803fd0f81cf0", "commitAfterChange": "04d7824a20eb03ad17793ba3198be21442313bdc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r   public boolean requestFocusInWindow()", "signatureAfterChange": "   public boolean requestFocusInWindow()", "diff": ["-   */\r", "-  public boolean requestFocusInWindow() {\r", "-    // Only change GUI from event-dispatching thread\r", "-    Runnable doCommand = new Runnable() {\r", "-      public void run() {\r", "-        // Update all tree nodes\r", "-        Enumeration documents = _regionRootNode.children();\r", "-        boolean found = false;\r", "-        while ((!found) && (documents.hasMoreElements())) {\r", "-          DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();          \r", "-          // Find the correct start offset node for this region\r", "-          Enumeration existingRegions = doc.children();\r", "-          while (existingRegions.hasMoreElements()) {\r", "-            DefaultMutableTreeNode existing = (DefaultMutableTreeNode)existingRegions.nextElement();\r", "-            _regTreeModel.nodeChanged(existing);\r", "-          }\r", "-          _regTreeModel.nodeChanged(doc);\r", "-        }\r", "-        updateButtons();\r", "-      }\r", "-    };\r", "-    Utilities.invokeLater(doCommand);\r", "-    return super.requestFocusInWindow();\r", "-  }\r", "+    * efficient. */", "+  public boolean requestFocusInWindow() {", "+    assert EventQueue.isDispatchThread();", "+    long newTime = System.currentTimeMillis();", "+    if (newTime - _lastFocusTime > UPDATE_THRESHOLD) {", "+      _lastFocusTime = newTime;", "+      // Update all tree nodes", "+      Enumeration docNodes = _rootNode.children();", "+      while (docNodes.hasMoreElements()) {", "+        DefaultMutableTreeNode docNode = (DefaultMutableTreeNode)docNodes.nextElement();          ", "+        // Find the correct start offset node for this region", "+        Enumeration regionNodes = docNode.children();", "+        while (regionNodes.hasMoreElements()) {", "+          DefaultMutableTreeNode regionNode = (DefaultMutableTreeNode) regionNodes.nextElement();", "+          _regTreeModel.nodeChanged(regionNode);", "+        }", "+        _regTreeModel.nodeChanged(docNode);", "+      }", "+    }", "+    updateButtons();", "+    return super.requestFocusInWindow();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc86a3c321b68476dd8e8b6fc0209be8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "998d49ab48c08c55f388485512c281814a54c029", "commitAfterChange": "a8b8b0a5cb85063013adcdf9293d0c9c540b8baa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testInterpretCurrentInteraction() throws EditDocumentException", "signatureAfterChange": "   public void testInterpretCurrentInteraction() throws Exception", "diff": ["-  public void testInterpretCurrentInteraction() throws EditDocumentException {", "+  public void testInterpretCurrentInteraction() throws Exception {", "-    final String code = \"int x = 3;\";", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        model.interpretCurrentInteraction();", "-//        model.replReturnedVoid(); // pretend call completed", "-      } ", "-    });", "+    model._logInteractionStart();", "+    model.interpretCurrentInteraction();", "+    model._waitInteractionDone();", "+    final String code = \"int x = 3;\";", "-        model.interpretCurrentInteraction();", "-//        model.replReturnedVoid(); ", "+//    System.err.println(\"doc = '\" + doc.getText() + \"'\");", "+    assertTrue(\"Code appended correctly to interactions document\", doc.getText().endsWith(code));", "+//    System.err.println(\"currentInteraction = '\" + doc.getCurrentInteraction() + \"'\");", "+    Utilities.clearEventQueue();", "+    assertTrue(\"Current interaction text is correct\", doc.getCurrentInteraction().equals(code));", "+    ", "+    model._logInteractionStart();", "+    model.interpretCurrentInteraction(); // runs in the event queue ", "+    model._waitInteractionDone();", "+"]}], "num": 19463}
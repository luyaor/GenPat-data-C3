{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43b34beaf8d0b18e64db264e322ccffb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181b25ce548e2d4e1808ab7407e2afa8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "commitAfterChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public void testSuiteEnded(JUnitError[] errors)", "signatureAfterChange": "   public void testSuiteEnded(final JUnitError[] errors)", "diff": ["-  public void testSuiteEnded(JUnitError[] errors) {", "+  public void testSuiteEnded(final JUnitError[] errors) {", "-    ", "-    List<File> files = new ArrayList<File>();", "-    for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()) { files.add(odd.getRawFile()); }", "+    Utilities.invokeLater(new Runnable() { public void run() { ", "+      List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()) { files.add(odd.getRawFile()); }", "-    for(JUnitError e: errors){", "-      try {", "-        e.setStackTrace(_compilerModel.getLLSTM().replaceStackTrace(e.stackTrace(),files));", "-      } catch(Exception ex) { DrJavaErrorHandler.record(ex); }", "-      File f = e.file();", "-      if ((f != null) && (DrJavaFileUtils.isLLFile(f))) {", "-        String dn = DrJavaFileUtils.getJavaForLLFile(f.getName());", "-        StackTraceElement ste = new StackTraceElement(e.className(), \"\", dn, e.lineNumber());", "-        ste = _compilerModel.getLLSTM().replaceStackTraceElement(ste, f);", "-        e.setLineNumber(ste.getLineNumber());", "+      for(JUnitError e: errors){", "+        try {", "+          e.setStackTrace(_compilerModel.getLLSTM().replaceStackTrace(e.stackTrace(),files));", "+        } catch(Exception ex) { DrJavaErrorHandler.record(ex); }", "+        File f = e.file();", "+        if ((f != null) && (DrJavaFileUtils.isLLFile(f))) {", "+          String dn = DrJavaFileUtils.getJavaForLLFile(f.getName());", "+          StackTraceElement ste = new StackTraceElement(e.className(), \"\", dn, e.lineNumber());", "+          ste = _compilerModel.getLLSTM().replaceStackTraceElement(ste, f);", "+          e.setLineNumber(ste.getLineNumber());", "+        }", "-    }", "-    _junitErrorModel = new JUnitErrorModel(errors, _model, true);", "-    _notifyJUnitEnded();", "-    _testInProgress = false;", "+      _junitErrorModel = new JUnitErrorModel(errors, _model, true);", "+      _notifyJUnitEnded();", "+      _testInProgress = false;", "+    }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e52f669728e52a1407b6703103eaad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/LanguageLevelStackTraceMapper.java", "commitBeforeChange": "cc814c34f96bfde67f8ae465727b510fa3ed34c9", "commitAfterChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private boolean matches(File f, StackTraceElement s)", "signatureAfterChange": "   private boolean matches(File f, StackTraceElement s)", "diff": ["-    OpenDefinitionsDocument d;      ", "-    try { d = aGModel.getDocumentForFile(f); }", "-    catch(java.io.IOException e) { return false; }", "+//    OpenDefinitionsDocument d;      ", "+//    try { d = aGModel.getDocumentForFile(f); }", "+//    catch(java.io.IOException e) { return false; }", "+//    ", "+//    String dn = d.getRawFile().getName();", "-    String dn = d.getRawFile().getName();", "+    String fn = f.getPath();  // a relative path because traces use relative paths for files.", "-    if (!DrJavaFileUtils.isLLFile(dn)) return false;", "+    if (! DrJavaFileUtils.isLLFile(fn)) return false;", "-    dn = DrJavaFileUtils.getJavaForLLFile(dn);", "+    String javaFn = DrJavaFileUtils.getJavaForLLFile(fn);", "-// make sure packages match", "-    String dp = d.getPackageName();", "-    int dotPos = s.getClassName().lastIndexOf('.');", "-    if ((dp.length() == 0) && (dotPos >= 0)) return false; // d in default package, s not", "-    if ((dp.length() > 0) && (dotPos < 0)) return false; // s in default package, d not", "-    String sp = \"\";", "-    if (dotPos >= 0) sp = s.getClassName().substring(0, dotPos);", "-    if (! dp.equals(sp)) return false; // packages do not match", "+//    Utilities.show(\"Document file name is: \" + fn + \"\\nJava file name is: \" + javaFn + \"\\nStack file name is: \" + ", "+//                   s.getFileName() + \"\\nResult is: \" + javaFn.endsWith(s.getFileName()));", "+    ", "+//// make sure packages match", "+//    String dp = d.getPackageName();", "+//    int dotPos = s.getClassName().lastIndexOf('.');", "+//    if ((dp.length() == 0) && (dotPos >= 0)) return false; // d in default package, s not", "+//    if ((dp.length() > 0) && (dotPos < 0)) return false; // s in default package, d not", "+//    String sp = \"\";", "+//    if (dotPos >= 0) sp = s.getClassName().substring(0, dotPos);", "+//    if (! dp.equals(sp)) return false; // packages do not match", "-    return s.getFileName().equals(dn);", "+    return javaFn.endsWith(s.getFileName());  // names in trace elements are relative"]}], "num": 4787}
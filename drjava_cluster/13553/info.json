{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4b9417ce0ee618d45c7a598892f4419", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "443366f7b67f57c865b48a93f7de740e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 230, "signatureBeforeChange": "   public static <T> Predicate<T> and(final Iterable<? extends Predicate<? super T>> preds)", "signatureAfterChange": "   public static <T> Predicate<T> and(Iterable<? extends Predicate<? super T>> preds)", "diff": ["-  /** @return  The conjunction ({@code &&}) of the given predicates */", "-  public static <T> Predicate<T> and(final Iterable<? extends Predicate<? super T>> preds) {", "-    return new Predicate<T>() {", "-      public Boolean value(T arg) {", "-        for (Predicate<? super T> p : preds) { if (!p.value(arg)) { return false; } }", "-        return true;", "-      }", "-    };", "+  /** Produce the conjunction ({@code &&}) of the given predicates. */", "+  public static <T> Predicate<T> and(Iterable<? extends Predicate<? super T>> preds) {", "+    return new AndPredicate<T>(preds);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7b0132edcb71e3c294c090255773b1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 250, "signatureBeforeChange": "   public static <T> Predicate<T> or(final Iterable<? extends Predicate<? super T>> preds)", "signatureAfterChange": "   public static <T> Predicate<T> or(Iterable<? extends Predicate<? super T>> preds)", "diff": ["-  /** @return  The disjunction ({@code ||}) of the given predicates */", "-  public static <T> Predicate<T> or(final Iterable<? extends Predicate<? super T>> preds) {", "-    return new Predicate<T>() {", "-      public Boolean value(T arg) {", "-        for (Predicate<? super T> p : preds) { if (p.value(arg)) { return true; } }", "-        return false;", "-      }", "-    };", "-  }", "+  /** Produce the disjunction ({@code ||}) of the given predicates. */", "+  public static <T> Predicate<T> or(Iterable<? extends Predicate<? super T>> preds) {", "+    return new OrPredicate<T>(preds);", "+  }"]}], "num": 13553}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecc629a8866b485fbf1bfe88d52e2542", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b933ef9c89adf4006afa1d22f932926", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "ef7dc3345b6835fe8ebb574f1a9119ee4c786794", "commitAfterChange": "21836dcccd81c2207652ee85b319b723ac9ff10b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void testParse()", "signatureAfterChange": "    public void testParse()", "diff": ["-    assertTrue(_ivo.parse(\"[]\").isEmpty());", "-    assertTrue(_bvo.parse(\"[]\").isEmpty());", "+    assertTrue(_svo.parse(\"\").isEmpty());", "+    assertTrue(_bvo.parse(\"\").isEmpty());", "+    ", "+    Vector<String> v = _svo.parse(\"[]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"\", v.get(0));", "+    ", "+    v = _svo.parse(\"[x]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"x\", v.get(0));", "-    try { _ivo.parse(\"[,]\"); fail(\"Comma at beginning.\"); } ", "+    v = _svo.parse(\"[\\\\\\\\]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"\\\\\", v.get(0));", "+    ", "+    v = _svo.parse(\"[\\\\,]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\",\", v.get(0));", "+    ", "+    v = _svo.parse(\"[\\\\,]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\",\", v.get(0));", "+", "+    v = _svo.parse(\"[,]\");", "+    assertEquals(2, v.size());", "+    assertEquals(\"\", v.get(0));", "+    assertEquals(\"\", v.get(1));", "+    ", "+    try { _svo.parse(\"[\\\\x]\"); fail(\"Backslash not in front of another backslash or delimiter.\"); } ", "-    try { _ivo.parse(\"[11\"); fail(\"Missing footer.\"); } ", "-    catch (OptionParseException e) { }", "-    try { _ivo.parse(\"[11,]\"); fail(\"Comma w/o following list element.\"); } ", "+    try { _svo.parse(\"[11\"); fail(\"Missing footer.\"); } ", "-    try { _ivo.parse(\"11]\"); fail(\"Missing header.\"); } ", "+    v = _svo.parse(\"[11,]\");", "+    assertEquals(2, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"\", v.get(1));", "+    ", "+    try { _svo.parse(\"11]\"); fail(\"Missing header.\"); } ", "-    try { _ivo.parse(\"[11,,22]\"); fail(\"Missing list element.\"); } ", "-    catch (OptionParseException e) { }", "+    v = _svo.parse(\"[11,,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "-    try { _ivo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\"); } ", "-    catch (OptionParseException e) { }", "+    v = _svo.parse(\"[11,\\\\,,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\",\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "-    try { _ivo.parse(\"[11;22]\"); fail(\"Illegal delimiter.\"); } ", "+    v = _svo.parse(\"[11,abc\\\\,def,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"abc,def\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "+", "+    v = _svo.parse(\"[11,\\\\\\\\,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"\\\\\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "+", "+    try { _svo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\"); } ", "+    ", "+    try { _bvo.parse(\"[true;false]\"); fail(\"Illegal delimiter.\"); } ", "+    catch (OptionParseException e) { }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acda3ed474b31058227ca939297b5396", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "2de5de833fec6c0fefce3e0dfbb07764b1900707", "commitAfterChange": "fa036878036cfa9b3fdfb0b92616499d17bb99f7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "        public void testParse()", "signatureAfterChange": "      public void testParse()", "diff": ["-    public void testParse() {", "-\tVector<Integer> iv = new Vector<Integer>();", "-\t", "-\tassertTrue(_ivo.parse(\"[]\").isEmpty());", "-\tassertTrue(_bvo.parse(\"[]\").isEmpty());", "-\t", "-\ttry {", "-\t    _ivo.parse(\"[,]\"); fail(\"Comma at beginning.\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\ttry {", "-\t    _ivo.parse(\"[11\"); fail(\"Missing footer.\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\ttry {", "-\t    _ivo.parse(\"[11,]\"); fail(\"Comma w/o following list element.\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\ttry {", "-\t    _ivo.parse(\"11]\"); fail(\"Missing header.\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\ttry {", "-\t    _ivo.parse(\"[11,,22]\"); fail(\"Missing list element.\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\ttry {", "-\t    _ivo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\ttry {", "-\t    _ivo.parse(\"[11;22]\"); fail(\"Illegal delimiter.\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\t", "- \tVector<Boolean> bv = _bvo.parse(\"[true]\");", "-\t", "-\tassertEquals(1, bv.size()); ", "-\tassertEquals(Boolean.TRUE, bv.elementAt(0));", "-\t", "-\tbv = _bvo.parse(\"[true,false,true,true]\");", "-\t", "-\tassertEquals(4, bv.size()); ", "-\tassertEquals(Boolean.TRUE,  bv.elementAt(0)); ", "-\tassertEquals(Boolean.FALSE, bv.elementAt(1));", "-\tassertEquals(Boolean.TRUE,  bv.elementAt(2));", "-\tassertEquals(Boolean.TRUE,  bv.elementAt(3));", "-\t", "-\ttry {", "-\t    _bvo.parse(\"[11]\"); fail(\"Number instead of boolean.\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\ttry {", "-\t    _bvo.parse(\"[True]\"); fail(\"Boolean String needs to be lowercase.\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "+  ", "+  public void testParse() {", "+    Vector<Integer> iv = new Vector<Integer>();", "+    ", "+    assertTrue(_ivo.parse(\"[]\").isEmpty());", "+    assertTrue(_bvo.parse(\"[]\").isEmpty());", "+    ", "+    try {", "+      _ivo.parse(\"[,]\"); fail(\"Comma at beginning.\");", "+    } catch (OptionParseException e) {", "+    }", "+    try {", "+      _ivo.parse(\"[11\"); fail(\"Missing footer.\");", "+    } catch (OptionParseException e) {", "+    }", "+    try {", "+      _ivo.parse(\"[11,]\"); fail(\"Comma w/o following list element.\");", "+    } catch (OptionParseException e) {", "+    }", "+    try {", "+      _ivo.parse(\"11]\"); fail(\"Missing header.\");", "+    } catch (OptionParseException e) {", "+    }", "+    try {", "+      _ivo.parse(\"[11,,22]\"); fail(\"Missing list element.\");", "+    } catch (OptionParseException e) {", "+    }", "+    try {", "+      _ivo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\");", "+    } catch (OptionParseException e) {", "+    }", "+    try {", "+      _ivo.parse(\"[11;22]\"); fail(\"Illegal delimiter.\");", "+    } catch (OptionParseException e) {", "+    Vector<Boolean> bv = _bvo.parse(\"[true]\");", "+    ", "+    assertEquals(1, bv.size()); ", "+    assertEquals(Boolean.TRUE, bv.elementAt(0));", "+    ", "+    bv = _bvo.parse(\"[true,false,true,true]\");", "+    ", "+    assertEquals(4, bv.size()); ", "+    assertEquals(Boolean.TRUE,  bv.elementAt(0)); ", "+    assertEquals(Boolean.FALSE, bv.elementAt(1));", "+    assertEquals(Boolean.TRUE,  bv.elementAt(2));", "+    assertEquals(Boolean.TRUE,  bv.elementAt(3));", "+    ", "+    try {", "+      _bvo.parse(\"[11]\"); fail(\"Number instead of boolean.\");", "+    } catch (OptionParseException e) {", "+    try {", "+      _bvo.parse(\"[True]\"); fail(\"Boolean String needs to be lowercase.\");", "+    } catch (OptionParseException e) {", "+    }", "+  }"]}], "num": 23960}
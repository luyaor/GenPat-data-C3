{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c15d5b6a99bda2f3d855cb10a9d4632", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c7ad22bbc8f57f7e53c12f30df14c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "a068a65da96363415d4ffc6e29a7efc1f9fab2cd", "commitAfterChange": "dfe6c6e73e062ff4ec08707a0c96aef62a0a1709", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 55, "signatureBeforeChange": "          public InputBox(boolean endOfStream)", "signatureAfterChange": "               public InputBox(boolean endOfStream)", "diff": ["+      final InputMap im = getInputMap(WHEN_FOCUSED);", "+      final ActionMap am = getActionMap();", "+      ", "-      };", "-      ", "-      final InputMap im = getInputMap(WHEN_FOCUSED);", "+      };      ", "-      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,java.awt.Event.CTRL_MASK), INSERT_NEWLINE_NAME);", "-      ", "-      final ActionMap am = getActionMap();", "+      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,java.awt.Event.CTRL_MASK), INSERT_NEWLINE_NAME);      ", "+      ", "+      // Link undo/redo to this InputBox", "+      final UndoManager undo = new UndoManager();", "+      final Document doc = getDocument(); ", "+      ", "+      // Listen for undo and redo events", "+      doc.addUndoableEditListener(new UndoableEditListener() {", "+        public void undoableEditHappened(UndoableEditEvent evt) {", "+          undo.addEdit(evt.getEdit());", "+        }", "+      }); ", "+      ", "+      final Action undoAction = new AbstractAction(\"Undo\") {", "+        public void actionPerformed(ActionEvent e) {", "+          try {", "+            if (undo.canUndo()) { undo.undo(); }", "+          }", "+          catch (CannotUndoException cue) { } ", "+        }", "+      };", "+      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_UNDO)) { im.put(ks, UNDO_NAME); }", "+      am.put(UNDO_NAME, undoAction);", "+      final Action redoAction = new AbstractAction(\"Redo\") {", "+        public void actionPerformed(ActionEvent e) {", "+          try {", "+            if (undo.canRedo()) { undo.redo(); }", "+          }", "+          catch (CannotRedoException cue) { }", "+        }", "+      };", "+      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_REDO)) { im.put(ks, REDO_NAME); }", "+      am.put(REDO_NAME, redoAction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "916f92145820b8df020eda184dd44563", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "00c274c983090e9126b5a9ac7c84f4781adba195", "commitAfterChange": "f520b1b5f1b15642429d7c7844d7ac7a96f3e402", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testUndoEventsOccur()", "signatureAfterChange": "   public void testUndoEventsOccur()", "diff": ["-    final OpenDefinitionsDocument doc = _model.newFile();", "-    Utilities.invokeLater(new Runnable() {", "-      public void run() {", "-        // Have to add an undoable edit listener for Undo to work", "-        doc.addUndoableEditListener(new UndoableEditListener() {", "-          public void undoableEditHappened(UndoableEditEvent e) { ", "-//            System.err.println(\"undoableEditHappened(\" + e + \") called\");", "-            doc.getUndoManager().addEdit(e.getEdit()); ", "-          }", "-        });", "-      }", "-    });", "-    ", "-    TestListener listener = new TestListener() { ", "+    final TestListener listener = new TestListener() { ", "+    final OpenDefinitionsDocument doc = _model.newFile();", "+", "+    Utilities.clearEventQueue();", "+    ", "+        // Have to add an undoable edit listener for Undo to work", "+    doc.addUndoableEditListener(new UndoableEditListener() {", "+      public void undoableEditHappened(UndoableEditEvent e) { ", "+//            System.err.println(\"undoableEditHappened(\" + e + \") called\");", "+        doc.getUndoManager().addEdit(e.getEdit()); ", "+      }", "+    });", "-    ", "-//        Utilities.clearEventQueue();", "-    _model.removeListener(listener);", "-    listener.assertUndoableEditCount(1);", "-    ", "-    fail(\"Dump printed output\");", "-    ", "+        ", "+    Utilities.clearEventQueue();  // undoableEditHappened propagated using invokeLater", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        listener.assertUndoableEditCount(1);", "+        ", "+        _model.removeListener(listener);", "+      }", "+    });", "+    Utilities.clearEventQueue();", "-    "]}], "num": 7553}
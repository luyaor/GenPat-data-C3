{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa9f84cdd91b16837dbd57b24b4ae7b5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "099c118076c972c11a3e5259894c2f5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "          public void testForBitwiseBinaryExpressionOnly()", "signatureAfterChange": "          public void testForBitwiseBinaryExpressionOnly()", "diff": ["-      BitwiseBinaryExpression bbe = new BitwiseAndExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")), new IntegerLiteral(SourceInfo.NO_INFO, 2));", "+      BitwiseBinaryExpression bbe = ", "+        new BitwiseAndExpression(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")), ", "+                                 new IntegerLiteral(SourceInfo.NONE, 2));", "-        assertEquals(\"Exception message should be correct\", \"Internal Program Error: Bitwise operators are not supported.  This should have been caught before the TypeChecker.  Please report this bug.\", e.getMessage());", "+        assertEquals(\"Exception message should be correct\", ", "+                     \"Internal Program Error: Bitwise operators are not supported.  This should have been caught \"", "+                       + \"before the TypeChecker.  Please report this bug.\", e.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f6fc24c2422501779b6af89434185e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": "               public void testForConditionalExpressionOnly()", "signatureAfterChange": "               public void testForConditionalExpressionOnly()", "diff": ["-      ConditionalExpression cd = new ConditionalExpression(SourceInfo.NO_INFO, ", "-                                                           new BooleanLiteral(SourceInfo.NO_INFO, true),", "-                                                           new IntegerLiteral(SourceInfo.NO_INFO, 5),", "-                                                           new IntegerLiteral(SourceInfo.NO_INFO, 79));", "+      ConditionalExpression cd = new ConditionalExpression(SourceInfo.NONE, ", "+                                                           new BooleanLiteral(SourceInfo.NONE, true),", "+                                                           new IntegerLiteral(SourceInfo.NONE, 5),", "+                                                           new IntegerLiteral(SourceInfo.NONE, 79));", "-        assertEquals(\"Exception message should be correct\", \"Internal Program Error: Conditional expressions are not supported.  This should have been caught before the TypeChecker.  Please report this bug.\", e.getMessage());", "+        assertEquals(\"Exception message should be correct\", ", "+                     \"Internal Program Error: Conditional expressions are not supported.  This should have been \"", "+                       + \"caught before the TypeChecker.  Please report this bug.\", e.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e77ed7f2c76e45d8d75bf29e4496745f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": "               public void testForShiftBinaryExpressionOnly()", "signatureAfterChange": "               public void testForShiftBinaryExpressionOnly()", "diff": ["-      ShiftBinaryExpression sbe = new LeftShiftExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")), new IntegerLiteral(SourceInfo.NO_INFO, 42));", "+      ShiftBinaryExpression sbe = ", "+        new LeftShiftExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")), ", "+                                new IntegerLiteral(SourceInfo.NONE, 42));", "-        assertEquals(\"Exception message should be correct\", \"Internal Program Error: BinaryShifts are not supported.  This should have been caught before the TypeChecker.  Please report this bug.\", e.getMessage());", "+        assertEquals(\"Exception message should be correct\", ", "+                     \"Internal Program Error: BinaryShifts are not supported.  This should have been caught before \"", "+                       + \"the TypeChecker.  Please report this bug.\", e.getMessage());"]}], "num": 18123}
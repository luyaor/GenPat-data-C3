{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a9a63c2cca521eba7ba27d5b55d543a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85dced2414ed4c899aad9303ad0d9d99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/SavableConfiguration.java", "commitBeforeChange": "7bc6765693343476fc2f77685ee6bc931bf3b3f3", "commitAfterChange": "7f2688df99750a8a6042f231ca2bc23d3f2c923c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void saveConfiguration(OutputStream os, String header) throws IOException", "signatureAfterChange": "   public void saveConfiguration(OutputStream os, String header) throws IOException", "diff": ["+    OutputStreamWriter osw = new OutputStreamWriter(os);", "-    Properties p = new Properties();", "+    //Properties p = new Properties();", "+    String tmpString;", "+    StringBuffer buff;", "+    OptionParser key;", "+    Date date = new Date();", "+    osw.write((int)'#');", "+    osw.write(header, 0, header.length());", "+    osw.write((int)'\\n');", "+    osw.write((int)'#');", "+    osw.write(date.toString(), 0, date.toString().length());", "+    osw.write((int)'\\n');", "-      OptionParser key = keys.nextElement();", "-      p.setProperty(key.getName(),map.getString(key));", "+      key = keys.nextElement();", "+      tmpString = key.getName();", "+      osw.write(tmpString, 0, tmpString.length());", "+      tmpString = \" = \";", "+      osw.write(tmpString, 0, 3);", "+      tmpString = map.getString(key);", "+      // This replaces all backslashes with two backslashes for windows", "+      int index = 0;", "+      int pos;", "+      while (index < tmpString.length() && ", "+             ((pos = tmpString.indexOf('\\\\', index)) >= 0)) {", "+        buff = new StringBuffer(tmpString);", "+        buff.insert(pos, '\\\\');", "+        index = pos + 2;", "+        tmpString = buff.toString();", "+      }", "+      osw.write(tmpString, 0, tmpString.length());", "+      osw.write((int)'\\n');", "+     // p.setProperty(key.getName(),map.getString(key));", "-    p.store(os,header);", "+    osw.close();", "+    //p.store(os,header)", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85e703c20d74197232b3a9337b50ec43", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 59, "signatureBeforeChange": "          private void compare(Node left, Node right)", "signatureAfterChange": "          private void compare(String context, Node left, Node right)", "diff": ["-    private void compare(Node left, Node right) {", "+    ", "+    private void compare(String context, Node left, Node right) {", "+        if (left instanceof Statement || left instanceof VariableDeclaration || left instanceof Expression) {", "+          if (hasNestedError(left) || hasNestedError(right)) {", "+            _log.statementWithError(context, left, right);", "+            return;", "+          }", "+        }", "+        if (NodeProperties.hasMethod(left)) {", "+          DJMethod m = NodeProperties.getMethod(left);", "+          if (left instanceof MethodCall && !IterUtil.isEmpty(m.typeParameters())) {", "+            _log.polymorphicInvocation(context, left, right, ((MethodCall) left).getTypeArgs().isNone());", "+          }", "+        }", "+        if (NodeProperties.hasConstructor(left)) {", "+          DJConstructor k = NodeProperties.getConstructor(left);", "+          if (!IterUtil.isEmpty(k.typeParameters())) {", "+            Boolean inferred = null;", "+            if (left instanceof ConstructorCall) { inferred = true; } // doesn't support targs for now", "+            else if (left instanceof SimpleAllocation) { inferred = ((SimpleAllocation) left).getTypeArgs().isNone(); }", "+            else if (left instanceof InnerAllocation) { inferred = ((InnerAllocation) left).getTypeArgs().isNone(); }", "+            if (inferred != null) { _log.polymorphicInvocation(context, left, right, inferred); }", "+          }", "+        }", "+        Field props;", "+        try { props = Node.class.getDeclaredField(\"properties\"); }", "+        catch (NoSuchFieldException e) { throw new RuntimeException(e); }", "+        compareProperties(left.getClass(), (Map<?,?>) fieldValue(props, left), left,", "+                          (Map<?,?>) fieldValue(props, right), right);", "-        mismatch(\"Different node classes\", left.getClass().getName(), left, right.getClass().getName(), right);", "+        _log.mismatch(\"Different classes\", context, left.getClass().getName(), left,", "+                      right.getClass().getName(), right);", "-      Field props;", "-      try { props = Node.class.getDeclaredField(\"properties\"); }", "-      catch (NoSuchFieldException e) { throw new RuntimeException(e); }", "-      compareProperties((Map<?,?>) fieldValue(props, left), left, (Map<?,?>) fieldValue(props, right), right);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3686906195256a4ee6dfe0010064613", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "a6ad77fef884f528ddfb31a18f08f168fcd5e3f2", "commitAfterChange": "20e19df5b6c16c841aeff102df396402e35bacf3", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public void testSuiteEnded(JUnitError[] errors)", "signatureAfterChange": "   public void testSuiteEnded(JUnitError[] errors)", "diff": ["+    ", "+    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+    List<File> files = new ArrayList<File>();", "+    for(OpenDefinitionsDocument odd: docs){", "+      File f = odd.getRawFile();", "+      if (f.getName().endsWith(\".dj0\") ||", "+          f.getName().endsWith(\".dj1\") ||", "+          f.getName().endsWith(\".dj2\")) files.add(f); ", "+    }", "+    for(JUnitError e: errors){", "+      e.setStackTrace(_compilerModel.getLLSTM().replaceStackTrace(e.stackTrace(),files));", "+      File f = e.file();", "+      if (f.getName().endsWith(\".dj0\") ||", "+          f.getName().endsWith(\".dj1\") ||", "+          f.getName().endsWith(\".dj2\")) {", "+        String dn = f.getName();", "+        dn = dn.substring(0, dn.lastIndexOf('.'))+\".java\";", "+        StackTraceElement ste = new StackTraceElement(e.className(), \"\", dn, e.lineNumber());", "+        ste = _compilerModel.getLLSTM().replaceStackTraceElement(ste, f);", "+        e.setLineNumber(ste.getLineNumber());", "+      }", "+    }"]}], "num": 6313}
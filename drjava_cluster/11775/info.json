{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0137c2be7418f53c4f4dde2652db2ed6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b3d644f8c669fce9ec7f696caeac03b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   public TypeData forArrayInitializer(ArrayInitializer that)", "signatureAfterChange": "   public TypeData forArrayInitializer(ArrayInitializer that)", "diff": ["-    throw new RuntimeException(\"Internal Program Error: forArrayInitializer should never be called, but it was.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: forArrayInitializer should never be called, but it was.\" + ", "+                               \"  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "174d8238bcd34cd2417ef28380802df3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected Data _getData()", "signatureAfterChange": "   protected Data _getData()", "diff": ["-  /**The top level type checker does not have a data*/", "+  /**The top level type checker does not have a data */", "-    throw new RuntimeException(\"Internal Program Error: _getData() shouldn't get called from TypeChecker.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: _getData() shouldn't get called from TypeChecker.  \" +", "+                               \"Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b5c703923db747bb746f5942e8d38b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   protected static void _addAndIgnoreError(String message, JExpressionIF that)", "signatureAfterChange": "   protected static void _addAndIgnoreError(String message, JExpressionIF that)", "diff": ["-      throw new RuntimeException(\"Internal Program Error: _addAndIgnoreError called while _errorAdded was true.  Please report this bug.\");", "+      throw new RuntimeException(\"Internal Program Error: _addAndIgnoreError called while _errorAdded was true.\" + ", "+                                 \"  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a990e6e68d637bed7b396b565aed7cda", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public SymbolData handleAnonymousClassInstantiation(AnonymousClassInstantiation that, SymbolData superC)", "signatureAfterChange": "   public SymbolData handleAnonymousClassInstantiation(AnonymousClassInstantiation that, SymbolData superC)", "diff": ["-   */", "+    */", "-      throw new RuntimeException(\"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\");", "+      throw new RuntimeException(\"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.\" + ", "+                                 \"  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae19448fa0a5a30d4b150adb912b5264", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 91, "signatureBeforeChange": "   public void addMethod(MethodData method, boolean isAugmentedCode)", "signatureAfterChange": "   public void addMethod(MethodData method, boolean isAugmentedCode)", "diff": ["-      LanguageLevelVisitor.errors.addLast(new Pair<String, JExpressionIF>(\"This method's signature conflicts with an automatically generated method's signature\", ", "-                                                                        md.getJExpression()));", "+      LanguageLevelVisitor.errors.", "+        addLast(new Pair<String, JExpressionIF>(\"This method's signature conflicts with an automatically generated \"", "+                                                  + \"method's signature\", ", "+                                                md.getJExpression()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2728958c2898d7254208a977180ef17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.  Please report this bug.\");}", "+    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "+                                     \"  Please report this bug.\");}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec64ff1aa5723361110826e7849188c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public Void forAnonymousClassInstantiation(AnonymousClassInstantiation e)", "signatureAfterChange": "   public Void forAnonymousClassInstantiation(AnonymousClassInstantiation e)", "diff": ["-      throw new RuntimeException(\"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\");", "+      throw new RuntimeException(\"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.\" +", "+                                 \"  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa39ffbabedfde7e5d0307647067c7d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, Data enclosing, boolean isClass)", "signatureAfterChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName,                                            Data enclosing, boolean isClass)", "diff": ["-  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, Data enclosing, boolean isClass) {", "+  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, ", "+                                          Data enclosing, boolean isClass) {", "-    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.  Please report this bug.\");}", "+    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "+                                     \"  Please report this bug.\");}"]}], "num": 11775}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cedd8e00a00005226019f28a08d28af", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "713a3052278edf40c7048c54a7f8c094", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 213, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["+//        System.err.println(\"saveFileAs called\");", "+//        System.err.println(\"saveFileAs called on \" + file);", "-        boolean shouldSave = false;", "-        boolean openInOtherDoc = ((otherDoc != null) && (openDoc != otherDoc));", "+", "-        if (openInOtherDoc) shouldSave = com.warnFileOpen(file);", "-          // Can't save over an open document", "+        boolean openInOtherDoc = ((otherDoc != null) && (openDoc != otherDoc));", "-        // If the file exists, make sure it's ok to overwrite it", "-        if ((shouldSave && openInOtherDoc) || ", "-            (!openInOtherDoc && (!file.exists() || com.verifyOverwrite()))) {", "+        // If the file is open in another document, abort if user does not confirm overwriting it", "+        if (openInOtherDoc) {", "+          boolean shouldOverwrite = com.warnFileOpen(file);", "+          if (! shouldOverwrite) return true; // operation not cancelled?  Strange", "+        }", "+        ", "+        if (! file.exists() || com.verifyOverwrite()) {  // confirm that existing file can be overwritten", "+          ", "+//          System.err.println(\"Writing file \" + file);", "+//          System.err.println(\"Calling FileOps.saveFile to save it\");", "-              try { _editorKit.write(os, doc, 0, doc.getLength()); } ", "+              try { ", "+                doc.acquireReadLock();  // Technically required, but looks like overkill.", "+                _editorKit.write(os, doc, 0, doc.getLength());", "+                doc.releaseReadLock();", "+//                Utilities.show(\"Wrote file containing:\\n\" + doc.getText());", "+              } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9af590235f1c0004e911e7a7fdcd030d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "93940c21f6995f648e815e21c209f78be7209afc", "commitAfterChange": "a81421c85ea0de5b8b8c763de6071719d4028205", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "   private File[] getChosenFiles(JFileChooser fc, int choice)     throws OperationCanceledException", "signatureAfterChange": "   private File[] getChosenFiles(JFileChooser fc, int choice)     throws OperationCanceledException", "diff": ["-            throw new RuntimeException(\"filechooser returned null file\");", "+            throw new UnexpectedException(new OperationCanceledException(), \"filechooser returned null file\");", "-        ", "-        // this new File[] { null } is totally unaccounted for in originating", "-        // method calls", "-        //if (chosen.length == 0) chosen = new File[] { null };", "-        if (chosen.length == 0) { throw new OperationCanceledException(); }", "-        ", "-        if (chosen[0] == null) { ", "-          // why was this here? we shouldn't expect to get", "-          // something totally new from fc.", "-          //chosen[0] = fc.getSelectedFile();", "-          throw new OperationCanceledException();", "+        // If this is a single-selection dialog, getSelectedFiles() will always", "+        // return a zero-size array -- handle it differently.", "+        if (chosen.length == 0) {", "+          if (!fc.isMultiSelectionEnabled()) {", "+            return new File[] { fc.getSelectedFile() };", "+          }", "+          else {", "+            /* This is the workaround for bug 70902: sometimes Mac OS X will return", "+             * APPROVE_OPTION when the user clicks the close (x) control button", "+             * on the dialog window, even though nothing is selected.", "+             */", "+            throw new OperationCanceledException();", "+          }", "-        return chosen;", "+        else {", "+          return chosen;", "+        }", "-        throw  new RuntimeException(\"filechooser returned bad rc \" + choice);", "+        throw new UnexpectedException(new OperationCanceledException(), \"filechooser returned bad rc \" + choice);"]}], "num": 17731}
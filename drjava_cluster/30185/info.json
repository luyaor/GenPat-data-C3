{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b26bd16b74a9a0d1a93d4e47fa9108f2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22e20df5b1cd8acb2f6b5f599f773346", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void testReopenFile() throws BadLocationException, IOException", "signatureAfterChange": "   public void testReopenFile() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestFileIOListener(tempFile);", "+    final TestListener listener = new TestFileIOListener(tempFile);", "-    try {", "-      OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "-      listener.assertOpenCount(1);", "-      listener.assertCloseCount(1);  //  Untitled document closed when doc is opened", "-      assertModified(false, doc);", "-      assertContents(BAR_TEXT, doc);", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);  //  Untitled document closed when doc is opened", "+          assertModified(false, doc);", "+          assertContents(BAR_TEXT, doc);", "+        }", "+        catch (AlreadyOpenException aoe) {", "+          // Should not be open", "+          fail(\"File was already open!\");", "+        }", "+        catch (OperationCanceledException oce) {", "+          // Should not be canceled", "+          fail(\"Open was unexpectedly canceled!\");", "+        }", "+        catch (Exception e) {", "+          // Should not happen", "+          fail(\"Exception thrown in testReopenFile().  Traceback: \" + e);", "+        }", "+      }", "+    });", "-    try {", "-      //OpenDefinitionsDocument doc2 =", "-      _model.openFile(new FileSelector(tempFile));", "-      fail(\"file should already be open\");", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      listener.assertOpenCount(1);", "-      listener.assertCloseCount(1);  ", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          //OpenDefinitionsDocument doc2 =", "+          _model.openFile(new FileSelector(tempFile));", "+          fail(\"file should already be open\");", "+        }", "+        catch (AlreadyOpenException aoe) {", "+          // Should not be opened", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);  ", "+        }", "+        catch (OperationCanceledException oce) {", "+          // Should not be canceled", "+          fail(\"Open was unexpectedly canceled!\");", "+        }", "+        catch (Exception e) {", "+          // Should not happen", "+          fail(\"Exception thrown in testReopenFile().  Traceback: \" + e);", "+        }", "+      }", "+    });", "-    try {", "-      File parent = tempFile.getParentFile();", "-      String dotSlash = \".\" + System.getProperty(\"file.separator\");", "-      parent = new File(parent, dotSlash);", "-      File sameFile = new File(parent, tempFile.getName());", "-      //OpenDefinitionsDocument doc2 =", "-      _model.openFile(new FileSelector(sameFile));", "-      fail(\"file should already be open\");", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      listener.assertOpenCount(1);", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          File parent = tempFile.getParentFile();", "+          String dotSlash = \".\" + System.getProperty(\"file.separator\");", "+          parent = new File(parent, dotSlash);", "+          File sameFile = new File(parent, tempFile.getName());", "+          //OpenDefinitionsDocument doc2 =", "+          _model.openFile(new FileSelector(sameFile));", "+          fail(\"file should already be open\");", "+        }", "+        catch (AlreadyOpenException aoe) {", "+          // Should not be open", "+          listener.assertOpenCount(1);", "+        }", "+        catch (OperationCanceledException oce) {", "+          // Should not be canceled", "+          fail(\"Open was unexpectedly canceled!\");", "+        }", "+        catch (Exception e) {", "+          // Should not happen", "+          fail(\"Exception thrown in testReopenFile().  Traceback: \" + e);", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c14d688b265d718df0d239bf327e67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ConfigFrame(MainFrame frame)", "signatureAfterChange": "   public ConfigFrame(MainFrame frame)", "diff": ["+    ", "+    Action applyAction = new AbstractAction(\"Apply\") {", "+      public void actionPerformed(ActionEvent e) {", "+        // Always save settings", "+        try {", "+//          _mainFrame.enableResetInteractions();", "+          saveSettings(); ", "+          _applyButton.setEnabled(false); ", "+          ", "+        }", "+        catch (IOException ioe) {", "+        }", "+      }", "+    };", "+", "+    _applyButton = new JButton(applyAction);", "+    _applyButton.setEnabled(false);", "+    ", "+    Action okAction = new AbstractAction(\"OK\") {", "+      public void actionPerformed(ActionEvent e) {", "+        // Always apply and save settings", "+        boolean successful = true;", "+        try {", "+//          _mainFrame.enableResetInteractions();", "+          successful = saveSettings();", "+        }", "+        catch (IOException ioe) {", "+          // oh well...", "+        }", "+        if (successful) _applyButton.setEnabled(false);", "+        ConfigFrame.this.setVisible(false);", "+      }", "+    };", "+    _okButton = new JButton(okAction);", "+", "+", "+    Action cancelAction = new AbstractAction(\"Cancel\") {", "+      public void actionPerformed(ActionEvent e) {", "+        cancel();", "+      }", "+    };", "+    _cancelButton = new JButton(cancelAction);", "+", "-    _fileOptionChooser.setDialogTitle(\"Select\");", "-    _fileOptionChooser.setApproveButtonText(\"Select\");", "-    _fileOptionChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);", "-    _fileOptionChooser.setFileFilter(ClassPathFilter.ONLY);", "-    _browserChooser.setDialogTitle(\"Select Web Browser\");", "-    _browserChooser.setApproveButtonText(\"Select\");", "-    _browserChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);", "+    ", "-    _dirChooser.setSelectedFile(_getWorkDir());", "-    _dirChooser.setDialogTitle(\"Select\");", "-    _dirChooser.setApproveButtonText(\"Select\");", "-    _dirChooser.setMultiSelectionEnabled(false);", "+  ", "-    _createTree();", "+    /* Create tree and initialize tree. */", "+    _rootNode = new PanelTreeNode(\"Preferences\");", "+    _treeModel = new DefaultTreeModel(_rootNode);", "+    _tree = new JTree(_treeModel);", "+    ", "+    _initTree();", "+    ", "+    /* Create Panels. */", "-    /*", "-    _splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,", "-                                treeScroll,", "-                                _mainPanel);", "-    cp.add(_splitPane, BorderLayout.CENTER);", "-    */", "-", "-    Action okAction = new AbstractAction(\"OK\") {", "-      public void actionPerformed(ActionEvent e) {", "-        // Always apply and save settings", "-        boolean successful = true;", "-        try {", "-//          _mainFrame.enableResetInteractions();", "-          successful = saveSettings();", "-        }", "-        catch (IOException ioe) {", "-          // oh well...", "-        }", "-        if (successful) {", "-          _applyButton.setEnabled(false);", "-        }", "-        ConfigFrame.this.setVisible(false);", "-      }", "-    };", "-    _okButton = new JButton(okAction);", "-", "-    Action applyAction = new AbstractAction(\"Apply\") {", "-      public void actionPerformed(ActionEvent e) {", "-        // Always save settings", "-        try {", "-//          _mainFrame.enableResetInteractions();", "-          saveSettings(); ", "-          _applyButton.setEnabled(false); ", "-  ", "-        }", "-        catch (IOException ioe) {", "-        }", "-      }", "-    };", "-    _applyButton = new JButton(applyAction);", "-    _applyButton.setEnabled(false);", "-", "-    Action cancelAction = new AbstractAction(\"Cancel\") {", "-      public void actionPerformed(ActionEvent e) {", "-        cancel();", "-      }", "-    };", "-    _cancelButton = new JButton(cancelAction);", "-", "-    /* Now always saves settings...", "-    _saveSettingsButton = new JButton(\"Save Settings\");", "-    _saveSettingsButton.setToolTipText(\"Save all settings to disk for future sessions.\");", "-    _saveSettingsButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        saveSettings();", "-      }", "-    });", "-    */", "-//    int width = getWidth() / 4;", "-//    System.out.println(\"width: \" + getWidth());", "-//    System.out.println(\"width for divider: \" + width);", "-//    _splitPane.setDividerLocation(width);", "-//    _mainPanel.setPreferredSize(new Dimension(getWidth() - width,", "-//                                              _splitPane.getHeight()));", "+", "+  }"]}], "num": 30185}
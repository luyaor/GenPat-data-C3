{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46096db7410fc4606b72dba83296e92a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cbb35f173aef61ae8456817bb88eeb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void testPromptListClearedOnReset() throws Exception", "signatureAfterChange": "      public void testPromptListClearedOnReset() throws Exception", "diff": ["+    ", "+    Utilities.clearEventQueue();", "-    ", "-    assertEquals(\"PromptList before insert should contain 0 elements\",", "-                 0, _pane.getPromptList().size());", "+    _pane.resetPrompts();", "+", "+    Utilities.clearEventQueue();", "+//    System.err.println(_pane.getPromptList());", "+    assertEquals(\"PromptList before insert should contain 0 elements\", 0, _pane.getPromptList().size());", "-    assertEquals(\"PromptList after insert should contain 1 element\",", "-                 1, _pane.getPromptList().size());    ", "+    Utilities.clearEventQueue();", "+    assertEquals(\"PromptList after insert should contain 1 element\", 1, _pane.getPromptList().size());    ", "-    assertEquals(\"PromptList after insertion of new prompt should contain 2 elements\",", "-                 2, _pane.getPromptList().size());", "+    ", "+    Utilities.clearEventQueue();", "+    assertEquals(\"PromptList after insertion of new prompt should contain 2 elements\", 2, _pane.getPromptList().size());", "-      assertEquals(\"PromptList after reset should contain no elements\",", "-                   0, _pane.getPromptList().size());", "+      assertEquals(\"PromptList after reset should contain no elements\", 0, _pane.getPromptList().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40b9e0f2b0733a75192abd4417c640be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 12, "signatureBeforeChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,      InterruptedException", "signatureAfterChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,  InterruptedException", "diff": ["-  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, ", "-    InterruptedException {", "+  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,  InterruptedException {", "-    // Perform a mindless interpretation to force interactions to reset.", "-    //  (only to simplify this method)", "-    try { interpret(\"2+2\"); }", "-    catch (EditDocumentException e) {", "-      throw new UnexpectedException(e);", "-    }", "-", "-    CompileShouldSucceedListener listener = new CompileShouldSucceedListener(true);", "+    // Perform a mindless interpretation to force interactions to reset (only to simplify this method)", "+    try { interpret(\"0\"); }", "+    catch (EditDocumentException e) { throw new UnexpectedException(e); }", "+    Utilities.clearEventQueue();", "+    ", "+    CompileShouldSucceedListener listener = new CompileShouldSucceedListener(true);", "-    synchronized(listener) {", "-      doc.startCompile();", "-      if (_model.getCompilerModel().getNumErrors() > 0) {", "-        fail(\"compile failed: \" + getCompilerErrorString());", "-      }", "-      while (listener.notDone()) listener.wait();", "+    ", "+    listener.logCompileStart();", "+", "+    doc.startCompile();", "+    Utilities.clearEventQueue();", "+    ", "+    if (_model.getCompilerModel().getNumErrors() > 0) {", "+      fail(\"compile failed: \" + getCompilerErrorString());", "+    listener.waitCompileDone();", "+", "+    ", "+    listener.waitResetDone();", "+    Utilities.clearEventQueue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5623b5b53434fcdd920bbcc2694da5da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "92062677ca813cb9ab44428a0d2d54f0c3309b04", "commitAfterChange": "274f7defc49003e66c942e814c9ce22958b3814c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "signatureAfterChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "diff": ["+    Utilities.clearEventQueue();", "+    assertEquals(\"caret should be at end of document\", _doc.getLength(), _pane.getCaretPosition());", "+       ", "-", "-     Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();", "-    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(newPos+1); } });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(newPos + 1); } });", "+    Utilities.clearEventQueue();", "-    assertEquals(\"caret should be immediately after the d\", newPos + 1, _pane.getCaretPosition());", "+    assertEquals(\"caret should be one char after the d\", newPos + 2, _pane.getCaretPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "599866c698c531efb25c096a1fc2a0e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JavadocDialog.java", "commitBeforeChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "commitAfterChange": "a6f0da7db6181f31273ee7bf3cfd92ed3fabb503", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public File getDirectory(File start) throws OperationCanceledException", "signatureAfterChange": "   public File getDirectory(File start) throws OperationCanceledException", "diff": ["+      // The \"always prompt\" checkbox should be checked", "+      _checkBox.setSelected(true);", "+      ", "-    ", "+      ", "+      // See if the user wants to suppress this dialog in the future.", "+      if (!_checkBox.isSelected()) {", "+        config.setSetting(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,", "+                          Boolean.FALSE);", "+      }", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88a85db6e1215b3f463587dea9d7f453", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/NewJVMTest.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testThrowRuntimeException() throws Throwable", "signatureAfterChange": "     public void testThrowRuntimeException() throws Throwable", "diff": ["+    debug.logStart();", "-    synchronized(_testLock) {", "-      _jvm.interpret(\"throw new RuntimeException();\");", "-      _testLock.wait();", "-      assertEquals(\"exception class\", \"java.lang.RuntimeException\", _jvm.exceptionClassBuf);", "-    }", "+    ", "+    _jvm.interpret(\"throw new RuntimeException();\");", "+    assertTrue(\"exception message\", _jvm.exceptionMsgBuf.startsWith(\"java.lang.RuntimeException\"));", "+    // TODO: eliminate the unnecessary stack trace from the error message (replacing with an", "+    // accurate stack trace from the interpreted language's point of view)", "+", "+    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd4f97014c14418e2151db378803c4ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "6d9f2ce37ba22041a5b2840cffbd0f66339165b6", "commitAfterChange": "b153c43e59717c98f32c67f14d61a00a81016991", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public void testUShiftRight() throws InterpreterException", "signatureAfterChange": "   public void testUShiftRight() throws InterpreterException", "diff": ["-      ", "-    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: longValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.MinusExpression: (koala.dynamicjava.tree.IntegerLiteral: 1 1 int))]))\";", "-    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: longValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "-", "-    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+    String result = (_parseCode(text).get(0)).toString();", "+    String expected = \"(koala.dynamicjava.tree.UnsignedShiftRightExpression: (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.IntegerLiteral: -1 -1 int)]) (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    assertEquals(\"String does not match expected string\", expected, result);", "+    ", "+    ", "+    //String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: longValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.MinusExpression: (koala.dynamicjava.tree.IntegerLiteral: 1 1 int))]))\";", "+    //String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: longValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+   //    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa1083998b2b15ee236306d5dcfa41f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void testInteractionsHistoryStoredCorrectly() throws EditDocumentException", "signatureAfterChange": "   public void testInteractionsHistoryStoredCorrectly() throws EditDocumentException", "diff": ["+    Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();", "+    ", "+    Utilities.clearEventQueue();"]}], "num": 14587}
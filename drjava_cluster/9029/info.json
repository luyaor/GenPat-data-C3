{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13d9e2036bdfa22583d841224cb4c647", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47cd0266dcf85dcffd7f20cbe437ec2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "4fb080a38871d6561e99bfdfdb664ff987fb15c5", "commitAfterChange": "d8298bba22e8675e12094f851d61d88ab6c6f68a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "diff": ["-      // set tooltip", "-      String tooltip = null;", "-      if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {", "-        if (leaf) {", "-          DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "-          if (node.getUserObject() instanceof RegionTreeUserObj) {", "-            @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();", "-            ", "-            OpenDefinitionsDocument doc = r.getDocument();", "-            doc.acquireReadLock();", "-            try {", "-              int lnr = doc.getLineOfOffset(r.getStartOffset())+1;", "-              int startOffset = doc.getOffset(lnr - 3);", "-              if (startOffset<0) { startOffset = 0; }", "-              int endOffset = doc.getOffset(lnr + 3);", "-              if (endOffset<0) { endOffset = doc.getLength() - 1; }", "+      if (!_isChanging) {", "+        // set tooltip", "+        String tooltip = null;", "+        if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {", "+          if (leaf) {", "+            DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "+            if (node.getUserObject() instanceof RegionTreeUserObj) {", "+              @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();", "-              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "-              String s = doc.getText(startOffset, endOffset-startOffset);", "-              ", "-              // this highlights the actual region in red", "-              int rStart = r.getStartOffset()-startOffset;", "-              if (rStart<0) { rStart = 0; }", "-              int rEnd = r.getEndOffset()-startOffset;", "-              if (rEnd>s.length()) { rEnd = s.length(); }", "-              if ((rStart<=s.length()) && (rEnd>=rStart)) {", "-                String t1 = StringOps.encodeHTML(s.substring(0,rStart));", "-                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "-                String t3 = StringOps.encodeHTML(s.substring(rEnd));", "-                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+              OpenDefinitionsDocument doc = r.getDocument();", "+              doc.acquireReadLock();", "+              try {", "+                int lnr = doc.getLineOfOffset(r.getStartOffset())+1;", "+                int startOffset = doc.getOffset(lnr - 3);", "+                if (startOffset<0) { startOffset = 0; }", "+                int endOffset = doc.getOffset(lnr + 3);", "+                if (endOffset<0) { endOffset = doc.getLength() - 1; }", "+                ", "+                // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "+                String s = doc.getText(startOffset, endOffset-startOffset);", "+                ", "+                // this highlights the actual region in red", "+                int rStart = r.getStartOffset()-startOffset;", "+                if (rStart<0) { rStart = 0; }", "+                int rEnd = r.getEndOffset()-startOffset;", "+                if (rEnd>s.length()) { rEnd = s.length(); }", "+                if ((rStart<=s.length()) && (rEnd>=rStart)) {", "+                  String t1 = StringOps.encodeHTML(s.substring(0,rStart));", "+                  String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "+                  String t3 = StringOps.encodeHTML(s.substring(rEnd));", "+                  s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+                }", "+                else {", "+                  s = StringOps.encodeHTML(s);", "+                }", "+                tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "-              else {", "-                s = StringOps.encodeHTML(s);", "-              }", "-              tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "+              catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "+              finally { doc.releaseReadLock(); }", "+              setText(node.getUserObject().toString());", "+              renderer = this;", "-            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "-            finally { doc.releaseReadLock(); }", "-            setText(node.getUserObject().toString());", "-            renderer = this;", "+        setToolTipText(tooltip);", "-      setToolTipText(tooltip);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76966c77ce0fc9bcc45b5a78361171d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "43f41a369ae2fab400ffccc265d57e86cf8989d7", "commitAfterChange": "e0e957550963e046bdbb3a11cc062ff5ce5c9c2b", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "   protected void handleSlaveQuit(int status)", "signatureAfterChange": "   protected void handleSlaveQuit(int status)", "diff": ["-      _interactionsModel.interpreterResetting();", "-", "+      // We have already fired this event if we are cleanly restarting", "+      if (!_cleanlyRestarting) {", "+        _interactionsModel.interpreterResetting();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6dcb9dc9d8657777cfba815d87bd438", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "814284d39419cda17539ef3e84c25f9daceecb37", "commitAfterChange": "64a8c66e035bf38023367affc1e8d913a52663ca", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["-            int space = getWhiteSpace();", "-            move(space);", "+            if (onlyWhiteSpaceBeforeCurrent()) {", "+              int space = getWhiteSpace();", "+              move(space);", "+            }"]}], "num": 9029}
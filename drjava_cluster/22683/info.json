{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20279325309a6b4678352288f49b7830", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "094b938fae4ec9fa3b6ae6d1718ea9b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void _updateWithErrors() throws BadLocationException", "signatureAfterChange": "     private void _updateWithErrors() throws BadLocationException", "diff": ["-", "-      // Show errors without source locations", "-      for (int i = 0; i < _errorsWithoutPositions.length; i++, errorNum++) {", "-        int startPos = doc.getLength();", "-        _insertErrorText(_errorsWithoutPositions, i, doc);", "-        // Note to user that there is no source info for this error", "+      // Show errors without files", "+      CompilerError[] errorsNoFiles = _model.getCompilerErrorsWithoutFiles();", "+      for (int i = 0; i < errorsNoFiles.length; i++, errorNum++) {", "+        int startPos = doc.getLength();", "+        _insertErrorText(errorsNoFiles, i, doc);", "+", "+        // Note to user that there is no file for this error", "-                         \" (no source location)\",", "+                         \"(no associated file)\",", "-", "-        _errorListPositions[errorNum] = doc.createPosition(startPos);", "+        Position pos = doc.createPosition(startPos);", "+        _errorListPositions[errorNum] = pos;", "+        _errorTable.put(pos, errorsNoFiles[i]);", "-      // Show errors with source locations", "-      for (int i = 0; i < _errors.length; i++, errorNum++) {", "-        int startPos = doc.getLength();", "-        _insertErrorText(_errors, i, doc);", "-        doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "-        _errorListPositions[errorNum] = doc.createPosition(startPos);", "+      // Show errors for each file", "+      ListModel defDocs = _model.getDefinitionsDocuments();", "+      for (int i = 0; i < defDocs.getSize(); i++) {", "+        // Get errors for this file", "+        OpenDefinitionsDocument openDoc = (OpenDefinitionsDocument)", "+          defDocs.getElementAt(i);", "+        CompilerErrorModel errorModel = openDoc.getCompilerErrorModel();", "+        CompilerError[] errorsWithoutPositions =", "+          errorModel.getErrorsWithoutPositions();", "+        CompilerError[] errorsWithPositions =", "+          errorModel.getErrorsWithPositions();", "+", "+        if ((errorsWithoutPositions.length > 0) ||", "+            (errorsWithPositions.length > 0)) {", "+", "+          // Grab filename for this set of errors", "+          String filename = \"(Untitled)\";", "+          try {", "+            File file = openDoc.getFile();", "+            filename = file.getAbsolutePath();", "+          }", "+          catch (IllegalStateException ise) {", "+            // Not possible: compiled documents must have files", "+            throw new UnexpectedException(ise);", "+          }", "+", "+          // Show errors without source locations", "+          for (int j = 0; j < errorsWithoutPositions.length; j++, errorNum++) {", "+            int startPos = doc.getLength();", "+            _insertErrorText(errorsWithoutPositions, j, doc);", "+", "+            // Note to user that there is no source info for this error", "+            doc.insertString(doc.getLength(),", "+                             \" (no source location)\",", "+                             NORMAL_ATTRIBUTES);", "+            doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "+", "+            Position pos = doc.createPosition(startPos);", "+            _errorListPositions[errorNum] = pos;", "+            _errorTable.put(pos, errorsWithoutPositions[j]);", "+          }", "+", "+          // Show errors with source locations", "+          for (int j = 0; j < errorsWithPositions.length; j++, errorNum++) {", "+            int startPos = doc.getLength();", "+", "+            // Show file", "+            doc.insertString(doc.getLength(), \"File: \", BOLD_ATTRIBUTES);", "+            doc.insertString(doc.getLength(), filename + \"\\n\", NORMAL_ATTRIBUTES);", "+", "+            // Show error", "+            _insertErrorText(errorsWithPositions, j, doc);", "+            doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "+            Position pos = doc.createPosition(startPos);", "+            _errorListPositions[errorNum] = pos;", "+            _errorTable.put(pos, errorsWithPositions[j]);", "+          }", "+        }", "-      _switchToError(0);", "+      _errorListPane.switchToError(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3bfeecc9f6644c282a69586cf106b15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "dd4842ca8ba89600798d5ff08666825edfadfb74", "commitAfterChange": "3e6dcdfe0dc2a3a2b00da441b478134258a2740f", "methodNumberBeforeChange": 614, "methodNumberAfterChange": 617, "signatureBeforeChange": "   public static void setPopupLoc(Window popup, Component owner)", "signatureAfterChange": "   public static void setPopupLoc(Window popup, Component owner)", "diff": ["-    // suggested from zaq@nosi.com, to keep the frame on the screen!", "-    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();", "+    Rectangle frameRect = popup.getBounds();", "+    ", "+    Point ownerLoc = null;", "+    Dimension ownerSize = null;", "+    if(owner!=null) {", "+      ownerLoc = owner.getLocation();", "+      ownerSize = owner.getSize();", "+    }", "+    else {", "+      //for multi-monitor support", "+      //Question: do we want it to popup on the first monitor always?", "+      GraphicsDevice[] dev = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();", "+      Rectangle rec = dev[0].getDefaultConfiguration().getBounds();", "+      ownerLoc = rec.getLocation();", "+      ownerSize = rec.getSize();", "+    }", "+    ", "+    // center it on owner", "+    Point loc = new Point(ownerLoc.x + (ownerSize.width - frameRect.width) / 2,", "+                          ownerLoc.y + (ownerSize.height - frameRect.height) / 2);", "+    frameRect.setLocation(loc);", "+    ", "+    // now find the GraphicsConfiguration the popup is on", "+    GraphicsConfiguration gcBest = null;", "+    int gcBestArea = -1;", "+    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();", "+    GraphicsDevice[] gs = ge.getScreenDevices();", "+    for (GraphicsDevice gd: gs) {", "+      GraphicsConfiguration gc = gd.getDefaultConfiguration();", "+      Rectangle isect = frameRect.intersection(gc.getBounds());", "+      int gcArea = isect.width*isect.height;", "+      if (gcArea>gcBestArea) {", "+        gcBest = gc;", "+        gcBestArea = gcArea;", "+      }", "+    }", "+    ", "+    // make it fit on the screen", "+    Rectangle screenRect = gcBest.getBounds();", "+    Dimension screenSize = screenRect.getSize();", "-    popup.setSize(frameSize);", "+    frameRect.setSize(frameSize);", "-    Point loc;", "-    if(owner == null) {", "-      //for multi-monitor support", "-      //Question: do we want it to popup on the first monitor always?", "-      GraphicsDevice[] dev = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();", "-      Rectangle rec = dev[0].getDefaultConfiguration().getBounds();", "-      loc = new Point(rec.x + (rec.width - popup.getWidth()) / 2, rec.y + (rec.height - popup.getHeight()) / 2);", "-    }", "-    else {", "-      Point ownerLoc = owner.getLocation();", "-      loc = new Point(ownerLoc.x + (owner.getWidth() - popup.getWidth()) / 2, ownerLoc.y + (owner.getHeight() - popup.getHeight()) / 2);", "-    }", "+    // center it on owner again", "+    loc = new Point(ownerLoc.x + (ownerSize.width - frameRect.width) / 2,", "+                          ownerLoc.y + (ownerSize.height - frameRect.height) / 2);", "+    frameRect.setLocation(loc);", "-    if(loc.x < 0)", "-      loc.x = 0;", "-    if(loc.x + popup.getWidth() > screenSize.width)", "-      loc.x = screenSize.width - popup.getWidth();", "-    if(loc.y < 0)", "-      loc.y = 0;", "-    if(loc.y + popup.getHeight() > screenSize.height)", "-      loc.y = screenSize.height - popup.getHeight();", "-    ", "-    popup.setLocation(loc);", "+    // now fit it on the screen", "+    if(frameRect.x < screenRect.x)", "+      frameRect.x = screenRect.x;", "+    if(frameRect.x + frameRect.width > screenRect.x + screenRect.width)", "+      frameRect.x = screenRect.x + screenRect.width - frameRect.width;", "+    if(frameRect.y < screenRect.y)", "+      frameRect.y = screenRect.y;", "+    if(frameRect.y + frameRect.height > screenRect.y + screenRect.height)", "+      frameRect.y = screenRect.y + screenRect.height - frameRect.height;", "+", "+    popup.setSize(frameRect.getSize());", "+    popup.setLocation(frameRect.getLocation());"]}], "num": 22683}
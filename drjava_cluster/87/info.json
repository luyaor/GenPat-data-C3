{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4128167ac36ca68c92d112ba8ae22e4d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44593685cd8554e94fe5828c576e15fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 114, "signatureBeforeChange": "          public Option<ConstraintScenario> and(ConstraintScenario that)", "signatureAfterChange": "          public Option<ConstraintScenario> and(ConstraintScenario that)", "diff": ["+      NormSubtyper sub = new NormSubtyper();", "+      NormJoiner join = new NormJoiner(sub);", "+      NormMeeter meet = new NormMeeter(sub);", "-        result._lowerBounds.put(var, JOIN_NORM.value(IterUtil.make(lowerBound(var), that.lowerBound(var))));", "+        result._lowerBounds.put(var, join.value(IterUtil.make(lowerBound(var), that.lowerBound(var))));", "-        result._upperBounds.put(var, MEET_NORM.value(IterUtil.make(upperBound(var), that.upperBound(var))));", "+        result._upperBounds.put(var, meet.value(IterUtil.make(upperBound(var), that.upperBound(var))));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9349e92a339fb9b03a162ce948d88dd4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 137, "signatureBeforeChange": "          public ConstraintFormula subtypeNorm(final Type arg, final Type param)", "signatureAfterChange": "          public ConstraintFormula subtypeNorm(final Type arg, final Type param)", "diff": ["-      if (!param.apply(_containsVar)) { return new NormSubtyper().contains(arg, param) ? TRUE : FALSE; }", "+      if (!param.apply(_containsVar)) { return _subtyper.contains(arg, param) ? TRUE : FALSE; }", "-                  return subtypeNorm(NORMALIZE.value(arg.symbol().upperBound()), param);", "+                  return subtypeNorm(new Normalizer(_subtyper).value(arg.symbol().upperBound()), param);", "-                      return subtypeNorm(arg, NORMALIZE.value(param.symbol().lowerBound()));", "+                      return subtypeNorm(arg, new Normalizer(_subtyper).value(param.symbol().lowerBound()));"]}], "num": 87}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e356f87102c2b613a9c8770b2c38021c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01274c9880bf9c8a24683de730da02c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public <T extends INavigatorItem> Enumeration<T> getDocuments()", "signatureAfterChange": "   public Enumeration<ItemT> getDocuments()", "diff": ["-  public <T extends INavigatorItem> Enumeration<T> getDocuments() {", "+  public Enumeration<ItemT> getDocuments() {", "-    final ArrayList<T> list = new ArrayList<T>();", "+    final Vector<ItemT> list = new Vector<ItemT>(); // Use Vector because it implements an Enumeration", "+      // e has a raw type because depthFirstEnumeration() has a raw type signature", "-        if (node.isLeaf() && node != _model.getRoot()) ", "-          list.add((T)node.getUserObject());", "+        if (node.isLeaf() && node != _model.getRoot()) {", "+          list.add(getNodeUserObject(node));", "+        }", "-    ", "-    return new Enumeration<T>() {", "-      ", "-      private Iterator<T> it = list.iterator();", "-      ", "-      public boolean hasMoreElements() { return it.hasNext(); }", "-      ", "-      public T nextElement() { return it.next(); }", "-    };", "+    return list.elements();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dcc1c6c5ef8f8a06829c2c3d3572cd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static <T> Set<T> asSet(Option<? extends T> opt)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\") public static <T> Thunk<Set<T>> hashSetFactory()", "diff": ["+   */", "+  @SuppressWarnings(\"unchecked\") public static <T> Thunk<Set<T>> hashSetFactory() {", "+    return (Thunk<Set<T>>) DefaultHashSetFactory.INSTANCE;", "+  }", "-  /** Convert an Option to an empty or singleton set. */", "-  public static <T> Set<T> asSet(Option<? extends T> opt) {", "-    return opt.apply(new OptionVisitor<T, Set<T>>() {", "-      public Set<T> forSome(T val) { return Collections.singleton(val); }", "-      public Set<T> forNone() { return emptySet(); }", "-    });", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "642368ffa188a472e66288b95fd8ec57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 164, "signatureBeforeChange": "   public static <T> Iterable<T> valuesOf(Iterable<? extends Thunk<? extends T>> iter)", "signatureAfterChange": "   public static <R> Iterable<R> valuesOf(Iterable<? extends Thunk<? extends R>> iter)", "diff": ["-  /** @return  An iterable containing the values of the given thunks */", "-  public static <T> Iterable<T> valuesOf(Iterable<? extends Thunk<? extends T>> iter) {", "-    Lambda<Thunk<? extends T>, T> thunkValue = new Lambda<Thunk<? extends T>, T>() {", "-      public T value(Thunk<? extends T> arg) { return arg.value(); }", "-    };", "-    return new MappedIterable<Thunk<? extends T>, T>(iter, thunkValue);", "+  /** Lazily create an iterable containing the values of the given thunks. */", "+  public static <R> Iterable<R> valuesOf(Iterable<? extends Thunk<? extends R>> iter) {", "+    @SuppressWarnings(\"unchecked\") ThunkValue<R> l = (ThunkValue<R>) ThunkValue.INSTANCE;", "+    return new MappedIterable<Thunk<? extends R>, R>(iter, l);", "+  }"]}], "num": 13173}
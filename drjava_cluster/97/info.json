{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e601eb2d238477f8740c023ac5c4b06", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66dac2dcc5c2b7cbf37e6c0049204d77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 314, "methodNumberAfterChange": 314, "signatureBeforeChange": "   public void resetInteractionsClasspath()", "signatureAfterChange": "   public void resetInteractionsClasspath()", "diff": ["-    //  Ideally, we'd like to put the open docs before the config option,", "-    //  but this is inconsistent with how the classpath was defined", "-    //  as it was built up.  (The config option is inserted on startup,", "-    //  and docs are added as they are opened.  It shouldn't switch after", "-    //  a reset.)", "-", "-    // switch the order of the two code segments", "-    // also put build directory", "-    ", "-        _interactionsModel.addToClassPath(en.nextElement().getAbsolutePath());", "+        // this forwards directly to InterpreterJVM.addClassPath(String)", "+        try{", "+          _interactionsModel.addExtraClassPath(en.nextElement().toURL());", "+        }catch(MalformedURLException murle){", "+          // fail silently", "+        }", "-    File[] sourceRoots = getSourceRootSet();", "-    for (int i = 0; i < sourceRoots.length; i++) {", "-      _interactionsModel.addToClassPath(sourceRoots[i].getAbsolutePath());", "+    List<OpenDefinitionsDocument> odds = getProjectDocuments();", "+    for (OpenDefinitionsDocument odd: odds) {", "+      // this forwards directly to InterpreterJVM.addClassPath(String)", "+      try{", "+        _interactionsModel.addProjectFilesClassPath(odd.getSourceRoot().toURL());", "+      }catch(MalformedURLException murle){", "+        // fail silently", "+      }catch(InvalidPackageException e){", "+        // oh well, who cares", "+      }", "-  }", "+", "+    odds = getNonProjectDocuments();", "+    for (OpenDefinitionsDocument odd: odds) {", "+      // this forwards directly to InterpreterJVM.addClassPath(String)", "+      try{", "+        _interactionsModel.addExternalFilesClassPath(odd.getSourceRoot().toURL());", "+      }catch(MalformedURLException murle){", "+        // fail silently", "+      }catch(InvalidPackageException e){", "+        // oh well, who cares", "+      }", "+    }", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abffc6add9fe949dd2ffb9a8f4d2d7ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "1a20ac05e52f9ee0a88d470513f2a7fe1aa1939e", "commitAfterChange": "d0895d1ac641d5855832b6d42c1c1052f9c47c9f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private static Method _loadMainMethod()      throws NoSuchMethodException, SecurityException", "signatureAfterChange": "   public static boolean classLoadersCanFindDebugger()", "diff": ["-   */", "-  private static Method _loadMainMethod() ", "-    throws NoSuchMethodException, SecurityException ", "-  {", "-    Class c = DrJava.class;", "-    ", "-    /* for this version, don't use the custom classloader yet.", "-     *  Neither the URLClassLoader nor the DrJavaClassLoader", "-     *  appears to work correctly-- this is a project to be taken...", "-     * (Motivation: We want the debugger classes to be available", "-     *  if we know where tools.jar is, but it has to be on the", "-     *  classpath of the classloader to work.)", "-    try {", "-      //File toolsLoc = getConfig().getSetting(JAVAC_LOCATION);", "-      //if(toolsLoc != FileOption.NULL_FILE) {", "-        //URL[] urls = new URL[] {fLoc.toURL()};", "-        //ClassLoader sys = ClassLoader.getSystemClassLoader();", "-        //ClassLoader dcl = new URLClassLoader(urls);", "-        ClassLoader dcl = new DrJavaClassLoader();", "-        ", "-        // test code", "-        //Class uDj, dDj, uBs, dBs;", "-        //String djn = \"edu.rice.cs.drjava.Drjava\",", "-        //  bsn = \"com.sun.jdi.Bootstrap\";", "-        //uDj = loadClass(cl,djn);", "-        //dDj = loadClass(dcl,djn);", "-        //uBs = loadClass(cl,bsn);", "-        //dBs = loadClass(dcl,bsn);", "-        //testCL(sys);", "-        //testCL(cl);", "-        //testCL(dcl);", "-        // end test code", "-        ", "-        c = dcl.loadClass(\"edu.rice.cs.drjava.DrJava\");", "-      //}", "-    } ", "-    catch (Exception e) {", "-      // Couldn't load the class", "-      System.err.println(e.toString());", "-    }", "-    */", "-    return c.getMethod(\"beginProgram\",new Class[] {String[].class});", "-  }", "+   */", "+  public static boolean classLoadersCanFindDebugger() {", "+    // First check the specified location", "+    File jar = getConfig().getSetting(JAVAC_LOCATION);", "+    if (jar != FileOption.NULL_FILE) {", "+      try {", "+        URL[] urls = new URL[] { jar.toURL() };", "+        URLClassLoader loader = new URLClassLoader(urls);", "+        loader.loadClass(TEST_DEBUGGER_CLASS);", "+        return true;", "+      }", "+      catch (ClassNotFoundException e) {", "+        // no debugger in this jar file; try ToolsJarClasLoader", "+      }", "+      catch (MalformedURLException e) {", "+        // specified jar invalid; try ToolsJarClassLoader", "+      }", "+    }", "+", "+    // If not, try to guess tools.jar location", "+    ToolsJarClassLoader loader = new ToolsJarClassLoader();", "+    try {", "+      loader.loadClass(\"com.sun.jdi.Bootstrap\");", "+      return true;", "+    }", "+    catch (ClassNotFoundException cnfe) {", "+      return false;", "+    }", "+  }"]}], "num": 97}
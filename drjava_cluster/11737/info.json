{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "625a2f566de6faa32adad967fe133871", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "247e452d7d16fd1885b9a9fcef9061e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "aff4ca7a048d3be1e2f863c90bf8f2bfe09306fd", "commitAfterChange": "7636e2659b4b69c586b657836319e825c9bf35fa", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "signatureAfterChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "diff": ["-    ", "+    boolean first = true;", "-          if (doc.getFile().canWrite()) {", "+          final File docFile = doc.getFile();", "+          if (!docFile.exists() || docFile.canWrite()) {", "-          else {", "-            // file is read-only, ask user about it", "+          else if (first) {", "+            // file is read-only, ask user about it once", "-        File[] res = _notifier.filesReadOnly(com, files.toArray(new File[files.size()]));", "+        File[] res = _notifier.filesReadOnly(files.toArray(new File[files.size()]));", "-          try {", "-            File roFile = odd.getFile();", "-            if (rewriteFiles.contains(roFile)) {", "-              docsToWrite.add(odd);", "-              // try to make the file writable", "-              // strangely enough, there is a File.setReadOnly() method, but", "-              // no built-in way to make the file writable", "-              // Sun recommends deleting the read-only file (does that work?)", "-              File backup = new File(roFile.getAbsolutePath()+\"~\");", "-              boolean noBackup = true;", "-              if (backup.exists()) {", "-                try {", "-                  noBackup = backup.delete();", "-                }", "-                catch(SecurityException se) {", "-                  noBackup = false;", "-                }", "-              }", "-              if (noBackup) {", "-                try {", "-                  noBackup = roFile.renameTo(backup);", "-                  roFile.createNewFile();", "-                }", "-                catch(SecurityException se) {", "-                  noBackup = false;", "-                }", "-                catch(IOException ioe) { }", "-                try {", "-                  roFile.createNewFile();", "-                }", "-                catch(SecurityException se) { }", "-                catch(IOException ioe) { }", "-              }", "-              if (!noBackup) {", "-                try {", "-                  roFile.delete();", "-                }", "-                catch(SecurityException se) { /* can't do anything about it */ }", "-              }", "-              try {", "-                edu.rice.cs.plt.io.IOUtil.copyFile(backup, roFile);", "-              }", "-              catch(SecurityException se) {", "-                /* can't do anything about it */", "-              }", "-              catch(IOException ioe) {", "-                /* can't do anything about it */", "-              }", "-            }", "+          File roFile = odd.getFile();", "+          if (rewriteFiles.contains(roFile)) {", "+            docsToWrite.add(odd);", "+            FileOps.makeWritable(roFile);", "-          catch(FileMovedException fme) { /* ignore, don't know what to do here */ }", "+      first = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7fe79050077cc4bbcaebcedbb97fb93", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "60280b438c8e4415d1e3fb7cae7f2c5284f4ab7d", "commitAfterChange": "f1e49fbbed5c92cb9e03198e54bd2a4b521e7d76", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "signatureAfterChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "diff": ["-    ", "-    for (final OpenDefinitionsDocument doc: getOpenDefinitionsDocuments()) {  // getOpen... makes a copy", "-      // do not force Untitled document to be saved if projectActive() or unmodified", "-      if (doc.isUntitled() && (isProjActive || ! doc.isModifiedSinceSave())) continue;  ", "-      aboutToSaveFromSaveAll(doc);", "-      doc.saveFile(com);", "+", "+    List<OpenDefinitionsDocument> docsToWrite = getOpenDefinitionsDocuments();", "+    while(docsToWrite.size()>0) {", "+      ArrayList<OpenDefinitionsDocument> readOnlyDocs = new ArrayList<OpenDefinitionsDocument>();", "+      for (final OpenDefinitionsDocument doc: docsToWrite) {  // getOpen... makes a copy", "+        // do not force Untitled document to be saved if projectActive() or unmodified", "+        if (doc.isUntitled() && (isProjActive || ! doc.isModifiedSinceSave())) continue;", "+        try {", "+          if (doc.getFile().canWrite()) {", "+            // file is writable, save", "+            aboutToSaveFromSaveAll(doc);", "+            doc.saveFile(com);", "+          }", "+          else {", "+            // file is read-only, ask user about it", "+            readOnlyDocs.add(doc);", "+          }", "+        }", "+        catch(FileMovedException fme) {", "+          // file was moved, but we should still be able to save it", "+          aboutToSaveFromSaveAll(doc);", "+          doc.saveFile(com);", "+        }", "+      }", "+      docsToWrite.clear();", "+      if (readOnlyDocs.size()>0) {", "+        ArrayList<File> files = new ArrayList<File>();", "+        for(OpenDefinitionsDocument odd: readOnlyDocs) {", "+          try { ", "+            File roFile = odd.getFile();", "+            files.add(roFile);", "+          }", "+          catch(FileMovedException fme) { /* ignore, don't know what to do here */ }", "+        }", "+        File[] res = _notifier.filesReadOnly(com, files.toArray(new File[files.size()]));", "+        HashSet<File> rewriteFiles = new HashSet<File>(java.util.Arrays.asList(res));", "+        for(OpenDefinitionsDocument odd: readOnlyDocs) {", "+          try {", "+            File roFile = odd.getFile();", "+            if (rewriteFiles.contains(roFile)) {", "+              docsToWrite.add(odd);", "+              // try to make the file writable", "+              // strangely enough, there is a File.setReadOnly() method, but", "+              // no built-in way to make the file writable", "+              // Sun recommends deleting the read-only file (does that work?)", "+              File backup = new File(roFile.getAbsolutePath()+\"~\");", "+              boolean noBackup = true;", "+              if (backup.exists()) {", "+                try {", "+                  noBackup = backup.delete();", "+                }", "+                catch(SecurityException se) {", "+                  noBackup = false;", "+                }", "+              }", "+              if (noBackup) {", "+                try {", "+                  noBackup = roFile.renameTo(backup);", "+                  roFile.createNewFile();", "+                }", "+                catch(SecurityException se) {", "+                  noBackup = false;", "+                }", "+                catch(IOException ioe) { }", "+                try {", "+                  roFile.createNewFile();", "+                }", "+                catch(SecurityException se) { }", "+                catch(IOException ioe) { }", "+              }", "+              if (!noBackup) {", "+                try {", "+                  roFile.delete();", "+                }", "+                catch(SecurityException se) { /* can't do anything about it */ }", "+              }", "+              try {", "+                edu.rice.cs.plt.io.IOUtil.copyFile(backup, roFile);", "+              }", "+              catch(SecurityException se) {", "+                /* can't do anything about it */", "+              }", "+              catch(IOException ioe) {", "+                /* can't do anything about it */", "+              }", "+            }", "+          }", "+          catch(FileMovedException fme) { /* ignore, don't know what to do here */ }", "+        }", "+      }"]}], "num": 11737}
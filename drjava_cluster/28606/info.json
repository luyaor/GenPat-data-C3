{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fecf89f8b56422e71c98679680d60210", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "049b3d544e8c25e8daee7bd5646804ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d57a4715eeda5394b496008be220f6252b47b950", "commitAfterChange": "ac02f569f5916c295bec9f11458dcf6db5964244", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "diff": ["-    getBrowserHistoryManager().clearRegions();", "+    getBrowserHistoryManager().clearBrowserRegions();", "-    for (final DocumentRegion bm: ir.getBookmarks ()) {", "-      final OpenDefinitionsDocument odd = getDocumentForFile(bm.getFile());", "-      getBookmarkManager().addRegion(new SimpleDocumentRegion(odd, odd.getFile(), bm.getStartOffset(), bm.getEndOffset()));", "+    try {", "+      for (final DocumentRegion bm: ir.getBookmarks()) {", "+        final OpenDefinitionsDocument odd = getDocumentForFile(bm.getFile());", "+        final Position startPos = odd.createPosition(bm.getStartOffset());", "+        final Position endPos = odd.createPosition(bm.getEndOffset());", "+        getBookmarkManager().addRegion(new SimpleDocumentRegion(odd, startPos, endPos));", "+      }", "+    catch(BadLocationException e) { throw new UnexpectedException(e); }", "-      projFiles.add(f);", "+      if (f.isActive()) active = f;", "+      else projFiles.add(f);  // add to projFiles unless active", "-      projFiles.add(f);", "+      if (f.isActive()) active = f;", "+      else projFiles.add(f);  // add to projFiles unless active", "-    if (active != null) projFiles.add(active);", "+    if (active != null) projFiles.add(active);   ", "-    //Set active document from project file", "+//    //Set active document from project file", "-    //OpenDefinitionsDocument.getCanonicalPath()", "-    //search for active document within opendefdocs", "+//    OpenDefinitionsDocument.getCanonicalPath()", "+////  Search for active document within opendefdocs"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea63b290b1440fd65547ea2fddef19a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "310f2e2e5bd03b1be3d582b8bb080b976b35e862", "commitAfterChange": "5ac038fd2393232341f24ed3abaede1deb4e977a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public List<String> findTestClasses(final List<String> classNames, final List<File> files)", "signatureAfterChange": "   public List<String> findTestClasses(final List<String> classNames, final List<File> files)", "diff": ["-    for (int i = 0; i < classNames.size(); i++) {", "-      String cName = classNames.get(i);", "-      // new ScrollableDialog(null, \"Class to be checked in JUnitManager: \" + cName, \"\", \"\").show();", "-      if (_isTestCase(cName)) {", "-        // new ScrollableDialog(null, \"Test class \" + cName + \" found!\", \"\", \"\").show();", "-        _testClassNames.add(cName);", "-        _testFiles.add(files.get(i));", "-        _suite.addTest(_testRunner.getTest(cName));", "+    int i = 0;", "+    try {", "+      for (i = 0; i < classNames.size(); i++) {", "+        String cName = classNames.get(i);", "+        // new ScrollableDialog(null, \"Class to be checked in JUnitManager: \" + cName, \"\", \"\").show();", "+        try {", "+          if (_isTestCase(cName)) {", "+            // new ScrollableDialog(null, \"Test class \" + cName + \" found!\", \"\", \"\").show();", "+            _testClassNames.add(cName);", "+            _testFiles.add(files.get(i));", "+            _suite.addTest(_testRunner.getTest(cName));", "+          }", "+        }", "+        catch(LinkageError e) { ", "+          _jmc.classFileError(new ClassFileError(files.get(i).getCanonicalPath(), e));", "+        }", "-              ", "+    catch(IOException e) { throw new UnexpectedException(e); }"]}], "num": 28606}
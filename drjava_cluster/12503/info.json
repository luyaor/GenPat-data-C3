{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abad93254a8b79c27ed0c03cc035a865", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7c6b4e5fb264482d9acab8a316788b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsEditorKit.java", "commitBeforeChange": "3ce53d032ad1bc176a487b71ca8af2994e1e9b4a", "commitAfterChange": "f9cf0907b4c2618456fd74126eedfa638b8d8fcb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DefinitionsEditorKit(GlobalEventNotifier notifier)", "signatureAfterChange": "   public DefinitionsEditorKit(GlobalEventNotifier notifier)", "diff": ["-      if (name.equals(beginWordAction)) {", "+      if (name.equals(beginWordAction))", "-      }", "-      else if (name.equals(endWordAction)) {", "+      else if (name.equals(endWordAction))", "-      }", "-      else if (name.equals(nextWordAction)){", "+      else if (name.equals(nextWordAction))", "-      }", "-      else if (name.equals(previousWordAction)) {", "+      else if (name.equals(previousWordAction))", "-      }", "-      else if (name.equals(selectionNextWordAction)){", "+      else if (name.equals(selectionNextWordAction))", "-      }", "-      else if (name.equals(selectionPreviousWordAction)) {", "+      else if (name.equals(selectionPreviousWordAction))", "-      }", "-      else if (name.equals(selectWordAction)) {", "+      else if (name.equals(selectWordAction))", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ca044c0e7d0bea3d3785c8d78864421", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "   protected SymbolData getInnerClassOrInterfaceHelper(String nameToMatch, int firstIndexOfDot)", "signatureAfterChange": "   protected SymbolData getInnerClassOrInterfaceHelper(String relName, int firstIndexOfDot)", "diff": ["-  protected SymbolData getInnerClassOrInterfaceHelper(String nameToMatch, int firstIndexOfDot) {", "+  protected SymbolData getInnerClassOrInterfaceHelper(String relName, int firstIndexOfDot) {", "+      if (sdName.equals(\"Rod\")) System.err.println(\"In getInnerClass, sdName = 'Rod'; relName = '\" + relName +\"'\");", "-        if (sdName.equals(nameToMatch)) return sd;", "+        if (sdName.equals(relName)) return sd;", "-        if (sdName.equals(nameToMatch.substring(0, firstIndexOfDot))) {", "-          return sd.getInnerClassOrInterface(nameToMatch.substring(firstIndexOfDot + 1));", "+        if (sdName.equals(relName.substring(0, firstIndexOfDot))) {", "+          return sd.getInnerClassOrInterface(relName.substring(firstIndexOfDot + 1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8d5339c701b80ff292587482d44761", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "e8a0105912243dc0845b7fe1aad605d049915d0a", "commitAfterChange": "f5dccb0b4004cfd3f184330e53ba101eca68857c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["+        else {", "+          JDKToolsLibrary.msg(\"\\tlibrary is not valid: compiler=\"+lib.compiler().isAvailable()+", "+                              \" debugger=\"+lib.debugger().isAvailable()+\" javadoc=\"+lib.javadoc().isAvailable());", "+        }", "-            (javaVersion.release()==compoundVersion.release())) {", "+            (javaVersion.release()==compoundVersion.release()) &&", "+            (javaVersion.supports(compoundLib.jdkDescriptor().getMinimumMajorVersion()))) {", "-          if (javaVersion.majorVersion().equals(compoundVersion.majorVersion())) {", "+          if (javaVersion.majorVersion().equals(compoundVersion.majorVersion()) &&", "+              javaVersion.supports(compoundLib.jdkDescriptor().getMinimumMajorVersion())) {"]}], "num": 12503}
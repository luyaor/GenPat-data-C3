{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0a509c6fe67142ecedf20a1d16b71ba", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f3e9b18a7840cfcf814b4177d6088a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "2aadb81a716e2a196f82baa127c28e3225664fab", "commitAfterChange": "c4ec4fbaa86590f5d9d73c067159d69b14149c37", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   public void removeRegions(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public void removeRegions(final OpenDefinitionsDocument doc)", "diff": ["-      // The following ugly line of code is dictated by the \"fail fast\" semantics of Java iterators and erasure generics", "-      for (Object r: regions.toArray()) { removeRegion((R) r); }  ", "-      // notify all listeners for all regions", "-//      _notifyRegionsRemoved(regions);", "-//      _regions.remove(doc); // done automatically when last region r in doc is removed", "+      // The following ugly line of code is dictated by the \"fail fast\" semantics of Java iterators", "+      while (! regions.isEmpty()) regions.remove(regions.first());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fac3156d76dc1e3f282ec0f1bb439626", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fb8ddcbfd71bd75d2b307b4e83f7a834ec364082", "commitAfterChange": "be84679bc73e85f88d6958fbfdf8b35be73855ab", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 62, "signatureBeforeChange": "   private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException", "signatureAfterChange": "   private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException, AbsentInformationException", "diff": ["-  private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException {", "+  private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException, AbsentInformationException {", "-      ", "+ ", "+      ObjectReference debugInterpreter = _getDebugInterpreter(interpreterName);", "-      ObjectReference debugInterpreter = _getDebugInterpreter(interpreterName);", "+      ", "+      if (printMessages) {", "+        System.out.println(\"got visibleVariables\");", "+      }", "-    }    ", "-    catch(AbsentInformationException e2){", "-      throw new DebugException(e2.toString());", "-    catch(IncompatibleThreadStateException e){", "-      throw new DebugException(e.toString());", "+    catch(IncompatibleThreadStateException e2){", "+      throw new DebugException(e2.toString());"]}], "num": 18645}
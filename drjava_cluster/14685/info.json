{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f629fcbd4e6c6a361a261787270e421", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33083ae0b5eedf3178d40d19566df7b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "8de007bf6be2b43ee2e0404f529aa96c640a30ed", "commitAfterChange": "4b5efbc2650bf8411daae8d8fd509fcb4fe26da2", "methodNumberBeforeChange": 644, "methodNumberAfterChange": 644, "signatureBeforeChange": "   void initAutoImportDialog()", "signatureAfterChange": "   void initAutoImportDialog()", "diff": ["+      final JCheckBox cbox = new JCheckBox(\"Import Package\");", "+      cbox.addActionListener(new ActionListener() {", "+        public void actionPerformed(ActionEvent e) {", "+          _autoImportDialog.resetFocus();", "+        }", "+      });", "+      cbox.setMnemonic('p');", "+          }", "+          if (cbox.isSelected()) {", "+            int lastDot = text.lastIndexOf('.');", "+            if (lastDot>0) {", "+              text = text.substring(0,lastDot+1)+\"*\";", "+            }", "+        protected JComponent[] makeOptions() {", "+          return new JComponent[] { cbox };", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43441be3d9e9407eeea5ee4319c108fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "47d5fc81163cac95e4e64b470a149e7ec540b233", "commitAfterChange": "d012414100e088dfd0a2ea6e642cc05f11fbf32b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ConfigFrame ()", "signatureAfterChange": "   public ConfigFrame ()", "diff": ["-        apply();", "-        ConfigFrame.this.hide();", "+        boolean successful = apply();", "+        if (successful) ConfigFrame.this.hide();", "+    ", "+    _defaultButton = new JButton(\"Set as default\");", "+    _defaultButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        setAsDefault();", "+      }", "+    });", "+    bottom.add(Box.createHorizontalGlue());", "+    bottom.add(_defaultButton);", "-    setSize( 600, 500);", "+    setSize( FRAME_WIDTH, FRAME_HEIGHT);", "+", "+    if (frameSize.height > screenSize.height) {", "+      frameSize.height = screenSize.height;", "+    }", "+    if (frameSize.width > screenSize.width) {", "+      frameSize.width = screenSize.width;", "+    }", "+", "+    this.setSize(frameSize);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c52182050f0f58a477de6f69f48b338", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5b24cc652ccfb3f73fd9787955deeabf51180dac", "commitAfterChange": "3c18849aa384463de7c1bb8553d97d486fec44c2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["+    // suggested from zaq@nosi.com, to keep the frame on the screen!", "+    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();", "+", "+    Dimension frameSize = this.getSize();", "+", "+    if (frameSize.height > screenSize.height) {", "+      frameSize.height = screenSize.height;", "+    }", "+", "+    if (frameSize.width > screenSize.width) {", "+      frameSize.width = screenSize.width;", "+    }", "+", "+    this.setLocation((screenSize.width - frameSize.width) / 2, ", "+        (screenSize.height - frameSize.height) / 2);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81f2258097ebd789cf3cb61b29b6613", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "16e33a14d9ce477435e70d3dc8dd69757f5a9720", "commitAfterChange": "82b3ca10673b4b0cfccf8adf1834262d94bfb58d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testSaveProject()", "signatureAfterChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "diff": ["-  public void testSaveProject() {", "-    FileOpenSelector fos = new FileOpenSelector() {", "+  public void testSaveProject() throws IOException, MalformedProjectFileException{", "+    FileOpenSelector _projFOS = new FileOpenSelector() {", "-    // right now it's checking to make sure this doensn't throw exceptions", "-    _frame.openProject(fos);", "+    _frame.openProject(new FileOpenSelector() {", "+      public File[] getFiles() throws OperationCanceledException {", "+        return new File[] {_projFile};", "+      }", "+    });", "+    _frame._closeProject();", "+    ", "+    // check to make sure it transitions from flat file mode to project mode well", "+    _frame.open(new FileOpenSelector() {", "+      public File[] getFiles() throws OperationCanceledException {", "+        return new File[] {_file1};", "+      }", "+    });", "+    _frame._saveProjectHelper(_projFile);", "+    ProjectFileIR pfir = ProjectFileParser.ONLY.parse(_projFile);", "+    DocFile[] dfs = pfir.getSourceFiles();", "+    assertEquals(\"Number of saved src files\", 1, dfs.length);", "+    assertEquals(\"Wrong file name,\", _file1, dfs[0]);"]}], "num": 14685}
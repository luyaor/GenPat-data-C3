{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11512e9a6aa48828c815f0bc40bfcfd3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4270ac17e2d4bd68b864e5d3afec448d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "2d86cf04f0b08426dfa6d50c93bcf8879511bde9", "commitAfterChange": "70e12493ad654478a708690a18fe3e8feba26f05", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "          public File getWorkingDirectory()", "signatureAfterChange": "          public File getWorkingDirectory()", "diff": ["+          // if no project working directory is set, check preferences working directory", "+          File prefWorkDir = DrJava.getConfig().getSetting(FIXED_INTERACTIONS_DIRECTORY);", "+          if ((prefWorkDir != null) && (prefWorkDir != FileOps.NULL_FILE)) {", "+            try {", "+              // make sure it's a valid directory", "+              prefWorkDir = FileOps.getValidDirectory(prefWorkDir);", "+            }", "+            catch (RuntimeException e) { prefWorkDir = FileOps.NULL_FILE; }", "+          }", "+          if ((prefWorkDir != null) && (prefWorkDir != FileOps.NULL_FILE)) { return prefWorkDir; }", "+", "+          // if there is no fixed working directory in the preferences, use the directory", "+          // containing the project file", "-          }", "+          } // or if all else fails, user.dir"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b828544223264f79eeea2e4f5ec8d2d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "2d86cf04f0b08426dfa6d50c93bcf8879511bde9", "commitAfterChange": "70e12493ad654478a708690a18fe3e8feba26f05", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "     public File getWorkingDirectory()", "signatureAfterChange": "     public File getWorkingDirectory()", "diff": ["+      // if a fixed working directory has been set in the Preferences, use it", "+      File prefWorkDir = DrJava.getConfig().getSetting(FIXED_INTERACTIONS_DIRECTORY);", "+      if ((prefWorkDir != null) && (prefWorkDir != FileOps.NULL_FILE)) {", "+        try {", "+          // make sure it's a valid directory", "+          prefWorkDir = FileOps.getValidDirectory(prefWorkDir);", "+        }", "+        catch (RuntimeException e) { prefWorkDir = FileOps.NULL_FILE; }", "+      }", "+      if ((prefWorkDir != null) && (prefWorkDir != FileOps.NULL_FILE)) {", "+        // update the setting and return it", "+        DrJava.getConfig().setSetting(LAST_INTERACTIONS_DIRECTORY, prefWorkDir);", "+        return prefWorkDir;", "+      }", "+      ", "+      // otherwise determine the working directory based on the source root", "+      File file = FileOps.NULL_FILE;", "+      try {", "+        file = getActiveDocument().getSourceRoot(); // source root of the current document", "+      }", "+      catch(InvalidPackageException ipe) { file = FileOps.NULL_FILE; }", "+      if ((file != null) && (file != FileOps.NULL_FILE)) {", "+        // update the setting and return it", "+        DrJava.getConfig().setSetting(LAST_INTERACTIONS_DIRECTORY, file);", "+        return file;", "+      }", "+      ", "+      // if we can't get the source root of the current document, use the first document", "-        File file = FileOps.NULL_FILE;"]}], "num": 25038}
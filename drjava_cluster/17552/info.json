{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "941a1b0d6ce4a4dde0f8b421d8b2d485", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e81d435c975f557b10f712bdc07029", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public int findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "signatureAfterChange": "   public int findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "diff": ["+    assert isReadLocked();", "+    ", "-    acquireReadLock();", "-    try {      ", "-      synchronized(_reduced) {", "-        final int origPos = _currentLocation;", "-        // Move reduced model to location pos", "-        _setCurrentLocation(pos);  // reduced model points to pos == reducedPos", "+//    try {      ", "+    synchronized(_reduced) {", "+      final int origPos = _currentLocation;", "+      // Move reduced model to location pos", "+      _setCurrentLocation(pos);  // reduced model points to pos == reducedPos", "+      ", "+      // Walk forward from specificed position", "+      for (i = pos + 1; i < text.length(); i++) {", "+        /* Invariant: reduced model points to reducedPos, text[pos:i-1] contains no valid delims, ", "+         * pos <= reducedPos < i <= text.length() */", "-        // Walk forward from specificed position", "-        for (i = pos + 1; i < text.length(); i++) {", "-          /* Invariant: reduced model points to reducedPos, text[pos:i-1] contains no valid delims, ", "-           * pos <= reducedPos < i <= text.length() */", "+        if (match(text.charAt(i),delims)) {", "+          // Move reduced model to walker's location", "+          _setCurrentLocation(i);  // reduced model points to i", "+          reducedPos = i;          // reduced model points to reducedPos", "-          if (match(text.charAt(i),delims)) {", "-            // Move reduced model to walker's location", "-            _setCurrentLocation(i);  // reduced model points to i", "-            reducedPos = i;          // reduced model points to reducedPos", "-            ", "-            // Check if matching char should be ignored because it is within a comment, quotes, or ignored paren phrase", "-            if (isShadowed()) continue;  // ignore matching char ", "+          // Check if matching char should be ignored because it is within a comment, quotes, or ignored paren phrase", "+          if (_isShadowed()) continue;  // ignore matching char ", "+          else {", "+            // found valid matching char", "+            if (text.charAt(i) == opening) ++braceBalance;", "-              // found valid matching char", "-              if (text.charAt(i) == opening) ++braceBalance;", "-              else {", "-                if (braceBalance == 0) break; // found our closing brace", "-                --braceBalance;", "-              }", "+              if (braceBalance == 0) break; // found our closing brace", "+              --braceBalance;", "-        ", "-        /* Invariant: same as for loop except that pos <= reducedPos <= i <= text.length() */", "-        ", "-        _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "-      }  // end synchronized", "+      }", "-      if (i == text.length()) reducedPos = -1; // No matching char was found", "-      _storeInCache(key, reducedPos, reducedPos);", "-      // Return position of matching char or ERROR_INDEX (-1)     ", "-      return reducedPos;  ", "-    }", "-    finally { releaseReadLock(); }", "+      /* Invariant: same as for loop except that pos <= reducedPos <= i <= text.length() */", "+      ", "+      _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "+    }  // end synchronized", "+    ", "+    if (i == text.length()) reducedPos = -1; // No matching char was found", "+    _storeInCache(key, reducedPos, reducedPos);", "+    // Return position of matching char or ERROR_INDEX (-1)     ", "+    return reducedPos;  ", "+//    }", "+//    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c308c9b1091f96b368c94534bf1bbb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "92fd06b34796984853343dde64251cfdd2a0ce25", "commitAfterChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public int findPrevEnclosingBrace(int pos, char opening, char closing) throws BadLocationException", "signatureAfterChange": "   public int findPrevEnclosingBrace(int pos, char opening, char closing) throws BadLocationException", "diff": ["-    if ((pos >= getLength()) || (pos == DOCSTART)) { return ERROR_INDEX; }", "+    if (pos >= getLength() || pos == DOCSTART) { return ERROR_INDEX; }", "-    acquireReadLock();", "-    try {", "-      String text = getText(DOCSTART, pos);", "+    String text = getText(DOCSTART, pos);", "+    ", "+    synchronized(_reduced) {", "+      final int origLocation = _currentLocation;", "+      // Move reduced model to location pos", "+      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "-      synchronized(_reduced) {", "-        final int origLocation = _currentLocation;", "-        // Move reduced model to location pos", "-        _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+      // Walk backwards from specificed position", "+      for (i = pos-1; i >= DOCSTART; i--) {", "+        /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "+         * DOCSTART <= i < reducedPos <= pos */", "-        // Walk backwards from specificed position", "-        for (i = pos-1; i >= DOCSTART; i--) {", "-          /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "-           * DOCSTART <= i < reducedPos <= pos */", "+        if (match(text.charAt(i),delims)) {", "+          // Move reduced model to walker's location", "+          _reduced.move(i - reducedPos);  // reduced model points to i", "+          reducedPos = i;                 // reduced model points to reducedPos", "-          if (match(text.charAt(i),delims)) {", "-            // Move reduced model to walker's location", "-            _reduced.move(i - reducedPos);  // reduced model points to i", "-            reducedPos = i;                 // reduced model points to reducedPos", "-            ", "-            // Check if matching char should be ignored because it is within a comment, ", "-            // quotes, or ignored paren phrase", "-            ReducedModelState state = _reduced.getStateAtCurrent();", "-            if (!state.equals(ReducedModelState.FREE) || _isStartOfComment(text, i)", "-                  || ((i > 0) && _isStartOfComment(text, i - 1)))", "-              continue;  // ignore matching char ", "+          // Check if matching char should be ignored because it is within a comment, ", "+          // quotes, or ignored paren phrase", "+          ReducedModelState state = _reduced.getStateAtCurrent();", "+          if (! state.equals(ReducedModelState.FREE) || _isStartOfComment(text, i) || ", "+              (i > 0 && _isStartOfComment(text, i-1)))", "+            continue;  // ignore matching char ", "+          else {", "+            // found valid matching char", "+            if (text.charAt(i) == closing) ++braceBalance;", "-              // found valid matching char", "-              if (text.charAt(i)==closing) ++braceBalance;", "-              else {", "-                if (braceBalance==0) break; // found our opening brace", "-                --braceBalance;", "-              }", "+              if (braceBalance == 0) break; // found our opening brace", "+              --braceBalance;", "-        ", "-        /* Invariant: same as for loop except that DOCSTART-1 <= i <= reducedPos <= pos */", "-        ", "-        _reduced.move(origLocation - reducedPos);    // Restore the state of the reduced model;", "-      }  // end synchronized", "+      }", "-      if (i == DOCSTART-1) reducedPos = ERROR_INDEX; // No matching char was found", "-      _storeInCache(key, reducedPos);", "-    }", "-    finally { releaseReadLock(); }", "+      /* Invariant: same as for loop except that DOCSTART-1 <= i <= reducedPos <= pos */", "+      ", "+      _reduced.move(origLocation - reducedPos);    // Restore the state of the reduced model;", "+    }  // end synchronized", "+    ", "+    if (i == DOCSTART-1) reducedPos = ERROR_INDEX; // No matching char was found", "+    _storeInCache(key, reducedPos, pos);"]}], "num": 17552}
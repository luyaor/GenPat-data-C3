{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8320f091ea813e0df1e74129a0cb6091", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11325eaa45c36fe033d3ff5a683429ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void testOpenMultipleNonexistentFiles() throws IOException", "signatureAfterChange": "   public void testOpenMultipleNonexistentFiles() throws IOException", "diff": ["-    TestListener listener = new TestListener() {", "-      public void fileNotFound(File f) { fileNotFoundCount++; }", "-", "-      public void fileOpened(OpenDefinitionsDocument doc) {", "-        File file = null;", "-        try { file = doc.getFile(); }", "-        catch (FileMovedException fme) {", "-          // We know file should exist", "-          fail(\"file does not exist\");", "-        }", "-        try {", "-          assertEquals(\"file to open\", tempFile1.getCanonicalFile(), file.getCanonicalFile());", "-          openCount++;", "-        }", "-        catch (IOException ioe) { fail(\"could not get canonical file\"); }", "-      }", "-      ", "-      public void fileClosed(OpenDefinitionsDocument doc) {", "-        /* opening a file closes the empty document created on startup [Corky: 10-8-04]*/", "-//        assertTrue(doc.isUntitled());", "-//        assertFalse(doc.isModifiedSinceSave());", "-      }", "+    TestListener listener = new TestFileIOListener(tempFile1) {", "+      public synchronized void fileNotFound(File f) { fileNotFoundCount++; }", "+", "-", "-    try {", "-      docs = _model.openFiles(new FileSelector(tempFile1, new File(\"fake-file\")));", "-    }", "-    catch (FileNotFoundException fnf) {", "-      fail(\"FileNotFound exception was not thrown!\");", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    try { docs = _model.openFiles(new FileSelector(tempFile1, new File(\"fake-file\"))); }", "+    catch (FileNotFoundException fnf) { fail(\"FileNotFound exception was not thrown!\"); }  // Should not have moved", "+    catch (AlreadyOpenException aoe) { fail(\"File was already open!\"); }                   // Should not be open", "+    catch (OperationCanceledException oce) { fail(\"Open was unexpectedly canceled!\"); }    // Should not be canceled", "+    listener.assertCloseCount(1);  // closed Untitled document"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed4a62974193db2ba4c34b0e5a2623f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void testOpenMultipleFiles() throws BadLocationException, IOException", "signatureAfterChange": "   public void testOpenMultipleFiles() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestListener() {", "+    TestListener listener = new TestIOListener() {", "+        super.fileOpened(doc);", "-        catch (FileMovedException fme) {", "-          // We know file should exist", "-          fail(\"file does not exist\");", "-        }", "-", "-        try {", "-          if (tempFile1.equals(file)) {", "-            assertEquals(\"file to open\", tempFile1.getCanonicalFile(), file.getCanonicalFile());", "-          } else {", "-            assertEquals(\"file to open\", tempFile2.getCanonicalFile(), file.getCanonicalFile());", "-          }", "-          openCount++;", "-        }", "-        catch (IOException ioe) {", "-          fail(\"could not get canonical file\");", "-        }", "-      }", "-      public void fileClosed(OpenDefinitionsDocument doc) {", "-        /* opening a file closes the empty document created on startup [Corky: 10-8-04]*/", "-//        assertTrue(doc.isUntitled());", "-//        assertFalse(doc.isModifiedSinceSave());", "+        catch (FileMovedException fme) { fail(\"file does not exist\"); } // We know file should exist", "+        if (tempFile1.equals(file))", "+          assertEquals(\"file to open\", FileOps.getCanonicalFile(tempFile1), FileOps.getCanonicalFile(file));", "+        else assertEquals(\"file to open\", FileOps.getCanonicalFile(tempFile2), FileOps.getCanonicalFile(file));", "-      OpenDefinitionsDocument[] docs = _model.openFiles(new FileSelector(tempFile1,tempFile2));", "+      OpenDefinitionsDocument[] docs = _model.openFiles(new FileSelector(tempFile1, tempFile2));", "+      listener.assertCloseCount(1);  // closed Untitled document"]}], "num": 26063}
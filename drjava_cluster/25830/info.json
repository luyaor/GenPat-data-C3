{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e30954c14b904bf2175a34130993d8f1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12745a0f0d41569293d92484749b2ded", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     void switchToError(CompilerError error)", "signatureAfterChange": "     void switchToError(CompilerError error)", "diff": ["-      if (error == null) {", "-        return;", "-      }", "+//      Utilities.showDebug(\"ErrorPanel.switchToError called\");", "+      if (error == null) return;", "-      if (error.file() != null) {", "-        try {", "-          OpenDefinitionsDocument doc = getModel().getDocumentForFile(error.file());", "-          // switch to correct def pane", "-          getModel().setActiveDocument(doc);", "-          ", "-          // check and see if this error is without source info, and", "-          // if so don't try to highlight source info!", "-          if (!error.hasNoLocation()) {", "-            CompilerErrorModel errorModel = getErrorModel();", "-            Position pos = errorModel.getPosition(error);", "-            ", "-            // move caret to that position", "-            DefinitionsPane defPane = _frame.getCurrentDefPane();", "-            if (pos != null) {", "-              int errPos = pos.getOffset();", "-              if (errPos >= 0 && errPos <= defPane.getText().length()) {", "-                defPane.centerViewOnOffset(errPos);", "-              }", "-            }", "-            defPane.requestFocusInWindow();", "-            defPane.getCaret().setVisible(true);", "-          }", "-          else {", "-            // Remove last highlight if we had an error with no position", "-            _frame.getCurrentDefPane().removeErrorHighlight();", "-          }", "-        }", "-        catch (IOException ioe) {", "-          // Don't highlight the source if file can't be opened", "-        }", "-      }", "-      else {", "-        //Remove last highlight if we had an error with no file", "-        _frame.getCurrentDefPane().removeErrorHighlight();", "-      }", "-      ", "-      // Select item wants the error, which is what we were passed", "+      _frame.getCurrentDefPane().removeErrorHighlight();  // hide previous error highlight", "+      ", "+      if (error.file() == null || error.hasNoLocation())  return;", "+      try {", "+        OpenDefinitionsDocument doc = getModel().getDocumentForFile(error.file());", "+        CompilerErrorModel errorModel = getErrorModel();", "+        Position pos = errorModel.getPosition(error);", "+        ", "+        // switch to correct def pane and move caret to error position", "+//        Utilities.showDebug(\"active document being set to \" + doc + \" in ErrorPanel.switchToError\");", "+        getModel().setActiveDocument(doc);", "+//        Utilities.showDebug(\"setting active document has completed\");", "+        DefinitionsPane defPane = _frame.getCurrentDefPane();", "+        if (pos != null) {", "+          int errPos = pos.getOffset();", "+          if (errPos >= 0 && errPos <= doc.getLength()) defPane.centerViewOnOffset(errPos);", "+        }", "+        // The following line is a brute force hack that fixed a bug plaguing the DefinitionsPane immediately after a compilation", "+        // with errors.  In some cases (which were consistently reproducible), the DefinitionsPane editing functions would break", "+        // whereby the keystrokes had their usual meaning but incorrect updates were performed in the DefintionsPane.  For example,", "+        // the display behaved as if the editor were in \"overwrite\" mode.", "+        _frame._switchDefScrollPane(); // resets an out-of-kilter DefinitionsPane on the first error after a compilation", "+        defPane.requestFocusInWindow();", "+        defPane.getCaret().setVisible(true);", "+      }", "+      catch (IOException ioe) {", "+        // Don't highlight the source if file can't be opened", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ad6882a56be498e0b4b0cb24294bd38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "1551840e0590a4d224d98cf5aeb081d54054aafb", "commitAfterChange": "fe644290d76f63ed4693cfbe935eaacd56666243", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     void switchToError(CompilerError error)", "signatureAfterChange": "     void switchToError(CompilerError error)", "diff": ["-      getErrorListPane().selectItem(error);", "-      ", "-      if (error.file() == null || error.hasNoLocation())  return;", "-      try {", "-        OpenDefinitionsDocument doc = getModel().getDocumentForFile(error.file());", "-        CompilerErrorModel errorModel = getErrorModel();", "-        Position pos = errorModel.getPosition(error);", "-        ", "-        // switch to correct def pane and move caret to error position", "+     ", "+", "+       ", "+      if (error.file() != null) {", "+        try {", "+          OpenDefinitionsDocument doc = getModel().getDocumentForFile(error.file());", "+          CompilerErrorModel errorModel = getErrorModel();", "+          ", "+          Position pos = errorModel.getPosition(error); // null if error has no Position", "+          ", "+          // switch to correct def pane and move caret to error position", "-        getModel().setActiveDocument(doc);", "+          getModel().setActiveDocument(doc);", "-        DefinitionsPane defPane = _frame.getCurrentDefPane();", "-        if (pos != null) {", "-          int errPos = pos.getOffset();", "-          if (errPos >= 0 && errPos <= doc.getLength()) defPane.centerViewOnOffset(errPos);", "+          DefinitionsPane defPane = _frame.getCurrentDefPane();", "+          if (pos != null) {", "+            int errPos = pos.getOffset();", "+            if (errPos >= 0 && errPos <= doc.getLength()) defPane.centerViewOnOffset(errPos);", "+          }", "+          // The following line is a brute force hack that fixed a bug plaguing the DefinitionsPane immediately after a compilation", "+          // with errors.  In some cases (which were consistently reproducible), the DefinitionsPane editing functions would break", "+          // whereby the keystrokes had their usual meaning but incorrect updates were performed in the DefintionsPane.  For example,", "+          // the display behaved as if the editor were in \"overwrite\" mode.", "+          _frame._switchDefScrollPane(); // resets an out-of-kilter DefinitionsPane on the first error after a compilation", "+          defPane.requestFocusInWindow();", "+          defPane.getCaret().setVisible(true);", "-        // The following line is a brute force hack that fixed a bug plaguing the DefinitionsPane immediately after a compilation", "-        // with errors.  In some cases (which were consistently reproducible), the DefinitionsPane editing functions would break", "-        // whereby the keystrokes had their usual meaning but incorrect updates were performed in the DefintionsPane.  For example,", "-        // the display behaved as if the editor were in \"overwrite\" mode.", "-        _frame._switchDefScrollPane(); // resets an out-of-kilter DefinitionsPane on the first error after a compilation", "-        defPane.requestFocusInWindow();", "-        defPane.getCaret().setVisible(true);", "+        catch (IOException ioe) {", "+          // Don't highlight the source if file can't be opened", "+        }", "-      catch (IOException ioe) {", "-        // Don't highlight the source if file can't be opened", "-      }", "+//      Utilities.showDebug(\"Calling selectItem(...) from switchToError\");", "+      /* setActiveDocument(doc) selects the first error corresponding to the current position (caret location) but this may not", "+       * be the correct error if there are multiple errors for this this position.  The following selects the correct error.*/", "+      getErrorListPane().selectItem(error); "]}], "num": 25830}
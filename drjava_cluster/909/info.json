{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76e5d30e9da4ade88e57e6815d8b130c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bfc62d4fef6f21661183855e2312375", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersion.java", "commitBeforeChange": "e9b6b2fb912f9bb858bd9b4e8c93160bab9b774c", "commitAfterChange": "9d83c5e72c3c3a4b777224dfc83ca830e4a2d380", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static JavaVersion parseClassVersion(String text)", "signatureAfterChange": "   public static JavaVersion parseClassVersion(String text)", "diff": ["-      switch (major) {", "-        case 45:", "-          if (minor >= 3) { return JAVA_1_1; }", "-          else { return UNRECOGNIZED; }", "-        case 46: return JAVA_1_2;", "-        case 47: return JAVA_1_3;", "-        case 48: return JAVA_1_4;", "-        case 49: return JAVA_5;", "-        case 50: return JAVA_6;", "-        case 51: return JAVA_7;", "-        default: return (major > 51) ? FUTURE : UNRECOGNIZED;", "-      }", "+      return parseClassVersion(major, minor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9afc4c87539e63a73567fc019163eab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "47940fe74faf2ed044539c32c4d2eb5e5171e259", "commitAfterChange": "0d0c5947e7ead7115690128690c9c431a119fb4d", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "   private static String makeBlankString(int n)", "signatureAfterChange": "   private static String makeBlankString(int n)", "diff": ["-  /** Generates a string containng n blanks.  Intended for small values of n (typically < 50). */", "-  private static String makeBlankString(int n) {", "-      case 0: return \"\";", "-      case 1: return \" \";", "-      case 2: return \"  \";", "-      case 3: return \"   \";", "-      case 4: return \"    \";", "-      case 5: return \"     \";", "-      case 6: return \"      \";", "-      case 7: return \"       \";", "-      case 8: return \"        \";", "-        StringBuilder buf = new StringBuilder();", "-        for (int i = 0; i < n; i++) buf.append(' ');", "-        return buf.toString();", "+  /** Constructs a new string containng n blanks.  Intended for small values of n (typically < 50). */", "+  private static String makeBlankString(int n) {", "+    StringBuilder buf = new StringBuilder();", "+    for (int i = 0; i < n; i++) buf.append(' ');", "+    return buf.toString();"]}], "num": 909}
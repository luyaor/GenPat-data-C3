{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84705c58b8322efa20fe954e40d84289", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b66abbec938de4deb1b364fd9432270", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetupTest.java", "commitBeforeChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "commitAfterChange": "8d145adf36cd29029ae2516bc62fa87e62c87636", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testFile() throws CloneNotSupportedException, IOException", "signatureAfterChange": "      public void testFile() throws CloneNotSupportedException, IOException", "diff": ["+    assertTrue(p.getCurrent(pm).startsWith(\"(file.isdir Error\"));    ", "-    File fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest.txt\", TEST_STRING);", "+    File fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.isfile Error\"));    ", "-    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest.txt\", TEST_STRING);", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.exists Error\"));    ", "-    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest.txt\", TEST_STRING);", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.parent Error\"));    ", "+    dir = FileOps.createTempDirectory(\"DrJavaPropertySetupTest\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    assertEquals(dir.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(fil.getAbsolutePath()));", "+    assertEquals(fil.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+    ", "+    notFound = new File(System.getProperty(\"java.io.tmpdir\"),\"DrJavaPropertySetupTest.\" + System.currentTimeMillis() + \"-\" + (_r.nextInt() & 0xffff) + \".tmp\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(notFound.getAbsolutePath()));", "+    assertEquals(new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath())+File.pathSeparator+", "+                          StringOps.escapeFileName(fil.getAbsolutePath())+File.pathSeparator+", "+                          StringOps.escapeFileName(notFound.getAbsolutePath()));", "+    assertEquals(dir.getParentFile().getAbsolutePath()+File.pathSeparator+", "+                 fil.getParentFile().getAbsolutePath()+File.pathSeparator+", "+                 new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.abs Error\"));    ", "+    dir = FileOps.createTempDirectory(\"DrJavaPropertySetupTest\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getName()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.abs Error\"));", "+    p.resetAttributes();", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir.getParentFile().getAbsolutePath()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.abs Error\"));", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getName()));", "+    assertEquals(dir.getAbsolutePath(), p.getCurrent(pm));", "+", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(fil.getName()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(fil.getParentFile().getAbsolutePath()));", "+    assertEquals(fil.getAbsolutePath(), p.getCurrent(pm));", "+    ", "+    notFound = new File(System.getProperty(\"java.io.tmpdir\"),\"DrJavaPropertySetupTest.\" + System.currentTimeMillis() + \"-\" + (_r.nextInt() & 0xffff) + \".tmp\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(notFound.getName()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(notFound.getParentFile().getAbsolutePath()));", "+    assertEquals(notFound.getAbsolutePath(), p.getCurrent(pm));", "+", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getName())+File.pathSeparator+", "+                          StringOps.escapeFileName(fil.getName())+File.pathSeparator+", "+                          StringOps.escapeFileName(notFound.getName()));", "+    assertEquals(dir.getAbsolutePath()+File.pathSeparator+", "+                 fil.getAbsolutePath()+File.pathSeparator+", "+                 notFound.getAbsolutePath(), p.getCurrent(pm));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rel Error\"));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.mkdir Error\"));    ", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rm Error\"));    ", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.mv Error\"));    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4672c813894c25f409c10c4889ea7c6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 107, "signatureBeforeChange": "          public void testGetQualifiedSymbolData()", "signatureAfterChange": "          public void testGetQualifiedSymbolData()", "diff": ["-    public void testGetQualifiedSymbolData() {", "-      testLLVisitor._file = new File(\"testFiles/Fake.dj0\");", "-      SymbolData sd = new SymbolData(\"testPackage.File\");", "-      testLLVisitor._package = \"testPackage\";", "-      LanguageLevelConverter.symbolTable.put(\"testPackage.File\", sd);", "-      ", "-      SymbolData sd1 = new SymbolData(\"java.lang.String\");", "-      LanguageLevelConverter.symbolTable.put(\"java.lang.String\", sd1);", "-      ", "-      //Test that classes not in the symbol table are handled correctly.", "-      assertEquals(\"should the continuation symbol\", sd, ", "-                   testLLVisitor._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false, true));", "-//      assertEquals(\"should be one error so far.\", 1, errors.size());", "-      ", "-      ", "-      SymbolData sd2 = testLLVisitor._getQualifiedSymbolData(\"java.lang.Integer\", SourceInfo.NO_INFO, true, true, true);", "-      assertEquals(\"should return non-continuation java.lang.Integer\", \"java.lang.Integer\", sd2.getName());", "-      assertFalse(\"should not be a continuation.\", sd2.isContinuation());", "-      ", "-      SymbolData sd3 = testLLVisitor._getQualifiedSymbolData(\"Wow\", SourceInfo.NO_INFO, true, true, true);", "-      assertEquals(\"search should fail\", null, sd3);", "-//      assertEquals(\"should return Wow\", \"Wow\", sd3.getName());", "-//      assertFalse(\"Should not be a continuation.\", sd3.isContinuation());", "-      ", "-      // \"testPackage.File\" has been entered as a continuation in symbolTable.  Why should the following lookup fail?", "-//      //Test that classes in the symbol table are handled correctly", "-//      assertEquals(\"should return null sd--does not exist\", null, ", "-//                   _llv._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, false, false, true));", "-//      assertEquals(\"Should be 1 error\", 1, errors.size());", "-      ", "-      sd.setIsContinuation(false);", "-      assertEquals(\"should return non-continuation sd\", sd, ", "-                   testLLVisitor._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false,  true));", "-      ", "-      ", "-      assertEquals(\"Should return sd1.\", sd1, ", "-                   testLLVisitor._getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NO_INFO, true, false, true));", "-      assertFalse(\"sd1 should no longer be a continuation.\", sd1.isContinuation());", "-      ", "-      ", "-      ", "-      //check that stuff not in symbol table and packaged incorrectly is handled right.", "-      assertEquals(\"should return null-because it's not a valid class\", null, ", "-                   testLLVisitor._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-                                                   SourceInfo.NO_INFO, true, false, true));", "-      ", "-      assertEquals(\"should be two errors so far.\", 2, errors.size());", "-      assertNull(\"should return null\", ", "-                 testLLVisitor._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-                                                 SourceInfo.NO_INFO, false, false, false));", "-      ", "-      assertNull(\"should return null.\", ", "-                 testLLVisitor._getQualifiedSymbolData(\"notRightPackage\", SourceInfo.NO_INFO, false, false, false));", "-      assertEquals(\"should still be two errors.\", 2, errors.size());", "-    }", "+    public void testGetQualifiedSymbolData() {", "+                   testLLVisitor.getQualifiedSymbolData(\"int\", SourceInfo.NO_INFO, true, true, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"byte\", SourceInfo.NO_INFO, false, false, false));", "+      SymbolData result = testLLVisitor.getQualifiedSymbolData(\"int[]\", SourceInfo.NO_INFO, true, true, true);", "+                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NO_INFO, false, true, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NO_INFO, true, false, true));", "+      testLLVisitor._classesInThisFile.add(\"fully.qualified.Qwerty\");", "+                                                       continuations,", "+                                                       fixUps,", "+                                 PACKAGE_MAV, ", "+                                 new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]),", "+      bv._classesInThisFile.add(\"fully.qualified.Qwerty\" /*, new Pair<TypeDefBase, LanguageLevelVisitor>(cd, bv)*/);", "+                   bv.getSymbolData(\"Qwerty\", SourceInfo.NO_INFO, true, true));", "+      assertEquals(\"should also return a continuation\", sd, ", "+                   bv.getQualifiedSymbolData(\"fully.qualified.Qwerty\", SourceInfo.NO_INFO, false, false, true));", "+      assertTrue(\"should be a continuation\", sd.isContinuation());", "+//      System.err.println(\"SymbolData for 'a.b.c' is \" + sd);", "+      LanguageLevelConverter.symbolTable.put(\"a.b.c\", sd);", "+//      System.err.println(\"SymbolTable entry for 'a.b.c' is \" + LanguageLevelConverter.symbolTable.get(\"a.b.c\"));", "+//      LanguageLevelConverter.symbolTable.put(\"foobar\", new SymbolData(\"This is strange\"));", "+//      System.err.println(\"SymbolTable entry for 'foobar' is \" + LanguageLevelConverter.symbolTable.get(\"foobar\"));", "+                   testLLVisitor.getQualifiedSymbolData(\"a.b.c\", SourceInfo.NO_INFO, false, true, true));", "+      // TODO: create an import table to look at when no match is found in symbolTable.", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+//                         _llv.getQualifiedSymbolData(\"fully.qualified.Woah\", ", "+//      SourceInfo.NO_INFO, true, true, true));", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "+      assertFalse(\"sd2 should now be resolved\", sd2.isContinuation());", "+                   testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true));", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+      SymbolData newsd1 = testLLVisitor.getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NO_INFO, true, true, true);", "+//      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", new SymbolData(\"java.lang.Object\"));", "+      result = testLLVisitor.getSymbolData(\"String\", SourceInfo.NO_INFO);"]}], "num": 11136}
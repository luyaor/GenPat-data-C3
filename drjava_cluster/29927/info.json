{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54ae6aa4e895bb9c7bc9fa312197f19b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2819b1e9637b20127b5af03850a23e04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testInteractionPreventedFromExit() throws BadLocationException", "signatureAfterChange": "   public void testInteractionPreventedFromExit()     throws BadLocationException, InterruptedException", "diff": ["-  public void testInteractionPreventedFromExit() throws BadLocationException", "+  public void testInteractionPreventedFromExit()", "+    throws BadLocationException, InterruptedException", "-    String result = interpret(\"System.exit(-1);\");", "+    TestListener listener = new TestListener() {", "+      public void interactionStarted() {", "+        interactionStartCount++;", "+      }", "-    assertEquals(\"interactions result\",", "-                 DefaultGlobalModel.EXIT_CALLED_MESSAGE,", "-                 result);", "+      public void interactionsExited(int status) {", "+        assertInteractionStartCount(1);", "+        interactionsExitedCount++;", "+        lastExitStatus = status;", "+      }", "+", "+      public void interactionsReset() {", "+        synchronized(this) {", "+          assertInteractionStartCount(1);", "+          assertInteractionsExitedCount(1);", "+          interactionsResetCount++;", "+          this.notify();", "+        }", "+      }", "+    };", "+", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      interpretIgnoreResult(\"System.exit(23);\");", "+      listener.wait();", "+    }", "+", "+    listener.assertInteractionStartCount(1);", "+    listener.assertInteractionsResetCount(1);", "+    listener.assertInteractionsExitedCount(1);", "+    assertEquals(\"exit status\", 23, listener.lastExitStatus);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d42a7570dab8767696aaee61596defc8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testResetConsole() throws EditDocumentException, InterruptedException", "signatureAfterChange": "   public void testResetConsole() throws EditDocumentException, InterruptedException", "diff": ["-    TestListener listener = new TestListener() {", "-      public void interactionStarted() { }", "-      public void interactionEnded() {", "-        synchronized(_interactionDoneLock) {", "-          interactionEndCount++;", "-//          _interactionDone = true;", "-          _interactionDoneLock.notify();", "-        }", "-      }", "-", "-      public void consoleReset() { consoleResetCount++; }", "-    };", "+    InteractionListener listener = new InteractionListener();", "+    ", "+    listener.logInteractionStart();", "+    Utilities.clearEventQueue();", "+    ", "-//    _interactionDone = false;", "-    synchronized(_interactionDoneLock) {", "-      interpretIgnoreResult(\"System.out.print(\\\"a\\\");\");", "-      _interactionDoneLock.wait();  // notified on interactionEnded", "-    }", "-", "+    ", "+    listener.logInteractionStart();    // only resets the interactionDone and resetDone flags", "+    listener.resetConsoleResetCount(); // resets the resetConsoleCount in the listener", "+    ", "+    interpretIgnoreResult(\"System.out.print(\\\"a\\\");\");", "+    listener.waitInteractionDone();", "+    ", "+    Utilities.clearEventQueue();", "+    ", "-    listener.assertConsoleResetCount(2);", "+    listener.assertConsoleResetCount(1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db1c5e3716fc997aa66e8f4a7ae27a42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "5944dd2b12a74ebad6e3549d813d2dd557403c7e", "commitAfterChange": "53735c967d2add6a16ab5776bac9111426f41996", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public void testSaveClearAndLoadHistory() throws DocumentAdapterException,     BadLocationException, InterruptedException, IOException", "signatureAfterChange": "   public void testSaveClearAndLoadHistory() throws DocumentAdapterException,     BadLocationException, InterruptedException, IOException", "diff": ["+    String newLine = System.getProperty(\"line.separator\");", "+    String s3 = \"int y;\" + newLine + \"int z;\";", "+    interpretIgnoreResult(s3);", "+    while (listener.interactionEndCount == 2) {", "+      synchronized(listener) {", "+        try {", "+          listener.wait();", "+        }", "+        catch (InterruptedException ie) {", "+          throw new UnexpectedException(ie);", "+        }", "+      }", "+    }", "-                 s1+'\\n'+s2+'\\n',", "+                 s1 + newLine + s2 + newLine + s3 + newLine,", "-                 s1+\"\\n\"+s2+\";\\n\",", "+                 s1 + newLine + s2 + \";\" + newLine + s3 + newLine,", "-    listener.assertInteractionEndCount(2);", "-    listener.assertInteractionStartCount(2);", "+    listener.assertInteractionEndCount(3);", "+    listener.assertInteractionStartCount(3);", "-    //String newLine = System.getProperty(\"line.separator\");", "-                 History.HISTORY_FORMAT_VERSION_2 + s1 + \"\\n\" + s2 + \";\\n\",", "+                 History.HISTORY_FORMAT_VERSION_2 + ", "+                 s1 + newLine + s2 + \";\" + newLine + s3 + newLine,", "-    while (listener.interactionEndCount == 2) {", "+    while (listener.interactionEndCount == 3) {", "-    listener.assertInteractionStartCount(3);", "-    listener.assertInteractionEndCount(3);", "+    listener.assertInteractionStartCount(4);", "+    listener.assertInteractionEndCount(4);"]}], "num": 29927}
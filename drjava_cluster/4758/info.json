{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07b94d1a82ed01409d32330b290439f4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64f122083ad72996f263344bac244fdc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "4b6c56880670c4bb0f37de6a58c9d30d501c274a", "commitAfterChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   protected void _handleThreadDeathEvent(ThreadDeathEvent e) throws DebugException", "signatureAfterChange": "   protected void _handleThreadDeathEvent(ThreadDeathEvent e) throws DebugException", "diff": ["-    ", "-    ThreadReference running = _debugger.getCurrentRunningThread();", "-    if (e.thread().equals(running)) {", "-      // Delete any step requests pending on this thread", "-      EventRequestManager erm = _vm.eventRequestManager();", "-      List steps = erm.stepRequests();", "-      for (int i = 0; i < steps.size(); i++) {", "-        StepRequest step = (StepRequest)steps.get(i);", "-        if (step.thread().equals(e.thread())) {", "-          erm.deleteEventRequest(step);", "-          ", "-          // There can only be one step request per thread,", "-          //  so we can stop looking", "-          break;", "+    synchronized(_debugger) {", "+      ThreadReference running = _debugger.getCurrentRunningThread();", "+      if (e.thread().equals(running)) {", "+        // Delete any step requests pending on this thread", "+        EventRequestManager erm = _vm.eventRequestManager();", "+        List steps = erm.stepRequests();", "+        for (int i = 0; i < steps.size(); i++) {", "+          StepRequest step = (StepRequest)steps.get(i);", "+          if (step.thread().equals(e.thread())) {", "+            erm.deleteEventRequest(step);", "+            ", "+            // There can only be one step request per thread,", "+            //  so we can stop looking", "+            break;", "+          }", "+        _debugger.currThreadDied();", "-      _debugger.currThreadDied();", "-    }", "-    else {", "-      _debugger.nonCurrThreadDied();", "+      else {", "+        _debugger.nonCurrThreadDied();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "660a304ee343ab1677e5d1cd02f00fa1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/EventHandlerThread.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void _handleThreadDeathEvent(ThreadDeathEvent e) throws DebugException", "signatureAfterChange": "   private void _handleThreadDeathEvent(final ThreadDeathEvent e)", "diff": ["-  private void _handleThreadDeathEvent(ThreadDeathEvent e) throws DebugException {", "+  private void _handleThreadDeathEvent(final ThreadDeathEvent e) /* throws DebugException */ {", "-    synchronized(_debugger) {", "-      ThreadReference running = _debugger.getCurrentRunningThread();", "-      if (e.thread().equals(running)) {", "-        // Delete any step requests pending on this thread", "-        EventRequestManager erm = _vm.eventRequestManager();", "-        List steps = erm.stepRequests();", "-        for (int i = 0; i < steps.size(); i++) {", "-          StepRequest step = (StepRequest)steps.get(i);", "-          if (step.thread().equals(e.thread())) {", "-            erm.deleteEventRequest(step);", "-            ", "-            // There can only be one step request per thread,", "-            //  so we can stop looking", "-            break;", "+//    synchronized(_debugger) {", "+    SwingUtilities.invokeLater(new Runnable() {", "+      public void run() {", "+        try {", "+          ThreadReference running = _debugger.getCurrentRunningThread();", "+          if (e.thread().equals(running)) {", "+            // Delete any step requests pending on this thread", "+            EventRequestManager erm = _vm.eventRequestManager();", "+            List steps = erm.stepRequests();", "+            for (int i = 0; i < steps.size(); i++) {", "+              StepRequest step = (StepRequest)steps.get(i);", "+              if (step.thread().equals(e.thread())) {", "+                erm.deleteEventRequest(step);", "+                ", "+                // There can only be one step request per thread,", "+                //  so we can stop looking", "+                break;", "+              }", "+            }", "+            _debugger.currThreadDied();", "+          else _debugger.nonCurrThreadDied();", "+//    }", "+          ", "+          // Thread is suspended on death, so resume it now.", "+          e.thread().resume();", "-        _debugger.currThreadDied();", "-      }", "-      else _debugger.nonCurrThreadDied();", "-    }", "-    ", "-    // Thread is suspended on death, so resume it now.", "-    e.thread().resume();", "+        catch(DebugException e) { throw new UnexpectedException(e); }", "+      }   ", "+    });"]}], "num": 4758}
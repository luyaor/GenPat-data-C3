{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8d06b44328a7c9588536e099044e303", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61d93d5b99f414192e9a7de5ac4730ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public int findCharOnLine(final int pos, final char findChar)", "signatureAfterChange": "   public int findCharOnLine(final int pos, final char findChar)", "diff": ["-//      synchronized(_reduced) {", "-        final int oldPos = _currentLocation;", "-        int lineStart = _getLineStartPos(pos);", "-        int lineEnd = _getLineEndPos(pos);", "-        String lineText = getText(lineStart, lineEnd - lineStart);", "-        i = lineText.indexOf(findChar, 0);", "-        matchIndex = i + lineStart;", "+      final int oldPos = _currentLocation;", "+      int lineStart = _getLineStartPos(pos);", "+      int lineEnd = _getLineEndPos(pos);", "+      String lineText = getText(lineStart, lineEnd - lineStart);", "+      i = lineText.indexOf(findChar, 0);", "+      matchIndex = i + lineStart;", "+      ", "+      while (i != -1) { // match found", "+        /* Invariant: reduced model points to original location (here), lineText[0:i-1] does not contain valid ", "+         *            findChar, lineText[i] == findChar which may or may not be valid. */", "-        while (i != -1) { // match found", "-          /* Invariant: reduced model points to original location (here), lineText[0:i-1] does not contain valid ", "-           *            findChar, lineText[i] == findChar which may or may not be valid. */", "-          ", "-          // Move reduced model to location of ith char", "-          _setCurrentLocation(matchIndex);  // move reduced model to location matchIndex", "-          ", "-          // Check if matching char is in comment or quotes", "-          if (_reduced._getStateAtCurrent().equals(FREE)) break; // found matching char", "-          ", "-          // matching character is not valid, try again", "-          i = lineText.indexOf(findChar, i+1);", "-        }", "-        _setCurrentLocation(oldPos);  // restore old position", "-//      }", "+        // Move reduced model to location of ith char", "+        setCurrentLocation(matchIndex);  // move reduced model to location matchIndex", "+        ", "+        // Check if matching char is in comment or quotes", "+        if (_reduced.getStateAtCurrent().equals(FREE)) break; // found matching char", "+        ", "+        // matching character is not valid, try again", "+        i = lineText.indexOf(findChar, i+1);", "+      }", "+      setCurrentLocation(oldPos);  // restore old position"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e500d7b47722be76220f757d32a635", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevStmtPlus.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    // Find end of previous statement (or end of case statement)", "+    // Find end of previous statement, immediately enclosing brace, or end of case statement", "-    int lineStart = doc.getLineStartPos(here);", "+    int lineStart = doc.getLineStartPos(here);  // find start of current line", "-    try {", "-      prevDelimiterPos = doc.findPrevDelimiter(lineStart, delims);", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "+    try { prevDelimiterPos = doc.findPrevDelimiter(lineStart, delims); }  // find pos of delimiter preceding line start", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "-    // For 0, align to left margin", "+    // If no preceding delimiter found, align to left margin", "-      char delim = doc.getText(prevDelimiterPos, 1).charAt(0);", "+      char delim = doc.getText(prevDelimiterPos, 1).charAt(0);    // get delimiter char", "-        int testPos = doc.findPrevCharPos(prevDelimiterPos, ws);", "-        if (doc.getText(testPos,1).charAt(0) == '}') {", "-          prevDelimiterPos = testPos;", "+        int testPos = doc.findPrevCharPos(prevDelimiterPos, ws);  // find char preceding ';' delimiter", "+        char testDelim = doc.getText(testPos,1).charAt(0);", "+        if ( testDelim == '}' || testDelim == ')') {", "+          prevDelimiterPos = testPos;                             // if this char is '}' or ')', use it as delimiter", "-      if (delim == '}') {", "+      if (delim == '}' || delim == ')') {", "-        doc.resetReducedModelLocation();", "+//        doc.resetReducedModelLocation();  // why reset the reduced model comment walker?", "-        doc.move(dist);", "-        prevDelimiterPos -= doc.balanceBackward() - 1;", "-        doc.move(-dist);", "+        assert doc.getCurrentLocation() == here;", "+        doc.setCurrentLocation(prevDelimiterPos + 1);   // move cursor to right of '}' or ')' delim", "+        prevDelimiterPos -= doc.balanceBackward() - 1;  // use matching '{' or '(' as delim", "+        doc.setCurrentLocation(here);", "+        assert doc.getText(prevDelimiterPos, 1).charAt(0) == '{' || ", "+          doc.getText(prevDelimiterPos, 1).charAt(0) == '(';", "-    try {", "-      // Include colons as end of statement (ie. \"case\")", "-      char[] indentDelims;", "-      char[] indentDelimsWithColon = {';', '{', '}', ':'};", "-      char[] indentDelimsWithoutColon = {';', '{', '}'};", "-      if (_useColon) indentDelims = indentDelimsWithColon;", "-      else indentDelims = indentDelimsWithoutColon;", "-      ", "-      indent = doc.getIndentOfCurrStmt(prevDelimiterPos, indentDelims);", "-      ", "-    } catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    // Include colons as end of statement (ie. \"case\")", "+    char[] indentDelims;", "+    char[] indentDelimsWithColon = {';', '{', '}', ':'};", "+    char[] indentDelimsWithoutColon = {';', '{', '}'};", "+    if (_useColon) indentDelims = indentDelimsWithColon;", "+    else indentDelims = indentDelimsWithoutColon;", "+    ", "+    indent = doc.getIndentOfCurrStmt(prevDelimiterPos, indentDelims);"]}], "num": 30200}
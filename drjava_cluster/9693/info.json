{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43f3e478f623488d4608b617dbc41c7a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520bb910ca91dd31e3ffbb308d15deb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "     public Node visit(ArrayAllocation node)", "diff": ["-    public Object visit(ArrayAllocation node) {", "+    public Node visit(ArrayAllocation node) {", "-      LinkedList sizes = new LinkedList(); // Add parameterization <Expression>.", "-      Iterator it = node.getSizes().iterator();", "+      LinkedList<Expression> sizes = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+      Iterator<Expression> it = node.getSizes().iterator();", "-        sizes.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+        sizes.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57d29233fa35fe4927147a7717371fd8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/TreeClassInfo.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "         public Object visit(MethodDeclaration node)", "signatureAfterChange": "     public Void visit(MethodDeclaration node)", "diff": ["+    public Void visit(MethodDeclaration node) {", "+      List<MethodInfo> l = methods.get(node.getName());", "+      if (l == null) {", "+        l = new LinkedList<MethodInfo>();", "+      }", "+      ", "+      l.add(new TreeMethodInfo(node, classFinder, TreeClassInfo.this));", "+      methods.put(node.getName(), l);", "+      methodCount++;", "+      return null;", "-         */", "-        public Object visit(MethodDeclaration node) {", "-\t    List l = (List)methods.get(node.getName());", "-\t    if (l == null) {", "-\t\tl = new LinkedList();", "-\t    }", "-", "-\t    l.add(new TreeMethodInfo(node, classFinder, TreeClassInfo.this));", "-            methods.put(node.getName(), l);", "-\t    methodCount++;", "-            return null;", "-        }"]}], "num": 9693}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dabb0dca3f283f45909308fc08cf7fca", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac7a8edc86bef187d3daef34e1799407", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "e28d42989a089b15d3a01e7dd19b426bc7021c04", "commitAfterChange": "261ca8732921a2a5c58b2777d5419ddfe2c261df", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public InterpreterExtension()", "signatureAfterChange": "     public InterpreterExtension()", "diff": ["-      nameVisitorContext.setAdditionalClassLoaderContainer(classLoader);", "+      ClassLoaderContainer clc = new ClassLoaderContainer() {", "+        public ClassLoader getClassLoader() {", "+          return classLoader;", "+        }", "+      };", "+      nameVisitorContext.setAdditionalClassLoaderContainer(clc);", "-      checkVisitorContext.setAdditionalClassLoaderContainer(classLoader);", "+      checkVisitorContext.setAdditionalClassLoaderContainer(clc);", "-      evalVisitorContext.setAdditionalClassLoaderContainer(classLoader);", "+      evalVisitorContext.setAdditionalClassLoaderContainer(clc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86831ad75368dcafc95ae534d6cc0e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "b432c2a5363ca609f111d7dec3ae5ed814c173ea", "commitAfterChange": "9d11311a2c8fe69828f38bf3b0da9037a3e51914", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Class lookupClass(String cname, String ccname)     throws ClassNotFoundException", "signatureAfterChange": "   public Class lookupClass(String cname, String ccname)     throws ClassNotFoundException", "diff": ["+        ", "-    ", "-        return Class.forName(s, false, classLoader);", "+        try", "+        {", "+          return Class.forName(s, false, classLoader);", "+        } catch (ClassNotFoundException e) {", "+          return findInnerClass(s);         ", "+        }        ", "+     ", "+      } catch (ClassNotFoundException e) {", "+      }", "+    }", "+    //Now look through classes staticly imported with .*; for a static inner class ", "+    it = importOnDemandStaticClauses.iterator();", "+    while (it.hasNext()) {", "+      String s = it.next();", "+      try {", "+        return Class.forName(s+\"$\"+str, false, classLoader);"]}], "num": 15533}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acbb3c2a8f75b04990565f84076cb709", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4853c7a1d9f05752bbb46e15d01053ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "signatureAfterChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "diff": ["-    assertTrue(\"line after open paren\", rule.applyRule(_doc, 7));", "-    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 18));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 25));", "-    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 28));", "+    assertTrue(\"line after open paren\", rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 18, Indenter.OTHER));", "+    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 25, Indenter.OTHER));", "+    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 28, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b4829adc308777b7497a2af3bc03ff4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testPrefixOnCurrLine() throws BadLocationException", "signatureAfterChange": "   public void testPrefixOnCurrLine() throws BadLocationException", "diff": ["-    assertTrue(\"before brace\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"after brace\", !rule.applyRule(_doc, 2));", "+    assertTrue(\"before brace\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"after brace\", !rule.applyRule(_doc, 2, Indenter.OTHER));", "-    assertTrue(\"before brace\", !rule.applyRule(_doc, 7));", "-    assertTrue(\"after brace\", !rule.applyRule(_doc, 18));", "+    assertTrue(\"before brace\", !rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"after brace\", !rule.applyRule(_doc, 18, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c12c1b6bd986d26bb5bf843ba49edabb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlusTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testComment() throws BadLocationException", "signatureAfterChange": "      public void testComment() throws BadLocationException", "diff": ["-    _action.indentLine(_doc, 14); // line 3", "-    _action.indentLine(_doc, 27); // line 4", "-    _action.indentLine(_doc, 43); // line 5", "+    _action.indentLine(_doc, 14, Indenter.OTHER); // line 3", "+    _action.indentLine(_doc, 27, Indenter.OTHER); // line 4", "+    _action.indentLine(_doc, 43, Indenter.OTHER); // line 5", "-    _action.indentLine(_doc, 54); // after baz()", "+    _action.indentLine(_doc, 54, Indenter.OTHER); // after baz()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6af2ffeb5b4fe0a1506866f23212136", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testCommentedPrefixSearchComment() throws BadLocationException", "signatureAfterChange": "   public void testCommentedPrefixSearchComment() throws BadLocationException", "diff": ["-    assertTrue(\"line before star\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"just before star\", rule.applyRule(_doc, 4));", "-    assertTrue(\"just after star\", rule.applyRule(_doc, 6));", "-    assertTrue(\"line after star\", !rule.applyRule(_doc, 7));", "+    assertTrue(\"line before star\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"just before star\", rule.applyRule(_doc, 4, Indenter.OTHER));", "+    assertTrue(\"just after star\", rule.applyRule(_doc, 6, Indenter.OTHER));", "+    assertTrue(\"line after star\", !rule.applyRule(_doc, 7, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c80f0174e3bf5da998690a12c2b765b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "   public void testNoPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"line after close brace (no open brace)\", !rule.applyRule(_doc, 2));", "-    assertTrue(\"line after text (no open brace)\", !rule.applyRule(_doc, 9));", "-    assertTrue(\"line after text (no open brace)\", !rule.applyRule(_doc, 10));", "+    assertTrue(\"line after close brace (no open brace)\", !rule.applyRule(_doc, 2, Indenter.OTHER));", "+    assertTrue(\"line after text (no open brace)\", !rule.applyRule(_doc, 9, Indenter.OTHER));", "+    assertTrue(\"line after text (no open brace)\", !rule.applyRule(_doc, 10, Indenter.OTHER));", "-    assertTrue(\"no star\", !rule.applyRule(_doc, 6));", "+    assertTrue(\"no star\", !rule.applyRule(_doc, 6, Indenter.OTHER));"]}], "num": 5152}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a9e1143ad20185ea585f93eeae82590", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06d9a8c8e95102de7dfead560966457b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "acb61ff7586f62b61a15637f6576fc3aff67ead1", "commitAfterChange": "7f6caafd37c000cec49c11321ed7ed1199924a0b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 23, "signatureBeforeChange": "    public void hide()", "signatureAfterChange": "      public void itemStateChanged(ItemEvent e)", "diff": ["-  public void hide() {", "-    ", "-    /*if (_machine.isOnMatch()) {", "-      _defPane.select(_machine.getCurrentOffset() - ", "-      _machine.getFindWord().length(),", "-      _machine.getCurrentOffset());", "-      }", "-      else {", "-      _defPane.setCaretPosition(_machine.getCurrentOffset());", "-    ", "-    //_defPane.requestFocus();", "-    super.hide();", "-    _frame.uninstallFindReplaceDialog(this);", "-  }  ", "+   class MatchCaseListener implements ItemListener {", "+     public void itemStateChanged(ItemEvent e) {", "+       if (e.getStateChange() == ItemEvent.DESELECTED) {", "+         _machine.setMatchCase(false);", "+       }", "+       if (e.getStateChange() == ItemEvent.SELECTED) {", "+         _machine.setMatchCase(true);", "+       }", "+       ", "+     }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "904cfc1b51bca6a70db27e27a03134d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public ErrorListPane()", "signatureAfterChange": "     public ErrorListPane()", "diff": ["-      // If we set this pane to be of type text/rtf, it wraps based on words", "-      // as opposed to based on characters.", "+//      // If we set this pane to be of type text/rtf, it wraps based on words", "+//      // as opposed to based on characters.", "-      ", "+        ", "-      _showHighlightsCheckBox.addChangeListener( new ChangeListener() {", "-        public void stateChanged(ChangeEvent ce) {", "+      /* Item listener instead of change listener so that this code won't be called (twice) every time the mouse moves", "+       * over the _showHighlightsCheckBox (5/26/05)", "+       */", "+      _showHighlightsCheckBox.addItemListener(new ItemListener() {", "+        public void itemStateChanged(ItemEvent e) {", "-          if (_showHighlightsCheckBox.isSelected()) {", "+          if (e.getStateChange() == ItemEvent.DESELECTED) {", "+            lastDefPane.removeErrorHighlight();", "+          }", "+          ", "+          else if (e.getStateChange() == ItemEvent.SELECTED) {   ", "-//            DefinitionsPane curDefPane = _frame.getCurrentDefPane(); ", "-//            curDefPane.requestFocusInWindow();", "-//            curDefPane.getCaret().setVisible(true);", "+//          DefinitionsPane curDefPane = _frame.getCurrentDefPane(); ", "+//            lastDefPane.requestFocusInWindow();", "+//            lastDefPane.getCaret().setVisible(true);", "-          else  lastDefPane.removeErrorHighlight();", "-    }", "+    }     "]}], "num": 5931}
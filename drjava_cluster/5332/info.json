{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2137f1c3e395d390c473f0735cec080", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d851b2b0a166b3f39ac291788169e9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public TypeData forThrowStatementOnly(ThrowStatement that, TypeData thrown_result)", "signatureAfterChange": "   public TypeData forThrowStatementOnly(ThrowStatement that, TypeData thrown_result)", "diff": ["-    if (thrown_result == null || !assertFound(thrown_result, that.getThrown())) {return null;}", "+    if (thrown_result == null || !assertFound(thrown_result, that.getThrown())) return null;", "-      _addError(\"You cannot throw a class or interface name.  Perhaps you mean to instantiate the exception \" + thrown_result.getSymbolData().getName() + \" that you are throwing\", that);", "+      _addError(\"You cannot throw a class or interface name.  Perhaps you mean to instantiate the exception class \" + ", "+                thrown_result.getSymbolData().getName() + \" that you are throwing\", that);", "+//    System.err.println(\"getSymbolData(\\\"java.lang.Throwable\\\", that, false, true) = \" + ", "+//                       getSymbolData(\"java.lang.Throwable\", that, false, true));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f28301403161b306ed3ddd5c9c94b038", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "   public TypeData forComplexMethodInvocation(ComplexMethodInvocation that)", "signatureAfterChange": "   public TypeData forComplexMethodInvocation(ComplexMethodInvocation that)", "diff": ["-    if (!assertFound(context, that.getEnclosing()) || context==null) {return null;}", "-  ", "+    if (! assertFound(context, that.getEnclosing()) || context == null)  return null;", "+    ", "-    checkAccessibility(that, context.getSymbolData().getMav(), context.getSymbolData().getName(), context.getSymbolData(),", "-                       _data.getSymbolData(), \"class or interface\", true);", "-", "+    checkAccessibility(that, context.getSymbolData().getMav(), context.getSymbolData().getName(), ", "+                       context.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "-    if (inStaticMethod()) { context = context.getSymbolData();}", "+    // WHICH IS WRONG.  If the method call has an explicit receiver object, this property is IRRELEVANT.g", "+//    if (inStaticMethod()) { context = context.getSymbolData();}"]}], "num": 5332}
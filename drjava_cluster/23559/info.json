{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "894b909b58f79336f166325c83917f95", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b9e69a7ed972543a80dd397e114402", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public void testUndoOrRedoSetsUnmodifiedState() throws BadLocationException", "signatureAfterChange": "   public void testUndoOrRedoSetsUnmodifiedState() throws BadLocationException", "diff": ["-    _defModel.addUndoableEditListener(_defModel.getUndoManager());", "-    _defModel.insertString(0, \"This is text\", null);", "-    assertTrue(\"Document should be modified.\", _defModel.isModifiedSinceSave());", "-    _defModel.getUndoManager().undo();", "-    _defModel.updateModifiedSinceSave();", "-    assertFalse(\"Document should no longer be modified after undo.\", _defModel.isModifiedSinceSave());", "-    _defModel.insertString(0, \"This is text\", null);", "-    _defModel.resetModification();", "-    assertFalse(\"Document should not be modified after \\\"save\\\".\", _defModel.isModifiedSinceSave());", "-    _defModel.getUndoManager().undo();", "-    _defModel.updateModifiedSinceSave();", "-    assertTrue(\"Document should be modified after undo.\", _defModel.isModifiedSinceSave());", "-    _defModel.getUndoManager().redo();", "-    _defModel.updateModifiedSinceSave();", "-    assertFalse(\"Document should no longer be modified after redo.\", _defModel.isModifiedSinceSave());", "+    _doc.addUndoableEditListener(_doc.getUndoManager());", "+    _doc.insertString(0, \"This is text\", null);", "+    assertTrue(\"Document should be modified.\", _doc.isModifiedSinceSave());", "+    _doc.getUndoManager().undo();", "+    _doc.updateModifiedSinceSave();", "+    assertFalse(\"Document should no longer be modified after undo.\", _doc.isModifiedSinceSave());", "+    _doc.insertString(0, \"This is text\", null);", "+    _doc.resetModification();", "+    assertFalse(\"Document should not be modified after \\\"save\\\".\", _doc.isModifiedSinceSave());", "+    _doc.getUndoManager().undo();", "+    _doc.updateModifiedSinceSave();", "+    assertTrue(\"Document should be modified after undo.\", _doc.isModifiedSinceSave());", "+    _doc.getUndoManager().redo();", "+    _doc.updateModifiedSinceSave();", "+    assertFalse(\"Document should no longer be modified after redo.\", _doc.isModifiedSinceSave());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0083844bf9fbeb6557aecfb151241b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "efaccf437175951cd0b6645fd51acf615d54103d", "commitAfterChange": "eba3fba4afbda1a0953798485a71c0bfbe1bb5cf", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public void testUndoAndRedoAfterHittingEnter() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["-  public void testUndoAndRedoAfterHittingEnter() throws BadLocationException {", "-    String text = \"public class foo {\";", "-    ", "-    String afterEnter =", "+  public void testCompoundUndoManager() throws BadLocationException {", "+    String text =", "-      \"  \";", "-", "+      \"int bar;\\n\" +", "+      \"}\";", "+    ", "+    String indented =", "+      \"public class foo {\\n\" +", "+      \"  int bar;\\n\" +", "+      \"}\";", "+    ", "-    DrJava.getConfig().setSetting(OptionConstants.INDENT_LEVEL, new Integer(2));", "-    _defModel.insertString(0, text, null);", "-    assertEquals(\"Should have inserted correctly.\", text, ", "-                 _defModel.getText(0, _defModel.getLength()));", "+    DrJava.getConfig().setSetting(OptionConstants.INDENT_LEVEL,new Integer(2));", "-    _defModel.insertString(18, \"\\n\", null);", "-/*", "-    assertEquals(\"Should have entered the newline correctly.\", afterEnter, ", "-                 _defModel.getText(0,_defModel.getLength()));", "+    // Start a compound edit and verify the returned key", "+    int key = _defModel.getUndoManager().startCompoundEdit();", "+    assertEquals(\"Should have returned the correct key.\", 0, key);", "+    ", "+    // Insert a test string into the document", "+    _defModel.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // End the outer compound edit and verify that both get undone", "+    _defModel.getUndoManager().endCompoundEdit(key);", "-    assertEquals(\"undo commenting\",text, _defModel.getText(0,_defModel.getLength()));", "-    _defModel.getUndoManager().redo();", "-    assertEquals(\"redo commenting\",commented, _defModel.getText(0,_defModel.getLength()));", "-*/    ", "+    assertEquals(\"Should have undone correctly.\", \"\", ", "+                 _defModel.getText(0, _defModel.getLength()));"]}], "num": 23559}
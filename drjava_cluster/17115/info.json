{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "572242554695abe48038ffb1afcafb1b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b80a52a88ca42f14bc090b3e174f7834", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7100bfae3584eff8b8b1993fd999385d8f88ea13", "commitAfterChange": "6bcdef7d4202e06be1c5717fc181a0fdfcc7756a", "methodNumberBeforeChange": 528, "methodNumberAfterChange": 528, "signatureBeforeChange": "   private void _setMenuShortcut(JMenuItem item, Action a, Option<KeyStroke> opt)", "signatureAfterChange": "   private void _setMenuShortcut(JMenuItem item, Action a, VectorOption<KeyStroke> opt)", "diff": ["-  private void _setMenuShortcut(JMenuItem item, Action a, Option<KeyStroke> opt) {", "-    KeyStroke ks = DrJava.getConfig().getSetting(opt);", "+  private void _setMenuShortcut(JMenuItem item, Action a, VectorOption<KeyStroke> opt) {", "+    Vector<KeyStroke> keys = DrJava.getConfig().getSetting(opt);", "-    if (ks != KeyStrokeOption.NULL_KEYSTROKE &&", "-        KeyBindingManager.ONLY.get(ks) == a) {", "-      item.setAccelerator(ks);", "-      //KeyBindingManager.Singleton.addListener(opt, item);", "+    if ((keys.size()>0) && KeyBindingManager.ONLY.get(keys.get(0)) == a) {", "+      item.setAccelerator(keys.get(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1e0b79d10565f1830a1b7e1da5dc4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "7100bfae3584eff8b8b1993fd999385d8f88ea13", "commitAfterChange": "6bcdef7d4202e06be1c5717fc181a0fdfcc7756a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private void _updateMenuItem (KeyStrokeData data)", "signatureAfterChange": "      private void updateMenuItem(KeyStrokeData data)", "diff": ["+  ", "+  private void updateMenuItem(KeyStrokeData data) {", "+    JMenuItem jmi = data.getJMenuItem();", "+    ", "+    // Check associated Menu Item. If jmi is null, this keystroke maps to an action that isn't in the menu", "+    if (jmi != null) {", "+      Vector<KeyStroke> keys = data.getKeyStrokes();", "+      if (keys.size()>0) {", "+        // Since we can have multiple keys mapped to the same action, we use the first key as menu item accelerator", "+        jmi.setAccelerator(keys.get(0));", "+      }", "+      else {", "+        // Clear the menu item's accelerator", "+        jmi.setAccelerator(null);", "+      }", "+    }", "+  }", "-    private void _updateMenuItem (KeyStrokeData data) {", "-      JMenuItem jmi = data.getJMenuItem();", "-", "-      //Check associated Menu Item", "-      // If jmi is null, this keystroke maps to an action that isn't in the menu", "-      if (jmi != null) {", "-        KeyStroke ks = data.getKeyStroke();", "-        if (ks != KeyStrokeOption.NULL_KEYSTROKE) {", "-          // If ks is NULL_KEYSTROKE, we don't want it \"active\", since some", "-          //  Windows keys generate NULL_KEYSTROKE", "-          jmi.setAccelerator(ks);", "-        }", "-        else {", "-          // Clear the menu item's accelerator", "-          jmi.setAccelerator(null);", "-        }", "-    }"]}], "num": 17115}
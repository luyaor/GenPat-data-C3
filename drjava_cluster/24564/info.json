{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd5aeec03be0d8bdbdeefc57e1b990f8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "157861cefc1f0bafdbb00cfb78bc4f49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "   public TypeData forInstanceofExpression(InstanceofExpression that)", "signatureAfterChange": "   public TypeData forInstanceofExpression(InstanceofExpression that)", "diff": ["-    final SymbolData type_result = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType(), false);", "-    final TypeData value_result = that.getValue().visit(this);", "+    final SymbolData typeRes = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType(), false);", "+    final TypeData valueRes = that.getValue().visit(this);", "-    if (type_result == null) {", "+    if (typeRes == null) {", "-    if (! assertFound(value_result, that.getValue())) {", "+    if (! assertFound(valueRes, that.getValue())) {", "-    // Neither type_result nor value_result are null.", "-    return forInstanceofExpressionOnly(that, type_result, value_result);", "+    // Neither typeRes nor valueRes are null.", "+    return forInstanceofExpressionOnly(that, typeRes, valueRes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "164163b69ab19c952c80348b9ff5b62b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SpecialTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public TypeData forInitializedVariableDeclarator(InitializedVariableDeclarator that)", "signatureAfterChange": "   public TypeData forInitializedVariableDeclarator(InitializedVariableDeclarator that)", "diff": ["-    final SymbolData type_result = getSymbolData(that.getType().getName(), _data, that.getType());", "-    final TypeData name_result = that.getName().visit(this); //we think this is always null", "+    final SymbolData typeRes = getSymbolData(that.getType().getName(), _data, that.getType());", "+    final TypeData nameRes = that.getName().visit(this); //we think this is always null", "-      initializer_result = forArrayInitializerHelper((ArrayInitializer) that.getInitializer(), type_result);", "+      initializer_result = forArrayInitializerHelper((ArrayInitializer) that.getInitializer(), typeRes);", "-    return forInitializedVariableDeclaratorOnly(that, type_result, name_result, initializer_result);", "+    return forInitializedVariableDeclaratorOnly(that, typeRes, nameRes, initializer_result);"]}], "num": 24564}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6add9400c38f6b37a6d380a6fe346e90", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24a00215512ac218f695763f8182041f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 144, "signatureBeforeChange": "   public ProjectProfile _makeProjectProfile(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "signatureAfterChange": "   public ProjectProfile _makeProjectProfile(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "diff": ["-    try {", "-      ArrayList<DebugBreakpointData> l = new ArrayList<DebugBreakpointData>();", "-      for(Breakpoint bp: getDebugger().getBreakpoints()) { l.add(bp); }", "-      builder.setBreakpoints(l);", "-    }", "-    catch(DebugException de) { /* ignore, just don't store breakpoints */ }", "+    ArrayList<DebugBreakpointData> l = new ArrayList<DebugBreakpointData>();", "+    for(Breakpoint bp: getBreakpointManager().getRegions()) { l.add(bp); }", "+    builder.setBreakpoints(l);", "+    ", "+    // add bookmarks", "+    builder.setBookmarks(getBookmarkManager().getRegions());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "522d05aac9a10aca41fff2dd1dde161d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public void testDoNotRunJUnitIfFileHasBeenMoved() throws Exception", "signatureAfterChange": "    public void testDoNotRunJUnitIfFileHasBeenMoved() throws Exception", "diff": ["+//    Utilities.show(\"Running testDoNotRunJUnitIfFileHasBeenMoved\");", "+    ", "-    try {", "-      doc.startJUnit();", "-      fail(\"JUnit should not have started.\");", "-    }", "-    catch (FileMovedException fme) {", "-      //JUnit should not have started, because the documents file is not", "-      // where it should be on the disk.", "-    }", "+    doc.startJUnit();", "+    listener.assertJUnitStartCount(0);", "+    listener.assertJUnitTestStartedCount(0);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f41d47fbc958b08383520632aa3045f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "4276346051c6ab89c146c0041be28826e7dfbe12", "commitAfterChange": "86bed99990f6eb7fff2cb31d595e17b49135df26", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": "     protected DefinitionsDocument getDocument()", "signatureAfterChange": "     protected DefinitionsDocument getDocument()", "diff": ["-//      }", "-      try{", "-        return _cacheAdapter.getDocument();", "-      }catch(FileMovedException e){", "-//        System.out.println(\"DefaultGlobalModel: 1430: FileMovedException should be handled by box that fixes everything.\");", "-      }catch(IOException e){", "-//        System.out.println(\"DefaultGlobalModel: 1432: IOException should be handled by box that fixes everything.\");", "-      }", "+      //      }", "-        _notifier.documentNotFound(this,_file);", "-        _documentNavigator.refreshDocument(getIDocGivenODD(this), _file.getCanonicalFile().getParent());", "-      } catch(IOException ioe) {", "-        throw new UnexpectedException(ioe);", "+        return _cacheAdapter.getDocument();", "+      } catch(IOException e) {", "+//        new Exception(\"* get document IOEx\").printStackTrace(System.out);", "+        try {", "+          _notifier.documentNotFound(this,_file);", "+          if (!isUntitled()) ", "+            _documentNavigator.refreshDocument(getIDocGivenODD(this), _file.getCanonicalFile().getParent());", "+          else", "+            ", "+          return _cacheAdapter.getDocument();", "+          ", "+        } catch(IOException ioe) {", "+          throw new UnexpectedException(ioe);", "+        }", "+        //        System.out.println(\"DefaultGlobalModel: 1432: IOException should be handled by box that fixes everything.\");", "-      return getDocument();", "-", "+      return null;"]}], "num": 5096}
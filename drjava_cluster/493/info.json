{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9d3705ab1ce6b26c43d9a5d34b04d34", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1299fc6f23aa74c2a8e745826bea407", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "     public Object visit(DivideAssignExpression node)", "signatureAfterChange": "   public Class visit(DivideAssignExpression node)", "diff": ["+   */", "+  public Class visit(DivideAssignExpression node) {", "+    // Check the types", "+    Node  ln = node.getLeftExpression();", "+    Class lc = (Class)ln.acceptVisitor(this);", "+    Class rc = (Class)node.getRightExpression().acceptVisitor(this);", "+    ", "+    if (lc == null          || rc == null          ||", "+        lc == void.class    || rc == void.class    ||", "+        lc == boolean.class || rc == boolean.class ||", "+        !lc.isPrimitive()   || !rc.isPrimitive()) {", "+      throw new ExecutionError(\"division.type\", node);", "+    }", "+    ", "+    // The left subexpression must be a variable", "+    if (!ln.hasProperty(NodeProperties.MODIFIER)) {", "+      throw new ExecutionError(\"left.expression\", node);", "+    }", "+    ", "+    // Sets the type property of this node", "+    node.setProperty(NodeProperties.TYPE, lc);", "+    return lc;", "+  }", "-     */", "-    public Object visit(DivideAssignExpression node) {", "-        // Check the types", "- \tNode  ln = node.getLeftExpression();", "-        Class lc = (Class)ln.acceptVisitor(this);", "-        Class rc = (Class)node.getRightExpression().acceptVisitor(this);", "-", "-        if (lc == null          || rc == null          ||", "-            lc == void.class    || rc == void.class    ||", "-            lc == boolean.class || rc == boolean.class ||", "-            !lc.isPrimitive()   || !rc.isPrimitive()) {", "-            throw new ExecutionError(\"division.type\", node);", "-        }", "-        ", "-        // The left subexpression must be a variable", "-        if (!ln.hasProperty(NodeProperties.MODIFIER)) {", "-            throw new ExecutionError(\"left.expression\", node);", "-        }", "-", "-        // Sets the type property of this node", "-        node.setProperty(NodeProperties.TYPE, lc);", "-        return lc;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fde7c010b5d20686983aecb00e55dd89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "     public Object visit(RemainderAssignExpression node)", "signatureAfterChange": "   public Class visit(RemainderAssignExpression node)", "diff": ["+   */", "+  public Class visit(RemainderAssignExpression node) {", "+    // Check the types", "+    Node  ln = node.getLeftExpression();", "+    Class lc = (Class)ln.acceptVisitor(this);", "+    Class rc = (Class)node.getRightExpression().acceptVisitor(this);", "+    ", "+    if (lc == null          || rc == null          ||", "+        lc == void.class    || rc == void.class    ||", "+        lc == boolean.class || rc == boolean.class ||", "+        !lc.isPrimitive()   || !rc.isPrimitive()) {", "+      throw new ExecutionError(\"remainder.type\", node);", "+    }", "+    ", "+    // The left subexpression must be a variable", "+    if (!ln.hasProperty(NodeProperties.MODIFIER)) {", "+      throw new ExecutionError(\"left.expression\", node);", "+    }", "+    ", "+    // Sets the type property of this node", "+    node.setProperty(NodeProperties.TYPE, lc);", "+    return lc;", "+  }", "-     */", "-    public Object visit(RemainderAssignExpression node) {", "-        // Check the types", "- \tNode  ln = node.getLeftExpression();", "-        Class lc = (Class)ln.acceptVisitor(this);", "-        Class rc = (Class)node.getRightExpression().acceptVisitor(this);", "-", "-        if (lc == null          || rc == null          ||", "-            lc == void.class    || rc == void.class    ||", "-            lc == boolean.class || rc == boolean.class ||", "-            !lc.isPrimitive()   || !rc.isPrimitive()) {", "-            throw new ExecutionError(\"remainder.type\", node);", "-        ", "-        // The left subexpression must be a variable", "-        if (!ln.hasProperty(NodeProperties.MODIFIER)) {", "-            throw new ExecutionError(\"left.expression\", node);", "-", "-        // Sets the type property of this node", "-        node.setProperty(NodeProperties.TYPE, lc);", "-        return lc;", "-    }"]}], "num": 493}
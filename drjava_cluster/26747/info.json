{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fa99577ab37e049b8b7fc952b556880", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dcce31daa0f65db23cafb2f2f456def", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ea2763ecde4185a8c33fdd0462c9d12c206c7378", "commitAfterChange": "1ccb0f21abc2aaa138e57bd5c1add5c018ff34ef", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+//    // Try to undo the nested edit", "+//    try {", "+//      _defModel.getUndoManager().undo();", "+//      fail(\"Should not have allowed undoing a nested edit.\");", "+//    }", "+//    catch (CannotUndoException e) {", "+//      // Correct: cannot undo a nested edit", "+//    }", "+//", "+//    try {", "+//      _defModel.getUndoManager().redo();", "+//      fail(\"Should not have allowed redoing a nested edit.\");", "+//    }", "+//    catch (CannotRedoException cre) {", "+//      // Correct: cannot redo a nested edit", "+//    }", "+//    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2f3dddb41b24e7d9ed36357b6c01ec7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "ea54d5918e0742266441f70659af74f35bca898d", "commitAfterChange": "e6ef9e23d624990cf9fd00ec857466a046415b6a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void testOpenMultipleFiles() throws BadLocationException, IOException", "signatureAfterChange": "   public void testOpenMultipleFiles() throws BadLocationException, IOException", "diff": ["-      OpenDefinitionsDocument doc = _model.openFiles(new FileSelector(tempFile1,tempFile2));", "+      OpenDefinitionsDocument[] docs = _model.openFiles(new FileSelector(tempFile1,tempFile2));", "-      assertModified(false, doc);", "-      assertContents(BAR_TEXT, doc);", "+      assertEquals(\"Number of docs returned\", docs.length, 2);", "+      assertModified(false, docs[0]);", "+      assertContents(FOO_TEXT, docs[0]);", "+      assertModified(false, docs[1]);", "+      assertContents(BAR_TEXT, docs[1]);"]}], "num": 26747}
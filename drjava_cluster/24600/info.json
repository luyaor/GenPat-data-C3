{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0fc4a4e034b8eaf85f2d1baa955e009", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01bbcd3ee91f3f419bbf4a51dd52a7a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "ea3de3bd50de8d728bdb5d615bd9b8838d2e94b4", "commitAfterChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException", "signatureAfterChange": "   public java.util.Set<String> getNamesOfSelectedTopLevelGroup() throws GroupNotSelectedException", "diff": ["-  /** Returns the name of the top level group that the selected item descends from.  Only runs in event thread. */", "-  public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException {", "-    assert EventQueue.isDispatchThread();", "-    ", "-      TreePath p = getSelectionPath();", "-      ", "-      if (n == _model.getRoot())", "-        throw new GroupNotSelectedException(\"there is no top level group for the root of the tree\");", "-      ", "-      while (! _roots.contains(n)) { n = n.getParent(); }", "-      ", "-      return ((GroupNode<?>)n).getData();", "+  /** Returns the names of the top level groups that the selected items descend from.  Only runs in event thread. */", "+  public java.util.Set<String> getNamesOfSelectedTopLevelGroup() throws GroupNotSelectedException {", "+    assert (EventQueue.isDispatchThread() || Utilities.TEST_MODE);", "+    ", "+    HashSet<String> names = new HashSet<String>();", "+    LinkedList<GroupNode<ItemT>> roots = new LinkedList<GroupNode<ItemT>>(_roots);", "+    ", "+    TreePath[] ps = getSelectionPaths();", "+    if (ps!=null) {", "+      for(TreePath p: ps) {", "+        if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {", "+          DefaultMutableTreeNode n = (DefaultMutableTreeNode) p.getLastPathComponent();", "+          ", "+          for(GroupNode<ItemT> gn: roots) {", "+            if (gn.isNodeDescendant(n)) {", "+              // n is a descendent of gn; add the name of the group node", "+              names.add(gn.getData());", "+              // this group node definitely contains selected items, no need to check it again;", "+              // remove it from the list of roots to consider", "+              roots.remove(gn);", "+              break;", "+            }", "+          }", "+        }", "+      }", "+    }", "+    ", "+    if (names.isEmpty()) { throw new GroupNotSelectedException(\"there is no top level group for the root of the tree\"); }", "+    ", "+    return names;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e8fe7e07c596bb2e0a4111fd85a231", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DrJavaTestCaseClassLoader.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  private void readExcludedPackages()", "signatureAfterChange": "   private void readExcludedPackages()", "diff": ["-  */", "- private void readExcludedPackages() {  ", "-  fExcluded= new Vector<String>(10);", "-  for (int i= 0; i < defaultExclusions.length; i++)", "-   fExcluded.addElement(defaultExclusions[i]);", "-   ", "-  InputStream is= getClass().getResourceAsStream(EXCLUDED_FILE);", "-  if (is == null) ", "-   return;", "-  Properties p= new Properties();", "-  try {", "-   p.load(is);", "-  catch (IOException e) {", "-   return;", "-  } finally {", "-   try {", "-    is.close();", "-   } catch (IOException e) {", "-   }", "-  for (Enumeration e= p.propertyNames(); e.hasMoreElements(); ) {", "-   String key= (String)e.nextElement();", "-   if (key.startsWith(\"excluded.\")) {", "-    String path= p.getProperty(key);", "-    path= path.trim();", "-    if (path.endsWith(\"*\"))", "-     path= path.substring(0, path.length()-1);", "-    if (path.length() > 0) ", "-     fExcluded.addElement(path);    ", "-   }", "- }", "+   */", "+  private void readExcludedPackages() {  ", "+    fExcluded = new Vector<String>(10);", "+    for (String de: defaultExclusions) fExcluded.addElement(de);", "+    ", "+    InputStream is = getClass().getResourceAsStream(EXCLUDED_FILE);", "+    if (is == null) return;", "+    Properties p = new Properties();", "+    try { p.load(is); }", "+    catch (IOException e) { return; } ", "+    finally {", "+      try { is.close(); } ", "+      catch (IOException e) {", "+        /* do nothing */", "+      }", "+    }", "+    Enumeration<String> pnames = (Enumeration<String>) p.propertyNames();", "+    while (pnames.hasMoreElements()) {", "+      String key = pnames.nextElement();", "+      if (key.startsWith(\"excluded.\")) {", "+        String path = p.getProperty(key);", "+        path = path.trim();", "+        if (path.endsWith(\"*\")) path= path.substring(0, path.length()-1);", "+        if (path.length() > 0) fExcluded.addElement(path);    ", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e28dd85bc2d81b62f000f19cd5da19dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public synchronized boolean selectDocumentAt(int x, int y)", "signatureAfterChange": "   public boolean selectDocumentAt(int x, int y)", "diff": ["-  public synchronized boolean selectDocumentAt(int x, int y) {", "-    TreePath path = getPathForLocation(x, y);", "-    if (path == null) return false;", "-    else {", "-      DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();", "-      if (node instanceof LeafNode) {", "-        this.expandPath(path);", "-        this.setSelectionPath(path);", "-        this.scrollPathToVisible(path);", "-        return true;", "-      } ", "-      else if (node instanceof InnerNode) {", "-        this.expandPath(path);", "-        this.setSelectionPath(path);", "-        this.scrollPathToVisible(path);", "-        return true;", "-      } ", "-      else if (node instanceof RootNode) {", "-        this.expandPath(path);", "-        this.setSelectionPath(path);", "-        this.scrollPathToVisible(path);", "-        return true;", "-      } ", "-      else return false;", "+  public boolean selectDocumentAt(int x, int y) {", "+    synchronized (_model) {", "+      TreePath path = getPathForLocation(x, y);", "+      if (path == null) return false;", "+      else {", "+        DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();", "+        if (node instanceof LeafNode) {", "+          this.expandPath(path);", "+          this.setSelectionPath(path);", "+          this.scrollPathToVisible(path);", "+          return true;", "+        } ", "+        else if (node instanceof InnerNode) {", "+          this.expandPath(path);", "+          this.setSelectionPath(path);", "+          this.scrollPathToVisible(path);", "+          return true;", "+        } ", "+        else if (node instanceof RootNode) {", "+          this.expandPath(path);", "+          this.setSelectionPath(path);", "+          this.scrollPathToVisible(path);", "+          return true;", "+        } ", "+        else return false;", "+      }"]}], "num": 24600}
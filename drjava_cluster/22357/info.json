{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a565ec31a306ccc0e65c518c6feb928", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f948e84d615361d996abf1fb4a1c801", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 73, "signatureBeforeChange": "   private Type handleShiftExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleShiftExpression(BinaryExpression node)", "diff": ["-   */", "-  private Type handleShiftExpression(BinaryExpression node) {", "-    node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.unaryPromote(ts.makePrimitive(node.getLeftExpression()));", "-      Expression right = ts.unaryPromote(ts.makePrimitive(node.getRightExpression()));", "-      node.setLeftExpression(left);", "-      node.setRightExpression(right);", "-      ", "-      if (!(getType(left) instanceof IntegralType) || !(getType(right) instanceof IntegralType)) {", "-        throw new ExecutionError(\"shift.expression.type\", node);", "-      }", "-      ", "-      return setType(node, getType(left));", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"shift.expression.type\", node);", "-    }", "-  }", "+     */", "+    private Type handleShiftExpression(BinaryExpression node) {", "+      check(node.getLeftExpression());", "+      check(node.getRightExpression());", "+      try {", "+        Expression left = ts.unaryPromote(ts.makePrimitive(node.getLeftExpression()));", "+        Expression right = ts.unaryPromote(ts.makePrimitive(node.getRightExpression()));", "+        node.setLeftExpression(left);", "+        node.setRightExpression(right);", "+        ", "+        if (!(getType(left) instanceof IntegralType) || !(getType(right) instanceof IntegralType)) {", "+          throw new ExecutionError(\"shift.expression.type\", node);", "+        }", "+        ", "+        return setType(node, getType(left));", "+      }", "+      catch (UnsupportedConversionException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c08a28eb3766d67147b3eba7ad87f6d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 77, "signatureBeforeChange": "   private Type handleShiftAssignmentExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleShiftAssignmentExpression(BinaryExpression node)", "diff": ["-   */", "-  private Type handleShiftAssignmentExpression(BinaryExpression node) {", "-    Type result = node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.unaryPromote(ts.makePrimitive(node.getLeftExpression()));", "-      Expression right = ts.unaryPromote(ts.makePrimitive(node.getRightExpression()));", "-      ", "-      if (!(getType(left) instanceof IntegralType) || !(getType(right) instanceof IntegralType) || ", "-          !hasVariableType(node.getLeftExpression())) {", "-      ", "-      setLeftExpression(node, left); // not to be confused with node.setLeftExpression(...)", "-      node.setRightExpression(right);", "-      return setType(node, result);", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"shift.expression.type\", node);", "+     */", "+    private Type handleShiftAssignmentExpression(BinaryExpression node) {", "+      Type result = check(node.getLeftExpression());", "+      check(node.getRightExpression());", "+      try {", "+        Expression left = ts.unaryPromote(ts.makePrimitive(node.getLeftExpression()));", "+        Expression right = ts.unaryPromote(ts.makePrimitive(node.getRightExpression()));", "+        ", "+        if (!(getType(left) instanceof IntegralType) || !(getType(right) instanceof IntegralType) || ", "+            !hasVariableType(node.getLeftExpression())) {", "+          throw new ExecutionError(\"shift.expression.type\", node);", "+        }", "+        ", "+        setLeftExpression(node, left); // not to be confused with node.setLeftExpression(...)", "+        node.setRightExpression(right);", "+        return setType(node, result);", "+      }", "+      catch (UnsupportedConversionException e) {", "+        throw new ExecutionError(\"shift.expression.type\", node);", "+      }", "-  }"]}], "num": 22357}
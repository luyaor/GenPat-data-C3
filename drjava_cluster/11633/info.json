{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6defe5f834fa65d58824df4dedada4f7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7f3b35c6169d10e35362c9b48c715f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "a2b28a9213fa3cc634db7fda88e14ebb0a103974", "commitAfterChange": "56df485f00337d373f1f0b94fc58f7c7b8b714d4", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public boolean isOnMatch()", "signatureAfterChange": "     public boolean isOnMatch()", "diff": ["-   */", "-  public boolean isOnMatch() {", "-    String findWord = this._findWord;", "-    int len, off;", "-    len = findWord.length();", "-    if(!_searchBackwards) {", "-      off = _current.getOffset() - len;", "-    } else {", "-      off = _current.getOffset();", "-    if(off < 0){", "-      return false;", "-    } else if (off + len > _doc.getLength()){", "-      return false;", "-    try {", "-      String matchSpace = _doc.getText(off, len);", "-      if (!_matchCase){", "-        matchSpace = matchSpace.toLowerCase();", "-        findWord = findWord.toLowerCase();", "-      }", "-      return matchSpace.equals(findWord);", "-    }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "-  }", "+    */", "+    public boolean isOnMatch() {", "+        return _state.isOnMatch();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a0a87e703a19ed07fdaa7b576633e94", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public boolean isOnMatch()", "signatureAfterChange": "   public boolean isOnMatch()", "diff": ["-     */", "-    public boolean isOnMatch() { return _state.isOnMatch(); }", "+   */", "+  public boolean isOnMatch() {", "+    String findWord = _findWord;", "+    int len, off;", "+    if(_current == null) return false;", "+    ", "+    len = findWord.length();", "+    if (!_searchBackwards) off = _current.getOffset() - len;", "+    else off = _current.getOffset();", "+    if (off < 0) return false;", "+    if (off + len > _doc.getLength()) return false;", "+    try {", "+      String matchSpace = _doc.getText(off, len);", "+      if (!_matchCase) {", "+        matchSpace = matchSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+      return matchSpace.equals(findWord);", "+    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+  }"]}], "num": 11633}
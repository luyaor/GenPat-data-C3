{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a292283872578a20ed2889fcb2276ea", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "805db41819ba20e5bcf66afd22b8b8b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ConsVisitor.java", "commitBeforeChange": "1902ca9428bb3bc3eae3550e478cc24cc107999e", "commitAfterChange": "c171c7d908dc3eacd710969c309add95e9a47bb0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public static <T> ConsVisitor<T, ConsList<? extends T>> append(final ConsList<? extends T> rest)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public static <T> ConsVisitor<T, ConsList<? extends T>> append(final ConsList<? extends T> rest)", "diff": ["+  @SuppressWarnings(\"unchecked\")", "-    return new ConsVisitor<T, ConsList<? extends T>>() {", "-      public ConsList<? extends T> forEmpty(ConsList.Empty<? extends T> list) { return rest; }", "-      public ConsList<? extends T> forNonempty(ConsList.Nonempty<? extends T> list) {", "-        return ConsList.cons(list.first(), list.rest().apply(this));", "-      }", "-    };", "+    return new Append<T>(rest);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d20ec09c20c0a8016feee1943ff58ac1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ConsVisitor.java", "commitBeforeChange": "1902ca9428bb3bc3eae3550e478cc24cc107999e", "commitAfterChange": "c171c7d908dc3eacd710969c309add95e9a47bb0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public static <S, T> ConsVisitor<S, ConsList<? extends T>> map(final Lambda<? super S, ? extends T> lambda)", "signatureAfterChange": "   public static <S, T> ConsVisitor<S, ConsList<? extends T>> map(Lambda<? super S, ? extends T> lambda)", "diff": ["-  public static <S, T> ConsVisitor<S, ConsList<? extends T>> map(final Lambda<? super S, ? extends T> lambda) {", "-    return new ConsVisitor<S, ConsList<? extends T>>() {", "-      public ConsList<? extends T> forEmpty(ConsList.Empty<? extends S> list) { return ConsList.empty(); }", "-      public ConsList<? extends T> forNonempty(ConsList.Nonempty<? extends S> list) {", "-        return ConsList.cons(lambda.value(list.first()), list.rest().apply(this));", "-      }", "-    };", "+  public static <S, T> ConsVisitor<S, ConsList<? extends T>> map(Lambda<? super S, ? extends T> lambda) {", "+    return new Map<S, T>(lambda);", "+  }"]}], "num": 25065}
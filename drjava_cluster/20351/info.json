{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22b80c9b289d334237394f25bfb4e433", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efed503ec82cd8011eb57489a730921b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "50aa6e462db77a5c84e3b736f0fbab7cb8bb7a04", "commitAfterChange": "43dfe8b76407d911d1a4571f2cb218dc228de337", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "    public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass, final File buildDir, final File projectFile, final File[] projectFiles)", "signatureAfterChange": "    public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass, final File buildDir, final File projectFile, final File[] projectFiles)", "diff": ["-  public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass, final File buildDir, final File projectFile, final File[] projectFiles) { ", "+  public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass, final File buildDir, final File projectFile, final File[] projectFiles) {", "-      ", "+", "+", "+      HashSet<String> _projFilePaths = new HashSet<String>();", "+      {", "+        try {", "+          for(File file : projectFiles) {", "+            _projFilePaths.add(file.getCanonicalPath());", "+          }", "+        }", "+        catch(IOException e) {}", "+      }", "+", "-        ", "+", "+          return _projFilePaths.contains(path);", "-        ", "+        /*", "-        return false;", "+        return false;*/", "+", "-      ", "-      private void cleanHelper(File f){", "+", "+        private void cleanHelper(File f){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd64b4092ef2eb80d182aaa244660a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "7ea53a2dfdcfb14d60683d433ef09ceeb7c764d3", "commitAfterChange": "e656613109a12add4ad6c51f7040ce36731c0f8b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "signatureAfterChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "diff": ["+    ArrayList<File> excludedFiles = new ArrayList<File>();", "-    String[] exts = getCompilableExtensions();", "+    ", "-      if (endsWithExt(f, exts)) filesToCompile.add(f);", "+      if (endsWithExt(f, EXTENSIONS)) filesToCompile.add(f);", "+      else excludedFiles.add(f);", "-    _rawCompile(getSourceRootSet(), filesToCompile.toArray(new File[0]));", "+    _rawCompile(getSourceRootSet(), filesToCompile.toArray(new File[0]), excludedFiles.toArray(new File[0]));"]}], "num": 20351}
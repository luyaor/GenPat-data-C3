{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "360f90e5a5c85e3a738e5e8bfba919fa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02492a9fe2f0383e4dca66e9b5d8974d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public void testSimpleAssignBoxAddExp()", "signatureAfterChange": "   public void testSimpleAssignBoxAddExp() throws ExceptionReturnedException", "diff": ["-  public void testSimpleAssignBoxAddExp() {", "-    Node exp = _parseCode(\"X = new Integer(1) + new Integer(3);\").get(0);", "+  public void testSimpleAssignBoxAddExp() throws ExceptionReturnedException {", "+    String text = \"X = new Integer(1) + new Integer(3);\";", "+    String leftExpected = \"(koala.dynamicjava.tree.QualifiedName: X)\";", "+    String rightExpected = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: java.lang.Integer) [(koala.dynamicjava.tree.CastExpression: (koala.dynamicjava.tree.AddExpression: (koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)])) (koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 3 3 int)]))) (koala.dynamicjava.tree.IntType: int))])\";", "+    _checkBinaryExpression(text, leftExpected, rightExpected);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3613c4be374e91a75085b6c6fb6168d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public void testLessThanEqual()", "signatureAfterChange": "   public void testLessThanEqual() throws ExceptionReturnedException", "diff": ["-  public void testLessThanEqual() {", "-    Node exp = _parseCode(\"new Integer(12) <= new Integer(32);\").get(0);", "+  public void testLessThanEqual() throws ExceptionReturnedException {", "+    String text = \"new Integer(12) <= new Integer(32);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 12 12 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 32 32 int)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+  }", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");"]}], "num": 20208}
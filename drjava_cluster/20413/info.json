{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27c0f76d30fc4726319f672610a12553", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a735746d86cd99d4e9fd8804a6bf1dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": "             public void test_isAssignableFrom()", "signatureAfterChange": "        public void test_isAssignableFrom()", "diff": ["-    ", "-                                 _btc._package, ", "+                                 _btc._package,", "+                                 null, // enclosingClassName for top level traversal", "-                                 new LinkedList<String>(), ", "-                                 new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>(), ", "-                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+                                 new HashSet<String>(), ", "+                                 new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>(),", "+                                 new LinkedList<Command>());", "-      ", "-      //System.setProperty(\"java.specification.version\", \"1.4\");", "-      LanguageLevelConverter.OPT = new Options(JavaVersion.JAVA_1_4, EmptyIterable.<File>make());", "-      assertFalse(\"Should not be assignable.\", _btc._isAssignableFrom(symbolTable.get(\"java.lang.Double\"), SymbolData.INT_TYPE));", "-      assertFalse(\"Should not be assignable.\", _btc._isAssignableFrom(SymbolData.DOUBLE_TYPE, symbolTable.get(\"java.lang.Short\")));", "-      assertFalse(\"Should not be assignable.\", _btc._isAssignableFrom(symbolTable.get(\"java.lang.Double\"), symbolTable.get(\"java.lang.Character\")));", "+      LanguageLevelConverter.OPT = new Options(JavaVersion.JAVA_5, EmptyIterable.<File>make());", "+      assertFalse(\"Should not be assignable.\", ", "+                  _btc._isAssignableFrom(symbolTable.get(\"java.lang.Double\"), SymbolData.INT_TYPE));", "+      assertFalse(\"Should not be assignable.\", ", "+                  _btc._isAssignableFrom(symbolTable.get(\"java.lang.Double\"), symbolTable.get(\"java.lang.Character\")));", "-      assertTrue(\"Should be assignable.\", _btc._isAssignableFrom(symbolTable.get(\"java.lang.Integer\"), symbolTable.get(\"java.lang.Integer\")));", "-      assertFalse(\"Should not be assignable.\", _btc._isAssignableFrom(symbolTable.get(\"java.lang.Integer\"), symbolTable.get(\"java.lang.Character\")));", "-      assertFalse(\"Should not be assignable.\", _btc._isAssignableFrom(SymbolData.INT_TYPE, symbolTable.get(\"java.lang.Character\")));", "-      assertFalse(\"Should not be assignable.\", _btc._isAssignableFrom(symbolTable.get(\"java.lang.Object\"), SymbolData.INT_TYPE));", "-      assertTrue(\"Should be able to assign an array to Object\", _btc._isAssignableFrom(symbolTable.get(\"java.lang.Object\"), intArray));", "+      assertTrue(\"Should be assignable.\", ", "+                  _btc._isAssignableFrom(SymbolData.DOUBLE_TYPE, symbolTable.get(\"java.lang.Short\")));", "+      assertTrue(\"Should be assignable.\", ", "+                 _btc._isAssignableFrom(symbolTable.get(\"java.lang.Integer\"), symbolTable.get(\"java.lang.Integer\")));", "+      assertFalse(\"Should not be assignable.\", ", "+                  _btc._isAssignableFrom(symbolTable.get(\"java.lang.Integer\"), symbolTable.get(\"java.lang.Character\")));", "+      assertTrue(\"Should not assignable.\", ", "+                  _btc._isAssignableFrom(SymbolData.INT_TYPE, symbolTable.get(\"java.lang.Character\")));", "+      assertTrue(\"Should be assignable.\", ", "+                  _btc._isAssignableFrom(symbolTable.get(\"java.lang.Object\"), SymbolData.INT_TYPE));", "+      assertTrue(\"Should be able to assign an array to Object\", ", "+                 _btc._isAssignableFrom(symbolTable.get(\"java.lang.Object\"), intArray));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50dedce7ba2be07980a26a87092733e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "          public void testForThrowStatement()", "signatureAfterChange": "          public void testForThrowStatement()", "diff": ["+                                 null, // enclosingClassName for top level traversal", "-                                 new LinkedList<String>(), ", "-                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+                                 new HashSet<String>(), ", "+                                 new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>(),", "+                                 new LinkedList<Command>());", "-      llv.continuations = new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>();", "+      llv.continuations = new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>();", "-      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "-      llv._classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();", "+//      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "+      llv._classesInThisFile = new HashSet<String>();", "-      symbolTable.put(\"java.lang.RuntimeException\", re);", "+      assert symbolTable.containsKey(\"java.lang.RuntimeException\");", "+      assert symbolTable.contains(re);", "+      ", "+//      symbolTable.put(\"java.lang.RuntimeException\", re);"]}], "num": 20413}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37dfa515a4efc4e515aeef4013c0d0bd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c070869b6c63363bd6f48df7f11a2cd7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "signatureAfterChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "diff": ["-    _log.log(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +", "-             doc.getLength() + \", _isForward = \" + _isForward);", "+//    _log.log(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +", "+//             doc.getLength() + \", _isForward = \" + _isForward);", "-    _log.log(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "-             newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);", "+//    _log.log(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "+//             newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1c33144342c0a5b1b7fea399a04de54", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "commitAfterChange": "f998596e58db467638fd2c5025aacbfb31d4199f", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "signatureAfterChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "diff": ["-//    assert (_isForward && start + len == doc.getLength()) || (! _isForward && start == 0);", "+    assert (_isForward && start + len == doc.getLength()) || (! _isForward && start == 0);", "-//    System.err.println(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +", "-//                       doc.getLength() + \", _isForward = \" + _isForward);", "+    _log.log(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +", "+                       doc.getLength() + \", _isForward = \" + _isForward);", "-//      System.err.println(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "-//                     newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);", "+      _log.log(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "+                     newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);"]}], "num": 24496}
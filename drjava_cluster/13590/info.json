{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efff9a119461300a1e34e54ca1a8bc2b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52515e4b0b8a1d23ac6f18f39abbd0e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-      // handleCommandLineArgs will return true if the DrJava should be loaded", "+      // handleCommandLineArgs will return true if DrJava should be loaded", "-        // Check that compiler and debugger are available on classpath (including tools.jar location)", "-        boolean restart = !checkForCompilersAndDebugger(args);", "-        ", "-        restart |= getConfig().getSetting(MASTER_JVM_ARGS).length() > 0;", "+        boolean restart = getConfig().getSetting(MASTER_JVM_ARGS).length() > 0;", "-          // Determine classpath", "-          String pathSep = System.getProperty(\"path.separator\");", "-          // Include both the javac location stored in .drjava prefences and the path proposed by ToolsJarClassLoader ", "-          File toolsFromConfig = getConfig().getSetting(JAVAC_LOCATION);", "-          classPath += pathSep + ToolsJarClassLoader.getToolsJarClassPath(toolsFromConfig);", "-        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb58f71614c1a3435e01351779a3e9ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "576713321d388945af9795f8f5bacbafa14cd87f", "commitAfterChange": "b814c7e145dc4411f1437e59c56bc53ee860800f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "   static void checkForCompilersAndDebugger(String[] args)", "signatureAfterChange": "   static boolean checkForCompilersAndDebugger(String[] args)", "diff": ["-   */", "-  static void checkForCompilersAndDebugger(String[] args) {", "-    ", "-    boolean needCompiler = ! hasAvailableCompiler();", "-    boolean needDebugger = ! hasAvailableDebugger();", "-", "-    // Try to make sure both compiler and debugger are available", "-    if (needCompiler || needDebugger) promptForToolsJar(needCompiler, needDebugger);", "+    */", "+  static boolean checkForCompilersAndDebugger(String[] args) {", "+    if (canLoad(_thisLoader, TEST_COMPILER_CLASS) && canLoad(_thisLoader, TEST_DEBUGGER_CLASS)) {", "+      return true;", "+    }", "+    else {", "+      boolean haveCompiler = canLoad(_thisLoader, TEST_COMPILER_CLASS) || ", "+                             canLoad(_toolsLoader, TEST_COMPILER_CLASS);", "+      boolean haveDebugger = canLoad(_thisLoader, TEST_DEBUGGER_CLASS) || ", "+                             canLoad(_toolsLoader, TEST_DEBUGGER_CLASS);", "+      if (!haveCompiler || !haveDebugger) { promptForToolsJar(!haveCompiler, !haveDebugger); }", "+      return false;", "+    }"]}], "num": 13590}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58561734aa644e087887d19502704ae7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29ccfd1f88bb4876046c31b215ec77b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "90ef69282c46168e0825e1541e1aac142b594af9", "commitAfterChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public synchronized void testMultiThreadedSetCurrentThread()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testMultiThreadedSetCurrentThread()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    BreakpointTestListener debugListener = new BreakpointTestListener();", "-   ", "-    // Compile the class", "-    OpenDefinitionsDocument doc = doCompile(SUSPEND_CLASS, tempFile());", "-    _debugger.addListener(debugListener);", "-    // Start debugger", "-    synchronized(_notifierLock) {", "-      _debugger.startup();", "-      _waitForNotifies(1);", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertDebuggerStartedCount(1);", "-    debugListener.assertDebuggerShutdownCount(0);", "-    assertTrue(\"Debug Manager should be ready\", _debugger.isReady());", "+     BreakpointTestListener debugListener = new BreakpointTestListener();", "-    int index = SUSPEND_CLASS.indexOf(\"int a = 1;\");", "-    _debugger.toggleBreakpoint(doc,index,5);", "-    ", "-     // Run the main() method, hitting breakpoints", "-    synchronized(_notifierLock) {", "-      interpretIgnoreResult(\"java Suspender\");", "-      _waitForNotifies(3); // suspended, updated, breakpointReached", "-      _notifierLock.wait();", "-    }    ", "-    final DebugThreadData thread = new DebugThreadData(_debugger.getCurrentThread());", "-    synchronized(_notifierLock){", "-      _debugger.resume();", "-      /** _debugger.setCurrentThread(...); ", "-       * must be executed in another thread because otherwise the notifies", "-       * will be received before the _notifierLock is released", "-       */", "-      new Thread() {", "-        public void run(){", "-          doSetCurrentThread(thread);", "-        }", "-      }.start();", "-      _waitForNotifies(2);  // suspended, updated", "-      _notifierLock.wait();", "-    }", "-    // Ensure thread suspended", "-    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "-    ", "-      // Close doc and make sure breakpoints are removed", "-    _model.closeFile(doc);", "-    ", "-    // Shutdown the debugger", "-    if (printMessages) System.out.println(\"Shutting down...\");", "-    synchronized(_notifierLock) {", "-      _debugger.shutdown();", "-      _waitForNotifies(1);  // shutdown", "-      _notifierLock.wait();", "-    }", "-    ", "-    debugListener.assertDebuggerShutdownCount(1);  //fires", "-    if (printMessages) System.out.println(\"Shut down.\");", "-    _debugger.removeListener(debugListener);", "+     // Compile the class", "+     OpenDefinitionsDocument doc = doCompile(MONKEY_CLASS, tempFile());", "+     _debugger.addListener(debugListener);", "+     // Start debugger", "+     synchronized(_notifierLock) {", "+       _debugger.startup();", "+       _waitForNotifies(1);", "+       _notifierLock.wait();", "+     }", "+     debugListener.assertDebuggerStartedCount(1);", "+     debugListener.assertDebuggerShutdownCount(0);", "+     assertTrue(\"Debug Manager should be ready\", _debugger.isReady());", "+     ", "+     int index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I\\'m a thread! Yeah!\\\");\");", "+     _debugger.toggleBreakpoint(doc,index,11);", "+     index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"James likes bananas!\\\");\");", "+     _debugger.toggleBreakpoint(doc,index,17);", "+     ", "+      // Run the main() method, hitting breakpoints", "+     synchronized(_notifierLock) {", "+       interpretIgnoreResult(\"java Monkey\");", "+       _waitForNotifies(6); // suspended, updated, breakpointReached", "+       _notifierLock.wait();", "+     }    ", "+     DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "+     DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "+     synchronized(_notifierLock){", "+       _asynchDoSetCurrentThread(threadB);", "+       _waitForNotifies(2);  // updated, interpreterChanged", "+       _notifierLock.wait();", "+     }", "+     ", "+     DebugThreadData thread1 = new DebugThreadData(_debugger.getThreadAt(1));", "+     DebugThreadData thread2 = new DebugThreadData(_debugger.getCurrentThread());", "+     ", "+     /** make sure threads have switched places */", "+     assertTrue(thread1.getUniqueID() == threadA.getUniqueID());", "+     assertTrue(thread2.getUniqueID() == threadB.getUniqueID());", "+     ", "+       // Close doc and make sure breakpoints are removed", "+     _model.closeFile(doc);", "+     ", "+     // Shutdown the debugger", "+     if (printMessages) System.out.println(\"Shutting down...\");", "+     InterpretListener interpretListener = new InterpretListener();", "+     _model.addListener(interpretListener);", "+     synchronized(_notifierLock) {", "+       //_asynchResume();", "+       //_asynchResume();", "+       _debugger.shutdown();", "+       _waitForNotifies(2);  // shutdown, interactionEnded", "+       _notifierLock.wait();", "+     }", "+     ", "+     debugListener.assertDebuggerShutdownCount(1);  //fires", "+     if (printMessages) System.out.println(\"Shut down.\");", "+     _model.removeListener(interpretListener);", "+     _debugger.removeListener(debugListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "418e46e52d877fedb47c1187ff6ef624", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public synchronized void testMultiThreadedSetCurrentThread()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testMultiThreadedSetCurrentThread() throws Exception", "diff": ["-  public synchronized void testMultiThreadedSetCurrentThread()", "-    throws DebugException, BadLocationException, DocumentAdapterException,", "-    IOException, InterruptedException", "-  {", "+  public synchronized void testMultiThreadedSetCurrentThread() throws Exception {", "+    _debugger.addListener(debugListener);", "-     // Compile the class", "-     OpenDefinitionsDocument doc = doCompile(MONKEY_CLASS, tempFile());", "-     _debugger.addListener(debugListener);", "-     // Start debugger", "-     synchronized(_notifierLock) {", "-       _debugger.startup();", "-       _waitForNotifies(1);  // startup", "-       _notifierLock.wait();", "-     }", "-     ", "-     // Set two breakpoints", "-     int index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I\\'m a thread! Yeah!\\\");\");", "-     _debugger.toggleBreakpoint(doc,index,11);", "-     index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"James likes bananas!\\\");\");", "-     _debugger.toggleBreakpoint(doc,index,17);", "-     ", "-      // Run the main() method, hitting both breakpoints in different threads", "-     synchronized(_notifierLock) {", "-       interpretIgnoreResult(\"java Monkey\");", "-       _waitForNotifies(6); // (suspended, updated, breakpointReached) * 2", "-       _notifierLock.wait();", "-     }", "-     DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "-     DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "-     synchronized(_notifierLock) {", "-       _asyncDoSetCurrentThread(threadB);", "-       _waitForNotifies(2);  // updated, suspended", "-       _notifierLock.wait();", "-     }", "-     ", "-     DebugThreadData thread1 = new DebugThreadData(_debugger.getThreadAt(1));", "-     DebugThreadData thread2 = new DebugThreadData(_debugger.getCurrentThread());", "-     ", "-     // make sure threads have switched places", "-     assertTrue(thread1.getUniqueID() == threadA.getUniqueID());", "-     assertTrue(thread2.getUniqueID() == threadB.getUniqueID());", "-     ", "-       // Close doc and make sure breakpoints are removed", "-     _model.closeFile(doc);", "-     ", "-     // Shutdown the debugger", "-     if (printMessages) System.out.println(\"Shutting down...\");", "-     InterpretListener interpretListener = new InterpretListener() {", "-       public void interpreterChanged(boolean inProgress){", "-         // Don't notify: happens in the same thread", "-        interpreterChangedCount++;", "-       }", "-     };", "-     _model.addListener(interpretListener);", "-     synchronized(_notifierLock) {", "-       //_asyncResume();", "-       //_asyncResume();", "-       _debugger.shutdown();", "-       _waitForNotifies(2);  // shutdown, interactionEnded", "-       _notifierLock.wait();", "-     }", "-     interpretListener.assertInterpreterChangedCount(1);", "-     debugListener.assertDebuggerShutdownCount(1);  //fires", "-     if (printMessages) System.out.println(\"Shut down.\");", "-     _model.removeListener(interpretListener);", "-     _debugger.removeListener(debugListener);", "+    // Start up", "+    OpenDefinitionsDocument doc = _startupDebugger(\"Monkey.java\",", "+                                                   MONKEY_CLASS);", "+    ", "+    // Set two breakpoints", "+    int index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I\\'m a thread! Yeah!\\\");\");", "+    _debugger.toggleBreakpoint(doc,index,11);", "+    index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"James likes bananas!\\\");\");", "+    _debugger.toggleBreakpoint(doc,index,17);", "+    ", "+    // Run the main() method, hitting both breakpoints in different threads", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"java Monkey\");", "+      _waitForNotifies(6); // (suspended, updated, breakpointReached) * 2", "+      _notifierLock.wait();", "+    }", "+    DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "+    DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "+    synchronized(_notifierLock) {", "+      _asyncDoSetCurrentThread(threadB);", "+      _waitForNotifies(2);  // updated, suspended", "+      _notifierLock.wait();", "+    }", "+    ", "+    DebugThreadData thread1 = new DebugThreadData(_debugger.getThreadAt(1));", "+    DebugThreadData thread2 = new DebugThreadData(_debugger.getCurrentThread());", "+    ", "+    // make sure threads have switched places", "+    assertTrue(thread1.getUniqueID() == threadA.getUniqueID());", "+    assertTrue(thread2.getUniqueID() == threadB.getUniqueID());", "+    ", "+    // Shut down", "+    _shutdownAndWaitForInteractionEnded();", "+    _debugger.removeListener(debugListener);"]}], "num": 28963}
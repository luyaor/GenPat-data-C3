{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eef06519038ee277ad7be93583decf71", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6537946ff66187cb00f6873f53a146c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassChecker.java", "commitBeforeChange": "dc96b8e17de1b9fbcfb0683311d7e482b6fcfcf3", "commitAfterChange": "270c6e5f741c371e9536c93af7f5525dbf67eeee", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "       private void initializeNestedClassSignatures(Iterable<? extends Node> members, TypeContext sigContext)", "signatureAfterChange": "       private void initializeNestedClassSignatures(Iterable<? extends Node> members, TypeContext sigContext)", "diff": ["-    TypeContext bodyContext = new ClassContext(sigContext, _c); ", "+    TypeContext bodyContext = new ClassContext(sigContext, _c);", "+    ExecutionError error = null;", "-      if (member instanceof TypeDeclaration) {", "-        ClassChecker nestedChecker = new ClassChecker(getDJClass(member), _loader, bodyContext, _opt);", "-        nestedChecker.initializeClassSignatures((TypeDeclaration) member);", "+      try {", "+        if (member instanceof TypeDeclaration) {", "+          ClassChecker nestedChecker = new ClassChecker(getDJClass(member), _loader, bodyContext, _opt);", "+          nestedChecker.initializeClassSignatures((TypeDeclaration) member);", "+        }", "+      }", "+      catch (ExecutionError e) {", "+        if (error == null) { error = e; }", "+    if (error != null) { throw error; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1d096ea10de9d62bc016951a7e49900", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "dc96b8e17de1b9fbcfb0683311d7e482b6fcfcf3", "commitAfterChange": "270c6e5f741c371e9536c93af7f5525dbf67eeee", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private TypeContext checkList(Iterable<? extends Node> l)", "signatureAfterChange": "      public TypeContext checkList(Iterable<? extends Node> l)", "diff": ["-  ", "-  private TypeContext checkList(Iterable<? extends Node> l) {", "+  public TypeContext checkList(Iterable<? extends Node> l) {", "+    ExecutionError error = null;", "-    for (Node n : l) { c = n.acceptVisitor(new StatementChecker(c, opt)); }", "+    for (Node n : l) {", "+      try { c = n.acceptVisitor(new StatementChecker(c, opt)); }", "+      catch (ExecutionError e) {", "+        if (hasErrorContext(n)) { c = getErrorContext(n); }", "+        if (error == null) { error = e; }", "+      }", "+    }", "+    if (error != null) { throw error; }"]}], "num": 17216}
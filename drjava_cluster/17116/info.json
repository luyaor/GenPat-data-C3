{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "070b2262d5054bec5183081bae39bc83", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5491f70a26f51e586bf4ce813a3b8269", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 240, "signatureBeforeChange": "   public static <T1, T2, T3>      Predicate3<T1, T2, T3> and3(final Iterable<? extends Predicate3<? super T1, ? super T2,                                                                     ? super T3>> preds)", "signatureAfterChange": "   public static <T1, T2, T3>      Predicate3<T1, T2, T3> and3(Iterable<? extends Predicate3<? super T1, ? super T2, ? super T3>> preds)", "diff": ["-  /** @return  The conjunction ({@code &&}) of the given predicates */", "-  public static <T1, T2, T3> ", "-    Predicate3<T1, T2, T3> and3(final Iterable<? extends Predicate3<? super T1, ? super T2, ", "-                                                                   ? super T3>> preds) {", "-    return new Predicate3<T1, T2, T3>() {", "-      public Boolean value(T1 arg1, T2 arg2, T3 arg3) {", "-        for (Predicate3<? super T1, ? super T2, ? super T3> p : preds) { ", "-          if (!p.value(arg1, arg2, arg3)) { return false; }", "-        }", "-        return true;", "-      }", "-    };", "-  }", "+   */", "+    Predicate3<T1, T2, T3> and3(Iterable<? extends Predicate3<? super T1, ? super T2, ? super T3>> preds) {", "+    return new AndPredicate3<T1, T2, T3>(preds);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c423908eace1f08c5c66be9e2bf1b08a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 245, "signatureBeforeChange": "   public static <T1, T2, T3, T4>      Predicate4<T1, T2, T3, T4> and4(final Iterable<? extends Predicate4<? super T1, ? super T2,                                                                          ? super T3, ? super T4>> preds)", "signatureAfterChange": "   public static <T1, T2, T3, T4> Predicate4<T1, T2, T3, T4>      and4(Iterable<? extends Predicate4<? super T1, ? super T2, ? super T3, ? super T4>> preds)", "diff": ["-  /** @return  The conjunction ({@code &&}) of the given predicates */", "-  public static <T1, T2, T3, T4> ", "-    Predicate4<T1, T2, T3, T4> and4(final Iterable<? extends Predicate4<? super T1, ? super T2, ", "-                                                                        ? super T3, ? super T4>> preds) {", "-    return new Predicate4<T1, T2, T3, T4>() {", "-      public Boolean value(T1 arg1, T2 arg2, T3 arg3, T4 arg4) {", "-        for (Predicate4<? super T1, ? super T2, ? super T3, ? super T4> p : preds) { ", "-          if (!p.value(arg1, arg2, arg3, arg4)) { return false; }", "-        }", "-        return true;", "-      }", "-    };", "-  }", "+   */", "+    and4(Iterable<? extends Predicate4<? super T1, ? super T2, ? super T3, ? super T4>> preds) {", "+    return new AndPredicate4<T1, T2, T3, T4>(preds);", "+  }"]}], "num": 17116}
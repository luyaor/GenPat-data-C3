{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8a990b09a4b4893d634aa436eb11d67", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2839d6b20ef565d2564a59a488c5ec25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "          public void xtest_NotAllowed()", "signatureAfterChange": "          public void xtest_NotAllowed()", "diff": ["-      SourceInfo noInfo = JExprParser.NO_SOURCE_INFO;", "-      Word w = new Word(JExprParser.NO_SOURCE_INFO, \"word\");", "+      SourceInfo noInfo = SourceInfo.NO_INFO;", "+      Word w = new Word(SourceInfo.NO_INFO, \"word\");", "-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      UnbracedBody emptyUnbracedBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      ClassOrInterfaceType superClass = new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]);", "+      BracedBody emptyBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "+      UnbracedBody emptyUnbracedBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "+      ClassOrInterfaceType superClass = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]);", "-      SwitchCase defaultSc = new DefaultCase(JExprParser.NO_SOURCE_INFO, emptyUnbracedBody);", "-      SwitchStatement ssBadDefault = new SwitchStatement(noInfo, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), new SwitchCase[]{defaultSc, defaultSc});", "+      SwitchCase defaultSc = new DefaultCase(SourceInfo.NO_INFO, emptyUnbracedBody);", "+      SwitchStatement ssBadDefault = new SwitchStatement(noInfo, new IntegerLiteral(SourceInfo.NO_INFO, 5), new SwitchCase[]{defaultSc, defaultSc});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28d2de97caa83017fbd21fe40666241f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "          public void testGetQualifiedSymbolData()", "signatureAfterChange": "          public void testGetQualifiedSymbolData()", "diff": ["-                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false, true));", "+                   _llv._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false, true));", "-      SymbolData sd2 = _llv._getQualifiedSymbolData(\"java.lang.Integer\", JExprParser.NO_SOURCE_INFO, true, true, true);", "+      SymbolData sd2 = _llv._getQualifiedSymbolData(\"java.lang.Integer\", SourceInfo.NO_INFO, true, true, true);", "-      SymbolData sd3 = _llv._getQualifiedSymbolData(\"Wow\", JExprParser.NO_SOURCE_INFO, true, true, true);", "+      SymbolData sd3 = _llv._getQualifiedSymbolData(\"Wow\", SourceInfo.NO_INFO, true, true, true);", "-//                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, false, false, true));", "+//                   _llv._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, false, false, true));", "-                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false,  true));", "+                   _llv._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false,  true));", "-                   _llv._getQualifiedSymbolData(\"java.lang.String\", JExprParser.NO_SOURCE_INFO, true, false, true));", "+                   _llv._getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NO_INFO, true, false, true));", "-                                                   JExprParser.NO_SOURCE_INFO, true, false, true));", "+                                                   SourceInfo.NO_INFO, true, false, true));", "-                                                 JExprParser.NO_SOURCE_INFO, false, false, false));", "+                                                 SourceInfo.NO_INFO, false, false, false));", "-                 _llv._getQualifiedSymbolData(\"notRightPackage\", JExprParser.NO_SOURCE_INFO, false, false, false));", "+                 _llv._getQualifiedSymbolData(\"notRightPackage\", SourceInfo.NO_INFO, false, false, false));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dcfc256cf566d3f53123bb8b2fd42ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TryCatchBodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "          public void testForBracedBody()", "signatureAfterChange": "          public void testForBracedBody()", "diff": ["-      BracedBody bb = new BracedBody(JExprParser.NO_SOURCE_INFO, ", "+      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, ", "-        new ThrowStatement(JExprParser.NO_SOURCE_INFO, ", "-                           new SimpleNamedClassInstantiation(JExprParser.NO_SOURCE_INFO, ", "-                                         new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, ", "+        new ThrowStatement(SourceInfo.NO_INFO, ", "+                           new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "+                                         new ClassOrInterfaceType(SourceInfo.NO_INFO, ", "-                                                             new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[] {new StringLiteral(JExprParser.NO_SOURCE_INFO, \"arg\")})))});", "+                                                             new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new StringLiteral(SourceInfo.NO_INFO, \"arg\")})))});", "-      SymbolData e = llv.getSymbolData(\"java.util.prefs.BackingStoreException\", JExprParser.NO_SOURCE_INFO, true);", "+      SymbolData e = llv.getSymbolData(\"java.util.prefs.BackingStoreException\", SourceInfo.NO_INFO, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ec85ae2f03086a9ba39b3fd7498ae6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "          public void testForNumericAssignmentExpression()", "signatureAfterChange": "          public void testForNumericAssignmentExpression()", "diff": ["-      ComplexNameReference nf = new ComplexNameReference(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"Ned\")), new Word(JExprParser.NO_SOURCE_INFO, \"Flanders\"));", "-      NumericAssignmentExpression na = new MinusAssignmentExpression(JExprParser.NO_SOURCE_INFO, nf, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "+      ComplexNameReference nf = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Ned\")), new Word(SourceInfo.NO_INFO, \"Flanders\"));", "+      NumericAssignmentExpression na = new MinusAssignmentExpression(SourceInfo.NO_INFO, nf, new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      NumericAssignmentExpression na2 = new ModAssignmentExpression(JExprParser.NO_SOURCE_INFO, nf, nf);", "+      NumericAssignmentExpression na2 = new ModAssignmentExpression(SourceInfo.NO_INFO, nf, nf);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9139d779d4d280e43b3276c0fc96b220", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "          public void testGetFieldOrVariable()", "signatureAfterChange": "          public void testGetFieldOrVariable()", "diff": ["-      VariableData vd3 = new VariableData(\"variable1\", new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[0]), _sd3, true, _sd3);", "+      VariableData vd3 = new VariableData(\"variable1\", new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[0]), _sd3, true, _sd3);", "-      assertEquals(\"Should find field0\", vd0, _btc.getFieldOrVariable(\"field0\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should find field1\", vd1, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should find field2\", vd2, _btc.getFieldOrVariable(\"field2\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should not find field7\", null, _btc.getFieldOrVariable(\"field7\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should find variable1\", vd3, _btc.getFieldOrVariable(\"variable1\", md, _sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should find field0\", vd0, _btc.getFieldOrVariable(\"field0\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find field1\", vd1, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find field2\", vd2, _btc.getFieldOrVariable(\"field2\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should not find field7\", null, _btc.getFieldOrVariable(\"field7\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find variable1\", vd3, _btc.getFieldOrVariable(\"variable1\", md, _sd3, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should not find field1\", null, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO), new LinkedList<VariableData>()));", "+      assertEquals(\"Should not find field1\", null, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO), new LinkedList<VariableData>()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9952d43689d1d11e3295fbe915bc4561", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyIntermediateVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "           public void testForVariableDeclarationDoFirst()", "signatureAfterChange": "           public void testForVariableDeclarationDoFirst()", "diff": ["-      VariableDeclaration vdecl = new VariableDeclaration(JExprParser.NO_SOURCE_INFO,", "+      VariableDeclaration vdecl = new VariableDeclaration(SourceInfo.NO_INFO,", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                               new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                               new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                               new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"boolean\"), ", "-                               new Word (JExprParser.NO_SOURCE_INFO, \"field2\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                               new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                               new Word (SourceInfo.NO_INFO, \"field1\")),", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                               new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "+                               new Word (SourceInfo.NO_INFO, \"field2\"))});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dabcb503e5e1b97011e14ae7846cd0b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "     public void testRandomExpressions()", "signatureAfterChange": "     public void testRandomExpressions()", "diff": ["-      PositiveExpression pe = new PositiveExpression(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      PositiveExpression pe2 = new PositiveExpression(JExprParser.NO_SOURCE_INFO, pe);", "-      NegativeExpression pe3 = new NegativeExpression(JExprParser.NO_SOURCE_INFO, pe2);", "-      PositiveExpression pe4 = new PositiveExpression(JExprParser.NO_SOURCE_INFO, pe3);", "-      PositiveExpression pe5 = new PositiveExpression(JExprParser.NO_SOURCE_INFO, pe4);", "-      NegativeExpression pe6 = new NegativeExpression(JExprParser.NO_SOURCE_INFO, pe5);", "+      PositiveExpression pe = new PositiveExpression(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      PositiveExpression pe2 = new PositiveExpression(SourceInfo.NO_INFO, pe);", "+      NegativeExpression pe3 = new NegativeExpression(SourceInfo.NO_INFO, pe2);", "+      PositiveExpression pe4 = new PositiveExpression(SourceInfo.NO_INFO, pe3);", "+      PositiveExpression pe5 = new PositiveExpression(SourceInfo.NO_INFO, pe4);", "+      NegativeExpression pe6 = new NegativeExpression(SourceInfo.NO_INFO, pe5);"]}], "num": 6957}
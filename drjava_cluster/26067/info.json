{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62ca0e4ee31c620b1c949f70ccc62be5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a2edf5e3667ab7002449bbec96978f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "2fc4395eb72dbc8caeb586fbd5d1fef990083e71", "commitAfterChange": "a2262b2230c42b5cda2b42cb16829b87b361f597", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["-          } else { // Pass an array with all the remaining arguments", "-            assert(typs[typs.length-1].isArray());", "-            Class componentType = typs[typs.length-1].getComponentType();", "-            Object argArray = Array.newInstance(componentType,new int[]{(larg.size()-typs.length+1)});", "-            for(int j = 0; j < larg.size()-typs.length+1; j++){", "-              Object p  = it.next().acceptVisitor(this);", "-              Array.set(argArray, j, performCast(componentType, p));", "-            }", "-            args[typs.length-1] = argArray;", "+          } else { // Pass an array with all the remaining arguments of 'it'", "+            args[typs.length-1] = buildArrayOfRemainingArgs(typs, larg.size(), it );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "628dc487d3db7b0fe86c8d23782eccfc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "01976b859dcbb21fcccdad846dcb4a0675ac7cca", "commitAfterChange": "2fc4395eb72dbc8caeb586fbd5d1fef990083e71", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["-        args = new Object[larg.size()];", "+        args = new Object[typs.length];", "-        while (it.hasNext()) {", "+        while (i < typs.length-1) {", "+        if(typs.length > 0){", "+          if(!m.isVarArgs()){", "+            Object p  = it.next().acceptVisitor(this);", "+            args[i] = performCast(typs[i], p);", "+            i++;", "+          } else { // Pass an array with all the remaining arguments", "+            assert(typs[typs.length-1].isArray());", "+            Class componentType = typs[typs.length-1].getComponentType();", "+            Object argArray = Array.newInstance(componentType,new int[]{(larg.size()-typs.length+1)});", "+            for(int j = 0; j < larg.size()-typs.length+1; j++){", "+              Object p  = it.next().acceptVisitor(this);", "+              Array.set(argArray, j, performCast(componentType, p));", "+            }", "+            args[typs.length-1] = argArray;", "+          }", "+        }"]}], "num": 26067}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5887310a8c0e373112717cc50b35fab4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "846ab97e144a3e7790e3d1b7730d58f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testDebugSourcepath()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testDebugSourcepath()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-    DebugTestListener debugListener = new DebugTestListener() {", "-      public void breakpointSet(Breakpoint bp) {", "-        breakpointSetCount++;", "-      }", "-      public void breakpointReached(Breakpoint bp) {", "-        synchronized(_notifierLock) {", "-          breakpointReachedCount++;", "-          if (printEvents) System.out.println(\"breakpointReached \" + breakpointReachedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void breakpointRemoved(Breakpoint bp) {", "-        //synchronized(_notifierLock) {", "-        breakpointRemovedCount++;", "-        if (printEvents) System.out.println(\"breakpointRemoved \" + breakpointRemovedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void stepRequested() {", "-        //synchronized(_notifierLock) {", "-          stepRequestedCount++;", "-          if (printEvents) System.out.println(\"stepRequested \" + stepRequestedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadSuspended() {", "-        synchronized(_notifierLock) {", "-          currThreadSuspendedCount++;", "-          if (printEvents) System.out.println(\"threadSuspended \" + currThreadSuspendedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void currThreadResumed() {", "-        //synchronized(_notifierLock) {", "-        currThreadResumedCount++;", "-        if (printEvents) System.out.println(\"threadResumed \" + currThreadResumedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadDied() {", "-        synchronized(_notifierLock) {", "-          currThreadDiedCount++;", "-          if (printEvents) System.out.println(\"threadDied \" + currThreadDiedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber){", "-        synchronized(_notifierLock) {", "-          threadLocationUpdatedCount++;", "-          if (printEvents) System.out.println(\"threadUpdated \" + threadLocationUpdatedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerShutdown() {", "-        synchronized(_notifierLock) {", "-          debuggerShutdownCount++;", "-          if (printEvents) System.out.println(\"debuggerShutdown \" + debuggerShutdownCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerStarted() {", "-        synchronized(_notifierLock) {", "-          debuggerStartedCount++;", "-          if (printEvents) System.out.println(\"debuggerStarted \" + debuggerStartedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-    };", "+    StepTestListener debugListener = new StepTestListener();", "-      _startup();  //_debugManager.startup();", "+      _debugManager.startup();", "-    // Source is highlighted because doc is on breakpoint object", "+    // Source is highlighted because document is stored in breakpoint", "-    // Source is highlighted because file is on sourcepath", "+    // Source is highlighted because file is now on sourcepath"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "966e76b91fd48fd24f51689fd0852d36", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public synchronized void testBreakpoints()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testBreakpoints()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["+   */", "+  public synchronized void testBreakpoints() ", "+    throws DebugException, BadLocationException, IOException, InterruptedException", "+  {", "+    if (printMessages) System.out.println(\"----testBreakpoints----\");", "+    BreakpointTestListener debugListener = new BreakpointTestListener();", "+    ", "+    // Compile the class", "+    OpenDefinitionsDocument doc = _doCompile(DEBUG_CLASS, tempFile());", "+    _debugManager.addListener(debugListener);", "+    // Start debugger and add breakpoint (before class is loaded)", "+    synchronized(_notifierLock) {", "+      _debugManager.startup();", "+      _waitForNotifies(1);", "+      _notifierLock.wait();", "+    }", "+   ", "+    _debugManager.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"bar();\"),4);", "+    debugListener.assertBreakpointSetCount(1);", "+    ", "+    // Run the foo() method, hitting breakpoint", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"new DrJavaDebugClass().foo()\");", "+      _waitForNotifies(3);  // suspended, updated, breakpointReached", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+      ", "+    // Ensure breakpoint is hit", "+    debugListener.assertBreakpointReachedCount(1);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(1);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(1);  //fires", "+    debugListener.assertCurrThreadResumedCount(0);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertInteractionsContains(\"Foo Line 1\");", "+    assertInteractionsDoesNotContain(\"Bar Line 1\");", "+    ", "+    if (printMessages) System.out.println(\"adding another breakpoint\");", "+    ", "+    // Set another breakpoint (after is class loaded)", "+    _debugManager.toggleBreakpoint(doc,", "+       DEBUG_CLASS.indexOf(\"System.out.println(\\\"Bar Line 2\\\")\"), 9);", "+    debugListener.assertBreakpointSetCount(2);", "+    ", "+    ", "+    // Resume until next breakpoint", "+    synchronized(_notifierLock) {", "+      if (printMessages) System.out.println(\"resuming\");", "+      _debugManager.resume();", "+      _waitForNotifies(3);  // suspended, updated, breakpointReached", "+      _notifierLock.wait();", "+    }", "+    if (printMessages) System.out.println(\"----After one resume:\\n\" + getInteractionsText());", "+    debugListener.assertCurrThreadResumedCount(1);  //fires (no waiting)", "+    debugListener.assertBreakpointReachedCount(2);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(2);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertInteractionsContains(\"Bar Line 1\");", "+    assertInteractionsDoesNotContain(\"Bar Line 2\");", "+    ", "+    // Resume until finished", "+    synchronized(_notifierLock) {", "+      _debugManager.resume();", "+      _waitForNotifies(1);  // threadDied", "+      _notifierLock.wait();", "+    }", "+    if (printMessages) System.out.println(\"----After second resume:\\n\" + getInteractionsText());", "+    debugListener.assertCurrThreadResumedCount(2);  //fires (no waiting)", "+    debugListener.assertCurrThreadDiedCount(1);  //fires", "+    debugListener.assertBreakpointReachedCount(2);", "+    debugListener.assertThreadLocationUpdatedCount(2);", "+    debugListener.assertCurrThreadSuspendedCount(2);", "+    assertInteractionsContains(\"Foo Line 3\");", "+    ", "+    // Close doc and make sure breakpoints are removed", "+    _model.closeFile(doc);", "+    debugListener.assertBreakpointRemovedCount(2);  //fires twice (no waiting)", "+      ", "+    // Remove listener at end", "+    if (printMessages) System.out.println(\"Shutting down...\");", "+    synchronized(_notifierLock) {", "+      _debugManager.shutdown();", "+      _waitForNotifies(1);  // shutdown", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerShutdownCount(1);  //fires", "+    if (printMessages) System.out.println(\"Shut down.\");", "+    _debugManager.removeListener(debugListener);", "+  }", "-  public synchronized void testBreakpoints() ", "-    if (printMessages) System.out.println(\"----testBreakpoints----\");", "-    DebugTestListener debugListener = new DebugTestListener() {", "-      public void breakpointSet(Breakpoint bp) {", "-        breakpointSetCount++;", "-      }", "-      public void breakpointReached(Breakpoint bp) {", "-        synchronized(_notifierLock) {", "-          breakpointReachedCount++;", "-          if (printEvents) System.out.println(\"breakpointReached \" + breakpointReachedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void breakpointRemoved(Breakpoint bp) {", "-        //synchronized(_notifierLock) {", "-          breakpointRemovedCount++;", "-          if (printEvents) System.out.println(\"breakpointRemoved \" + breakpointRemovedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadSuspended() {", "-        synchronized(_notifierLock) {", "-          currThreadSuspendedCount++;", "-          if (printEvents) System.out.println(\"threadSuspended \" + currThreadSuspendedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void currThreadResumed() {", "-        //synchronized(_notifierLock) {", "-          currThreadResumedCount++;", "-          if (printEvents) System.out.println(\"threadResumed \" + currThreadResumedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadDied() {", "-        synchronized(_notifierLock) {", "-          currThreadDiedCount++;", "-          if (printEvents) System.out.println(\"threadDied \" + currThreadDiedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber){", "-        synchronized(_notifierLock) {", "-          threadLocationUpdatedCount++;", "-          if (printEvents) System.out.println(\"threadUpdated \" + threadLocationUpdatedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerShutdown() {", "-        synchronized(_notifierLock) {", "-          debuggerShutdownCount++;", "-          if (printEvents) System.out.println(\"debuggerShutdown \" + debuggerShutdownCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-       ", "-      public void debuggerStarted() {", "-        synchronized(_notifierLock) {", "-          debuggerStartedCount++;", "-          if (printEvents) System.out.println(\"debuggerStarted \" + debuggerStartedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-    };", "-    ", "-    ", "-      _startup();  //_debugManager.startup();", "-    _debugManager.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"bar();\"),4);", "-      interpretIgnoreResult(\"new DrJavaDebugClass().foo()\");", "-    if (printMessages) System.out.println(\"----After breakpoint:\\n\" + _getInteractionsText());", "-    assertInteractionsContains(\"Foo Line 1\");", "-    assertInteractionsDoesNotContain(\"Bar Line 1\");", "-    if (printMessages) System.out.println(\"----After one resume:\\n\" + _getInteractionsText());", "-    if (printMessages) System.out.println(\"----After second resume:\\n\" + _getInteractionsText());", "-    assertInteractionsContains(\"Foo Line 3\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd0a34492459de31fda546b510f82939", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void testStepOut()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testStepOut()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["+   */", "+  public void testStepOut() ", "+    throws DebugException, BadLocationException, IOException, InterruptedException", "+  {", "+    if (printMessages)  System.out.println(\"----testStepOut----\");", "+    StepTestListener debugListener = new StepTestListener();", "+    ", "+    // Compile the class", "+    File file2 = new File(_tempDir, \"DrJavaDebugClass.java\");", "+    OpenDefinitionsDocument doc = _doCompile(DEBUG_CLASS, file2);", "+    _debugManager.addListener(debugListener); ", "+    // Start debugger and add breakpoint", "+    synchronized(_notifierLock) {", "+      _debugManager.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    ", "+    debugListener.assertDebuggerStartedCount(1);", "+    ", "+    _debugManager.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"bar();\"),4);", "+    debugListener.assertBreakpointSetCount(1);", "+    ", "+    // Run the foo() method, hitting breakpoint", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"new DrJavaDebugClass().foo()\");", "+      _waitForNotifies(3);  // suspended, updated, breakpointReached", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+      ", "+    // Ensure breakpoint is hit", "+    debugListener.assertBreakpointReachedCount(1);  // fires", "+    debugListener.assertThreadLocationUpdatedCount(1);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(1);  // fires", "+    debugListener.assertCurrThreadResumedCount(0);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertInteractionsContains(\"Foo Line 1\");", "+    assertInteractionsDoesNotContain(\"Bar Line 1\");", "+", "+    // Step into bar() method", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_INTO);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(2);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertInteractionsDoesNotContain(\"Bar Line 1\");", "+    ", "+    // Step out of method", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_OUT);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) System.out.println(\"****\"+getInteractionsText());", "+    debugListener.assertStepRequestedCount(2);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(2); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(3);  // fires", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(3);  //fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    assertInteractionsContains(\"Bar Line 2\");", "+    assertInteractionsDoesNotContain(\"Foo Line 3\");", "+    ", "+    //Remove listener at end", "+    if (printMessages) System.out.println(\"Shutting down...\");", "+    synchronized(_notifierLock) {", "+      _debugManager.shutdown();", "+      _waitForNotifies(2);  // threadDied, shutdown", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertCurrThreadDiedCount(1);  // fires", "+    debugListener.assertBreakpointRemovedCount(1);  // fires (don't wait)", "+    debugListener.assertDebuggerShutdownCount(1);  // fires", "+    if (printMessages) System.out.println(\"Shut down.\");", "+    _debugManager.removeListener(debugListener);", "+  }", "-   */", "-  public void testStepOut() ", "-    throws DebugException, BadLocationException, IOException, InterruptedException", "-  {", "-    if (printMessages)  System.out.println(\"----testStepOut----\");", "-    DebugTestListener debugListener = new DebugTestListener() {", "-      public void breakpointSet(Breakpoint bp) {", "-        breakpointSetCount++;", "-      }", "-      public void breakpointReached(Breakpoint bp) {", "-        synchronized(_notifierLock) {", "-          breakpointReachedCount++;", "-          if (printEvents) System.out.println(\"breakpointReached \" + breakpointReachedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void breakpointRemoved(Breakpoint bp) {", "-        //synchronized(_notifierLock) {", "-          breakpointRemovedCount++;", "-          if (printEvents) System.out.println(\"breakpointRemoved \" + breakpointRemovedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void stepRequested() {", "-        //synchronized(_notifierLock) {", "-          stepRequestedCount++;", "-          if (printEvents) System.out.println(\"stepRequested \" + stepRequestedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadSuspended() {", "-        synchronized(_notifierLock) {", "-          currThreadSuspendedCount++;", "-          if (printEvents) System.out.println(\"threadSuspended \" + currThreadSuspendedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void currThreadResumed() {", "-        //synchronized(_notifierLock) {", "-          currThreadResumedCount++;", "-          if (printEvents) System.out.println(\"threadResumed \" + currThreadResumedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadDied() {", "-        synchronized(_notifierLock) {", "-          currThreadDiedCount++;", "-          if (printEvents) System.out.println(\"threadDied \" + currThreadDiedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber){", "-        synchronized(_notifierLock) {", "-          threadLocationUpdatedCount++;", "-          if (printEvents) System.out.println(\"threadUpdated \" + threadLocationUpdatedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerShutdown() {", "-        synchronized(_notifierLock) {", "-          debuggerShutdownCount++;", "-          if (printEvents) System.out.println(\"debuggerShutdown \" + debuggerShutdownCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerStarted() {", "-        synchronized(_notifierLock) {", "-          debuggerStartedCount++;", "-          if (printEvents) System.out.println(\"debuggerStarted \" + debuggerStartedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-    };", "-    ", "-    // Compile the class", "-    File file2 = new File(_tempDir, \"DrJavaDebugClass.java\");", "-    OpenDefinitionsDocument doc = _doCompile(DEBUG_CLASS, file2);", "-    _debugManager.addListener(debugListener); ", "-    // Start debugger and add breakpoint", "-    synchronized(_notifierLock) {", "-      _startup();  //_debugManager.startup();", "-      _waitForNotifies(1);  // startup", "-      _notifierLock.wait();", "-    }", "-    ", "-    debugListener.assertDebuggerStartedCount(1);", "-    ", "-    _debugManager.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"bar();\"),4);", "-    debugListener.assertBreakpointSetCount(1);", "-    ", "-    // Run the foo() method, hitting breakpoint", "-    synchronized(_notifierLock) {", "-      interpretIgnoreResult(\"new DrJavaDebugClass().foo()\");", "-      _waitForNotifies(3);  // suspended, updated, breakpointReached", "-      _notifierLock.wait();", "-    }", "-    ", "-    if (printMessages) System.out.println(\"----After breakpoint:\\n\" + _getInteractionsText());", "-      ", "-    // Ensure breakpoint is hit", "-    debugListener.assertBreakpointReachedCount(1);  // fires", "-    debugListener.assertThreadLocationUpdatedCount(1);  // fires", "-    debugListener.assertCurrThreadSuspendedCount(1);  // fires", "-    debugListener.assertCurrThreadResumedCount(0);", "-    debugListener.assertCurrThreadDiedCount(0);", "-    assertInteractionsContains(\"Foo Line 1\");", "-    assertInteractionsDoesNotContain(\"Bar Line 1\");", "-", "-    // Step into bar() method", "-    synchronized(_notifierLock){", "-      _debugManager.step(DebugManager.STEP_INTO);", "-      _waitForNotifies(2);  // suspended, updated", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "-    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "-    debugListener.assertThreadLocationUpdatedCount(2);  //fires", "-    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "-    debugListener.assertBreakpointReachedCount(1);", "-    debugListener.assertCurrThreadDiedCount(0);", "-    assertInteractionsDoesNotContain(\"Bar Line 1\");", "-    ", "-    // Step out of method", "-    synchronized(_notifierLock){", "-      _debugManager.step(DebugManager.STEP_OUT);", "-      _waitForNotifies(2);  // suspended, updated", "-      _notifierLock.wait();", "-    }", "-    ", "-    if (printMessages) System.out.println(\"****\"+_getInteractionsText());", "-    debugListener.assertStepRequestedCount(2);  // fires (don't wait)", "-    debugListener.assertCurrThreadResumedCount(2); // fires (don't wait)", "-    debugListener.assertThreadLocationUpdatedCount(3);  // fires", "-    debugListener.assertCurrThreadDiedCount(0);", "-    debugListener.assertCurrThreadSuspendedCount(3);  //fires", "-    debugListener.assertBreakpointReachedCount(1);", "-    assertInteractionsContains(\"Bar Line 2\");", "-    assertInteractionsDoesNotContain(\"Foo Line 3\");", "-    ", "-    //Remove listener at end", "-    if (printMessages) System.out.println(\"Shutting down...\");", "-    synchronized(_notifierLock) {", "-      _debugManager.shutdown();", "-      _waitForNotifies(2);  // threadDied, shutdown", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertCurrThreadDiedCount(1);  // fires", "-    debugListener.assertBreakpointRemovedCount(1);  // fires (don't wait)", "-    debugListener.assertDebuggerShutdownCount(1);  // fires", "-    if (printMessages) System.out.println(\"Shut down.\");", "-    _debugManager.removeListener(debugListener);", "-  }"]}], "num": 20742}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "babdfd8daa930477c054964bb4fbb999", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c48256243c70a7b9444638444c46486", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "          public void test_NotAllowed()", "signatureAfterChange": "          public void test_NotAllowed()", "diff": ["-      SourceInfo noInfo = JExprParser.NO_SOURCE_INFO;", "-      Word w = new Word(JExprParser.NO_SOURCE_INFO, \"word\");", "+      Word w = new Word(NO_INFO, \"word\");", "-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      UnbracedBody emptyUnbracedBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      ClassOrInterfaceType superClass = new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]);", "+      BracedBody emptyBody = new BracedBody(NO_INFO, new BodyItemI[0]);", "+      UnbracedBody emptyUnbracedBody = new UnbracedBody(NO_INFO, new BodyItemI[0]);", "+      ClassOrInterfaceType superClass = new ClassOrInterfaceType(NO_INFO, \"java.lang.Object\", new Type[0]);", "-      CompoundWord cw = new CompoundWord(noInfo, new Word[0]);", "-      Statement stmt = new EmptyStatement(noInfo);", "-      Expression e = new EmptyExpression(noInfo);", "-      Block b = new Block(noInfo, emptyBody);", "+      CompoundWord cw = new CompoundWord(NO_INFO, new Word[0]);", "+      Statement stmt = new EmptyStatement(NO_INFO);", "+      Expression e = new EmptyExpression(NO_INFO);", "+      Block b = new Block(NO_INFO, emptyBody);", "-      TypeVariable tv = new TypeVariable(noInfo, \"name\");", "+      TypeVariable tv = new TypeVariable(NO_INFO, \"name\");", "-      InnerInterfaceDef ii = new InnerInterfaceDef(noInfo, _publicMav, w, tps, rts, emptyBody);", "-      InnerClassDef ic = new InnerClassDef(noInfo, _publicMav, w, tps, superClass, rts, emptyBody);", "+      InnerInterfaceDef ii = new InnerInterfaceDef(NO_INFO, _publicMav, w, tps, rts, emptyBody);", "+      InnerClassDef ic = new InnerClassDef(NO_INFO, _publicMav, w, tps, superClass, rts, emptyBody);", "-      StaticInitializer si = new StaticInitializer(noInfo, b);", "-      LabeledStatement ls = new LabeledStatement(noInfo, new Word(noInfo, \"label\"), stmt);", "+      StaticInitializer si = new StaticInitializer(NO_INFO, b);", "+      LabeledStatement ls = new LabeledStatement(NO_INFO, new Word(NO_INFO, \"label\"), stmt);", "-      LabeledBreakStatement bs = new LabeledBreakStatement(noInfo, new Word(noInfo, \"myLabel\"));", "-      LabeledContinueStatement cs = new LabeledContinueStatement(noInfo, new Word(noInfo, \"yourLabel\"));", "-      SynchronizedStatement syncs = new SynchronizedStatement(noInfo, e, b);", "-      TypeParameter tp = new TypeParameter(noInfo, tv, superClass);", "-      ConditionalExpression ce = new ConditionalExpression(noInfo, e, e, e);", "+      LabeledBreakStatement bs = new LabeledBreakStatement(NO_INFO, new Word(NO_INFO, \"myLabel\"));", "+      LabeledContinueStatement cs = new LabeledContinueStatement(NO_INFO, new Word(NO_INFO, \"yourLabel\"));", "+      SynchronizedStatement syncs = new SynchronizedStatement(NO_INFO, e, b);", "+      TypeParameter tp = new TypeParameter(NO_INFO, tv, superClass);", "+      ConditionalExpression ce = new ConditionalExpression(NO_INFO, e, e, e);", "-      TryCatchStatement tcs = new NormalTryCatchStatement(noInfo, b, new CatchBlock[0]);", "-      SwitchCase defaultSc = new DefaultCase(JExprParser.NO_SOURCE_INFO, emptyUnbracedBody);", "-      SwitchStatement ssBadDefault = new SwitchStatement(noInfo, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), new SwitchCase[]{defaultSc, defaultSc});", "+      TryCatchStatement tcs = new NormalTryCatchStatement(NO_INFO, b, new CatchBlock[0]);", "+      SwitchCase defaultSc = new DefaultCase(NO_INFO, emptyUnbracedBody);", "+      SwitchStatement ssBadDefault = new SwitchStatement(NO_INFO, new IntegerLiteral(NO_INFO, 5), ", "+                                                         new SwitchCase[]{defaultSc, defaultSc});", "-     assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"LabeledBreakStatement is not allowed\", \"Labeled statements cannot be used at the Advanced level, so you cannot break to a label\", errors.getLast().getFirst());", "+     assertEquals(\"LabeledBreakStatement is not allowed\",", "+                  \"Labeled statements cannot be used at the Advanced level, so you cannot break to a label\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"ContinueStatement is not allowed\", \"Labeled statements cannot be used at the Advanced level, so you cannot use a labeled continue statement\", errors.getLast().getFirst());", "+     assertEquals(\"ContinueStatement is not allowed\", ", "+                  \"Labeled statements cannot be used at the Advanced level, so you cannot use a labeled \" + ", "+                  \"continue statement\", errors.getLast().getFirst());", "-     assertEquals(\"SynchronizedStatement is not allowed\", \"Synchronized statements cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"SynchronizedStatement is not allowed\", ", "+                  \"Synchronized statements cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"ConditionalExpression is not allowed\", \"Conditional expressions cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"ConditionalExpression is not allowed\", ", "+                  \"Conditional expressions cannot be used at the Advanced level\", errors.getLast().getFirst());", "-     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", errors.getLast().getFirst());", "+     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"Default case has to be last case\", \"Default case must be the last case of a switch statement at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"Default case has to be last case\", ", "+                  \"Default case must be the last case of a switch statement at the Advanced level\", ", "+                  errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2430446c5b8b3d9a911cb22f63da2c36", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "          public void testForIncrementExpression()", "signatureAfterChange": "          public void testForIncrementExpression()", "diff": ["-      ComplexNameReference nf = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Ned\")), new Word(SourceInfo.NO_INFO, \"Flanders\"));", "-      PositivePrefixIncrementExpression ppi = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, nf);", "+      ComplexNameReference nf = ", "+        new ComplexNameReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"Ned\")), ", "+                                 new Word(SourceInfo.NONE, \"Flanders\"));", "+      PositivePrefixIncrementExpression ppi = new PositivePrefixIncrementExpression(SourceInfo.NONE, nf);", "-      PositivePrefixIncrementExpression ppi2 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")));", "+      PositivePrefixIncrementExpression ppi2 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, ", "+                                              new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "-      PositivePrefixIncrementExpression ppi3 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))));", "+      Parenthesized p1 = ", "+        new Parenthesized(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "+      PositivePrefixIncrementExpression ppi3 = new PositivePrefixIncrementExpression(SourceInfo.NONE, p1);", "-      assertEquals(\"There should now be 4 errors\", 4, errors.size());  // For some reason, generated error is not a duplicate", "+      assertEquals(\"There should now be 4 errors\", 4, errors.size());  // Generated error is not a duplicate", "-      //test that words with a post-decrement operator afterwards only work if they already have a value and aren't final.", "+      // Test that words with post-decrement operator only work if they already have a value and aren't final.", "-      NegativePostfixIncrementExpression npi = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, nf);", "+      NegativePostfixIncrementExpression npi = new NegativePostfixIncrementExpression(SourceInfo.NONE, nf);", "-      // test that attempting to decrement the value of a field that doesn't have a value will throw an error", "+      // Test that attempting to decrement the value of a field that doesn't have a value will throw an error", "-        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "-                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                       new Word(SourceInfo.NO_INFO, \"int\")));", "+        new NegativePostfixIncrementExpression(SourceInfo.NONE, ", "+                                               new SimpleNameReference(SourceInfo.NONE, ", "+                                                                       new Word(SourceInfo.NONE, \"int\")));", "-      NegativePostfixIncrementExpression npi3 = ", "-        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "-                                               new Parenthesized(SourceInfo.NO_INFO, ", "-                                                                 new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                         new Word(SourceInfo.NO_INFO, \"int\"))));", "+      Parenthesized p2 = ", "+        new Parenthesized(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "+      NegativePostfixIncrementExpression npi3 = new NegativePostfixIncrementExpression(SourceInfo.NONE, p2);", "-      PositivePrefixIncrementExpression ppi4 = ", "-        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "-                                              new Parenthesized(SourceInfo.NO_INFO, ", "-                                                                new NegativePrefixIncrementExpression(SourceInfo.NO_INFO, nf)));", "+      Parenthesized p3 = new Parenthesized(SourceInfo.NONE, new NegativePrefixIncrementExpression(SourceInfo.NONE, nf));", "+      PositivePrefixIncrementExpression ppi4 = new PositivePrefixIncrementExpression(SourceInfo.NONE, p3);", "-        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "-                                              new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                      new Word(SourceInfo.NO_INFO, \"s\")));", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, ", "+                                              new SimpleNameReference(SourceInfo.NONE, ", "+                                                                      new Word(SourceInfo.NONE, \"s\")));", "-      PositivePrefixIncrementExpression ppi6 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, nf)));", "+      PositivePrefixIncrementExpression ppi6 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, new Parenthesized(SourceInfo.NONE, ", "+                                                                                 new Parenthesized(SourceInfo.NONE, nf)));"]}], "num": 2932}
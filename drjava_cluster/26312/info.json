{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf047b0504d959f22a9b8fc83b23af1f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d90a93e3c768a493b9b5db4d702ca1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ReflectUtil.java", "commitBeforeChange": "24a4bd9b5af47fdf2b927852ef0f4a564c73861b", "commitAfterChange": "a0233fef3427e8ddd7241be47fe79cd3cd5d54bc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static String simpleName(Class<?> c)", "signatureAfterChange": "   public static String simpleName(Class<?> c)", "diff": ["-      return fullName.substring(fullName.lastIndexOf('.') + 1);", "+      int dot = fullName.lastIndexOf('.');", "+      int dollar = fullName.lastIndexOf('$');", "+      int nameStart = (dot > dollar) ? dot+1 : dollar+1;", "+      int length = fullName.length();", "+      while (nameStart < length && Character.isDigit(fullName.charAt(nameStart))) { nameStart++; }", "+      return fullName.substring(nameStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "434f79b19ba9a72eb4e7b78b57f28346", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWith.java", "commitBeforeChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "commitAfterChange": "0d293f065df295b40875d176fa985aae8404680f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    throw new RuntimeException(\"Not yet implemented.\");", "-    ", "-    /*  FIXME: don't look in comments if _searchComments == false", "-    int start = startOfLine(doc, pos);", "-    int end = endOfLine(doc, pos);", "-    String text = doc.getText(start, end);", "-    int prefixPos = text.indexOf(_prefix);", "-    return (prefixPos == 0);", "-    */", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      int firstChar = doc.getLineFirstCharPos(startLine);", "+      ", "+      // Compare prefix", "+      String actualPrefix = doc.getText(firstChar, _prefix.length());", "+      return _prefix.equals(actualPrefix);", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }"]}], "num": 26312}
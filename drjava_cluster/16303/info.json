{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ca13060a43423bb2660925c6d97c086", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ebca23ea0538e2a7921b7a32531c8d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentHelperTest.java", "commitBeforeChange": "8b24a954c4ca31d0bfd4e6cf29968bdfd85074dd", "commitAfterChange": "7a16360ed3db92a5068288b3b626cc549d236342", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testFindPrevDelimiter() throws BadLocationException", "signatureAfterChange": "   public void testFindPrevDelimiter() throws BadLocationException", "diff": ["+    // Used to test finding delimiters that can be confused with comments", "+    char[] delimiters4 = {'/', '*'};", "+    ", "+    _setDocText(\"foo *\\n\" +", "+                \"// comment\\n\" +", "+                \"bar\\n\");", "+    assertEquals(\"Check that findprevDelimiter ignores comments even\" +", "+                 \"when delimiters include * and / (1)\",", "+                 4,", "+                 _doc.findPrevDelimiter(17, delimiters4));", "+    _setDocText(\"foo /\\n\" +", "+                \"/* comment */\\n\" +", "+                \"bar\\n\");", "+    assertEquals(\"Check that findprevDelimiter ignores comments even\" +", "+                 \"when delimiters include * and / (2)\",", "+                 4,", "+                 _doc.findPrevDelimiter(17, delimiters4));", "+", "+    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c35d05daee1669007f0650e102c17809", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testFindPrevDelimiter() throws BadLocationException", "signatureAfterChange": "   public void testFindPrevDelimiter() throws BadLocationException", "diff": ["-    _setDocText(\"foo();\\nfor(;;)\\n\");", "-    assertEquals(\"Check that delimiters in paren phrases \" +", "-                 \"can be detected\",", "-                 12,", "-                 _doc.findPrevDelimiter(14, delimiters1, false));", "+// Commented out because this behavior is undesirable!  Preceding chars enclosed in parens should not be visible!    ", "+//    _setDocText(\"foo();\\nfor(;;)\\n\");", "+//    assertEquals(\"Check that delimiters in paren phrases \" +", "+//                 \"can be detected\",", "+//                 12,", "+//                 _doc.findPrevDelimiter(14, delimiters1, false));"]}], "num": 16303}
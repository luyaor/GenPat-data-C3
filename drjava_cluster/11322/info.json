{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb5c2733f8f10689e9e65316307841a3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9374fec8a1e40364c9822a043c489de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "35d9365226ba0771f8b6c75f7ce46695407e7805", "commitAfterChange": "e00a80132d9c599630e60c288ab824f99427e68b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public NameVisitor makeNameVisitor(final Context context)", "signatureAfterChange": "   public NameVisitorExtension makeNameVisitor(final Context context)", "diff": ["-  public NameVisitor makeNameVisitor(final Context context) {", "-    return new NameVisitor(context) {", "-      // An attempt at fixing the redefinition issue in DynamicJava", "-//      public Object visit(VariableDeclaration node) {  ", "-//        // NameVisitor", "-//        Node n = node.getInitializer();", "-//        if (n != null) {", "-//          Object o = n.acceptVisitor(this);", "-//          if (o != null) {", "-//            if (o instanceof ReferenceType) {", "-//              throw new ExecutionError(\"malformed.expression\", n);", "-//            }", "-//            node.setInitializer((Expression)o);", "-//          }", "-//        }", "-//        ", "-//        // TypeChecker", "-//        TypeChecker tc = makeTypeChecker(context);", "-//        Class lc = (Class)node.getType().acceptVisitor(tc);", "-//        Node init = node.getInitializer();", "-//        if (init != null) {", "-//          Class rc = (Class)init.acceptVisitor(tc);", "-//          _checkAssignmentStaticRules(lc, rc, node, init);", "-//        }", "-//        ", "-//        // EvaluationVisitor", "-//        EvaluationVisitorExtension eve = new EvaluationVisitorExtension(context);", "-//        Class c = NodeProperties.getType(node.getType());", "-//        ", "-//        if (node.getInitializer() != null) {", "-//          Object o = eve.performCast(c, node.getInitializer().acceptVisitor(eve));", "-//        }", "-//        return super.visit(node);", "-//      }    ", "+  public NameVisitorExtension makeNameVisitor(final Context context) {", "+    return new NameVisitorExtension(context) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e586c88024a36bb2c6ae484a188fa64c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "commitAfterChange": "ba6205cad42ae00df3c37c5cbd4625770848df66", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public NameVisitorExtension makeNameVisitor(final Context context)", "signatureAfterChange": "   public NameVisitorExtension makeNameVisitor(final Context nameContext,                                                final Context typeContext)", "diff": ["-  public NameVisitorExtension makeNameVisitor(final Context context) {", "-    return new NameVisitorExtension(context) {", "+  public NameVisitorExtension makeNameVisitor(final Context nameContext, ", "+                                              final Context typeContext) {", "+    return new NameVisitorExtension(nameContext, typeContext) {", "-      //            Class oldClass = (Class)context.get(name);", "-      //            Class newClass = _getClassForType(type, context);", "+      //            Class oldClass = (Class)nameContext.get(name);", "+      //            Class newClass = _getClassForType(type, nameContext);", "-          if (context.isDefined(\"this\")) {", "+          if (nameContext.isDefined(\"this\")) {", "-            ObjectFieldAccess ofa = _getObjectFieldAccessForField(field, context);", "+            ObjectFieldAccess ofa = _getObjectFieldAccessForField(field, nameContext);", "-            StaticFieldAccess sfa = _getStaticFieldAccessForField(field, context);", "+            StaticFieldAccess sfa = _getStaticFieldAccessForField(field, nameContext);", "-              ReferenceType rt = _getReferenceTypeForField(field, context);", "+              ReferenceType rt = _getReferenceTypeForField(field, nameContext);", "-          else if (context.isDefined(\"this\")) {", "-            ObjectMethodCall omc = _getObjectMethodCallForFunction(method, context);", "+          else if (nameContext.isDefined(\"this\")) {", "+            ObjectMethodCall omc = _getObjectMethodCallForFunction(method, nameContext);", "-            StaticMethodCall smc = _getStaticMethodCallForFunction(method, context);", "+            StaticMethodCall smc = _getStaticMethodCallForFunction(method, nameContext);"]}], "num": 11322}
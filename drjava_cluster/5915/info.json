{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "052433baa79b467ca7b912803140be99", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01c3e1f25c743f06259474ab7b6ce50a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece, LinkedList<VariableData> vars, boolean shouldRecur, boolean addError)", "signatureAfterChange": "   public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece,                                                  LinkedList<VariableData> vars, boolean shouldRecur, boolean addError)", "diff": ["-   */", "-  public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece, LinkedList<VariableData> vars, boolean shouldRecur, boolean addError) {", "+    */", "+  public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece, ", "+                                                LinkedList<VariableData> vars, boolean shouldRecur, boolean addError) {", "-    if (data == null) {", "-      return null;", "-    }", "+    if (data == null) return null;", "-          if (vd.getEnclosingData() instanceof BodyData && addError) {", "-            /* ", "-             * If vd is defined in a method body and", "-             * thisSD is a local class or anonymous inner class defined in data, then vd must be", "-             * final to be used.", "+          if (vd.getEnclosingData() instanceof MethodData && addError) {  // was BodyData", "+            /* If vd is defined in a method and thisSD is a local class or anonymous inner class defined in data, then ", "+             * vd must be final to be used.  Note: the enclosingData of formal parameters is the enclosing class not", "+             * the corresponding method.", "-                _addError(\"Local variable \" + vd.getName() + \" is accessed from within an inner class; must be declared final\", piece);", "+                _addError(\"Local variable \" + vd.getName() ", "+                            + \" is accessed from within an inner class; must be declared final\", piece);", "-            checkAccessibility(piece, vd.getMav(), vd.getName(), vd.getEnclosingData().getSymbolData(), thisSD, \"field or variable\");", "+            checkAccess(piece, vd.getMav(), vd.getName(), vd.getEnclosingData().getSymbolData(), thisSD, ", "+                        \"field or variable\");", "-        if (outerData != null) {", "-          vd = getFieldOrVariable(text, outerData, thisSD, piece, outerData.getVars(), true, addError);", "-        }", "-        else {return null;}", "-        ", "-        if (vd != null) {", "-          return vd;", "-        }", "+        if (outerData == null) return null;", "+        vd = getFieldOrVariable(text, outerData, thisSD, piece, outerData.getVars(), true, addError);", "+        if (vd != null) return vd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "279b3fa53e0f00d868349fcc5853f7e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d33d42f5f56aa9f97fa7ee5954a0170706bf34dc", "commitAfterChange": "d94a1a3c2d24d89ea1f580460a5e45b2a0d432b1", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "   void _gotoFileUnderCursor()", "signatureAfterChange": "   void _gotoFileUnderCursor()", "diff": ["-      List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "-      if ((docs==null) || (docs.size() == 0)) {", "-        return; // do nothing", "+//    Utilities.show(\"Calling gotoFileUnderCursor()\");", "+    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+    if ((docs==null) || (docs.size() == 0)) return; // do nothing", "+    ", "+    GoToFileListEntry currentEntry = null;", "+    ArrayList<GoToFileListEntry> list;", "+    list = new ArrayList<GoToFileListEntry>(docs.size());", "+    for(OpenDefinitionsDocument d: docs) {", "+      GoToFileListEntry entry = new GoToFileListEntry(d, d.toString());", "+      if (d.equals(_model.getActiveDocument())) currentEntry = entry;", "+      list.add(entry);", "+    }", "+    ", "+    PredictiveInputModel<GoToFileListEntry> pim =", "+      new PredictiveInputModel<GoToFileListEntry>(true,", "+                                                  new PredictiveInputModel.PrefixStrategy<GoToFileListEntry>(),", "+                                                  list);", "+    OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "+    odd.acquireReadLock();", "+    String mask = \"\";", "+    try {", "+      int loc = getCurrentDefPane().getCaretPosition();", "+      String s = odd.getText();", "+      // find start", "+      int start = loc;", "+      while(start>0) {", "+        if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "+        --start;", "-      GoToFileListEntry currentEntry = null;", "-      ArrayList<GoToFileListEntry> list;", "-      list = new ArrayList<GoToFileListEntry>(docs.size());", "-      for(OpenDefinitionsDocument d: docs) {", "-        GoToFileListEntry entry = new GoToFileListEntry(d, d.toString());", "-        if (d.equals(_model.getActiveDocument())) {", "-          currentEntry = entry;", "-        }", "-        list.add(entry);", "+      while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start<loc)) {", "+        ++start;", "-      PredictiveInputModel<GoToFileListEntry> pim =", "-          new PredictiveInputModel<GoToFileListEntry>(true,", "-                                                      new PredictiveInputModel.PrefixStrategy<GoToFileListEntry>(),", "-                                                      list);", "-      OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "-      odd.acquireReadLock();", "-      String mask = \"\";", "-      try {", "-          int loc = getCurrentDefPane().getCaretPosition();", "-          String s = odd.getText();", "-          // find start", "-          int start = loc;", "-          while(start>0) {", "-              if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "-              --start;", "-          }", "-          while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start<loc)) {", "-              ++start;", "-          }", "-          // find end", "-          int end = loc-1;", "-          while(end<s.length()-1) {", "-              if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "-              ++end;", "-          }", "-          if ((start>=0) && (end<s.length())) {", "-              mask = s.substring(start, end+1);", "-              pim.setMask(mask);", "-          }", "+      // find end", "+      int end = loc-1;", "+      while(end<s.length()-1) {", "+        if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "+        ++end;", "-      finally { odd.releaseReadLock(); }", "-", "+      if ((start>=0) && (end<s.length())) {", "+        mask = s.substring(start, end+1);", "+        pim.setMask(mask);", "+      }", "+    }", "+    finally { odd.releaseReadLock(); }", "+    ", "+//    Utilities.show(\"Matching items are: \" + pim.getMatchingItems());", "+    ", "+    if (pim.getMatchingItems().size() == 1) {", "+      // exactly one match, go to file", "+      if (pim.getCurrentItem() != null) _model.setActiveDocument(pim.getCurrentItem().doc);", "+    }", "+    else {", "+      // try appending \".java\" and see if it's unique", "+      pim.extendMask(\".java\");", "-          // exactly one match, go to file", "-          if (pim.getCurrentItem()!=null) {", "-            _model.setActiveDocument(pim.getCurrentItem().doc);", "-          }", "+        // exactly one match with \".java\" appended, go to file", "+        if (pim.getCurrentItem() != null) _model.setActiveDocument(pim.getCurrentItem().doc);", "-          // try appending \".java\" and see if it's unique", "-          pim.extendMask(\".java\");", "-          if (pim.getMatchingItems().size() == 1) {", "-              // exactly one match with \".java\" appended, go to file", "-              if (pim.getCurrentItem()!=null) {", "-                  _model.setActiveDocument(pim.getCurrentItem().doc);", "-              }", "+        // not exactly one match", "+        pim.setMask(mask);", "+        if (pim.getMatchingItems().size() == 0) {", "+          // if there are no matches, shorten the mask until there is at least one", "+          mask = pim.getMask();", "+          while(mask.length()>0) {", "+            mask = mask.substring(0, mask.length()-1);", "+            pim.setMask(mask);", "+            if (pim.getMatchingItems().size()>0) { break; }", "-          else {", "-              // not exactly one match", "-              pim.setMask(mask);", "-              if (pim.getMatchingItems().size() == 0) {", "-                  // if there are no matches, shorten the mask until there is at least one", "-                  mask = pim.getMask();", "-                  while(mask.length()>0) {", "-                      mask = mask.substring(0, mask.length()-1);", "-                      pim.setMask(mask);", "-                      if (pim.getMatchingItems().size()>0) { break; }", "-                  }", "-              }       ", "-              initGotoFileDialog();", "-              _gotoFileDialog.setModel(true, pim); // ignore case", "-              if (currentEntry!=null) {", "-                  _gotoFileDialog.setCurrentItem(currentEntry);", "-              }", "-              hourglassOn();", "-              _gotoFileDialog.setVisible(true);", "-          }", "+        }       ", "+        initGotoFileDialog();", "+        _gotoFileDialog.setModel(true, pim); // ignore case", "+        if (currentEntry != null) _gotoFileDialog.setCurrentItem(currentEntry);", "+        hourglassOn();", "+        _gotoFileDialog.setVisible(true);", "+    }"]}], "num": 5915}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d59a280129a683042bb60d03afef0393", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cee526cb8771a466c3e3c46064652fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void doubleClicked(MouseEvent e)", "signatureAfterChange": "   public void doubleClicked(MouseEvent e)", "diff": ["-            final OpenDefinitionsDocument newDoc = pim.getCurrentItem().doc;", "-            final boolean docChanged = ! newDoc.equals(_model.getActiveDocument());", "-            final boolean docSwitch = _model.getActiveDocument() != newDoc;", "-            if (docSwitch) _model.setActiveDocument(newDoc);", "-            final int curLine = newDoc.getCurrentLine();", "-            final int last = name.lastIndexOf(':');", "-            if (last >= 0) {", "-              try {", "-                String nend = name.substring(last + 1);", "-                int val = Integer.parseInt(nend);", "-                ", "-                final int lineNum = Math.max(1, val);", "-                Runnable command = new Runnable() {", "-                  public void run() {", "-                    try { _frame._jumpToLine(lineNum); }  // adds this region to browser history", "-                    catch (RuntimeException ex) { _frame._jumpToLine(curLine); }", "+            final OpenDefinitionsDocument newDoc = pim.getCurrentItem().getOpenDefinitionsDocument();", "+            if (newDoc != null) {", "+              final boolean docChanged = ! newDoc.equals(_model.getActiveDocument());", "+              final boolean docSwitch = _model.getActiveDocument() != newDoc;", "+              if (docSwitch) _model.setActiveDocument(newDoc);", "+              final int curLine = newDoc.getCurrentLine();", "+              final int last = name.lastIndexOf(':');", "+              if (last >= 0) {", "+                try {", "+                  String nend = name.substring(last + 1);", "+                  int val = Integer.parseInt(nend);", "+                  ", "+                  final int lineNum = Math.max(1, val);", "+                  Runnable command = new Runnable() {", "+                    public void run() {", "+                      try { _frame._jumpToLine(lineNum); }  // adds this region to browser history", "+                      catch (RuntimeException ex) { _frame._jumpToLine(curLine); }", "+                    }", "+                  };", "+                  if (docSwitch) {", "+                    // postpone running command until after document switch, which is pending in the event queue", "+                    EventQueue.invokeLater(command);", "-                };", "-                if (docSwitch) {", "-                  // postpone running command until after document switch, which is pending in the event queue", "-                  EventQueue.invokeLater(command);", "+                  else command.run();", "-                else command.run();", "+                catch(RuntimeException ex) { /* ignore */ }", "-              catch(RuntimeException ex) { /* ignore */ }", "-            }", "-            else if (docChanged) {", "-              // defer executing this code until after active document switch (if any) is complete", "-              EventQueue.invokeLater(new Runnable() { public void run() { _frame.addToBrowserHistory(); } });", "+              else if (docChanged) {", "+                // defer executing this code until after active document switch (if any) is complete", "+                EventQueue.invokeLater(new Runnable() { public void run() { _frame.addToBrowserHistory(); } });", "+              }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b212cdceb71105dc86817e218bc41c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/repl/EclipseInteractionsModel.java", "commitBeforeChange": "9e872e89ecbb011ef008c884ca8c25835ce56230", "commitAfterChange": "643b18bac8370f79aefcf668722f7c98ff72b6b4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   protected void _resetInteractionsClasspath()", "signatureAfterChange": "   protected void _resetInteractionsClasspath()", "diff": ["-        ", "-        // Get the project's location on disk", "-        IProject proj = jProj.getProject();", "-        IPath projRoot = proj.getDescription().getLocation();", "-        // Note: getLocation returns null if the default location is used", "-        //  (brilliant...)", "-        ", "-        // Get the resolved classpath entries - this should filter out", "-        //   all CPE_VARIABLE and CPE_CONTAINER entries.", "-        IClasspathEntry entries[] = jProj.getResolvedClasspath(true);", "-        ", "-        // For each of the classpath entries...", "-        for(int j = 0; j < entries.length; j++) {", "-          IClasspathEntry entry = entries[j];", "-          ", "-          // Check what kind of entry it is...", "-          int kind = entry.getEntryKind();", "-          ", "-          // And get the appropriate path.", "-          IPath path;", "-          switch (kind) {", "-            case IClasspathEntry.CPE_LIBRARY:", "-              // The raw location of a JAR.", "-              path = entry.getPath();", "-              //System.out.println(\"Adding library: \" + path.toOSString());", "-              addToClassPath(path.toOSString());", "-              break;", "-            case IClasspathEntry.CPE_SOURCE:", "-              // The output location of source.", "-              // Need to append it to the user's workspace directory.", "-              path = entry.getOutputLocation();", "-              if (path == null) {", "-                path = jProj.getOutputLocation();", "-                //System.out.println(\" output location from proj: \" + path);", "-              }", "-              ", "-              // At this point, the output location contains the project", "-              //  name followed by the actual output folder name", "-              ", "-              if (projRoot != null) {", "-                // We have a custom project location, so the project name", "-                //  is not part of the *actual* output directory.  We need", "-                //  to remove the project name (first segment) and then", "-                //  append the rest of the output location to projRoot.", "-                path = path.removeFirstSegments(1);", "-                path = projRoot.append(path);", "-              }", "-              else {", "-                // A null projRoot means use the default location, which", "-                //  *does* include the project name in the output directory.", "-                path = root.getLocation().append(path);", "-              }", "-              ", "-              //System.out.println(\"Adding source: \" + path.toOSString());", "-              addToClassPath(path.toOSString());", "-              break;", "-            case IClasspathEntry.CPE_PROJECT:", "-              // In this case, just the project name is given.", "-              // We don't actually need to add anything to the classpath,", "-              //  since the project is open and we will get its classpath", "-              //  on another pass.", "-              break;", "-            default:", "-              // This should never happen.", "-              throw new RuntimeException(\"Unsupported classpath entry type.\");", "-          }", "-        }", "+        _addProjectToClasspath(jProj, jModel, root);", "+    }", "+  }"]}], "num": 26519}
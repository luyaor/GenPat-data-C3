{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b5c11cbb529240022adf92a6b4a4579", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02764897d50fe547a459d83cce07034f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public static void beginProgram(final String[] args)", "signatureAfterChange": "   public static void beginProgram(final String[] args)", "diff": ["+   */", "-      ", "-      _setupCompilerIfNeeded();", "-      ", "-      // The MainFrame *must* be constructed after the compiler setup process has", "-      // occurred; otherwise, the list of compilers in the UI will be wrong.", "-      // At some point this should be fixed, which would involve making the", "-      // CompilerRegistry notify listeners when there is a change in the list of", "-      // available compilers.", "-      final MainFrame mf = new MainFrame();", "-      edu.rice.cs.drjava.ui.AWTExceptionHandler.setFrame(mf);", "-      System.setProperty(\"sun.awt.exception.handler\", ", "-                         \"edu.rice.cs.drjava.ui.AWTExceptionHandler\");", "-      ", "-      // This enabling of the security manager must happen *after* the mainframe", "-      // is constructed. See bug #518509.", "-      // enableSecurityManager();", "-      openCommandLineFiles(mf, args);", "-      mf.show();", "-      ", "-      ", "-      // redirect stdout", "-      System.setOut(new PrintStream(new OutputStreamRedirector() {", "-        public void print(String s) {", "-          mf.getModel().systemOutPrint(s);", "+", "+      if (handleCommandLineArgs(args)) {", "+        ", "+        try {", "+          initConfig();", "-      }));", "-      ", "-      // redirect stderr", "-      System.setErr(new PrintStream(new OutputStreamRedirector() {", "-        public void print(String s) {", "-          mf.getModel().systemErrPrint(s);", "+        catch (IllegalStateException ise) {", "+          // Shouldn't happen: _config shouldn't be assigned yet", "+          throw new UnexpectedException(ise);", "-      }));", "+        setupCompilerIfNeeded();", "+      ", "+        // The MainFrame *must* be constructed after the compiler setup process has", "+        // occurred; otherwise, the list of compilers in the UI will be wrong.", "+        // At some point this should be fixed, which would involve making the", "+        // CompilerRegistry notify listeners when there is a change in the list of", "+        // available compilers.", "+        final MainFrame mf = new MainFrame();", "+        edu.rice.cs.drjava.ui.AWTExceptionHandler.setFrame(mf);", "+        System.setProperty(\"sun.awt.exception.handler\", ", "+                           \"edu.rice.cs.drjava.ui.AWTExceptionHandler\");", "+        ", "+        // This enabling of the security manager must happen *after* the mainframe", "+        // is constructed. See bug #518509.", "+        enableSecurityManager();", "+        ", "+        openCommandLineFiles(mf, _filesToOpen);", "+        mf.show();", "+        ", "+        ", "+        // redirect stdout", "+        System.setOut(new PrintStream(new OutputStreamRedirector() {", "+          public void print(String s) {", "+            mf.getModel().systemOutPrint(s);", "+          }", "+        }));", "+        ", "+        // redirect stderr", "+        System.setErr(new PrintStream(new OutputStreamRedirector() {", "+          public void print(String s) {", "+            mf.getModel().systemErrPrint(s);", "+          }", "+        }));", "+        ", "+      }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aabdd8c22fc5869a81bb58b0261298b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "03dd354632fbfc12bf279640160bfd934404dc39", "commitAfterChange": "2714f88d04f312c23b21ec6a440193d44b7121ba", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public void testRevertFile()     throws BadLocationException, IOException, OperationCanceledException,       AlreadyOpenException", "signatureAfterChange": "   public void testRevertFile()     throws BadLocationException, IOException, OperationCanceledException,       AlreadyOpenException", "diff": ["+ ", "+        catch (FileMovedException fme) {", "+          // We know file should exist", "+          fail(\"file does not exist\");", "+        }", "-     fileRevertedCount++;", "+        fileRevertedCount++;", "-", "-  ", "-  assertEquals(\"original doc unmodified\",doc.isModifiedSinceSave(), false);", "-  changeDocumentText(BAR_TEXT, doc);", "-  assertEquals(\"doc now modified\",doc.isModifiedSinceSave(), true);", "-  doc.revertFile();", "-  assertEquals(\"doc reverted\",doc.isModifiedSinceSave(), false);", "-  assertContents(FOO_TEXT, doc);", "+    ", "+    assertEquals(\"original doc unmodified\",doc.isModifiedSinceSave(), false);", "+    changeDocumentText(BAR_TEXT, doc);", "+    assertEquals(\"doc now modified\",doc.isModifiedSinceSave(), true);", "+    tempFile1.delete();", "+    try {", "+      doc.revertFile();", "+      fail(\"File should not be on disk.\");", "+    }", "+    catch (FileMovedException fme) {", "+      // Revert should not take place because file is not there.", "+    }", "+    assertEquals(\"doc NOT reverted\",doc.isModifiedSinceSave(), true);", "+    assertContents(BAR_TEXT, doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9d3246309db55e9273de14d37efa23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "a3a3aaa0c3ac1b6eda6080d129cd04f2b63b0095", "commitAfterChange": "5122b57870a06ce192633fae172ea410d4b7581b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testOpenRealFile()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testOpenRealFile()     throws BadLocationException, IOException", "diff": ["-      public void fileOpened(File file) {", "+      public void fileOpened(OpenDefinitionsDocument doc) {", "+        File file = null;", "+        try {", "+          file = doc.getFile();", "+        }", "+        catch (IllegalStateException ise) {", "+          // We know file should exist", "+          fail(\"file does not exist\");", "+        }", "+    }", "+    catch (AlreadyOpenException aoe) {", "+      // Should not be open", "+      fail(\"File was already open!\");"]}], "num": 24439}
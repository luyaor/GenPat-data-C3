{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcb9ce1eba55f7f1c6b5a67660e1a80a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d8fd9c5d35c20dfd6252b347e6633c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "1e619a02befaa7a99dc31172b2a007a2446ed2bd", "commitAfterChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public static List<List<List<String>>> commandLineToLists(String cmdline)", "signatureAfterChange": "   public static List<List<List<String>>> commandLineToLists(String cmdline)", "diff": ["-    final String ESCAPED_COLON_SEPARATOR = ESCAPE+\":\";", "-    if (!ESCAPED_COLON_SEPARATOR.equals(ESCAPED_PATH_SEPARATOR)) {", "-      tok.addKeyword(ESCAPED_COLON_SEPARATOR); // escaped colon", "+    final String ESCAPED_COLON = ESCAPE+\":\";", "+    if (!ESCAPED_COLON.equals(ESCAPED_PATH_SEPARATOR)) {", "+      tok.addKeyword(ESCAPED_COLON); // escaped colon", "+    // also add escaped escape ('\\u001b') as keyword, but treat it differently", "+    final String ESCAPED_ESCAPE = ESCAPE+ESCAPE;", "+    tok.addKeyword(ESCAPED_ESCAPE); // escaped escape", "-                   n.equals(ESCAPED_COLON_SEPARATOR)) {", "-            // escaped characters", "-            sb.append(n);", "+                   n.equals(ESCAPED_COLON) ||", "+                   n.equals(ESCAPED_ESCAPE)) {", "+            // escaped characters, append the string after the ESCAPE character", "+            sb.append(n.substring(ESCAPE.length()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d593df1191ad5cf484ed65aa01b9192", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static List<List<List<String>>> commandLineToLists(String cmdline)", "signatureAfterChange": "   public static List<List<List<String>>> commandLineToLists(String cmdline)", "diff": ["-    final String ESCAPED_SPACE = new Character((char)0x1B).toString()+\" \";", "+    final String ESCAPE = String.valueOf((char)0x1B);", "+    final String ESCAPED_SPACE = ESCAPE+\" \";", "+    // also add escaped path separator (';' or ':') as keyword, but treat it differently", "+    final String ESCAPED_PATH_SEPARATOR = ESCAPE+java.io.File.pathSeparator;", "+    tok.addKeyword(ESCAPED_PATH_SEPARATOR); // escaped path separator", "+    // also add escaped process separator (':' or ';') as keyword, but treat it differently", "+    final String ESCAPED_PROCESS_SEPARATOR = ESCAPE+ProcessChain.PROCESS_SEPARATOR;", "+    tok.addKeyword(ESCAPED_PROCESS_SEPARATOR); // escaped process separator", "+    // also add escaped pipe ('|') as keyword, but treat it differently", "+    final String ESCAPED_PIPE_SEPARATOR = ESCAPE+ProcessChain.PIPE_SEPARATOR;", "+    tok.addKeyword(ESCAPED_PIPE_SEPARATOR); // escaped pipe", "-          else if (n.equals(ESCAPED_SPACE)) {", "-            // escaped whitespace", "-            sb.append(ESCAPED_SPACE);", "+          else if (n.equals(ESCAPED_SPACE) ||", "+                   n.equals(ESCAPED_PATH_SEPARATOR) ||", "+                   n.equals(ESCAPED_PROCESS_SEPARATOR) ||", "+                   n.equals(ESCAPED_PIPE_SEPARATOR)) {", "+            // escaped characters", "+            sb.append(n);"]}], "num": 6505}
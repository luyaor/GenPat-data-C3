{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26450de2e4827520afc94867ec0a7dab", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f903398eb5bd0a312450a490a79920", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/sexp/TokensTest.java", "commitBeforeChange": "f4bc3bcffd0605705e0a0b1481ab0a56ae21344e", "commitAfterChange": "62a60c4b746d2a0603d2c223e7e3b1d46d413a58", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testEquals()", "signatureAfterChange": "      public void testEquals()", "diff": ["-    assertEquals(\"\\\\ token equals test\", BackSlashToken.ONLY, BackSlashToken.ONLY);", "-    assertFalse(\"\\\\ token not equals test\", BackSlashToken.ONLY.equals(new SExpToken(\"\\\\\")));", "+    assertEquals(\"\\\\ token equals test\", Tokens.BackSlashToken.ONLY, Tokens.BackSlashToken.ONLY);", "+    assertFalse(\"\\\\ token not equals test\", Tokens.BackSlashToken.ONLY.equals(new Tokens.SExpToken(\"\\\\\")));", "-    assertEquals(\"( token equals test\", LeftParenToken.ONLY, LeftParenToken.ONLY);", "-    assertFalse(\"\\\\ token not equals test\", LeftParenToken.ONLY.equals(new SExpToken(\"(\")));", "+    assertEquals(\"( token equals test\", Tokens.LeftParenToken.ONLY, Tokens.LeftParenToken.ONLY);", "+    assertFalse(\"\\\\ token not equals test\", Tokens.LeftParenToken.ONLY.equals(new Tokens.SExpToken(\"(\")));", "-    assertEquals(\") token equals test\", RightParenToken.ONLY, RightParenToken.ONLY);", "-    assertFalse(\"\\\\ token not equals test\", RightParenToken.ONLY.equals(new SExpToken(\")\")));", "+    assertEquals(\") token equals test\", Tokens.RightParenToken.ONLY, Tokens.RightParenToken.ONLY);", "+    assertFalse(\"\\\\ token not equals test\", Tokens.RightParenToken.ONLY.equals(new Tokens.SExpToken(\")\")));", "-    assertEquals(\"FALSE token equals test\", BooleanToken.FALSE, BooleanToken.FALSE);", "-    assertFalse(\"FALSE token not equals test\", BooleanToken.FALSE.equals(new SExpToken(\"FALSE\")));", "+    assertEquals(\"FALSE token equals test\", Tokens.BooleanToken.FALSE, Tokens.BooleanToken.FALSE);", "+    assertFalse(\"FALSE token not equals test\", Tokens.BooleanToken.FALSE.equals(new Tokens.SExpToken(\"FALSE\")));", "-    assertEquals(\"TRUE token equals test\", BooleanToken.TRUE, BooleanToken.TRUE);", "-    assertFalse(\"TRUE token not equals test\", BooleanToken.TRUE.equals(new SExpToken(\"TRUE\")));", "+    assertEquals(\"TRUE token equals test\", Tokens.BooleanToken.TRUE, Tokens.BooleanToken.TRUE);", "+    assertFalse(\"TRUE token not equals test\", Tokens.BooleanToken.TRUE.equals(new Tokens.SExpToken(\"TRUE\")));", "-    assertEquals(\"WordToken equals test\", tok1, tok1);", "-    assertFalse(\"WordToken not equals test 1\", tok1.equals(tok2));", "-    assertFalse(\"WordToken not equals test 2\", tok1.equals(tok3));", "+    assertEquals(\"Tokens.WordToken equals test\", tok1, tok1);", "+    assertFalse(\"Tokens.WordToken not equals test 1\", tok1.equals(tok2));", "+    assertFalse(\"Tokens.WordToken not equals test 2\", tok1.equals(tok3));", "-    assertEquals(\"QuotedTextToken equals test\", tok2, tok2);", "-    assertFalse(\"QuotedTextToken not equals test 1\", tok2.equals(tok1));", "-    assertFalse(\"QuotedTextToken not equals test 2\", tok2.equals(tok3));", "+    assertEquals(\"Tokens.QuotedTextToken equals test\", tok2, tok2);", "+    assertFalse(\"Tokens.QuotedTextToken not equals test 1\", tok2.equals(tok1));", "+    assertFalse(\"Tokens.QuotedTextToken not equals test 2\", tok2.equals(tok3));", "-    assertEquals(\"NumberToken equals test\", tok4, tok4);", "-    assertFalse(\"NumberToken not equals test 1\", tok4.equals(tok5));", "-    assertFalse(\"NumberToken not equals test 2\", tok4.equals(tok3));", "+    assertEquals(\"Tokens.NumberToken equals test\", tok4, tok4);", "+    assertFalse(\"Tokens.NumberToken not equals test 1\", tok4.equals(tok5));", "+    assertFalse(\"Tokens.NumberToken not equals test 2\", tok4.equals(tok3));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf72fa7da1b04edc2be107ead6916bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/BidirectionalHashMapTest.java", "commitBeforeChange": "847de6f16db308c08c4f40834dd2bb712c7ddd07", "commitAfterChange": "7159df222d88dee270188fe2cbffe74bb173d159", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testPut()", "signatureAfterChange": "   public void testPut()", "diff": ["-    String dog = \"dog\";", "-    String cat = \"cat\";", "-    String mouse = \"mouse\";", "+    String one = \"1\";", "+    String two = \"2\";", "+    String three = \"3\";", "-    Vector<String> vdog = new Vector<String>();", "-    Vector<String> vcat = new Vector<String>();", "-    Vector<String> vmouse = new Vector<String>();", "+    Integer int1 = new Integer(1);", "+    Integer int2 = new Integer(2);", "+    Integer int3 = new Integer(3);", "-    vdog.add(dog);", "-    vcat.add(cat);", "-    vmouse.add(mouse);", "+    BidirectionalHashMap<String, Integer> myhash = new BidirectionalHashMap<String, Integer>();", "-    BidirectionalHashMap<String, Vector<String>> myhash = new BidirectionalHashMap<String, Vector<String>>();", "+    assertEquals(\"Expected null\", null, myhash.getValue(one));", "+    assertEquals(\"Expected null\", null, myhash.getValue(two));", "+    assertEquals(\"Expected null\", null, myhash.getValue(three));", "-    assertEquals(\"Expected null\", null, myhash.getValue(dog));", "-    assertEquals(\"Expected null\", null, myhash.getValue(cat));", "-    assertEquals(\"Expected null\", null, myhash.getValue(mouse));", "-    ", "-    assertEquals(\"Expected null\", null, myhash.getKey(vdog));", "-    assertEquals(\"Expected null\", null, myhash.getKey(vcat));", "-    assertEquals(\"Expected null\", null, myhash.getKey(vmouse));", "+    assertEquals(\"Expected null\", null, myhash.getKey(int1));", "+    assertEquals(\"Expected null\", null, myhash.getKey(int2));", "+    assertEquals(\"Expected null\", null, myhash.getKey(int3));", "-    myhash.put(dog, vdog);", "-    myhash.put(cat, vcat);", "-    myhash.put(mouse, vmouse);", "+    myhash.put(one, int1);", "+    myhash.put(two, int2);", "+    myhash.put(three, int3);", "-    assertTrue(\"Given dog, should get vdog\", myhash.getValue(dog) == vdog);", "-    assertTrue(\"Given cat, should get vcat\", myhash.getValue(cat) == vcat);", "-    assertTrue(\"Given mouse, get vmouse\", myhash.getValue(mouse) == vmouse);", "+    assertTrue(\"Given one, should get 1\", myhash.getValue(one) == int1);", "+    assertTrue(\"Given two, should get 2\", myhash.getValue(two) == int2);", "+    assertTrue(\"Given three, should get 3\", myhash.getValue(three) == int3);", "+    assertTrue(\"Given 1, should get one\", myhash.getKey(int1) == one);", "+    assertTrue(\"Given 2, should get two\", myhash.getKey(int2) == two);", "+    assertTrue(\"Given 3, should get three\", myhash.getKey(int3) == three);", "+    ", "+    Iterator<Integer> it = myhash.valuesIterator();", "+    try { ", "+      it.remove();", "+      fail(\"Removing non-existent element should generate IllegalStateException\");", "+    } catch(IllegalStateException e) {}", "+    ", "+    Integer value = it.next();", "+    String key = myhash.getKey(value);", "+    assertEquals(\"key and value should match\", value.toString(), key);", "+    it.remove();", "+    assertEquals(\"After removing key, it should not appear in map\", null, myhash.getValue(key));", "+    assertEquals(\"After removing value, it should not appear in map\", null, myhash.getKey(value));", "+    ", "+    value = it.next();", "+    key = myhash.getKey(value);", "+    assertEquals(\"key and value should match\", value.toString(), key);", "+    it.remove();", "+    assertEquals(\"After removing key, it should not appear in map\", null, myhash.getValue(key));", "+    assertEquals(\"After removing value, it should not appear in map\", null, myhash.getKey(value));", "+    ", "+    value = it.next();", "+    key = myhash.getKey(value);", "+    assertEquals(\"key and value should match\", value.toString(), key);", "+    it.remove();", "+    assertEquals(\"After removing key, it should not appear in map\", null, myhash.getValue(key));", "+    assertEquals(\"After removing value, it should not appear in map\", null, myhash.getKey(value));", "+    ", "+    /* myhash should be empty now */", "+    it = myhash.valuesIterator();", "+    assertFalse(\"Map should be empty\", it.hasNext());"]}], "num": 29341}
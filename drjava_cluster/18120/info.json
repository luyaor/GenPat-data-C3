{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "374c602e3aa39c167a4d8176ded32813", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21827a2482c19b5109876dcf09d7de72", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public Object visit(StaticMethodCall node)", "signatureAfterChange": "   public Node visit(StaticMethodCall node)", "diff": ["-  public Object visit(StaticMethodCall node) {", "+  public Node visit(StaticMethodCall node) {", "-    LinkedList arguments = null; // Add parameterization <Node>.", "+    LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-      arguments = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getArguments().iterator();", "+      arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "+      Iterator<Expression> it = node.getArguments().iterator();", "-        arguments.add((Node)((Node)it.next()).acceptVisitor(this));", "+        arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef4e1d3438971325fc29b1df33caaea4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public Object visit(StaticMethodCall node)", "signatureAfterChange": "   public Node visit(StaticMethodCall node)", "diff": ["-  public Object visit(StaticMethodCall node) {", "+  public Node visit(StaticMethodCall node) {", "-    LinkedList arguments = null; // Add parameterization <Node>.", "+    LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-      arguments = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getArguments().iterator();", "+      arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "+      Iterator<Expression> it = node.getArguments().iterator();", "-        arguments.add((Node)((Node)it.next()).acceptVisitor(this));", "+        arguments.add((Expression)it.next().acceptVisitor(this));"]}], "num": 18120}
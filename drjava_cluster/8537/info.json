{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "814d82bf5013cb2bf6dbd0404203e886", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f774741484784d6070907d8bb79373e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/HashMultiset.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public <E> E[] toArray(E[] fill)", "signatureAfterChange": "   public boolean hasFixedSize()", "diff": ["+  public boolean isInfinite() { return false; }", "+  public boolean hasFixedSize() { return false; }", "-  ", "-  public <E> E[] toArray(E[] fill) {", "-    if (fill.length < _size) { ", "-      @SuppressWarnings(\"unchecked\") E[] newFill = ", "-        (E[]) Array.newInstance(fill.getClass().getComponentType(), _size);", "-      fill = newFill;", "-    }", "-    int i = 0;", "-    for (T elt : this) {", "-      @SuppressWarnings(\"unchecked\") E asE = (E) elt;", "-      fill[i] = asE;", "-      i++;", "-    }", "-    if (i < fill.length) { fill[i] = null; i++; }", "-    return fill;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e779a936c4485e0692a904a79fe79cea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/HashRelation.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 16, "signatureBeforeChange": "      public Iterator<Pair<T1, T2>> iterator()", "signatureAfterChange": "      public Iterator<Pair<T1, T2>> iterator()", "diff": ["-  ", "-  public Iterator<Pair<T1, T2>> iterator() {", "-    return new Iterator<Pair<T1, T2>>() {", "-      private final Iterator<Pair<T1, T2>> _iter = _pairs.iterator();", "-      private Pair<T1, T2> _last;", "-      public boolean hasNext() { return _iter.hasNext(); }", "-      public Pair<T1, T2> next() { _last = _iter.next(); return _last; }", "-      public void remove() {", "-        _iter.remove(); // if this succeeds, _last is valid", "-        removeFromIndex(_last.first(), _last.second());", "-      }", "-  }", "+  ", "+  public Iterator<Pair<T1, T2>> iterator() { return _firstIndex.iterator(); }"]}], "num": 8537}
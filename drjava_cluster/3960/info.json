{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "751c05f229c1857205eb0bb2e772f7af", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0270957c2f1a9df81730d2c355d7204d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "commitAfterChange": "22cb21cbc806aa257284ccfb5bed593a93cc9671", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["+      int start, len;", "+      String findWord = this._findWord;", "-      String findSpace = _doc.getText(_current.getOffset(), ", "-                                      _doc.getLength()-_current.getOffset());", "-      // find the first occurrence of _findWord", "+      String findSpace;", "+      if(!_searchBackwards){", "+        start = _current.getOffset();", "+        len = _doc.getLength() - start;", "+      } else {", "+        start = 0;", "+        len = _current.getOffset();", "+      }", "+      findSpace = _doc.getText(start, len);", "+      if (!_matchCase){", "+        findSpace = findSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+", "+      // find the first occurrence of findWord", "-      if (_matchCase) ", "-        foundOffset = findSpace.indexOf(_findWord);", "-      else", "-        foundOffset = findSpace.toLowerCase().indexOf(_findWord.toLowerCase());", "+      foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                                      : findSpace.lastIndexOf(findWord);", "-        foundOffset += _current.getOffset() + _findWord.length();", "+        foundOffset += start;", "+        if (!_searchBackwards){", "+           foundOffset += findWord.length();", "+        }", "-      }", "-      else {", "+      } else {", "-        findSpace = _doc.getText(0, _start.getOffset());", "-        if (_matchCase) ", "-          foundOffset = findSpace.indexOf(_findWord);", "-        else", "-          foundOffset = findSpace.toLowerCase().indexOf(_findWord.toLowerCase());", "+        //When we wrap, we need to include some text that was already searched before wrapping.", "+        //Otherwise, we won't find an only match that has the caret in it already.", "+        if(!_searchBackwards){", "+          start = 0;", "+          len = _start.getOffset() + (_findWord.length() - 1);", "+          if(len > _doc.getLength()){", "+            len = _doc.getLength();", "+          }", "+        } else {", "+          start = _start.getOffset() - (_findWord.length() - 1);", "+          if (start < 0){", "+            start = 0;", "+          }", "+          len = _doc.getLength() - start;", "+        }", "+        findSpace = _doc.getText(start, len);", "+", "+        if (!_matchCase) {", "+          findSpace = findSpace.toLowerCase();", "+        }", "+", "+        foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                                        : findSpace.lastIndexOf(findWord);", "+", "-          foundOffset += _findWord.length();", "+          foundOffset += start;", "+          if (!_searchBackwards) {", "+            foundOffset += findWord.length();", "+          }", "-      // flag the return value so that they can tell that we had to wrap ", "+      // flag the return value so that they can tell that we had to wrap", "-    ", "+", "+      //This means we have found the word before, just not in this call", "-      } ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39feea6dc4d2006f82916656e8222547", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "20a2512e394be5865ddd8dc1ebd648c5dfb08d0c", "commitAfterChange": "832e5dfbee9301c0432d02f86eab2d13af7f51bc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["+      FindResult tempFr = new FindResult(_doc, -1, false);", "+      // If the user just found and toggled the \"Search Backwards\"", "+      // option, we should skip the first find.", "-        _wrapped = true;", "-        //When we wrap, we need to include some text that was already searched before wrapping.", "-        //Otherwise, we won't find an only match that has the caret in it already.", "-        if(!_searchBackwards){", "-          start = 0;", "-          len = _start.getOffset() + (_findWord.length() - 1);", "-          if(len > _doc.getLength()){", "-            len = _doc.getLength();", "-          }", "-        } else {", "-          start = _start.getOffset() - (_findWord.length() - 1);", "-          if (start < 0){", "+        if (_searchAllDocuments) {", "+          tempFr = _findNextInAllDocs(!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "+                                        _docIterator.getPrevDocument(_doc));", "+          foundOffset = tempFr.getFoundOffset();", "+        }", "+        // we still haven't found it", "+        if (foundOffset == -1) {", "+          _wrapped = true;", "+          //When we wrap, we need to include some text that was already searched before wrapping.", "+          //Otherwise, we won't find an only match that has the caret in it already.", "+          if(!_searchBackwards){", "+            len = _current.getOffset() + (_findWord.length() - 1);", "+            if(len > _doc.getLength()){", "+              len = _doc.getLength();", "+            }", "+          } ", "+          else {", "+            start = _current.getOffset() - (_findWord.length() - 1);", "+            if (start < 0){", "+              start = 0;", "+            }", "+            len = _doc.getLength() - start;", "-          len = _doc.getLength() - start;", "-        }", "-        findSpace = _doc.getText(start, len);", "-", "-        if (!_matchCase) {", "-          findSpace = findSpace.toLowerCase();", "-        }", "-", "-        foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-          : findSpace.lastIndexOf(findWord);", "-", "-        if (foundOffset >= 0) {", "-          foundOffset += start;", "-          if (!_searchBackwards) {", "-            foundOffset += findWord.length();", "+          findSpace = _doc.getText(start, len);", "+          ", "+          if (!_matchCase) {", "+            findSpace = findSpace.toLowerCase();", "-          _current = _doc.createPosition(foundOffset);", "+          foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+            : findSpace.lastIndexOf(findWord);", "+          ", "+          if (foundOffset >= 0) {", "+            foundOffset += start;", "+            if (!_searchBackwards) {", "+              foundOffset += findWord.length();", "+            }", "+            _current = _doc.createPosition(foundOffset);", "+          }", "-      if(foundOffset == -1 && _found) {", "-        _current = _start;", "-        _found = false;", "-        return findNext();", "-      }", "-      else {", "-        FindResult fr = new FindResult(foundOffset, _wrapped);", "-        _wrapped = false;", "-        return fr;", "-      }", "+//      if(foundOffset == -1 && _found) {", "+//        _current = _start;", "+//        _found = false;", "+//        return findNext();", "+//      }", "+//      else {", "+      FindResult fr = new FindResult(tempFr.getDocument(), foundOffset, _wrapped);", "+      _wrapped = false;", "+      return fr;", "+//      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c28e32e66050f3caf0d8d7fbd853056", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "a2b28a9213fa3cc634db7fda88e14ebb0a103974", "commitAfterChange": "56df485f00337d373f1f0b94fc58f7c7b8b714d4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "     public FindResult findNext()", "diff": ["-   */", "-  public FindResult findNext() {", "-    try {", "-      FindResult tempFr = new FindResult(_doc, -1, false);", "-      // If the user just found and toggled the \"Search Backwards\"", "-      // option, we should skip the first find.", "-      if (_skipOneFind) {", "-        int wordLength = _lastFindWord.length();", "-        if (!_searchBackwards) {", "-          setPosition(getCurrentOffset() + wordLength);", "-        }", "-        else {", "-          setPosition(getCurrentOffset() - wordLength);", "-        }", "-        positionChanged();", "-      }", "-      int start, len;", "-      String findWord = this._findWord;", "-      // get the search space in the document", "-      String findSpace;", "-      if(!_searchBackwards){", "-        start = _current.getOffset();", "-        len = _doc.getLength() - start;", "-      } else {", "-        start = 0;", "-        len = _current.getOffset();", "-      }", "-      findSpace = _doc.getText(start, len);", "-      if (!_matchCase){", "-        findSpace = findSpace.toLowerCase();", "-        findWord = findWord.toLowerCase();", "-      }", "-", "-      // find the first occurrence of findWord", "-      int foundOffset;", "-      foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-                                      : findSpace.lastIndexOf(findWord);", "-      // if we've found it", "-      if (foundOffset >= 0) {", "-        _found = true;", "-        foundOffset += start;", "-        if (!_searchBackwards){", "-           foundOffset += findWord.length();", "-        }", "-        _current = _doc.createPosition(foundOffset);", "-      }", "-      else {", "-        // if we haven't found it", "-        if (_searchAllDocuments) {", "-          tempFr = _findNextInAllDocs(!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "-                                        _docIterator.getPrevDocument(_doc));", "-          foundOffset = tempFr.getFoundOffset();", "-        }", "-        // we still haven't found it", "-        if (foundOffset == -1) {", "-          _wrapped = true;", "-          //When we wrap, we need to include some text that was already searched before wrapping.", "-          //Otherwise, we won't find an only match that has the caret in it already.", "-          if(!_searchBackwards){", "-            start = 0;", "-            len = _current.getOffset() + (_findWord.length() - 1);", "-            if(len > _doc.getLength()){", "-              len = _doc.getLength();", "-            }", "-          } ", "-          else {", "-            start = _current.getOffset() - (_findWord.length() - 1);", "-            if (start < 0){", "-              start = 0;", "-            }", "-            len = _doc.getLength() - start;", "-          }", "-          findSpace = _doc.getText(start, len);", "-          ", "-          if (!_matchCase) {", "-            findSpace = findSpace.toLowerCase();", "-          }", "-          foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-            : findSpace.lastIndexOf(findWord);", "-          ", "-          if (foundOffset >= 0) {", "-            foundOffset += start;", "-            if (!_searchBackwards) {", "-              foundOffset += findWord.length();", "-            }", "-            _current = _doc.createPosition(foundOffset);", "-          }", "-        }", "-      }", "-      // flag the return value so that they can tell that we had to wrap", "-      // the file to determine the info.", "-", "-      //This means we have found the word before, just not in this call", "-//      if(foundOffset == -1 && _found) {", "-//        _current = _start;", "-//        _found = false;", "-//        return findNext();", "-//      }", "-//      else {", "-      FindResult fr = new FindResult(tempFr.getDocument(), foundOffset, _wrapped);", "-      _wrapped = false;", "-      return fr;", "-//      }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-  }", "+    */", "+    public FindResult findNext() {", "+        return _state.findNext();", "+    }"]}], "num": 3960}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "feaa54fe205e73d7adda1eacdb59be95", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e8d444e4ec77357dc3705ba66aee980", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "7bb9a22e4cbbae8f1b760058a6f336d0a39bb871", "commitAfterChange": "14e7dcc7e0d6b6b7a5f38bdc40af083f2a31ac1c", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-    List args = new LinkedList();", "+    ", "+    int tries = 0;", "+    StringReference sr = null;", "-    StringReference sr = _vm.mirrorOf(varName);", "-    sr.disableCollection();", "-    args.add(sr);", "-    try {", "-      v = interpreter.invokeMethod(thread, method2Call, args,", "-                                   ObjectReference.INVOKE_SINGLE_THREADED);", "-      if (v != null) {", "-        v = _convertToActualType(thread, var, v);", "+    while (tries < OBJECT_COLLECTED_TRIES) {", "+      try {", "+        List args = new LinkedList();", "+        sr = _vm.mirrorOf(varName);", "+        sr.disableCollection();", "+        args.add(sr);", "+        v = interpreter.invokeMethod(thread, method2Call, args,", "+                                     ObjectReference.INVOKE_SINGLE_THREADED);", "+        if (v != null) {", "+          v = _convertToActualType(thread, var, v);", "+        }", "+        ", "+        return v;", "-", "-      return v;", "+      catch (ObjectCollectedException oce) {", "+        tries++;", "+      }", "+      finally {", "+        sr.enableCollection();", "+      }", "-    catch (ObjectCollectedException oce) {", "-      throw new DebugException(\"The value of variable: \" + varName +", "-                               \" could not be obtained from the debug interpreter\");", "-    }", "-    finally {", "-      sr.enableCollection();", "-    }", "+    throw new DebugException(\"The value of variable: \" + varName +", "+                             \" could not be obtained from the debug interpreter\");", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8677f8ef5748f39b293f3aedd0ed88d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "81f7bc68ef7285bacd5689ea0a54ea5647d9a1d8", "commitAfterChange": "12384109e03448701c98d404f37be617f6e32fee", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "      private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "      private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-    // invokeMethod could execute. This happened infrequently so by trying this", "-    // multiple times, the chance of failure each time should be acceptably low.", "-    int tries = 0;", "-    while (tries < MAXINVOKETRIES) {", "-      try {", "-        List args = new LinkedList();", "-        args.add(_vm.mirrorOf(var.name()));", "-        v = interpreter.invokeMethod(thread, method2Call, args,", "-                                           ObjectReference.INVOKE_SINGLE_THREADED);", "-        break;", "+    // invokeMethod could execute. We now just disable collection until after the", "+    // method is invoked.", "+    List args = new LinkedList();", "+    String varName = var.name();", "+    StringReference sr = _vm.mirrorOf(varName);", "+    sr.disableCollection();", "+    args.add(sr);", "+    try {", "+      v = interpreter.invokeMethod(thread, method2Call, args,", "+                                   ObjectReference.INVOKE_SINGLE_THREADED);", "+      if (v != null) {", "+        v = _convertToActualType(thread, var, v);", "-      catch (ObjectCollectedException oce) {", "-        if (printMessages) System.out.println(\"Got ObjectCollectedException\");", "-        tries++;      ", "-      }", "+      ", "+      return v;", "-    if (v != null) {", "-      v = _convertToActualType(thread, var, v);", "+    catch (ObjectCollectedException oce) {", "+      throw new DebugException(\"The value of variable: \" + varName +", "+                               \" could not be obtained from the debug interpreter\");", "-", "-    return v;", "+    finally {", "+      sr.enableCollection();", "+    }"]}], "num": 10244}
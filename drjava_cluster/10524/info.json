{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da21366ec3635d5f353038128f2e2d54", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13f6d9a60c764537ed94298736663df9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "99e17181157667354a79af5fff7558664559fae9", "commitAfterChange": "0f014669daf60c46746e3e582159e95f94a3d43c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public TypeChecker makeTypeChecker(Context context)", "signatureAfterChange": "   public TypeChecker makeTypeChecker(final Context context)", "diff": ["-  public TypeChecker makeTypeChecker(Context context) {", "+  public TypeChecker makeTypeChecker(final Context context) {", "+      /*", "-        return visit(_convertThisToName(node));", "+        Expression e = visitThis(node);", "+        if (e instanceof QualifiedName) {", "+          return visit((QualifiedName)e);", "+        }", "+        else if (e instanceof ObjectFieldAccess) {", "+          return visit((ObjectFieldAccess)e);", "+        }", "+        else {", "+          throw new UnexpectedException(new IllegalArgumentException(\"Illegal type of Expression\"));", "+        }", "+      }*/", "+      /**", "+       * Visits a QualifiedName, returning our class if it is \"this\"", "+       * @param node the node to visit", "+       */", "+      public Object visit(QualifiedName node) {", "+        String var = node.getRepresentation();", "+        if (\"this\".equals(var)) {", "+          try {", "+            String cName = _thisClassName.replace('$', '.');", "+            if (!_thisPackageName.equals(\"\")) {", "+              cName = _thisPackageName + \".\" + cName;", "+            }", "+            Class c = context.lookupClass(cName);", "+            node.setProperty(NodeProperties.TYPE, c);", "+            node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "+            return c;", "+          }", "+          catch (ClassNotFoundException cnfe) {", "+            throw new ExecutionError(\"undefined.class\", node);", "+          }", "+        }", "+        else return super.visit(node);", "-    };", "-  }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f17982ede6aea4410de8458315692cec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "df1e36f71885ed44596fe30b7349f6c2af6222fa", "commitAfterChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public TypeChecker makeTypeChecker(final Context context)", "signatureAfterChange": "   public AbstractTypeChecker makeTypeChecker(final Context context)", "diff": ["-  public TypeChecker makeTypeChecker(final Context context) {", "-    return new TypeChecker(context) {", "+  public AbstractTypeChecker makeTypeChecker(final Context context) {", "+    if (Float.valueOf(System.getProperty(\"java.specification.version\")) < 1.5) { ", "+      return new TypeChecker14(context) {", "-    };", "+      };", "+    }", "+    else {", "+      return new TypeChecker15(context) {", "+        /**", "+       * Visits a QualifiedName, returning our class if it is \"this\"", "+       * @param node the node to visit", "+       */", "+      public Class visit(QualifiedName node) {", "+        String var = node.getRepresentation();", "+        if (\"this\".equals(var)) {", "+          //            String cName = _thisClassName.replace('$', '.');", "+          //            if (!_thisPackageName.equals(\"\")) {", "+          //              cName = _thisPackageName + \".\" + cName;", "+          //            }", "+          //            Class c = context.lookupClass(cName);", "+          Class c = _loadClassForThis(context);", "+          node.setProperty(NodeProperties.TYPE, c);", "+          node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "+          return c;", "+        }", "+        else return super.visit(node);", "+      }", "+", "+      };", "+    }"]}], "num": 10524}
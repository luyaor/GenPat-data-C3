{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b57e2a9e0104da48414ae82adb6fe7c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18451aa22b365f3e9c89311ea2eb1b5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/TigerTest.java", "commitBeforeChange": "dbdd53c636f6618ffbae999ad0ee607bc3e2b6a3", "commitAfterChange": "689d9f23e5437e0982e3819c2bbd111dd456dac2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testStaticImportOfMethods()", "signatureAfterChange": "   public void testStaticImportOfMethods()", "diff": ["+    ", "+    testString = ", "+      \"package NN;\\n\"+", "+      \"import static java.lang.Math.abs;\\n\"+", "+      \"public abstract class OO {\\n\"+", "+      \"  public int abs(int i) { return i; }\\n\"+", "+      \"}\\n\"+", "+      \"public class PP extends OO {\\n\"+", "+      \"  public static int m() {\\n\"+", "+      \"    return abs(-2);\\n\"+", "+      \"  }\\n\"+", "+      \"}\\n\"+", "+      \"PP.m();\";", "+    try {", "+      interpret(testString);", "+      fail(\"Static method cannot reference non-static members of super class\");", "+    } catch(Error e) {", "+      //Expected to fail", "+    }", "+    ", "+    ", "+    testString = ", "+      \"package QQ;\\n\"+", "+      \"import static java.lang.Math.abs;\\n\"+", "+      \"public abstract class RR {\\n\"+", "+      \"  public static int abs(int i) { return i; }\\n\"+", "+      \"}\\n\"+", "+      \"public class SS extends RR {\\n\"+", "+      \"  public static int m() {\\n\"+", "+      \"    return abs(-2);\\n\"+", "+      \"  }\\n\"+", "+      \"}\\n\"+", "+      \"SS.m();\";", "+    assertEquals(\"Super class method should take precedence over staticly imported member\",-2,interpret(testString));", "+      ", "+    ", "+    //Tests that a non-static method cannot be imported", "+    testString =", "+      \"package TT;\\n\"+", "+      \"public class UU {\\n\"+", "+      \"  public int m1() { return 5;}\\n\"+", "+      \"}\\n\"+", "+      \"package VV;\\n\"+", "+      \"import static TT.UU.*;\\n\"+", "+      \"public class WW {\\n\"+", "+      \"  public int m2() { return m1(); } \\n\"+", "+      \"}\\n\"+", "+      \"WW ww = new WW(); ww.m2();\";", "+    try {", "+      assertEquals(5,interpret(testString));", "+      fail(\"Non static member should not be imported\");", "+    } ", "+    catch(InterpreterException e) {", "+      //Expected to fail", "+    }", "+    ", "+    //Tests that a non-static method cannot be imported", "+    testString =", "+      \"package XX;\\n\"+", "+      \"public class YY {\\n\"+", "+      \"  public int m() { return 5;}\\n\"+", "+      \"}\\n\"+", "+      \"package ZZ;\\n\"+", "+      \"import static XX.YY.m;\\n\";", "+    try {", "+      interpret(testString);", "+      fail(\"Non static member should not be imported\");", "+    } ", "+    catch(RuntimeException e) {", "+      //Expected to fail", "+    }", "+  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a17e5725d246468f2af7eddbdbb989cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "signatureAfterChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "diff": ["+    ", "+    text = \"Arrays.asList(1,2,3,4)\";", "+    res = interpret(text);", "+    assertTrue(\"res should be an instance of a List\", res instanceof java.util.List);", "+    assertEquals(\"size should be 4\", 4, ((java.util.List)res).size());", "+    assertEquals(\"last element should be 4\", new Integer(4), ((java.util.List)res).get(3));", "+    ", "+    text = ", "+      \"class ClassD { \" +", "+      \"  public String m(String ... args) { \" +", "+      \"    String ret = \\\"\\\"; \" +", "+      \"    for(String s : args) ret += s; \" +", "+      \"    return ret; \" + ", "+      \"  }\" +", "+      \"}\\n\" +", "+      \"new ClassD().m(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\");\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong output.\", \"abcd\", res);", "+", "+    text = ", "+      \"public class ClassE { \" +", "+      \"  public class Inner { \" +", "+      \"    public String m(String ... args) { \" +", "+      \"      String ret = \\\"\\\"; \" +", "+      \"      for(String s : args) ret += s; \" +", "+      \"      return ret; \" + ", "+      \"    }\" +", "+      \"  }\" +", "+      \"}\\n\" +", "+      \"(new ClassE()).new Inner().m(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\");\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong output.\", \"abcd\", res);", "+    ", "+    text = ", "+      \"public class ClassF { \" +", "+      \"  public ClassF(String ... args) { \" +", "+      \"    for (String s : args) \" +", "+      \"      System.out.println(s);\" +", "+      \"  } \" + ", "+      \"  public String m(String ... args) { \" +", "+      \"    String ret = \\\"\\\"; \" +", "+      \"    for(String s : args) ret += s; \" +", "+      \"    return ret; \" + ", "+      \"  }\" +", "+      \"}\\n\" +", "+      \"new ClassF(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\").m(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\")\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong output.\", \"abcd\", res);", "+    ", "+    text =", "+      \"public class ClassG {\\n\"+", "+      \"  public class Inner {\\n\"+", "+      \"    String str = \\\"\\\";\\n\"+", "+      \"    public Inner(String ... args){\\n\"+", "+      \"      for(String  s: args) {\\n\"+", "+      \"        str = str+s;\\n\"+", "+      \"      }\\n\"+", "+      \"    }\\n\"+", "+      \"    public String getStr(){\\n\"+", "+      \"      return str;\\n\"+", "+      \"    }\\n\"+", "+      \"  }\\n\"+", "+      \"}\\n\"+", "+      \"(new ClassG()).new Inner(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\").getStr();\\n\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong Output.\", \"abcd\", res);", "+    ", "+    text =", "+      \"public class B {\\n\"+", "+      \"  public class C {\\n\"+", "+      \"    String str = \\\"\\\";\\n\"+", "+      \"    public C(String ... args){\\n\"+", "+      \"      for(String  s: args) {\\n\"+", "+      \"        str = str+s;\\n\"+", "+      \"      }\\n\"+", "+//      \"      for(int i=0;i<s.length;i++) {\\n\"+", "+//      \"        str = str+s[i];\\n\"+", "+//      \"      }\\n\"+", "+      \"    }\\n\"+", "+      \"    public String getStr(){\\n\"+", "+      \"      return str;\\n\"+", "+      \"    }\\n\"+", "+      \"  }\\n\"+", "+      \"}\\n\"+", "+      \"(new B()).new C(\\\"Str1\\\",\\\"Str2\\\",\\\"Str3\\\",\\\"Str4\\\").getStr();\\n\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong Output.\", \"Str1Str2Str3Str4\", res);"]}], "num": 10174}
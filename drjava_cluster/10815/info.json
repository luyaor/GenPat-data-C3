{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30dc4321c7c16152c76aca07d9313a54", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9da0089232db59cff246112e17f35e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["-      List<StackFrame> frames = null;", "+      List frames = null;", "-      frames = thread.frames(); // JDK 1.5 will eliminate this warning", "-      currFrame = frames.get(0);", "+      frames = thread.frames();", "+      currFrame = (StackFrame) frames.get(0);", "-            List<Field> fields = outerRt.allFields();  // This type warning will go away in JDK 1.5", "-            Iterator<Field> iter = fields.iterator();", "+            List fields = outerRt.allFields();", "+            Iterator iter = fields.iterator();", "-              Field f = iter.next();", "+              Field f = (Field)iter.next();", "-            List<ReferenceType> l = _vm.classesByName(rtClassName); // JDK 1.5 will eliminate this warning", "+            List l = _vm.classesByName(rtClassName);", "-            outerRt = l.get(0);", "+            outerRt = (ReferenceType)l.get(0);", "-            List<Type> classes = _vm.classesByName(field.typeName());  // JDK 1.5 will eliminate this warning", "+            List classes = _vm.classesByName(field.typeName());", "-              currWatch.setType(classes.get(0).name());", "+              currWatch.setType(((Type)classes.get(0)).name());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da5c8bec6bc0dde5a689fff2869f6f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public Node visit(TryStatement node)", "signatureAfterChange": "   public Object visit(TryStatement node)", "diff": ["-  public Node visit(TryStatement node) {", "-    Node tryBlock = node.getTryBlock().acceptVisitor(this);", "-    LinkedList<Node> catchStatements = new LinkedList<Node>(); // Add parameterization <Node>.", "-    Iterator<Node> it = node.getCatchStatements().iterator();", "+  public Object visit(TryStatement node) {", "+    Node tryBlock = (Node)node.getTryBlock().acceptVisitor(this);", "+    LinkedList catchStatements = new LinkedList(); // Add parameterization <Node>.", "+    Iterator it = node.getCatchStatements().iterator();", "-      catchStatements.add(it.next().acceptVisitor(this));", "+      catchStatements.add((Node)((Node)it.next()).acceptVisitor(this));", "-      finallyBlock = node.getFinallyBlock().acceptVisitor(this);", "+      finallyBlock = (Node)node.getFinallyBlock().acceptVisitor(this);"]}], "num": 10815}
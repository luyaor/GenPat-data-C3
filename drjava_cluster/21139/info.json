{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "125c05229850d99d6a3becdb62729d79", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79332d99299275b11fcf112db078a043", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachineTest.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public void testFindReplaceInAllOpenFiles() throws BadLocationException", "signatureAfterChange": "   public void testFindReplaceInAllOpenFiles() throws BadLocationException", "diff": ["-   */", "+  /** This test addresses feature request #784514 Find/Replace in all Open Files. */", "+//    System.err.println(\"First sequence of global search tests complete\");", "+//    System.err.println(\"_lastFindWord set to \" + _frm.getFindWord());", "-    _frm.replaceAll();", "+    try { _frm.replaceAll(); }", "+    catch(Throwable e) { fail(\"Threw exception \" + e); }", "+//    System.err.println(\"testFindReplaceInAllOpenFiles completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab4e232d93baafc04e83c7efa8bda7db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fb8ddcbfd71bd75d2b307b4e83f7a834ec364082", "commitAfterChange": "be84679bc73e85f88d6958fbfdf8b35be73855ab", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "   synchronized void currThreadSuspended()", "signatureAfterChange": "   synchronized void currThreadSuspended()", "diff": ["+      try {", "-      _dumpVariablesIntoInterpreterAndSwitch();", "+        _dumpVariablesIntoInterpreterAndSwitch();", "+      }", "+      catch(AbsentInformationException aie){", "+        // an AbsentInformationException can be thrown if the user does not", "+        // compile the classes to be debugged with the -g flag", "+        printMessage(\"No debug information available for this class.\\nMake sure to compile classes to be debugged with the -g flag.\");", "+      }          ", "-    catch(DebugException ex){", "-      throw new UnexpectedException(ex);", "-    }    ", "+    catch(DebugException de) {", "+      throw new UnexpectedException(de);", "+    }"]}], "num": 21139}
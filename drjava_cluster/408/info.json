{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a014ee435be267a6b17c773d8afe439", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b9328b510f289538de54241f2bd368", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "signatureAfterChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "diff": ["-   */", "+  /** Tests that undoing/redoing a multi-line comment/uncomment will restore the caret position */", "-    DefinitionsPane pane = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "-    String text =", "+    ", "+    final DefinitionsPane pane = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "+    final String text =", "-    int newPos = 20;", "+    final int newPos = 20;", "-    doc.insertString(0, text, null);", "-    assertEquals(\"insertion\",text, doc.getText());", "+    // The following statement hung when run in the main test thread.  There must be a pending access to doc in a", "+    // task on the event queue that sometimes has not yet executed.", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { doc.append(text, null); } });", "+    ", "+    assertEquals(\"insertion\", text, doc.getText());", "-    pane.endCompoundEdit();", "-    doc.commentLines(0,doc.getLength());", "+", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "+     ", "+    doc.acquireWriteLock();", "+    try { doc.commentLines(0, doc.getLength()); }", "+    finally { doc.releaseWriteLock(); }", "+    ", "-    assertEquals(\"commenting\",commented, doc.getText());", "+    assertEquals(\"commenting\", commented, doc.getText());", "+    ", "-    pane.setCaretPosition(newPos);", "-    doc.getUndoManager().undo();", "-    assertEquals(\"undo commenting\",text, doc.getText(0,doc.getLength()));", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "+    ", "+    doc.getUndoManager().undo();  ", "+    assertEquals(\"undo commenting\", text, doc.getText());", "-    pane.setCaretPosition(newPos);", "+    ", "+    // Perturb the caret position and redo", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    assertEquals(\"redo commenting\",commented, doc.getText(0,doc.getLength()));", "+    assertEquals(\"redo commenting\", commented, doc.getText());", "-    pane.endCompoundEdit();    ", "-    doc.uncommentLines(0,doc.getLength());", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "+    ", "+    doc.acquireWriteLock();", "+    try { doc.uncommentLines(0, doc.getLength()); }", "+    finally { doc.releaseWriteLock(); }", "+    ", "-    assertEquals(\"uncommenting\",text, doc.getText(0,doc.getLength()));", "-    oldPos = pane.getCaretPosition();", "-    pane.setCaretPosition(newPos);", "+    assertEquals(\"uncommenting\", text, doc.getText());", "+    ", "+    oldPos = pane.getCaretPosition();  // executing this method call outside of the event thread is borderline", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos);  } });", "-    assertEquals(\"undo uncommenting\",commented, doc.getText(0,doc.getLength()));", "+    ", "+    assertEquals(\"undo uncommenting\", commented, doc.getText());", "-    pane.setCaretPosition(newPos);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    assertEquals(\"redo uncommenting\",text, doc.getText(0,doc.getLength()));", "+    assertEquals(\"redo uncommenting\",text, doc.getText());", "+    ", "+    _log.log(\"testMultiLineCommentOrUncommentAfterScroll completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afc5bffcd9c65922cdd5a9fbc98be456", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "14370880ba431a91577f4a6da91962f3187c5d5d", "commitAfterChange": "5d8a3bdb2b4d5525535575f357c7961c2851e09a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void xtestBookmark() throws Exception", "signatureAfterChange": "      public void testBookmark() throws Exception", "diff": ["-  public void xtestBookmark() throws Exception {", "+  public void testBookmark() throws Exception {", "-    _model.toggleBookmark(3,3);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.toggleBookmark(3,3); } });", "-    _model.toggleBookmark(3,3);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.toggleBookmark(3,3); } });", "-    _model.toggleBookmark(3,6);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.toggleBookmark(3,6); } });", "-    _model.toggleBookmark(12,8);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.toggleBookmark(12,8); } });", "-    _model.toggleBookmark(5,10);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.toggleBookmark(5,10); } });", "-    _model.toggleBookmark(8,12);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.toggleBookmark(8,12); } });", "-    _model.toggleBookmark(3,6);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.toggleBookmark(3,6); } });", "-    _model.toggleBookmark(10,5);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.toggleBookmark(10,5); } });"]}], "num": 408}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aee4ba9ec97c914dd5ca946501e0d97e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51c21e20b61c4e922715e8c80a147af8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "a6c0afbadc103bc26f8a5c30f4735e1c0d62a541", "commitAfterChange": "f77d59d2a07360ad309276a41936f8bee75e9ad9", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   final public ConstructorInvocation explicitConstructorInvocation() throws ParseException", "signatureAfterChange": "   final public ConstructorInvocation explicitConstructorInvocation() throws ParseException", "diff": ["+    List<Type> typeArgs = new LinkedList<Type>();", "-      if (jj_2_24(2147483647)) {", "+      if (jj_2_25(2147483647)) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LESS:", "+          typeArgs = TypeArguments();", "+          break;", "+        default:", "+          jj_la1[41] = jj_gen;", "+          ;", "+        }", "-        args = arguments();", "+        args = arguments(typeArgs);", "+        case LESS:", "+          if (jj_2_24(2147483647)) {", "+            typeArgs = TypeArguments();", "+          } else {", "+            ;", "+          }", "-          args = arguments();", "+          args = arguments(typeArgs);", "-          jj_la1[41] = jj_gen;", "+          jj_la1[42] = jj_gen;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a68dd01158fee0c1a1bbd9ca980c2062", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "38c5f71d4cacb939b5f81114fa6e5e26d271c57b", "commitAfterChange": "9b6f07f2b132c681f98fe8fb44100b84e5395f40", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": "    final public TypeParameter TypeParameter() throws ParseException", "signatureAfterChange": "    final public TypeParameter TypeParameter() throws ParseException", "diff": ["+    List<ReferenceType> interfaceBoundsList = new LinkedList<ReferenceType>();", "+    ReferenceType interf;", "+      label_71:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BITWISE_AND:", "+          ;", "+          break;", "+        default:", "+          jj_la1[201] = jj_gen;", "+          break label_71;", "+        }", "+        jj_consume_token(BITWISE_AND);", "+        interf = ReferenceTypeName();", "+             interfaceBoundsList.add(interf);", "+      }", "-      jj_la1[201] = jj_gen;", "+      jj_la1[202] = jj_gen;", "-        {if (true) return new TypeParameter(_loc(first), name, (ReferenceType)bound);}", "+        {if (true) return new TypeParameter(_loc(first), name, (ReferenceType)bound, interfaceBoundsList);}"]}], "num": 28755}
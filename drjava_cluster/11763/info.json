{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2b92f1cbcbb052dbb3b76d69602d690", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "302f28319529d3bc2e71ed968e88147f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testSuccessful()", "signatureAfterChange": "   public void testSuccessful()", "diff": ["-   */", "+  /** Try some example files and make sure they can be converted without errors and that the resulting conversions are correct. */", "-    File[] testFiles = directory.listFiles(new FileFilter() {", "-      public boolean accept(File pathName) {", "-        return pathName.getAbsolutePath().endsWith(\".dj2\");", "-      }", "-    });", "-    ", "-    ", "+", "+    _log.log(\"Running testSuccessful\");", "+    File[] files1 = dir1.listFiles(dj2Filter);", "+    File[] files2 = dir2.listFiles(dj2Filter);", "+    File[] files3 = dir3.listFiles(dj2Filter);", "+", "+    // testFiles = files1 || files2 || files3; this computation is ugly in Java because Java has no functional lists", "+    int len1 = files1.length;", "+    int len2 = files2.length;", "+    int len3 = files3.length;", "+    File[] testFiles = new File[len1 + len2 + len3];", "+    for (int i = 0; i < len1; i++) { testFiles[i] = files1[i]; }", "+    for (int i = 0; i < len2; i++) { testFiles[len1 + i] = files2[i]; }", "+    for (int i = 0; i < len3; i++) { testFiles[len1 + len2 + i] = files3[i]; }", "+        ", "+    ", "+    System.err.println(\"testFiles = \" + Arrays.toString(testFiles));", "-    File newDirectory = new File(directory.getAbsolutePath() + System.getProperty(\"file.separator\") + \"importedFiles\");", "-    testFiles = newDirectory.listFiles(new FileFilter() {", "+    File dir2 = new File(dir1.getAbsolutePath() + System.getProperty(\"file.separator\") + \"importedFiles\");", "+    testFiles = dir2.listFiles(new FileFilter() {", "-      ", "-      //And make sure that no java file was generated for ToReference2.dj1", "-      //(This is testing that we correctly handled what could have been an ambiguous name reference, but wasn't)", "-      File f = new File(newDirectory, \"ToReference2.java\");", "-      assertFalse(\"ToReference2.java should not exist\", f.exists());", "+//      //And make sure that no java file was generated for ToReference2.dj1", "+//      //(This is testing that we correctly handled what could have been an ambiguous name reference, but wasn't)", "+//      File f = new File(dir2, \"ToReference2.java\");", "+//      assertFalse(\"ToReference2.java should not exist\", f.exists());", "-      newDirectory = new File(directory.getAbsolutePath() + System.getProperty(\"file.separator\") + \"importedFiles2\");", "-      testFiles = newDirectory.listFiles(new FileFilter() {", "+      File f;", "+      dir2 = new File(dir1.getAbsolutePath() + System.getProperty(\"file.separator\") + \"importedFiles2\");", "+      testFiles = dir2.listFiles(new FileFilter() {", "-        ", "-        ", "-        //And make sure that no java file was generated for ToReference.dj1", "-        f = new File(newDirectory, \"ToReference.java\");", "-        assertFalse(\"ToReference.java should not exist\", f.exists());", "+//        //And make sure that no java file was generated for ToReference.dj1", "+//        f = new File(dir2, \"ToReference.java\");", "+//        assertFalse(\"ToReference.java should not exist\", f.exists());", "+//        fail(\"Ensure that System.err is dumped\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dd99335ccbb799a801cc39f50abd4fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testPackageError()", "signatureAfterChange": "   public void testPackageError()", "diff": ["-   */", "+  /** Test that if a package and a class have the same name, an error is given. */", "-    directory = new File(directory.getAbsolutePath() + \"/shouldBreak/noBreak\");", "-    File[] testFiles = directory.listFiles(new FileFilter() {", "-      public boolean accept(File pathName) {", "-        return pathName.getAbsolutePath().endsWith(\".dj2\");", "-      }});", "-      LanguageLevelConverter llc = new LanguageLevelConverter();", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-      for (int i = 0; i<testFiles.length; i++) {", "-        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "-      }", "+    _log.log(\"Running testPackageError\");", "+    String base = dir1.getAbsolutePath();", "+    dir1 = new File(base + \"/shouldBreak/noBreak\");", "+    dir2 = new File(base + \"/shouldBreak\");", "+        ", "+    File[] files1 = dir1.listFiles(dj2Filter);", "+    File[] files2 = dir2.listFiles(dj2Filter);", "-      ", "+    int len1 = files1.length;", "+    int len2 = files2.length;", "+    File[] testFiles = new File[len1 + len2];", "+    for (int i = 0; i < len1; i++) { testFiles[i] = files1[i]; }", "+    for (int i = 0; i < len2; i++) { testFiles[len1 + i] = files2[i]; }", "+", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());"]}], "num": 11763}
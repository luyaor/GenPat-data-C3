{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfa516d5c81220c970cb9527ac2c0c3e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d52b7d4a41b25b42e7d63bb9b941707", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Object visit(SuperMethodCall node)", "signatureAfterChange": "   public Object visit(SuperMethodCall node)", "diff": ["-      Iterator<Expression> it = larg.iterator();", "+      ListIterator<Expression> it = larg.listIterator();", "-        if(!TigerUtilities.isVarArgs(m)){", "-          args[i] = it.next().acceptVisitor(this);", "-          i++;", "-        } else {", "+        Object last = null;", "+        if (it.hasNext()) {", "+          last = it.next().acceptVisitor(this);", "+        }", "+        ", "+        if(!TigerUtilities.isVarArgs(m)) {", "+          args[i] = last;", "+        }", "+        //          else if (last == null) {", "+        //            Class<?> compType = typs[i].getComponentType();", "+        //            args[i] = Array.newInstance(compType, 0);", "+        //          }", "+        else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+          args[i] = last;", "+        }", "+        else { // Either more/less args given than expected or is of the component type", "+          it.previous(); // back up since we pulled the expression out a few lines above"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba641fbcd8e4a7b0a29cb55dc53c239", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public Object visit(ClassAllocation node)", "signatureAfterChange": "   public Object visit(ClassAllocation node)", "diff": ["-      Iterator<Expression> it = larg.iterator();", "+      ListIterator<Expression> it = larg.listIterator();", "-        if(!TigerUtilities.isVarArgs(cons)){", "-          args[i++] = it.next().acceptVisitor(this);", "-        } else {", "+        Object last = null;", "+        if (it.hasNext()) {", "+          last = it.next().acceptVisitor(this);", "+        }", "+        ", "+        if(!TigerUtilities.isVarArgs(cons)) {", "+          args[i] = last;", "+        }", "+        //          else if (last == null) {", "+        //            Class<?> compType = typs[i].getComponentType();", "+        //            args[i] = Array.newInstance(compType, 0);", "+        //          }", "+        else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+          args[i] = last;", "+        }", "+        else { // Either more/less args given than expected or is of the component type", "+          it.previous(); // back up since we pulled the expression out a few lines above"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0622c14719e99510358b7dd74651e2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public Object visit(SimpleAllocation node)", "signatureAfterChange": "   public Object visit(SimpleAllocation node)", "diff": ["-      Iterator<Expression> it = larg.iterator();", "+      ListIterator<Expression> it = larg.listIterator();", "-    ", "-        if(!TigerUtilities.isVarArgs(cons)){", "-          args[i++] = it.next().acceptVisitor(this);", "-        } else {", "+        Object last = null;", "+        if (it.hasNext()) {", "+          last = it.next().acceptVisitor(this);", "+        }", "+        ", "+        if(!TigerUtilities.isVarArgs(cons)) {", "+          args[i] = last;", "+        }", "+        //          else if (last == null) {", "+        //            Class<?> compType = typs[i].getComponentType();", "+        //            args[i] = Array.newInstance(compType, 0);", "+        //          }", "+        else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+          args[i] = last;", "+        }", "+        else { // Either more/less args given than expected or is of the component type", "+          it.previous(); // back up since we pulled the expression out a few lines above"]}], "num": 27989}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab951046378fc6ce5a8ea71296361d31", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "502ae12bf046262b0fd85e16c61a6ad8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacCompiler.java", "commitBeforeChange": "a0fae01c3fc47347d8f40022743d4545d81cb1cb", "commitAfterChange": "7f27d4def62ff1bda42279f1d632d1636f2811d4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public static String transformRunCommand(String s)", "signatureAfterChange": "   public static String transformRunCommand(String s)", "diff": ["-  // If c), then DrJava executes MyClass.main (traditional java behavior).", "-  public static String transformRunCommand(String s) {", "-    final StringBuilder argsString = new StringBuilder();", "-    boolean seenArg = false;", "-      String t = tokens.get(i); // with quotes", "-      ", "-      if (seenArg) argsString.append(\",\");", "-      else seenArg = true;", "-      argsString.append(t);", "-    StringBuilder command = new StringBuilder();", "-    ", "-    command.append(\"{\\n\"+", "-       \"boolean isProgram = false;\\n\" +", "-       \"boolean isApplet = false;\\n\" +", "-       \"Class c = \").append(className).append(\".class;\\n\" +", "-       \"while(c != null) {\\n\" +", "-       \"  if (\\\"acm.program.Program\\\".equals(c.getName()) ||\\n\" +", "-       \"      \\\"acm.graphics.GTurtle\\\".equals(c.getName())) { isProgram = true; break; }\\n\" +", "-       \"  c = c.getSuperclass();\\n\" +", "-       \"}\\n\" +", "-       \"c = \").append(className).append(\".class;\\n\" +", "-       \"if (!isProgram) {\\n\" +", "-       \"  try {\\n\" +", "-       \"    // if this doesn't throw, c is a subclass of Applet\\n\" +", "-       \"    c.asSubclass(java.applet.Applet.class);\\n\" +", "-       \"    isApplet = true;\\n\" +", "-       \"  } catch(ClassCastException cce) { }\\n\" +", "-       \"}\\n\" +", "-       \"java.lang.reflect.Method m = null;\\n\" +", "-       \"String[] args = new String[] {\").append(argsString.toString()).append(\"};\\n\" +", "-       \"if (isApplet) {\\n\" +", "-       \"  try {\\n\" +", "-       \"    m = c.getMethod(\\\"main\\\", java.lang.String[].class);\\n\" +", "-       \"    if (!m.getReturnType().equals(void.class)) { m = null; }\\n\" +", "-       \"  }\\n\" +", "-       \"  catch (java.lang.NoSuchMethodException e) { m = null; }\\n\" +", "-       \"  if (m==null) {\\n\" +", "-       \"    java.applet.Applet instance = null;\\n\" +", "-       \"    boolean fail = false;\\n\");", "-    if (args.length==0) {", "-      command.append(", "-       \"    try {\\n\" +", "-       \"      // try default (nullary) constructor first\\n\" +", "-       \"      java.lang.reflect.Constructor ctor = c.getConstructor();\\n\" +", "-       \"      instance = java.applet.Applet.class.cast(ctor.newInstance());\\n\" +", "-       \"    }\\n\" +", "-       \"    catch(NoSuchMethodException nsme) { instance = null; }\\n\" +", "-       \"    catch(InstantiationException ie) { instance = null; }\\n\" +", "-       \"    catch(IllegalAccessException iae) { instance = null; }\\n\" +", "-       \"    catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "-       \"      if (ite.getCause()!=null) {\\n\" +", "-       \"        throw ite.getCause();\\n\" +", "-       \"      }\\n\" +", "-       \"      else {\\n\" +", "-       \"        System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"      }\\n\" +", "-       \"    }\\n\" +", "-       \"    if (instance==null) {\\n\" +", "-       \"      try {\\n\" +", "-       \"        // try String[] constructor next\\n\" +", "-       \"        java.lang.reflect.Constructor ctor = c.getConstructor(String[].class);\\n\" +", "-       \"        instance = java.applet.Applet.class.cast(ctor.newInstance(new Object[] { new String[0] }));\\n\" +", "-       \"      }\\n\" +", "-       \"      catch(NoSuchMethodException nsme) { instance = null; }\\n\" +", "-       \"      catch(InstantiationException ie) { instance = null; }\\n\" +", "-       \"      catch(IllegalAccessException iae) { instance = null; }\\n\" +", "-       \"      catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "-       \"        if (ite.getCause()!=null) {\\n\" +", "-       \"          throw ite.getCause();\\n\" +", "-       \"        }\\n\" +", "-       \"        else {\\n\" +", "-       \"          System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"          fail = true;\\n\" +", "-       \"        }\\n\" +", "-       \"      }\\n\" +", "-       \"    }\\n\" +", "-       \"    if (!fail && (instance==null)) {\\n\" +", "-       \"      System.err.println(\\\"Error: This applet does not have a default constructor or a constructor \\\"+\\n\" +", "-       \"                         \\\"accepting String[].\\\");\\n\" +", "-       \"      fail = true;\\n\" +", "-       \"    }\\n\");", "-      command.append(", "-       \"    try {\\n\" +", "-       \"      // try String[] constructor\\n\" +", "-       \"      java.lang.reflect.Constructor ctor = c.getConstructor(String[].class);\\n\" +", "-       \"      instance = java.applet.Applet.class.cast(ctor.newInstance(new Object[] { args }));\\n\" +", "-       \"    }\\n\" +", "-       \"    catch(NoSuchMethodException nsme) { instance = null; }\\n\" +", "-       \"    catch(InstantiationException ie) { instance = null; }\\n\" +", "-       \"    catch(IllegalAccessException iae) { instance = null; }\\n\" +", "-       \"    catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "-       \"      if (ite.getCause()!=null) {\\n\" +", "-       \"        throw ite.getCause();\\n\" +", "-       \"      }\\n\" +", "-       \"      else {\\n\" +", "-       \"        System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"        fail = true;\\n\" +", "-       \"      }\\n\" +", "-       \"    }\\n\" +", "-       \"    if (!fail && (instance==null)) {\\n\" +", "-       \"      System.err.println(\\\"Error: This applet does not have a constructor accepting String[].\\\");\\n\" +", "-       \"      fail = true;\\n\" +", "-       \"    }\\n\");", "-    command.append(", "-       \"    if (!fail) { edu.rice.cs.plt.swing.SwingUtil.showApplet(instance, 400, 300); }\\n\" +", "-       \"  } // if (m==null)\\n\" +", "-       \"} // if (isApplet)\\n\" +", "-       \"else {\\n\" +", "-       \"  try {\\n\" +", "-       \"    m = c.getMethod(\\\"main\\\", java.lang.String[].class);\\n\" +", "-       \"    if (!m.getReturnType().equals(void.class)) {\\n\" +", "-       \"      System.err.println(\\\"Error: This class does not have a static void main method accepting String[].\\\");\\n\" +", "-       \"      m = null;\\n\" +", "-       \"    }\\n\" +", "-       \"  }\\n\" +", "-       \"  catch (java.lang.NoSuchMethodException e) {\\n\" +", "-       \"    System.err.println(\\\"Error: This class does not have a static void main method accepting String[].\\\");\\n\" +", "-       \"    m = null;\\n\" +", "-       \"  }\\n\" +", "-       \"} // else\\n\" +", "-       \"if (m != null) {\\n\" +", "-       \"  if (isProgram) {\\n\" +", "-       \"    String[] newArgs = new String[args.length+1];\\n\" +", "-       \"    newArgs[0] = \\\"code=\\\"+c.getName();\\n\" +", "-       \"    System.arraycopy(args, 0, newArgs, 1, args.length);\\n\" +", "-       \"    args = newArgs;\\n\" +", "-       \"  }\\n\" +", "-       \"  try {\\n\" +", "-       \"    m.setAccessible(true);\\n\" +", "-       \"    m.invoke(null, new Object[] { args });\\n\" +", "-       \"  }\\n\" +", "-       \"  catch(SecurityException se) {\\n\" +", "-       \"    System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"  }\\n\" +", "-       \"  catch(IllegalAccessException iae) {\\n\" +", "-       \"    System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"  }\\n\" +", "-       \"  catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "-       \"    if (ite.getCause()!=null) {\\n\" +", "-       \"      throw ite.getCause();\\n\" +", "-       \"    }\\n\" +", "-       \"    else {\\n\" +", "-       \"      System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"    }\\n\" +", "-       \"  }\\n\" +", "-       \"}\\n\" +", "-    \"}\");", "+  // If c), then DrJava executes MyClass.main (traditional java behavior).", "+  public static String transformRunCommand(String s) {    ", "+    if (s.endsWith(\";\"))  s = _deleteSemiColon(s);", "+    List<String> args = ArgumentTokenizer.tokenize(s, true);", "+    final String classNameWithQuotes = args.get(1); // this is \"MyClass\"", "+    final String className =", "+      classNameWithQuotes.substring(1, classNameWithQuotes.length() - 1); // removes quotes, becomes MyClass", "-    // System.out.println(command);", "-", "-    return command.toString();", "+    // we pass MyClass.class just to get a \"Static Error: Undefined class 'MyClass'\"", "+    String ret = JavacCompiler.class.getName()+\".runCommand(\\\"\"+s.toString()+\"\\\", \"+className+\".class)\";", "+    System.out.println(ret);", "+    return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "536a36aa296fd89327f19287c8e28a6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "commitAfterChange": "18853ae3d062d9694905fb3ffaa507db78319f52", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public String getVariableType(String var)", "signatureAfterChange": "   public Object[] getVariableValue(String var)", "diff": ["+  public Object[] getVariableValue(String var) {", "+    Pair<Object,String>[] arr = getVariable(var);", "+    if (arr.length==0) return new Object[0];", "+    else return new Object[] { arr[0].first() };", "+  }", "-    */", "-  public String getVariableType(String var) {", "-    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "-    if (env == null) { return \"\"; }", "-    DJClass djThis = env.first().getThis();", "-    if (djThis == null) { return \"<unknown>\"; }", "-    Class<?> thisC = djThis.load();", "-    Object thisO = env.second().getThis(djThis);", "-    Pair<Boolean,Class<?>> validAndType = getValidFieldType(var, thisC, thisO);", "-    if (!validAndType.first()) {", "-      // not a field, may be a local variable", "-      // TODO: implement this", "-      return \"\";", "-    }", "-    Class<?> c = validAndType.second();", "-    ", "-    // print the right number of [] for each level of arrays", "-    // we can't distinguish primitive types from their boxed types right now", "-    if (c.equals(Byte.class))      { return \"byte\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); } ", "-    if (c.equals(Short.class))     { return \"short\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Integer.class))   { return \"int\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Long.class))      { return \"long\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Float.class))     { return \"float\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Double.class))    { return \"double\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Boolean.class))   { return \"boolean\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Character.class)) { return \"char\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    else return c.getName()+sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c871ff5c780638a880e03b4ad3d80132", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "7f5ff64d986e80db8fa3ceeb1048b991af6a4ea0", "commitAfterChange": "6b936f625ceea21472b90559f34694154e802e14", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException", "signatureAfterChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException", "diff": ["+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d1.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d1,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d2.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d2,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d3.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d3,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d4.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d4,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d5.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d5,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d6.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d6,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "-    StringBuilder sbIdHashCodes = new StringBuilder();", "-    sbIdHashCodes.append(\"_frame = \"+_frame.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "-    sbIdHashCodes.append(\"_model = \"+_model.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "-    sbIdHashCodes.append(\"p1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p1))+\"\\n\");", "-    sbIdHashCodes.append(\"p2     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p2))+\"\\n\");", "-    sbIdHashCodes.append(\"p3     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p3))+\"\\n\");", "-    sbIdHashCodes.append(\"p4     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p4))+\"\\n\");", "-    sbIdHashCodes.append(\"p5     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p5))+\"\\n\");", "-    sbIdHashCodes.append(\"p6     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p6))+\"\\n\");", "-    sbIdHashCodes.append(\"d1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d1))+\"\\n\");", "-    sbIdHashCodes.append(\"d2     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d2))+\"\\n\");", "-    sbIdHashCodes.append(\"d3     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d3))+\"\\n\");", "-    sbIdHashCodes.append(\"d4     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d4))+\"\\n\");", "-    sbIdHashCodes.append(\"d5     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d5))+\"\\n\");", "-    sbIdHashCodes.append(\"d6     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d6)));", "-", "+//    StringBuilder sbIdHashCodes = new StringBuilder();", "+//    sbIdHashCodes.append(\"_frame = \"+_frame.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "+//    sbIdHashCodes.append(\"_model = \"+_model.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "+//    sbIdHashCodes.append(\"p1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p1))+\"\\n\");", "+//    sbIdHashCodes.append(\"p2     = \"+p2.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p2))+\"\\n\");", "+//    sbIdHashCodes.append(\"p3     = \"+p3.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p3))+\"\\n\");", "+//    sbIdHashCodes.append(\"p4     = \"+p4.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p4))+\"\\n\");", "+//    sbIdHashCodes.append(\"p5     = \"+p5.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p5))+\"\\n\");", "+//    sbIdHashCodes.append(\"p6     = \"+p6.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p6))+\"\\n\");", "+//    sbIdHashCodes.append(\"d1     = \"+d1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d1))+\"\\n\");", "+//    sbIdHashCodes.append(\"d2     = \"+d2.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d2))+\"\\n\");", "+//    sbIdHashCodes.append(\"d3     = \"+d3.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d3))+\"\\n\");", "+//    sbIdHashCodes.append(\"d4     = \"+d4.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d4))+\"\\n\");", "+//    sbIdHashCodes.append(\"d5     = \"+d5.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d5))+\"\\n\");", "+//    sbIdHashCodes.append(\"d6     = \"+d6.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d6)));", "-      LOG.log(sbIdHashCodes.toString());", "+//      LOG.log(sbIdHashCodes.toString());"]}], "num": 2861}
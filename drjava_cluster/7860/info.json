{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da793bf6e0be647bb7bf91f7d2a0a9aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dce710fbe4b75df830af334d93b5181", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/IncrementalTaskController.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public List<I> intermediateValues()", "signatureAfterChange": "   public BlockingQueue<I> intermediateQueue()", "diff": ["+   */", "+  public BlockingQueue<I> intermediateQueue() {", "+    if (_ignoreIntermediate) { throw new IllegalStateException(\"No queue is maintained\"); }", "+    else { return _intermediateQueue; }", "+  }", "-  public List<I> intermediateValues() {", "-    if (_status != Status.CANCELED) {", "-      try { return getIntermediateValues(); }", "-      catch (InterruptedException e) { throw new WrappedException(e); }", "-    }", "-    else { throw new IllegalStateException(\"Task is cancelled\"); }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d30ee12383eb02d5ce4568620ef50bd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "a2b28a9213fa3cc634db7fda88e14ebb0a103974", "commitAfterChange": "56df485f00337d373f1f0b94fc58f7c7b8b714d4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "    public void makeCurrentOffsetStart()", "signatureAfterChange": "      public void makeCurrentOffsetStart()", "diff": ["-", "-  public void makeCurrentOffsetStart() {", "-    try {", "-      _start = _doc.createPosition(getCurrentOffset());", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-  }", "+    public void makeCurrentOffsetStart() {", "+        _state.makeCurrentOffsetStart();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2a7fb3ca31df4dfc1cb3ee46f5c726", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public boolean findCharInStmtBeforePos(char findChar, int position)", "signatureAfterChange": "   public boolean findCharInStmtBeforePos(char findChar, int position)", "diff": ["-  public boolean findCharInStmtBeforePos(char findChar, int position){", "-    // throwErrorHuh();", "+  public boolean findCharInStmtBeforePos(char findChar, int position) {", "-      String mesg = \"Argument endChar to QuestionExistsCharInStmt must be a char \" +", "-        \"that exists on the current line.\";", "-      // Should not happen", "+      String mesg = ", "+        \"Argument endChar to QuestionExistsCharInStmt must be a char that exists on the current line.\";", "-    // Find the position of the previous occurence findChar from the", "-    // position of endChar (looking in paren phrases as well)", "+    // Find the position of the preceding occurrence findChar position (looking in paren phrases as well)", "+    boolean found;", "+    ", "+    readLock();", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    if ((prevFindChar == DefinitionsDocument.ERROR_INDEX) ||", "-        (prevFindChar < 0)) {", "-      // Couldn't find a previous occurence findChar", "-      return false;", "-    }", "-    ", "-    // Determine if prevFindChar was findChar, rather than end", "-    //  of statement delimiter", "-    boolean found;", "-    try {", "+      ", "+      if ((prevFindChar == DefinitionsDocument.ERROR_INDEX) || (prevFindChar < 0)) return false; // no such char", "+      ", "+      // Determine if prevFindChar is findChar or the end of statement delimiter", "-    catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "+    catch (Throwable t) { throw new UnexpectedException(t); }", "+    finally { readUnlock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee128be07af15b51cdb378f53b5f5f78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "d187ef0ae751d72da55c4bc4f82be93731c1e46f", "commitAfterChange": "d8ed07c181201a238142caf2537f1e0f6da8bb42", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public String getCurrentInteraction()", "signatureAfterChange": "   public String getCurrentInteraction()", "diff": ["-   */", "-  public String getCurrentInteraction() {", "-    try {", "-      return getDocText(_promptPos, getDocLength() - _promptPos);", "-    }", "-    catch (DocumentAdapterException e) {", "-      throw new UnexpectedException(e);", "-    }", "-  }", "+   */", "+  public String getCurrentInteraction() {", "+    return super.getCurrentInput();"]}], "num": 7860}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ebde6560e84da3416322837cc7ebd35a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21cb576726c17a677e51e44b8e166a58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/TokenList.java", "commitBeforeChange": "102797244429ae58868d0037b49467f5a00bbd6a", "commitAfterChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     void insertBraceToGap(String text)", "signatureAfterChange": "     void insertBraceToGap(String text)", "diff": ["-      this.insert(new Gap(this.getBlockOffset(), getStateAtCurrent()));", "-      this.next(); // now pointing at new brace", "+      // add a new gap to account for the remainder from the split gap", "+      // if block offset is zero, do NOT add a Gap of size 0.", "+      if (this.getBlockOffset() > 0) {", "+        this.insert(new Gap(this.getBlockOffset(), getStateAtCurrent()));", "+        this.next(); //now point at new brace", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4177025157c6d1f210e5dd44839246de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "3944766b414e9b28f72d0266991dc3ced69d30b0", "commitAfterChange": "30114c083c07270248f814f8a3cab4ee5196d9c1", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 328, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["-          resetModification();", "-          if (! oldFile.equals(file)) {", "-            /* remove regions for this document */", "-            removeFromDebugger();", "-            _breakpointManager.removeRegions(this);", "-            _bookmarkManager.removeRegions(this);", "-            for (RegionManager<MovingDocumentRegion> rm: getFindResultsManagers()) rm.removeRegions(this);", "-            clearBrowserRegions();", "-          }", "-          synchronized(_documentsRepos) {", "-            File f = getRawFile();", "-//            OpenDefinitionsDocument d = _documentsRepos.get(f);", "-            // d == this except in some unit tests where documents are not entered in _documentsRepos", "-//            assert d == this;", "-            _documentsRepos.remove(f);", "-            _documentsRepos.put(file, this);", "-          }", "-          setFile(file);", "-          // this.getPackageName does not return \"\" if this is untitled and contains a legal package declaration     ", "+          if (com.shouldUpdateDocumentState()) {", "+            resetModification();", "+            if (! oldFile.equals(file)) {", "+              /* remove regions for this document */", "+              removeFromDebugger();", "+              _breakpointManager.removeRegions(this);", "+              _bookmarkManager.removeRegions(this);", "+              for (RegionManager<MovingDocumentRegion> rm: getFindResultsManagers()) rm.removeRegions(this);", "+              clearBrowserRegions();", "+            }", "+            synchronized(_documentsRepos) {", "+              File f = getRawFile();", "+//            OpenDefinitionsDocument d = _documentsRepos.get(f);", "+              // d == this except in some unit tests where documents are not entered in _documentsRepos", "+//            assert d == this;", "+              _documentsRepos.remove(f);", "+              _documentsRepos.put(file, this);", "+            }", "+            setFile(file);", "+            ", "+            // this.getPackageName does not return \"\" if this is untitled and contains a legal package declaration     ", "-          setCachedClassFile(FileOps.NULL_FILE);", "-          checkIfClassFileInSync();", "-          ", "+            setCachedClassFile(FileOps.NULL_FILE);", "+            checkIfClassFileInSync();", "+            ", "-          _notifier.fileSaved(openDoc);", "-          ", "-          // Make sure this file is on the appropriate classpaths (does nothing in AbstractGlobalModel)", "-          addDocToClassPath(this);", "-          ", "-          /* update the navigator */", "-          _documentNavigator.refreshDocument(this, fixPathForNavigator(file.getCanonicalPath()));", "-          ", "-          /* set project changed flag */", "-          setProjectChanged(true);          ", "+            _notifier.fileSaved(openDoc);", "+            ", "+            // Make sure this file is on the appropriate classpaths (does nothing in AbstractGlobalModel)", "+            addDocToClassPath(this);", "+            ", "+            /* update the navigator */", "+            _documentNavigator.refreshDocument(this, fixPathForNavigator(file.getCanonicalPath()));", "+            ", "+            /* set project changed flag */", "+            setProjectChanged(true);          ", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58560ec94683df51d74545ab1444f99c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "54a2d5af359edd99cce3e2b74ded93b4c8c0d9e9", "commitAfterChange": "7c8486700bb21647b6fbe2818464471123c8ab80", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "          public InputBox(boolean endOfStream)", "signatureAfterChange": "          public InputBox(boolean endOfStream)", "diff": ["-      for(KeyStroke ks: im.keys()) { _oldInputMap.put(ks, im.get(ks)); }", "+      if (im.keys()!=null) { // im.keys() may be null!", "+        for(KeyStroke ks: im.keys()) { _oldInputMap.put(ks, im.get(ks)); }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c66cdc8b90907257b6717415adb3007", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/DisplayVisitor.java", "commitBeforeChange": "bc2ff71530c43866f8f779132c88a0e166f012d7", "commitAfterChange": "b07bf619da13edb1c36c3126406ad7908514445f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Void visit(ReturnStatement node)", "signatureAfterChange": "   public Void visit(ReturnStatement node)", "diff": ["-    node.getExpression().acceptVisitor(this);", "+    //Bug fix to allow for \"return;\"", "+    if( node.getExpression() != null )", "+      node.getExpression().acceptVisitor(this);", "+    else", "+      print(\"null\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fce0631537059beddfa6e3154233671a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "930b1ef6cc279650a085c7c6499b1b57cb240018", "commitAfterChange": "73b3ce3968c13472938fea3d36b496150c938bd2", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["-      // add listener to debug manager", "-      _model.getDebugManager().setListener(new UIDebugListener());", "+      if (_model.getDebugManager() != null) {", "+        // add listener to debug manager", "+        _model.getDebugManager().addListener(new UIDebugListener());", "+      }"]}], "num": 31225}
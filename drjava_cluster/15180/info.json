{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17107e3b8c176773ada8c95743d22c8f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5fa3746739128b6dae57a7537dfdba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 80, "signatureBeforeChange": "      public static <K, V> Map<K, V> compose(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child)", "signatureAfterChange": "   public static <K, X, V> LambdaMap<K, V> compose(Map<? extends K, ? extends X> left,                                                   Map<? super X, ? extends V> right)", "diff": ["-  public static <K, V> Map<K, V> compose(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child) {", "-    return new ComposedMap<K, V>(parent, child);", "+  /** Produce a lazy transitive composition of two maps.  Size-related operations have poor performance. */", "+  public static <K, X, V> LambdaMap<K, V> compose(Map<? extends K, ? extends X> left,", "+                                                  Map<? super X, ? extends V> right) {", "+    return new ComposedMap<K, X, V>(left, right);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b99e00ac532eee03a162cf6192250141", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ComposedMap.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public ComposedMap(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child)", "signatureAfterChange": "      public ComposedMap(Map<? extends K, ? extends X> map1, Map<? super X, ? extends V> map2)", "diff": ["-  public ComposedMap(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child) {", "-    _parent = parent;", "-    _child = child;", "-    _keys = new UnionSet<K>(parent.keySet(), child.keySet());", "-  }", "+  public ComposedMap(Map<? extends K, ? extends X> map1, Map<? super X, ? extends V> map2) {", "+    _map1 = map1;", "+    _map2 = map2;", "+    _keys = new FilteredSet<K>(_map1.keySet(), new Predicate<K>() {", "+      public boolean contains(K key) { return _map2.containsKey(_map1.get(key)); }", "+    });"]}], "num": 15180}
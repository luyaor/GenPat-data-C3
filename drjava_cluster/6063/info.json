{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46bc3ca2bf6a5795fb8b63ec7e8a1d05", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "078d92aa5675bcc7c2c1f51930b640df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testCompileResetsInteractions() throws BadLocationException, IOException, InterruptedException,     EditDocumentException", "signatureAfterChange": "   public void testCompileResetsInteractions() throws BadLocationException, IOException, InterruptedException,     EditDocumentException", "diff": ["-    _model.getCompilerModel().compileAll();", "+     Utilities.invokeLater(new Runnable() { ", "+      public void run() { ", "+        try { _model.getCompilerModel().compileAll(); } ", "+        catch(Exception e) { throw new UnexpectedException(e); }", "+      }", "+    });", "-    ", "+    _log.log(\"reset confirmed\");", "+    _log.log(\"testCompileResetsInteractions complete\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6776284357223317f30abe19e9f63d16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testCompileAllWithNoFiles() throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileAllWithNoFiles() throws BadLocationException, IOException, InterruptedException", "diff": ["-    _model.getCompilerModel().compileAll();", "+    Utilities.invokeLater(new Runnable() { ", "+      public void run() { ", "+        try { _model.getCompilerModel().compileAll(); } ", "+        catch(Exception e) { throw new UnexpectedException(e); }", "+      }", "+    });", "+    _log.log(\"testCompileAllWithNoFiles complete\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cfedb1d7fce08203ceb58806f6f01a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testCompileAllWithNoFiles() throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileAllWithNoFiles() throws BadLocationException, IOException, InterruptedException", "diff": ["-    _model.getCompilerModel().compileAll();", "+    Utilities.invokeLater(new Runnable() { ", "+      public void run() { ", "+        try { _model.getCompilerModel().compileAll(); } ", "+        catch(Exception e) { throw new UnexpectedException(e); }", "+      }", "+    });", "+    _log.log(\"testCompileAllWithNoFiles complete\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b1219eae2862868c4c5735315985589", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testCompileAllWithNoFiles() throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileAllWithNoFiles() throws BadLocationException, IOException, InterruptedException", "diff": ["-    Utilities.invokeLater(new Runnable() { ", "-      public void run() { ", "-        try { _model.getCompilerModel().compileAll(); } ", "-        catch(Exception e) { throw new UnexpectedException(e); }", "-      }", "-    });", "+    _model.getCompilerModel().compileAll();", "-    _log.log(\"testCompileAllWithNoFiles complete\");"]}], "num": 6063}
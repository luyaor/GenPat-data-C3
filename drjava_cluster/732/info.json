{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bc049eebe3c63c82f4fd2b01ce88ef1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03b820b9889c54900d81c632e5202ca3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "506c5d6a5606459c5317089961c227d94f8d45b9", "commitAfterChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws IncompatibleThreadStateException, AbsentInformationException,       InvocationException, DebugException", "diff": ["-    throws InvalidTypeException, ClassNotLoadedException,", "-    IncompatibleThreadStateException, AbsentInformationException,", "-    InvocationException, DebugException", "+    throws IncompatibleThreadStateException, AbsentInformationException,", "+      InvocationException, DebugException", "-    if( printMessages ) System.out.println(\"Getting debug interpreter\");", "-    if( printMessages ) System.err.println(\"Getting variables\");", "+    if(printMessages) System.out.println(\"Getting debug interpreter\");", "+    if(printMessages) System.err.println(\"Getting variables\");", "-      if( printMessages ) System.out.println(\"Iterating through vars\");", "+      if(printMessages) System.out.println(\"Iterating through vars\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60ce988519d38d374bc43d820b596376", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 59, "signatureBeforeChange": "   private ObjectReference getDebugInterpreter(String interpreterName)      throws InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName)      throws InvalidTypeException, ClassNotLoadedException,      IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-  private ObjectReference getDebugInterpreter(String interpreterName) ", "-    throws InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException{", "+  private ObjectReference _getDebugInterpreter(String interpreterName) ", "+    throws InvalidTypeException, ClassNotLoadedException, ", "+    IncompatibleThreadStateException, InvocationException, DebugException", "+  {", "-    return getDebugInterpreter(interpreterName, threadRef);", "+    return _getDebugInterpreter(interpreterName, threadRef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e1b3786dc2e620719fd824088c0e92", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 71, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, AbsentInformationException, InvocationException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,      IncompatibleThreadStateException, AbsentInformationException,      InvocationException, DebugException", "diff": ["-    throws InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, AbsentInformationException, InvocationException{", "+    throws InvalidTypeException, ClassNotLoadedException, ", "+    IncompatibleThreadStateException, AbsentInformationException, ", "+    InvocationException, DebugException", "+  {", "-    ObjectReference interpreter = getDebugInterpreter(_getUniqueThreadName(threadRef), threadRef);", "+    ObjectReference interpreter = _getDebugInterpreter(_getUniqueThreadName(threadRef), threadRef);", "-    while(varsIterator.hasNext()){", "+    // Get each variable from the stack frame", "+    while(varsIterator.hasNext()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1045e06b996a22d6b7f5f25e1930311", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "506c5d6a5606459c5317089961c227d94f8d45b9", "commitAfterChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException,       IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-    throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,", "-    IncompatibleThreadStateException, InvocationException, DebugException", "+    throws InvalidTypeException, ClassNotLoadedException,", "+      IncompatibleThreadStateException, InvocationException, DebugException", "-    Value v = null;", "-    ", "+", "-        List<Mirror> args = new LinkedList<Mirror>(); //Added parameterization <Mirror>. ", "+        List<Mirror> args = new LinkedList<Mirror>(); //Added parameterization <Mirror>.", "-        v = interpreter.invokeMethod(thread, method2Call, args,", "+        Value v = interpreter.invokeMethod(thread, method2Call, args,", "-        ", "+", "-    ", "+"]}], "num": 732}
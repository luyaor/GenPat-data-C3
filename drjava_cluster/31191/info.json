{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c1d01aa5aa7da83b1adb9dac7069765", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8ca07c0fb6985e081af1dc95b11d1a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelDeleteTest.java", "commitBeforeChange": "b400b9a6647834c824c840f4cbeb6ad51c113120", "commitAfterChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void testStartDeleteInDoubleBrace()", "signatureAfterChange": "  \tpublic void testStartDeleteInDoubleBrace()", "diff": ["-\t\t\tassertEquals(\"#0.0\",\"/*\",model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#0.1\",\"/\",model1._cursor.nextItem().getType());", "-\t\t\tassertEquals(\"#0.2\",1,model1._offset);", "+\t\t\tassertEquals(\"#0.0\",\"/*\",model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#0.1\",\"/\",model1.getCursor().nextItem().getType());", "+\t\t\tassertEquals(\"#0.2\",1,model1.getBlockOffset());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\t\t\t\t\t\t\t model1._cursor.current().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-\t\t\tassertEquals(\"#1.0\", \"/\", model1._cursor.prevItem().getType());", "-\t\t\tassertEquals(\"#1.1\", 0, model1._offset);", "+\t\t\tassertEquals(\"#1.0\", \"/\", model1.getCursor().prevItem().getType());", "+\t\t\tassertEquals(\"#1.1\", 0, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#2.0\", \"//\", model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#2.1\", \"/\", model1._cursor.nextItem().getType());", "-\t\t\tassertEquals(\"#2.2\", 1, model1._offset);", "+\t\t\tassertEquals(\"#2.0\", \"//\", model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#2.1\", \"/\", model1.getCursor().nextItem().getType());", "+\t\t\tassertEquals(\"#2.2\", 1, model1.getBlockOffset());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertTrue(\"#3.0\", model1._braces.isEmpty());", "-\t\t\tassertEquals(\"#3.1\", 0, model1._offset);", "+\t\t\tassertTrue(\"#3.0\", model1.getBraces().isEmpty());", "+\t\t\tassertEquals(\"#3.1\", 0, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#4.0\", \"(\", model1._cursor.current().getType());", "+\t\t\tassertEquals(\"#4.0\", \"(\", model1.getCursor().current().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.current().getState());", "-\t\t\tassertTrue(\"#4.2\", model1._cursor.prevItem().isGap());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "+\t\t\tassertTrue(\"#4.2\", model1.getCursor().prevItem().isGap());", "-\t\t\t\t\t\t\t\t\t model1._cursor.prevItem().getState());", "-\t\t\tassertEquals(\"#4.4\", \"*/\", model1._cursor.nextItem().getType());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "+\t\t\tassertEquals(\"#4.4\", \"*/\", model1.getCursor().nextItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#5.0\", \"//\", model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#5.1\", 1, model1._offset);", "-\t\t\tassertEquals(\"#5.2\", \"*\", model1._cursor.nextItem().getType());", "+\t\t\tassertEquals(\"#5.0\", \"//\", model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#5.1\", 1, model1.getBlockOffset());", "+\t\t\tassertEquals(\"#5.2\", \"*\", model1.getCursor().nextItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#6.0\", \"*\", model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#6.1\", 0, model1._offset);", "-\t\t\tassertEquals(\"#6.2\", \"(\", model1._cursor.prevItem().getType());", "+\t\t\tassertEquals(\"#6.0\", \"*\", model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#6.1\", 0, model1.getBlockOffset());", "+\t\t\tassertEquals(\"#6.2\", \"(\", model1.getCursor().prevItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.prevItem().getState());\t\t\t", "+\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());\t\t\t", "-\t\t\t\t\t\t\t\t\t model1._cursor.current().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-\t\t\tassertEquals(\"#7.0\", \"/*\", model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#7.1\", 1, model1._offset);", "-\t\t\tassertEquals(\"#7.2\", \"\\n\", model1._cursor.nextItem().getType());", "+\t\t\tassertEquals(\"#7.0\", \"/*\", model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#7.1\", 1, model1.getBlockOffset());", "+\t\t\tassertEquals(\"#7.2\", \"\\n\", model1.getCursor().nextItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#8.1\", \"(\", model1._cursor.prevItem().getType());", "+\t\t\tassertEquals(\"#8.1\", \"(\", model1.getCursor().prevItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.prevItem().getState());", "-\t\t\tassertEquals(\"#8.3\", \"*/\", model1._cursor.current().getType());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "+\t\t\tassertEquals(\"#8.3\", \"*/\", model1.getCursor().current().getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c813170ab2debe628f9c08a82941296c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    private static void createAndShowGUI(final String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-", "-  private static void createAndShowGUI(final String[] args) {", "+  ", "+  public static void configureAndLoadDrJavaRoot(String[] args) {", "-      // handleCommandLineArgs will return true if the program should load", "+      // handleCommandLineArgs will return true if the DrJava should be loaded", "-        String configLAFName = _config.getSetting(LOOK_AND_FEEL);", "-        String currLAFName = UIManager.getLookAndFeel().getClass().getName();", "-        if (!configLAFName.equals(currLAFName)) UIManager.setLookAndFeel(configLAFName);", "-        ", "-        // Install L&F upgrades for windows XP from winlaf-0.5.1.jar", "-        // For more information see: https://winlaf.dev.java.net/release_0.5.html", "-//       net.java.plaf.LookAndFeelPatchManager.initialize();  ", "-                ", "-        // Don't use JSR14v20 if running with Java 1.5 because putting it on the bootclasspath causes DrJava to", "-        // hang on startup.", "-        _usingJSR14v20 = checkForJSR14v20() && ! System.getProperty(\"java.specification.version\").equals(\"1.5\");", "-", "+        // Check that compiler and debugger are available on classpath (including tools.jar location)", "- ", "-        // The MainFrame *must* be constructed after the compiler setup process has", "-        // occurred; otherwise, the list of compilers in the UI will be wrong.", "-        // At some point this should be fixed, which would involve making the", "-        // CompilerRegistry notify listeners when there is a change in the list of", "-        // available compilers.", "-", "-        final MainFrame mf = new MainFrame();", "-        // Make sure all uncaught exceptions are shown in an AWTExceptionHandler", "-        AWTExceptionHandler.setFrame(mf);", "-        System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.AWTExceptionHandler\");", "-                ", "-        _openCommandLineFiles(mf, _filesToOpen);", "+        // Start the DrJava master JVM", "+        String pathSep = System.getProperty(\"path.separator\");", "+        String classPath = edu.rice.cs.util.FileOps.convertToAbsolutePathEntries(System.getProperty(\"java.class.path\"));", "-        /* setVibible is moved to the end of the eventqueue to be sure all files has finished loading and added to the", "-         * fileview before the MainFrame is set visible.  When this was not done, occassionally a NullPointerException ", "-         * was encountered on startup when specifying a file (ex: java -jar drjava.jar somefile.java)", "-         */", "-        SwingUtilities.invokeLater(new Runnable(){ public void run(){mf.setVisible(true);}});", "+        // Add tools.jar from preferences if specified", "+        classPath += pathSep;", "+        File toolsFromConfig = getConfig().getSetting(JAVAC_LOCATION);", "+        if (toolsFromConfig != FileOption.NULL_FILE) {", "+          classPath += toolsFromConfig.getAbsolutePath() + pathSep;", "+        }", "-        // redirect stdout to DrJava's console", "-        System.setOut(new PrintStream(new OutputStreamRedirector() {", "-          public void print(String s) { mf.getModel().systemOutPrint(s); }", "-        }));", "-", "-        // redirect stderr to DrJava's console", "-        System.setErr(new PrintStream(new OutputStreamRedirector() {", "-          public void print(String s) { mf.getModel().systemErrPrint(s); }", "-        }));", "-", "-        // Show debug console if enabled", "-        if (_showDrJavaDebugConsole) showDrJavaDebugConsole(mf);", "+        // Fall back on guesses from ToolsJarClassLoader", "+        classPath += ToolsJarClassLoader.getToolsJarClassPath();", "+        ", "+        File workDir = getConfig().getSetting(WORKING_DIRECTORY);", "+        if (workDir == null) workDir = FileOption.NULL_FILE;", "+        ", "+        // Add the string pathSep to _filesToOpen if _showDebugConsole is true", "+        if (_showDebugConsole) _filesToOpen.add(pathSep);  // THIS IS A KLUDGE TO PASS THIS BOOLEAN FLAG TO DrJava", "+        ", "+        String[] jvmArgs = _jmvArgs.toArray(new String[0]);", "+        String[] classArgs = _filesToOpen.toArray(new String[0]);", "+        ", "+        // Run a new copy of DrJava and exit", "+        try {", "+//          Utilities.showDebug(\"Starting DrJavaRoot with classArgs = \" + Arrays.toString(classArgs) + \"; classPath = \" + classPath + ", "+//                             \"; jvmArgs = \" + Arrays.toString(jvmArgs) + \"; workDir = \" + workDir);", "+          ExecJVM.runJVM(\"edu.rice.cs.drjava.DrJavaRoot\", classArgs, classPath, jvmArgs, workDir);", "+        }", "+        catch (IOException ioe) {", "+          // Display error", "+          final String[] text = {", "+            \"DrJava was unable to load its compiler and debugger.  Would you \",", "+            \"like to start DrJava without a compiler and debugger?\", \"\\nReason: \" + ioe.toString()", "+          };", "+          int result = JOptionPane.showConfirmDialog(null, text, \"Could Not Load Compiler and Debugger\",", "+                                                     JOptionPane.YES_NO_OPTION);", "+          if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "+        }", "-      // Show any errors to the real System.err and in an AWTExceptionHandler", "-      _consoleErr.println(t.getClass().getName() + \": \" + t.getMessage());", "-      t.printStackTrace(_consoleErr);System.out.println(\"error thrown\");", "+      // Show any errors to the System.err and in an AWTExceptionHandler", "+      System.err.println(t.getClass().getName() + \": \" + t.getMessage());", "+      t.printStackTrace(System.err);System.out.println(\"error thrown\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db6df52f50b69b2b2ad486467cf9833d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelDeleteTest.java", "commitBeforeChange": "b400b9a6647834c824c840f4cbeb6ad51c113120", "commitAfterChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void testStartDeleteInDoubleBrace()", "signatureAfterChange": "  \tpublic void testStartDeleteInDoubleBrace()", "diff": ["-\t\t\tassertEquals(\"#0.0\",\"/*\",model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#0.1\",\"/\",model1._cursor.nextItem().getType());", "-\t\t\tassertEquals(\"#0.2\",1,model1._offset);", "+\t\t\tassertEquals(\"#0.0\",\"/*\",model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#0.1\",\"/\",model1.getCursor().nextItem().getType());", "+\t\t\tassertEquals(\"#0.2\",1,model1.getBlockOffset());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\t\t\t\t\t\t\t model1._cursor.current().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-\t\t\tassertEquals(\"#1.0\", \"/\", model1._cursor.prevItem().getType());", "-\t\t\tassertEquals(\"#1.1\", 0, model1._offset);", "+\t\t\tassertEquals(\"#1.0\", \"/\", model1.getCursor().prevItem().getType());", "+\t\t\tassertEquals(\"#1.1\", 0, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#2.0\", \"//\", model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#2.1\", \"/\", model1._cursor.nextItem().getType());", "-\t\t\tassertEquals(\"#2.2\", 1, model1._offset);", "+\t\t\tassertEquals(\"#2.0\", \"//\", model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#2.1\", \"/\", model1.getCursor().nextItem().getType());", "+\t\t\tassertEquals(\"#2.2\", 1, model1.getBlockOffset());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertTrue(\"#3.0\", model1._braces.isEmpty());", "-\t\t\tassertEquals(\"#3.1\", 0, model1._offset);", "+\t\t\tassertTrue(\"#3.0\", model1.getBraces().isEmpty());", "+\t\t\tassertEquals(\"#3.1\", 0, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#4.0\", \"(\", model1._cursor.current().getType());", "+\t\t\tassertEquals(\"#4.0\", \"(\", model1.getCursor().current().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.current().getState());", "-\t\t\tassertTrue(\"#4.2\", model1._cursor.prevItem().isGap());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "+\t\t\tassertTrue(\"#4.2\", model1.getCursor().prevItem().isGap());", "-\t\t\t\t\t\t\t\t\t model1._cursor.prevItem().getState());", "-\t\t\tassertEquals(\"#4.4\", \"*/\", model1._cursor.nextItem().getType());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "+\t\t\tassertEquals(\"#4.4\", \"*/\", model1.getCursor().nextItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#5.0\", \"//\", model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#5.1\", 1, model1._offset);", "-\t\t\tassertEquals(\"#5.2\", \"*\", model1._cursor.nextItem().getType());", "+\t\t\tassertEquals(\"#5.0\", \"//\", model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#5.1\", 1, model1.getBlockOffset());", "+\t\t\tassertEquals(\"#5.2\", \"*\", model1.getCursor().nextItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#6.0\", \"*\", model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#6.1\", 0, model1._offset);", "-\t\t\tassertEquals(\"#6.2\", \"(\", model1._cursor.prevItem().getType());", "+\t\t\tassertEquals(\"#6.0\", \"*\", model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#6.1\", 0, model1.getBlockOffset());", "+\t\t\tassertEquals(\"#6.2\", \"(\", model1.getCursor().prevItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.prevItem().getState());\t\t\t", "+\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());\t\t\t", "-\t\t\t\t\t\t\t\t\t model1._cursor.current().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-\t\t\tassertEquals(\"#7.0\", \"/*\", model1._cursor.current().getType());", "-\t\t\tassertEquals(\"#7.1\", 1, model1._offset);", "-\t\t\tassertEquals(\"#7.2\", \"\\n\", model1._cursor.nextItem().getType());", "+\t\t\tassertEquals(\"#7.0\", \"/*\", model1.getCursor().current().getType());", "+\t\t\tassertEquals(\"#7.1\", 1, model1.getBlockOffset());", "+\t\t\tassertEquals(\"#7.2\", \"\\n\", model1.getCursor().nextItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.nextItem().getState());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#8.1\", \"(\", model1._cursor.prevItem().getType());", "+\t\t\tassertEquals(\"#8.1\", \"(\", model1.getCursor().prevItem().getType());", "-\t\t\t\t\t\t\t\t\t model1._cursor.prevItem().getState());", "-\t\t\tassertEquals(\"#8.3\", \"*/\", model1._cursor.current().getType());", "+\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "+\t\t\tassertEquals(\"#8.3\", \"*/\", model1.getCursor().current().getType());"]}], "num": 31191}
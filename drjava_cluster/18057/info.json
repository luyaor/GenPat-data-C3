{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf28f97a825f936bcb3c8398744b2a7a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "518fccb5e0b7354ed5be650537b07c39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "5d8a3bdb2b4d5525535575f357c7961c2851e09a", "commitAfterChange": "2d393792d3779835588c185ebb45db67c3e34dc4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm,                       final FindResultsPanel panel)", "signatureAfterChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm,                       final FindResultsPanel panel)", "diff": ["-        final StringBuilder sb = new StringBuilder();", "-        int endSel = fr.getFoundOffset();", "-        int startSel = endSel - searchLen;", "+        int end = fr.getFoundOffset();", "+        int start = end - searchLen;", "-          final Position startPos = doc.createPosition(startSel);", "-          final Position endPos = doc.createPosition(endSel);", "+          final Position startPos = doc.createPosition(start);", "+          final Position endPos = doc.createPosition(end);", "-          // create excerpt string", "+          // lazily create excerpt string", "-          // The following were commented out because they require doc to be loaded as a Definitions (Swing) Document,", "-          // but results processing presumes this access in many places", "-          int excerptEndSel = doc._getLineEndPos(endSel);", "-          int excerptStartSel = doc._getLineStartPos(startSel);", "-// Text only alternative to preceding two statements commented out          ", "-//          String text = doc.getText();", "-//          final int len = text.length();", "-//          int i = endSel;", "-//          while (i < len && text.charAt(i) != '\\n') ++i;", "-//          final int excerptEndSel = i;", "-//          ", "-//          i = startSel;", "-//          while (i >= 0 && text.charAt(i) != '\\n') --i; // the end of the line", "-//          final int excerptStartSel = i + 1;              // either 0 or the beginning of the line", "+          StringSuspension ss = new StringSuspension() {", "+            public String eval() {", "+              try {", "+                int endSel = endPos.getOffset();", "+                int startSel = startPos.getOffset();", "+                int excerptEndSel = doc._getLineEndPos(endSel);", "+                int excerptStartSel = doc._getLineStartPos(startSel);", "+                ", "+                int length = Math.min(120, excerptEndSel - excerptStartSel);", "+                ", "+                // this highlights the actual region in red", "+                int startRed = startSel - excerptStartSel;", "+                int endRed = endSel - excerptStartSel;", "+                ", "+                String text = doc.getText(excerptStartSel, length);", "+                String s = text.trim();  // trims both front and end", "+                int sLength = s.length();", "+                ", "+                // We need a global invariant concerning non-displayable characters.  Why filter them here but not elsewhere?", "+//              // change control characters and ones that may not be displayed to spaces", "+//              for (int j = 0; j < s.length(); ++j) {", "+//                sb.append((s.charAt(j) < ' ' || s.charAt(j) > 127) ? ' ' :  s.charAt(j));", "+//              }", "+//              s = sb.toString();", "+//              ", "+//              trim the front", "+//                for (int j = 0; j < s.length(); ++j) {", "+//                if (! Character.isWhitespace(s.charAt(j))) break;", "+//                --startRed;", "+//                --endRed;", "+//              }", "+//              ", "+//              // trim the end", "+//              s = s.trim();", "+                ", "+                int trimLeftCt = text.indexOf(s.charAt(0));", "+                int trimRightCt = text.length() - sLength;", "+                // bound startRed and endRed", "+                startRed = startRed - trimLeftCt;  // offset in s rather than in text", "+                endRed = endRed - trimRightCt;", "+                if (startRed < 0) { startRed = 0; }", "+                if (startRed > sLength) { startRed = sLength; }", "+                if (endRed < startRed) { endRed = startRed; }", "+                if (endRed > sLength) { endRed = sLength; }", "+                ", "+                // create the excerpt string", "+                StringBuilder sb = new StringBuilder(StringOps.encodeHTML(s.substring(0, startRed)));", "+                sb.append(\"<font color=#ff0000>\");", "+                sb.append(StringOps.encodeHTML(s.substring(startRed, endRed)));", "+                sb.append(\"</font>\");", "+                sb.append(StringOps.encodeHTML(s.substring(endRed)));", "+//                sb.append(StringOps.encodeHTML(AbstractDJDocument.getBlankString(120 - sLength)));", "+                return sb.toString();", "+              }", "+              catch(BadLocationException e) { return \"***BadLocationException in StringSuspension.eval()***\"; }", "+            }", "+          };", "-          int length = Math.min(120, excerptEndSel - excerptStartSel);", "-          ", "-          // this highlights the actual region in red", "-          int startRed = startSel - excerptStartSel;", "-          int endRed = endSel - excerptStartSel;", "-          String s = doc.getText(excerptStartSel, length);", "-          ", "-          // change control characters and ones that may not be displayed to spaces", "-          for (int j = 0; j < s.length(); ++j) {", "-            sb.append((s.charAt(j) < ' ' || s.charAt(j) > 127) ? ' ' :  s.charAt(j));", "-          }", "-          s = sb.toString();", "-          ", "-          // trim the front", "-          for (int j = 0; j < s.length(); ++j) {", "-            if (! Character.isWhitespace(s.charAt(j))) break;", "-            --startRed;", "-            --endRed;", "-          }", "-          ", "-          // trim the end", "-          s = s.trim();", "-          ", "-          // bound startRed and endRed", "-          if (startRed < 0) { startRed = 0; }", "-          if (startRed > s.length()) { startRed = s.length(); }", "-          if (endRed < startRed) { endRed = startRed; }", "-          if (endRed > s.length()) { endRed = s.length(); }", "-          ", "-          // create the excerpt string", "-          sb.setLength(0);", "-          sb.append(StringOps.encodeHTML(s.substring(0, startRed)));", "-          sb.append(\"<font color=#ff0000>\");", "-          sb.append(StringOps.encodeHTML(s.substring(startRed, endRed)));", "-          sb.append(\"</font>\");", "-          sb.append(StringOps.encodeHTML(s.substring(endRed)));", "-          rm.addRegion(new MovingDocumentRegion(doc, doc.getFile(), startPos, endPos, sb.toString()));", "+          rm.addRegion(new MovingDocumentRegion(doc, doc.getFile(), startPos, endPos, ss));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d88b5055a2ed86f0fda7deb9535e4462", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "commitAfterChange": "1e5237b2401d25a04c08b7b54162568a6d55c836", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["+    // Cache the config object, since we use it a zillion times.", "+    final Configuration config = DrJava.getConfig();", "+    ", "-    File workDir = DrJava.getConfig().getSetting(WORKING_DIRECTORY);", "+    File workDir = config.getSetting(WORKING_DIRECTORY);", "-    setBounds(0, 0, GUI_WIDTH, GUI_HEIGHT);", "-    setSize(GUI_WIDTH, GUI_HEIGHT);", "+    int width = config.getSetting(WINDOW_WIDTH).intValue();", "+    int height = config.getSetting(WINDOW_HEIGHT).intValue();", "+    setBounds(0, 0, width, height);", "+    setSize(width, height);", "+    ", "-    _promptBeforeQuit = DrJava.getConfig().getSetting(QUIT_PROMPT).booleanValue();", "+    _promptBeforeQuit = config.getSetting(QUIT_PROMPT).booleanValue();", "-    Font doclistFont = DrJava.getConfig().getSetting(FONT_DOCLIST);", "+    Font doclistFont = config.getSetting(FONT_DOCLIST);", "+    // Set the colors", "+    _updateNormalColor();", "+    _updateBackgroundColor();", "+    ", "+    // Add OptionListeners for the colors.", "+    config.addOptionListener", "+      (DEFINITIONS_NORMAL_COLOR, new NormalColorOptionListener());", "+    config.addOptionListener", "+      (DEFINITIONS_BACKGROUND_COLOR, new BackgroundColorOptionListener());", "+    ", "-    DrJava.getConfig().addOptionListener(OptionConstants.FONT_MAIN, new MainFontOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.FONT_LINE_NUMBERS, new LineNumbersFontOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.FONT_DOCLIST, new DoclistFontOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.FONT_TOOLBAR, new ToolbarFontOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.TOOLBAR_ICONS_ENABLED, new ToolbarOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.TOOLBAR_TEXT_ENABLED, new ToolbarOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.WORKING_DIRECTORY, new WorkingDirOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.LINEENUM_ENABLED, new LineEnumOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.QUIT_PROMPT, new QuitPromptOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.RECENT_FILES_MAX_SIZE, new RecentFilesOptionListener());", "-    DrJava.getConfig().addOptionListener(OptionConstants.JSR14_LOCATION, new OptionListener<File>() {", "+    config.addOptionListener", "+      (FONT_MAIN, new MainFontOptionListener());", "+    config.addOptionListener", "+      (FONT_LINE_NUMBERS, new LineNumbersFontOptionListener());", "+    config.addOptionListener", "+      (FONT_DOCLIST, new DoclistFontOptionListener());", "+    config.addOptionListener", "+      (FONT_TOOLBAR, new ToolbarFontOptionListener());", "+    config.addOptionListener", "+      (TOOLBAR_ICONS_ENABLED, new ToolbarOptionListener());", "+    config.addOptionListener", "+      (TOOLBAR_TEXT_ENABLED, new ToolbarOptionListener());", "+    config.addOptionListener", "+      (WORKING_DIRECTORY, new WorkingDirOptionListener());", "+    config.addOptionListener", "+      (LINEENUM_ENABLED, new LineEnumOptionListener());", "+    config.addOptionListener", "+      (QUIT_PROMPT, new QuitPromptOptionListener());", "+    config.addOptionListener", "+      (RECENT_FILES_MAX_SIZE, new RecentFilesOptionListener());", "+    config.addOptionListener", "+      (JSR14_LOCATION, new OptionListener<File>() {", "-    DrJava.getConfig().addOptionListener(OptionConstants.LOOK_AND_FEEL, new OptionListener<String>() {", "+    config.addOptionListener(LOOK_AND_FEEL, new OptionListener<String>() {", "-        if (DrJava.getConfig().getSetting(OptionConstants.WARN_CHANGE_LAF).booleanValue()) {", "+        if (config.getSetting(WARN_CHANGE_LAF).booleanValue()) {", "-            DrJava.getConfig().setSetting(OptionConstants.WARN_CHANGE_LAF, Boolean.FALSE);", "+            config.setSetting(WARN_CHANGE_LAF, Boolean.FALSE);"]}], "num": 18057}
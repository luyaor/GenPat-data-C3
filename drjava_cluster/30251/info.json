{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "956bc7237806874ab5539831e6d3c3aa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b617fdfb35d557cf2ab11503250d4728", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "commitAfterChange": "42161d6697319e0431a875a1f8336eb6cdd1fe73", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public synchronized void testBreakpointsNonPublicClasses()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testBreakpointsAndStepsInNonPublicClasses()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-  public synchronized void testBreakpointsNonPublicClasses() ", "+  public synchronized void testBreakpointsAndStepsInNonPublicClasses() ", "-    BreakpointTestListener debugListener = new BreakpointTestListener();", "+    StepTestListener debugListener = new StepTestListener();", "-      ", "+    ", "+    // Step to next line", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) System.out.println(\"****\"+getInteractionsText());", "+    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(2); // fires", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    assertInteractionsContains(\"Baz Line 1\");", "+    assertInteractionsDoesNotContain(\"Bar Line 1\");", "-    debugListener.assertCurrThreadResumedCount(1);  //fires (no waiting)", "+    debugListener.assertCurrThreadResumedCount(2);  //fires (no waiting)", "-    debugListener.assertThreadLocationUpdatedCount(2);  //fires", "-    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(3);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(3);  //fires", "-    assertInteractionsContains(\"Baz Line 1\");", "-    debugListener.assertCurrThreadResumedCount(2);  //fires (no waiting)", "+    debugListener.assertCurrThreadResumedCount(3);  //fires (no waiting)", "-    debugListener.assertThreadLocationUpdatedCount(2);", "-    debugListener.assertCurrThreadSuspendedCount(2);", "+    debugListener.assertThreadLocationUpdatedCount(3);", "+    debugListener.assertCurrThreadSuspendedCount(3);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcff35de693b892b9d0c25dadb85fb4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "17285283461a98a54216b38ffd842a9ade691a61", "commitAfterChange": "c5c5f6e584e52b0f1a2d2a9448693aba4f7f3980", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testNonStaticWatches() throws Exception", "signatureAfterChange": "   public void testNonStaticWatches() throws Exception", "diff": ["-    debugListener.assertBreakpointSetCount(1);", "+    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"System.out.println(\\\"localVar = \\\" + localVar);\"), 32);", "+    debugListener.assertBreakpointSetCount(2);", "-      interpretIgnoreResult(\"new Monkey().new MonkeyInner().new MonkeyInnerInner().innerMethod()\");", "+      interpretIgnoreResult(\"new Monkey().bar()\");//new MonkeyInner().new MonkeyInnerInner().innerMethod()\");", "+    _debugger.addWatch(\"localVar\");", "+    // Resumes one thread, finishing it and switching to the next break point", "+    synchronized(_notifierLock) {", "+      _asyncResume();", "+      _waitForNotifies(3);  // breakpointReached, suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(6);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(7); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(8);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(8);  // fires", "+    debugListener.assertBreakpointReachedCount(2);", "+    debugListener.assertCurrThreadDiedCount(0);    ", "+    ", "+    // Test watching a final local variable of an outer class", "+    watches = _debugger.getWatches();", "+    assertEquals(\"watch name incorrect\", \"localVar\", watches.elementAt(6).getName());", "+    assertEquals(\"watch value incorrect\", \"11\", watches.elementAt(6).getValue());", "+    ", "+    // Close doc and make sure breakpoints are removed", "+    _model.closeFile(doc);", "+    debugListener.assertBreakpointRemovedCount(2);  //fires (no waiting)", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f41a6a729b920e84927a9c874b9ada6e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "commitAfterChange": "42161d6697319e0431a875a1f8336eb6cdd1fe73", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void testStepInto()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testStepInto()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-      _waitForNotifies(1);  // suspended", "+      _waitForNotifies(2);  // suspended, updated", "-    debugListener.assertThreadLocationUpdatedCount(1);", "-    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(2);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(2);  // fires", "-      _waitForNotifies(1);  // suspended", "+      _waitForNotifies(2);  // suspended, updated", "-    debugListener.assertThreadLocationUpdatedCount(1);  ", "+    debugListener.assertThreadLocationUpdatedCount(3);  // fires", "-    debugListener.assertCurrThreadSuspendedCount(3);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(3);  // fires", "-      _waitForNotifies(1);  // suspended", "+      _waitForNotifies(2);  // suspended, updated", "-    debugListener.assertThreadLocationUpdatedCount(1);", "+    debugListener.assertThreadLocationUpdatedCount(4);  // fires", "-    debugListener.assertCurrThreadSuspendedCount(4);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(4);  // fires", "-      _waitForNotifies(1);  // suspended", "+      _waitForNotifies(2);  // suspended, updated", "-      _waitForNotifies(1);  // suspended", "+      _waitForNotifies(2);  // suspended, updated", "-    debugListener.assertThreadLocationUpdatedCount(1);", "+    debugListener.assertThreadLocationUpdatedCount(6);  // fires"]}], "num": 30251}
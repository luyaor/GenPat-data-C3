{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0361098addbada8c7bd17f227fcbb3fe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04fa8aa483efcfd14852e10dde940a12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "               public void testForSimpleNamedClassInstantiation()", "signatureAfterChange": "               public void testForSimpleNamedClassInstantiation()", "diff": ["-      SimpleNamedClassInstantiation ci1 = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"simpleClass\", new Type[0]), ", "-                                                                            new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      ParenthesizedExpressionList pel1 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {new IntegerLiteral(SourceInfo.NONE, 5)});", "+      SimpleNamedClassInstantiation ci1 = ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"simpleClass\", new Type[0]), ", "+                                          pel1); ", "+      SimpleNamedClassInstantiation ci3 = ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"simpleClass\", new Type[0]), ", "+                                          new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-      SimpleNamedClassInstantiation ci3 = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"simpleClass\", new Type[0]), ", "-                                                                            new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      ", "-      //if the type is not in the symbolTable, an error should be added on lookup, and null should be returned:", "+      // if the type is not in the symbolTable, an error should be added on lookup, and null should be returned:", "-      assertEquals(\"Should return simpleClass even though it could not really access it\", simpleClass.getInstanceData(), ci3.visit(_etc));", "+      assertEquals(\"Should return simpleClass even though it could not really access it\", ", "+                   simpleClass.getInstanceData(), ci3.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"The class or interface simpleClass is package protected because there is no access specifier and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface simpleClass is package protected because there is no access specifier and \"", "+                     + \"cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());", "-      //if class is in symbol table and visible, but there is not a matching constructor, should give an error but still return instance of type", "-      simpleClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "+      // if class is in symbol table and visible, but there is not a matching constructor, should give an error ", "+      // but still return instance of type", "+      simpleClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "-      assertEquals(\"Should return simpleClass even though it could not find constructor\", simpleClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return simpleClass even though it could not find constructor\", simpleClass.getInstanceData(), ", "+                   ci1.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class simpleClass with signature: simpleClass(int).\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"No constructor found in class simpleClass with signature: simpleClass(int).\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return simpleClass even though it cannot really be instantiated\", simpleClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return simpleClass even though it cannot really be instantiated\", ", "+                   simpleClass.getInstanceData(), ci1.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"simpleClass is abstract and thus cannot be instantiated\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"simpleClass is abstract and thus cannot be instantiated\", ", "+                   errors.getLast().getFirst());", "-      SimpleNamedClassInstantiation ci2 = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"A.B\", new Type[0]), ", "-                                                                            new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      SimpleNamedClassInstantiation ci2 = ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"A.B\", new Type[0]), ", "+                                          new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-      a.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      b.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      ", "-      ", "-      ", "+      a.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+      b.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+", "-      assertEquals(\"Error message should be correct\", \"A.B is not a static inner class, and thus cannot be instantiated from this context.  Perhaps you meant to use an instantiation of the form new A().new B()\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"A.B is not a static inner class, and thus cannot be instantiated from this context.  Perhaps \"", "+                     +\"you meant to use an instantiation of the form new A().new B()\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should still be just 5 errors\", 5, errors.size());", "-      ", "+      assertEquals(\"Should still be just 5 errors\", 5, errors.size()); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc1073f0a93e72d781588ffdb1b62392", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "          public void testClassInstantiationHelper()", "signatureAfterChange": "          public void testClassInstantiationHelper()", "diff": ["-      ClassInstantiation simpleCI = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                                                      new ClassOrInterfaceType(SourceInfo.NO_INFO, \"testClass\", new Type[0]),", "-                                                                      new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      ClassInstantiation complexCI = new ComplexNamedClassInstantiation(SourceInfo.NO_INFO,", "-                                                                        new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Outer\")),", "-                                                                        new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Inner\", new Type[0]),", "-                                                                        new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      ClassInstantiation simpleCI = ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"testClass\", new Type[0]),", "+                                          new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "+      ClassInstantiation complexCI = ", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE,", "+                                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"Outer\")),", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"Inner\", new Type[0]),", "+                                           new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-      ClassInstantiation badArgs = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO,", "-                                                                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"anotherClass\", new Type[0]),", "-                                                                     new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))}));", "+      ParenthesizedExpressionList pel = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, ", "+                                        new Expression[] {new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                  new Word(SourceInfo.NONE, \"int\"))});", "+      ClassInstantiation badArgs =  ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE,", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"anotherClass\", new Type[0]),", "+                                          pel);", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.classInstantiationHelper(badArgs, SymbolData.DOUBLE_TYPE));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.classInstantiationHelper(badArgs, SymbolData.DOUBLE_TYPE));", "-      assertEquals(\"Error message should be correct\", \"Cannot pass a class or interface name as a constructor argument.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Cannot pass a class or interface name as a constructor argument.  Perhaps you meant to create a \"", "+                     + \"new instance of int\", errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), _etc.classInstantiationHelper(simpleCI, testClass));", "+      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), ", "+                   _etc.classInstantiationHelper(simpleCI, testClass));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class testClass with signature: testClass().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"No constructor found in class testClass with signature: testClass().\", errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of Outer.Inner\", outerInner.getInstanceData(), _etc.classInstantiationHelper(complexCI, outerInner));", "+      assertEquals(\"Should return instance of Outer.Inner\", outerInner.getInstanceData(), ", "+                   _etc.classInstantiationHelper(complexCI, outerInner));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class Outer.Inner with signature: Inner().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"No constructor found in class Outer.Inner with signature: Inner().\", errors.getLast().getFirst());", "-      //if everything is in order, just return", "+      // if everything is in order, just return", "-      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), _etc.classInstantiationHelper(simpleCI, testClass));", "+      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), ", "+                   _etc.classInstantiationHelper(simpleCI, testClass));"]}], "num": 10441}
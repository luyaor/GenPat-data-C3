{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "539c64b1459a82dd821a9ffe391943d2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "040037d8fb10d68a1fa83902f150a8eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public TypeData forInstanceInitializer(InstanceInitializer that)", "signatureAfterChange": "     public TypeData forInstanceInitializer(InstanceInitializer that)", "diff": ["-    throw new RuntimeException(\"Internal Program Error: Instance Initializers are not supported.  This should have been caught before the Type Checker Pass.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: Instance Initializers are not supported.\" + ", "+                               \"  This should have been caught before the Type Checker Pass.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18345f18d84592d39b09339ef1b16454", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public TypeData forConditionalExpressionOnly(ConditionalExpression that, TypeData condition_result, TypeData forTrue_result, TypeData forFalse_result)", "signatureAfterChange": "   public TypeData forConditionalExpressionOnly(ConditionalExpression that, TypeData condition_result,                                                 TypeData forTrue_result, TypeData forFalse_result)", "diff": ["-   */", "-  public TypeData forConditionalExpressionOnly(ConditionalExpression that, TypeData condition_result, TypeData forTrue_result, TypeData forFalse_result) {", "-    throw new RuntimeException (\"Internal Program Error: Conditional expressions are not supported.  This should have been caught before the TypeChecker.  Please report this bug.\");", "+  /** Not currently supported */", "+  public TypeData forConditionalExpressionOnly(ConditionalExpression that, TypeData condition_result, ", "+                                               TypeData forTrue_result, TypeData forFalse_result) {", "+    throw new RuntimeException (\"Internal Program Error: Conditional expressions are not supported.  \" + ", "+                                \"This should have been caught before the TypeChecker.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "246f62ee7cccd255856e8dda8da03958", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public TypeData forShiftBinaryExpressionOnly(ShiftBinaryExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forShiftBinaryExpressionOnly(ShiftBinaryExpression that, TypeData left_result, TypeData right_result)", "diff": ["-    throw new RuntimeException (\"Internal Program Error: BinaryShifts are not supported.  This should have been caught before the TypeChecker.  Please report this bug.\");", "+    throw new RuntimeException (\"Internal Program Error: BinaryShifts are not supported.  \" + ", "+                                \"This should have been caught before the TypeChecker.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27b63204df793a94a2e51f464dd219df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData value_result, TypeData type_result)", "signatureAfterChange": "   public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData value_result, TypeData type_result)", "diff": ["-   */", "+  /** Not currently supported */", "-    throw new RuntimeException(\"Internal Program Error: instanceof is not currently supported.  This should have been caught before the Type Checker.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: instanceof is not currently supported.\" + ", "+                               \"  This should have been caught before the Type Checker.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33eeeca62c7feee68196b26462a979c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   public TypeData forComplexInitializedArrayInstantiation(ComplexInitializedArrayInstantiation that)", "signatureAfterChange": "   public TypeData forComplexInitializedArrayInstantiation(ComplexInitializedArrayInstantiation that)", "diff": ["-    throw new RuntimeException(\"Internal Program Error: Complex Initialized Array Instantiations are not legal Java.  This should have been caught before the Type Checker.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: Complex Initialized Array Instantiations are not legal Java.\" + ", "+                               \"  This should have been caught before the Type Checker.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451462721104f69c7e9e075e45c64606", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public TypeData forNoOpExpressionOnly(NoOpExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forNoOpExpressionOnly(NoOpExpression that, TypeData left_result, TypeData right_result)", "diff": ["-    throw new RuntimeException(\"Internal Program Error: The student is missing an operator.  This should have been caught before the TypeChecker.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: The student is missing an operator.  \" + ", "+                               \"This should have been caught before the TypeChecker.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50887ee3032b60f197bd2ca64bfb2655", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public TypeData forEmptyExpressionOnly(EmptyExpression that)", "signatureAfterChange": "   public TypeData forEmptyExpressionOnly(EmptyExpression that)", "diff": ["-   */", "+    */", "-    throw new RuntimeException(\"Internal Program Error: EmptyExpression encountered.  Student is missing something.  Should have been caught before TypeChecker.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: EmptyExpression encountered.  Student is missing something.\" + ", "+                               \"  Should have been caught before TypeChecker.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7899d6efc86dfbbe2c50495572e9d26e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public TypeData forBitwiseNotExpressionOnly(BitwiseNotExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forBitwiseNotExpressionOnly(BitwiseNotExpression that, TypeData value_result)", "diff": ["-     */", "+  /** Not Currently Supported. */", "-    throw new RuntimeException(\"Internal Program Error: BitwiseNot is not supported.  It should have been caught before getting to the TypeChecker.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: BitwiseNot is not supported.  \" + ", "+                               \"It should have been caught before getting to the TypeChecker.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "811733c6016869e08fb66c3c71d03dc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public TypeData forShiftAssignmentExpressionOnly(ShiftAssignmentExpression that, TypeData name_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forShiftAssignmentExpressionOnly(ShiftAssignmentExpression that, TypeData name_result,                                                     TypeData value_result)", "diff": ["-  public TypeData forShiftAssignmentExpressionOnly(ShiftAssignmentExpression that, TypeData name_result, TypeData value_result) {", "-    throw new RuntimeException (\"Internal Program Error: Shift assignment operators are not supported.  This should have been caught before the TypeChecker.  Please report this bug.\");", "+  public TypeData forShiftAssignmentExpressionOnly(ShiftAssignmentExpression that, TypeData name_result, ", "+                                                   TypeData value_result) {", "+    throw new RuntimeException (\"Internal Program Error: Shift assignment operators are not supported.  \" + ", "+                                \"This should have been caught before the TypeChecker.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a170a6c36c3813ac5225b6c138dbf289", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "   public TypeData forComplexUninitializedArrayInstantiation(ComplexUninitializedArrayInstantiation that)", "signatureAfterChange": "   public TypeData forComplexUninitializedArrayInstantiation(ComplexUninitializedArrayInstantiation that)", "diff": ["-    throw new RuntimeException(\"Internal Program Error: Complex Uninitialized Array Instantiations are not legal Java.  This should have been caught before the Type Checker.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: Complex Uninitialized Array Instantiations are not legal Java.\" +", "+                               \"  This should have been caught before the Type Checker.  Please report this bug.\");"]}], "num": 18163}
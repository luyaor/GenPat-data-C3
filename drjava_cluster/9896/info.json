{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7782bdcacb978c849a8f39ff4566cc9d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0045f5e951c21b0cb2ec410b7aaa9298", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 444, "methodNumberAfterChange": 444, "signatureBeforeChange": "\r \r   public void forDivideExpression(DivideExpression that)", "signatureAfterChange": "    public void forDivideExpression(DivideExpression that)", "diff": ["-\r", "-  public void forDivideExpression(DivideExpression that) {\r", "-    forDivideExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forDivideExpressionOnly(that);\r", "-  }\r", "+", "+  public void forDivideExpression(DivideExpression that) {", "+    forDivideExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forDivideExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "007d7b274bfc3db8b44627d294b28305", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public void forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that)", "signatureAfterChange": "   public void forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00825d61897994e508c7f06ccea39a03", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/InsideBlockComment.java", "commitBeforeChange": "3b63bd62ccd1666c210054736f0739b2d5581af4", "commitAfterChange": "a5516b7eda904742cbd6f82d228cdf505735bd33", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "signatureAfterChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "diff": ["-    if (copyCursor.atEnd()) {", "-      return STUTTER;", "-    }", "+    if (copyCursor.atEnd()) return STUTTER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00f3f43199a459531f2479bed426e405", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 415, "methodNumberAfterChange": 416, "signatureBeforeChange": "      private void hideRecentDocFrame()", "signatureAfterChange": "      private void hideRecentDocFrame()", "diff": ["-      if (doc != null) {", "-        _model.getDocumentNavigator().setActiveDoc(doc);", "-      }", "+      if (doc != null) _model.getDocumentNavigator().setActiveDoc(doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015d7e42b3eba88dbc4b6b3b91beb376", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionExistsCharInPrevStmt.java", "commitBeforeChange": "6c31f49b491d4a01bd2ddbae62b5ee4f76d52129", "commitAfterChange": "b17c3d3d0edf27a5d35f38839287840198b5808d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-   */", "+  /** Searches through the previous statement to determine if it contains char _lookFor (unshadowed). */", "-    try {", "-      endPreviousStatement = ", "-        doc.findPrevDelimiter(doc.getCurrentLocation(), new char[] {';','}','{'});", "-    } catch (BadLocationException ble) {", "+    try { endPreviousStatement = doc.findPrevDelimiter(doc.getCurrentLocation(), new char[] {';','}','{'}); } ", "+    catch (BadLocationException ble) {", "-    if (endPreviousStatement == -1) {", "-      return false;", "-    }", "+    if (endPreviousStatement == -1) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019d9dc8e8e3eb93471ec31a420b2f73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/SwingWorker.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public Object get()", "signatureAfterChange": "   public Object get()", "diff": ["-      if (t == null) {", "-        return getValue();", "-      }", "-      try {", "-        t.join();", "-      }", "+      if (t == null) return getValue();", "+      try { t.join(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d4ab93f1d10340bc51f76bfbc21b7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "fbab2bd705dc6109a68454696cb8f397eb070aa2", "commitAfterChange": "f36b72faed8290534c0d76809ee0a1b473552163", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void defineVariable(String name, Object value, Class<?> type)", "signatureAfterChange": "   public void defineVariable(String name, Object value, Class<?> type)", "diff": ["-    if (type == null) {", "-      type = java.lang.Object.class;", "-    }", "+    if (type == null) type = java.lang.Object.class;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02e530bcd460e4a9ba5f50e847b5e1b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRuleQuestion.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int pos, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int pos, Indenter.IndentReason reason)", "diff": ["-    if (oldPos > doc.getLength()) {", "-      oldPos = doc.getLength();", "-    }", "+    if (oldPos > doc.getLength()) oldPos = doc.getLength();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0479330369e473573dc6091d7ef11712", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ClasspathFilter.java", "commitBeforeChange": "8f8a64864bd9c3c9658401188aaec5c9c0dfe4f7", "commitAfterChange": "9e1a29777c7e5973840e817aca59ceea66af7a9c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static String getExtension(File f)", "signatureAfterChange": "   public static String getExtension(File f)", "diff": ["-   */", "+  /* Get the extension of a file. */", "-    if (i > 0 && i < s.length() - 1) {", "-      ext = s.substring(i + 1).toLowerCase();", "-    }", "+    if (i > 0 && i < s.length() - 1) ext = s.substring(i + 1).toLowerCase();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05f7e0070bb93f24550a46f015c2344a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 388, "signatureBeforeChange": "\r \r   public void forUnlabeledBreakStatement(UnlabeledBreakStatement that)", "signatureAfterChange": "    public void forUnlabeledBreakStatement(UnlabeledBreakStatement that)", "diff": ["-\r", "-  public void forUnlabeledBreakStatement(UnlabeledBreakStatement that) {\r", "-    forUnlabeledBreakStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forUnlabeledBreakStatementOnly(that);\r", "-  }\r", "+", "+  public void forUnlabeledBreakStatement(UnlabeledBreakStatement that) {", "+    forUnlabeledBreakStatementDoFirst(that);", "+    if (prune(that)) return;", "+    forUnlabeledBreakStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0620b40d79f037fbebc9c3165dffe854", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRuleWithTrace.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected static void _addToIndentTrace(String ruleName, String direction, boolean terminus)", "signatureAfterChange": "   protected static void _addToIndentTrace(String ruleName, String direction, boolean terminus)", "diff": ["-   */", "+  /** This rule just adds to the trace kept in trace */", "-      if (startOver) {", "- trace = new Vector<String>();", "-      }", "+      if (startOver) trace = new Vector<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0683404097d492227a628e9e0281eae4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public void testItAll() throws Exception", "signatureAfterChange": "     public void testItAll() throws Exception", "diff": ["-", "+ ", "-    for (int i = 0; i < 2; i++) {", "-      _testMaster.runTestSequence();", "-    }", "+    for (int i = 0; i < 2; i++) _testMaster.runTestSequence();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "069db107e12032b109f77125a18f57ee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsEventNotifier.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void interpreterReady()", "signatureAfterChange": "   public void interpreterReady()", "diff": ["-   */", "+  /** Called when the interactions window is reset. */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).interpreterReady();", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).interpreterReady();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06b2912b6703cd9937198174b917de7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 470, "methodNumberAfterChange": 470, "signatureBeforeChange": "\r \r   public void forSimpleUninitializedArrayInstantiation(SimpleUninitializedArrayInstantiation that)", "signatureAfterChange": "    public void forSimpleUninitializedArrayInstantiation(SimpleUninitializedArrayInstantiation that)", "diff": ["-\r", "-  public void forSimpleUninitializedArrayInstantiation(SimpleUninitializedArrayInstantiation that) {\r", "-    forSimpleUninitializedArrayInstantiationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    that.getDimensionSizes().visit(this);\r", "-    forSimpleUninitializedArrayInstantiationOnly(that);\r", "-  }\r", "+", "+  public void forSimpleUninitializedArrayInstantiation(SimpleUninitializedArrayInstantiation that) {", "+    forSimpleUninitializedArrayInstantiationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    that.getDimensionSizes().visit(this);", "+    forSimpleUninitializedArrayInstantiationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0725f61814658739182469165b3e6f58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "35ca78e33b0503c2a6070986170dae99ba9dcb1a", "commitAfterChange": "6136e4c5753a47e4bcb40afa831b9c58e353fd69", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void setBuildDirectory(File f)", "signatureAfterChange": "   public void setBuildDirectory(File f)", "diff": ["-  /** Sets the class with the project's main method. */", "+  /** Sets the class with the project's main method.  Degenerate version overridden in DefaultGlobalModel. */", "-    if (f != null) {", "-//      //      System.out.println(\"adding: \" + f.getAbsolutePath());", "-//      try {", "-//        _interpreterControl.addBuildDirectoryClassPath(new File(f.getAbsolutePath()).toURL());", "-//      }", "-//      catch(MalformedURLException murle) {", "-//        // this is bad! change this! we should handle this exception better!", "-//        // show a popup like \"invalide build directory\" or something", "-//        throw new RuntimeException(murle);", "-//      }", "+    if (f != null) ", "-    }", "-    ", "-    //        InteractionsDocument iDoc = _interactionsModel.getDocument();", "-    //        synchronized(_interpreterControl) {", "-    //          iDoc.clearCurrentInput();", "-    //          iDoc.insertBeforeLastPrompt(CLASSPATH_OUT_OF_SYNC_MSG, InteractionsDocument.ERROR_STYLE);", "-    //        }", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073cc446e493ac7d67a02ac18284bfd5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "29114a3ab27f49e46885f181f9f058e018ee6b61", "commitAfterChange": "667a3b3eeb7df33831045c52d97320979614b89d", "methodNumberBeforeChange": 367, "methodNumberAfterChange": 367, "signatureBeforeChange": "   boolean _closeProject(boolean quitting)", "signatureAfterChange": "   boolean _closeProject(boolean quitting)", "diff": ["-      if (_model.getDocumentCount() == 1) {", "-        _model.setActiveFirstDocument();", "-      }", "+      if (_model.getDocumentCount() == 1) _model.setActiveFirstDocument();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0766d52ca71eb29c6d33ae9e72e64e59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   private int _lineNumber(String sw, String classname)", "signatureAfterChange": "   private int _lineNumber(String sw, String classname)", "diff": ["-", "-    ", "-    if (idxClassname == -1) {", "-      return -1;", "-    }", "+    if (idxClassname == -1) return -1;", "-    catch (NumberFormatException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (NumberFormatException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0845559ce2b1dba169f91ba665e4ba08", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 399, "methodNumberAfterChange": 399, "signatureBeforeChange": "\r \r   public void forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "    public void forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-\r", "-  public void forAbstractMethodDef(AbstractMethodDef that) {\r", "-    forAbstractMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);\r", "-    that.getResult().visit(this);\r", "-    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);\r", "-    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);\r", "-    forAbstractMethodDefOnly(that);\r", "-  }\r", "+", "+  public void forAbstractMethodDef(AbstractMethodDef that) {", "+    forAbstractMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);", "+    that.getResult().visit(this);", "+    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);", "+    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);", "+    forAbstractMethodDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08e4fafedd299c570a50eb32813eca01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void appendExceptionResult(String exceptionClass, String message,                                     String stackTrace, String styleName)", "signatureAfterChange": "   public synchronized void appendExceptionResult(String exceptionClass, String message, String stackTrace,                                                  String styleName)", "diff": ["-  public void appendExceptionResult(String exceptionClass, String message,", "-                                    String stackTrace, String styleName) {", "-    //writeLock();", "+  public synchronized void appendExceptionResult(String exceptionClass, String message, String stackTrace,", "+                                                 String styleName) {", "-", "-      if (null == message || \"null\".equals(message)) {", "-        message = \"\";", "-      }", "+      if (null == message || \"null\".equals(message)) message = \"\";", "-      if(c.indexOf('.') != -1) ", "-        c = c.substring(c.lastIndexOf('.')+1,c.length());      ", "+      if (c.indexOf('.') != -1) c = c.substring(c.lastIndexOf('.') + 1, c.length());      ", "-      ", "-      ", "-//    finally {", "-//      writeUnlock();", "-//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09c6277666996fc3258f076c12e4607e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/AFindReplaceMachineState.java", "commitBeforeChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "commitAfterChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public int replaceAll()", "signatureAfterChange": "   public int replaceAll()", "diff": ["-    else {", "-      return _replaceAllInCurrentDoc();", "-    }", "+    else return _replaceAllInCurrentDoc();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a134f7618ed1fd4b99d60af9330df74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void delete(int count)", "signatureAfterChange": "   public void delete(int count)", "diff": ["-    if (count == 0) {", "-      return;", "-    }", "+    if (count == 0) return;", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b30e87a9eec1b632bd395c6c1edb204", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "       public void mouseReleased(MouseEvent e)", "signatureAfterChange": "       public void mouseReleased(MouseEvent e)", "diff": ["-       */", "+        */", "-        if (_selectError(e)) {", "-          super.mouseReleased(e);", "-        }", "+        if (_selectError(e)) super.mouseReleased(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b99e202a769bf32659ffe43eb6532fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public void next()", "signatureAfterChange": "     public void next()", "diff": ["-      if (atEnd()) {", "-        throw new RuntimeException(\"Can't cross list boundary.\");", "-      }", "+      if (atEnd()) throw new RuntimeException(\"Can't cross list boundary.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c499b5d24d653217ae3ee692b430bd5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "cbdc405e8bd4373c383ad7cbc6a9a656b65ddd52", "commitAfterChange": "2c9a67ea7f4112fa7f99743281ac144c9f56d20a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testConstructOneDocWithBoth()", "signatureAfterChange": "   public void testConstructOneDocWithBoth()", "diff": ["-    errors = new CompilerError[]", "-    { new CompilerError(files[0], 2, 0, \"Test error with File and line\", false),", "+    errors = new CompilerError[] { ", "+      new CompilerError(files[0], 2, 0, \"Test error with File and line\", false),", "-      new CompilerError(files[0], 1, 0, \"Test error with File and line\", false) };", "+      new CompilerError(files[0], 1, 0, \"Test error with File and line\", false) ", "+    };", "-    for (int i = 0; i < errors.length; i++) {", "-      copy[i] = errors[i];", "-    }", "+    for (int i = 0; i < errors.length; i++) copy[i] = errors[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c93d99fa1146cf6cdb7ad42591f7095", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/InsideSingleQuote.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "signatureAfterChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "diff": ["-   */", "+    */", "-    if (copyCursor.atEnd()) {", "-      return STUTTER;", "-    }", "+    if (copyCursor.atEnd()) return STUTTER;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cf7df718efab9c577d38b40dbbccd32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": "   public String getDisplayFullPath(int index)", "signatureAfterChange": "   public String getDisplayFullPath(int index)", "diff": ["-    OpenDefinitionsDocument doc =", "-      getDefinitionsDocuments().get(index);", "-    if (doc == null) {", "-      throw new RuntimeException(", "-        \"Document not found with index \" + index);", "-    }", "+    OpenDefinitionsDocument doc = getDefinitionsDocuments().get(index);", "+    if (doc == null) throw new RuntimeException( \"Document not found with index \" + index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d0a325df66f6cbabd2192c8cfb38677", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "1acb63fa1c578959b54f9766299c6e0a8865f601", "commitAfterChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public static boolean renameFile(File file, File dest)", "signatureAfterChange": "   public static boolean renameFile(File file, File dest)", "diff": ["-    if (dest.exists()) {", "-      dest.delete();", "-    }", "+    if (dest.exists()) dest.delete();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dc517da2d0c37d062271f4375e671a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 479, "methodNumberAfterChange": 479, "signatureBeforeChange": "\r \r   public void forComplexSuperReference(ComplexSuperReference that)", "signatureAfterChange": "    public void forComplexSuperReference(ComplexSuperReference that)", "diff": ["-\r", "-  public void forComplexSuperReference(ComplexSuperReference that) {\r", "-    forComplexSuperReferenceDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    forComplexSuperReferenceOnly(that);\r", "-  }\r", "+", "+  public void forComplexSuperReference(ComplexSuperReference that) {", "+    forComplexSuperReferenceDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    forComplexSuperReferenceOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dfb70e8a7fcae32955839dcada921c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public void addBuildDirectoryClassPath(URL s)", "signatureAfterChange": "   public void addBuildDirectoryClassPath(URL s)", "diff": ["-    if (_classPath.contains(s)) {", "-      // Don't add it again", "-      return;", "-    }", "+    if (_classPath.contains(s)) return;  // Don't add it again"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e81dfc645df7c2a26225b7764f13db4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 412, "methodNumberAfterChange": 412, "signatureBeforeChange": "\r \r   public void forLabeledCase(LabeledCase that)", "signatureAfterChange": "    public void forLabeledCase(LabeledCase that)", "diff": ["-\r", "-  public void forLabeledCase(LabeledCase that) {\r", "-    forLabeledCaseDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLabel().visit(this);\r", "-    that.getCode().visit(this);\r", "-    forLabeledCaseOnly(that);\r", "-  }\r", "+", "+  public void forLabeledCase(LabeledCase that) {", "+    forLabeledCaseDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLabel().visit(this);", "+    that.getCode().visit(this);", "+    forLabeledCaseOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ea0ecbee1f7aea0d5ad93a7cbc3deb1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void forClassDef(ClassDef that)", "signatureAfterChange": "   public void forClassDef(ClassDef that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef8e663f7b44c0db3156ae168bb527f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 400, "methodNumberAfterChange": 400, "signatureBeforeChange": "\r \r   public void forFormalParameter(FormalParameter that)", "signatureAfterChange": "    public void forFormalParameter(FormalParameter that)", "diff": ["-\r", "-  public void forFormalParameter(FormalParameter that) {\r", "-    forFormalParameterDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getDeclarator().visit(this);\r", "-    forFormalParameterOnly(that);\r", "-  }\r", "+", "+  public void forFormalParameter(FormalParameter that) {", "+    forFormalParameterDoFirst(that);", "+    if (prune(that)) return;", "+    that.getDeclarator().visit(this);", "+    forFormalParameterOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f6755bfa03890c35a74f45c7ec90963", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 471, "methodNumberAfterChange": 471, "signatureBeforeChange": "\r \r   public void forComplexUninitializedArrayInstantiation(ComplexUninitializedArrayInstantiation that)", "signatureAfterChange": "    public void forComplexUninitializedArrayInstantiation(ComplexUninitializedArrayInstantiation that)", "diff": ["-\r", "-  public void forComplexUninitializedArrayInstantiation(ComplexUninitializedArrayInstantiation that) {\r", "-    forComplexUninitializedArrayInstantiationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getType().visit(this);\r", "-    that.getDimensionSizes().visit(this);\r", "-    forComplexUninitializedArrayInstantiationOnly(that);\r", "-  }\r", "+", "+  public void forComplexUninitializedArrayInstantiation(ComplexUninitializedArrayInstantiation that) {", "+    forComplexUninitializedArrayInstantiationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getType().visit(this);", "+    that.getDimensionSizes().visit(this);", "+    forComplexUninitializedArrayInstantiationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c59170c418bb4034867d168b50bb08", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/MatchWholeWordState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    private int indexOf(String str, String findword)", "signatureAfterChange": "    private int indexOf(String str, String findword)", "diff": ["-    if (_matchCase) {", "-      return str.indexOf(findword);", "-    }", "+    if (_matchCase) return str.indexOf(findword);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118eccd12c3b27f8c6dbf756b0275471", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 494, "methodNumberAfterChange": 494, "signatureBeforeChange": "\r \r   public void forDimensionExpressionList(DimensionExpressionList that)", "signatureAfterChange": "    public void forDimensionExpressionList(DimensionExpressionList that)", "diff": ["-\r", "-  public void forDimensionExpressionList(DimensionExpressionList that) {\r", "-    forDimensionExpressionListDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);\r", "-    forDimensionExpressionListOnly(that);\r", "-  }\r", "+", "+  public void forDimensionExpressionList(DimensionExpressionList that) {", "+    forDimensionExpressionListDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);", "+    forDimensionExpressionListOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a7b44f68eea524b486e86d8212fb4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void simpleAnonymousClassInstantiationHelper(SimpleAnonymousClassInstantiation that, Data data)", "signatureAfterChange": "   public void simpleAnonymousClassInstantiationHelper(SimpleAnonymousClassInstantiation that, Data data)", "diff": ["-   */", "+    */", "-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11ac382fb1a312360eab3d1cd4407df8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public synchronized void testStarted(String name)", "signatureAfterChange": "     public synchronized void testStarted(String name)", "diff": ["-      if (fullName.equals(JUNIT_WARNING)) {", "-        return;", "-      }", "+      if (fullName.equals(JUNIT_WARNING)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11c7e33e71ea745a474c5ce0b7970326", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0bcb8da0b79cf218cc2712f201e3771599202c44", "commitAfterChange": "c34979036dca11c3afc06b42fcb087eaf85bc790", "methodNumberBeforeChange": 218, "methodNumberAfterChange": 218, "signatureBeforeChange": "    private void _quit()", "signatureAfterChange": "    private void _quit()", "diff": ["-      ConfirmCheckBoxDialog dialog =", "-        new ConfirmCheckBoxDialog(MainFrame.this, title, message);", "+      ConfirmCheckBoxDialog dialog = new ConfirmCheckBoxDialog(MainFrame.this, title, message);", "-      if (rc != JOptionPane.YES_OPTION) {", "-        return;", "-      }", "+      if (rc != JOptionPane.YES_OPTION) return;", "-    if(! _checkProjectClose())", "-      return;", "+    if (! _checkProjectClose()) return;", "-      try {", "-        DrJava.getConfig().saveConfiguration();", "-      }", "-      catch (IOException ioe) {", "-        _showIOError(ioe);", "-      }", "+      try { DrJava.getConfig().saveConfiguration(); }", "+      catch (IOException ioe) { _showIOError(ioe); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f806b0d051453da8fca96e3f1c1745", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 383, "methodNumberAfterChange": 383, "signatureBeforeChange": "\r \r   public void forIfThenElseStatement(IfThenElseStatement that)", "signatureAfterChange": "    public void forIfThenElseStatement(IfThenElseStatement that)", "diff": ["-\r", "-  public void forIfThenElseStatement(IfThenElseStatement that) {\r", "-    forIfThenElseStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getTestExpression().visit(this);\r", "-    that.getThenStatement().visit(this);\r", "-    that.getElseStatement().visit(this);\r", "-    forIfThenElseStatementOnly(that);\r", "-  }\r", "+", "+  public void forIfThenElseStatement(IfThenElseStatement that) {", "+    forIfThenElseStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getTestExpression().visit(this);", "+    that.getThenStatement().visit(this);", "+    that.getElseStatement().visit(this);", "+    forIfThenElseStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12474f6372f67e526a2757d9e1110c88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   public void forVariableDeclaration(VariableDeclaration that)", "signatureAfterChange": "   public void forVariableDeclaration(VariableDeclaration that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "130c1619b2feb9d388f75f24da5d2ec4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b1ab5639c12e11d9d4773b42d5fad59d564680b4", "commitAfterChange": "c11d4ce83dfacd1ad010305b8bbd51b80abac1bf", "methodNumberBeforeChange": 261, "methodNumberAfterChange": 262, "signatureBeforeChange": "    public static ImageIcon getIcon(String name)", "signatureAfterChange": "    public static ImageIcon getIcon(String name)", "diff": ["-    if (url != null) {", "-      return new ImageIcon(url);", "-    }", "-    // System.err.println(\"url is null!\");", "+    if (url != null)  return new ImageIcon(url);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13b0c828f468c746b8bc974a437c07dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 462, "methodNumberAfterChange": 462, "signatureBeforeChange": "\r \r   public void forBooleanLiteral(BooleanLiteral that)", "signatureAfterChange": "    public void forBooleanLiteral(BooleanLiteral that)", "diff": ["-\r", "-  public void forBooleanLiteral(BooleanLiteral that) {\r", "-    forBooleanLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forBooleanLiteralOnly(that);\r", "-  }\r", "+", "+  public void forBooleanLiteral(BooleanLiteral that) {", "+    forBooleanLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forBooleanLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "159ca832d36f0590f1a2bbb0c72e8b34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 150, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["-    if (workDir.isFile() && workDir.getParent() != null) {", "-      workDir = workDir.getParentFile();", "-    }", "+    if (workDir.isFile() && workDir.getParent() != null) workDir = workDir.getParentFile();", "+", "-        ", "+    ", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "172f841479b1c8dbf592257d0c9a35bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 421, "methodNumberAfterChange": 421, "signatureBeforeChange": "\r \r   public void forLeftShiftAssignmentExpression(LeftShiftAssignmentExpression that)", "signatureAfterChange": "    public void forLeftShiftAssignmentExpression(LeftShiftAssignmentExpression that)", "diff": ["-\r", "-  public void forLeftShiftAssignmentExpression(LeftShiftAssignmentExpression that) {\r", "-    forLeftShiftAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forLeftShiftAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forLeftShiftAssignmentExpression(LeftShiftAssignmentExpression that) {", "+    forLeftShiftAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forLeftShiftAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "174be382a6cbd41d6c5b913a538dcbbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public Action get(KeyStroke ks)", "signatureAfterChange": "   public Action get(KeyStroke ks)", "diff": ["-   */", "+    */", "-    if (ksd == null) {", "-      return null;", "-    }", "+    if (ksd == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "174ed7d99e7fd94962a454b970f30a33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public int getRowCount()", "signatureAfterChange": "          public int getRowCount()", "diff": ["-    }", "+    ", "-      if (_stackFrames == null) {", "-        return 0;", "-      }", "+      if (_stackFrames == null)  return 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17ce9fd551b505b25140d6056a3ec3e4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 402, "methodNumberAfterChange": 402, "signatureBeforeChange": "\r \r   public void forUninitializedVariableDeclarator(UninitializedVariableDeclarator that)", "signatureAfterChange": "    public void forUninitializedVariableDeclarator(UninitializedVariableDeclarator that)", "diff": ["-\r", "-  public void forUninitializedVariableDeclarator(UninitializedVariableDeclarator that) {\r", "-    forUninitializedVariableDeclaratorDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    forUninitializedVariableDeclaratorOnly(that);\r", "-  }\r", "+", "+  public void forUninitializedVariableDeclarator(UninitializedVariableDeclarator that) {", "+    forUninitializedVariableDeclaratorDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    forUninitializedVariableDeclaratorOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17f970c21d524bdf708ba288560ea641", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 239, "methodNumberAfterChange": 229, "signatureBeforeChange": "     public File getSourceRoot() throws InvalidPackageException", "signatureAfterChange": "     public File getSourceRoot() throws InvalidPackageException", "diff": ["-      if (_packageName == null) {", "-          _packageName = getPackageName();", "-      }", "+      if (_packageName == null) _packageName = getPackageName();", "-", "-        //return _state.getSourceRoot();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183b28c4305e7f93c2160b5ed582c1c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 488, "methodNumberAfterChange": 488, "signatureBeforeChange": "\r \r   public void forParenthesized(Parenthesized that)", "signatureAfterChange": "    public void forParenthesized(Parenthesized that)", "diff": ["-\r", "-  public void forParenthesized(Parenthesized that) {\r", "-    forParenthesizedDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forParenthesizedOnly(that);\r", "-  }\r", "+", "+  public void forParenthesized(Parenthesized that) {", "+    forParenthesizedDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forParenthesizedOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "193e0c4c49e237eeb739d33df8f9def4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "b1ab5639c12e11d9d4773b42d5fad59d564680b4", "commitAfterChange": "c11d4ce83dfacd1ad010305b8bbd51b80abac1bf", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "   public void resetInteractions()", "signatureAfterChange": "   public void resetInteractions()", "diff": ["-    if ((_debugger.isAvailable()) && (_debugger.isReady())) {", "-      _debugger.shutdown();", "-    }", "+    if (_debugger.isAvailable() && _debugger.isReady()) _debugger.shutdown();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19cf26510c90fc92814034a5c5f96382", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void addExtraClassPath(URL s)", "signatureAfterChange": "   public void addExtraClassPath(URL s)", "diff": ["-    if (_classPath.contains(s)) {", "-      // Don't add it again", "-      return;", "-    }", "+    if (_classPath.contains(s)) return;    // Don't add it again"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ddceed7307d1a96c5e2724d6677c1c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   protected void _storeInCache(String key, Object result)", "signatureAfterChange": "   protected void _storeInCache(String key, Object result)", "diff": ["-      ", "-        else {", "-          // Shouldn't happen", "+        else { // Should not happen", "-      if (prev == null) {", "-        _helperCacheHistory.add(key);", "-      }", "+      if (prev == null) _helperCacheHistory.add(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f8754295a8434bac94e807b8e36bf3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "a33beea01f3d2263a618fa7843cb52ddfdaa4ccf", "commitAfterChange": "2b371f46cbe5fba581bc2ddd38ce1509ce9a6d65", "methodNumberBeforeChange": 441, "methodNumberAfterChange": 441, "signatureBeforeChange": "      private void _completeOpenFile(OpenDefinitionsDocument d)", "signatureAfterChange": "      private void _completeOpenFile(OpenDefinitionsDocument d)", "diff": ["-//    Utilities.invokeLater(new Runnable() { public void run() { addToBrowserHistory(); } });", "-      if (! inProject(f) && inProjectPath(d)) {", "-        setProjectChanged(true);", "-      }", "-    } catch(FileMovedException fme) {", "+      if (! inProject(f) && inProjectPath(d)) setProjectChanged(true);", "+    } ", "+    catch(FileMovedException fme) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a9805710efcb00e1aaa62400719ddfb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public boolean addVars(VariableData[] vars)", "signatureAfterChange": "   public boolean addVars(VariableData[] vars)", "diff": ["-   */", "+    */", "-      if (vars[i]==null) {System.out.println(\"Var \" + i + \" was null!\");}", "+      if (vars[i] == null) {System.out.println(\"Var \" + i + \" was null!\");}", "-      else {", "-        success = false;", "-      }", "+      else success = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c485d41d4c76843c705e7f6cf6efeac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 483, "methodNumberAfterChange": 483, "signatureBeforeChange": "\r \r   public void forComplexThisConstructorInvocation(ComplexThisConstructorInvocation that)", "signatureAfterChange": "    public void forComplexThisConstructorInvocation(ComplexThisConstructorInvocation that)", "diff": ["-\r", "-  public void forComplexThisConstructorInvocation(ComplexThisConstructorInvocation that) {\r", "-    forComplexThisConstructorInvocationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    forComplexThisConstructorInvocationOnly(that);\r", "-  }\r", "+", "+  public void forComplexThisConstructorInvocation(ComplexThisConstructorInvocation that) {", "+    forComplexThisConstructorInvocationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getArguments().visit(this);", "+    forComplexThisConstructorInvocationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cbc7cb344214cd26e7dc2f5c04794d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r   public void forBlock(Block that)", "signatureAfterChange": "   public void forBlock(Block that)", "diff": ["-   */\r", "-  public void forBlock(Block that) {\r", "-    forBlockDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    BlockData bd = new BlockData(_bodyData);\r", "-    _bodyData.addBlock(bd);\r", "-    that.getStatements().visit(new BodyBodyAdvancedVisitor(bd, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));\r", "-    forBlockOnly(that);\r", "-  }\r", "+   */", "+  public void forBlock(Block that) {", "+    forBlockDoFirst(that);", "+    if (prune(that)) return;", "+    BlockData bd = new BlockData(_bodyData);", "+    _bodyData.addBlock(bd);", "+    that.getStatements().visit(new BodyBodyAdvancedVisitor(bd, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));", "+    forBlockOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cbeb963be3ac6792519f5d0060efd0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public void addExternalFilesClassPath(URL s)", "signatureAfterChange": "   public void addExternalFilesClassPath(URL s)", "diff": ["-    if (_classPath.contains(s)) {", "-      // Don't add it again", "-      return;", "-    }", "+    if (_classPath.contains(s)) return;  // Don't add it again"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc1452b1292c6914d99f1cd460644d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   protected void handleInnerInterfaceDef(InnerInterfaceDef that, SymbolData symbolData, String name)", "signatureAfterChange": "   protected void handleInnerInterfaceDef(InnerInterfaceDef that, SymbolData symbolData, String name)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ccbb084006d57ace0adfcdbfaa74b78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "commitAfterChange": "ee2a4f62f26e8f47974ad5d674dd24e422820bcc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _remove()", "signatureAfterChange": "   private void _remove()", "diff": ["-    for (MovingDocumentRegion r: getSelectedRegions()) {", "-      _regionManager.removeRegion(r);", "-    }", "+    for (MovingDocumentRegion r: getSelectedRegions()) _regionManager.removeRegion(r);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d15ee2b541af2c50c2fd830ef599d17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/ScrollableListDialog.java", "commitBeforeChange": "998d49ab48c08c55f388485512c281814a54c029", "commitAfterChange": "a8b8b0a5cb85063013adcdf9293d0c9c540b8baa", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public List<T> getSelectedItems()", "signatureAfterChange": "\r   public List<T> getSelectedItems()", "diff": ["-  /** Return a list of the selected items. */", "-  public List<T> getSelectedItems() {", "-    ArrayList<T> l = new ArrayList<T>();", "-    for(int i: list.getSelectedIndices()) {", "-      l.add(listItems.get(i));", "-    }", "-    return l;", "-  }", "+  /** Return a list of the selected items. */\r", "+  public List<T> getSelectedItems() {\r", "+    ArrayList<T> l = new ArrayList<T>();\r", "+    for (int i: list.getSelectedIndices())  l.add(listItems.get(i));\r", "+\r", "+    return l;\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d19b383605b124ba96defd4be718971", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/TokenList.java", "commitBeforeChange": "75e37fee0d4b160f4d0f1fc58a049ca677edffbc", "commitAfterChange": "a1a11647d4dd38f0cbbb37dcb8ec06139897420a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private int _move(int count, int currentOffset)", "signatureAfterChange": "     private int _move(int count, int currentOffset)", "diff": ["-      if (count == 0) {", "-        return retval;", "-      }", "+      if (count == 0)  return retval;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e1aed456e8107ce184f8df1f2726529", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/Free.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "signatureAfterChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "diff": ["-    if (copyCursor.atEnd()) {", "-      return STUTTER;", "-    }", "+    if (copyCursor.atEnd()) return STUTTER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e7d2507e752727005276cc3bd267091", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigProperty.java", "commitBeforeChange": "a0485f85335f36c90789dfb389fcf6d34d6ebb24", "commitAfterChange": "bdfe950dc400d21dc2bdd8774632b12854b9f66c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void resetAttributes()", "signatureAfterChange": "   public void resetAttributes()", "diff": ["-        else {", "-          _isList = false;", "-        }", "+        else _isList = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ee0a975e0227acf8d9bccbdf06498ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "cea46dd993e521d96771e5cfebb7a88bf25bb742", "commitAfterChange": "b7744671f21e751f13a1d59cecdc1108de1cf3f6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "    public void aboutToSaveFromSaveAll(OpenDefinitionsDocument doc)", "signatureAfterChange": "    public void aboutToSaveFromSaveAll(OpenDefinitionsDocument doc)", "diff": ["-     if (doc.isUntitled()) {", "-       setActiveDocument(doc);", "-     }", "+     if (doc.isUntitled()) setActiveDocument(doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f0c81efc9bc91b307fcf8f340404fa2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 435, "methodNumberAfterChange": 435, "signatureBeforeChange": "\r \r   public void forLessThanOrEqualExpression(LessThanOrEqualExpression that)", "signatureAfterChange": "    public void forLessThanOrEqualExpression(LessThanOrEqualExpression that)", "diff": ["-\r", "-  public void forLessThanOrEqualExpression(LessThanOrEqualExpression that) {\r", "-    forLessThanOrEqualExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forLessThanOrEqualExpressionOnly(that);\r", "-  }\r", "+", "+  public void forLessThanOrEqualExpression(LessThanOrEqualExpression that) {", "+    forLessThanOrEqualExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forLessThanOrEqualExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2069293f57c16b09b1a580e399a450f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 428, "methodNumberAfterChange": 428, "signatureBeforeChange": "\r \r   public void forAndExpression(AndExpression that)", "signatureAfterChange": "    public void forAndExpression(AndExpression that)", "diff": ["-\r", "-  public void forAndExpression(AndExpression that) {\r", "-    forAndExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forAndExpressionOnly(that);\r", "-  }\r", "+", "+  public void forAndExpression(AndExpression that) {", "+    forAndExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forAndExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20b464a3ad70cd8da64f045ea8657a03", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public synchronized void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-  public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "+  public synchronized void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "-", "-    for(GroupNode r: _roots){", "-      if(r.getFilter().accept(doc)) {", "+    ", "+    for (GroupNode r: _roots){", "+      if (r.getFilter().accept(doc)) {", "-    if(_root == null) {", "-      return;", "-    }", "-", "+    if (_root == null) return;", "-    while(tok.hasMoreTokens()) {", "+    while (tok.hasMoreTokens()) {", "-          this.expandPath(new TreePath(lastNode.getPath()));", "+        this.expandPath(new TreePath(lastNode.getPath()));", "-       // System.out.println(\"path2node contains pathSoFar\");", "+        // System.out.println(\"path2node contains pathSoFar\");", "-      ", "-      ", "+       ", "-//    _model.insertNodeInto(child, lastNode, lastNode.getChildCount());", "+    //    _model.insertNodeInto(child, lastNode, lastNode.getChildCount());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2110d6c820ab4f2d95b296457787a645", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private synchronized void _stepHelper(int flag, boolean shouldNotify)     throws DebugException", "signatureAfterChange": "   private synchronized void _stepHelper(int flag, boolean shouldNotify)     throws DebugException", "diff": ["-    if (shouldNotify) {", "-      notifyStepRequested();", "-    }", "+    if (shouldNotify) notifyStepRequested();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22c2ba4d28a4679f932cfb28c5c7a9e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 378, "methodNumberAfterChange": 378, "signatureBeforeChange": "\r \r   public void forLabeledStatement(LabeledStatement that)", "signatureAfterChange": "    public void forLabeledStatement(LabeledStatement that)", "diff": ["-\r", "-  public void forLabeledStatement(LabeledStatement that) {\r", "-    forLabeledStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLabel().visit(this);\r", "-    that.getStatement().visit(this);\r", "-    forLabeledStatementOnly(that);\r", "-  }\r", "+", "+  public void forLabeledStatement(LabeledStatement that) {", "+    forLabeledStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLabel().visit(this);", "+    that.getStatement().visit(this);", "+    forLabeledStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2378086e32f3bf081e696ff74ce512da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Set<AbstractVariable> getCurrentScopeVariables()", "signatureAfterChange": "   public Set<AbstractVariable> getCurrentScopeVariables()", "diff": ["-   */", "+  /** Returns the current scope variables in a set. */", "-    while (it.hasNext()) {", "-      result.add(new Variable(it.next()));", "-    }", "+    while (it.hasNext()) result.add(new Variable(it.next()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2379f6c23681853616efdf53d76550bd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 313, "methodNumberAfterChange": 316, "signatureBeforeChange": "               public List<OpenDefinitionsDocument> getProjectDocuments()", "signatureAfterChange": "      public List<OpenDefinitionsDocument> getProjectDocuments()", "diff": ["-    for(OpenDefinitionsDocument tempDoc : allDocs){", "-      if(tempDoc.isInProjectPath() || tempDoc.isAuxiliaryFile()){", "-        projectDocs.add(tempDoc);", "-      }", "+    for (OpenDefinitionsDocument tempDoc : allDocs){", "+      if (tempDoc.isInProjectPath() || tempDoc.isAuxiliaryFile()) projectDocs.add(tempDoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23bb5074eeb37b2ee9333ca776993d25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/Utilities.java", "commitBeforeChange": "a7b492b5dc0c5b51f07f6d1e45c42a6f55e8cb91", "commitAfterChange": "5096aaab648cea3686054749f4edbb0813185db1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public static void showDialog(Component comp,                                   String title,                                   String message)", "signatureAfterChange": "     public static void showDialog(Component comp, String title, String message)", "diff": ["-    public static void showDialog(Component comp,", "-                                  String title,", "-                                  String message) {", "-      if (TEST_MODE) {", "-        System.out.println(title+\": \"+message);", "-      }", "+    public static void showDialog(Component comp, String title, String message) {", "+      if (TEST_MODE) System.out.println(title + \": \" + message);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "242b965959ff4426b9b9377d179d4621", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void _runJavadoc(ArrayList<String> args, String classpath,                            File destDirFile, boolean allDocs)", "signatureAfterChange": "   private void _runJavadoc(ArrayList<String> args, String classpath,                            File destDirFile, boolean allDocs)", "diff": ["-                           File destDirFile, boolean allDocs)", "-  {", "+                           File destDirFile, boolean allDocs) {", "-      if (result && !allDocs) {", "-        FileOps.deleteDirectoryOnExit(destDirFile);", "-      }", "+      if (result && !allDocs) FileOps.deleteDirectoryOnExit(destDirFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243668b485abb331dd53f54652f51d7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   static void setPropertiesFile(String filename)", "signatureAfterChange": "   static void setPropertiesFile(String filename)", "diff": ["-    if (!filename.endsWith(\".java\")) {", "-      _propertiesFile = new File(filename);", "-    }", "+    if (!filename.endsWith(\".java\"))  _propertiesFile = new File(filename);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243fb8e45a00447fae950de88b7ce864", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 472, "methodNumberAfterChange": 473, "signatureBeforeChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset, final boolean shouldHighlight,                                         final boolean shouldAddToHistory)", "signatureAfterChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset,                                          final boolean shouldHighlight, final boolean shouldAddToHistory)", "diff": ["-  public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset, final boolean shouldHighlight,", "-                                        final boolean shouldAddToHistory) {", "-    if (shouldAddToHistory) {", "-      addToBrowserHistory();", "-    }", "+  public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset, ", "+                                        final boolean shouldHighlight, final boolean shouldAddToHistory) {", "+    if (shouldAddToHistory) addToBrowserHistory();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2480a2ddafea7f6a0cab5571cd41c0a2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerError.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private int compareByPosition(CompilerError other)", "signatureAfterChange": "   private int compareByPosition(CompilerError other)", "diff": ["-    else {", "-      return  _lineNumber - other._lineNumber;", "-    }", "+    else return  _lineNumber - other._lineNumber;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "262853aa0ceb2d929e1119ca43f49e91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 373, "methodNumberAfterChange": 373, "signatureBeforeChange": "\r \r   public void forInstanceInitializer(InstanceInitializer that)", "signatureAfterChange": "    public void forInstanceInitializer(InstanceInitializer that)", "diff": ["-\r", "-  public void forInstanceInitializer(InstanceInitializer that) {\r", "-    forInstanceInitializerDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCode().visit(this);\r", "-    forInstanceInitializerOnly(that);\r", "-  }\r", "+", "+  public void forInstanceInitializer(InstanceInitializer that) {", "+    forInstanceInitializerDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCode().visit(this);", "+    forInstanceInitializerOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "263b7a3201bd39c1a2d4e7cfee41219c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 476, "methodNumberAfterChange": 476, "signatureBeforeChange": "\r \r   public void forSimpleThisReference(SimpleThisReference that)", "signatureAfterChange": "    public void forSimpleThisReference(SimpleThisReference that)", "diff": ["-\r", "-  public void forSimpleThisReference(SimpleThisReference that) {\r", "-    forSimpleThisReferenceDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forSimpleThisReferenceOnly(that);\r", "-  }\r", "+", "+  public void forSimpleThisReference(SimpleThisReference that) {", "+    forSimpleThisReferenceDoFirst(that);", "+    if (prune(that)) return;", "+    forSimpleThisReferenceOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26c46f417c3acaf5fecf0d19fd1958c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/PreventExitSecurityManager.java", "commitBeforeChange": "b2b6471e1560c54bd01c487ab6cd5dc5ac9f4747", "commitAfterChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void exitVM(int status)", "signatureAfterChange": "   public void exitVM(int status)", "diff": ["-    if (! _blockExit) {", "-      _timeToExit = true;", "-    }", "-", "+//    Utilities.showDebug(\"exitVm(\" + status + \") called\");", "+    if (! _blockExit) _timeToExit = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2728815672857b1cfa3e5220e70b734a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "      public void undo()", "signatureAfterChange": "      public void undo()", "diff": ["-      if(_pos > -1) {", "-        setCaretPosition(_pos);", "-      }", "+      if(_pos > -1) setCaretPosition(_pos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c39b34190cdd85936459ccfd364849", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ArrayData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public ModifiersAndVisibility getMav()", "signatureAfterChange": "   public ModifiersAndVisibility getMav()", "diff": ["-    if (_elementType.hasModifier(\"final\")) { return _elementType.getMav(); }", "+    if (_elementType.hasModifier(\"final\"))  return _elementType.getMav();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2840d9c43e07c1f83f0736cd9e1e3dce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "   private synchronized void _switchPaneFocus(boolean next)", "signatureAfterChange": "   private void _switchPaneFocus(boolean next)", "diff": ["-  private synchronized void _switchPaneFocus(boolean next) {", "+  private void _switchPaneFocus(boolean next) {", "-        if (numTabs > 0) {", "-          _switchToPane(_tabbedPane.getComponentAt(0));", "-        }", "+        if (numTabs > 0) _switchToPane(_tabbedPane.getComponentAt(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a0b6441fa055a7bcd1b4d05aea544b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 409, "methodNumberAfterChange": 409, "signatureBeforeChange": "\r \r   public void forClassOrInterfaceType(ClassOrInterfaceType that)", "signatureAfterChange": "    public void forClassOrInterfaceType(ClassOrInterfaceType that)", "diff": ["-\r", "-  public void forClassOrInterfaceType(ClassOrInterfaceType that) {\r", "-    forClassOrInterfaceTypeDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getTypeArguments().length; i++) that.getTypeArguments()[i].visit(this);\r", "-    forClassOrInterfaceTypeOnly(that);\r", "-  }\r", "+", "+  public void forClassOrInterfaceType(ClassOrInterfaceType that) {", "+    forClassOrInterfaceTypeDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getTypeArguments().length; i++) that.getTypeArguments()[i].visit(this);", "+    forClassOrInterfaceTypeOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a3eee6c790e47ec82a116759770aafb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 54, "signatureBeforeChange": "   synchronized void scrollToSource(LocatableEvent e)", "signatureAfterChange": "   synchronized void scrollToSource(LocatableEvent e)", "diff": ["-    else {", "-      scrollToSource(location);", "-    }", "+    else  scrollToSource(location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b444494c836c02d0ee64b8d73084801", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void javadocDocument(final OpenDefinitionsDocument doc,                               final FileSaveSelector saver,                               final String classpath)     throws IOException", "signatureAfterChange": "   public void javadocDocument(final OpenDefinitionsDocument doc,                               final FileSaveSelector saver,                               final String classpath)           throws IOException", "diff": ["-                              final String classpath)", "-    throws IOException", "-  {", "+                              final String classpath)           throws IOException {", "-    if (doc.isUntitled() || doc.isModifiedSinceSave()) {", "-      _notifier.saveBeforeJavadoc();", "-    }", "+    if (doc.isUntitled() || doc.isModifiedSinceSave()) _notifier.saveBeforeJavadoc();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c34daf0f924a871bda1a2a0957f3dde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 495, "methodNumberAfterChange": 495, "signatureBeforeChange": "\r \r \r   public void forEmptyForCondition(EmptyForCondition that)", "signatureAfterChange": "      public void forEmptyForCondition(EmptyForCondition that)", "diff": ["-\r", "-  public void forEmptyForCondition(EmptyForCondition that) {\r", "-    forEmptyForConditionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forEmptyForConditionOnly(that);\r", "-  }\r", "+  ", "+  public void forEmptyForCondition(EmptyForCondition that) {", "+    forEmptyForConditionDoFirst(that);", "+    if (prune(that)) return;", "+    forEmptyForConditionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cdef5228025cf2e04d2eac0683ff89c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 408, "methodNumberAfterChange": 408, "signatureBeforeChange": "\r \r   public void forMemberType(MemberType that)", "signatureAfterChange": "    public void forMemberType(MemberType that)", "diff": ["-\r", "-  public void forMemberType(MemberType that) {\r", "-    forMemberTypeDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forMemberTypeOnly(that);\r", "-  }\r", "+", "+  public void forMemberType(MemberType that) {", "+    forMemberTypeDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forMemberTypeOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d2d5b72efc5497cd018d6e181fc21d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private synchronized void remove(DocManager toRemove)", "signatureAfterChange": "   private synchronized void remove(DocManager toRemove)", "diff": ["-    if (toRemove.isFirst()) {", "-      toRemove.kickOut();", "-    }", "+    if (toRemove.isFirst()) toRemove.kickOut();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2da21eaf5b40e273638484db0f64a1f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 181, "signatureBeforeChange": "      private void _openProjectUpdate()", "signatureAfterChange": "      private void _openProjectUpdate()", "diff": ["-      if(_model.getBuildDirectory() != null){", "-        _cleanAction.setEnabled(true);", "-      }", "+      if (_model.getBuildDirectory() != null) _cleanAction.setEnabled(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed12b758b257765e3fff67ef5eb1500", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b05c72360ee1d1e3de71e0b58a923a7cf06bebf6", "commitAfterChange": "1e64dff50a32582d182c950c323629608db6f054", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "   protected static boolean _isEndOfComment(String text, int pos)", "signatureAfterChange": "   protected static boolean _isEndOfComment(String text, int pos)", "diff": ["-    // throwErrorHuh();", "-    if(currChar == '/') {", "+    if (currChar == '/') {", "-        if((beforeCurrChar == '/') || (beforeCurrChar == '*')) {", "-          return true;", "-        }", "+        if ((beforeCurrChar == '/') || (beforeCurrChar == '*'))  return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f7087754965ffea418741bc573dbe4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerProxy.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public String getName()", "signatureAfterChange": "   public String getName()", "diff": ["-   */", "+  /** Returns the name of this compiler, appropriate to show to the user. */", "-    if (!isAvailable()) {", "-      return \"(unavailable)\";", "-    }", "-", "+    if (!isAvailable())  return \"(unavailable)\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fcb2c9f78409f4a97e8c2f2c8b231dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 368, "methodNumberAfterChange": 368, "signatureBeforeChange": "\r \r   public void forClassDef(ClassDef that)", "signatureAfterChange": "    public void forClassDef(ClassDef that)", "diff": ["-\r", "-  public void forClassDef(ClassDef that) {\r", "-    forClassDefDoFirst(that);\r", "-    if (prune(that)) { return; }    \r", "-    that.getMav().visit(this);\r", "-    that.getName().visit(this);\r", "-    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);\r", "-    that.getSuperclass().visit(this);\r", "-    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);\r", "-    that.getBody().visit(this);\r", "-    forClassDefOnly(that);\r", "-  }\r", "+", "+  public void forClassDef(ClassDef that) {", "+    forClassDefDoFirst(that);", "+    if (prune(that)) return;    ", "+    that.getMav().visit(this);", "+    that.getName().visit(this);", "+    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+    that.getSuperclass().visit(this);", "+    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);", "+    that.getBody().visit(this);", "+    forClassDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30b82bee3fed708220d07702fd0e9d90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/HTMLFrame.java", "commitBeforeChange": "8cfaf2efb8ae59b79b9538e0bd5eaf251c6db08b", "commitAfterChange": "b732820bc2f8849bda78001b782e555a753cad1e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _displayMainError(URL url)", "signatureAfterChange": "   private void _displayMainError(URL url)", "diff": ["-   */", "+  /** Prints an error indicating that the HTML file to load in the main pane could not be found. */", "-    else {", "-      _resetMainPane();", "-    }", "+    else _resetMainPane();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31a78581614abb281d5dadc8fde6feae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "    protected void assertCompileErrorsPresent(String name, boolean b)", "signatureAfterChange": "    protected void assertCompileErrorsPresent(String name, boolean b)", "diff": ["-    if (name.length() > 0) {", "-      name += \": \";", "-    }", "+    if (name.length() > 0)  name += \": \";", "-    assertEquals(name + \"compile errors > 0? numErrors=\" + numErrors,", "-                 b,", "-                 numErrors > 0);", "+    assertEquals(name + \"compile errors > 0? numErrors=\" + numErrors, b, numErrors > 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31c534eabd47af372d6648a73a423992", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected String getQualifiedClassName(String className)", "signatureAfterChange": "   protected String getQualifiedClassName(String className)", "diff": ["-   */", "+    */", "-    if (!_package.equals(\"\") && !className.startsWith(_package)) {return _package + \".\" + className;}", "-    else { return className;}", "+    if (!_package.equals(\"\") && ! className.startsWith(_package)) { return _package + \".\" + className;}", "+    else return className;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31d7856a7353ff4df4f371d36c1803e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelState.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean _combineCurrentAndNextIfFind(String first, String second,                                        TokenList.Iterator copyCursor)", "signatureAfterChange": "   boolean _combineCurrentAndNextIfFind(String first, String second, TokenList.Iterator copyCursor)", "diff": ["-  boolean _combineCurrentAndNextIfFind(String first, String second,", "-                                       TokenList.Iterator copyCursor)", "-  {", "+  boolean _combineCurrentAndNextIfFind(String first, String second, TokenList.Iterator copyCursor) {", "-    {", "-    }", "+", "-      if ((copyCursor.current().getType().equals(\"\")) &&", "-          (copyCursor.prevItem().getType().equals(\"\"))) {", "+      if (copyCursor.current().getType().equals(\"\") && copyCursor.prevItem().getType().equals(\"\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31fd7b79e8fcc4cc87ba49d63f0fa6dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "cbdc405e8bd4373c383ad7cbc6a9a656b65ddd52", "commitAfterChange": "2c9a67ea7f4112fa7f99743281ac144c9f56d20a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void fullSetup()", "signatureAfterChange": "   private void fullSetup()", "diff": ["-   */", "+  /** Extra setup for test cases with several documents. */", "-    errors = new CompilerError[]", "-    { new CompilerError(files[0], \"Test error with File (no line)\", false),", "+    errors = new CompilerError[] { ", "+      new CompilerError(files[0], \"Test error with File (no line)\", false),", "-      new CompilerError(files[0], 1, 0, \"Test error with File\", false) };", "+      new CompilerError(files[0], 1, 0, \"Test error with File\", false) ", "+    };", "-    for (int i = 0; i < errors.length; i++) {", "-      copy[i] = errors[i];", "-    }", "+    for (int i = 0; i < errors.length; i++) copy[i] = errors[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3231d1a54908fd7376874c33c3e8604e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public String getName(KeyStroke ks)", "signatureAfterChange": "    public String getName(KeyStroke ks)", "diff": ["-    if (ksd == null) {", "-      return null;", "-    }", "+    if (ksd == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "330e7896b1853714262c743d93acc90d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public int getCurrentLine()", "signatureAfterChange": "   public int getCurrentLine()", "diff": ["-    if ( _cachedNextLineLoc > getLength() ){", "-      _cachedNextLineLoc = -1;", "-    }", "+    if ( _cachedNextLineLoc > getLength() ) _cachedNextLineLoc = -1;", "-    if( ! ( _cachedPrevLineLoc < here && here < _cachedNextLineLoc ) ){", "+    if( ! (_cachedPrevLineLoc < here && here < _cachedNextLineLoc )) {", "-      if( _cachedLocation - here > here ){", "+      if (_cachedLocation - here > here) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3350dc821cfd862806213d61dbb84f53", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 372, "methodNumberAfterChange": 372, "signatureBeforeChange": "\r \r   public void forConstructorDef(ConstructorDef that)", "signatureAfterChange": "    public void forConstructorDef(ConstructorDef that)", "diff": ["-\r", "-  public void forConstructorDef(ConstructorDef that) {\r", "-    forConstructorDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getParameters().length; i++) that.getParameters()[i].visit(this);\r", "-    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);\r", "-    that.getStatements().visit(this);\r", "-    forConstructorDefOnly(that);\r", "-  }\r", "+", "+  public void forConstructorDef(ConstructorDef that) {", "+    forConstructorDefDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getParameters().length; i++) that.getParameters()[i].visit(this);", "+    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);", "+    that.getStatements().visit(this);", "+    forConstructorDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35bc8d1b3c0e715de0aaa2311726d11c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 83, "signatureBeforeChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException,       IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException,       IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-        Value v = interpreter.invokeMethod(thread, method2Call, args,", "-                                     ObjectReference.INVOKE_SINGLE_THREADED);", "-        if (v != null) {", "-          v = _convertToActualType(thread, var, v);", "-        }", "+        Value v = interpreter.invokeMethod(thread, method2Call, args, ObjectReference.INVOKE_SINGLE_THREADED);", "+        if (v != null)  v = _convertToActualType(thread, var, v);", "-      catch (ObjectCollectedException oce) {", "-        tries++;", "-      }", "-      finally {", "-        sr.enableCollection();", "-      }", "+      catch (ObjectCollectedException oce) { tries++; }", "+      finally { sr.enableCollection(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36087e2f96c50ff646fb371e773f9424", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "signatureAfterChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "diff": ["-      if (!assertFound(args[i], that)) {return null;}", "-      if (!args[i].isInstanceType()) {", "+      if (! assertFound(args[i], that)) return null;", "+      if (! args[i].isInstanceType()) {", "-", "+      ", "-", "+    ", "-                           \"No method found in class \" + context.getName() + \" with signature: \", ", "-                           false, _getData().getSymbolData());", "-           ", "+                                  \"No method found in class \" + context.getName() + \" with signature: \", ", "+                                  false, _getData().getSymbolData());", "+    ", "-", "-    if (!context.isInstanceType() && !md.hasModifier(\"static\")) {", "+    ", "+    if (! context.isInstanceType() && ! md.hasModifier(\"static\")) {", "-", "+    ", "-", "+    ", "-                ", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36565c3c9e353e28533d1ad918f3c0f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "cbdc405e8bd4373c383ad7cbc6a9a656b65ddd52", "commitAfterChange": "2c9a67ea7f4112fa7f99743281ac144c9f56d20a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testConstructOneDocWithLineNums()", "signatureAfterChange": "   public void testConstructOneDocWithLineNums()", "diff": ["-    errors = new CompilerError[]", "-    { new CompilerError(files[0], 2, 0, \"Test error with File and line\", false),", "+    errors = new CompilerError[] { ", "+      new CompilerError(files[0], 2, 0, \"Test error with File and line\", false),", "-      new CompilerError(files[0], 1, 0, \"Test error with File and line\", false) };", "+      new CompilerError(files[0], 1, 0, \"Test error with File and line\", false) ", "+    };", "-    for (int i = 0; i < errors.length; i++) {", "-      copy[i] = errors[i];", "-    }", "+    for (int i = 0; i < errors.length; i++) copy[i] = errors[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "369b3f7925c28accbe4f8310a0fc6edb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "96bf5a5cd2d40db16b0b6c02c789d4b37a3a9876", "commitAfterChange": "0bdf9ca1ec4730da3a7aefde2e61b8646efd7da7", "methodNumberBeforeChange": 359, "methodNumberAfterChange": 360, "signatureBeforeChange": "   JButton _createManualToolbarButton(Action a)", "signatureAfterChange": "   JButton _createManualToolbarButton(Action a)", "diff": ["-      if (useText) {", "-        ret.setText((String) a.getValue(Action.DEFAULT));", "-      }", "+      if (useText) ret.setText((String) a.getValue(Action.DEFAULT));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36aee329312a9dad5d59738be9a071fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "75e37fee0d4b160f4d0f1fc58a049ca677edffbc", "commitAfterChange": "a1a11647d4dd38f0cbbb37dcb8ec06139897420a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void delete( int count )", "signatureAfterChange": "   public void delete( int count )", "diff": ["-    if (count == 0) {", "-      return;", "-    }", "+    if (count == 0)  return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36f3bf7f0a7e838dff514d78ae100e57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public TypeData forSimpleMethodInvocation(SimpleMethodInvocation that)", "signatureAfterChange": "   public TypeData forSimpleMethodInvocation(SimpleMethodInvocation that)", "diff": ["-    if (inStaticMethod()) { context = context.getSymbolData();} //Because it is static, want the SymbolData corresponding to the context, not the instance data.", "+    if (inStaticMethod()) context = context.getSymbolData();  // Need SymbolData for context, not instance data."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "374e6037dbbccdf2b02439d9700e06b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "b1ab5639c12e11d9d4773b42d5fad59d564680b4", "commitAfterChange": "c11d4ce83dfacd1ad010305b8bbd51b80abac1bf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void setActivePreviousDocument()", "signatureAfterChange": "   public void setActivePreviousDocument()", "diff": ["-   */", "+  /** Sets the active document to be the previous one in the collection. */", "-    if (key != prevKey) {", "+    if (key != prevKey) _documentNavigator.setActiveDoc(prevKey);", "-       * will signal a listener to call _setActiveDoc(...)", "-       */", "-      _documentNavigator.setActiveDoc(prevKey);", "-      //   _setActiveDoc(prevKey);", "-    }", "+       * will signal a listener to call _setActiveDoc(...) */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37addfde774aaa2fc9ebca1949dd51a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 474, "methodNumberAfterChange": 474, "signatureBeforeChange": "\r \r   public void forSimpleNameReference(SimpleNameReference that)", "signatureAfterChange": "    public void forSimpleNameReference(SimpleNameReference that)", "diff": ["-\r", "-  public void forSimpleNameReference(SimpleNameReference that) {\r", "-    forSimpleNameReferenceDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    forSimpleNameReferenceOnly(that);\r", "-  }\r", "+", "+  public void forSimpleNameReference(SimpleNameReference that) {", "+    forSimpleNameReferenceDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    forSimpleNameReferenceOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38c1421b805056bec87455f6c34c8f21", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 437, "methodNumberAfterChange": 437, "signatureBeforeChange": "\r \r   public void forGreaterThanOrEqualExpression(GreaterThanOrEqualExpression that)", "signatureAfterChange": "    public void forGreaterThanOrEqualExpression(GreaterThanOrEqualExpression that)", "diff": ["-\r", "-  public void forGreaterThanOrEqualExpression(GreaterThanOrEqualExpression that) {\r", "-    forGreaterThanOrEqualExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forGreaterThanOrEqualExpressionOnly(that);\r", "-  }\r", "+", "+  public void forGreaterThanOrEqualExpression(GreaterThanOrEqualExpression that) {", "+    forGreaterThanOrEqualExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forGreaterThanOrEqualExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "393b54bf7547e49e279ff135fa9914ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public synchronized void setActiveNextDocument()", "signatureAfterChange": "   public void setActiveNextDocument()", "diff": ["-   */", "-  public synchronized void setActiveNextDocument() {", "+  /** Sets the active document to be the next one in the collection. */", "+  public void setActiveNextDocument() {", "-      if( key != nextKey ) {", "+      if (key != nextKey) _documentNavigator.setActiveDoc(nextKey);", "-         * will signal a listener to call _setActiveDoc(...)", "-         */", "-          _documentNavigator.setActiveDoc(nextKey);", "-//   _setActiveDoc(nextKey);", "-      }", "+         * will signal a listener to call _setActiveDoc(...) */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39712686c1dd9bdbc930a3fce2d38a13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 441, "methodNumberAfterChange": 441, "signatureBeforeChange": "\r \r   public void forPlusExpression(PlusExpression that)", "signatureAfterChange": "    public void forPlusExpression(PlusExpression that)", "diff": ["-\r", "-  public void forPlusExpression(PlusExpression that) {\r", "-    forPlusExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forPlusExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPlusExpression(PlusExpression that) {", "+    forPlusExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forPlusExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39a1e7265c9b668d30e11b46b77843b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 417, "methodNumberAfterChange": 417, "signatureBeforeChange": "\r \r   public void forMinusAssignmentExpression(MinusAssignmentExpression that)", "signatureAfterChange": "    public void forMinusAssignmentExpression(MinusAssignmentExpression that)", "diff": ["-\r", "-  public void forMinusAssignmentExpression(MinusAssignmentExpression that) {\r", "-    forMinusAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forMinusAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMinusAssignmentExpression(MinusAssignmentExpression that) {", "+    forMinusAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forMinusAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39f1f1b2d0502960be42ff1e1d1210ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DelegatingAction.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    private boolean _isDelegatedKey(String key)", "signatureAfterChange": "    private boolean _isDelegatedKey(String key)", "diff": ["-      if (KEYS_TO_DELEGATE[i].equals(key)) {", "-        return true;", "-      }", "+      if (KEYS_TO_DELEGATE[i].equals(key)) return true;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a390ba0b1bca0ab5bb9577dee0b8b60", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "   protected void finalize()", "signatureAfterChange": "   protected void finalize()", "diff": ["-    for (FinalizationListener<DefinitionsPane> fl: _finalizationListeners) {", "-      fl.finalized(fe);", "-    }", "+    for (FinalizationListener<DefinitionsPane> fl: _finalizationListeners) fl.finalized(fe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ae0708c65ce19041a00d4434625d0b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsEventNotifier.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void interactionEnded()", "signatureAfterChange": "   public void interactionEnded()", "diff": ["-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).interactionEnded();", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).interactionEnded();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b6ab8e42f7a9128ea00ad9d2d59dc6b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/text/SwingDocumentAdapter.java", "commitBeforeChange": "a456c3c569290738778ef74445b985b166374279", "commitAfterChange": "96280514fb881d50943f0d3b8d04a28cff171d49", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void forceInsertText(int offs, String str, String style)     throws DocumentAdapterException", "signatureAfterChange": "   public void forceInsertText(int offs, String str, String style)     throws DocumentAdapterException", "diff": ["-    throws DocumentAdapterException", "-  {", "+    throws DocumentAdapterException {", "-    if (style != null) {", "-      s = getDocStyle(style);", "-    }", "+    if (style != null) s = getDocStyle(style);", "+    /* Using a writeLock is unnecessary because insertString is already thread-safe */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b6f7a3264913c80b5b0690cacec1921", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 442, "methodNumberAfterChange": 442, "signatureBeforeChange": "\r \r   public void forMinusExpression(MinusExpression that)", "signatureAfterChange": "    public void forMinusExpression(MinusExpression that)", "diff": ["-\r", "-  public void forMinusExpression(MinusExpression that) {\r", "-    forMinusExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forMinusExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMinusExpression(MinusExpression that) {", "+    forMinusExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forMinusExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bdc345b6cda4b3c72eca18b28e1fd79", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public void addTopLevelGroup(String name, INavigatorItemFilter f)", "signatureAfterChange": "   public synchronized void addTopLevelGroup(String name, INavigatorItemFilter f)", "diff": ["-  public void addTopLevelGroup(String name, INavigatorItemFilter f){", "-    if(f == null){", "+  public synchronized void addTopLevelGroup(String name, INavigatorItemFilter f){", "+    if (f == null)", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ced8aa304bd1095302bcea3f53b4f24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsEventNotifier.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void interactionErrorOccurred(int offset, int length)", "signatureAfterChange": "   public void interactionErrorOccurred(int offset, int length)", "diff": ["-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).interactionErrorOccurred(offset, length);", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).interactionErrorOccurred(offset, length);", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eb7afe825468c73fee0a846aeb46127", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JavadocDialog.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private boolean _isPositiveResult()", "signatureAfterChange": "   private boolean _isPositiveResult()", "diff": ["-   */", "+  /** Returns whether the JOptionPane currently has the OK_OPTION result. */", "-    else {", "-      return false;", "-    }", "+    else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ac24bd48302f33ef149dd8b6ff5d01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 450, "methodNumberAfterChange": 450, "signatureBeforeChange": "\r \r   public void forNegativePostfixIncrementExpression(NegativePostfixIncrementExpression that)", "signatureAfterChange": "    public void forNegativePostfixIncrementExpression(NegativePostfixIncrementExpression that)", "diff": ["-\r", "-  public void forNegativePostfixIncrementExpression(NegativePostfixIncrementExpression that) {\r", "-    forNegativePostfixIncrementExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forNegativePostfixIncrementExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNegativePostfixIncrementExpression(NegativePostfixIncrementExpression that) {", "+    forNegativePostfixIncrementExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forNegativePostfixIncrementExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "419284e4a9fa87e92ae853e59dfdd4d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/ConsoleDocument.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void insertText(int offs, String str, String style)     throws DocumentAdapterException", "signatureAfterChange": "   public synchronized void insertText(int offs, String str, String style) throws DocumentAdapterException", "diff": ["-  public void insertText(int offs, String str, String style)", "-    throws DocumentAdapterException", "-  {", "-    if (offs < _promptPos) {", "-      _beep.run();", "-    }", "+  public synchronized void insertText(int offs, String str, String style) throws DocumentAdapterException {", "+    if (offs < _promptPos) _beep.run();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41f2ef88f04f4c7cb96dd096924644fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 492, "methodNumberAfterChange": 492, "signatureBeforeChange": "\r \r   public void forParenthesizedExpressionList(ParenthesizedExpressionList that)", "signatureAfterChange": "    public void forParenthesizedExpressionList(ParenthesizedExpressionList that)", "diff": ["-\r", "-  public void forParenthesizedExpressionList(ParenthesizedExpressionList that) {\r", "-    forParenthesizedExpressionListDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);\r", "-    forParenthesizedExpressionListOnly(that);\r", "-  }\r", "+", "+  public void forParenthesizedExpressionList(ParenthesizedExpressionList that) {", "+    forParenthesizedExpressionListDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);", "+    forParenthesizedExpressionListOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "420f378b2b8acebbd4cb577506e958ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "35ca78e33b0503c2a6070986170dae99ba9dcb1a", "commitAfterChange": "6136e4c5753a47e4bcb40afa831b9c58e353fd69", "methodNumberBeforeChange": 343, "methodNumberAfterChange": 87, "signatureBeforeChange": "   public void resetInteractionsClasspath()", "signatureAfterChange": "   public void resetInteractionsClasspath()", "diff": ["-    if (projectExtras != null) {", "-      for (URL cpE : projectExtras) { _interactionsModel.addProjectClassPath(cpE); }", "-    }", "+    if (projectExtras != null)  for (URL cpE : projectExtras) { _interactionsModel.addProjectClassPath(cpE); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4240895783d0f85b524fc8bca21d2600", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 425, "methodNumberAfterChange": 425, "signatureBeforeChange": "\r \r   public void forBitwiseOrAssignmentExpression(BitwiseOrAssignmentExpression that)", "signatureAfterChange": "    public void forBitwiseOrAssignmentExpression(BitwiseOrAssignmentExpression that)", "diff": ["-\r", "-  public void forBitwiseOrAssignmentExpression(BitwiseOrAssignmentExpression that) {\r", "-    forBitwiseOrAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forBitwiseOrAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseOrAssignmentExpression(BitwiseOrAssignmentExpression that) {", "+    forBitwiseOrAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forBitwiseOrAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42d1211465689370887184e3906768ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void currThreadResumed()", "signatureAfterChange": "   public void currThreadResumed()", "diff": ["-   */", "+  /** Called when the current thread is resumed.  Must be executed in event thread. */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).currThreadResumed();", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).currThreadResumed();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43132ed0e6670fb93a8100a8f79e932e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Object visit(WhileStatement node)", "signatureAfterChange": "   public Object visit(WhileStatement node)", "diff": ["-        } catch (ContinueException e) {", "+        } ", "+        catch (ContinueException e) {", "-          if (e.isLabeled() && !node.hasLabel(e.getLabel())) {", "-            throw e;", "-          }", "+          if (e.isLabeled() && !node.hasLabel(e.getLabel())) throw e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "436630bce2243b69851b1c14e08abea4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public int getRowCount()", "signatureAfterChange": "      public int getRowCount()", "diff": ["-      if (_threads == null) {", "-        return 0;", "-      }", "+      if (_threads == null) return 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "443ec9f23f54ea4019db8d059ec88625", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyElementaryVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-   */\r", "-  public void forConcreteMethodDef(ConcreteMethodDef that) {\r", "-    forConcreteMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    md.addPublicMav(); //All methods are automatically public at the Elementary level.\r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Constructors are they only methods that can have the same name as the class they appear in, and they are not allowed at the Elementary level\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-    that.getBody().visit(new BodyBodyElementaryVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));\r", "-    forConcreteMethodDefOnly(that);\r", "-  }\r", "+   */", "+  public void forConcreteMethodDef(ConcreteMethodDef that) {", "+    forConcreteMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    MethodData md = createMethodData(that, _symbolData);", "+    md.addPublicMav(); // All methods are automatically public at the Elementary level.", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Constructors are they only methods that can have the same name as the class they appear in, and they are not allowed at the Elementary level\",", "+                         that);", "+    }", "+    else {", "+      _symbolData.addMethod(md);", "+    }", "+    that.getBody().visit(new BodyBodyElementaryVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));", "+    forConcreteMethodDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44aafef5fce51f3f4561822b6534e047", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 366, "methodNumberAfterChange": 366, "signatureBeforeChange": "\r \r   public void forCompoundWord(CompoundWord that)", "signatureAfterChange": "    public void forCompoundWord(CompoundWord that)", "diff": ["-\r", "-  public void forCompoundWord(CompoundWord that) {\r", "-    forCompoundWordDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getWords().length; i++) that.getWords()[i].visit(this);\r", "-    forCompoundWordOnly(that);\r", "-  }\r", "+", "+  public void forCompoundWord(CompoundWord that) {", "+    forCompoundWordDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getWords().length; i++) that.getWords()[i].visit(this);", "+    forCompoundWordOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44afe46f8496a36f125b8e63086c9579", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "19bcb8a67a06dcc2ef48a69b7811a95873e9cceb", "commitAfterChange": "a78feabf50a41fa3e5a96262d5810086d7fca66d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static String getWindowsToolsJar(String javaHome)", "signatureAfterChange": "   public static String getWindowsToolsJar(String javaHome)", "diff": ["-    if (javaHome.indexOf(\"Program Files\") == -1) {", "-      return \"\";", "-    }", "+    if (javaHome.indexOf(\"Program Files\") == -1) return \"\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f77c5dc161633bfb3edbb5008d0188", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 485, "methodNumberAfterChange": 485, "signatureBeforeChange": "\r \r   public void forComplexSuperConstructorInvocation(ComplexSuperConstructorInvocation that)", "signatureAfterChange": "    public void forComplexSuperConstructorInvocation(ComplexSuperConstructorInvocation that)", "diff": ["-\r", "-  public void forComplexSuperConstructorInvocation(ComplexSuperConstructorInvocation that) {\r", "-    forComplexSuperConstructorInvocationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    forComplexSuperConstructorInvocationOnly(that);\r", "-  }\r", "+", "+  public void forComplexSuperConstructorInvocation(ComplexSuperConstructorInvocation that) {", "+    forComplexSuperConstructorInvocationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getArguments().visit(this);", "+    forComplexSuperConstructorInvocationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45e100384c5907fdf89bbeeded756e58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 465, "methodNumberAfterChange": 465, "signatureBeforeChange": "\r \r   public void forNullLiteral(NullLiteral that)", "signatureAfterChange": "    public void forNullLiteral(NullLiteral that)", "diff": ["-\r", "-  public void forNullLiteral(NullLiteral that) {\r", "-    forNullLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forNullLiteralOnly(that);\r", "-  }\r", "+", "+  public void forNullLiteral(NullLiteral that) {", "+    forNullLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forNullLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46218bb3bef44cf8290fc415e276938e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 317, "methodNumberAfterChange": 317, "signatureBeforeChange": "   private File _getFullFile(File f) throws IOException", "signatureAfterChange": "   private File _getFullFile(File f) throws IOException", "diff": ["-          ((f.getAbsolutePath().indexOf(\"..\") != -1) ||", "-           (f.getAbsolutePath().indexOf(\"./\") != -1) ||", "+          ((f.getAbsolutePath().indexOf(\"..\") != -1) || (f.getAbsolutePath().indexOf(\"./\") != -1) ||", "-      else {", "-        return f.getAbsoluteFile();", "-      }", "+      return f.getAbsoluteFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46e4171f01136e6dc4770ecc88a6f226", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 377, "methodNumberAfterChange": 377, "signatureBeforeChange": "\r \r   public void forPackageImportStatement(PackageImportStatement that)", "signatureAfterChange": "    public void forPackageImportStatement(PackageImportStatement that)", "diff": ["-\r", "-  public void forPackageImportStatement(PackageImportStatement that) {\r", "-    forPackageImportStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCWord().visit(this);\r", "-    forPackageImportStatementOnly(that);\r", "-  }\r", "+", "+  public void forPackageImportStatement(PackageImportStatement that) {", "+    forPackageImportStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCWord().visit(this);", "+    forPackageImportStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47386edfd1dc32739881051586ce40ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ReverseHighlighter.java", "commitBeforeChange": "11468bc4ad25791b96b22dc517ca86e31b87894e", "commitAfterChange": "53d061333fe3393f6569c1f553912f1a449482ad", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public synchronized void damageRange(Position pos0, Position pos1)", "signatureAfterChange": "     public synchronized void damageRange(Position pos0, Position pos1)", "diff": ["-      if (addToQueue) {", "-        SwingUtilities.invokeLater(this);", "-      }", "+      if (addToQueue) SwingUtilities.invokeLater(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "475fe257d07b93fdc9149f6812b5fdd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public static void showDrJavaDebugConsole(MainFrame mf)", "signatureAfterChange": "   public static void showDrJavaDebugConsole(MainFrame mf)", "diff": ["-    else {", "-      _debugConsole.toFront();", "-    }", "+    else  _debugConsole.toFront();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47cfd1b6f9039f56589b10f068d998f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 432, "methodNumberAfterChange": 432, "signatureBeforeChange": "\r \r   public void forEqualsExpression(EqualsExpression that)", "signatureAfterChange": "    public void forEqualsExpression(EqualsExpression that)", "diff": ["-\r", "-  public void forEqualsExpression(EqualsExpression that) {\r", "-    forEqualsExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forEqualsExpressionOnly(that);\r", "-  }\r", "+", "+  public void forEqualsExpression(EqualsExpression that) {", "+    forEqualsExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forEqualsExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48c3f02cc233768c9d656686536f8bf1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 778, "methodNumberAfterChange": 778, "signatureBeforeChange": "   private void _followFile()", "signatureAfterChange": "   private void _followFile()", "diff": ["-    // LOG.log(\"_followFile\");", "-      // LOG.log(\"\\tfiles = \"+files);", "-      // LOG.log(\"\\tlength = \"+files.length);", "-        // LOG.log(\"\\tf = \"+f);", "-        if (lastIndex>=0) {", "-          end = end.substring(lastIndex+1);", "-        }", "+        if (lastIndex >= 0) end = end.substring(lastIndex+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "498f14ac79512940e0a41996042e55d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FileSelectorComponent.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public synchronized boolean validateTextField()", "signatureAfterChange": "   public synchronized boolean validateTextField()", "diff": ["-      if (!_file.exists()) {", "-        _file = null;", "-      }", "+      if (!_file.exists()) _file = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49f5c010e4d559e8d580282db83d8ed0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsEventNotifier.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void interpreterResetFailed(final Throwable t)", "signatureAfterChange": "   public void interpreterResetFailed(final Throwable t)", "diff": ["-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).interpreterResetFailed(t);", "-      }", "+      for (int i = 0; i < size; i++)  _listeners.get(i).interpreterResetFailed(t);", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aeb1bcfcc12cb3c9807492885444ef3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 365, "methodNumberAfterChange": 365, "signatureBeforeChange": "\r \r   public void forModifiersAndVisibility(ModifiersAndVisibility that)", "signatureAfterChange": "    public void forModifiersAndVisibility(ModifiersAndVisibility that)", "diff": ["-\r", "-  public void forModifiersAndVisibility(ModifiersAndVisibility that) {\r", "-    forModifiersAndVisibilityDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forModifiersAndVisibilityOnly(that);\r", "-  }\r", "+", "+  public void forModifiersAndVisibility(ModifiersAndVisibility that) {", "+    forModifiersAndVisibilityDoFirst(that);", "+    if (prune(that)) return;", "+    forModifiersAndVisibilityOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4af286dce1dad644b0e72e32a9c96363", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 369, "methodNumberAfterChange": 369, "signatureBeforeChange": "\r \r   public void forInnerClassDef(InnerClassDef that)", "signatureAfterChange": "    public void forInnerClassDef(InnerClassDef that)", "diff": ["-\r", "-  public void forInnerClassDef(InnerClassDef that) {\r", "-    forInnerClassDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getMav().visit(this);\r", "-    that.getName().visit(this);\r", "-    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);\r", "-    that.getSuperclass().visit(this);\r", "-    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);\r", "-    that.getBody().visit(this);\r", "-    forInnerClassDefOnly(that);\r", "-  }\r", "+", "+  public void forInnerClassDef(InnerClassDef that) {", "+    forInnerClassDefDoFirst(that);", "+    if (prune(that)) return;", "+    that.getMav().visit(this);", "+    that.getName().visit(this);", "+    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+    that.getSuperclass().visit(this);", "+    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);", "+    that.getBody().visit(this);", "+    forInnerClassDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b2dc0cffaf4d1635e0a3ea1b0762944", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/DocFile.java", "commitBeforeChange": "99105223925683ee669479026ce3b62dfa0eda84", "commitAfterChange": "94ede5fc3e289a571a76fcd6a91c26510fe57b12", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public File getAbsoluteFile()", "signatureAfterChange": "      public File getAbsoluteFile()", "diff": ["-    else {", "+    else", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c54a68a1ecf1a13ed25d4bac080c9fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public PredictiveInputFrame(Frame owner, String title, boolean force, boolean ignoreCase, InfoSupplier<? super T> info,                                java.util.List<PredictiveInputModel.MatchingStrategy<T>> strategies,                               CloseAction<T> okAction, CloseAction<T> cancelAction, java.util.List<T> items)", "signatureAfterChange": "    public PredictiveInputFrame(Frame owner, String title, boolean force, boolean ignoreCase, InfoSupplier<? super T> info,                                java.util.List<PredictiveInputModel.MatchingStrategy<T>> strategies,                               CloseAction<T> okAction, CloseAction<T> cancelAction, java.util.List<T> items)", "diff": ["+", "-    if (info==null) {", "-      throw new IllegalArgumentException(\"info is null\");", "-    }", "+    if (info==null) throw new IllegalArgumentException(\"info is null\");", "-    _pim = new PredictiveInputModel<T>(ignoreCase,", "-                                       _currentStrategy,", "-                                       items);", "+    _pim = new PredictiveInputModel<T>(ignoreCase, _currentStrategy, items);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c924fa3cb63397596dcfff678a881c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   protected ArrayList<String> _removeSeparators(String text)", "signatureAfterChange": "   protected ArrayList<String> _removeSeparators(String text)", "diff": ["-    if (!\"\".equals(last)) {", "-      interactions.add(last);", "-    }", "+    if (!\"\".equals(last)) interactions.add(last);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d6fc305a62e09a53ac30eb56b25f2ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 398, "methodNumberAfterChange": 398, "signatureBeforeChange": "\r \r   public void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "    public void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-\r", "-  public void forConcreteMethodDef(ConcreteMethodDef that) {\r", "-    forConcreteMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);\r", "-    that.getResult().visit(this);\r", "-    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);\r", "-    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);\r", "-    that.getBody().visit(this);\r", "-    forConcreteMethodDefOnly(that);\r", "-  }\r", "+", "+  public void forConcreteMethodDef(ConcreteMethodDef that) {", "+    forConcreteMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);", "+    that.getResult().visit(this);", "+    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);", "+    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);", "+    that.getBody().visit(this);", "+    forConcreteMethodDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dacef50b92fdfbf67eba802f58e4906", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/BooleanOptionComponent.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public boolean updateConfig()", "signatureAfterChange": "   public boolean updateConfig()", "diff": ["-    if (!oldValue.equals(newValue)) {", "-      DrJava.getConfig().setSetting(_option, newValue);      ", "-    }", "+    if (!oldValue.equals(newValue)) DrJava.getConfig().setSetting(_option, newValue);      ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1aab2d44e368d480e7379ac2f52b9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 445, "methodNumberAfterChange": 445, "signatureBeforeChange": "\r \r   public void forModExpression(ModExpression that)", "signatureAfterChange": "    public void forModExpression(ModExpression that)", "diff": ["-\r", "-  public void forModExpression(ModExpression that) {\r", "-    forModExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forModExpressionOnly(that);\r", "-  }\r", "+", "+  public void forModExpression(ModExpression that) {", "+    forModExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forModExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e440c20a0b1d192fb3abe041f699711", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected void _cleanUp(Event e) throws DebugException", "signatureAfterChange": "   protected void _cleanUp(Event e) throws DebugException", "diff": ["-        if (_debugger.hasSuspendedThreads()) {", "-          _debugger.currThreadDied();", "-        }", "+        if (_debugger.hasSuspendedThreads()) _debugger.currThreadDied();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "500990f39bdf0e9595ffc88549a681db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "cbdc405e8bd4373c383ad7cbc6a9a656b65ddd52", "commitAfterChange": "2c9a67ea7f4112fa7f99743281ac144c9f56d20a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testConstructOneDocWithoutLineNums()", "signatureAfterChange": "   public void testConstructOneDocWithoutLineNums()", "diff": ["-    errors = new CompilerError[]", "-    { new CompilerError(files[0], \"Test error with File\", false),", "+    errors = new CompilerError[] { ", "+      new CompilerError(files[0], \"Test error with File\", false),", "-      new CompilerError(files[0], \"Test error with File\", false) };", "+      new CompilerError(files[0], \"Test error with File\", false) ", "+    };", "-    for (int i = 0; i < errors.length; i++) {", "-      copy[i] = errors[i];", "-    }", "+    for (int i = 0; i < errors.length; i++)  copy[i] = errors[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "504aeb5217cece429e7a38db0e6be50f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "signatureAfterChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "diff": ["-        ", "-        ", "-    if (md == null) {", "-      return null;", "-    }", "+           ", "+    if (md == null)  return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f3396220f4391b2a461a1567899375", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   protected static void writeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName)", "signatureAfterChange": "   protected static void writeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName)", "diff": ["-    if (equals == null) { return; }", "+    if (equals == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50ff5689840ca53814811efbe00d443a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "   private void okButtonPressed()", "signatureAfterChange": "   private void okButtonPressed()", "diff": ["-   */", "+  /** Handle OK button. */", "-    else {", "-      Toolkit.getDefaultToolkit().beep();", "-    }", "+    else Toolkit.getDefaultToolkit().beep();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5149c17d3b4e297417463ee286f1711e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 424, "methodNumberAfterChange": 424, "signatureBeforeChange": "\r \r   public void forBitwiseAndAssignmentExpression(BitwiseAndAssignmentExpression that)", "signatureAfterChange": "    public void forBitwiseAndAssignmentExpression(BitwiseAndAssignmentExpression that)", "diff": ["-\r", "-  public void forBitwiseAndAssignmentExpression(BitwiseAndAssignmentExpression that) {\r", "-    forBitwiseAndAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forBitwiseAndAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseAndAssignmentExpression(BitwiseAndAssignmentExpression that) {", "+    forBitwiseAndAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forBitwiseAndAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523a3bfe72d5d1e12fd6874fec1599d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "      public void redo()", "signatureAfterChange": "      public void redo()", "diff": ["-      if(_pos > -1) {", "-        setCaretPosition(_pos);", "-      }", "+      if (_pos > -1) setCaretPosition(_pos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52dfa12aa45bbd55b4547a7bec158d0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "   protected static void writeConstructor(String className, SymbolData sd, int baseIndent)", "signatureAfterChange": "   protected static void writeConstructor(String className, SymbolData sd, int baseIndent)", "diff": ["-    if (constructor == null) { return; }", "+    if (constructor == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5332e825b8f8d09da0253a8bc1c70def", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsEventNotifier.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void interactionIncomplete()", "signatureAfterChange": "   public void interactionIncomplete()", "diff": ["-   */", "+  /** Notifies the view that the current interaction is incomplete. */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).interactionIncomplete();", "-      }", "+      for (int i = 0; i < size; i++)  _listeners.get(i).interactionIncomplete();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5352032b206d1f40eed8195f079b936e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 403, "methodNumberAfterChange": 403, "signatureBeforeChange": "\r \r   public void forInitializedVariableDeclarator(InitializedVariableDeclarator that)", "signatureAfterChange": "    public void forInitializedVariableDeclarator(InitializedVariableDeclarator that)", "diff": ["-\r", "-  public void forInitializedVariableDeclarator(InitializedVariableDeclarator that) {\r", "-    forInitializedVariableDeclaratorDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    that.getInitializer().visit(this);\r", "-    forInitializedVariableDeclaratorOnly(that);\r", "-  }\r", "+", "+  public void forInitializedVariableDeclarator(InitializedVariableDeclarator that) {", "+    forInitializedVariableDeclaratorDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    that.getInitializer().visit(this);", "+    forInitializedVariableDeclaratorOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53e962414d25bed8ea448ffb2b418af3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 480, "methodNumberAfterChange": 480, "signatureBeforeChange": "\r \r   public void forSimpleMethodInvocation(SimpleMethodInvocation that)", "signatureAfterChange": "    public void forSimpleMethodInvocation(SimpleMethodInvocation that)", "diff": ["-\r", "-  public void forSimpleMethodInvocation(SimpleMethodInvocation that) {\r", "-    forSimpleMethodInvocationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    forSimpleMethodInvocationOnly(that);\r", "-  }\r", "+", "+  public void forSimpleMethodInvocation(SimpleMethodInvocation that) {", "+    forSimpleMethodInvocationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getArguments().visit(this);", "+    forSimpleMethodInvocationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "545dc06d1f3248a66e4a1fb552b2df91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FileSelectorStringComponent.java", "commitBeforeChange": "f6810ad68cbb0aaa0d9f5ff0052437da87098ab7", "commitAfterChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public File getFileFromField()", "signatureAfterChange": "   public File getFileFromField()", "diff": ["-      if (! newFile.isDirectory() && ! _chooser.isFileSelectionEnabled()) {", "-        newFile = newFile.getParentFile();", "-      }", "+      if (! newFile.isDirectory() && ! _chooser.isFileSelectionEnabled()) newFile = newFile.getParentFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "547a6a098675a53ee028d1577644f109", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ClipboardHistoryModel.java", "commitBeforeChange": "7f94cfd1774dbfb41262aa476756f21c6558cb5e", "commitAfterChange": "b1ebbc03deb7917e9ae8bd939bbb71da323d5ba5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static synchronized ClipboardHistoryModel singleton()", "signatureAfterChange": "   public static synchronized ClipboardHistoryModel singleton()", "diff": ["-    if (ONLY==null) {", "-      ONLY = new ClipboardHistoryModel(10);", "-    }", "+    if (ONLY == null) ONLY = new ClipboardHistoryModel(10);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54aebf255645c7080fef49dac5f725de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 457, "signatureBeforeChange": "\r \r   public void forCastExpression(CastExpression that)", "signatureAfterChange": "    public void forCastExpression(CastExpression that)", "diff": ["-\r", "-  public void forCastExpression(CastExpression that) {\r", "-    forCastExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forCastExpressionOnly(that);\r", "-  }\r", "+", "+  public void forCastExpression(CastExpression that) {", "+    forCastExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    that.getValue().visit(this);", "+    forCastExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5541819e0f9e1b9e4b680364f1bc2288", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 401, "signatureBeforeChange": "\r \r   public void forVariableDeclaration(VariableDeclaration that)", "signatureAfterChange": "    public void forVariableDeclaration(VariableDeclaration that)", "diff": ["-\r", "-  public void forVariableDeclaration(VariableDeclaration that) {\r", "-    forVariableDeclarationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getDeclarators().length; i++) that.getDeclarators()[i].visit(this);\r", "-    forVariableDeclarationOnly(that);\r", "-  }\r", "+", "+  public void forVariableDeclaration(VariableDeclaration that) {", "+    forVariableDeclarationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getDeclarators().length; i++) that.getDeclarators()[i].visit(this);", "+    forVariableDeclarationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5564aba7301952911a22b3795be70b8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/History.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void movePrevious(String entry)", "signatureAfterChange": "   public void movePrevious(String entry)", "diff": ["-    if (!hasPrevious()) {", "-      throw  new ArrayIndexOutOfBoundsException();", "-    }", "+    if (! hasPrevious()) throw new ArrayIndexOutOfBoundsException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55d641ef8c75cbe223295bb0afe35c75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyAdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public void forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-   */\r", "-  public void forAbstractMethodDef(AbstractMethodDef that) {\r", "-    forAbstractMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-\r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-  }\r", "+   */", "+  public void forAbstractMethodDef(AbstractMethodDef that) {", "+    forAbstractMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+", "+    MethodData md = createMethodData(that, _symbolData);", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+                         that);", "+    }", "+    else {", "+      _symbolData.addMethod(md);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55e3e197fd4310abb6e0650654cd2f95", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/StickyClassLoader.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public URL getResource(String name)", "signatureAfterChange": "   public URL getResource(String name)", "diff": ["-    if (resource == null) {", "-      resource = getParent().getResource(name);", "-    }", "+    if (resource == null) resource = getParent().getResource(name);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "569289bed79a8010e4de5353ab8bc179", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": "   private void _disableStepTimer()", "signatureAfterChange": "   private void _disableStepTimer()", "diff": ["-   */", "+  /** Disable any step timer. */", "-      if (_debugStepTimer.isRunning()) {", "-        _debugStepTimer.stop();", "-      }", "+      if (_debugStepTimer.isRunning()) _debugStepTimer.stop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5854aeb02cc2240fccea4af3499b4c2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/Javac150FromSetLocation.java", "commitBeforeChange": "0ceee5d462dea01e571a97507c2d04495b971db0", "commitAfterChange": "ab9e3c17a5a3c5f93e2194242f915fa2f6bda14a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    private static ClassLoader _getClassLoader()", "signatureAfterChange": "    private static ClassLoader _getClassLoader()", "diff": ["-    if (loc == FileOption.NULL_FILE) {", "-      throw new RuntimeException(\"javac location not set\");", "-    }", "+    if (loc == FileOption.NULL_FILE) throw new RuntimeException(\"javac location not set\");", "-    catch (MalformedURLException e) {", "-      throw new RuntimeException(\"malformed url exception\");", "-    }", "+    catch (MalformedURLException e) { throw new RuntimeException(\"malformed url exception\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "589679a93c4e5c8abdc57286788c5c6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigPanel.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void resetToCurrent()", "signatureAfterChange": "   public void resetToCurrent()", "diff": ["-    for (int i=0; i < _components.size(); i++) {", "-      _components.get(i).resetToCurrent();", "-    }", "+    for (int i=0; i < _components.size(); i++) _components.get(i).resetToCurrent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a9aa716093e0abe5b6c57723d48e8e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 420, "methodNumberAfterChange": 420, "signatureBeforeChange": "\r \r   public void forModAssignmentExpression(ModAssignmentExpression that)", "signatureAfterChange": "    public void forModAssignmentExpression(ModAssignmentExpression that)", "diff": ["-\r", "-  public void forModAssignmentExpression(ModAssignmentExpression that) {\r", "-    forModAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forModAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forModAssignmentExpression(ModAssignmentExpression that) {", "+    forModAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forModAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e21dfe23a7cae01e349868d1596986", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "c54f895c64c338869d4732b7d104266f2463eff5", "commitAfterChange": "ba40eae5dba31b91fc6bc51ee1deb14f2cfcacbf", "methodNumberBeforeChange": 324, "methodNumberAfterChange": 324, "signatureBeforeChange": "   void _switchDefScrollPane()", "signatureAfterChange": "   void _switchDefScrollPane()", "diff": ["-", "-", "+//    Utilities.showDebug(\"_switchDefScrollPane called\");", "-    if (scroll == null) {", "-      scroll = _createDefScrollPane(_model.getActiveDocument());", "-    }", "-", "+    if (scroll == null)  scroll = _createDefScrollPane(_model.getActiveDocument());", "+", "-    _docSplitPane.setRightComponent(scroll);", "+    _docSplitPane.setRightComponent(scroll); //crazy line"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598f60aa5c021e1dcbe2d6821085b3ee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "commitAfterChange": "ee2a4f62f26e8f47974ad5d674dd24e422820bcc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   protected void goToRegion()", "signatureAfterChange": "   protected void goToRegion()", "diff": ["-    if (r.size() == 1) {", "-      _frame.scrollToDocumentAndOffset(r.get(0).getDocument(), r.get(0).getStartOffset(), false);", "-    }", "+    if (r.size() == 1) _frame.scrollToDocumentAndOffset(r.get(0).getDocument(), r.get(0).getStartOffset(), false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a808bb3adb182b847281a76d9951662", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyElementaryVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r   public void forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public void forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-   */\r", "-  public void forAbstractMethodDef(AbstractMethodDef that) {\r", "-    forAbstractMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Constructors are they only methods that can have the same name as the class they appear in, and they are not allowed at the Elementary level\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-    forAbstractMethodDefOnly(that);\r", "-  }\r", "+   */", "+  public void forAbstractMethodDef(AbstractMethodDef that) {", "+    forAbstractMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    MethodData md = createMethodData(that, _symbolData);", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Constructors are they only methods that can have the same name as the class they appear in, and they are not allowed at the Elementary level\",", "+                         that);", "+    }", "+    else {", "+      _symbolData.addMethod(md);", "+    }", "+    forAbstractMethodDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ad7471da81a01d8a6103415251dd779", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 458, "methodNumberAfterChange": 458, "signatureBeforeChange": "\r \r   public void forIntegerLiteral(IntegerLiteral that)", "signatureAfterChange": "    public void forIntegerLiteral(IntegerLiteral that)", "diff": ["-\r", "-  public void forIntegerLiteral(IntegerLiteral that) {\r", "-    forIntegerLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forIntegerLiteralOnly(that);\r", "-  }\r", "+", "+  public void forIntegerLiteral(IntegerLiteral that) {", "+    forIntegerLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forIntegerLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5afc89b790768073f3473f7e84e7b20a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/History.java", "commitBeforeChange": "92fd06b34796984853343dde64251cfdd2a0ce25", "commitAfterChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void add(String item)", "signatureAfterChange": "   public void add(String item)", "diff": ["-   */", "+    */", "-      // If adding the new element has filled _vector to beyond max", "-      // capacity, spill the oldest element out of the History.", "-      if (_vector.size() > _maxSize) {", "-        _vector.remove(0);", "-      }", "+      // If max size of _vector is exceeded, spill the oldest element out of the History.", "+      if (_vector.size() > _maxSize) _vector.remove(0);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b8b35d0072df80364f53f596be746a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "    public void appendSyntaxErrorResult(String message, String interaction, int startRow, int startCol,                                       int endRow, int endCol, String styleName)", "signatureAfterChange": "    public void appendSyntaxErrorResult(String message, String interaction, int startRow, int startCol,                                       int endRow, int endCol, String styleName)", "diff": ["-    //writeLock();", "-      if (null == message || \"null\".equals(message)) {", "-        message = \"\";", "-      }", "+      if (null == message || \"null\".equals(message))  message = \"\";", "-      if(message.indexOf(\"Lexical error\") != -1) {", "+      if (message.indexOf(\"Lexical error\") != -1) {", "-        if(i != -1)", "-          message = \"Syntax Error:\" + message.substring(i+2,message.length());                                ", "+        if (i != -1) message = \"Syntax Error:\" + message.substring(i+2,message.length());                                ", "-      if(message.indexOf(\"Error\") == -1) ", "-        message = \"Error: \" + message;", "+      if (message.indexOf(\"Error\") == -1) message = \"Error: \" + message;", "-    catch (DocumentAdapterException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "-//    finally {", "-//      writeUnlock();", "-//    }", "+    catch (DocumentAdapterException ble) { throw new UnexpectedException(ble); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb20bd43f59b568088f8560e2cf9169", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data)", "signatureAfterChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data)", "diff": ["-    if (prune(that)) {return;}", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c8f3cf3ddccdd68a4f4bad69a9b64a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "8f8a64864bd9c3c9658401188aaec5c9c0dfe4f7", "commitAfterChange": "9e1a29777c7e5973840e817aca59ceea66af7a9c", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "      public int getCurrentLine()", "signatureAfterChange": "      public int getCurrentLine()", "diff": ["-      if (startRect == null) {", "-        return 1;", "-      }", "+      if (startRect == null) return 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d3d2c08a59dc1096eace0d38d586164", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/ExecJVM.java", "commitBeforeChange": "19bcb8a67a06dcc2ef48a69b7811a95873e9cceb", "commitAfterChange": "a78feabf50a41fa3e5a96262d5810086d7fca66d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private static Process _runJVM(String mainClass, String[] classParams, String[] jvmParams, File workDir) throws IOException", "signatureAfterChange": "   private static Process _runJVM(String mainClass, String[] classParams, String[] jvmParams, File workDir) throws IOException", "diff": ["-      if (workDir.exists()) {", "-        p = Runtime.getRuntime().exec(argArray, null, workDir);", "-      }", "+      if (workDir.exists()) p = Runtime.getRuntime().exec(argArray, null, workDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d5bad52c06f1404885dfd900e90b421", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public int findCharOnLine(int pos, char findChar)", "signatureAfterChange": "   public int findCharOnLine(int pos, char findChar)", "diff": ["-    if (cached != null) {", "-      return cached.intValue();", "-    }", "+    if (cached != null) return cached.intValue();", "-      try {", "-        lineText = this.getText(lineStart, lineEnd - lineStart);", "-      } catch(BadLocationException e) {", "-        // Should not be here", "-        throw new UnexpectedException(e);", "-      }", "+      try { lineText = this.getText(lineStart, lineEnd - lineStart); } ", "+      catch(BadLocationException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9d3f8b2f4927ae1095506fa4d42a39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b1ab5639c12e11d9d4773b42d5fad59d564680b4", "commitAfterChange": "c11d4ce83dfacd1ad010305b8bbd51b80abac1bf", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 252, "signatureBeforeChange": "   private void _showDebuggingModifiedFileWarning()", "signatureAfterChange": "   private void _showDebuggingModifiedFileWarning()", "diff": ["-      if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {", "+      if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue())", "-      }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5df8ab6f848796909e4b12d796b0bc69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": "\r \r   public void forTypeVariable(TypeVariable that)", "signatureAfterChange": "    public void forTypeVariable(TypeVariable that)", "diff": ["-\r", "-  public void forTypeVariable(TypeVariable that) {\r", "-    forTypeVariableDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forTypeVariableOnly(that);\r", "-  }\r", "+", "+  public void forTypeVariable(TypeVariable that) {", "+    forTypeVariableDoFirst(that);", "+    if (prune(that)) return;", "+    forTypeVariableOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fe991aa91de034fa1d63c5fee4ba166", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 374, "methodNumberAfterChange": 374, "signatureBeforeChange": "\r \r   public void forStaticInitializer(StaticInitializer that)", "signatureAfterChange": "    public void forStaticInitializer(StaticInitializer that)", "diff": ["-\r", "-  public void forStaticInitializer(StaticInitializer that) {\r", "-    forStaticInitializerDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCode().visit(this);\r", "-    forStaticInitializerOnly(that);\r", "-  }\r", "+", "+  public void forStaticInitializer(StaticInitializer that) {", "+    forStaticInitializerDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCode().visit(this);", "+    forStaticInitializerOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ff319c045380bbfe355e1c0f7f97c22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/DocFile.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public File getAbsoluteFile()", "signatureAfterChange": "      public File getAbsoluteFile()", "diff": ["-    if (isAbsolute()) {", "-      return this;", "-    }", "+    if (isAbsolute()) return this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60a3dafbb2342a236f1c60e51d404ae0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": "   void open(FileOpenSelector openSelector)", "signatureAfterChange": "   void open(FileOpenSelector openSelector)", "diff": ["-        int choice = JOptionPane.showConfirmDialog(this,", "-                                                   message,", "-                                                   title,", "-                                                   JOptionPane.YES_NO_OPTION);", "-        if (choice == JOptionPane.YES_OPTION) {", "-          _revert();", "-        }", "+        int choice = JOptionPane.showConfirmDialog(this, message, title, JOptionPane.YES_NO_OPTION);", "+        if (choice == JOptionPane.YES_OPTION) _revert();", "-        if(! _model.isProjectFile(f))", "-          _recentFileManager.updateOpenFiles(f);", "+        if (! _model.isProjectFile(f)) _recentFileManager.updateOpenFiles(f);", "-        if(! _model.isProjectFile(f))", "+        if (! _model.isProjectFile(f))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6182c6ad46fc6f02c20ba982b29443ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "b1ab5639c12e11d9d4773b42d5fad59d564680b4", "commitAfterChange": "c11d4ce83dfacd1ad010305b8bbd51b80abac1bf", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": "     File _getSourceRoot(String packageName)       throws InvalidPackageException", "signatureAfterChange": "     File _getSourceRoot(String packageName)       throws InvalidPackageException", "diff": ["-          if (parentDir == null) {", "-            throw new RuntimeException(\"parent dir is null?!\");", "-          }", "+          if (parentDir == null) throw new RuntimeException(\"parent dir is null?!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61dcbb979e27f8d6279fd1cb31766e35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "commitAfterChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "methodNumberBeforeChange": 859, "methodNumberAfterChange": 859, "signatureBeforeChange": "   public void removeModalWindowAdapter(Window w)", "signatureAfterChange": "   public void removeModalWindowAdapter(Window w)", "diff": ["-    if (! _modalWindowAdapters.containsKey(w)) { // the specified window does not have a modal windowadapter", "-      return;", "-    }", "+    if (! _modalWindowAdapters.containsKey(w)) return; // the specified window does not have a modal windowadapter", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626a27252cda979e6307d538bd20bd87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "8f8a64864bd9c3c9658401188aaec5c9c0dfe4f7", "commitAfterChange": "9e1a29777c7e5973840e817aca59ceea66af7a9c", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public void setSize(int width, int height)", "signatureAfterChange": "      public void setSize(int width, int height)", "diff": ["-  }", "+  ", "-    if (_setSizeListener != null) {", "-      _setSizeListener.actionPerformed(null);", "-    }", "+    if (_setSizeListener != null) _setSizeListener.actionPerformed(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62b2b4b3c1d9093125f67388728a342d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void addProjectClassPath(URL s)", "signatureAfterChange": "   public void addProjectClassPath(URL s)", "diff": ["-    if (_classPath.contains(s)) {", "-      // Don't add it again", "-      return;", "-    }", "+    if (_classPath.contains(s)) return;  // Don't add it again"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63f277a57ee771db096b6fb49d2ccfc6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AWTExceptionHandler.java", "commitBeforeChange": "701cda038bdbb4505f738d5f2728e5888b8608b3", "commitAfterChange": "a2c3a24c2af61d289658b8fde0de718a948c97d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    public void handle(Throwable thrown)", "signatureAfterChange": "    public void handle(Throwable thrown)", "diff": ["-    if (frame == null) {", "-      frame = new JFrame();", "-    }", "-    new UncaughtExceptionWindow(frame,thrown);", "+    if (frame == null) frame = new JFrame();", "+    new UncaughtExceptionWindow(frame, thrown);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6538e628c6fda44bb1d709b7c1a4e8bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 422, "methodNumberAfterChange": 422, "signatureBeforeChange": "\r \r   public void forRightSignedShiftAssignmentExpression(RightSignedShiftAssignmentExpression that)", "signatureAfterChange": "    public void forRightSignedShiftAssignmentExpression(RightSignedShiftAssignmentExpression that)", "diff": ["-\r", "-  public void forRightSignedShiftAssignmentExpression(RightSignedShiftAssignmentExpression that) {\r", "-    forRightSignedShiftAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forRightSignedShiftAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forRightSignedShiftAssignmentExpression(RightSignedShiftAssignmentExpression that) {", "+    forRightSignedShiftAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forRightSignedShiftAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "654394f0c354d8a70db36b25c79da305", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 439, "methodNumberAfterChange": 439, "signatureBeforeChange": "\r \r   public void forRightSignedShiftExpression(RightSignedShiftExpression that)", "signatureAfterChange": "    public void forRightSignedShiftExpression(RightSignedShiftExpression that)", "diff": ["-\r", "-  public void forRightSignedShiftExpression(RightSignedShiftExpression that) {\r", "-    forRightSignedShiftExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forRightSignedShiftExpressionOnly(that);\r", "-  }\r", "+", "+  public void forRightSignedShiftExpression(RightSignedShiftExpression that) {", "+    forRightSignedShiftExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forRightSignedShiftExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65cb4ff57862541d7053f2eac44114df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "   public boolean closeFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean closeFile(OpenDefinitionsDocument doc)", "diff": ["-//    System.err.println(\"closing \" + doc);", "+    //    System.err.println(\"closing \" + doc);", "-    if (canClose) {", "-      return closeFileWithoutPrompt(doc);", "-    }", "+    if (canClose) return closeFileWithoutPrompt(doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66ef267ca36d724258de92d3fbc4db23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    private boolean _createCompiler(String name, LinkedList<CompilerInterface> availableCompilers) throws Throwable", "signatureAfterChange": "    private boolean _createCompiler(String name, LinkedList<CompilerInterface> availableCompilers) throws Throwable", "diff": ["-    else {", "-      return false;", "+    else return false;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "673a471899978562eba19405460b5046", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 440, "methodNumberAfterChange": 440, "signatureBeforeChange": "\r \r   public void forRightUnsignedShiftExpression(RightUnsignedShiftExpression that)", "signatureAfterChange": "    public void forRightUnsignedShiftExpression(RightUnsignedShiftExpression that)", "diff": ["-\r", "-  public void forRightUnsignedShiftExpression(RightUnsignedShiftExpression that) {\r", "-    forRightUnsignedShiftExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forRightUnsignedShiftExpressionOnly(that);\r", "-  }\r", "+", "+  public void forRightUnsignedShiftExpression(RightUnsignedShiftExpression that) {", "+    forRightUnsignedShiftExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forRightUnsignedShiftExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "684e7b99572dd45d0fe7916529df8a64", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/ExecJVM.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static Process runJVM(String mainClass,                                String[] classParams,                                String[] classPath,                                String[] jvmParams) throws IOException", "signatureAfterChange": "   public static Process runJVM(String mainClass,                                String[] classParams,                                String[] classPath,                                String[] jvmParams) throws IOException", "diff": ["-      if (i != 0) {", "-        buf.append(PATH_SEPARATOR);", "-      }", "+      if (i != 0) buf.append(PATH_SEPARATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68951da06d93079f17be26ad7332cbc6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 446, "methodNumberAfterChange": 446, "signatureBeforeChange": "\r \r   public void forNoOpExpression(NoOpExpression that)", "signatureAfterChange": "    public void forNoOpExpression(NoOpExpression that)", "diff": ["-\r", "-  public void forNoOpExpression(NoOpExpression that) {\r", "-    forNoOpExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forNoOpExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNoOpExpression(NoOpExpression that) {", "+    forNoOpExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forNoOpExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68de3072890edff31b61cd210f33d179", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public void setPrivateAccessible(boolean allow)", "signatureAfterChange": "   public void setPrivateAccessible(boolean allow)", "diff": ["-   */", "+  /** Sets the interpreter to allow access to private members. */", "-    if (!_enabled) {", "-      return;", "-    }", "+    if (!_enabled) return;", "-    try {", "-      _interpreterJVM().setPrivateAccessible(allow);", "-    }", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "+    try { _interpreterJVM().setPrivateAccessible(allow); }", "+    catch (RemoteException re) { _threwException(re); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b327aa8931a63cac84630cff0bfa41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/MultiThreadedTestCase.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void tearDown() throws IOException", "signatureAfterChange": "   public void tearDown() throws IOException", "diff": ["-   */", "+  /** If any test failed, print a message saying that some test failed in another thread (not the testing thread). */", "-    if ( _testFailed ) {", "-      fail(\"test failed in another thread\");", "-    }", "+    if ( _testFailed ) fail(\"test failed in another thread\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a6bdaff1a9908909f3d1cce73020a1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void forModifiersAndVisibilityDoFirst(ModifiersAndVisibility that)", "signatureAfterChange": "   public void forModifiersAndVisibilityDoFirst(ModifiersAndVisibility that)", "diff": ["-      if (!(temp.equals(\"abstract\") || temp.equals(\"public\") || temp.equals(\"private\") || temp.equals(\"protected\") || temp.equals(\"static\"))) {", "+      if (! (temp.equals(\"abstract\") || temp.equals(\"public\") || temp.equals(\"private\") || temp.equals(\"protected\") || temp.equals(\"static\"))) {", "-      if (count > 1) {", "-        temp = temp + \"s\";", "-      }", "+      if (count > 1)  temp = temp + \"s\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aac4d81a169b76c7b1cdcb0257526aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void setOpenDefDoc(OpenDefinitionsDocument odd)", "signatureAfterChange": "   public void setOpenDefDoc(OpenDefinitionsDocument odd)", "diff": ["-  public void setOpenDefDoc(OpenDefinitionsDocument odd){", "-    if(_odd == null){", "-      _odd = odd;", "-    }", "-  }", "+  public void setOpenDefDoc(OpenDefinitionsDocument odd) { if(_odd == null) _odd = odd; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ac7b73a6a24770dfc6b9b526c79cab9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "    public String getName(Action a)", "signatureAfterChange": "    public String getName(Action a)", "diff": ["-    if (ksd == null) {", "-      return null;", "-    }", "+    if (ksd == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b9566e813983a9f5904c7a8f3831e2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 418, "methodNumberAfterChange": 418, "signatureBeforeChange": "\r \r   public void forMultiplyAssignmentExpression(MultiplyAssignmentExpression that)", "signatureAfterChange": "    public void forMultiplyAssignmentExpression(MultiplyAssignmentExpression that)", "diff": ["-\r", "-  public void forMultiplyAssignmentExpression(MultiplyAssignmentExpression that) {\r", "-    forMultiplyAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forMultiplyAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMultiplyAssignmentExpression(MultiplyAssignmentExpression that) {", "+    forMultiplyAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forMultiplyAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ce90eeb36db43edc523066c9eb1d367", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException", "signatureAfterChange": "   public synchronized String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException", "diff": ["-  public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException{", "+  public synchronized String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException{", "-    if(n == _model.getRoot()){", "+    if(n == _model.getRoot())", "-    }", "-    while(!_roots.contains(n)){", "-      n = n.getParent();", "-    }", "+    while(!_roots.contains(n)) { n = n.getParent(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d7dbed59a44a9a18a12fdfe52cd1ad7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 47, "signatureBeforeChange": "   protected static boolean _checkError()", "signatureAfterChange": "   protected static boolean _checkError()", "diff": ["-    else {", "-      return false;", "-    }", "+    else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d84a4b3d55b18150219875ccf2c6cd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/TokenList.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private boolean _checkPrevEquals(TokenList.Iterator delTo,                                      String match)", "signatureAfterChange": "     private boolean _checkPrevEquals(TokenList.Iterator delTo,                                      String match)", "diff": ["-      if (delTo.atFirstItem() || delTo.atStart()) {", "-        return false;", "-      }", "+      if (delTo.atFirstItem() || delTo.atStart()) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6daffeba4bffd5e5cf95a04c90b138ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": "    public boolean isCastableTo(SymbolData castTo, JavaVersion version)", "signatureAfterChange": "    public boolean isCastableTo(SymbolData castTo, JavaVersion version)", "diff": ["-         if (LanguageLevelConverter.versionSupportsAutoboxing(version)) { //You never box the left, so see if this can be unboxed to be a primitive.", "+         if (LanguageLevelConverter.versionSupportsAutoboxing(version)) { ", "+           //You never box the left, so see if this can be unboxed to be a primitive.", "-       else { //this is an interface", "+       else { // this is an interface", "-         else { //castTo is an interface", "-           //return false if this and castTo contain one or more methods with the same signature but different return types.", "-           if (LanguageLevelConverter.versionSupportsAutoboxing(version)) {return true;} //this check is no longer done in 1.5", "+         else { // castTo is an interface", "+           // return false if this and castTo contain methods with the same signature but different return types.", "+           if (LanguageLevelConverter.versionSupportsAutoboxing(version)) return true; ", "-               //TypeChecker._addError(\"Types \" + this.getName() + \" and \" + castTo.getName() + \" are incompatible.  Both implement \" + md.getName() + \" but have different return types\", md.getSourceInfo());", "+               /* TypeChecker._addError(\"Types \" + this.getName() + \" and \" + castTo.getName() + \" are incompatible.  ", "+                  Both implement \" + md.getName() + \" but have different return types\", md.getSourceInfo()); */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0b1c37c9a9f523d10fd2c3c3d3093a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 413, "methodNumberAfterChange": 413, "signatureBeforeChange": "\r \r   public void forDefaultCase(DefaultCase that)", "signatureAfterChange": "    public void forDefaultCase(DefaultCase that)", "diff": ["-\r", "-  public void forDefaultCase(DefaultCase that) {\r", "-    forDefaultCaseDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCode().visit(this);\r", "-    forDefaultCaseOnly(that);\r", "-  }\r", "+", "+  public void forDefaultCase(DefaultCase that) {", "+    forDefaultCaseDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCode().visit(this);", "+    forDefaultCaseOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e67daf6e4bdaabc94d0411d46bf84ee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public TypeData forPackageStatement(PackageStatement that)", "signatureAfterChange": "   public TypeData forPackageStatement(PackageStatement that)", "diff": ["-    //final SymbolData cWord_result = that.getCWord().visit(this);", "+    //final SymbolData cWordRes = that.getCWord().visit(this);", "-    for (int i = 1; i < words.length; i++) {nameBuff.append('.' + words[i].getText());}", "+    for (int i = 1; i < words.length; i++) nameBuff.append('.' + words[i].getText());", "-      ", "-     ", "-    ", "-    //It is sufficient to just use \"get\" directly from the symbolTable, becuase on the first pass, we tried to", "-    //resolve all package names as classes, so if we were successful, they will already be in symbol table.", "-    //It is not necessary to check accessibility, because somewhere along the line, the package must have conflicted with a visible class--", "-    //all top level classes must be public or package protected.", "+", "+    /* It is sufficient to just use \"get\" directly from the symbolTable, becuase the first pass has resolved all ", "+     * package names as symbols (??), so if we were successful, they will already be in symbol table.  It is not ", "+     * necessary to check accessibility, because somewhere along the line, the package must have conflicted with", "+     * a visible class--all top level classes must be public or package protected. */", "-      _addError(name + \" is not a allowable package name, because it conflicts with a class you have already defined\", that);", "+      _addError(name + \" is not a allowable package name, because it conflicts with a class you have already defined\", ", "+                that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e7bc82986f67ec39d123d4e751f467e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["-    if (!isReady()) { return; }", "+    if (! isReady()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70fbf023b31e6a786d7e37241645a184", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPane.java", "commitBeforeChange": "c750f23eb2b9150b4fb75772deac7c17626a7d1c", "commitAfterChange": "74e4ff93e186e54c8f3a2ca5764d77cf5247e4cc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void addActionForKeyStroke(KeyStroke stroke, Action action)", "signatureAfterChange": "   public void addActionForKeyStroke(KeyStroke stroke, Action action)", "diff": ["-      for (int i = 0; i < keys.length; i++) {", "-        _keymap.removeKeyStrokeBinding(keys[i]);", "-      }", "+      for (int i = 0; i < keys.length; i++) _keymap.removeKeyStrokeBinding(keys[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7158e62549a1b97c8b0ca95899d64be6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/util/Log.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public synchronized void log(String message)", "signatureAfterChange": "   public synchronized void log(String message)", "diff": ["-  public synchronized void log(String message) {", "-    if (isEnabled()) {", "-      if (_writer == null) {", "-        _init();", "-      }", "+  public synchronized void log(String message) { ", "+    if (isEnabled()) {   ", "+      if (_writer == null) _init();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "719c4f7e1fc56a294e1c283060170209", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void _attemptSaveAllDocuments()", "signatureAfterChange": "   private void _attemptSaveAllDocuments()", "diff": ["-    if (_getter.hasModifiedDocuments()) {", "-      _notifier.saveBeforeJavadoc();", "-    }", "+    if (_getter.hasModifiedDocuments()) _notifier.saveBeforeJavadoc();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7264fa90cb3ae4c17a87c3c048d3ab59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "9c56cd9d9775329b3a5e6a7701ab0c05369850af", "commitAfterChange": "a7a439f9a53360ece86e113cdb8203e5c8b2acda", "methodNumberBeforeChange": 202, "methodNumberAfterChange": 207, "signatureBeforeChange": "     public void resetModification()", "signatureAfterChange": "     public void resetModification()", "diff": ["-      if (_file != null) {", "-        _timestamp = _file.lastModified();", "-      }", "+      if (_file != null) _timestamp = _file.lastModified();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "726c107a17d02a9383d69506eefa11ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 475, "methodNumberAfterChange": 475, "signatureBeforeChange": "\r \r   public void forComplexNameReference(ComplexNameReference that)", "signatureAfterChange": "    public void forComplexNameReference(ComplexNameReference that)", "diff": ["-\r", "-  public void forComplexNameReference(ComplexNameReference that) {\r", "-    forComplexNameReferenceDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getName().visit(this);\r", "-    forComplexNameReferenceOnly(that);\r", "-  }\r", "+", "+  public void forComplexNameReference(ComplexNameReference that) {", "+    forComplexNameReferenceDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getName().visit(this);", "+    forComplexNameReferenceOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7280a3cbf1ef2ffe8a9080d9540515bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "9c56cd9d9775329b3a5e6a7701ab0c05369850af", "commitAfterChange": "a7a439f9a53360ece86e113cdb8203e5c8b2acda", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 204, "signatureBeforeChange": "     public boolean saveFile(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFile(FileSaveSelector com) throws IOException", "diff": ["-      if (!isModifiedSinceSave() && !isUntitled()) {", "-        // Don't need to save.", "-        //  Return true, since the save wasn't \"canceled\"", "-        return true;", "-      }", "+      if (!isModifiedSinceSave() && !isUntitled()) return true;", "+        // Don't need to save; return true, since the save wasn't \"canceled\"", "-          else", "-            // User declines to save as a new file, so don't save", "-            return false;", "+          else return false;", "+            // User declines to save as a new file, so don't save "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b17643b3aad2b6f77820df90bbed2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-        //      System.out.println(\"Keystroke was null\");", "+//        System.out.println(\"Keystroke was null\");", "-          if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "-            endCompoundEdit();", "-          }", "+          if (e.getKeyCode() == KeyEvent.VK_ENTER) endCompoundEdit();", "-          ", "-             CompoundUndoManager undoMan = _doc.getUndoManager();", "-          //int key = undoMan.startCompoundEdit();", "-          //        System.out.println(\"supering 1 \" + isAltF4);", "+          CompoundUndoManager undoMan = _doc.getUndoManager();", "+//          int key = undoMan.startCompoundEdit();", "+//          System.out.println(\"supering 1 \" + isAltF4);", "-             super.processKeyEvent(e);", "-          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes (see the definition of _undoListener).", "+          super.processKeyEvent(e);", "+          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes ", "+          // (see the definition of _undoListener).", "-          //        e.consume();", "+//          e.consume();", "-", "-          ", "-          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down", "-          // and fixes bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when", "-          // the alt key is down.", "-          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit actually happened.", "-          if ((((e.getModifiers() & InputEvent.META_MASK) != 0)) // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) //fixed for frenchkeyboard support", "+          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down and fixes", "+          // bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when the alt key is down.", "+          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit ", "+          // actually happened.", "+          if ((e.getModifiers() & InputEvent.META_MASK) != 0 ", "+                // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) // omitted for frenchkeyboard support", "-            //            //          System.out.println(\"not supering 1 \" + isAltF4);", "+//            System.out.println(\"not supering 1 \" + isAltF4);", "-          ", "-                    ", "+                        ", "-          /* If the KeyEvent is not a pressed event, process it before we do", "-           * granular undo or _inCompoundEdit may get set incorrectly.", "-           * This code breaks Alt-F4, and may break other system keybindings", "-           * since the event is consumed by us.  For now, just check Alt-F4. */", "+          /* If the KeyEvent is not a pressed event, process it before we do granular undo or _inCompoundEdit may ", "+           * get set incorrectly. This code breaks Alt-F4, and may break other system keybindings since the event ", "+           * is consumed by us. */", "-          ", "-          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72f104461612303ba5aa1e33012e452e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 460, "methodNumberAfterChange": 460, "signatureBeforeChange": "\r \r   public void forDoubleLiteral(DoubleLiteral that)", "signatureAfterChange": "    public void forDoubleLiteral(DoubleLiteral that)", "diff": ["-\r", "-  public void forDoubleLiteral(DoubleLiteral that) {\r", "-    forDoubleLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forDoubleLiteralOnly(that);\r", "-  }\r", "+", "+  public void forDoubleLiteral(DoubleLiteral that) {", "+    forDoubleLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forDoubleLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72f3509b6515e8167cd9826279540da2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/platform/DefaultPlatform.java", "commitBeforeChange": "d1e77e5d0818e6bb43ce09eb1ecec03bb76646fd", "commitAfterChange": "936df97bedea66175f36cae49ba74b17abf11e8a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public boolean openURL(URL address)", "signatureAfterChange": "   public boolean openURL(URL address)", "diff": ["-      if (exe != FileOption.NULL_FILE) {", "-        args.add(0, exe.getAbsolutePath());", "-      }", "+      if (exe != FileOption.NULL_FILE) args.add(0, exe.getAbsolutePath());", "-", "-        // TODO: This may cause a memory leak on Windows, if we don't check the exit code."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73268013758087cfd4244cdf6bd909b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 391, "methodNumberAfterChange": 391, "signatureBeforeChange": "\r \r   public void forVoidReturnStatement(VoidReturnStatement that)", "signatureAfterChange": "    public void forVoidReturnStatement(VoidReturnStatement that)", "diff": ["-\r", "-  public void forVoidReturnStatement(VoidReturnStatement that) {\r", "-    forVoidReturnStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forVoidReturnStatementOnly(that);\r", "-  }\r", "+", "+  public void forVoidReturnStatement(VoidReturnStatement that) {", "+    forVoidReturnStatementDoFirst(that);", "+    if (prune(that)) return;", "+    forVoidReturnStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7370b49095ac75776d858a31438e655a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 451, "methodNumberAfterChange": 451, "signatureBeforeChange": "\r \r   public void forPositiveExpression(PositiveExpression that)", "signatureAfterChange": "    public void forPositiveExpression(PositiveExpression that)", "diff": ["-\r", "-  public void forPositiveExpression(PositiveExpression that) {\r", "-    forPositiveExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forPositiveExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPositiveExpression(PositiveExpression that) {", "+    forPositiveExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forPositiveExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73cad9dcbe4fda98540fd8adab24d1e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 679, "methodNumberAfterChange": 679, "signatureBeforeChange": "          private boolean _fileSaveHelper(OpenDefinitionsDocument doc, int paneOption)", "signatureAfterChange": "          private boolean _fileSaveHelper(OpenDefinitionsDocument doc, int paneOption)", "diff": ["-      if (lastActive != doc) {", "-        _model.setActiveDocument(doc);", "-      }", "+      if (lastActive != doc) _model.setActiveDocument(doc);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74553804f0826853d1bb09eeb79b0e2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 482, "methodNumberAfterChange": 482, "signatureBeforeChange": "\r \r   public void forSimpleThisConstructorInvocation(SimpleThisConstructorInvocation that)", "signatureAfterChange": "    public void forSimpleThisConstructorInvocation(SimpleThisConstructorInvocation that)", "diff": ["-\r", "-  public void forSimpleThisConstructorInvocation(SimpleThisConstructorInvocation that) {\r", "-    forSimpleThisConstructorInvocationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getArguments().visit(this);\r", "-    forSimpleThisConstructorInvocationOnly(that);\r", "-  }\r", "+", "+  public void forSimpleThisConstructorInvocation(SimpleThisConstructorInvocation that) {", "+    forSimpleThisConstructorInvocationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getArguments().visit(this);", "+    forSimpleThisConstructorInvocationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74a46f7074f9a2c01a67e3d6e43ced85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 419, "methodNumberAfterChange": 417, "signatureBeforeChange": "   private boolean _warnFileOpen(File f)", "signatureAfterChange": "   private boolean _warnFileOpen(File f)", "diff": ["-    try {", "-      d = _model.getDocumentForFile(f);", "-    }", "-    catch(IOException ioe) {", "-      // this means the file has been deleted. If they're saving over it, don't show an I/O Error", "-    }", "+    try { d = _model.getDocumentForFile(f); }", "+    catch(IOException ioe) { /* do nothing */ }", "-    if(choice == JOptionPane.YES_OPTION && d != null) {", "-      return _model.closeFileWithoutPrompt(d);", "-    }", "+    if (choice == JOptionPane.YES_OPTION && d != null)  return _model.closeFileWithoutPrompt(d);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7523ee7536367d98597ba2cbdc81b82a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 426, "methodNumberAfterChange": 426, "signatureBeforeChange": "\r \r   public void forBitwiseXorAssignmentExpression(BitwiseXorAssignmentExpression that)", "signatureAfterChange": "    public void forBitwiseXorAssignmentExpression(BitwiseXorAssignmentExpression that)", "diff": ["-\r", "-  public void forBitwiseXorAssignmentExpression(BitwiseXorAssignmentExpression that) {\r", "-    forBitwiseXorAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forBitwiseXorAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseXorAssignmentExpression(BitwiseXorAssignmentExpression that) {", "+    forBitwiseXorAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forBitwiseXorAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75e54b83fc05ec1e21d9242a2d4409a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/Gap.java", "commitBeforeChange": "75e37fee0d4b160f4d0f1fc58a049ca677edffbc", "commitAfterChange": "a1a11647d4dd38f0cbbb37dcb8ec06139897420a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public String toString()", "signatureAfterChange": "   public String toString()", "diff": ["-    for (i = 0; i < _size; i++) {", "-      val.append(\" _\");", "-    }", "+    for (i = 0; i < _size; i++) val.append(\" _\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "769cc47c2a21f734a492f0322185b0cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugAction.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public boolean createRequests() throws DebugException", "signatureAfterChange": "    public boolean createRequests() throws DebugException", "diff": ["-    else {", "-      return false;", "-    }", "+    else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76c027ccd4c9ffca38191079fa396be2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/InsideLineComment.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "signatureAfterChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "diff": ["-    if (copyCursor.atEnd()) {", "-      return STUTTER;", "-    }", "+    if (copyCursor.atEnd())  return STUTTER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7701f5b06777cba32593db5e5723b4cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "   protected VariableData[] _variableDeclaration2VariableData(VariableDeclaration vd, Data enclosing)", "signatureAfterChange": "   protected VariableData[] _variableDeclaration2VariableData(VariableDeclaration vd, Data enclosing)", "diff": ["-   */", "+    */", "-        VariableData vdata = new VariableData(name, mav, sd, initialized, enclosing); //want hasBeenAssigned to be true if this variable declaration is initialized, and false otherwise.", "+        // want hasBeenAssigned to be true if this variable declaration is initialized, and false otherwise.", "+        VariableData vdata = new VariableData(name, mav, sd, initialized, enclosing); ", "-      else {", "-        _addAndIgnoreError(\"Class or Interface \" + type.getName() + \" not found\", declarators[i].getType());", "-      }", "+      else _addAndIgnoreError(\"Class or Interface \" + type.getName() + \" not found\", declarators[i].getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78680eec136e33fa4137cb5c8262e431", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void insertQuote(String quote)", "signatureAfterChange": "   public void insertQuote(String quote)", "diff": ["-    else {", "-      _insertNewQuote(quote);", "-    }", "+    else _insertNewQuote(quote);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78785b4392ee416b43ec080cc47785b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void currThreadSuspended()", "signatureAfterChange": "   public void currThreadSuspended()", "diff": ["-   */", "+  /** Called when the current thread is suspended.  */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).currThreadSuspended();", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).currThreadSuspended();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a10944306b8492f819c062d6cbf35e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "cbdc405e8bd4373c383ad7cbc6a9a656b65ddd52", "commitAfterChange": "2c9a67ea7f4112fa7f99743281ac144c9f56d20a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testConstructDoclessErrors()", "signatureAfterChange": "   public void testConstructDoclessErrors()", "diff": ["-    errors = new CompilerError[]", "-    { new CompilerError(\"Test error without File\",false),", "+    errors = new CompilerError[] { ", "+      new CompilerError(\"Test error without File\",false),", "-      new CompilerError(\"Test error without File\",false) };", "+      new CompilerError(\"Test error without File\",false) ", "+    };", "-    for (int i = 0; i < errors.length; i++) {", "-      copy[i] = errors[i];", "-    }", "+    for (int i = 0; i < errors.length; i++) copy[i] = errors[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "795e3a0bcfb2cf4527b4fb06ffe4da3d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 491, "methodNumberAfterChange": 491, "signatureBeforeChange": "\r \r   public void forUnbracedBody(UnbracedBody that)", "signatureAfterChange": "    public void forUnbracedBody(UnbracedBody that)", "diff": ["-\r", "-  public void forUnbracedBody(UnbracedBody that) {\r", "-    forUnbracedBodyDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getStatements().length; i++) that.getStatements()[i].visit(this);\r", "-    forUnbracedBodyOnly(that);\r", "-  }\r", "+", "+  public void forUnbracedBody(UnbracedBody that) {", "+    forUnbracedBodyDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getStatements().length; i++) that.getStatements()[i].visit(this);", "+    forUnbracedBodyOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "799d66421a47dd82f658744155b71fa4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/ColoringView.java", "commitBeforeChange": "ac188710e667e0471c9bf96ef1dfafd4a8e52eff", "commitAfterChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void updateColors()", "signatureAfterChange": "   public void updateColors()", "diff": ["-   */", "+  /** Called when an OptionListener perceives a change in any of the colors */", "-    //Avoid the ColoringView that does not have a container.", "-    if ( getContainer() != null) {", "-      getContainer().repaint();", "-    }", "-", "+    // Avoid the ColoringView that does not have a container.", "+    if ( getContainer() != null) getContainer().repaint();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79a8ae022e952a5ff5da89f9e0b31404", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 452, "methodNumberAfterChange": 452, "signatureBeforeChange": "\r \r   public void forNegativeExpression(NegativeExpression that)", "signatureAfterChange": "    public void forNegativeExpression(NegativeExpression that)", "diff": ["-\r", "-  public void forNegativeExpression(NegativeExpression that) {\r", "-    forNegativeExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forNegativeExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNegativeExpression(NegativeExpression that) {", "+    forNegativeExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forNegativeExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a166314dd2f074040293e78b9124da6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 478, "methodNumberAfterChange": 478, "signatureBeforeChange": "\r \r   public void forSimpleSuperReference(SimpleSuperReference that)", "signatureAfterChange": "    public void forSimpleSuperReference(SimpleSuperReference that)", "diff": ["-\r", "-  public void forSimpleSuperReference(SimpleSuperReference that) {\r", "-    forSimpleSuperReferenceDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forSimpleSuperReferenceOnly(that);\r", "-  }\r", "+", "+  public void forSimpleSuperReference(SimpleSuperReference that) {", "+    forSimpleSuperReferenceDoFirst(that);", "+    if (prune(that)) return;", "+    forSimpleSuperReferenceOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a4ff2b871d285362f535a0b3fa7b89f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AboutDialog.java", "commitBeforeChange": "7933cc364884763a44a085994870596faa04b316", "commitAfterChange": "b978cac1d85997e83464382e4a499c19d736223c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void addLogo(JPanel logo, String url)", "signatureAfterChange": "     private void addLogo(JPanel logo, String url)", "diff": ["-        if (url != null) {", "-          logo.putClientProperty(\"url\", url);", "-        }", "+        if (url != null) logo.putClientProperty(\"url\", url);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a67560b8cb62c76a4c3ff070e5c8c93", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   static synchronized void initConfig() throws IllegalStateException", "signatureAfterChange": "   static synchronized void initConfig() throws IllegalStateException", "diff": ["-    if (_config != null) {", "-      throw new IllegalStateException(\"Can only call initConfig once!\");", "-    }", "+    if (_config != null) throw new IllegalStateException(\"Can only call initConfig once!\");", "-    try {", "-      _config.loadConfiguration();", "-    }", "+    try { _config.loadConfiguration(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a82584bbd5793278a5d8d3048f33626", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FileSelectorComponent.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "    public void resetFileField()", "signatureAfterChange": "    public void resetFileField()", "diff": ["-    if (_file == null) {", "-      _fileField.setText(\"\");", "-    }", "+    if (_file == null) _fileField.setText(\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ae465591fb1601c49efd8c7f07aef5f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public int previousBrace()", "signatureAfterChange": "   public int previousBrace()", "diff": ["-   */", "+    */", "-    resetWalkerLocationToCursor();//reset the interface to the comment model", "+    resetWalkerLocationToCursor(); //reset the interface to the comment model", "-    if (!copyCursor.atStart()) {", "-      copyCursor.prev();", "-    }", "+    if (!copyCursor.atStart()) copyCursor.prev();", "+    ", "+    ", "-    // if we're in the middle of the first brace element, we're", "-    // not going to find any previous braces", "+    // if we're in the middle of the first brace element, we're not going to find any previous braces"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bb3b5d707d65ee61cdc13d06aa66619", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "   public static MethodData repeatedSignature(LinkedList<MethodData> listOfMethods, MethodData method, boolean fromClassFile)", "signatureAfterChange": "   public static MethodData repeatedSignature(LinkedList<MethodData> listOfMethods, MethodData method, boolean fromClassFile)", "diff": ["-      if (currMd.getName().equals(method.getName()) && (!fromClassFile || currMd.getReturnType() == method.getReturnType())) {", "+      if (currMd.getName().equals(method.getName()) && ", "+          (! fromClassFile || currMd.getReturnType() == method.getReturnType())) {", "-          if (match) {", "-            return currMd;", "-          }", "+          if (match) return currMd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cbad1da4210103f198ee9b224fcf44e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   protected SymbolData defineInnerSymbolData(TypeDefBase typeDefBase, String qualifiedTypeName, Data enclosing)", "signatureAfterChange": "   protected SymbolData defineInnerSymbolData(TypeDefBase typeDefBase, String qualifiedTypeName, Data enclosing)", "diff": ["-    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "-                                     \"  Please report this bug.\");}", "+    else throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "+                                     \"  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d0e21d369375f423d899578b5f64551", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 466, "methodNumberAfterChange": 466, "signatureBeforeChange": "\r \r   public void forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that)", "signatureAfterChange": "    public void forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that)", "diff": ["-\r", "-  public void forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that) {\r", "-    forSimpleNamedClassInstantiationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    forSimpleNamedClassInstantiationOnly(that);\r", "-  }\r", "+", "+  public void forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that) {", "+    forSimpleNamedClassInstantiationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    that.getArguments().visit(this);", "+    forSimpleNamedClassInstantiationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d2dfc1e073aa7c634eb1b1eed4e68ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void findNext()", "signatureAfterChange": "   public void findNext()", "diff": ["-   */", "-  public void findNext() {", "-    if (_findField.getText().length() > 0) {", "-      _doFind();", "-    }", "-  }", "+  /** Called when the user presses the key assigned to find next. */", "+  public void findNext() { if (_findField.getText().length() > 0) _doFind(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d86598e454f3d3c3fbaa0a8c2bda756", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 429, "methodNumberAfterChange": 429, "signatureBeforeChange": "\r \r   public void forBitwiseOrExpression(BitwiseOrExpression that)", "signatureAfterChange": "    public void forBitwiseOrExpression(BitwiseOrExpression that)", "diff": ["-\r", "-  public void forBitwiseOrExpression(BitwiseOrExpression that) {\r", "-    forBitwiseOrExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forBitwiseOrExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseOrExpression(BitwiseOrExpression that) {", "+    forBitwiseOrExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forBitwiseOrExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dd2ec0422752ff20e9b43678d9cfb75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "9c56cd9d9775329b3a5e6a7701ab0c05369850af", "commitAfterChange": "a7a439f9a53360ece86e113cdb8203e5c8b2acda", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 221, "signatureBeforeChange": "     private File _locateClassFile()", "signatureAfterChange": "     private File _locateClassFile()", "diff": ["-//        sourceRoots = getSourceRootSet();", "+        ", "+        ", "+        if(getBuildDirectory() != null) roots.add(getBuildDirectory());", "+        ", "-        ", "-        ", "-        if(getBuildDirectory() != null){", "-          roots.add(getBuildDirectory());", "-        }", "-        ", "-        ", "-        try {", "-          roots.add(getSourceRoot());", "-        }", "+        try { roots.add(getSourceRoot()); }", "-          catch (IllegalStateException ise) {", "-            // No file, don't add to source root set", "-          }", "+          catch (IllegalStateException ise) { /* No file; do nothing */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ebead4db3f7309acc3ddf8cec36208d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void addListener(GlobalModelListener listener)", "signatureAfterChange": "   public void addListener(GlobalModelListener listener)", "diff": ["-    if (! (listener instanceof SingleDisplayModelListener)) {", "+    if (! (listener instanceof SingleDisplayModelListener))", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ece0d1eddc5996ef3cc716e46f3b826", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "         private void addTopLevelGroupToRoot(InnerNode parent)", "signatureAfterChange": "      private void addTopLevelGroupToRoot(InnerNode parent)", "diff": ["-  ", "-      if(_roots.indexOf(n) > indexInRoots){", "-        break;", "-      }", "+      if(_roots.indexOf(n) > indexInRoots) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ed92cf627175547c10531e126c6e8f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public OpenDefinitionsDocument openFile(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public OpenDefinitionsDocument openFile(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-    if (closeUntitled) {", "-      super.closeFile(oldDoc);", "-    }", "+    if (closeUntitled) super.closeFile(oldDoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3190fa760acce972e56effa980dcd0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 397, "methodNumberAfterChange": 397, "signatureBeforeChange": "\r \r   public void forEmptyStatement(EmptyStatement that)", "signatureAfterChange": "    public void forEmptyStatement(EmptyStatement that)", "diff": ["-\r", "-  public void forEmptyStatement(EmptyStatement that) {\r", "-    forEmptyStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forEmptyStatementOnly(that);\r", "-  }\r", "+", "+  public void forEmptyStatement(EmptyStatement that) {", "+    forEmptyStatementDoFirst(that);", "+    if (prune(that)) return;", "+    forEmptyStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f8525b370585e0b69520789c76bc52c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 404, "methodNumberAfterChange": 404, "signatureBeforeChange": "\r \r   public void forTypeParameter(TypeParameter that)", "signatureAfterChange": "    public void forTypeParameter(TypeParameter that)", "diff": ["-\r", "-  public void forTypeParameter(TypeParameter that) {\r", "-    forTypeParameterDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getVariable().visit(this);\r", "-    that.getBound().visit(this);\r", "-    forTypeParameterOnly(that);\r", "-  }\r", "+", "+  public void forTypeParameter(TypeParameter that) {", "+    forTypeParameterDoFirst(that);", "+    if (prune(that)) return;", "+    that.getVariable().visit(this);", "+    that.getBound().visit(this);", "+    forTypeParameterOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fd4e150f934cb63777a5338e75f5ddc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 366, "methodNumberAfterChange": 363, "signatureBeforeChange": "     public void activeDocumentChanged(final OpenDefinitionsDocument active)", "signatureAfterChange": "     public void activeDocumentChanged(final OpenDefinitionsDocument active)", "diff": ["-      //Runnable doCommand = new Runnable() {", "-      // public void run() {", "+      ", "-          //  }", "-          //};", "-          //SwingUtilities.invokeLater(doCommand);", "-        try {", "-          SwingUtilities.invokeAndWait(command);", "-        }", "+        try { SwingUtilities.invokeAndWait(command); }", "-      else {", "-        command.run();", "-      }", "+      else command.run();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82124216ba37e553da10ee25d6880345", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece)", "signatureAfterChange": "   public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece)", "diff": ["-   */", "+  /** Return the field or variable with the name text inside of data.  (Referenced from thisSD) */", "-    if (data == null) {", "-      return null;", "-    }", "+    if (data == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82f91163b4b1fe731ebfad0179c3cd9b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void run()", "signatureAfterChange": "   public void run()", "diff": ["-   */", "+   *  disconnected.*/", "-          while (it.hasNext()) {", "-            handleEvent(it.nextEvent());", "-          }", "+          ", "+          while (it.hasNext()) handleEvent(it.nextEvent());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "836cf6c1818e0a9c15958da2edca8d58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionConstants.java", "commitBeforeChange": "8cfaf2efb8ae59b79b9538e0bd5eaf251c6db08b", "commitAfterChange": "b732820bc2f8849bda78001b782e555a753cad1e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static String getDefaultLookAndFeel()", "signatureAfterChange": "     public static String getDefaultLookAndFeel()", "diff": ["-      else {", "-        return UIManager.getCrossPlatformLookAndFeelClassName();", "-      }", "+      else return UIManager.getCrossPlatformLookAndFeelClassName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8374970f8081e8fd1ba94284e41ba415", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "65fb8db1fb3e7570ae4fa352a26deb0e151b48ac", "commitAfterChange": "d933be24919e2ab110f61a795910708e74f868c4", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "   public boolean hasInterface(SymbolData i)", "signatureAfterChange": "   public boolean hasInterface(SymbolData i)", "diff": ["-    if (i==null) return false;", "+    if (i == null) return false;", "-    for (int j = 0; j<getInterfaces().size(); j++) {", "-      if (getInterfaces().get(j).hasInterface(i)) {return true;}", "+    for (int j = 0; j < getInterfaces().size(); j++) {", "+      if (getInterfaces().get(j).hasInterface(i)) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83dc29eb13e68e1cc9a8545ec7329208", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 493, "methodNumberAfterChange": 493, "signatureBeforeChange": "\r \r   public void forUnparenthesizedExpressionList(UnparenthesizedExpressionList that)", "signatureAfterChange": "    public void forUnparenthesizedExpressionList(UnparenthesizedExpressionList that)", "diff": ["-\r", "-  public void forUnparenthesizedExpressionList(UnparenthesizedExpressionList that) {\r", "-    forUnparenthesizedExpressionListDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);\r", "-    forUnparenthesizedExpressionListOnly(that);\r", "-  }\r", "+", "+  public void forUnparenthesizedExpressionList(UnparenthesizedExpressionList that) {", "+    forUnparenthesizedExpressionListDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);", "+    forUnparenthesizedExpressionListOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8401f2f5f61bcafa739ec18d3dcb303f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/HTMLFrame.java", "commitBeforeChange": "8cfaf2efb8ae59b79b9538e0bd5eaf251c6db08b", "commitAfterChange": "b732820bc2f8849bda78001b782e555a753cad1e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void _displayMainError(URL url, Exception ex)", "signatureAfterChange": "   private void _displayMainError(URL url, Exception ex)", "diff": ["-    else {", "-      _resetMainPane();", "-    }", "+    else _resetMainPane();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "841ba98fc887f3dfdc6d2eab31a16645", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 371, "methodNumberAfterChange": 371, "signatureBeforeChange": "\r \r   public void forInnerInterfaceDef(InnerInterfaceDef that)", "signatureAfterChange": "    public void forInnerInterfaceDef(InnerInterfaceDef that)", "diff": ["-\r", "-  public void forInnerInterfaceDef(InnerInterfaceDef that) {\r", "-    forInnerInterfaceDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);\r", "-    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);\r", "-    that.getBody().visit(this);\r", "-    forInnerInterfaceDefOnly(that);\r", "-  }\r", "+", "+  public void forInnerInterfaceDef(InnerInterfaceDef that) {", "+    forInnerInterfaceDefDoFirst(that);", "+    if (prune(that)) return;", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);", "+    that.getBody().visit(this);", "+    forInnerInterfaceDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "846e38612fd58b08e9c612995bd4c1a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void next()", "signatureAfterChange": "   public void next()", "diff": ["-   */", "-  public void next(){", "-    if(_docs.size() > 0){", "+  /** Sets the current document to be the next document in the list. */", "+  public void next() {", "+    if (_docs.size() > 0) {", "-      if(_current >= _docs.size()){", "-        _current = 0;", "-      }", "+      if (_current >= _docs.size()) _current = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8558a6457f62393c638eb1ab1c5eee47", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 396, "methodNumberAfterChange": 396, "signatureBeforeChange": "\r \r   public void forNormalTryCatchStatement(NormalTryCatchStatement that)", "signatureAfterChange": "    public void forNormalTryCatchStatement(NormalTryCatchStatement that)", "diff": ["-\r", "-  public void forNormalTryCatchStatement(NormalTryCatchStatement that) {\r", "-    forNormalTryCatchStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getTryBlock().visit(this);\r", "-    for (int i = 0; i < that.getCatchBlocks().length; i++) that.getCatchBlocks()[i].visit(this);\r", "-    forNormalTryCatchStatementOnly(that);\r", "-  }\r", "+", "+  public void forNormalTryCatchStatement(NormalTryCatchStatement that) {", "+    forNormalTryCatchStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getTryBlock().visit(this);", "+    for (int i = 0; i < that.getCatchBlocks().length; i++) that.getCatchBlocks()[i].visit(this);", "+    forNormalTryCatchStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "859d4e9b9ba1918704fa5de60d7a2968", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public void treeCollapsed(TreeExpansionEvent event)", "signatureAfterChange": "   public synchronized void treeCollapsed(TreeExpansionEvent event)", "diff": ["-   */", "-  public void treeCollapsed(TreeExpansionEvent event) {", "+  /**  Called whenever an item in the tree has been collapsed. */", "+  public synchronized void treeCollapsed(TreeExpansionEvent event) {", "-    if (o instanceof InnerNode) {", "-      ((InnerNode)o).setCollapsed(true);", "-    }", "+    if (o instanceof InnerNode) ((InnerNode)o).setCollapsed(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85f78a3107ce2922e097f7f3f7cea2fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "cbdc405e8bd4373c383ad7cbc6a9a656b65ddd52", "commitAfterChange": "2c9a67ea7f4112fa7f99743281ac144c9f56d20a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testConstructManyDocsWithLineNums()", "signatureAfterChange": "   public void testConstructManyDocsWithLineNums()", "diff": ["-   */", "+  /** Tests CompilerErrorModel setup code with several files and only errors with line numbers. */", "-    errors = new CompilerError[]", "-    { new CompilerError(files[0], 2, 0, \"Test error with File\", false),", "+    errors = new CompilerError[] { ", "+      new CompilerError(files[0], 2, 0, \"Test error with File\", false),", "-      new CompilerError(files[0], 1, 0, \"Test error with File\", false) };", "+      new CompilerError(files[0], 1, 0, \"Test error with File\", false) ", "+    };", "-    for (int i = 0; i < errors.length; i++) {", "-      copy[i] = errors[i];", "-    }", "+    for (int i = 0; i < errors.length; i++) copy[i] = errors[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86256b50a23e15a84286eac2702f1134", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/OptionComponent.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void resetToCurrent()", "signatureAfterChange": "   public void resetToCurrent()", "diff": ["-    if (_option != null) {", "-      setValue(DrJava.getConfig().getSetting(_option));", "-    }", "+    if (_option != null) setValue(DrJava.getConfig().getSetting(_option));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "865280400a71355b6fe1c36ca78444de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   private void _uncommentLine()", "signatureAfterChange": "   private void _uncommentLine()", "diff": ["-        if (!((c == ' ') || (c == ' ') || (c == ' '))) {", "-          goodWing = false;", "-        }", "+        if (!((c == ' ') || (c == ' ') || (c == ' '))) goodWing = false;", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "+    } catch (BadLocationException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86fbab49b1115e1cce760098c8c0c98e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 328, "methodNumberAfterChange": 328, "signatureBeforeChange": "   private void _updateDebugStatus()", "signatureAfterChange": "   private void _updateDebugStatus()", "diff": ["-    // if the document is untitled, don't show that it is out of sync since it", "-    // can't be debugged anyway", "-    if (_model.getActiveDocument().isUntitled() ||", "-        _model.getActiveDocument().getClassFileInSync())", "-    {", "+    // if the document is untitled, don't show that it is out of sync since it can't be debugged anyway", "+    if (_model.getActiveDocument().isUntitled() || _model.getActiveDocument().getClassFileInSync()) {", "-      if (_debugPanel.getStatusText().equals(DEBUGGER_OUT_OF_SYNC)) {", "-        _debugPanel.setStatusText(\"\");", "-      }", "-    }", "+      if (_debugPanel.getStatusText().equals(DEBUGGER_OUT_OF_SYNC)) _debugPanel.setStatusText(\"\");", "+    } ", "-      if(_debugPanel.getStatusText().equals(\"\"))", "-        _debugPanel.setStatusText(DEBUGGER_OUT_OF_SYNC);", "+      if(_debugPanel.getStatusText().equals(\"\")) _debugPanel.setStatusText(DEBUGGER_OUT_OF_SYNC);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "877c66cd405a179a33806d19eef21a1d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 473, "methodNumberAfterChange": 473, "signatureBeforeChange": "\r \r   public void forComplexInitializedArrayInstantiation(ComplexInitializedArrayInstantiation that)", "signatureAfterChange": "    public void forComplexInitializedArrayInstantiation(ComplexInitializedArrayInstantiation that)", "diff": ["-\r", "-  public void forComplexInitializedArrayInstantiation(ComplexInitializedArrayInstantiation that) {\r", "-    forComplexInitializedArrayInstantiationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getType().visit(this);\r", "-    that.getInitializer().visit(this);\r", "-    forComplexInitializedArrayInstantiationOnly(that);\r", "-  }\r", "+", "+  public void forComplexInitializedArrayInstantiation(ComplexInitializedArrayInstantiation that) {", "+    forComplexInitializedArrayInstantiationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getType().visit(this);", "+    that.getInitializer().visit(this);", "+    forComplexInitializedArrayInstantiationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cba1b71cb50aa5847f69186200bdf1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineEmptyOrEnterPress.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-    if (reason == Indenter.ENTER_KEY_PRESS) {", "-      return true;", "-    }", "+    if (reason == Indenter.ENTER_KEY_PRESS) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8830fb21161fcb87a8761171cdb877a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 484, "methodNumberAfterChange": 484, "signatureBeforeChange": "\r \r   public void forSimpleSuperConstructorInvocation(SimpleSuperConstructorInvocation that)", "signatureAfterChange": "    public void forSimpleSuperConstructorInvocation(SimpleSuperConstructorInvocation that)", "diff": ["-\r", "-  public void forSimpleSuperConstructorInvocation(SimpleSuperConstructorInvocation that) {\r", "-    forSimpleSuperConstructorInvocationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getArguments().visit(this);\r", "-    forSimpleSuperConstructorInvocationOnly(that);\r", "-  }\r", "+", "+  public void forSimpleSuperConstructorInvocation(SimpleSuperConstructorInvocation that) {", "+    forSimpleSuperConstructorInvocationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getArguments().visit(this);", "+    forSimpleSuperConstructorInvocationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b014c2b46f31e921bea5b5d41bfbd4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   public void forMemberType(MemberType that)", "signatureAfterChange": "   public void forMemberType(MemberType that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "897c1ad1322d32a20fc64aaedad169fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String parseStringNode(SExp n)", "signatureAfterChange": "     private String parseStringNode(SExp n)", "diff": ["-     */", "+    /** Takes input of form \"(str str)\" and returns the second string. */", "-      }else{", "-        throw new PrivateProjectException(\"List expected, but found text instead\");", "-      ", "+      else throw new PrivateProjectException(\"List expected, but found text instead\");  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8376db70832f19a334dc831e9e0f9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 389, "methodNumberAfterChange": 389, "signatureBeforeChange": "\r \r   public void forLabeledContinueStatement(LabeledContinueStatement that)", "signatureAfterChange": "    public void forLabeledContinueStatement(LabeledContinueStatement that)", "diff": ["-\r", "-  public void forLabeledContinueStatement(LabeledContinueStatement that) {\r", "-    forLabeledContinueStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLabel().visit(this);\r", "-    forLabeledContinueStatementOnly(that);\r", "-  }\r", "+", "+  public void forLabeledContinueStatement(LabeledContinueStatement that) {", "+    forLabeledContinueStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLabel().visit(this);", "+    forLabeledContinueStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a9edf950ae495bf6d174ceb507bc56a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "dc012dd7d972609a38d1836c72ebe86b07df0e53", "commitAfterChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["-      if (! matchDoc.equals(openDoc)) {", "-        _model.setActiveDocument(matchDoc);  // set active doc if matchDoc != openDoc", "-      }", "+", "+      if (! matchDoc.equals(openDoc)) ", "+          _model.setActiveDocument(matchDoc);  // set active doc if matchDoc != openDoc", "+      ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c4a2b94d3d5b647c739b3c97d2570ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 384, "methodNumberAfterChange": 384, "signatureBeforeChange": "\r \r   public void forWhileStatement(WhileStatement that)", "signatureAfterChange": "    public void forWhileStatement(WhileStatement that)", "diff": ["-\r", "-  public void forWhileStatement(WhileStatement that) {\r", "-    forWhileStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCondition().visit(this);\r", "-    that.getCode().visit(this);\r", "-    forWhileStatementOnly(that);\r", "-  }\r", "+", "+  public void forWhileStatement(WhileStatement that) {", "+    forWhileStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCondition().visit(this);", "+    that.getCode().visit(this);", "+    forWhileStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d293fa2dd4faaff0c579b0bd5c6287a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 453, "signatureBeforeChange": "      private boolean showCleanWarning()", "signatureAfterChange": "      private boolean showCleanWarning()", "diff": ["-      try {", "-        buildDirTxt = _model.getBuildDirectory().getCanonicalPath();", "-      }", "-      catch (Exception e) {", "-        buildDirTxt = _model.getBuildDirectory().getPath();", "-      }", "+      try { buildDirTxt = _model.getBuildDirectory().getCanonicalPath(); }", "+      catch (Exception e) { buildDirTxt = _model.getBuildDirectory().getPath(); }", "-          if (dialog.getCheckBoxValue()) {", "-            DrJava.getConfig().setSetting(PROMPT_BEFORE_CLEAN, Boolean.FALSE);", "-          }", "+          if (dialog.getCheckBoxValue()) DrJava.getConfig().setSetting(PROMPT_BEFORE_CLEAN, Boolean.FALSE);", "-        case JOptionPane.NO_OPTION:", "-          return false;", "-        case JOptionPane.CANCEL_OPTION:", "-          return false;", "-        case JOptionPane.CLOSED_OPTION:", "-          return false;", "-        default:", "-          throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+        case JOptionPane.NO_OPTION:      return false;", "+        case JOptionPane.CANCEL_OPTION:  return false;", "+        case JOptionPane.CLOSED_OPTION:  return false;", "+        default:  throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d48853beddfce4f650d6de0a5dbbcbd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 449, "methodNumberAfterChange": 449, "signatureBeforeChange": "\r \r   public void forPositivePostfixIncrementExpression(PositivePostfixIncrementExpression that)", "signatureAfterChange": "    public void forPositivePostfixIncrementExpression(PositivePostfixIncrementExpression that)", "diff": ["-\r", "-  public void forPositivePostfixIncrementExpression(PositivePostfixIncrementExpression that) {\r", "-    forPositivePostfixIncrementExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forPositivePostfixIncrementExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPositivePostfixIncrementExpression(PositivePostfixIncrementExpression that) {", "+    forPositivePostfixIncrementExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forPositivePostfixIncrementExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d6a1b0ba2ab9de025d0ba9f89ca719d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 268, "methodNumberAfterChange": 271, "signatureBeforeChange": "      public void resetUndoManager()", "signatureAfterChange": "          public void resetUndoManager()", "diff": ["-", "+    ", "-      if(_cacheAdapter.isReady()){", "-        getDocument().resetUndoManager();", "-      }", "+      if (_cacheAdapter.isReady()) getDocument().resetUndoManager();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8db3f4464a80120d166e473a831d5d20", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/SwingWorker.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void interrupt()", "signatureAfterChange": "   public void interrupt()", "diff": ["-    if (t != null) {", "-      t.interrupt();", "-    }", "+    if (t != null) t.interrupt();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e1fc8787801acf7363c69158860ae18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public OpenDefinitionsDocument openFiles(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public OpenDefinitionsDocument openFiles(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-    if (closeUntitled) {", "-      super.closeFile(oldDoc);", "-    }", "+    if (closeUntitled) super.closeFile(oldDoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee15930b82fd7f4566f4bd398bb1526", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public int getDistToPreviousNewline(int relLoc)", "signatureAfterChange": "   public int getDistToPreviousNewline(int relLoc)", "diff": ["-  */", "+  /** Returns distance to previous newline where relLoc is the distance back from the cursor to start searching. */", "-    if (dist == -1) {", "-      return -1;", "-    }", "+    if (dist == -1) return -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eed834f8442c2f31363f26eec5cf79d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 405, "methodNumberAfterChange": 405, "signatureBeforeChange": "\r \r   public void forArrayInitializer(ArrayInitializer that)", "signatureAfterChange": "    public void forArrayInitializer(ArrayInitializer that)", "diff": ["-\r", "-  public void forArrayInitializer(ArrayInitializer that) {\r", "-    forArrayInitializerDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getItems().length; i++) that.getItems()[i].visit(this);\r", "-    forArrayInitializerOnly(that);\r", "-  }\r", "+", "+  public void forArrayInitializer(ArrayInitializer that) {", "+    forArrayInitializerDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getItems().length; i++) that.getItems()[i].visit(this);", "+    forArrayInitializerOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f1f11ba55b234754ee8b3a4468968d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 168, "methodNumberAfterChange": 168, "signatureBeforeChange": "   public boolean closeFileWithoutPrompt(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean closeFileWithoutPrompt(final OpenDefinitionsDocument doc)", "diff": ["-    for (RegionManager<DocumentRegion> rm: doc.getFindResultsManagers()) {", "-      rm.clearRegions();", "-    }", "+    for (RegionManager<DocumentRegion> rm: doc.getFindResultsManagers())  rm.clearRegions();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f3217b3534b7ca33ea908f3ec582fb4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsEventNotifier.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void interpreterChanged(boolean inProgress)", "signatureAfterChange": "   public void interpreterChanged(boolean inProgress)", "diff": ["-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).interpreterChanged(inProgress);", "-      }", "+      for (int i = 0; i < size; i++)  _listeners.get(i).interpreterChanged(inProgress);", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fbbae1e362388559c6bb13524b2e705", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 312, "methodNumberAfterChange": 315, "signatureBeforeChange": "       public List<OpenDefinitionsDocument> getNonProjectDocuments()", "signatureAfterChange": "      public List<OpenDefinitionsDocument> getNonProjectDocuments()", "diff": ["-    for(OpenDefinitionsDocument tempDoc : allDocs){", "-      if(!tempDoc.isInProjectPath()){", "-        projectDocs.add(tempDoc);", "-      }", "+    for(OpenDefinitionsDocument tempDoc : allDocs) {", "+      if (!tempDoc.isInProjectPath()) projectDocs.add(tempDoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f51cde68e5d5ef5a1fa683b9f4ace8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public int getDebugPort() throws IOException", "signatureAfterChange": "   public int getDebugPort() throws IOException", "diff": ["-    if (!_debugPortSet) {", "-      _createNewDebugPort();", "-    }", "+    if (!_debugPortSet) _createNewDebugPort();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92c7a99855f1d1c0ff2c3d79650c13c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOption.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Vector<T> parse(String s)", "signatureAfterChange": "   public Vector<T> parse(String s)", "diff": ["-    if (startFooter < startFirstElement ||", "-        !s.startsWith(header) ||", "-        !s.endsWith(footer)) {", "-      throw new OptionParseException(name, s,", "-                                     \"Value must start with \"+header+\" and end \"+", "-                                     \"with \"+footer+\" to be a valid vector.\");", "+    if (startFooter < startFirstElement || !s.startsWith(header) || ! s.endsWith(footer)) {", "+      throw new OptionParseException(name, s, \"Value must start with \" + header + \" and end \" + \"with \" + footer + ", "+                                     \" to be a valid vector.\");", "-        throw new OptionParseException(name, s,", "-                                       \"Argument contains delimiter with no preceding list element.\");", "+        throw new OptionParseException(name, s, \"Argument contains delimiter with no preceding list element.\");", "-    if (sawDelim) {", "-      throw new OptionParseException(name, s,", "-                                     \"Value shouldn't end with a delimiter.\");", "-    }", "+    if (sawDelim) throw new OptionParseException(name, s, \"Value shouldn't end with a delimiter.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92cfe1e14d60f603a0020c036dd63fdc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void stepRequested()", "signatureAfterChange": "   public void stepRequested()", "diff": ["-   */", "+  /** Called when a step is requested on the current thread. Must be executed in event thread. */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).stepRequested();", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).stepRequested();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9330b26444a336c8c410379035f827dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionConstants.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static String getDefaultLookAndFeel()", "signatureAfterChange": "     public static String getDefaultLookAndFeel()", "diff": ["-      if (PlatformFactory.ONLY.isMacPlatform()) {", "-        return UIManager.getSystemLookAndFeelClassName();", "-      }", "+      if (PlatformFactory.ONLY.isMacPlatform()) return UIManager.getSystemLookAndFeelClassName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93f85e422b708a7af2b4c551b3bcfd18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void forConstructorDef(ConstructorDef that)", "signatureAfterChange": "   public void forConstructorDef(ConstructorDef that)", "diff": ["-   */", "+    */", "-      if (!hasVisibilityModifier) {", "-        _writeToFileOut(\"public \");", "-      }", "-      ", "+      if (! hasVisibilityModifier) _writeToFileOut(\"public \");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9473f26c1a352583e8d61e8ba6a1df26", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void nonCurrThreadDied()", "signatureAfterChange": "   public void nonCurrThreadDied()", "diff": ["-   */", "+  /** Called when any thread other than the current thread dies. Must be executed in event thread. */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).nonCurrThreadDied();", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).nonCurrThreadDied();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95b3218d3fe04814886392a3378ade3b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/util/Utilities.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public static String getStackTrace()", "signatureAfterChange": "   public static String getStackTrace()", "diff": ["-  public static String getStackTrace() {", "-    try { throw new Exception(); } // Thread.getStackTrace() might be more efficient, but is new in Java 5.0", "-    catch (Exception e) {", "+  public static String getStackTrace() { ", "+    // TODO: Thread.getStackTrace() which is new to Java 5.0 might be more efficient", "+    try { throw new Exception(); } ", "+    catch (Exception e) {   ", "-      for(StackTraceElement ste: stes) {", "-        if (skip>0) { --skip; } else { pw.print(\"at \"); pw.println(ste); }", "+      for(StackTraceElement ste: stes) { ", "+        if (skip > 0) --skip; ", "+        else { pw.print(\"at \"); pw.println(ste); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95bda755d43b429e8547ceab31f6835f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   protected boolean _isAssignableFrom(SymbolData sdLeft, SymbolData sdRight)", "signatureAfterChange": "   protected boolean _isAssignableFrom(SymbolData sdLeft, SymbolData sdRight)", "diff": ["-   */", "+    */", "-    if (sdRight == null) {return false;}", "+    if (sdRight == null) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "979eb712b9e536752224ae399dac3933", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 72, "signatureBeforeChange": "   private void _switchToSuspendedThread(boolean updateWatches) throws DebugException", "signatureAfterChange": "   private void _switchToSuspendedThread(boolean updateWatches) throws DebugException", "diff": ["-      if (currThread.frameCount() > 0) {", "-        scrollToSource(currThread.frame(0).location());", "-      }", "+      if (currThread.frameCount() > 0) scrollToSource(currThread.frame(0).location());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97affcd2ea270564df71d65ae67df475", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": "    private void _saveAll()", "signatureAfterChange": "    private void _saveAll()", "diff": ["-      if(_model.isProjectActive()){", "-        _saveProject();", "-      }", "+      if (_model.isProjectActive()) _saveProject();", "-    catch (IOException ioe) {", "-      _showIOError(ioe);", "-    }", "+    catch (IOException ioe) { _showIOError(ioe); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97c0392a29711da954e784ba717d0073", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 382, "methodNumberAfterChange": 382, "signatureBeforeChange": "\r \r   public void forIfThenStatement(IfThenStatement that)", "signatureAfterChange": "    public void forIfThenStatement(IfThenStatement that)", "diff": ["-\r", "-  public void forIfThenStatement(IfThenStatement that) {\r", "-    forIfThenStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getTestExpression().visit(this);\r", "-    that.getThenStatement().visit(this);\r", "-    forIfThenStatementOnly(that);\r", "-  }\r", "+", "+  public void forIfThenStatement(IfThenStatement that) {", "+    forIfThenStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getTestExpression().visit(this);", "+    that.getThenStatement().visit(this);", "+    forIfThenStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a69ba061f2e9388bcf3aa3843e74fa4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public String getText()", "signatureAfterChange": "   public String getText()", "diff": ["-    if (_force) {", "-      return _pim.getCurrentItem().toString();", "-    }", "+    if (_force) return _pim.getCurrentItem().toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b1ecd1e67de9dad89604acef3fc7775", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 360, "methodNumberAfterChange": 360, "signatureBeforeChange": "   void debuggerToggleBreakpoint()", "signatureAfterChange": "   void debuggerToggleBreakpoint()", "diff": ["-            if (dialog.getCheckBoxValue()) {", "-                DrJava.getConfig().setSetting(WARN_BREAKPOINT_OUT_OF_SYNC, Boolean.FALSE);", "-            }", "+            if (dialog.getCheckBoxValue())  DrJava.getConfig().setSetting(WARN_BREAKPOINT_OUT_OF_SYNC, Boolean.FALSE);", "-        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b215963d3a7bfc8609b439a95de84b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/MethodData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public boolean equals(Object obj)", "signatureAfterChange": "    public boolean equals(Object obj)", "diff": ["-  public boolean equals(Object obj) {", "+  public boolean equals(Object obj) { ", "-    if ((obj.getClass() != this.getClass())) { //|| (obj.hashCode() != this.hashCode())) {", "-      return false;", "-    }", "+    if ((obj.getClass() != this.getClass())) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c2e987ea0ffc2973231b90ebb6190ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 322, "methodNumberAfterChange": 326, "signatureBeforeChange": "   private OpenDefinitionsDocument _rawOpenFile(File file) throws IOException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _rawOpenFile(File file) throws IOException, AlreadyOpenException", "diff": ["-    if (openDoc != null) {", "-      throw new AlreadyOpenException(openDoc);", "-    }", "+    if (openDoc != null) throw new AlreadyOpenException(openDoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c94d062aac3a3e629ebe1f06899a296", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/ColoringView.java", "commitBeforeChange": "ac188710e667e0471c9bf96ef1dfafd4a8e52eff", "commitAfterChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected int drawUnselectedText(Graphics g, int x, int y, int p0, int p1) throws BadLocationException", "signatureAfterChange": "   protected int drawUnselectedText(Graphics g, int x, int y, int p0, int p1) throws BadLocationException", "diff": ["-    // Might be a PlainDocument (when DefPane is first constructed).", "+    // Might be a PlainDocument (when AbstractDJPane is first constructed).", "-    else return x; // return if there is no definitions document", "+    else return x; // return if there is no AbstracDJDocument", "-    // For some reason I don't understand we tend to get called sometimes", "-    // to render a zero-length area.", "+    // For some reason I don't understand we tend to get called sometimes to render a zero-length area.", "-      if (location + length > p1) {", "-        length = p1 - stat.getLocation();", "-      }", "+      if (location + length > p1) length = p1 - stat.getLocation();", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d2c9d15aee47b7ec756767663126680", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "0a93533cf1b555344278f97d8d989cd2f113c958", "commitAfterChange": "c950bf1122c303a9137db70374c1cd2e2fc01d08", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public synchronized void junitEnded()", "signatureAfterChange": "     public synchronized void junitEnded()", "diff": ["+    }", "-      if (printMessages) {", "-        System.out.println(\"junitEnded event!\");", "-      }", "+      if (printMessages) System.out.println(\"junitEnded event!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d61422969b27dabf7246ed175b72911", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DocumentDebugAction.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public boolean createRequests(Vector<ReferenceType> refTypes) throws DebugException", "signatureAfterChange": "   public boolean createRequests(Vector<ReferenceType> refTypes) throws DebugException", "diff": ["-    else {", "-      return false;", "-    }", "+    else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9de7da85d61dd3ab47138defb77209f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 469, "methodNumberAfterChange": 469, "signatureBeforeChange": "\r \r   public void forComplexAnonymousClassInstantiation(ComplexAnonymousClassInstantiation that)", "signatureAfterChange": "    public void forComplexAnonymousClassInstantiation(ComplexAnonymousClassInstantiation that)", "diff": ["-\r", "-  public void forComplexAnonymousClassInstantiation(ComplexAnonymousClassInstantiation that) {\r", "-    forComplexAnonymousClassInstantiationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getType().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    that.getBody().visit(this);\r", "-    forComplexAnonymousClassInstantiationOnly(that);\r", "-  }\r", "+", "+  public void forComplexAnonymousClassInstantiation(ComplexAnonymousClassInstantiation that) {", "+    forComplexAnonymousClassInstantiationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getType().visit(this);", "+    that.getArguments().visit(this);", "+    that.getBody().visit(this);", "+    forComplexAnonymousClassInstantiationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9df808e2a7782b23f56a448b8204950a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 381, "methodNumberAfterChange": 381, "signatureBeforeChange": "\r \r   public void forSwitchStatement(SwitchStatement that)", "signatureAfterChange": "    public void forSwitchStatement(SwitchStatement that)", "diff": ["-\r", "-  public void forSwitchStatement(SwitchStatement that) {\r", "-    forSwitchStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getTest().visit(this);\r", "-    for (int i = 0; i < that.getCases().length; i++) that.getCases()[i].visit(this);\r", "-    forSwitchStatementOnly(that);\r", "-  }\r", "+", "+  public void forSwitchStatement(SwitchStatement that) {", "+    forSwitchStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getTest().visit(this);", "+    for (int i = 0; i < that.getCases().length; i++) that.getCases()[i].visit(this);", "+    forSwitchStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e838dc0034c7bf1cc3c19bbf0142922", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public synchronized void setCacheSize(int size)", "signatureAfterChange": "   public synchronized void setCacheSize(int size)", "diff": ["-    if(size <= 0)", "-    {", "-      throw new IllegalArgumentException(\"Cannot set the cache size to zero or less.\");", "-    }", "+    if (size <= 0) throw new IllegalArgumentException(\"Cannot set the cache size to zero or less.\");", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ecfe93d6159f243c39906bd7ec0f76d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsEventNotifier.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void interpreterResetting()", "signatureAfterChange": "   public void interpreterResetting()", "diff": ["-   */", "+  /** Called when the interactionsJVM has begun resetting. */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).interpreterResetting();", "-      }", "+//      Utilities.showDebug(\"InteractionsEventNotifier: interpreterResetting called on \" + size + \" listeners\");", "+      for (int i = 0; i < size; i++) _listeners.get(i).interpreterResetting();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ef1ad9064f4df54ddecc7c9c2cd1d78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 375, "signatureBeforeChange": "\r \r   public void forPackageStatement(PackageStatement that)", "signatureAfterChange": "    public void forPackageStatement(PackageStatement that)", "diff": ["-\r", "-  public void forPackageStatement(PackageStatement that) {\r", "-    forPackageStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCWord().visit(this);\r", "-    forPackageStatementOnly(that);\r", "-  }\r", "+", "+  public void forPackageStatement(PackageStatement that) {", "+    forPackageStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCWord().visit(this);", "+    forPackageStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f3d1956eb6b23a1be4f37b6452f04db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 367, "methodNumberAfterChange": 367, "signatureBeforeChange": "\r \r \r   public void forWord(Word that)", "signatureAfterChange": "     public void forWord(Word that)", "diff": ["-\r", "-  public void forWord(Word that) {\r", "-    forWordDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forWordOnly(that);\r", "-  }\r", "+", "+  public void forWord(Word that) {", "+    forWordDoFirst(that);", "+    if (prune(that)) return;", "+    forWordOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f828be35feab2f219d626e86e1bc25c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "3ce53d032ad1bc176a487b71ca8af2994e1e9b4a", "commitAfterChange": "f9cf0907b4c2618456fd74126eedfa638b8d8fcb", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "   public Set<JavaAPIListEntry> getJavaAPISet()", "signatureAfterChange": "   public Set<JavaAPIListEntry> getJavaAPISet()", "diff": ["-    if (_javaAPISet.size() == 0) {", "-      generateJavaAPISet();", "-    }", "+    if (_javaAPISet.size() == 0) generateJavaAPISet();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0038e24ebb5c34f3db23dc7fcf023f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "99105223925683ee669479026ce3b62dfa0eda84", "commitAfterChange": "94ede5fc3e289a571a76fcd6a91c26510fe57b12", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private String parseStringNode(SExp n)", "signatureAfterChange": "     private String parseStringNode(SExp n)", "diff": ["-      if (n instanceof Cons) {", "+      if (n instanceof Cons) ", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2433b392485be1971529e8881c1bcc8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public PredictiveInputFrame(Frame owner, String title, boolean force, boolean ignoreCase, InfoSupplier<? super T> info,                                java.util.List<PredictiveInputModel.MatchingStrategy<T>> strategies,                               CloseAction<T> okAction, CloseAction<T> cancelAction, T... items)", "signatureAfterChange": "   public PredictiveInputFrame(Frame owner, String title, boolean force, boolean ignoreCase, InfoSupplier<? super T> info,                                java.util.List<PredictiveInputModel.MatchingStrategy<T>> strategies,                               CloseAction<T> okAction, CloseAction<T> cancelAction, T... items)", "diff": ["-    if (info==null) {", "-      throw new IllegalArgumentException(\"info is null\");", "-    }", "+    if (info==null)  throw new IllegalArgumentException(\"info is null\");", "-    _pim = new PredictiveInputModel<T>(ignoreCase,", "-                                       _currentStrategy,", "-                                       items);", "+    _pim = new PredictiveInputModel<T>(ignoreCase, _currentStrategy, items);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c435010ee77b00df69ed50f3b2f7ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/CustomSystemClassLoader.java", "commitBeforeChange": "701cda038bdbb4505f738d5f2728e5888b8608b3", "commitAfterChange": "a2c3a24c2af61d289658b8fde0de718a948c97d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Class<?> loadClass(String name) throws ClassNotFoundException", "signatureAfterChange": "   public Class<?> loadClass(String name) throws ClassNotFoundException", "diff": ["-      }else if(fileName.startsWith(\"edu/rice/cs/util/newjvm/SlaveJVMRunner.class\")){", "+      }", "+      else if(fileName.startsWith(\"edu/rice/cs/util/newjvm/SlaveJVMRunner.class\")){", "-        try {", "-          return defineClass(name, data, 0, data.length);", "-        }", "-        catch (Error t) {", "-          throw t;", "-        }", "+        try { return defineClass(name, data, 0, data.length); }", "+        catch (Error t) { throw t; }", "-    }catch(ClassNotFoundException e){", "-      // the system couldn't find it, so let's try something else", "-    }catch(IOException e){", "-      // the system couldn't find it, so let's try something else", "+    catch(ClassNotFoundException e) { /* the system couldn't find it, so let's try something else */ }", "+    catch(IOException e) { /* the system couldn't find it, so let's try something else */ }", "-    try{", "-      if(_master != null){", "+    try {", "+      if (_master != null) {", "-        }else{", "-          byte[] data = FileOps.readStreamAsBytes(resource.openStream());", "-          try {", "-            return defineClass(name, data, 0, data.length);", "-          }", "-          catch (Error t) {", "-            throw t;", "-          }", "-      }else{", "-        throw new ClassNotFoundException();", "+        else {", "+          byte[] data = FileOps.readStreamAsBytes(resource.openStream());", "+          try { return defineClass(name, data, 0, data.length); }", "+          catch (Error t) { throw t; }", "+        }", "-    }catch(RemoteException e){", "-      throw new ClassNotFoundException();", "-    }catch(IOException e){", "-      throw new ClassNotFoundException();", "+      else throw new ClassNotFoundException();", "+    catch(RemoteException e) { throw new ClassNotFoundException(); }", "+    catch(IOException e) { throw new ClassNotFoundException(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a72b4b3f1238d00097e48a33484a22a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 417, "methodNumberAfterChange": 417, "signatureBeforeChange": "          public void projectRunnableChanged()", "signatureAfterChange": "          public void projectRunnableChanged()", "diff": ["-      if(_model.getMainClass() != null && _model.getMainClass().exists()){", "+      if(_model.getMainClass() != null && _model.getMainClass().exists()) {", "-      }else{", "-        _runProjectAction.setEnabled(false);", "+      else _runProjectAction.setEnabled(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7aa0c1ab9d58e6673b1fdab0c168127", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 248, "signatureBeforeChange": "         private void _runProject()", "signatureAfterChange": "         private void _runProject()", "diff": ["-        JOptionPane.showMessageDialog(MainFrame.this, msg, \"No Class Found\",", "-                                      JOptionPane.ERROR_MESSAGE);", "+        JOptionPane.showMessageDialog(MainFrame.this, msg, \"No Class Found\", JOptionPane.ERROR_MESSAGE);", "-      catch (FileMovedException fme) {", "-        _showFileMovedError(fme);", "-      }", "-      catch (IOException ioe) {", "-        _showIOError(ioe);", "-      }", "+      catch (FileMovedException fme) { _showFileMovedError(fme); }", "+      catch (IOException ioe) { _showIOError(ioe); }", "-    else {", "-      _runMain();", "-    }", "+    else _runMain();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a999e452fcecef83325359d64b5f8c7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 204, "methodNumberAfterChange": 206, "signatureBeforeChange": "     public void print() throws PrinterException, BadLocationException,       FileMovedException", "signatureAfterChange": "     public void print() throws PrinterException, BadLocationException, FileMovedException", "diff": ["-     */", "-    public void print() throws PrinterException, BadLocationException,", "-      FileMovedException {", "+    /** Prints the given document by bringing up a \"Print\" window. */", "+    public void print() throws PrinterException, BadLocationException, FileMovedException {", "-      if (printJob.printDialog()) {", "-        printJob.print();", "-      }", "+      if (printJob.printDialog()) printJob.print();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a99bc1b1fbcf1c20f2121f07c8c72a30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 419, "methodNumberAfterChange": 419, "signatureBeforeChange": "\r \r   public void forDivideAssignmentExpression(DivideAssignmentExpression that)", "signatureAfterChange": "    public void forDivideAssignmentExpression(DivideAssignmentExpression that)", "diff": ["-\r", "-  public void forDivideAssignmentExpression(DivideAssignmentExpression that) {\r", "-    forDivideAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forDivideAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forDivideAssignmentExpression(DivideAssignmentExpression that) {", "+    forDivideAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forDivideAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e5ca6e886e7cdbca435cc1cb9bd7b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 186, "signatureBeforeChange": "   public void openFolder(DirectoryChooser chooser)", "signatureAfterChange": "   public void openFolder(DirectoryChooser chooser)", "diff": ["-    try{", "-      openDir = _model.getActiveDocument().getFile().getParentFile();", "-    }catch(FileMovedException e){", "-    }catch(IllegalStateException e){", "-    }", "+    try { openDir = _model.getActiveDocument().getFile().getParentFile(); }", "+    catch(FileMovedException e) { /* do nothing */ }", "+    catch(IllegalStateException e) { /* do nothing */ }", "-    if (result != DirectoryChooser.APPROVE_OPTION) {", "-      return; // canceled or error", "-    }", "+    if (result != DirectoryChooser.APPROVE_OPTION)  return; // canceled or error", "-    if(dir == null) return; // just in case", "+    if (dir == null) return; // just in case", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa3e315a125166b34ded04acbcd97da2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ColorOption.java", "commitBeforeChange": "18ba05a758e01d1cdb3ad27d58fd007121dcdc63", "commitAfterChange": "fbf201d6c571409933ea805efe2ae830a8c6d081", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public String format(Color c)", "signatureAfterChange": "      public String format(Color c)", "diff": ["-    for (int i = 0; i < (len - str.length()); i++) {", "-      buff.insert(0, '0');", "-    }", "+    for (int i = 0; i < (len - str.length()); i++)  buff.insert(0, '0');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa7db881ee9f3f0557eabf60117881dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "             private ImageIcon _getIconResource(String name)", "signatureAfterChange": "    private ImageIcon _getIconResource(String name)", "diff": ["-  ", "-  private ImageIcon _getIconResource(String name) {", "-    URL url = RecentDocFrame.class.getResource(\"icons/\" + name);", "-    if (url != null) {", "-      return new ImageIcon(url);", "-    }", "+  private ImageIcon _getIconResource(String name) {", "+    URL url = RecentDocFrame.class.getResource(\"icons/\" + name);", "+    if (url != null) return new ImageIcon(url);", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaad0121e564e9b99a80294858addc83", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e69ba1eec2cb635c70a9fe0a1398fd66d2a7ddb9", "commitAfterChange": "521b5a6ad4ead519c4e7d942bbf2dde99a3dae4b", "methodNumberBeforeChange": 305, "methodNumberAfterChange": 306, "signatureBeforeChange": "    private boolean _rename()", "signatureAfterChange": "    private boolean _rename()", "diff": ["-      if (!_model.getActiveDocument().fileExists()) {", "-        return _saveAs();", "-      }", "+      if (!_model.getActiveDocument().fileExists()) return _saveAs();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab9514fed4c5c2b63099b50d3b0dc880", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data)", "signatureAfterChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data)", "diff": ["-   */", "+    */", "-    if (prune(that)) {return;}", "+    if (prune(that)) return;", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac0a893449236f2a44031683eaef7aae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": "    private void _compileFolder()", "signatureAfterChange": "    private void _compileFolder()", "diff": ["-    if(_model.getDocumentNavigator().isGroupSelected()){", "+    if (_model.getDocumentNavigator().isGroupSelected()) {", "-        if(_model.getDocumentNavigator().isSelectedInGroup(n)){", "-          l.add(_model.getODDGivenIDoc(n));", "-        }", "+        if (_model.getDocumentNavigator().isSelectedInGroup(n)) l.add(_model.getODDGivenIDoc(n));", "-          try {", "-            _model.getCompilerModel().compile(l);", "-          }", "-          catch (FileMovedException fme) {", "-            _showFileMovedError(fme);", "-          }", "-          catch (IOException ioe) {", "-            _showIOError(ioe);", "-          }", "+          try { _model.getCompilerModel().compile(l); }", "+          catch (FileMovedException fme) { _showFileMovedError(fme); }", "+          catch (IOException ioe) { _showIOError(ioe); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac22ffdbf71568c63646ba5d42063301", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void redo()", "signatureAfterChange": "   public void redo()", "diff": ["-    if(_compoundEditInProgress()) {", "+    if (_compoundEditInProgress()) {", "-      super.redo();", "-      //      throw new CannotRedoException();", "+      super.redo(); //      throw new CannotRedoException();", "-    else {", "-      super.redo();", "-    }", "+    else super.redo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc944a2cc4ddfef50ca1612be778033", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 486, "methodNumberAfterChange": 486, "signatureBeforeChange": "\r \r   public void forClassLiteral(ClassLiteral that)", "signatureAfterChange": "    public void forClassLiteral(ClassLiteral that)", "diff": ["-\r", "-  public void forClassLiteral(ClassLiteral that) {\r", "-    forClassLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    forClassLiteralOnly(that);\r", "-  }\r", "+", "+  public void forClassLiteral(ClassLiteral that) {", "+    forClassLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    forClassLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad717eed4e3aacaa391e2bc088b00f84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void pokeDocument(OpenDefinitionsDocument d)", "signatureAfterChange": "   public void pokeDocument(OpenDefinitionsDocument d)", "diff": ["-  public void pokeDocument(OpenDefinitionsDocument d){", "-    if(_docs.contains(d)){", "+  public void pokeDocument(OpenDefinitionsDocument d) {", "+    if (_docs.contains(d)) {", "-    }else{", "-      _docs.addFirst(d);", "+    else _docs.addFirst(d);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad98e68d47f55a986f033d5ad600072b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectorySelectorComponent.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private void _chooseFile()", "signatureAfterChange": "   private void _chooseFile()", "diff": ["-      if (chosen != null) {", "-        setFileField(chosen);", "-      }", "+      if (chosen != null) setFileField(chosen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "add009d8a08a53f0d0612f2209892a75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 443, "methodNumberAfterChange": 443, "signatureBeforeChange": "\r \r   public void forMultiplyExpression(MultiplyExpression that)", "signatureAfterChange": "    public void forMultiplyExpression(MultiplyExpression that)", "diff": ["-\r", "-  public void forMultiplyExpression(MultiplyExpression that) {\r", "-    forMultiplyExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forMultiplyExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMultiplyExpression(MultiplyExpression that) {", "+    forMultiplyExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forMultiplyExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af67c3cdd990b433bb24ec9248dd7f1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileBuilder.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void addClasspathFile(File cp)", "signatureAfterChange": "   public void addClasspathFile(File cp)", "diff": ["-  public void addClasspathFile(File cp) {", "-    if (cp != null) {", "-      _classpathFiles.add(cp);", "-    }", "-  }", "+  public void addClasspathFile(File cp) { if (cp != null) _classpathFiles.add(cp); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b114e8c4aa3ad551039f6951f5502b67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private int nextErrorWithLine(int idx)", "signatureAfterChange": "   private int nextErrorWithLine(int idx)", "diff": ["-    while ((idx < _numErrors) && (_errors[idx].hasNoLocation()", "-           || (_errors[idx].file() == null)))", "-    {", "-      idx++;", "-    }", "+    while (idx < _numErrors && (_errors[idx].hasNoLocation() || _errors[idx].file() == null)) idx++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b119e64bae01a084856d37e8b0f40d62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      protected void throwErrorHuh()", "signatureAfterChange": "      protected void throwErrorHuh()", "diff": ["-      if(_closed){", "-        throw new RuntimeException(\"Definitions Document is closed, yet is being used\");", "-      }", "+    if (_closed) throw new RuntimeException(\"Definitions Document is closed, yet is being used\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b11a004f712780280b8465f4b45f584f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void threadStarted()", "signatureAfterChange": "   public void threadStarted()", "diff": ["-   */", "+  /** Called when a thread starts. Must be executed in event thread. */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).threadStarted();", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).threadStarted();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b129c4fba8bb04f749dcfc1a4cb7a79b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/FontOptionComponent.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public boolean updateConfig()", "signatureAfterChange": "   public boolean updateConfig()", "diff": ["-    if (!_font.equals(DrJava.getConfig().getSetting(_option))) {", "-      DrJava.getConfig().setSetting(_option, _font);", "-    }", "+    if (!_font.equals(DrJava.getConfig().getSetting(_option))) DrJava.getConfig().setSetting(_option, _font);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1d0a0c86d43b6ea62e73838569b62b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    public void testImmediateQuit() throws Exception", "signatureAfterChange": "    public void testImmediateQuit() throws Exception", "diff": ["-    for (int i = 0; i < 5; i++) {", "-      _testMaster.runImmediateQuitTest();", "-    }", "+    for (int i = 0; i < 5; i++)  _testMaster.runImmediateQuitTest();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1fd7ca18106118b8395135c53125408", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public void addProjectFilesClassPath(URL s)", "signatureAfterChange": "   public void addProjectFilesClassPath(URL s)", "diff": ["-    if (_classPath.contains(s)) {", "-      // Don't add it again", "-      return;", "-    }", "+    if (_classPath.contains(s)) return;  // Don't add it again"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b31ee8c0f66564b88d121ad0d232acaa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   protected void _handleThreadDeathEvent(ThreadDeathEvent e) throws DebugException", "signatureAfterChange": "   protected void _handleThreadDeathEvent(ThreadDeathEvent e) throws DebugException", "diff": ["-      else {", "+      else", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3c6c33bb4ad30d3f578222c1eaac005", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 166, "signatureBeforeChange": "   public void aboutToSaveFromSaveAll(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void aboutToSaveFromSaveAll(OpenDefinitionsDocument doc)", "diff": ["-    if ( doc.isUntitled()) {", "-      setActiveDocument(doc);", "-    }", "+    if ( doc.isUntitled()) setActiveDocument(doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b55edbc370d364a45a3e3fc57ff7f387", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "aaf929e2f10e21e12d70415a67e84135593a5810", "commitAfterChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public int findPrevEnclosingBrace(int pos, char opening, char closing) throws BadLocationException", "signatureAfterChange": "   public int findPrevEnclosingBrace(int pos, char opening, char closing) throws BadLocationException", "diff": ["-              if (text.charAt(i)==closing) {", "-                ++braceBalance;", "-              }", "+              if (text.charAt(i)==closing) ++braceBalance;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b57ff035bfd33317c24a9c5703c43cb9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public synchronized void setCurrentThread(DebugThreadData threadData) throws DebugException", "signatureAfterChange": "   public synchronized void setCurrentThread(DebugThreadData threadData) throws DebugException", "diff": ["-    if (_suspendedThreads.contains(threadRef.uniqueID())) {", "-      _suspendedThreads.remove(threadRef.uniqueID());", "-    }", "+    if (_suspendedThreads.contains(threadRef.uniqueID())) _suspendedThreads.remove(threadRef.uniqueID());", "+", "-        printMessage(threadRef.name() +", "-                     \" could not be suspended since it has no stackframes.\");", "+        printMessage(threadRef.name() + \" could not be suspended since it has no stackframes.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6e146c92e5304170f88cbd4e13138b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelControl.java", "commitBeforeChange": "02b5ca416f64b6343429bd55e72b9ce1f40f0611", "commitAfterChange": "267871686ee9cb7da11475b012538aa6ee86c7c7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public ReducedToken currentToken()", "signatureAfterChange": "   public ReducedToken currentToken()", "diff": ["-   */", "+    */", "-    if (!rmcToken.isGap()) {", "-        return rmcToken;", "-    }", "+    if (!rmcToken.isGap()) return rmcToken;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b75358760e095ac483cd336602a0e751", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public synchronized boolean closeFiles(List<OpenDefinitionsDocument> docList, boolean together)", "signatureAfterChange": "   public boolean closeFiles(List<OpenDefinitionsDocument> docList, boolean together)", "diff": ["-  public synchronized boolean closeFiles(List<OpenDefinitionsDocument> docList, boolean together) {", "+  public boolean closeFiles(List<OpenDefinitionsDocument> docList, boolean together) {", "-      for (OpenDefinitionsDocument doc : docList) {", "-        if (!doc.canAbandonFile()) return false;", "-      }", "+      for (OpenDefinitionsDocument doc : docList) { if (!doc.canAbandonFile()) return false; }", "-      if (together) {", "-        super.closeFileWithoutPrompt(doc);", "-      }", "+      if (together) super.closeFileWithoutPrompt(doc);", "-    }", "-        ", "+    }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7f875dff67e00fed21fd67a86c7e950", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "commitAfterChange": "010ae297b5b09284b0dfa287aa524a83e41fa50d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,      InterruptedException", "signatureAfterChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, InterruptedException", "diff": ["-  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, ", "-    InterruptedException {", "+  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, InterruptedException {", "+    ", "-    catch (DocumentAdapterException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (DocumentAdapterException e) { throw new UnexpectedException(e); }", "-      if (_model.getCompilerModel().getNumErrors() > 0) {", "-        fail(\"compile failed: \" + getCompilerErrorString());", "-      }", "+      if (_model.getCompilerModel().getNumErrors() > 0) fail(\"compile failed: \" + getCompilerErrorString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9353b7b289a6038090bb74ee35647f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private static boolean checkJSR14JarForClass(String checkClass, String msg, String title)", "signatureAfterChange": "   private static boolean checkJSR14JarForClass(String checkClass, String msg, String title)", "diff": ["-   */", "+  /** Helper method called by checkForJSR14v2 and checkForJSR14v24. */", "-            if (!_attemptingAugmentedClasspath) {", "-              JOptionPane.showMessageDialog(null, msg, title,", "-                                            JOptionPane.WARNING_MESSAGE);", "-            }", "+            if (!_attemptingAugmentedClasspath)", "+              JOptionPane.showMessageDialog(null, msg, title, JOptionPane.WARNING_MESSAGE);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b96087e17e1332209fa5caf577ac7070", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void setVisible(boolean v)", "signatureAfterChange": "   public void setVisible(boolean v)", "diff": ["-  public void setVisible(boolean v){", "+  public void setVisible(boolean v) {", "-    if(_docs.size() > 0){", "-      if(v){ ", "+    if (_docs.size() > 0) {", "+      if (v) { ", "-      }else{", "-        reset();", "+      else reset();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9d62c16d0b260fe0349d9a448f0f3c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void insert(T item)", "signatureAfterChange": "     public void insert(T item)", "diff": ["-      if (this.atStart()) {", "-        next();", "-      }", "+      if (this.atStart()) next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1b8ca01129602c4508eef2d717170a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 468, "methodNumberAfterChange": 468, "signatureBeforeChange": "\r \r   public void forSimpleAnonymousClassInstantiation(SimpleAnonymousClassInstantiation that)", "signatureAfterChange": "    public void forSimpleAnonymousClassInstantiation(SimpleAnonymousClassInstantiation that)", "diff": ["-\r", "-  public void forSimpleAnonymousClassInstantiation(SimpleAnonymousClassInstantiation that) {\r", "-    forSimpleAnonymousClassInstantiationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    that.getBody().visit(this);\r", "-    forSimpleAnonymousClassInstantiationOnly(that);\r", "-  }\r", "+", "+  public void forSimpleAnonymousClassInstantiation(SimpleAnonymousClassInstantiation that) {", "+    forSimpleAnonymousClassInstantiationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    that.getArguments().visit(this);", "+    that.getBody().visit(this);", "+    forSimpleAnonymousClassInstantiationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba348f14b4162f0bc3916bb7b4941021", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionConstants.java", "commitBeforeChange": "80b5fb6a38e815634acd75afbaca24da4d11be21", "commitAfterChange": "dea430b985112dc86310f3cdaf8b15a8dea3799c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static ArrayList<String> getLookAndFeels()", "signatureAfterChange": "     public static ArrayList<String> getLookAndFeels()", "diff": ["-            if (currLAF.isSupportedLookAndFeel()) {", "-              lookAndFeels.add(currName);", "-            }", "+            if (currLAF.isSupportedLookAndFeel()) lookAndFeels.add(currName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba78baebc36ade0bfa0b73e97f857bde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fbf201d6c571409933ea805efe2ae830a8c6d081", "commitAfterChange": "52d7118f909675d6286de388d3cc282a76e90ccf", "methodNumberBeforeChange": 321, "methodNumberAfterChange": 321, "signatureBeforeChange": "   public JButton _createToolbarButton(Action a)", "signatureAfterChange": "   public JButton _createToolbarButton(Action a)", "diff": ["-   */", "+  /** Sets up all buttons for the toolbar except for undo and redo, which use _createManualToolbarButton. */", "-    if (!useText && (result.getIcon() != null)) {", "-      result.setText(\"\");", "-    }", "+    if (!useText && (result.getIcon() != null)) result.setText(\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bafe1094b9b84297723df26c3a1d9d54", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileBuilder.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void addCollapsedPath(String cp)", "signatureAfterChange": "   public void addCollapsedPath(String cp)", "diff": ["-  }", "-  public void addCollapsedPath(String cp) {", "-    if (cp != null) {", "-      _collapsedPaths.add(cp);", "-    }", "-  }", "+  public void addClasspathFile(File cp) { if (cp != null) _classpathFiles.add(cp); }", "+  public void addCollapsedPath(String cp) { if (cp != null) _collapsedPaths.add(cp); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb2e166b0efafee9547c249d07bfe4d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerError.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public CompilerError(File file, int lineNumber, int startColumn, String message,       boolean isWarning)", "signatureAfterChange": "   public CompilerError(File file, int lineNumber, int startColumn, String message,       boolean isWarning)", "diff": ["-    if (lineNumber < 0){", "-      _noLocation = true;", "-    }", "+    if (lineNumber < 0) _noLocation = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb68e7d4903fa60c6b1b02c84a97140e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 376, "methodNumberAfterChange": 376, "signatureBeforeChange": "\r \r   public void forClassImportStatement(ClassImportStatement that)", "signatureAfterChange": "    public void forClassImportStatement(ClassImportStatement that)", "diff": ["-\r", "-  public void forClassImportStatement(ClassImportStatement that) {\r", "-    forClassImportStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCWord().visit(this);\r", "-    forClassImportStatementOnly(that);\r", "-  }\r", "+", "+  public void forClassImportStatement(ClassImportStatement that) {", "+    forClassImportStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCWord().visit(this);", "+    forClassImportStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbdf9034a209423dfa04307db228a44e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   private void _indentBlock(final int start, final int end, int reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   private void _indentBlock(final int start, final int end, int reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["-      // Keep marker at the end. This Position will be the", "-      // correct endpoint no matter how we change the doc", "-      // doing the indentLine calls.", "+      // Keep marker at the end. This Position will be the correct endpoint no matter how we change ", "+      // the doc doing the indentLine calls.", "-          if (pm.isCanceled()) {", "-            throw new OperationCanceledException();", "-          }", "+          if (pm.isCanceled()) throw new OperationCanceledException();", "-    catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc04bae466b823d2bedb08f26fab8ce4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 461, "methodNumberAfterChange": 461, "signatureBeforeChange": "\r \r   public void forFloatLiteral(FloatLiteral that)", "signatureAfterChange": "    public void forFloatLiteral(FloatLiteral that)", "diff": ["-\r", "-  public void forFloatLiteral(FloatLiteral that) {\r", "-    forFloatLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forFloatLiteralOnly(that);\r", "-  }\r", "+", "+  public void forFloatLiteral(FloatLiteral that) {", "+    forFloatLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forFloatLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc2b58947b5e66003842a48895b0bf2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 395, "methodNumberAfterChange": 395, "signatureBeforeChange": "\r \r   public void forTryCatchFinallyStatement(TryCatchFinallyStatement that)", "signatureAfterChange": "    public void forTryCatchFinallyStatement(TryCatchFinallyStatement that)", "diff": ["-\r", "-  public void forTryCatchFinallyStatement(TryCatchFinallyStatement that) {\r", "-    forTryCatchFinallyStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getTryBlock().visit(this);\r", "-    for (int i = 0; i < that.getCatchBlocks().length; i++) that.getCatchBlocks()[i].visit(this);\r", "-    that.getFinallyBlock().visit(this);\r", "-    forTryCatchFinallyStatementOnly(that);\r", "-  }\r", "+", "+  public void forTryCatchFinallyStatement(TryCatchFinallyStatement that) {", "+    forTryCatchFinallyStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getTryBlock().visit(this);", "+    for (int i = 0; i < that.getCatchBlocks().length; i++) that.getCatchBlocks()[i].visit(this);", "+    that.getFinallyBlock().visit(this);", "+    forTryCatchFinallyStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc33b31d0005d8f7bdb9406fad7868d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 414, "methodNumberAfterChange": 414, "signatureBeforeChange": "\r \r   public void forCatchBlock(CatchBlock that)", "signatureAfterChange": "    public void forCatchBlock(CatchBlock that)", "diff": ["-\r", "-  public void forCatchBlock(CatchBlock that) {\r", "-    forCatchBlockDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getException().visit(this);\r", "-    that.getBlock().visit(this);\r", "-    forCatchBlockOnly(that);\r", "-  }\r", "+", "+  public void forCatchBlock(CatchBlock that) {", "+    forCatchBlockDoFirst(that);", "+    if (prune(that)) return;", "+    that.getException().visit(this);", "+    that.getBlock().visit(this);", "+    forCatchBlockOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc88faa7eed34ca1c5e4c802fe22e654", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void undo(int key)", "signatureAfterChange": "   public void undo(int key)", "diff": ["-    if(_keys.get(0).intValue() == key) {", "+    if (_keys.get(0).intValue() == key) {", "-    else {", "-      throw new IllegalArgumentException(\"Bad undo key \" + key + \"!\");", "-    }", "+    else throw new IllegalArgumentException(\"Bad undo key \" + key + \"!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc984d8f8ac6724e318cf7199189c999", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 477, "methodNumberAfterChange": 477, "signatureBeforeChange": "\r \r   public void forComplexThisReference(ComplexThisReference that)", "signatureAfterChange": "    public void forComplexThisReference(ComplexThisReference that)", "diff": ["-\r", "-  public void forComplexThisReference(ComplexThisReference that) {\r", "-    forComplexThisReferenceDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    forComplexThisReferenceOnly(that);\r", "-  }\r", "+", "+  public void forComplexThisReference(ComplexThisReference that) {", "+    forComplexThisReferenceDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    forComplexThisReferenceOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd24926d27266e7cf31c070d33261c3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 467, "methodNumberAfterChange": 467, "signatureBeforeChange": "\r \r   public void forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that)", "signatureAfterChange": "    public void forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that)", "diff": ["-\r", "-  public void forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that) {\r", "-    forComplexNamedClassInstantiationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getType().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    forComplexNamedClassInstantiationOnly(that);\r", "-  }\r", "+", "+  public void forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that) {", "+    forComplexNamedClassInstantiationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getType().visit(this);", "+    that.getArguments().visit(this);", "+    forComplexNamedClassInstantiationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd90338f4fe14c81d8ce70a7b64cde1b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   synchronized boolean setCurrentThread(ThreadReference thread)", "signatureAfterChange": "   synchronized boolean setCurrentThread(ThreadReference thread)", "diff": ["-      if ((_suspendedThreads.isEmpty() ||", "-           !_suspendedThreads.contains(thread.uniqueID()))", "-            && (thread.frameCount() > 0)) {", "+      if ((_suspendedThreads.isEmpty() || ", "+           !_suspendedThreads.contains(thread.uniqueID())) && (thread.frameCount() > 0)) {", "-", "-      else {", "-        return false;", "-      }", "+      else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd9b0e96f41746724e310726efe370b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 379, "methodNumberAfterChange": 379, "signatureBeforeChange": "\r \r \r   public void forBlock(Block that)", "signatureAfterChange": "     public void forBlock(Block that)", "diff": ["-\r", "-  public void forBlock(Block that) {\r", "-    forBlockDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getStatements().visit(this);\r", "-    forBlockOnly(that);\r", "-  }\r", "+", "+  public void forBlock(Block that) {", "+    forBlockDoFirst(that);", "+    if (prune(that)) return;", "+    that.getStatements().visit(this);", "+    forBlockOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdd89ee4c3a575771b4d12573866017b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/IntegerOptionComponent.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public boolean updateConfig()", "signatureAfterChange": "   public boolean updateConfig()", "diff": ["-   */", "+    */", "-    if (currentValue.toString().equals(enteredString)) {", "-      return true;", "-    }", "+    if (currentValue.toString().equals(enteredString)) return true;", "-    try {", "-      enteredValue = _option.parse(enteredString);", "-    }", "+    try { enteredValue = _option.parse(enteredString); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bde8238b97ae8a87a14bb56acffd6015", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public void uncommentLines(int selStart, int selEnd)", "signatureAfterChange": "   public void uncommentLines(int selStart, int selEnd)", "diff": ["-    // throwErrorHuh();", "-        else {", "-          _uncommentBlock(selStart, selEnd);", "-        }", "+        else _uncommentBlock(selStart, selEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be08ac64a6ed4e2cefa608dfd80f8482", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectorySelectorComponent.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "    public void resetFileField()", "signatureAfterChange": "    public void resetFileField()", "diff": ["-    if (_file == null) {", "-      _fileField.setText(\"\");", "-    }", "+    if (_file == null) _fileField.setText(\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be9c82b07c0b220332fc3e8f28323ed8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/History.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void moveNext(String entry)", "signatureAfterChange": "   public void moveNext(String entry)", "diff": ["-    if (!hasNext()) {", "-      throw  new ArrayIndexOutOfBoundsException();", "-    }", "+    if (! hasNext()) throw  new ArrayIndexOutOfBoundsException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beaa18069b3ef58609b118ef167cb1d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "d75bb4144501a8419376e0dc8dbe054c7511983f", "commitAfterChange": "a31b2c97ecb1660744788e96501356f9c0219d19", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "    public boolean openBraceImmediatelyLeft()", "signatureAfterChange": "    public boolean openBraceImmediatelyLeft()", "diff": ["-    if (_cursor.atStart() || _cursor.atFirstItem()) {", "-      return false;", "-    }", "+    if (_cursor.atStart() || _cursor.atFirstItem()) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec6560a8dd832e3387c291022a1e82d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void forInterfaceDef(InterfaceDef that)", "signatureAfterChange": "   public void forInterfaceDef(InterfaceDef that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfdd7a38e62bc6becc81f2fa343abb07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public void treeExpanded(TreeExpansionEvent event)", "signatureAfterChange": "   public synchronized void treeExpanded(TreeExpansionEvent event)", "diff": ["-   */", "-  public void treeExpanded(TreeExpansionEvent event) {", "+  /** Called whenever an item in the tree has been expanded. */", "+  public synchronized void treeExpanded(TreeExpansionEvent event) {", "-    if (o instanceof InnerNode) {", "-      ((InnerNode)o).setCollapsed(false);", "-    }", "+    if (o instanceof InnerNode) ((InnerNode)o).setCollapsed(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c020ec1093c1344145ff1e91e26c697c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 386, "methodNumberAfterChange": 386, "signatureBeforeChange": "\r \r   public void forForStatement(ForStatement that)", "signatureAfterChange": "    public void forForStatement(ForStatement that)", "diff": ["-\r", "-  public void forForStatement(ForStatement that) {\r", "-    forForStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getInit().visit(this);\r", "-    that.getCondition().visit(this);\r", "-    that.getUpdate().visit(this);\r", "-    that.getCode().visit(this);\r", "-    forForStatementOnly(that);\r", "-  }\r", "+", "+  public void forForStatement(ForStatement that) {", "+    forForStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getInit().visit(this);", "+    that.getCondition().visit(this);", "+    that.getUpdate().visit(this);", "+    that.getCode().visit(this);", "+    forForStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0a08badba66c4c8b5c2d36337813f3d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 203, "signatureBeforeChange": "     private boolean _save()", "signatureAfterChange": "    private boolean _save()", "diff": ["-      else {", "-           ", "-        return false;", "-      }", "+      else return false;", "-    catch (IOException ioe) {", "+    catch (IOException ioe) { ", "-      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c24b7b755f27f37a9c3a61dca73fea40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r   private void implicitSuperConstructor(BracedBody that)", "signatureAfterChange": "   private void implicitSuperConstructor(BracedBody that)", "diff": ["-   */\r", "-  private void implicitSuperConstructor(BracedBody that) {\r", "-    SymbolData superClass = _data.getSymbolData().getSuperClass();\r", "-    \r", "-    if (superClass == null) {  //This should never happen, but if it does, no reason to throw an error.\r", "-      return;\r", "-    }\r", "-\r", "-    //If the super class is an inner class, there cannot be an implicit constructor call\r", "-    if (superClass.getOuterData() != null && !(superClass.hasModifier(\"static\"))) {\r", "-      _addError(\"There is an implicit call to the constructor of \" + superClass.getName() + \" here, but \" + superClass.getName() + \" is a non-static inner class of \" + superClass.getOuterData().getName() + \".  Thus, you must explicitly invoke its constructor from an instance of its outer class\", that);\r", "-      return;\r", "-    }\r", "-\r", "-    \r", "-    //Look in this's super class and try to match the invocation.  If no match is found, the method invocation will add an error.\r", "-    String name = LanguageLevelVisitor.getUnqualifiedClassName(superClass.getName());\r", "-    \r", "-    //There must be a default constructor with no arguments, or an error is thrown.\r", "-    //(Note--if there were no constructors in the super class at all, the default no arguments constructor would exist.  However, a constructor is always\r", "-    //generated for a LanguageLevel file, and any class file that relied on the default constructor would already have it.  Therefore, we can assume\r", "-    //that all classes have at least one constructor).\r", "-    MethodData cd = _lookupMethod(name, superClass, new InstanceData[0], that, \r", "-                           \"You must invoke one of \" + superClass.getName() + \"'s constructors here.  You can either explicitly invoke one of its exisitng constructors or add a constructor with signature: \", \r", "-                           true, superClass);\r", "-\r", "-    if (cd == null) {return;}\r", "-    //if constructor is declared to throw exceptions, add them to thrown list:\r", "-    //add BracedBody as the JExpression corresponding to the error\r", "-    String[] thrown = cd.getThrown();\r", "-    for (int i = 0; i<thrown.length; i++) {\r", "-      _thrown.addLast(new Pair<SymbolData, JExpression>(getSymbolData(thrown[i], _getData(), that), that));\r", "-    }\r", "-    \r", "-    \r", "-    return;\r", "-  }\r", "+   */", "+  private void implicitSuperConstructor(BracedBody that) {", "+    SymbolData superClass = _data.getSymbolData().getSuperClass();", "+    ", "+    if (superClass == null) {  //This should never happen, but if it does, no reason to throw an error.", "+      return;", "+    }", "+", "+    //If the super class is an inner class, there cannot be an implicit constructor call", "+    if (superClass.getOuterData() != null && !(superClass.hasModifier(\"static\"))) {", "+      _addError(\"There is an implicit call to the constructor of \" + superClass.getName() + \" here, but \" + superClass.getName() + \" is a non-static inner class of \" + superClass.getOuterData().getName() + \".  Thus, you must explicitly invoke its constructor from an instance of its outer class\", that);", "+      return;", "+    }", "+", "+    ", "+    //Look in this's super class and try to match the invocation.  If no match is found, the method invocation will add an error.", "+    String name = LanguageLevelVisitor.getUnqualifiedClassName(superClass.getName());", "+    ", "+    //There must be a default constructor with no arguments, or an error is thrown.", "+    //(Note--if there were no constructors in the super class at all, the default no arguments constructor would exist.  However, a constructor is always", "+    //generated for a LanguageLevel file, and any class file that relied on the default constructor would already have it.  Therefore, we can assume", "+    //that all classes have at least one constructor).", "+    MethodData cd = _lookupMethod(name, superClass, new InstanceData[0], that, ", "+                           \"You must invoke one of \" + superClass.getName() + \"'s constructors here.  You can either explicitly invoke one of its exisitng constructors or add a constructor with signature: \", ", "+                           true, superClass);", "+", "+    if (cd == null) return;", "+    //if constructor is declared to throw exceptions, add them to thrown list:", "+    //add BracedBody as the JExpression corresponding to the error", "+    String[] thrown = cd.getThrown();", "+    for (int i = 0; i<thrown.length; i++) {", "+      _thrown.addLast(new Pair<SymbolData, JExpression>(getSymbolData(thrown[i], _getData(), that), that));", "+    }", "+    ", "+    ", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2f7b381de9d1afa83f64adae3dabc4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static synchronized FileConfiguration getConfig()", "signatureAfterChange": "   public static synchronized FileConfiguration getConfig()", "diff": ["-   */", "+  /** Returns the configuration object with all customized and default values. */", "-    if (_config == null) {", "-      initConfig();", "-    }", "-", "+    if (_config == null) initConfig();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c32965f9e460c9a94360f8505ff90cf6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DocumentDebugAction.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected void _initializeRequests(Vector<ReferenceType> refTypes) throws DebugException", "signatureAfterChange": "   protected void _initializeRequests(Vector<ReferenceType> refTypes) throws DebugException", "diff": ["-    if (refTypes.size() > 0) {", "-      createRequests(refTypes);", "-    }", "+    if (refTypes.size() > 0) createRequests(refTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c354355ea2c1b2bf9ed87fa8602790ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "          protected void _updateWithErrors() throws BadLocationException", "signatureAfterChange": "          protected void _updateWithErrors() throws BadLocationException", "diff": ["-      if (getErrorModel().hasOnlyWarnings()) {", "-        failureName = \"warning\";", "-      }", "+      if (getErrorModel().hasOnlyWarnings()) failureName = \"warning\";", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3db456a4923cb99ca08a08d4f57662f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 427, "methodNumberAfterChange": 427, "signatureBeforeChange": "\r \r   public void forOrExpression(OrExpression that)", "signatureAfterChange": "    public void forOrExpression(OrExpression that)", "diff": ["-\r", "-  public void forOrExpression(OrExpression that) {\r", "-    forOrExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forOrExpressionOnly(that);\r", "-  }\r", "+", "+  public void forOrExpression(OrExpression that) {", "+    forOrExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forOrExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5e710e6246e6066ecfcc8f10e273c08", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void _javadocDocumentWorker(File destDirFile, File docFile,                                       String classpath)", "signatureAfterChange": "   private void _javadocDocumentWorker(File destDirFile, File docFile, String classpath)", "diff": ["-  private void _javadocDocumentWorker(File destDirFile, File docFile,", "-//                                      OpenDefinitionsDocument document,", "-//                                      FileSaveSelector saver,", "-                                      String classpath)", "-  {", "-    if (!_ensureValidToolsJar()) {", "-      return;", "-    }", "+  private void _javadocDocumentWorker(File destDirFile, File docFile, String classpath) {", "+    if (!_ensureValidToolsJar()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c67f1aae7a2c4e4180240d03ec62aa7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void prev()", "signatureAfterChange": "   public void prev()", "diff": ["-   */", "-  public void prev(){", "-    if(_docs.size() > 0){", "+  /** Sets the current document to be the previous document in the list. */", "+  public void prev() {", "+    if (_docs.size() > 0) {", "-      if(_current < 0){", "-        _current = _docs.size()-1;", "-      }", "+      if (_current < 0) _current = _docs.size() - 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7e204c773272897287f21fae81d1b5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 436, "methodNumberAfterChange": 436, "signatureBeforeChange": "\r \r   public void forGreaterThanExpression(GreaterThanExpression that)", "signatureAfterChange": "    public void forGreaterThanExpression(GreaterThanExpression that)", "diff": ["-\r", "-  public void forGreaterThanExpression(GreaterThanExpression that) {\r", "-    forGreaterThanExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forGreaterThanExpressionOnly(that);\r", "-  }\r", "+", "+  public void forGreaterThanExpression(GreaterThanExpression that) {", "+    forGreaterThanExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forGreaterThanExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c853cb0aaaa326afbd38091dd4792804", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 88, "signatureBeforeChange": "   public String createUniqueMethodName(String methodName)", "signatureAfterChange": "   public String createUniqueMethodName(String methodName)", "diff": ["-    int counter = 0;  //note: it is possible that the counter could wrap around and this could run infinitely, but that is very unlikely.", "+    int counter = 0;  // Note: loop tests for counter overflow, but memory would be exhausted much earlier", "-      newName = methodName + counter; counter++;", "+      newName = methodName + counter; ", "+      counter++;", "-    if (counter == -1) {throw new RuntimeException(\"Internal Program Error: Unable to rename method \" + methodName + \".  All possible names were taken.  Please report this bug.\");}", "+    if (counter == -1) throw ", "+      new RuntimeException(\"Internal Program Error: Unable to rename method \" + methodName ", "+                             + \".  All possible names were taken.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c855ee879bb06b9d293f729533228a6d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "commitAfterChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 453, "signatureBeforeChange": "      private boolean showCleanWarning()", "signatureAfterChange": "      private boolean showCleanWarning()", "diff": ["-      try {", "-        buildDirTxt = _model.getBuildDirectory().getCanonicalPath();", "-      }", "-      catch (Exception e) {", "-        buildDirTxt = _model.getBuildDirectory().getPath();", "-      }", "+      try { buildDirTxt = _model.getBuildDirectory().getCanonicalPath(); }", "+      catch (Exception e) { buildDirTxt = _model.getBuildDirectory().getPath(); }", "-          if (dialog.getCheckBoxValue()) {", "-            DrJava.getConfig().setSetting(PROMPT_BEFORE_CLEAN, Boolean.FALSE);", "-          }", "+          if (dialog.getCheckBoxValue()) DrJava.getConfig().setSetting(PROMPT_BEFORE_CLEAN, Boolean.FALSE);", "-        case JOptionPane.NO_OPTION:", "-          return false;", "-        case JOptionPane.CANCEL_OPTION:", "-          return false;", "-        case JOptionPane.CLOSED_OPTION:", "-          return false;", "-        default:", "-          throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+        case JOptionPane.NO_OPTION:      return false;", "+        case JOptionPane.CANCEL_OPTION:  return false;", "+        case JOptionPane.CLOSED_OPTION:  return false;", "+        default:  throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8c28214a1244efbf6753e1c9b5171be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 209, "signatureBeforeChange": "      private void _saveProjectAs()", "signatureAfterChange": "      private void _saveProjectAs()", "diff": ["-    ", "-      if(!file.exists() || _verifyOverwrite()) {", "+      if (!file.exists() || _verifyOverwrite()) {", "-          else {", "-            _openProjectHelper(new File(file.getCanonicalPath() + \".pjt\"));", "-          }", "+          else _openProjectHelper(new File(file.getCanonicalPath() + \".pjt\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c90713bc34e5e1f3099692e7493ec0f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AboutDialog.java", "commitBeforeChange": "7933cc364884763a44a085994870596faa04b316", "commitAfterChange": "b978cac1d85997e83464382e4a499c19d736223c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void buildGUI(Container cp)", "signatureAfterChange": "    public void buildGUI(Container cp)", "diff": ["-      drjava.setBorder(new CompoundBorder(new EmptyBorder(5,5,5,5),", "-                                          drjava.getBorder()));", "+      drjava.setBorder(new CompoundBorder(new EmptyBorder(5,5,5,5), drjava.getBorder()));", "-        public void mousePressed(MouseEvent e) {", "-        }        ", "-        public void mouseReleased(MouseEvent e) {", "-        }        ", "-        public void mouseEntered(MouseEvent e) {", "-        }        ", "-        public void mouseExited(MouseEvent e) {", "-        }        ", "+        public void mousePressed(MouseEvent e) { }        ", "+        public void mouseReleased(MouseEvent e) { }        ", "+        public void mouseEntered(MouseEvent e) { }        ", "+        public void mouseExited(MouseEvent e) { }        ", "-      djPanel.setBorder(new CompoundBorder(new EmptyBorder(5,5,5,5),", "-                                           new EtchedBorder()));", "+      djPanel.setBorder(new CompoundBorder(new EmptyBorder(5,5,5,5), new EtchedBorder()));", "-    if (LICENSE != null) {", "-      addTab(tabs,\"DrJava License\",createTextScroller(LICENSE));", "-    }", "+    if (LICENSE != null) addTab(tabs,\"DrJava License\",createTextScroller(LICENSE));", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9136b0c123296f1cccc3e18ed30c746", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputModel.java", "commitBeforeChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "commitAfterChange": "f3b30de075946ab18141ef0ec7abdb9f0f10037b", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void setList(T... items)", "signatureAfterChange": "   public void setList(T... items)", "diff": ["-   */", "+    */", "-    for(T s: items) {", "-      _items.add(s);", "-    }", "+    for(T s: items) _items.add(s);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca67b48b7bac081d38ba2622da51a1c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public void indentLines(int selStart, int selEnd,                           int reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["-  public void indentLines(int selStart, int selEnd,", "-                          int reason, ProgressMonitor pm)", "+  public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)", "-      else {", "-        _indentBlock(selStart, selEnd, reason, pm);", "-      }", "+      else _indentBlock(selStart, selEnd, reason, pm);", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caaa0efe8fbd69ed1e01e8d2d8bce282", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean addVar(VariableData var)", "signatureAfterChange": "   public boolean addVar(VariableData var)", "diff": ["-   */", "+    */", "-    else {", "-      return false;", "-    }", "+    else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caaccb34d86e9db8c95c655d7f8e37ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "   public void forSourceFile(SourceFile that)", "signatureAfterChange": "   public void forSourceFile(SourceFile that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cab8365784929932df0ed715fabc4781", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected synchronized void _ensureReady() throws DebugException", "signatureAfterChange": "   protected synchronized void _ensureReady() throws DebugException", "diff": ["-    if (!isReady()) {", "-      throw new IllegalStateException(\"Debugger is not active.\");", "-    }", "+    if (!isReady()) throw new IllegalStateException(\"Debugger is not active.\");", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb9a8ca1f8e9016528215570b347c04d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "   protected static void createAccessors(SymbolData sd, File file)", "signatureAfterChange": "   protected static void createAccessors(SymbolData sd, File file)", "diff": ["-    if (LanguageLevelConverter.isAdvancedFile(file)) {return;}", "+    if (LanguageLevelConverter.isAdvancedFile(file)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbafddeb7be2fdeaf88e2745c23d4aad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 201, "signatureBeforeChange": "      private void _saveProjectAs()", "signatureAfterChange": "      private void _saveProjectAs()", "diff": ["-          if (file.getCanonicalPath().endsWith(\".pjt\")) {", "-            _openProjectHelper(file);", "-          }", "+          if (file.getCanonicalPath().endsWith(\".pjt\")) _openProjectHelper(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc757d47e669669f841a400d54c0ecd3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void currThreadDied()", "signatureAfterChange": "   public void currThreadDied()", "diff": ["-   */", "+  /** Called when the current thread dies. Must be executed in event thread. */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).currThreadDied();", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).currThreadDied();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce0ef2fb95b24af671cece130a81ca7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 314, "methodNumberAfterChange": 314, "signatureBeforeChange": "    public DefinitionsPane getDefPaneGivenODD(OpenDefinitionsDocument doc)", "signatureAfterChange": "    public DefinitionsPane getDefPaneGivenODD(OpenDefinitionsDocument doc)", "diff": ["-    if (scroll == null) {", "+    if (scroll == null)", "-    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cea531d422781383ff1c76da44b0fe7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 406, "methodNumberAfterChange": 406, "signatureBeforeChange": "\r \r   public void forPrimitiveType(PrimitiveType that)", "signatureAfterChange": "    public void forPrimitiveType(PrimitiveType that)", "diff": ["-\r", "-  public void forPrimitiveType(PrimitiveType that) {\r", "-    forPrimitiveTypeDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forPrimitiveTypeOnly(that);\r", "-  }\r", "+", "+  public void forPrimitiveType(PrimitiveType that) {", "+    forPrimitiveTypeDoFirst(that);", "+    if (prune(that)) return;", "+    forPrimitiveTypeOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cece1202cfe308c6b74dc2b1b8e4a5a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public synchronized void killInterpreter(boolean shouldRestart)", "signatureAfterChange": "   public synchronized void killInterpreter(boolean shouldRestart)", "diff": ["-      if (shouldRestart) {", "-        _interactionsModel.interpreterResetting();", "-      }", "+      if (shouldRestart)  _interactionsModel.interpreterResetting();", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "+    catch (RemoteException re) { _threwException(re); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf2fc2e52220350346bd0c049a1d0bf6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "       private void updateFontColor()", "signatureAfterChange": "    private void updateFontColor()", "diff": ["-  ", "-    if (CodeStatus.DEVELOPMENT) {", "+    if (CodeStatus.DEVELOPMENT)", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf442e98d9340abb04b8a87d60ba2288", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 455, "methodNumberAfterChange": 455, "signatureBeforeChange": "\r \r   public void forConditionalExpression(ConditionalExpression that)", "signatureAfterChange": "    public void forConditionalExpression(ConditionalExpression that)", "diff": ["-\r", "-  public void forConditionalExpression(ConditionalExpression that) {\r", "-    forConditionalExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCondition().visit(this);\r", "-    that.getForTrue().visit(this);\r", "-    that.getForFalse().visit(this);\r", "-    forConditionalExpressionOnly(that);\r", "-  }\r", "+", "+  public void forConditionalExpression(ConditionalExpression that) {", "+    forConditionalExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCondition().visit(this);", "+    that.getForTrue().visit(this);", "+    that.getForFalse().visit(this);", "+    forConditionalExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf6adcdb216ee3c662bacd4c792abbd4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void addDebugInterpreter(String name, String className)", "signatureAfterChange": "   public void addDebugInterpreter(String name, String className)", "diff": ["-    if (! _enabled) {", "-      return;", "-    }", "+    if (! _enabled) return;", "-    try {", "-      _interpreterJVM().addDebugInterpreter(name, className);", "-    }", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "+    try { _interpreterJVM().addDebugInterpreter(name, className); }", "+    ", "+    catch (RemoteException re) { _threwException(re); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfc48f6fb95e5b21b81407ebc5c49bbd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 579, "methodNumberAfterChange": 579, "signatureBeforeChange": "   private void _repaintLineNums()", "signatureAfterChange": "   private void _repaintLineNums()", "diff": ["-        if (view != null) {", "-          view.repaint();", "-        }", "+        if (view != null) view.repaint();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfc57e0b11f6019c4e4a2131f9e8b993", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "cbdc405e8bd4373c383ad7cbc6a9a656b65ddd52", "commitAfterChange": "2c9a67ea7f4112fa7f99743281ac144c9f56d20a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testConstructManyDocsWithoutLineNums()", "signatureAfterChange": "   public void testConstructManyDocsWithoutLineNums()", "diff": ["-    errors = new CompilerError[]", "-    { new CompilerError(files[0], \"Test error with File\", false),", "+    errors = new CompilerError[] { ", "+      new CompilerError(files[0], \"Test error with File\", false),", "-      new CompilerError(files[0], \"Test error with File\", false) };", "+      new CompilerError(files[0], \"Test error with File\", false) ", "+    };", "-    for (int i = 0; i < errors.length; i++) {", "-      copy[i] = errors[i];", "-    }", "+    for (int i = 0; i < errors.length; i++) copy[i] = errors[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0e5715d09ff2689ca99cb77d21002e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 447, "methodNumberAfterChange": 447, "signatureBeforeChange": "\r \r   public void forPositivePrefixIncrementExpression(PositivePrefixIncrementExpression that)", "signatureAfterChange": "    public void forPositivePrefixIncrementExpression(PositivePrefixIncrementExpression that)", "diff": ["-\r", "-  public void forPositivePrefixIncrementExpression(PositivePrefixIncrementExpression that) {\r", "-    forPositivePrefixIncrementExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forPositivePrefixIncrementExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPositivePrefixIncrementExpression(PositivePrefixIncrementExpression that) {", "+    forPositivePrefixIncrementExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forPositivePrefixIncrementExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d12998b28b4db5937e4bef2fbcbe9671", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "   void reassignVariableDatas(LinkedList<VariableData> l1, LinkedList<VariableData> l2)", "signatureAfterChange": "   void reassignVariableDatas(LinkedList<VariableData> l1, LinkedList<VariableData> l2)", "diff": ["-   */", "+    */", "-      if (l2.contains(l1.get(i))) {", "-        l1.get(i).gotValue();", "-      }", "+      if (l2.contains(l1.get(i))) l1.get(i).gotValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d133bbd72bfb70d70732ef70f73826ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 489, "methodNumberAfterChange": 489, "signatureBeforeChange": "\r \r   public void forEmptyExpression(EmptyExpression that)", "signatureAfterChange": "    public void forEmptyExpression(EmptyExpression that)", "diff": ["-\r", "-  public void forEmptyExpression(EmptyExpression that) {\r", "-    forEmptyExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forEmptyExpressionOnly(that);\r", "-  }\r", "+", "+  public void forEmptyExpression(EmptyExpression that) {", "+    forEmptyExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    forEmptyExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1cc94c5c1411b35589710fd738e62c8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 464, "methodNumberAfterChange": 464, "signatureBeforeChange": "\r \r   public void forStringLiteral(StringLiteral that)", "signatureAfterChange": "    public void forStringLiteral(StringLiteral that)", "diff": ["-\r", "-  public void forStringLiteral(StringLiteral that) {\r", "-    forStringLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forStringLiteralOnly(that);\r", "-  }\r", "+", "+  public void forStringLiteral(StringLiteral that) {", "+    forStringLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forStringLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2b49beb10adfb4d6faa5d32845e43c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ec06880aa408b928b2f252538b208a76154d8334", "commitAfterChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public int findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "signatureAfterChange": "   public int findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "diff": ["-        for (i = pos+1; i < text.length(); i++) {", "+        for (i = pos + 1; i < text.length(); i++) {", "-              if (text.charAt(i) == opening) {", "-                ++braceBalance;", "-              }", "+              if (text.charAt(i) == opening) ++braceBalance;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d42204ab7f13f59c229b3fe9d07b8555", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b05c72360ee1d1e3de71e0b58a923a7cf06bebf6", "commitAfterChange": "1e64dff50a32582d182c950c323629608db6f054", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   protected static boolean _isStartOfComment(String text, int pos)", "signatureAfterChange": "   protected static boolean _isStartOfComment(String text, int pos)", "diff": ["-    // throwErrorHuh();", "-    if(currChar == '/') {", "+    if (currChar == '/') {", "-        if((afterCurrChar == '/') || (afterCurrChar == '*')) {", "-          return true;", "-        }", "-      } catch (StringIndexOutOfBoundsException e) {", "-      }", "+        if ((afterCurrChar == '/') || (afterCurrChar == '*'))  return true;", "+      } catch (StringIndexOutOfBoundsException e) { }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e2b4453f170d251c142edac1b4c58f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 423, "methodNumberAfterChange": 423, "signatureBeforeChange": "\r \r   public void forRightUnsignedShiftAssignmentExpression(RightUnsignedShiftAssignmentExpression that)", "signatureAfterChange": "    public void forRightUnsignedShiftAssignmentExpression(RightUnsignedShiftAssignmentExpression that)", "diff": ["-\r", "-  public void forRightUnsignedShiftAssignmentExpression(RightUnsignedShiftAssignmentExpression that) {\r", "-    forRightUnsignedShiftAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forRightUnsignedShiftAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forRightUnsignedShiftAssignmentExpression(RightUnsignedShiftAssignmentExpression that) {", "+    forRightUnsignedShiftAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forRightUnsignedShiftAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ff15014c8404b814f477b5c6a3a995", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 472, "methodNumberAfterChange": 472, "signatureBeforeChange": "\r \r   public void forSimpleInitializedArrayInstantiation(SimpleInitializedArrayInstantiation that)", "signatureAfterChange": "    public void forSimpleInitializedArrayInstantiation(SimpleInitializedArrayInstantiation that)", "diff": ["-\r", "-  public void forSimpleInitializedArrayInstantiation(SimpleInitializedArrayInstantiation that) {\r", "-    forSimpleInitializedArrayInstantiationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    that.getInitializer().visit(this);\r", "-    forSimpleInitializedArrayInstantiationOnly(that);\r", "-  }\r", "+", "+  public void forSimpleInitializedArrayInstantiation(SimpleInitializedArrayInstantiation that) {", "+    forSimpleInitializedArrayInstantiationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    that.getInitializer().visit(this);", "+    forSimpleInitializedArrayInstantiationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d56b750c6118b3de493dbfdf14b43edd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputModel.java", "commitBeforeChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "commitAfterChange": "f3b30de075946ab18141ef0ec7abdb9f0f10037b", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   private int indexOf(ArrayList<T> l, T item)", "signatureAfterChange": "   private int indexOf(ArrayList<T> l, T item)", "diff": ["-   */", "+    */", "-      if (_strategy.equivalent(item, i, this)) {", "-        return index;", "-      }", "+      if (_strategy.equivalent(item, i, this)) return index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5739b0c8cfc3af37d5f9709702f1458", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 393, "methodNumberAfterChange": 393, "signatureBeforeChange": "\r \r   public void forThrowStatement(ThrowStatement that)", "signatureAfterChange": "    public void forThrowStatement(ThrowStatement that)", "diff": ["-\r", "-  public void forThrowStatement(ThrowStatement that) {\r", "-    forThrowStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getThrown().visit(this);\r", "-    forThrowStatementOnly(that);\r", "-  }\r", "+", "+  public void forThrowStatement(ThrowStatement that) {", "+    forThrowStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getThrown().visit(this);", "+    forThrowStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5cdb82606a5329e27eee1787c9e1ab8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public JavaInterpreter getJavaInterpreter(String name)", "signatureAfterChange": "   public JavaInterpreter getJavaInterpreter(String name)", "diff": ["-    if (interpreter instanceof JavaInterpreter) {", "-      return (JavaInterpreter) interpreter;", "-    }", "+    if (interpreter instanceof JavaInterpreter) return (JavaInterpreter) interpreter;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5f7a20e3dee185476f9301e99fa9b15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "commitAfterChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private File mkTempDir(String funnyName)", "signatureAfterChange": "   private File mkTempDir(String funnyName)", "diff": ["-   */", "+  /** Helper for testRelativeFile and testDotPaths. */", "-    // OK, we have to create a directory with a hard-coded name in the", "-    // current working directory, so we'll make it strange. If this", "-    // directory happens to exist, it'll be deleted.", "+    // OK, we have to create a directory with a hard-coded name in the current working directory, so we'll make it", "+    // strange. If this directory happens to exist, it'll be deleted.", "-    if (newDirectory.exists()) {", "-      FileOps.deleteDirectory(newDirectory);", "-    }", "+    if (newDirectory.exists()) FileOps.deleteDirectory(newDirectory);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d61c408eaa0607e1cc5b99f5005de1ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 459, "methodNumberAfterChange": 459, "signatureBeforeChange": "\r \r   public void forLongLiteral(LongLiteral that)", "signatureAfterChange": "    public void forLongLiteral(LongLiteral that)", "diff": ["-\r", "-  public void forLongLiteral(LongLiteral that) {\r", "-    forLongLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forLongLiteralOnly(that);\r", "-  }\r", "+", "+  public void forLongLiteral(LongLiteral that) {", "+    forLongLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forLongLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d72b4baa119ad042fd611496be181e3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 226, "methodNumberAfterChange": 230, "signatureBeforeChange": "     public Breakpoint getBreakpointAt( int offset)", "signatureAfterChange": "     public Breakpoint getBreakpointAt(int offset)", "diff": ["-    public Breakpoint getBreakpointAt( int offset) {", "+    public Breakpoint getBreakpointAt(int offset) {", "-      for (int i =0; i<_breakpoints.size(); i++) {", "+      for (int i = 0; i < _breakpoints.size(); i++) {", "-        if (offset >= bp.getStartOffset() && offset <= bp.getEndOffset()) {", "-          return bp;", "-        }", "+        if (offset >= bp.getStartOffset() && offset <= bp.getEndOffset()) return bp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d807f14f967598de2750df26b7d8768d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 438, "methodNumberAfterChange": 438, "signatureBeforeChange": "\r \r   public void forLeftShiftExpression(LeftShiftExpression that)", "signatureAfterChange": "    public void forLeftShiftExpression(LeftShiftExpression that)", "diff": ["-\r", "-  public void forLeftShiftExpression(LeftShiftExpression that) {\r", "-    forLeftShiftExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forLeftShiftExpressionOnly(that);\r", "-  }\r", "+", "+  public void forLeftShiftExpression(LeftShiftExpression that) {", "+    forLeftShiftExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forLeftShiftExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d819115ef1ecc21f6729ef33d0cf25eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BreakpointsPanel.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected void goToRegion()", "signatureAfterChange": "   protected void goToRegion()", "diff": ["-    if (bps.size() == 1) {", "-      _debugger.scrollToSource(bps.get(0));", "-    }", "+    if (bps.size() == 1) _debugger.scrollToSource(bps.get(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82dfb52ff113a043e649290e3ef46d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 431, "methodNumberAfterChange": 431, "signatureBeforeChange": "\r \r   public void forBitwiseAndExpression(BitwiseAndExpression that)", "signatureAfterChange": "    public void forBitwiseAndExpression(BitwiseAndExpression that)", "diff": ["-\r", "-  public void forBitwiseAndExpression(BitwiseAndExpression that) {\r", "-    forBitwiseAndExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forBitwiseAndExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseAndExpression(BitwiseAndExpression that) {", "+    forBitwiseAndExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forBitwiseAndExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86995f5ad314889cf7344faa5562832", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void reset()", "signatureAfterChange": "   public void reset()", "diff": ["-    } else {", "-      _numErrors = 0;", "-    }", "+    } ", "+    else _numErrors = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9628acd58a113cff203563ad4b7605d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 203, "signatureBeforeChange": "     public void setFile(File file)", "signatureAfterChange": "     public void setFile(File file)", "diff": ["-     */", "+    /** Sets the file for this openDefinitionsDocument. */", "-      if (_file != null) { _timestamp = _file.lastModified(); }", "+      if (_file != null) _timestamp = _file.lastModified();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e74f5e87a52c165f47df662355c59e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   private void _ensureNotEmpty()", "signatureAfterChange": "   private void _ensureNotEmpty()", "diff": ["-    if ((!_isClosingAllDocs) &&", "-        (getDefinitionsDocumentsSize() == 0)) {", "-      super.newFile();", "-    }", "+    if ((!_isClosingAllDocs) && (getDefinitionsDocumentsSize() == 0)) super.newFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dad533bf7ca90eb4ac70bae3d7b9bb0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 453, "methodNumberAfterChange": 453, "signatureBeforeChange": "\r \r   public void forBitwiseNotExpression(BitwiseNotExpression that)", "signatureAfterChange": "    public void forBitwiseNotExpression(BitwiseNotExpression that)", "diff": ["-\r", "-  public void forBitwiseNotExpression(BitwiseNotExpression that) {\r", "-    forBitwiseNotExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forBitwiseNotExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseNotExpression(BitwiseNotExpression that) {", "+    forBitwiseNotExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forBitwiseNotExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dadc72f626589aabc31cf65e2458cd7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsEventNotifier.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void interactionStarted()", "signatureAfterChange": "   public void interactionStarted()", "diff": ["-   */", "+  /** Called after an interaction is started by the GlobalModel. */", "-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).interactionStarted();", "-      }", "+      for (int i = 0; i < size; i++)  _listeners.get(i).interactionStarted();", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db128fc72bd60ee2de4f2b817d7cced7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 229, "signatureBeforeChange": "     public void removeFromDebugger()", "signatureAfterChange": "     public void removeFromDebugger()", "diff": ["-      else {", "-        clearBreakpoints();", "-      }", "+      else clearBreakpoints();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc42118e37f67d0f4c3bf0d668fea670", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 481, "methodNumberAfterChange": 481, "signatureBeforeChange": "\r \r   public void forComplexMethodInvocation(ComplexMethodInvocation that)", "signatureAfterChange": "    public void forComplexMethodInvocation(ComplexMethodInvocation that)", "diff": ["-\r", "-  public void forComplexMethodInvocation(ComplexMethodInvocation that) {\r", "-    forComplexMethodInvocationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getName().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    forComplexMethodInvocationOnly(that);\r", "-  }\r", "+", "+  public void forComplexMethodInvocation(ComplexMethodInvocation that) {", "+    forComplexMethodInvocationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getName().visit(this);", "+    that.getArguments().visit(this);", "+    forComplexMethodInvocationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcd947b383833332a8bf15d5b27a4cde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "signatureAfterChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "diff": ["-        else {", "-          javaFileSet.add(canonicalFile);", "-        }", "+        else javaFileSet.add(canonicalFile);", "-      if (compilerErrorsArray.length == 0)", "-        compilerErrorsArray = compiler.compile(sourceRoots, files);", "+      if (compilerErrorsArray.length == 0) compilerErrorsArray = compiler.compile(sourceRoots, files);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6673f21e5422857526e4bd28bcfd89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 385, "methodNumberAfterChange": 385, "signatureBeforeChange": "\r \r   public void forDoStatement(DoStatement that)", "signatureAfterChange": "    public void forDoStatement(DoStatement that)", "diff": ["-\r", "-  public void forDoStatement(DoStatement that) {\r", "-    forDoStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCode().visit(this);\r", "-    that.getCondition().visit(this);\r", "-    forDoStatementOnly(that);\r", "-  }\r", "+", "+  public void forDoStatement(DoStatement that) {", "+    forDoStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCode().visit(this);", "+    that.getCondition().visit(this);", "+    forDoStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de191ba06ead04d3c76ab495549c0f98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRuleWithTrace.java", "commitBeforeChange": "e2dfab60fe06b4a75e9a9d17c0a9c2d622def7c7", "commitAfterChange": "9ee7f82d7f7234787f3748460b46ad8c5d1fc967", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, int pos, int reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, int pos, int reason)", "diff": ["-    if (oldPos > doc.getLength()) {", "-      oldPos = doc.getLength();", "-    }", "+    if (oldPos > doc.getLength()) oldPos = doc.getLength();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de75ba7ce191debc4d847612d2abbab8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 204, "methodNumberAfterChange": 204, "signatureBeforeChange": "   private DocumentInfoGetter _makeInfoGetter(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   private DocumentInfoGetter _makeInfoGetter(final OpenDefinitionsDocument doc)", "diff": ["-    if (s == null) {", "-      s = _createDefScrollPane(doc);", "-    }", "+    if (s == null) s = _createDefScrollPane(doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dee2ff5e88fb222f0876d2cb1a764129", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 463, "methodNumberAfterChange": 463, "signatureBeforeChange": "\r \r   public void forCharLiteral(CharLiteral that)", "signatureAfterChange": "    public void forCharLiteral(CharLiteral that)", "diff": ["-\r", "-  public void forCharLiteral(CharLiteral that) {\r", "-    forCharLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forCharLiteralOnly(that);\r", "-  }\r", "+", "+  public void forCharLiteral(CharLiteral that) {", "+    forCharLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forCharLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc95d3ed54ed8c9a9cdd3ff9172af84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 448, "methodNumberAfterChange": 448, "signatureBeforeChange": "\r \r   public void forNegativePrefixIncrementExpression(NegativePrefixIncrementExpression that)", "signatureAfterChange": "    public void forNegativePrefixIncrementExpression(NegativePrefixIncrementExpression that)", "diff": ["-\r", "-  public void forNegativePrefixIncrementExpression(NegativePrefixIncrementExpression that) {\r", "-    forNegativePrefixIncrementExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forNegativePrefixIncrementExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNegativePrefixIncrementExpression(NegativePrefixIncrementExpression that) {", "+    forNegativePrefixIncrementExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forNegativePrefixIncrementExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e02e07413bead47d1744210841e1370a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BrowserHistoryPanel.java", "commitBeforeChange": "b9f87cd074abdafacdb2719b29e0803fd0f81cf0", "commitAfterChange": "04d7824a20eb03ad17793ba3198be21442313bdc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   protected RegionListUserObj<BrowserDocumentRegion> getUserObjForRegion(BrowserDocumentRegion r)", "signatureAfterChange": "   protected RegionListUserObj<BrowserDocumentRegion> getUserObjForRegion(BrowserDocumentRegion r)", "diff": ["-      if (userObj.region()==r) {", "-        return userObj;", "-      }", "+      if (userObj.region() == r) return userObj;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0c8a4701bc720d96255a2beadb3d2f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/History.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void setEditedEntry(String entry)", "signatureAfterChange": "   public void setEditedEntry(String entry)", "diff": ["-    if (!entry.equals(getCurrent())) {", "-      _editedEntries.put(new Integer(_cursor), entry);", "-    }", "+    if (!entry.equals(getCurrent())) _editedEntries.put(new Integer(_cursor), entry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f3bccacd9389816b01600409698f16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyAdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r   public void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-   */\r", "-  public void forConcreteMethodDef(ConcreteMethodDef that) {\r", "-    forConcreteMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    \r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    \r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-    that.getBody().visit(new BodyBodyAdvancedVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));\r", "-  }\r", "+   */", "+  public void forConcreteMethodDef(ConcreteMethodDef that) {", "+    forConcreteMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    ", "+    MethodData md = createMethodData(that, _symbolData);", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    ", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+                         that);", "+    }", "+    else {", "+      _symbolData.addMethod(md);", "+    }", "+    that.getBody().visit(new BodyBodyAdvancedVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10ecb3b6bfb9dfdbc6741c223114452", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/GroupNode.java", "commitBeforeChange": "1502cfa27280e1c7a53d8bd6dee788f17c33dc23", "commitAfterChange": "f3485582e7c13f9ae164de3e45280fa4f5c05b3e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public GroupNode(String name, INavigatorItemFilter filter)", "signatureAfterChange": "   public GroupNode(String name, INavigatorItemFilter filter)", "diff": ["-  public GroupNode(String name, INavigatorItemFilter filter){", "+  public GroupNode(String name, INavigatorItemFilter filter) {", "-    if (filter == null) {", "-      throw new IllegalArgumentException(\"parameter 'filter' must not be null\");", "-    }", "+    if (filter == null) throw new IllegalArgumentException(\"parameter 'filter' must not be null\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e218e390cf6d1f750df1361e2a0f5980", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 724, "methodNumberAfterChange": 725, "signatureBeforeChange": "   private static java.util.List<File> textURIListToFileList(String data)", "signatureAfterChange": "   private static java.util.List<File> textURIListToFileList(String data)", "diff": ["-      if (s.startsWith(\"#\")) {", "-        // the line is a comment (as per the RFC 2483)", "-        continue;", "-      }", "+      if (s.startsWith(\"#\")) continue; // the line is a comment (as per the RFC 2483)", "-      catch (java.net.URISyntaxException e) {", "-        // malformed URI", "-      }", "-      catch (IllegalArgumentException e) {", "-        // the URI is not a valid 'file:' URI", "-      }", "+      catch (java.net.URISyntaxException e) { /* malformed URI*/ }", "+      catch (IllegalArgumentException e) { /* the URI is not a valid 'file:' URI */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2fe312c9f3e5dbc545c5a151b21fcb7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void forInterfaceDef(InterfaceDef that)", "signatureAfterChange": "   public void forInterfaceDef(InterfaceDef that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e325a0de59bedfb566256e5dacf36e0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 430, "methodNumberAfterChange": 430, "signatureBeforeChange": "\r \r   public void forBitwiseXorExpression(BitwiseXorExpression that)", "signatureAfterChange": "    public void forBitwiseXorExpression(BitwiseXorExpression that)", "diff": ["-\r", "-  public void forBitwiseXorExpression(BitwiseXorExpression that) {\r", "-    forBitwiseXorExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forBitwiseXorExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseXorExpression(BitwiseXorExpression that) {", "+    forBitwiseXorExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forBitwiseXorExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e41e0f9b41cdca85ba4b845ba7f629ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DrJavaTestCaseClassLoader.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "        public URL getResource(String name)", "signatureAfterChange": "          public URL getResource(String name)", "diff": ["-   ", "-   public URL getResource(String name){", "-     URL ret = getParent().getResource(name);", "-     if(ret == null){", "-       ret = super.getResource(name);", "-     }", "-     return ret;", "-   }", "+    ", "+    public URL getResource(String name){", "+      URL ret = getParent().getResource(name);", "+      if (ret == null) ret = super.getResource(name);", "+      return ret;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e43edaebfa27ae4068e5f282575375b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 392, "methodNumberAfterChange": 392, "signatureBeforeChange": "\r \r   public void forValueReturnStatement(ValueReturnStatement that)", "signatureAfterChange": "    public void forValueReturnStatement(ValueReturnStatement that)", "diff": ["-\r", "-  public void forValueReturnStatement(ValueReturnStatement that) {\r", "-    forValueReturnStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forValueReturnStatementOnly(that);\r", "-  }\r", "+", "+  public void forValueReturnStatement(ValueReturnStatement that) {", "+    forValueReturnStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forValueReturnStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4a9ec50faf81d3aa5af758141422bfe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "   public OpenDefinitionsDocument getODDForDocument(Document doc)", "signatureAfterChange": "   public OpenDefinitionsDocument getODDForDocument(Document doc)", "diff": ["-     * this function needs to be phased out altogether.", "+     * This function needs to be phased out altogether.", "-    if(doc instanceof OpenDefinitionsDocument){", "-      return (OpenDefinitionsDocument)doc;", "-    }", "+    if (doc instanceof OpenDefinitionsDocument) return (OpenDefinitionsDocument)doc;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5408449d7fb21e4e6bed4cf753f3e79", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 416, "methodNumberAfterChange": 416, "signatureBeforeChange": "\r \r   public void forPlusAssignmentExpression(PlusAssignmentExpression that)", "signatureAfterChange": "    public void forPlusAssignmentExpression(PlusAssignmentExpression that)", "diff": ["-\r", "-  public void forPlusAssignmentExpression(PlusAssignmentExpression that) {\r", "-    forPlusAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forPlusAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPlusAssignmentExpression(PlusAssignmentExpression that) {", "+    forPlusAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forPlusAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e57ac3750445970cae16468014f28fc6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 358, "methodNumberAfterChange": 358, "signatureBeforeChange": "     public void fileOpened(final OpenDefinitionsDocument doc)", "signatureAfterChange": "     public void fileOpened(final OpenDefinitionsDocument doc)", "diff": ["-            public void run(){", "-              _fileOpened(doc);", "-            }", "+            public void run() { _fileOpened(doc); }", "-        catch(InterruptedException ex) {", "-          /** we don't expect to be interrupted */", "-          throw new UnexpectedException(ex);", "-        }", "-        catch(InvocationTargetException ex2) {", "-          /** we don't expect _fileOpened() to throw any exceptions */", "-          throw new UnexpectedException(ex2);", "-        }", "+        catch(InterruptedException ex) { throw new UnexpectedException(ex); }", "+        catch(InvocationTargetException ex2) { throw new UnexpectedException(ex2); }", "-      else {", "-        _fileOpened(doc);", "-      }", "+      else _fileOpened(doc);", "-      catch(FileMovedException fme) {", "-        //do nothing", "-      }", "+      catch(FileMovedException fme) { /* do nothing */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e642b0167fbc8d1a08b09e62dbff2c5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public void forArrayType(ArrayType that)", "signatureAfterChange": "     public void forArrayType(ArrayType that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6dc7355f7ce1107990cc80f4895d9a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 390, "methodNumberAfterChange": 390, "signatureBeforeChange": "\r \r   public void forUnlabeledContinueStatement(UnlabeledContinueStatement that)", "signatureAfterChange": "    public void forUnlabeledContinueStatement(UnlabeledContinueStatement that)", "diff": ["-\r", "-  public void forUnlabeledContinueStatement(UnlabeledContinueStatement that) {\r", "-    forUnlabeledContinueStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forUnlabeledContinueStatementOnly(that);\r", "-  }\r", "+", "+  public void forUnlabeledContinueStatement(UnlabeledContinueStatement that) {", "+    forUnlabeledContinueStatementDoFirst(that);", "+    if (prune(that)) return;", "+    forUnlabeledContinueStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e92da83b32be3570063ef9da5cfd55cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 433, "signatureBeforeChange": "\r \r   public void forNotEqualExpression(NotEqualExpression that)", "signatureAfterChange": "    public void forNotEqualExpression(NotEqualExpression that)", "diff": ["-\r", "-  public void forNotEqualExpression(NotEqualExpression that) {\r", "-    forNotEqualExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forNotEqualExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNotEqualExpression(NotEqualExpression that) {", "+    forNotEqualExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forNotEqualExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9aed5cba04c91eaef91729bbc740406", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 490, "methodNumberAfterChange": 490, "signatureBeforeChange": "\r \r   public void forBracedBody(BracedBody that)", "signatureAfterChange": "    public void forBracedBody(BracedBody that)", "diff": ["-\r", "-  public void forBracedBody(BracedBody that) {\r", "-    forBracedBodyDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getStatements().length; i++) that.getStatements()[i].visit(this);\r", "-    forBracedBodyOnly(that);\r", "-  }\r", "+", "+  public void forBracedBody(BracedBody that) {", "+    forBracedBodyDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getStatements().length; i++) that.getStatements()[i].visit(this);", "+    forBracedBodyOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea60462c98a021a6fe58cbe1a9216e97", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a33beea01f3d2263a618fa7843cb52ddfdaa4ccf", "commitAfterChange": "2b371f46cbe5fba581bc2ddd38ce1509ce9a6d65", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   protected void _clearCache(int offset)", "signatureAfterChange": "   protected void _clearCache(int offset)", "diff": ["-//    synchronized(_reduced) {", "-      ", "+      // The Integer[] copy of the key set is required to avoid ConcurrentModifiationExceptions.  Ugh!", "-        for (Query query: _offsetToQueries.get(i)) {", "-          _queryCache.remove(query);  // remove query entry from cache", "-        }", "+        for (Query query: _offsetToQueries.get(i)) _queryCache.remove(query);  // remove query entry from cache", "-//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebf95191e6e611d7ac672487ac53654e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 413, "methodNumberAfterChange": 413, "signatureBeforeChange": "          public void projectBuildDirChanged()", "signatureAfterChange": "          public void projectBuildDirChanged()", "diff": ["-      if(_model.getBuildDirectory() != null){", "+      if (_model.getBuildDirectory() != null) {", "-      }else{", "-        _cleanAction.setEnabled(false);", "+      else _cleanAction.setEnabled(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edc588e7e9410ff601ab7a827bc03d37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 364, "methodNumberAfterChange": 364, "signatureBeforeChange": "\r   public void forSourceFile(SourceFile that)", "signatureAfterChange": "   public void forSourceFile(SourceFile that)", "diff": ["-  /* Implementation of JExpressionIFVisitor_void methods to implement depth-first traversal. */\r", "-  public void forSourceFile(SourceFile that) {\r", "-    forSourceFileDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getPackageStatements().length; i++) that.getPackageStatements()[i].visit(this);\r", "-    for (int i = 0; i < that.getImportStatements().length; i++) that.getImportStatements()[i].visit(this);\r", "-    for (int i = 0; i < that.getTypes().length; i++) that.getTypes()[i].visit(this);\r", "-    forSourceFileOnly(that);\r", "-  }\r", "+  /* Implementation of JExpressionIFVisitor_void methods to implement depth-first traversal. */", "+  public void forSourceFile(SourceFile that) {", "+    forSourceFileDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getPackageStatements().length; i++) that.getPackageStatements()[i].visit(this);", "+    for (int i = 0; i < that.getImportStatements().length; i++) that.getImportStatements()[i].visit(this);", "+    for (int i = 0; i < that.getTypes().length; i++) that.getTypes()[i].visit(this);", "+    forSourceFileOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee07f5ee91ebdaa4c9406384942b3510", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "149feb3f2af1920c19f6930f765f209a93ed7ca6", "commitAfterChange": "fe008ef5062ac4e4b569352517b1df11133d4fdd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void setActiveCompiler(CompilerInterface compiler)", "signatureAfterChange": "   public void setActiveCompiler(CompilerInterface compiler)", "diff": ["-    else {", "-      _activeCompiler = compiler;", "-    }", "+    else _activeCompiler = compiler;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eea95a12dae1b7bf9d7169861118d442", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 358, "methodNumberAfterChange": 355, "signatureBeforeChange": "     public void fileOpened(final OpenDefinitionsDocument doc)", "signatureAfterChange": "     public void fileOpened(final OpenDefinitionsDocument doc)", "diff": ["-        if(! _model.isProjectFile(f) && _model.isInProjectPath(doc)) {", "+        if (! _model.isProjectFile(f) && _model.isInProjectPath(doc))", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efd3c0c24c59e5ff05cb1c21b2089d01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "14370880ba431a91577f4a6da91962f3187c5d5d", "commitAfterChange": "5d8a3bdb2b4d5525535575f357c7961c2851e09a", "methodNumberBeforeChange": 435, "methodNumberAfterChange": 435, "signatureBeforeChange": "   private DocumentInfoGetter _makeInfoGetter(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   private DocumentInfoGetter _makeInfoGetter(final OpenDefinitionsDocument doc)", "diff": ["-    if (s == null) {", "-      s = _createDefScrollPane(doc);", "-    }", "+    if (s == null) s = _createDefScrollPane(doc);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1088a723b43bce04a2b1841f5765d0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "   protected static void writeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, String valueHashCodeName)", "signatureAfterChange": "   protected static void writeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, String valueHashCodeName)", "diff": ["-    if (hashCode == null) { return; }", "+    if (hashCode == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f11a79833cc9d062f72605b0a71d4ddb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 487, "methodNumberAfterChange": 487, "signatureBeforeChange": "\r \r   public void forArrayAccess(ArrayAccess that)", "signatureAfterChange": "    public void forArrayAccess(ArrayAccess that)", "diff": ["-\r", "-  public void forArrayAccess(ArrayAccess that) {\r", "-    forArrayAccessDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getArray().visit(this);\r", "-    that.getIndex().visit(this);\r", "-    forArrayAccessOnly(that);\r", "-  }\r", "+", "+  public void forArrayAccess(ArrayAccess that) {", "+    forArrayAccessDoFirst(that);", "+    if (prune(that)) return;", "+    that.getArray().visit(this);", "+    that.getIndex().visit(this);", "+    forArrayAccessOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f21e2be7a930159c7d368afaf408b6c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "   protected static void writeToString(SymbolData sd, int baseIndent, String valueToStringName)", "signatureAfterChange": "   protected static void writeToString(SymbolData sd, int baseIndent, String valueToStringName)", "diff": ["-    if (toString == null) { return; }", "+    if (toString == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f22a0dfb862812eded5f918f5772f224", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void forClassDef(ClassDef that)", "signatureAfterChange": "   public void forClassDef(ClassDef that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f23a80c08c1ab33070fc3731f5e58c0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 210, "signatureBeforeChange": "      void _saveProjectHelper(File file)", "signatureAfterChange": "      void _saveProjectHelper(File file)", "diff": ["-      if (file.getName().indexOf(\".\") == -1){", "-        file =  new File (file.getAbsolutePath() + \".pjt\");", "-      }", "+      if (file.getName().indexOf(\".\") == -1) file =  new File (file.getAbsolutePath() + \".pjt\");", "-//      if(!(_model.getDocumentNavigator() instanceof JTreeSortNavigator)){", "+//      if (!(_model.getDocumentNavigator() instanceof JTreeSortNavigator)) {", "-    catch(IOException ioe) {", "-      _showIOError(ioe);", "-    }", "+    catch(IOException ioe) { _showIOError(ioe); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2e81f407a35755ab69953251615489f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 434, "methodNumberAfterChange": 434, "signatureBeforeChange": "\r \r   public void forLessThanExpression(LessThanExpression that)", "signatureAfterChange": "    public void forLessThanExpression(LessThanExpression that)", "diff": ["-\r", "-  public void forLessThanExpression(LessThanExpression that) {\r", "-    forLessThanExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forLessThanExpressionOnly(that);\r", "-  }\r", "+", "+  public void forLessThanExpression(LessThanExpression that) {", "+    forLessThanExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forLessThanExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f37721a8654bfc460c6de40a905cc229", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": "   private SymbolData _getSymbolData_FromCurrFile(String qualifiedClassName, SourceInfo si, boolean resolve)", "signatureAfterChange": "   private SymbolData _getSymbolData_FromCurrFile(String qualifiedClassName, SourceInfo si, boolean resolve)", "diff": ["-   */", "+    */", "-    else {", "-      return sd;", "-    }", "+    else return sd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f395bdb503b566dc06fc22d7a67dec58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "149feb3f2af1920c19f6930f765f209a93ed7ca6", "commitAfterChange": "fe008ef5062ac4e4b569352517b1df11133d4fdd", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 49, "signatureBeforeChange": "   public int getLineFirstCharPos(int pos) throws BadLocationException", "signatureAfterChange": "   public int getLineFirstCharPos(int pos) throws BadLocationException", "diff": ["-    if (cached != null) {", "-      return cached.intValue();", "-    }", "+    if (cached != null)  return cached.intValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3dfbd2a9c9691a5e7b986f100516a59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 394, "methodNumberAfterChange": 394, "signatureBeforeChange": "\r \r   public void forSynchronizedStatement(SynchronizedStatement that)", "signatureAfterChange": "    public void forSynchronizedStatement(SynchronizedStatement that)", "diff": ["-\r", "-  public void forSynchronizedStatement(SynchronizedStatement that) {\r", "-    forSynchronizedStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLockExpr().visit(this);\r", "-    that.getBlock().visit(this);\r", "-    forSynchronizedStatementOnly(that);\r", "-  }\r", "+", "+  public void forSynchronizedStatement(SynchronizedStatement that) {", "+    forSynchronizedStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLockExpr().visit(this);", "+    that.getBlock().visit(this);", "+    forSynchronizedStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4570d4f621b6208726f1ec33ea75d72", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void endLastCompoundEdit()", "signatureAfterChange": "   public void endLastCompoundEdit()", "diff": ["-    if (_keys.size()==0) {", "-      return;//NOTE: This can happen if for example uncomment lines does not modify any text: throw new IllegalStateException(\"There should currently be an open compound edit.\");", "-    }", "+    if (_keys.size() == 0) return;", "+    // NOTE: The preceding can happen if for example uncomment lines does not modify any text.", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5c4f4d65677ec5e505849240165909d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "    void getDistToIndentNewline(IndentInfo braceInfo)", "signatureAfterChange": "    void getDistToIndentNewline(IndentInfo braceInfo)", "diff": ["-    if (braceInfo.distToBrace == -1 || copyCursor.atStart()) {", "+    if (braceInfo.distToBrace == -1 || copyCursor.atStart())", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5df190ee8ff9e9defaa414f66b637e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/TokenList.java", "commitBeforeChange": "75e37fee0d4b160f4d0f1fc58a049ca677edffbc", "commitAfterChange": "a1a11647d4dd38f0cbbb37dcb8ec06139897420a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void delete(int count)", "signatureAfterChange": "     public void delete(int count)", "diff": ["-      if (count == 0) {", "-        return;", "-      }", "+      if (count == 0) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f770a20d0e8c3420a57bf3567ede5d7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/Stutter.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    ReducedModelState update(TokenList.Iterator copyCursor)", "signatureAfterChange": "    ReducedModelState update(TokenList.Iterator copyCursor)", "diff": ["-    if (copyCursor.atStart()) {", "-      copyCursor.next();", "-    }", "+    if (copyCursor.atStart())  copyCursor.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7b929fd6c50ccfd5cc1f139f0da82de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public synchronized void shutdown()", "signatureAfterChange": "   public synchronized void shutdown()", "diff": ["-    if (!isReady()) {", "-      throw new IllegalStateException(\"Cannot shut down if debugger is not active.\");", "-    }", "+    if (!isReady()) throw new IllegalStateException(\"Cannot shut down if debugger is not active.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7edc8291ad66355c4347cfc7109fde7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String name)", "signatureAfterChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String name)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f886ee4c48dbbacd7ddf00d373a19ae1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 407, "methodNumberAfterChange": 407, "signatureBeforeChange": "\r \r   public void forArrayType(ArrayType that)", "signatureAfterChange": "    public void forArrayType(ArrayType that)", "diff": ["-\r", "-  public void forArrayType(ArrayType that) {\r", "-    forArrayTypeDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getElementType().visit(this);\r", "-    forArrayTypeOnly(that);\r", "-  }\r", "+", "+  public void forArrayType(ArrayType that) {", "+    forArrayTypeDoFirst(that);", "+    if (prune(that)) return;", "+    that.getElementType().visit(this);", "+    forArrayTypeOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f0f2f6693126ab84457f33c6a8b5ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public void simpleAnonymousClassInstantiationHelper(SimpleAnonymousClassInstantiation that, Data data)", "signatureAfterChange": "   public void simpleAnonymousClassInstantiationHelper(SimpleAnonymousClassInstantiation that, Data data)", "diff": ["-   */", "+    */", "-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f915158fd408e467b619eb4b6a4cb3b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 380, "methodNumberAfterChange": 380, "signatureBeforeChange": "\r \r   public void forExpressionStatement(ExpressionStatement that)", "signatureAfterChange": "    public void forExpressionStatement(ExpressionStatement that)", "diff": ["-\r", "-  public void forExpressionStatement(ExpressionStatement that) {\r", "-    forExpressionStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getExpression().visit(this);\r", "-    forExpressionStatementOnly(that);\r", "-  }\r", "+", "+  public void forExpressionStatement(ExpressionStatement that) {", "+    forExpressionStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getExpression().visit(this);", "+    forExpressionStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa06c6793ab31a84052958b473d97228", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 454, "methodNumberAfterChange": 454, "signatureBeforeChange": "\r \r   public void forNotExpression(NotExpression that)", "signatureAfterChange": "    public void forNotExpression(NotExpression that)", "diff": ["-\r", "-  public void forNotExpression(NotExpression that) {\r", "-    forNotExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forNotExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNotExpression(NotExpression that) {", "+    forNotExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forNotExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa09cd0367f0811f1a034484175faa35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public boolean isOuterData(Data d)", "signatureAfterChange": "   public boolean isOuterData(Data d)", "diff": ["-  /**@return true if d is an outer data of this data. TODO: What if d is a library class? */", "+  /** @return true if d is an outer data of this data. TODO: What if d is a library class? */", "-    while ((outerData != null) && !LanguageLevelVisitor.isJavaLibraryClass(outerData.getName())) {", "-      if (outerData == d) {", "-        return true;", "-      }", "+    while ((outerData != null) && ! LanguageLevelVisitor.isJavaLibraryClass(outerData.getName())) {", "+      if (outerData == d) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa54ff1b83a9e7405a672cef1bc27733", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "   public boolean hasMethod(String name)", "signatureAfterChange": "   public boolean hasMethod(String name)", "diff": ["-   */", "+    */", "-      if (currMd.getName().equals(name)) {", "-        return true;", "-      }", "+      if (currMd.getName().equals(name)) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa960b147c0a30c4aca66ec6e4b3fde6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigPanel.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void resetToDefault()", "signatureAfterChange": "   public void resetToDefault()", "diff": ["-    for (int i=0; i < _components.size(); i++) {", "-      _components.get(i).resetToDefault();", "-    }", "+    for (int i=0; i < _components.size(); i++) _components.get(i).resetToDefault();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa9931b88249977f407fd183297b9050", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 415, "methodNumberAfterChange": 415, "signatureBeforeChange": "\r \r   public void forSimpleAssignmentExpression(SimpleAssignmentExpression that)", "signatureAfterChange": "    public void forSimpleAssignmentExpression(SimpleAssignmentExpression that)", "diff": ["-\r", "-  public void forSimpleAssignmentExpression(SimpleAssignmentExpression that) {\r", "-    forSimpleAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forSimpleAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forSimpleAssignmentExpression(SimpleAssignmentExpression that) {", "+    forSimpleAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forSimpleAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fad7cd22af54aa1c489e92f4603181c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "1c3947ce9682f305287b6afe6b5c5d87597bae6f", "commitAfterChange": "0acb22a1f5b2329a270795e5839a4690952252ed", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(final int curPos)", "signatureAfterChange": "   public void updateHighlight(final int curPos)", "diff": ["-    if (panel == null) {", "-      // no error panel is currently selected", "-      return;", "-    }", "+    if (panel == null) return;  // no error panel is currently selected", "+    ", "-      ", "-//      }", "-//    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fafa5ef8e77116ac6704921fa591e606", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "714a91a3f9a91ffe3e5ee9ae0bd0c977c7aa4e31", "commitAfterChange": "86cce18ff80f67b178e899650f588fd3636436b4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static File[] getToolsJarFiles(File toolsJar)", "signatureAfterChange": "   public static File[] getToolsJarFiles(File toolsJar)", "diff": ["-    try {", "-      if (javaHome.isDirectory()) { javaHomes.add(javaHome); }", "-    }", "+    try { if (javaHome.isDirectory()) { javaHomes.add(javaHome); } }", "-        if (files != null) {", "-          for (File f : files) { javaHomes.add(f); }", "-        }", "+        if (files != null) { for (File f : files) javaHomes.add(f); }", "-    try {", "-      if (toolsJar.isFile()) result.add(FileOps.getCanonicalFile(toolsJar));", "-    }", "+    try { if (toolsJar.isFile()) result.add(FileOps.getCanonicalFile(toolsJar)); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb08cf98a49dcb6bcdd6b59b5d92b1fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void reset()", "signatureAfterChange": "   public void reset()", "diff": ["-   */", "-  public void reset(){", "-    if(_current < _docs.size()){", "-      _docs.addFirst(_docs.remove(_current));", "-    }", "+  /** Moves the selected document to the front of the list. */", "+  public void reset() {", "+    if (_current < _docs.size()) _docs.addFirst(_docs.remove(_current));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbcc9fc3da7def5fddc9ac1658d87b87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 346, "methodNumberAfterChange": 343, "signatureBeforeChange": "     public void stepRequested()", "signatureAfterChange": "     public void stepRequested()", "diff": ["-     */", "+    /** Called when a step is requested on the current thread. */", "-        if (!_debugStepTimer.isRunning()) {", "-          _debugStepTimer.start();", "-        }", "+        if (!_debugStepTimer.isRunning()) _debugStepTimer.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd198fd01ae2fc255ccc7a57038ab724", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 370, "methodNumberAfterChange": 370, "signatureBeforeChange": "\r   public void forInterfaceDef(InterfaceDef that)", "signatureAfterChange": "   public void forInterfaceDef(InterfaceDef that)", "diff": ["-  }\r", "-  public void forInterfaceDef(InterfaceDef that) {\r", "-    forInterfaceDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);\r", "-    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);\r", "-    that.getBody().visit(this);\r", "-    forInterfaceDefOnly(that);\r", "-  }\r", "+  }", "+  public void forInterfaceDef(InterfaceDef that) {", "+    forInterfaceDefDoFirst(that);", "+    if (prune(that)) return;", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);", "+    that.getBody().visit(this);", "+    forInterfaceDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd3a7613a2160a86a162ed9d7d730758", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 387, "methodNumberAfterChange": 387, "signatureBeforeChange": "\r \r   public void forLabeledBreakStatement(LabeledBreakStatement that)", "signatureAfterChange": "    public void forLabeledBreakStatement(LabeledBreakStatement that)", "diff": ["-\r", "-  public void forLabeledBreakStatement(LabeledBreakStatement that) {\r", "-    forLabeledBreakStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLabel().visit(this);\r", "-    forLabeledBreakStatementOnly(that);\r", "-  }\r", "+", "+  public void forLabeledBreakStatement(LabeledBreakStatement that) {", "+    forLabeledBreakStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLabel().visit(this);", "+    forLabeledBreakStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7eb08a6db6dcb452a7c80ba774d130", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 456, "methodNumberAfterChange": 456, "signatureBeforeChange": "\r \r   public void forInstanceofExpression(InstanceofExpression that)", "signatureAfterChange": "    public void forInstanceofExpression(InstanceofExpression that)", "diff": ["-\r", "-  public void forInstanceofExpression(InstanceofExpression that) {\r", "-    forInstanceofExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    that.getType().visit(this);\r", "-    forInstanceofExpressionOnly(that);\r", "-  }\r", "+", "+  public void forInstanceofExpression(InstanceofExpression that) {", "+    forInstanceofExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    that.getType().visit(this);", "+    forInstanceofExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec6bf5ab1cfeaf7f4c63fd3c17e6417", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public CompilerInterface[] getAvailableCompilers()", "diff": ["-//    itor = DrJava.getConfig().getSetting(OptionConstants.EXTRA_COMPILERS).iterator();", "-//", "-//    while (itor.hasNext()) {", "-//      String name = itor.next();", "-//      try {", "-//        _createCompiler(name, availableCompilers);", "-//      }", "-//      catch (Throwable t) {", "-//        // Custom compiler failed to load.  Signal the user?", "-////        System.err.println(\"Unable to load \" + name);", "-//      }", "-//    }", "-", "-    if (availableCompilers.size() == 0) {", "-      availableCompilers.add(NoCompilerAvailable.ONLY);", "-    }", "+    if (availableCompilers.size() == 0) availableCompilers.add(NoCompilerAvailable.ONLY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff1d04009762f1f336393a3e374bcd57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 411, "methodNumberAfterChange": 411, "signatureBeforeChange": "\r \r   public void forVoidReturn(VoidReturn that)", "signatureAfterChange": "    public void forVoidReturn(VoidReturn that)", "diff": ["-\r", "-  public void forVoidReturn(VoidReturn that) {\r", "-    forVoidReturnDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forVoidReturnOnly(that);\r", "-  }\r", "+", "+  public void forVoidReturn(VoidReturn that) {", "+    forVoidReturnDoFirst(that);", "+    if (prune(that)) return;", "+    forVoidReturnOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffe385fe3b67250430887e15db08a52e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/SwingWorker.java", "commitBeforeChange": "e9bec3010b901922047e6fa4b0f822c7679ebb75", "commitAfterChange": "1069ae55040630a013af2fb4848a0ed7a054566d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void start()", "signatureAfterChange": "   public void start()", "diff": ["-   */", "+  /** Start the worker thread. */", "-    if (t != null) {", "-      t.start();", "-    }", "+    if (t != null) t.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffe93a0240bf053884edb1972c27c4b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void breakpointRemoved(Breakpoint bp)", "signatureAfterChange": "   public void breakpointRemoved(Breakpoint bp)", "diff": ["-      for (int i = 0; i < size; i++) {", "-        _listeners.get(i).breakpointRemoved(bp);", "-      }", "+      for (int i = 0; i < size; i++) _listeners.get(i).breakpointRemoved(bp);", "-    finally {", "-      _lock.endRead();", "-    }", "+    finally { _lock.endRead(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffea1f192955328a02cf132a734273e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public int getIntelligentBeginLinePos(int currPos) throws BadLocationException", "signatureAfterChange": "   public int getIntelligentBeginLinePos(int currPos) throws BadLocationException", "diff": ["-      if (firstRealChar < currPos) {", "-        return firstRealChar;", "-      }", "+      if (firstRealChar < currPos)  return firstRealChar;"]}], "num": 9896}
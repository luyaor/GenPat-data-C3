{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8de8e85d66984e3faf72101f0ed0f24e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48a09dfd50fe6ac0bcdfbf37e2b71be9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "4b21424812450d42c0dde2aef3c483c11b298e24", "commitAfterChange": "ede26ceaad5c407d940ac773a5e7f457dc1f5187", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 56, "signatureBeforeChange": "   private boolean validUncheckedCast(Type target, Type source)", "signatureAfterChange": "       @Override public Boolean forPrimitiveType(PrimitiveType that)", "diff": ["+      public abstract boolean recur(Type that);", "+      @Override public Boolean forPrimitiveType(PrimitiveType that) {", "+        return !isSubtype(that, _other) && !isSubtype(_other, that);", "+      }", "-   */", "-  private boolean validUncheckedCast(Type target, Type source) {", "-    return isSubtype(target, erase(source)) || isSubtype(source, erase(target));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6909d77153bb97cf0753c9c513016062", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/swing/SwingWorker.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public final boolean isDone()", "signatureAfterChange": "       public void run(I val)", "diff": ["+    class IntermediateListener implements Runnable1<I> {", "+      public void run(I val) {", "+        intermediateListeners().remove(this); // don't respond again until the Swing task runs", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            List<I> vals = new LinkedList<I>();", "+            // add listener before drain to ensure a concurrent write isn't missed", "+            intermediateListeners().add(IntermediateListener.this);", "+            intermediateQueue().drainTo(vals);", "+            process(vals);", "+          }", "+        });", "+      }", "-   */", "-  public final boolean isDone() {", "-    Status status = _controller.status();", "-    return status.equals(Status.CANCELED) || status.equals(Status.FINISHED);"]}], "num": 12602}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4085830a04790a19afecd892fb4b1b17", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94850f89388d8b3b9a6525134d188a1d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 235, "signatureBeforeChange": "   public static <T1, T2>      Predicate2<T1, T2> and2(final Iterable<? extends Predicate2<? super T1, ? super T2>> preds)", "signatureAfterChange": "   public static <T1, T2>      Predicate2<T1, T2> and2(final Iterable<? extends Predicate2<? super T1, ? super T2>> preds)", "diff": ["-  /** @return  The conjunction ({@code &&}) of the given predicates */", "-  public static <T1, T2> ", "-    Predicate2<T1, T2> and2(final Iterable<? extends Predicate2<? super T1, ? super T2>> preds) {", "-    return new Predicate2<T1, T2>() {", "-      public Boolean value(T1 arg1, T2 arg2) {", "-        for (Predicate2<? super T1, ? super T2> p : preds) { ", "-          if (!p.value(arg1, arg2)) { return false; }", "-        }", "-        return true;", "-      }", "-    };", "-  }", "+   */", "+    Predicate2<T1, T2> and2(final Iterable<? extends Predicate2<? super T1, ? super T2>> preds) {", "+    return new AndPredicate2<T1, T2>(preds);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a45cc0d0b31cc58cff0330baf9b4fccd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 255, "signatureBeforeChange": "   public static <T1, T2>      Predicate2<T1, T2> or2(final Iterable<? extends Predicate2<? super T1, ? super T2>> preds)", "signatureAfterChange": "   public static <T1, T2> Predicate2<T1, T2> or2(Iterable<? extends Predicate2<? super T1, ? super T2>> preds)", "diff": ["-  /** @return  The disjunction ({@code ||}) of the given predicates */", "-    Predicate2<T1, T2> or2(final Iterable<? extends Predicate2<? super T1, ? super T2>> preds) {", "-    return new Predicate2<T1, T2>() {", "-      public Boolean value(T1 arg1, T2 arg2) {", "-        for (Predicate2<? super T1, ? super T2> p : preds) { ", "-          if (p.value(arg1, arg2)) { return true; }", "-        }", "-        return false;", "-      }", "-    };", "+   */", "+  public static <T1, T2> Predicate2<T1, T2> or2(Iterable<? extends Predicate2<? super T1, ? super T2>> preds) {", "+    return new OrPredicate2<T1, T2>(preds);", "+  }"]}], "num": 11742}
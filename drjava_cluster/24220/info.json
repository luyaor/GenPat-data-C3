{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6197cedc089ef7667f988c628c05041e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25f95fbec6308a8b9069355f858f5586", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractSlaveJVM.java", "commitBeforeChange": "b2b6471e1560c54bd01c487ab6cd5dc5ac9f4747", "commitAfterChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public final void quit()", "signatureAfterChange": "   public final void quit()", "diff": ["-   */", "+  /** Quits the slave JVM, calling {@link #beforeQuit} before it does. */", "+    ", "+    _slaveExited = false;", "+//    Utilities.showDebug(\"quit() called\");", "-          Thread.sleep(100);", "+          // wait for parent thread to exit ", "+          synchronized(_slaveJVMLock) { while (! _slaveExited) _slaveJVMLock.wait(); }", "+//          SecurityManager mgr = System.getSecurityManager();", "+//          Utilities.showDebug(\"Got the security manager. mgr = \" + mgr);", "+//          if (mgr instanceof PreventExitSecurityManager) {", "+//            PreventExitSecurityManager pemgr = (PreventExitSecurityManager) System.getSecurityManager();", "+//            pemgr.exitVM(0);", "+//          }", "+//          else ", "-        catch (Throwable th) { quitFailed(th); }", "+        catch (Throwable th) { ", "+//          Utilities.showDebug(\"Quit failed\");", "+          quitFailed(th); ", "+        }", "+    synchronized(_slaveJVMLock) { ", "+      _slaveExited = true; ", "+      _slaveJVMLock.notify();", "+    } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953cb05f6f7e04fddeba8e166aa2d9b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractSlaveJVM.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public final void quit()", "signatureAfterChange": "   public final synchronized void quit()", "diff": ["-  public final void quit() {", "+  public final synchronized void quit() {", "+    _log.log(this + \".quit() called\");", "-          synchronized(_slaveJVMLock) { while (! _slaveExited) _slaveJVMLock.wait(); }", "-//          SecurityManager mgr = System.getSecurityManager();", "-//          Utilities.showDebug(\"Got the security manager. mgr = \" + mgr);", "-//          if (mgr instanceof PreventExitSecurityManager) {", "-//            PreventExitSecurityManager pemgr = (PreventExitSecurityManager) System.getSecurityManager();", "-//            pemgr.exitVM(0);", "-//          }", "-//          else ", "+          synchronized(_slaveJVMLock) { ", "+            while (! _slaveExited) {", "+              _log.log(\"Waiting for \" + AbstractSlaveJVM.this + \".quit() to exit\");", "+              _slaveJVMLock.wait(); ", "+            }", "+          }", "+          _log.log(AbstractSlaveJVM.this + \" calling System.exit(0)\");", "-//          Utilities.showDebug(\"Quit failed\");", "+          _log.log(this + \".quit() failed!\");", "-    } ", "+    }", "+    _log.log(this + \".quit() RMI call exited\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40fe965c8c1565280cdb5feea061f4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractSlaveJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public final synchronized void quit()", "signatureAfterChange": "   public final synchronized void quit()", "diff": ["-//    _log.log(this + \".quit() called\");", "-//    _master = null;", "-    ", "-    ", "-    _slaveExited = false;", "-//    Utilities.showDebug(\"quit() called\");", "-    ", "-    Thread t = new Thread(_quitSlaveThreadName) {", "+    new Thread(_quitSlaveThreadName) {", "-        try {", "-          // wait for parent RMI calling thread to exit ", "-          synchronized(_slaveJVMLock) { ", "-            while (! _slaveExited) {", "-//              _log.log(\"Waiting for \" + AbstractSlaveJVM.this + \".quit() to exit\");", "-              _slaveJVMLock.wait(); ", "-            }", "-          }", "-          shutdown();", "+        // ensure (as best we can) that the quit() RMI call has returned cleanly", "+        synchronized (AbstractSlaveJVM.this) {", "+          try { System.exit(0); }", "+          catch (RuntimeException e) { error.log(\"Can't invoke System.exit\", e); }", "-        catch(Throwable t) { ", "-          _log.log(this + \".quit() failed!\");", "-          quitFailed(t); ", "+      }", "+    }.start();", "+  }", "-    ", "-    t.start();", "-//    _log.log(this + \".quit() RMI call exited\");", "-    synchronized(_slaveJVMLock) { ", "-      _slaveExited = true; ", "-      _slaveJVMLock.notify();  // There does not appear to be any constraint forcing this thread to exit before shutdown", "-    }"]}], "num": 24220}
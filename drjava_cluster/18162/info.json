{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3efddda61fa93341c3b6e67feb318f63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a552ae6b7d0e29ea8cb11df9d1a73f56", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 49, "signatureBeforeChange": "     public void breakpointReached(final Breakpoint bp)", "signatureAfterChange": "     public void breakpointReached(final Breakpoint bp)", "diff": ["-     */", "-    public void breakpointReached(final Breakpoint bp) {", "-      // Only change GUI from event-dispatching thread", "-      Runnable doCommand = new Runnable() {", "-        public void run() {", "-          DefaultMutableTreeNode bpDoc = new DefaultMutableTreeNode(bp.getClassName());", "+     * Called when a breakpoint is reached during execution. */", "+    public void breakpointReached(final Breakpoint bp) { }", "-          // Find the document node for this breakpoint", "-          Enumeration documents = _breakpointRootNode.children();", "-          while (documents.hasMoreElements()) {", "-            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-            if (doc.getUserObject().equals(bpDoc.getUserObject())) {", "-              // Find the correct line number node for this breakpoint", "-              Enumeration lineNumbers = doc.children();", "-              while (lineNumbers.hasMoreElements()) {", "-                DefaultMutableTreeNode lineNumber =", "-                  (DefaultMutableTreeNode)lineNumbers.nextElement();", "-                if (lineNumber.getUserObject().equals(new Integer(bp.getLineNumber()))) {", "-", "-                  // Select the node which has been hit", "-                  TreePath pathToNewBreakpoint = new TreePath(lineNumber.getPath());", "-                  _bpTree.scrollPathToVisible(pathToNewBreakpoint);", "-                  _bpTree.setSelectionPath(pathToNewBreakpoint);", "-                }", "-              }", "-            }", "-          }", "-        }", "-      };", "-      Utilities.invokeLater(doCommand);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6162611e2473aceca5042c6ce35a155", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BreakpointsPanel.java", "commitBeforeChange": "b9f87cd074abdafacdb2719b29e0803fd0f81cf0", "commitAfterChange": "04d7824a20eb03ad17793ba3198be21442313bdc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r   public BreakpointsPanel(MainFrame frame)", "signatureAfterChange": "   public BreakpointsPanel(MainFrame frame, RegionManager<Breakpoint> breakpointManager)", "diff": ["-    */\r", "-  public BreakpointsPanel(MainFrame frame) {\r", "-    super(frame, \"Breakpoints\");\r", "-    _model.getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {\r", "-      /** Called when a breakpoint is set in a document. Adds the breakpoint to the tree of breakpoints.\r", "-        *  Must be executed in event thread.\r", "-        *  @param bp the breakpoint\r", "-        */\r", "-      public void regionAdded(final Breakpoint bp) { \r", "-        assert EventQueue.isDispatchThread();\r", "-        addRegion(bp); \r", "-      }\r", "-      \r", "-      /** Called when a breakpoint is changed.\r", "-        * Removes the breakpoint from the tree of breakpoints.\r", "-        * @param bp the breakpoint\r", "-        * @param index the index of the breakpoint\r", "-        */\r", "-      public void regionChanged(final Breakpoint bp) {\r", "-        // Only change GUI from event-dispatching thread\r", "-        Runnable doCommand = new Runnable() {\r", "-          public void run() {\r", "-            File file = bp.getDocument().getRawFile();\r", "-            \r", "-            DefaultMutableTreeNode regDocNode = new DefaultMutableTreeNode(file);\r", "-            \r", "-            // Find the document node for this region\r", "-            Enumeration documents = _regionRootNode.children();\r", "-            boolean found = false;\r", "-            while (! found && documents.hasMoreElements()) {\r", "-              DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();\r", "-              if (doc.getUserObject().equals(regDocNode.getUserObject())) {\r", "-                // Find the correct line start offset node for this breakpoint\r", "-                Enumeration existingRegions = doc.children();\r", "-                while (existingRegions.hasMoreElements()) {\r", "-                  DefaultMutableTreeNode existing = (DefaultMutableTreeNode)existingRegions.nextElement();\r", "-                  @SuppressWarnings(\"unchecked\") \r", "-                  RegionTreeUserObj<Breakpoint> uo = (RegionTreeUserObj<Breakpoint>)existing.getUserObject();\r", "-                  if (uo.region().getStartOffset()==bp.getStartOffset()) {\r", "-                    Breakpoint r = uo.region();\r", "-                    r.setEnabled(bp.isEnabled());\r", "-                    ((DefaultTreeModel)_regTree.getModel()).nodeChanged(existing);\r", "-                    found = true;\r", "-                    break;\r", "-                  }\r", "-                }\r", "-              }\r", "-            }\r", "-            updateButtons();\r", "-          }\r", "-        };\r", "-        Utilities.invokeLater(doCommand);\r", "-      }\r", "-      \r", "-      /** Called when a breakpoint is removed from a document.\r", "-        * Removes the breakpoint from the tree of breakpoints.\r", "-        * @param bp the breakpoint\r", "-        */\r", "-      public void regionRemoved(final Breakpoint bp) { removeRegion(bp); }\r", "-    });\r", "-    _debugger = _model.getDebugger();\r", "-  }\r", "+    */", "+  public BreakpointsPanel(MainFrame frame, RegionManager<Breakpoint> breakpointManager) {", "+    super(frame, \"Breakpoints\", breakpointManager);", "+    _regionManager.addListener(new RegionManagerListener<Breakpoint>() {", "+      /** Called when a breakpoint is set in a document. Adds the breakpoint to the tree of breakpoints.", "+        *  Must be executed in event thread.", "+        *  @param bp the breakpoint", "+        */", "+      public void regionAdded(final Breakpoint bp) { ", "+        assert EventQueue.isDispatchThread();", "+        addRegion(bp); ", "+      }", "+      ", "+      /** Called when a breakpoint is changed.", "+        * Removes the breakpoint from the tree of breakpoints.", "+        * @param bp the breakpoint", "+        * @param index the index of the breakpoint", "+        */", "+      public void regionChanged(final Breakpoint bp) {", "+        assert EventQueue.isDispatchThread();", "+//        Runnable doCommand = new Runnable() {", "+//          public void run() {", "+        File file = bp.getDocument().getRawFile();", "+        ", "+        DefaultMutableTreeNode regNode = bp.getTreeNode();", "+        ((DefaultTreeModel)_regTree.getModel()).nodeChanged(regNode);", "+        ", "+//            // Find the document node for this region", "+//            Enumeration documents = _regionRootNode.children();", "+//            boolean found = false;", "+//            while (! found && documents.hasMoreElements()) {", "+//              DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+//              if (doc.getUserObject().equals(regDocNode.getUserObject())) {", "+//                // Find the correct line start offset node for this breakpoint", "+//                Enumeration existingRegions = doc.children();", "+//                while (existingRegions.hasMoreElements()) {", "+//                  DefaultMutableTreeNode existing = (DefaultMutableTreeNode)existingRegions.nextElement();", "+//                  @SuppressWarnings(\"unchecked\") ", "+//                  RegionTreeUserObj<Breakpoint> uo = (RegionTreeUserObj<Breakpoint>)existing.getUserObject();", "+//                  if (uo.region().getStartOffset() == bp.getStartOffset()) {", "+//                    Breakpoint r = uo.region();", "+//                    r.setEnabled(bp.isEnabled());", "+//                    ((DefaultTreeModel)_regTree.getModel()).nodeChanged(existing);", "+//                    found = true;", "+//                    break;", "+//                  }", "+//                }", "+//              }", "+//            }", "+//            updateButtons();", "+//          }", "+//        };", "+//        Utilities.invokeLater(doCommand);", "+      }", "+      ", "+      /** Called when a breakpoint is removed from a document.", "+        * Removes the breakpoint from the tree of breakpoints.", "+        * @param bp the breakpoint", "+        */", "+      public void regionRemoved(final Breakpoint bp) { removeRegion(bp); }", "+    });", "+    _debugger = _model.getDebugger();", "+  }"]}], "num": 18162}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3be2411430312a52ab11c713c6cbaf2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6228836d59863d0e8c47ce25ddf263e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "d884ae55e9471d604870827048329b58394dd950", "commitAfterChange": "28bca5adabaaf178bdf954808155389f93ed51fa", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled)      throws DebugException", "signatureAfterChange": "   public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled)      throws DebugException", "diff": ["-    Breakpoint breakpoint = _model.getBreakpointManager().getRegionAt(doc, offset, offset);", "+    // ensure that offset is at line start and falls within the document", "+    offset = doc.getLineStartPos(offset);", "+    if (offset < 0 || offset > doc.getLength()) return;", "+    ", "+    Breakpoint breakpoint = _model.getBreakpointManager().getRegionAt(doc, offset);", "-      if (doc.getLineStartPos(offset) == doc.getLineEndPos(offset)) {", "+      if (offset == doc.getLineEndPos(offset)) {", "-        try { setBreakpoint(new JPDABreakpoint (doc, offset, lineNum, isEnabled, this)); }", "+        try { setBreakpoint(new JPDABreakpoint(doc, offset, lineNum, isEnabled, this)); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2b66d5b7a803000e4fed4254f52b37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/Breakpoint.java", "commitBeforeChange": "f1f97edd57f558d6d34abcd1fe039afc22f7a202", "commitAfterChange": "fc098bf0e8c385557d32ed3c183745582612add6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public Breakpoint( OpenDefinitionsDocument doc, int lineNumber, VirtualMachine vm)      throws DebugException", "signatureAfterChange": "   public Breakpoint( OpenDefinitionsDocument doc, int lineNumber, DebugManager manager)      throws DebugException, IllegalStateException", "diff": ["-  ", "-  public Breakpoint( OpenDefinitionsDocument doc, int lineNumber, VirtualMachine vm) ", "-    throws DebugException {", "+   */", "+  public Breakpoint( OpenDefinitionsDocument doc, int lineNumber, DebugManager manager) ", "+    throws DebugException, IllegalStateException {    ", "-    _doc = doc;", "+    super (manager, doc);", "+    _suspendPolicy = EventRequest.SUSPEND_EVENT_THREAD;", "-    ", "-    _createBreakpointRequest(vm);", "+    _initializeRequest();", "+    //_doc = doc;", "+    //_createBreakpointRequest();", "+    DrJava.consoleOut().println(\"Breakpoint lineNumber is \" + lineNumber);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e702d289a52d31ba1425eb174f85b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/ExecJVM.java", "commitBeforeChange": "b583f95ca38940907816c4beb7118ff0df1017e2", "commitAfterChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static void ventBuffers(Process theProc, LinkedList outLines,                           LinkedList errLines) throws IOException", "signatureAfterChange": "   public static void ventBuffers(Process theProc, LinkedList<String> outLines,                                  LinkedList<String> errLines) throws IOException", "diff": ["-  public static void ventBuffers(Process theProc, LinkedList outLines,", "-                          LinkedList errLines) throws IOException {", "+  public static void ventBuffers(Process theProc, LinkedList<String> outLines,", "+                                 LinkedList<String> errLines) throws IOException {", "+    // getInputStream actually gives us the stdout from the Process.", "-//        System.out.println(\"[stdout]: \" + output);", "+        //        System.out.println(\"[stdout]: \" + output);", "-//        System.out.println(\"[stderr] \" + output);", "+        //        System.out.println(\"[stderr] \" + output);"]}], "num": 3582}
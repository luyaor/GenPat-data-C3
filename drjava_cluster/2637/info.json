{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d02a7d4168de32b77241de1f4ff618ef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dea40da0c8e971981c7b2492ab527f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManagerTest.java", "commitBeforeChange": "6730b2e413a99565d4307ad95e1ac5e98eebdf83", "commitAfterChange": "e174f3f9eb19ef8a7530f2c7ad04a839e38770be", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "             public void testDeclareMemberStaticImport()", "signatureAfterChange": "             public void testDeclareMemberStaticImport()", "diff": ["-      im.declareMemberStaticImport(\"java.lang.Integer.valueOf\");", "+      im.declareMemberStaticImport(\"java.lang.Integer.parseInt\");", "-    assertEquals(\"List of staticly imported methods should contain all three valueOf methods\",3,methods.size());", "+    assertEquals(\"List of staticly imported methods should contain both parseint methods\",2,methods.size());", "-    assertEquals(\"List of staticly imported fields should contain all three valueOf methods\",", "-                 \"public static java.lang.Integer java.lang.Integer.valueOf(int)\",methods.get(0).toString());", "-    assertEquals(\"List of staticly imported fields should contain all three valueOf methods\",", "-                 \"public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException\",methods.get(1).toString());", "-    assertEquals(\"List of staticly imported fields should contain all three valueOf methods\",", "-                 \"public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException\",methods.get(2).toString());", "+    if(TigerUtilities.isTigerEnabled()) {      ", "+      assertEquals(\"List of staticly imported fields should contain both parseInt methods\",", "+                   \"public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException\",methods.get(0).toString());", "+      assertEquals(\"List of staticly imported fields should contain both parseInt methods\",", "+                   \"public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException\",methods.get(1).toString());", "+    }", "+    else {", "+      //When running 1.4, the methods returned by java.lang.reflect.Class.getMethods() are in the array in reverse order from the way they are returned in 1.5.", "+      //This will not affect the program but does affect these assertions", "+      assertEquals(\"List of staticly imported fields should contain both parseInt methods\",", "+                   \"public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException\",methods.get(0).toString());", "+      assertEquals(\"List of staticly imported fields should contain both parseInt methods\",", "+                   \"public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException\",methods.get(1).toString());", "+    }", "+      ", "-    assertEquals(\"List of staticly imported methods should not have changed\",3,methods.size());", "+    assertEquals(\"List of staticly imported methods should not have changed\",2,methods.size());", "-    assertEquals(\"List of staticly imported methods should not have changed\",3,methods.size());", "+    assertEquals(\"List of staticly imported methods should not have changed\",2,methods.size());", "-    assertEquals(\"List of staticly imported methods should contain the two static toString methods in the Integer class\",5,methods.size());", "-    assertEquals(\"List of staticly imported methods should contain the two static toString methods in the Integer class as its first two entries\",", "-                 \"public static java.lang.String java.lang.Integer.toString(int)\",methods.get(0).toString());", "-    assertEquals(\"List of staticly imported methods should contain the two static toString methods in the Integer class as its first two entries\",", "-                 \"public static java.lang.String java.lang.Integer.toString(int,int)\",methods.get(1).toString());", "-    ", "+    assertEquals(\"List of staticly imported methods should contain the two static toString methods in the Integer class\",4,methods.size());", "+    if(TigerUtilities.isTigerEnabled()) {", "+      assertEquals(\"List of staticly imported methods should contain the two static toString methods in the Integer class as its first two entries\",", "+                   \"public static java.lang.String java.lang.Integer.toString(int)\",methods.get(0).toString());", "+      assertEquals(\"List of staticly imported methods should contain the two static toString methods in the Integer class as its first two entries\",", "+                   \"public static java.lang.String java.lang.Integer.toString(int,int)\",methods.get(1).toString());", "+    }", "+    else {", "+      //When running 1.4, the methods returned by java.lang.reflect.Class.getMethods() are in the array in reverse order from the way they are returned in 1.5.", "+      //This will not affect the program but does affect these assertions", "+      assertEquals(\"List of staticly imported methods should contain the two static toString methods in the Integer class as its first two entries\",", "+                   \"public static java.lang.String java.lang.Integer.toString(int,int)\",methods.get(0).toString());", "+      assertEquals(\"List of staticly imported methods should contain the two static toString methods in the Integer class as its first two entries\",", "+                   \"public static java.lang.String java.lang.Integer.toString(int)\",methods.get(1).toString());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec8756c0794e460dbf59ec042f04f4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void testMemoryLeak() throws InterruptedException", "signatureAfterChange": "   public void testMemoryLeak() throws InterruptedException", "diff": ["-    // The model already has one empty document in the cache when the model is created", "-    // Attach a finalization listener to the DefinitionsDocument embedded in each of the", "-    // following OpenDefinitionsDocs.", "+    ", "+    // Adding the listeners will load the document into the cache", "-    doc1.addFinalizationListener(fl); ", "-    doc2.addFinalizationListener(fl);", "-    doc3.addFinalizationListener(fl);", "-    doc4.addFinalizationListener(fl);", "-    doc5.addFinalizationListener(fl);", "+        ", "+    doc1.addFinalizationListener(fl);", "+    doc2.addFinalizationListener(fl);", "+    doc3.addFinalizationListener(fl);", "+    doc4.addFinalizationListener(fl);", "+    doc5.addFinalizationListener(fl); // kick 1 out", "-    // At this point, 6 documents exist but only 4 can be in the cache; hence 2 embedded", "-    // DefinitionsDocuments have been freed", "-    // System.out.println(doc1 + \" \" + doc2 + \" \" + doc3 + \" \" + doc4 + \" \" + doc5);", "+    assertEquals(\"There should be 4 in the LRU\", 4, _cache.getNumInCache());", "+    System.gc();", "+    Thread.sleep(100);", "+    ", "+    ", "+    assertFalse(\"doc1 should be the one that's not ready\", _adapterTable.get(doc1).isReady());", "+    assertEquals(\"One doc should have been collected\", 1, _memLeakCounter);", "+    ", "+    doc1.getLength(); // kick 2", "+    ", "+    // make sure doc1 has it's finalization listener still", "+    List<FinalizationListener<DefinitionsDocument>> list = doc1.getFinalizationListeners();", "+    assertEquals(\"There should only be one finalization listener\", 1, list.size());", "+    assertEquals(\"The finalization listener should be fl\", fl, list.get(0));", "+    ", "+    doc2.getLength(); // kick 3", "+    doc3.getLength(); // kick 4", "+    doc4.getLength(); // kick 5", "+    doc5.getLength(); // kick 1", "-    assertEquals(\"Two docs should have been collected\", 2, _memLeakCounter);", "-    ", "-    // System.out.println(doc1 + \" \" + doc2 + \" \" + doc3 + \" \" + doc4 + \" \" + doc5);", "-    ", "-    doc1.getLength();", "-    doc2.getLength();", "-    doc3.getLength();", "-    doc4.getLength();", "-    ", "-    doc5.getLength();", "-    ", "-    System.gc();", "-    Thread.sleep(100);", "-    assertEquals(\"several docs should have been collected\", 4, _memLeakCounter);", "+    assertEquals(\"several docs should have been collected\", 6, _memLeakCounter);"]}], "num": 2637}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac9147bc3c9d94dab738ea7f7106f803", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11325eaa45c36fe033d3ff5a683429ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void testOpenMultipleNonexistentFiles() throws IOException", "signatureAfterChange": "   public void testOpenMultipleNonexistentFiles() throws IOException", "diff": ["-    TestListener listener = new TestListener() {", "-      public void fileNotFound(File f) { fileNotFoundCount++; }", "-", "-      public void fileOpened(OpenDefinitionsDocument doc) {", "-        File file = null;", "-        try { file = doc.getFile(); }", "-        catch (FileMovedException fme) {", "-          // We know file should exist", "-          fail(\"file does not exist\");", "-        }", "-        try {", "-          assertEquals(\"file to open\", tempFile1.getCanonicalFile(), file.getCanonicalFile());", "-          openCount++;", "-        }", "-        catch (IOException ioe) { fail(\"could not get canonical file\"); }", "-      }", "-      ", "-      public void fileClosed(OpenDefinitionsDocument doc) {", "-        /* opening a file closes the empty document created on startup [Corky: 10-8-04]*/", "-//        assertTrue(doc.isUntitled());", "-//        assertFalse(doc.isModifiedSinceSave());", "-      }", "+    TestListener listener = new TestFileIOListener(tempFile1) {", "+      public synchronized void fileNotFound(File f) { fileNotFoundCount++; }", "+", "-", "-    try {", "-      docs = _model.openFiles(new FileSelector(tempFile1, new File(\"fake-file\")));", "-    }", "-    catch (FileNotFoundException fnf) {", "-      fail(\"FileNotFound exception was not thrown!\");", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    try { docs = _model.openFiles(new FileSelector(tempFile1, new File(\"fake-file\"))); }", "+    catch (FileNotFoundException fnf) { fail(\"FileNotFound exception was not thrown!\"); }  // Should not have moved", "+    catch (AlreadyOpenException aoe) { fail(\"File was already open!\"); }                   // Should not be open", "+    catch (OperationCanceledException oce) { fail(\"Open was unexpectedly canceled!\"); }    // Should not be canceled", "+    listener.assertCloseCount(1);  // closed Untitled document"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3d1ccd846654bce72ae05c2cf79dbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testOpenRealFile() throws BadLocationException, IOException", "signatureAfterChange": "   public void testOpenRealFile() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestListener() {", "-      public void fileOpened(OpenDefinitionsDocument doc) {", "-        File file = null;", "-        try { file = doc.getFile(); }", "-        catch (FileMovedException fme) {", "-          // We know file should exist", "-          fail(\"file does not exist\");", "-        }", "-        try {", "-          assertEquals(\"file to open\", tempFile.getCanonicalFile(), file.getCanonicalFile());", "-          synchronized(this) { openCount++; }", "-        }", "-        catch (IOException ioe) { fail(\"could not get canonical file\"); }", "-      }", "-      ", "-      public void fileClosed(OpenDefinitionsDocument doc) {", "-        /* opening a file closes the empty document created on startup [Corky: 10-8-04]*/", "-//        assertTrue(doc.isUntitled());", "-//        assertFalse(doc.isModifiedSinceSave());", "-      }", "-    };", "+    TestListener listener = new TestFileIOListener(tempFile); ", "+      listener.assertCloseCount(1);  // Untitled document is closed when doc is opened"]}], "num": 23892}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7506a3bc98b28b50c6d95fc4d47388ac", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a59561dc4bf12a227a1efac9b61e32b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public Object visit(TypeExpression node)", "signatureAfterChange": "   public Class visit(TypeExpression node)", "diff": ["-     */", "-    public Object visit(TypeExpression node) {", "-\tClass c = (Class)node.getType().acceptVisitor(this);", "-        node.setProperty(NodeProperties.TYPE, Class.class);", "-        node.setProperty(NodeProperties.VALUE, c);", "-\treturn Class.class;", "+   */", "+  public Class visit(TypeExpression node) {", "+    Class c = (Class)node.getType().acceptVisitor(this);", "+    node.setProperty(NodeProperties.TYPE, Class.class);", "+    node.setProperty(NodeProperties.VALUE, c);", "+    return Class.class;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d607387e58ed28b0787c4fed2cb7a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/TypeCheckerExtension.java", "commitBeforeChange": "405bec7d97445f0020939e0560dc10393430aac1", "commitAfterChange": "070ce5905e33fc289f79bfc0035862d6493d03f5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Object visit(DivideExpression node)", "signatureAfterChange": "   public Object visit(InstanceOfExpression node)", "diff": ["+   */", "+  public Object visit(InstanceOfExpression node) {", "+    node.getReferenceType().acceptVisitor(this);", "+    ", "+    // The expression must not have a primitive type", "+    Class c = (Class) node.getExpression().acceptVisitor(this);", "+    if ((c != null) && c.isPrimitive()) {", "+      throw new ExecutionError(\"left.expression\", node);", "+    }", "+    ", "+    // Set the type property", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+    return boolean.class;", "+  }"]}], "num": 4546}
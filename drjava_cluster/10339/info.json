{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4abbd6793ef86394f1ebb7bc11d49053", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b66abbec938de4deb1b364fd9432270", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetupTest.java", "commitBeforeChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "commitAfterChange": "8d145adf36cd29029ae2516bc62fa87e62c87636", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testFile() throws CloneNotSupportedException, IOException", "signatureAfterChange": "      public void testFile() throws CloneNotSupportedException, IOException", "diff": ["+    assertTrue(p.getCurrent(pm).startsWith(\"(file.isdir Error\"));    ", "-    File fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest.txt\", TEST_STRING);", "+    File fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.isfile Error\"));    ", "-    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest.txt\", TEST_STRING);", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.exists Error\"));    ", "-    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest.txt\", TEST_STRING);", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.parent Error\"));    ", "+    dir = FileOps.createTempDirectory(\"DrJavaPropertySetupTest\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    assertEquals(dir.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(fil.getAbsolutePath()));", "+    assertEquals(fil.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+    ", "+    notFound = new File(System.getProperty(\"java.io.tmpdir\"),\"DrJavaPropertySetupTest.\" + System.currentTimeMillis() + \"-\" + (_r.nextInt() & 0xffff) + \".tmp\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(notFound.getAbsolutePath()));", "+    assertEquals(new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath())+File.pathSeparator+", "+                          StringOps.escapeFileName(fil.getAbsolutePath())+File.pathSeparator+", "+                          StringOps.escapeFileName(notFound.getAbsolutePath()));", "+    assertEquals(dir.getParentFile().getAbsolutePath()+File.pathSeparator+", "+                 fil.getParentFile().getAbsolutePath()+File.pathSeparator+", "+                 new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.abs Error\"));    ", "+    dir = FileOps.createTempDirectory(\"DrJavaPropertySetupTest\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getName()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.abs Error\"));", "+    p.resetAttributes();", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir.getParentFile().getAbsolutePath()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.abs Error\"));", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getName()));", "+    assertEquals(dir.getAbsolutePath(), p.getCurrent(pm));", "+", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(fil.getName()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(fil.getParentFile().getAbsolutePath()));", "+    assertEquals(fil.getAbsolutePath(), p.getCurrent(pm));", "+    ", "+    notFound = new File(System.getProperty(\"java.io.tmpdir\"),\"DrJavaPropertySetupTest.\" + System.currentTimeMillis() + \"-\" + (_r.nextInt() & 0xffff) + \".tmp\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(notFound.getName()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(notFound.getParentFile().getAbsolutePath()));", "+    assertEquals(notFound.getAbsolutePath(), p.getCurrent(pm));", "+", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getName())+File.pathSeparator+", "+                          StringOps.escapeFileName(fil.getName())+File.pathSeparator+", "+                          StringOps.escapeFileName(notFound.getName()));", "+    assertEquals(dir.getAbsolutePath()+File.pathSeparator+", "+                 fil.getAbsolutePath()+File.pathSeparator+", "+                 notFound.getAbsolutePath(), p.getCurrent(pm));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rel Error\"));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.mkdir Error\"));    ", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rm Error\"));    ", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.mv Error\"));    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "314ca31326262034d41fb153dd8db44f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1b2c230a180a408e07fefa4999fd97bfd19485a5", "commitAfterChange": "f88a51007770d2637f5170b66e852db63e500083", "methodNumberBeforeChange": 273, "methodNumberAfterChange": 273, "signatureBeforeChange": "      public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["+    * in external process command lines. */", "-    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.master.jvm.args.combined\") {", "+    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.master.jvm.args.combined\",", "+                                                              \"This property contains all the JVM arguments passed \"+", "+                                                              \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "+                                                              \"programs in. The arguments from the \\\"JVM Args for \"+", "+                                                              \"Main JVM\\\" and the special -X arguments from \\\"Maximum \"+", "+                                                              \"Heap Size for Main JVM\\\" are combined.\") {", "-    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.slave.jvm.args.combined\") {", "+    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.slave.jvm.args.combined\",", "+                                                              \"This property contains all the JVM arguments passed \"+", "+                                                              \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "+                                                              \"programs in. The arguments from the \\\"JVM Args for \"+", "+                                                              \"Slave JVM\\\" and the special -X arguments from \\\"Maximum \"+", "+                                                              \"Heap Size for Main JVM\\\" are combined.\") {", "-    }));", "+    }, ", "+                                                                  \"Returns the current document in DrJava.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-    }));", "+    },", "+                                                                  \"Returns the current working directory of DrJava.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which output should be relative\\\"\"));", "-    }));", "-    ", "+    },", "+                                                                  \"Returns the working directory of the DrJava master JVM.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which output should be relative\\\"\"));", "+", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.all.files\", File.pathSeparator, DEF_DIR) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.all.files\", File.pathSeparator, DEF_DIR,", "+                                                                      \"Returns a list of all files open in DrJava.\\n\"+", "+                                                                      \"Optional attributes:\\n\"+", "+                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.project.files\", File.pathSeparator, DEF_DIR) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.project.files\", File.pathSeparator, DEF_DIR,", "+                                                                      \"Returns a list of all files open in DrJava that belong \"+", "+                                                                      \"to a project and are underneath the project root.\\n\"+", "+                                                                      \"Optional attributes:\\n\"+", "+                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.included.files\", File.pathSeparator, DEF_DIR) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.included.files\", File.pathSeparator, DEF_DIR,", "+                                                                      \"Returns a list of all files open in DrJava that are \"+", "+                                                                      \"not underneath the project root but are included in \"+", "+                                                                      \"the project.\\n\"+", "+                                                                      \"Optional attributes:\\n\"+", "+                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.external.files\", File.pathSeparator, DEF_DIR) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.external.files\", File.pathSeparator, DEF_DIR,", "+                                                                      \"Returns a list of all files open in DrJava that are \"+", "+                                                                      \"not underneath the project root and are not included in \"+", "+                                                                      \"the project.\\n\"+", "+                                                                      \"Optional attributes:\\n\"+", "+                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.time.millis\") {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.time.millis\",", "+                                                              \"Returns the current time in milliseconds since 01/01/1970, \"+", "+                                                              \"unless other format is specified by the fmt attribute.\\n\"+", "+                                                              \"Optional attributes:\\n\"+", "+                                                              \"\\tfmt=\\\"full\\\" or \\\"long\\\" or \\\"medium\\\" or \\\"short\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"if\") {", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"if\",", "+                                                             \"If the cond attribute evaluates to true, returns \"+", "+                                                             \"the evaluation of the then attribute, otherwise \"+", "+                                                             \"the evaluation of the else attribute.\\n\"+", "+                                                             \"Required attribute:\\n\"+", "+                                                             \"\\tcond=\\\"<string evaluating to true of false>\\\"\\n\"+", "+                                                             \"Optional attributes:\\n\"+", "+                                                             \"\\tthen=\\\"<evaluated if true>\\\"\\n\"+", "+                                                             \"\\telse=\\\"<evaluated if false>\\\"\") {", "+        if (_attributes.get(\"cond\")==null) {", "+          _value = \"(if Error...)\";", "+          return;", "+        }", "-          _value = \"Error. cond not set to true or false.\";", "+          _value = \"(if Error...)\";", "-        _attributes.put(\"cond\", \"\");", "+        _attributes.put(\"cond\", null);", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"tmpfile\") {", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"tmpfile\",", "+                                                             \"Creates a temporary file and returns the name of it.\\n\"+", "+                                                             \"Optional attributes:\\n\"+", "+                                                             \"\\tname=\\\"<name for temp file>\\\"\\n\"+", "+                                                             \"\\tdir=\\\"<dir for temp file>\\\"\\n\"+", "+                                                             \"\\tkeep=\\\"<true if the file should not be erased>\\\"\\n\"+", "+                                                             \"\\tcontent=\\\"<text to go into the file>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"input\", \"(User Input...)\") {", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"input\", \"(User Input...)\",", "+                                                             \"Get an input string from the user.\\n\"+", "+                                                             \"Optional attributes:\\n\"+", "+                                                             \"\\tprompt=\\\"<prompt to display>\\\"\\n\"+", "+                                                             \"\\tdefault=\\\"<suggestion to the user>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new RecursiveFileListProperty(\"find\", File.pathSeparator, DEF_DIR, DEF_DIR));", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new RecursiveFileListProperty(\"find\", File.pathSeparator, DEF_DIR, DEF_DIR,", "+                                                                        \"Return a list of files found in the starting dir.\\n\"+", "+                                                                        \"Optional attributes:\\n\"+", "+                                                                        \"\\tsep=\\\"<separator between files>\\\"\\n\"+", "+                                                                        \"\\tdir=\\\"<dir where to start>\\\"\\n\"+", "+                                                                        \"\\trel=\\\"<dir to which the files are relative>\\\"\\n\"+", "+                                                                        \"\\tfilter=\\\"<filter, like *.txt, for files to list>\\\"\\n\"+", "+                                                                        \"\\tdirfilter=\\\"<filter for which dirs to recurse>\\\"\"));", "+", "+    // XML properties, correspond to XMLConfig", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"xml.in\", \"(XML Input...)\",", "+                                                             \"Read data from an XML file.\\n\"+", "+                                                             \"Required attributes:\\n\"+", "+                                                             \"\\tfile=\\\"<file with the XML>\\\"\\n\"+", "+                                                             \"\\tpath=\\\"<path into the XML tree>\\\"\\n\"+", "+                                                             \"\\tdefault=\\\"<default value if not found>\\\"\\n\"+", "+                                                             \"\\tmulti=\\\"<true if multiple values are allowed>\\\"\\n\"+", "+                                                             \"\\tsep=\\\"<separator between results>\\\"\") {", "+      public String toString() {", "+        return \"(XML Input...)\";", "+      }", "+      public void update() {", "+        String xmlfile = _attributes.get(\"file\");", "+        String xmlpath = _attributes.get(\"path\");", "+        String defval = _attributes.get(\"default\");", "+        String multi = _attributes.get(\"multi\");", "+        String sep = _attributes.get(\"sep\");", "+        if ((xmlfile==null) ||", "+            (xmlpath==null) ||", "+            (defval==null)) {", "+          _value = \"(XML Input Error...)\";", "+          return;", "+        }", "+        try {", "+          File f = new File(xmlfile);", "+          if (!f.exists()) {", "+            _value = defval;", "+            return;", "+          }", "+          XMLConfig xc = new XMLConfig(f);", "+          List<String> values = xc.getMultiple(xmlpath);", "+          if (!\"true\".equals(multi.toLowerCase())) {", "+            if (values.size()!=1) {", "+              _value = defval;", "+              return;", "+            }", "+            _value = values.get(0);", "+            return;", "+          }", "+          StringBuilder sb = new StringBuilder();", "+          for (String v: values) {", "+            sb.append(sep);", "+            sb.append(v);", "+          }", "+          _value = sb.toString().substring(1);", "+        }", "+        catch(XMLConfigException xce) {", "+          _value = defval;", "+        }", "+      }", "+      public String getCurrent() {", "+        invalidate();", "+        return super.getCurrent();", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"file\", null);", "+        _attributes.put(\"path\", null);", "+        _attributes.put(\"default\", null);", "+        _attributes.put(\"multi\", \"true\");", "+        _attributes.put(\"sep\", File.pathSeparator);", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"xml.out.action\", \"(XML Output...)\",", "+                                                             \"Write data to an XML file. Since this is an \"+", "+                                                             \"action, it will not produce any output, but it will \"+", "+                                                             \"write to the XML file.\\n\"+", "+                                                             \"Required attributes:\\n\"+", "+                                                             \"\\tfile=\\\"<file with the XML>\\\"\\n\"+", "+                                                             \"\\tpath=\\\"<path into the XML tree>\\\"\\n\"+", "+                                                             \"\\tcontent=\\\"<value to write into the XML>\\\"\\n\"+", "+                                                             \"\\tappend=\\\"<true to append, false to overwrite existing>\\\"\") {", "+      public String toString() {", "+        return \"(XML Output...)\";", "+      }", "+      public void update() {", "+        String xmlfile = _attributes.get(\"file\");", "+        String xmlpath = _attributes.get(\"path\");", "+        String content = _attributes.get(\"content\");", "+        String append = _attributes.get(\"append\");", "+        if ((xmlfile==null) ||", "+            (xmlpath==null)) {", "+          _value = \"(XML Output Error...)\";", "+        }", "+        try {", "+          File f = new File(xmlfile);", "+          XMLConfig xc;", "+          if (f.exists()) { xc = new XMLConfig(f); }", "+          else { xc = new XMLConfig(); }", "+          xc.set(xmlpath, content, append.toLowerCase().equals(\"false\"));", "+          xc.save(xmlfile);", "+          _value = \"\";", "+        }", "+        catch(XMLConfigException xce) {", "+          _value = \"(XML Output Error...)\";", "+        }", "+      }", "+      public String getCurrent() {", "+        invalidate();", "+        return super.getCurrent();", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"file\", null);", "+        _attributes.put(\"path\", null);", "+        _attributes.put(\"content\", \"\");", "+        _attributes.put(\"append\", \"false\");", "+      }", "+    });", "+", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.mode\") {", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.mode\",", "+                                                               \"Evaluates to true if a project is loaded.\") {", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.changed\") {  //TODO: factor out repeated code!", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.changed\",", "+                                                               \"Evaluates to true if the project has been \"+", "+                                                               \"changed since the last save.\") {  //TODO: factor out repeated code!", "-    }));", "+    },", "+                                                                   \"Returns the current project file in DrJava.\\n\"+", "+                                                                   \"Optional attributes:\\n\"+", "+                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "+", "-    }));", "+    },", "+                                                                   \"Returns the current project file in DrJava.\\n\"+", "+                                                                   \"Optional attributes:\\n\"+", "+                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-    }));", "+    },", "+                                                                   \"Returns the current project root in DrJava.\\n\"+", "+                                                                   \"Optional attributes:\\n\"+", "+                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-    }));", "+    },", "+                                                                   \"Returns the current build directory in DrJava.\\n\"+", "+                                                                   \"Optional attributes:\\n\"+", "+                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-                                    _model.getBuildDirectory().getAbsolutePath()) {", "+                                    _model.getBuildDirectory().getAbsolutePath(),", "+                                    \"Returns the class files currently in the build directory.\") {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4672c813894c25f409c10c4889ea7c6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 107, "signatureBeforeChange": "          public void testGetQualifiedSymbolData()", "signatureAfterChange": "          public void testGetQualifiedSymbolData()", "diff": ["-    public void testGetQualifiedSymbolData() {", "-      testLLVisitor._file = new File(\"testFiles/Fake.dj0\");", "-      SymbolData sd = new SymbolData(\"testPackage.File\");", "-      testLLVisitor._package = \"testPackage\";", "-      LanguageLevelConverter.symbolTable.put(\"testPackage.File\", sd);", "-      ", "-      SymbolData sd1 = new SymbolData(\"java.lang.String\");", "-      LanguageLevelConverter.symbolTable.put(\"java.lang.String\", sd1);", "-      ", "-      //Test that classes not in the symbol table are handled correctly.", "-      assertEquals(\"should the continuation symbol\", sd, ", "-                   testLLVisitor._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false, true));", "-//      assertEquals(\"should be one error so far.\", 1, errors.size());", "-      ", "-      ", "-      SymbolData sd2 = testLLVisitor._getQualifiedSymbolData(\"java.lang.Integer\", SourceInfo.NO_INFO, true, true, true);", "-      assertEquals(\"should return non-continuation java.lang.Integer\", \"java.lang.Integer\", sd2.getName());", "-      assertFalse(\"should not be a continuation.\", sd2.isContinuation());", "-      ", "-      SymbolData sd3 = testLLVisitor._getQualifiedSymbolData(\"Wow\", SourceInfo.NO_INFO, true, true, true);", "-      assertEquals(\"search should fail\", null, sd3);", "-//      assertEquals(\"should return Wow\", \"Wow\", sd3.getName());", "-//      assertFalse(\"Should not be a continuation.\", sd3.isContinuation());", "-      ", "-      // \"testPackage.File\" has been entered as a continuation in symbolTable.  Why should the following lookup fail?", "-//      //Test that classes in the symbol table are handled correctly", "-//      assertEquals(\"should return null sd--does not exist\", null, ", "-//                   _llv._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, false, false, true));", "-//      assertEquals(\"Should be 1 error\", 1, errors.size());", "-      ", "-      sd.setIsContinuation(false);", "-      assertEquals(\"should return non-continuation sd\", sd, ", "-                   testLLVisitor._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false,  true));", "-      ", "-      ", "-      assertEquals(\"Should return sd1.\", sd1, ", "-                   testLLVisitor._getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NO_INFO, true, false, true));", "-      assertFalse(\"sd1 should no longer be a continuation.\", sd1.isContinuation());", "-      ", "-      ", "-      ", "-      //check that stuff not in symbol table and packaged incorrectly is handled right.", "-      assertEquals(\"should return null-because it's not a valid class\", null, ", "-                   testLLVisitor._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-                                                   SourceInfo.NO_INFO, true, false, true));", "-      ", "-      assertEquals(\"should be two errors so far.\", 2, errors.size());", "-      assertNull(\"should return null\", ", "-                 testLLVisitor._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-                                                 SourceInfo.NO_INFO, false, false, false));", "-      ", "-      assertNull(\"should return null.\", ", "-                 testLLVisitor._getQualifiedSymbolData(\"notRightPackage\", SourceInfo.NO_INFO, false, false, false));", "-      assertEquals(\"should still be two errors.\", 2, errors.size());", "-    }", "+    public void testGetQualifiedSymbolData() {", "+                   testLLVisitor.getQualifiedSymbolData(\"int\", SourceInfo.NO_INFO, true, true, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"byte\", SourceInfo.NO_INFO, false, false, false));", "+      SymbolData result = testLLVisitor.getQualifiedSymbolData(\"int[]\", SourceInfo.NO_INFO, true, true, true);", "+                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NO_INFO, false, true, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NO_INFO, true, false, true));", "+      testLLVisitor._classesInThisFile.add(\"fully.qualified.Qwerty\");", "+                                                       continuations,", "+                                                       fixUps,", "+                                 PACKAGE_MAV, ", "+                                 new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]),", "+      bv._classesInThisFile.add(\"fully.qualified.Qwerty\" /*, new Pair<TypeDefBase, LanguageLevelVisitor>(cd, bv)*/);", "+                   bv.getSymbolData(\"Qwerty\", SourceInfo.NO_INFO, true, true));", "+      assertEquals(\"should also return a continuation\", sd, ", "+                   bv.getQualifiedSymbolData(\"fully.qualified.Qwerty\", SourceInfo.NO_INFO, false, false, true));", "+      assertTrue(\"should be a continuation\", sd.isContinuation());", "+//      System.err.println(\"SymbolData for 'a.b.c' is \" + sd);", "+      LanguageLevelConverter.symbolTable.put(\"a.b.c\", sd);", "+//      System.err.println(\"SymbolTable entry for 'a.b.c' is \" + LanguageLevelConverter.symbolTable.get(\"a.b.c\"));", "+//      LanguageLevelConverter.symbolTable.put(\"foobar\", new SymbolData(\"This is strange\"));", "+//      System.err.println(\"SymbolTable entry for 'foobar' is \" + LanguageLevelConverter.symbolTable.get(\"foobar\"));", "+                   testLLVisitor.getQualifiedSymbolData(\"a.b.c\", SourceInfo.NO_INFO, false, true, true));", "+      // TODO: create an import table to look at when no match is found in symbolTable.", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+//                         _llv.getQualifiedSymbolData(\"fully.qualified.Woah\", ", "+//      SourceInfo.NO_INFO, true, true, true));", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "+      assertFalse(\"sd2 should now be resolved\", sd2.isContinuation());", "+                   testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true));", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+      SymbolData newsd1 = testLLVisitor.getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NO_INFO, true, true, true);", "+//      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", new SymbolData(\"java.lang.Object\"));", "+      result = testLLVisitor.getSymbolData(\"String\", SourceInfo.NO_INFO);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e40f12952190a4cbd47133ae25f07e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FontChooser.java", "commitBeforeChange": "17600b9f1362dad642f89cf0296e45c7ada70a5d", "commitAfterChange": "eedaccc293ad0b4e2acca7ef0fc2b72d0112c026", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    private void initAll()", "signatureAfterChange": "    private void initAll()", "diff": ["-    getContentPane().setLayout(null);", "-    setBounds(50, 50, 425, 400);", "-    _sampleText = new JLabel();", "-    addLists();", "-    addButtons();", "-    _sampleText.setForeground(Color.black);", "-    getContentPane().add(_sampleText);", "-    addWindowListener(new WindowAdapter() {", "-      public void windowClosing(java.awt.event.WindowEvent e) {", "-        setVisible(false);", "-      }", "-    });", "-    addComponentListener(new ComponentAdapter() {", "-      public void componentResized(ComponentEvent evt) {", "-        resize();", "-      }", "-    });", "-  }", "+    Container cp = getContentPane();", "+    GridBagLayout cpLayout = new GridBagLayout();", "+    GridBagConstraints c = new GridBagConstraints();", "+    cp.setLayout(cpLayout);", "+    // lists", "+    c.fill = GridBagConstraints.BOTH;", "+    c.anchor = GridBagConstraints.NORTH;", "+    c.gridwidth = 1;", "+    c.gridheight = 1;", "+    c.gridx = 0;", "+    c.gridy = 0;", "+    c.weightx = 1.0;", "+    c.weighty = 1.0;", "+    cpLayout.setConstraints(_fontList, c);", "+    cp.add(_fontList);", "+//    JPanel fontListPanel = new JPanel();", "+//    fontListPanel.setBackground(Color.RED);", "+//    cpLayout.setConstraints(fontListPanel, c);", "+//    cp.add(fontListPanel);", "+    ", "+    c.fill = GridBagConstraints.VERTICAL;", "+    c.anchor = GridBagConstraints.NORTH;", "+    c.gridwidth = GridBagConstraints.RELATIVE;", "+    c.gridheight = 1;", "+    c.gridx = 1;", "+    c.gridy = 0;", "+    c.weightx = 0.3;", "+    c.weighty = 1.0;", "+    cpLayout.setConstraints(_styleList , c);", "+    cp.add(_styleList);", "+//    JPanel styleListPanel = new JPanel();", "+//    styleListPanel.setBackground(Color.GREEN);", "+//    cpLayout.setConstraints(styleListPanel, c);", "+//    cp.add(styleListPanel);", "+    ", "+    c.fill = GridBagConstraints.BOTH;", "+    c.anchor = GridBagConstraints.NORTH;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.gridheight = 1;", "+    c.gridx = 2;", "+    c.gridy = 0;", "+    c.weightx = 0.3;", "+    c.weighty = 1.0;", "+    cpLayout.setConstraints(_sizeList, c);", "+    cp.add(_sizeList);    ", "+    // sample text", "+    c.fill = GridBagConstraints.BOTH;", "+    c.anchor = GridBagConstraints.WEST;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.gridheight = 1;", "+    c.gridx = 0;", "+    c.gridy = 1;", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    _sampleText = new JLabel();", "+    _sampleText.setForeground(Color.black);", "+    cpLayout.setConstraints(_sampleText, c);", "+    cp.add(_sampleText);", "+    ", "+    // buttons", "+    JPanel bottom = new JPanel();", "+    bottom.setBorder(new EmptyBorder(5,5,5,5));", "+    bottom.setLayout(new BoxLayout(bottom, BoxLayout.X_AXIS));", "+    bottom.add(Box.createHorizontalGlue());", "+    ", "+    bottom.add(_okButton);", "+    bottom.add(_cancelButton);", "+    bottom.add(Box.createHorizontalGlue());", "+", "+    c.fill = GridBagConstraints.NONE;", "+    c.anchor = GridBagConstraints.PAGE_END;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.gridheight = 1;", "+    c.gridx = 0;", "+    c.gridy = 2;", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    cpLayout.setConstraints(bottom, c);", "+    cp.add(bottom);", "+    ", "+    addWindowListener(new WindowAdapter() {", "+      public void windowClosing(java.awt.event.WindowEvent e) {", "+        setVisible(false);", "+      }", "+    });", "+    ", "+    setSize(425, 400);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cdeca15c2772178a0c45f064d195ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-windows/edu/rice/cs/drjava/platform/WindowsPlatform.java", "commitBeforeChange": "b58fba4c05c7b2fa2ddfeee6a4be5d11082f0498", "commitAfterChange": "72391aed491e817e35fc0bc96ee05cd4de35124a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean unregisterFileExtension(String extension, String progid)", "signatureAfterChange": "   public boolean unregisterFileExtension(String extension, String progid)", "diff": ["-      handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithProgids\",", "-                                       WindowsRegistry.KEY_ALL_ACCESS);", "+      WindowsRegistry.QueryInfoResult qir;", "-        WindowsRegistry.deleteValue(handle, progid);", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithProgids\",", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        try {", "+          WindowsRegistry.deleteValue(handle, progid);", "+        }", "+        catch(WindowsRegistry.RegistryException re) { /* if it couldn't be deleted, there was nothing to do anyway */ }", "+        qir = WindowsRegistry.queryInfoKey(handle);", "+        otherProgidsLeft |= (qir.valueCount>0);", "+        otherProgidsLeft |= (qir.subkeyCount>0);", "+        WindowsRegistry.flushKey(handle);", "+        WindowsRegistry.closeKey(handle);", "+        ", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithList\",", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        try {", "+          WindowsRegistry.deleteValue(handle, progid);", "+        }", "+        catch(WindowsRegistry.RegistryException re) { /* if it couldn't be deleted, there was nothing to do anyway */ }", "+        qir = WindowsRegistry.queryInfoKey(handle);", "+        otherProgidsLeft |= (qir.valueCount>0);", "+        otherProgidsLeft |= (qir.subkeyCount>0);", "+        WindowsRegistry.flushKey(handle);", "+        WindowsRegistry.closeKey(handle);", "+        ", "+        if (!otherProgidsLeft) {", "+          WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithProgids\");", "+          WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension);", "+        }", "+        WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, progid+\"\\\\shell\\\\open\");", "+        WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, progid);", "-      catch(WindowsRegistry.RegistryException re) { /* if it couldn't be deleted, there was nothing to do anyway */ }", "-      WindowsRegistry.QueryInfoResult qir = WindowsRegistry.queryInfoKey(handle);", "-      otherProgidsLeft |= (qir.valueCount>0);", "-      otherProgidsLeft |= (qir.subkeyCount>0);", "-      WindowsRegistry.flushKey(handle);", "-      WindowsRegistry.closeKey(handle);", "-", "-      handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithList\",", "-                                       WindowsRegistry.KEY_ALL_ACCESS);", "+      catch(WindowsRegistry.RegistryException re) {", "+        /* if it couldn't be deleted, there was nothing to do anyway */", "+      }", "+      ", "+      // also need to delete from", "+      // HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.ext\\Application", "+      File drjavaFile = null;", "+      String ourCmdLine = null;", "-        WindowsRegistry.deleteValue(handle, progid);", "+        drjavaFile = getDrJavaFile();", "+        ourCmdLine = getCommandLine()+\" \\\"%1\\\" %*\";", "-      catch(WindowsRegistry.RegistryException re) { /* if it couldn't be deleted, there was nothing to do anyway */ }", "-      qir = WindowsRegistry.queryInfoKey(handle);", "-      otherProgidsLeft |= (qir.valueCount>0);", "-      otherProgidsLeft |= (qir.subkeyCount>0);", "-      WindowsRegistry.flushKey(handle);", "-      WindowsRegistry.closeKey(handle);", "+      catch(IOException ioe) { return false; }", "-      if (!otherProgidsLeft) {", "-        WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithProgids\");", "-        WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension);", "+      try {", "+        // LOG.log(\"[1]\");", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\FileExts\\\\\"+extension,", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        // LOG.log(\"[2]\");", "+        try {", "+          String s = WindowsRegistry.queryValue(handle, \"Application\");", "+          // LOG.log(\"Application = \"+s);", "+          if ((s!=null) && (s.equals(drjavaFile.getName()))) {", "+            // LOG.log(\"[3]\");", "+            WindowsRegistry.deleteValue(handle, progid);", "+            // LOG.log(\"[4]\");", "+          }", "+        }", "+        catch(WindowsRegistry.RegistryException re) {", "+          // LOG.log(\"[A] \"+re.toString());", "+          /* if it couldn't be deleted, there was nothing to do anyway */", "+        }", "+        ", "+        // LOG.log(\"[5]\");", "+        WindowsRegistry.flushKey(handle);", "+        // LOG.log(\"[6]\");", "+        WindowsRegistry.closeKey(handle);", "+        // LOG.log(\"[7]\");", "-      WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, progid+\"\\\\shell\\\\open\");", "-      WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, progid);", "+      catch(WindowsRegistry.RegistryException re) {", "+        // LOG.log(\"[B] \"+re.toString());", "+        /* if it couldn't be deleted, there was nothing to do anyway */", "+      }", "+", "+      // HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.ext\\OpenWithProgids\\progid", "+      otherProgidsLeft = false;", "+      try {", "+        // LOG.log(\"[8]\");", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\FileExts\\\\\"+extension+\"\\\\OpenWithProgids\",", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        // LOG.log(\"[9]\");", "+        try {", "+          // LOG.log(\"[10] delete progid: \"+progid);", "+          WindowsRegistry.deleteValue(handle, progid);", "+          // LOG.log(\"[11]\");", "+        }", "+        catch(WindowsRegistry.RegistryException re) {", "+          // LOG.log(\"[B] \"+re.toString());", "+          /* if it couldn't be deleted, there was nothing to do anyway */", "+        }", "+        // LOG.log(\"[12]\");", "+        qir = WindowsRegistry.queryInfoKey(handle);", "+        // LOG.log(\"[13]\");", "+        otherProgidsLeft |= (qir.valueCount>0);", "+        otherProgidsLeft |= (qir.subkeyCount>0);", "+        // LOG.log(\"[15]\");", "+        WindowsRegistry.flushKey(handle);", "+        // LOG.log(\"[16]\");", "+        WindowsRegistry.closeKey(handle);", "+        // LOG.log(\"[17], left=\"+otherProgidsLeft);", "+", "+        if (!otherProgidsLeft) {", "+          // LOG.log(\"[18]\");", "+          WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                 \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\FileExts\\\\\"+extension+\"\\\\OpenWithProgids\");", "+          // LOG.log(\"[19]\");", "+        }", "+      }", "+      catch(WindowsRegistry.RegistryException re) {", "+        // LOG.log(\"[C] \"+re.toString());", "+        /* if it couldn't be deleted, there was nothing to do anyway */", "+      }", "+", "+      String mruList = \"\";", "+      // HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.ext\\OpenWithList\\MRUList", "+      // HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.ext\\OpenWithList\\a      ", "+      try {", "+        // LOG.log(\"[20]\");", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\FileExts\\\\\"+extension+\"\\\\OpenWithList\",", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        // LOG.log(\"[21]\");", "+        try {", "+          String s = WindowsRegistry.queryValue(handle, \"MRUList\");", "+          // LOG.log(\"[22] s=\"+s);", "+          if (s!=null) mruList = s;", "+        }", "+        catch(WindowsRegistry.RegistryException re) {", "+          // LOG.log(\"[D] \"+re.toString());", "+          /* if it couldn't be read, there was nothing to do anyway */", "+        }", "+        // LOG.log(\"[23] MRUlist=\"+mruList);", "+        String newMRUList = \"\";", "+        for(int i=0; i<mruList.length(); ++i) {", "+          String letter = mruList.substring(i,i+1); ", "+          // LOG.log(\"[24] i=\"+i+\" letter=\"+letter);", "+          boolean keep = true;", "+          try {", "+            // LOG.log(\"[24]\");", "+            String value = WindowsRegistry.queryValue(handle, letter);", "+            // LOG.log(\"[25] value=\"+value);", "+            if (value!=null) {", "+              // value is something like \"drjava.exe\"", "+              // check if this is our command line", "+              // HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Applications\\<value>\\shell\\open\\command", "+              // LOG.log(\"[26]\");", "+              try {", "+                String cmdLine =", "+                  WindowsRegistry.getKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\\\\command\",\"\");", "+                // LOG.log(\"[27] cmdLine=\"+cmdLine);", "+                // LOG.log(\"ourCmdLine=\"+ourCmdLine);", "+                if ((cmdLine!=null) && (cmdLine.equals(ourCmdLine))) {", "+                  // LOG.log(\"[28]\");", "+                  // this is ours, delete it", "+                  keep = false;", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\\\\command\");", "+                  // LOG.log(\"[29]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\");", "+                  // LOG.log(\"[30]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\");", "+                  // LOG.log(\"[31]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value);", "+                  // LOG.log(\"[32]\");", "+                }", "+              }", "+              catch(WindowsRegistry.RegistryException re) {", "+                // LOG.log(\"[E] \"+re.toString());", "+                /* if it couldn't be read, there was nothing to do anyway */", "+              }", "+              ", "+              // HKEY_CURRENT_USER\\Software\\Classes\\Applications\\<value>\\shell\\open\\command", "+              // LOG.log(\"[33]\");", "+              try {", "+                String cmdLine =", "+                  WindowsRegistry.getKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\\\\command\",\"\");", "+                // LOG.log(\"[34] cmdLine\"+cmdLine);", "+                // LOG.log(\"ourCmdLine=\"+ourCmdLine);", "+                if ((cmdLine!=null) && (cmdLine.equals(ourCmdLine))) {", "+                  // LOG.log(\"[35]\");", "+                  // this is ours, delete it", "+                  keep = false;", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\\\\command\");", "+                  // LOG.log(\"[36]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\");", "+                  // LOG.log(\"[37]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\");", "+                  // LOG.log(\"[38]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value);", "+                  // LOG.log(\"[39]\");", "+                }", "+              }", "+              catch(WindowsRegistry.RegistryException re) {", "+                // LOG.log(\"[F] \"+re.toString());", "+                /* if it couldn't be read, there was nothing to do anyway */", "+              }", "+              // LOG.log(\"[40] keep=\"+keep);", "+              if (!keep) {", "+                try {", "+                  // LOG.log(\"[41]\");", "+                  WindowsRegistry.deleteValue(handle, letter);", "+                  // LOG.log(\"[42]\");", "+                }", "+                catch(WindowsRegistry.RegistryException re) {", "+                  // LOG.log(\"[G] \"+re.toString());", "+                  /* if it couldn't be read, ignore it, we can still fix it with MRUList */", "+                }", "+              }", "+            }", "+          }", "+          catch(WindowsRegistry.RegistryException re) {", "+            // LOG.log(\"[H] \"+re.toString());", "+            /* if it couldn't be read, there was nothing to do anyway */", "+          }", "+          // LOG.log(\"[43]\");", "+          if (keep) newMRUList = newMRUList + letter;", "+          // LOG.log(\"[44] newMRUList=\"+newMRUList);", "+        }", "+        // LOG.log(\"[45] final newMRUList=\"+newMRUList);", "+        // LOG.log(\"mruList=\"+mruList);", "+        if (!mruList.equals(newMRUList)) {", "+          // LOG.log(\"[46]\");", "+          // update MRUList", "+          WindowsRegistry.setValue(handle, \"MRUList\", newMRUList);", "+          // LOG.log(\"[47]\");", "+        }", "+        // LOG.log(\"[48]\");", "+        WindowsRegistry.flushKey(handle);", "+        // LOG.log(\"[49]\");", "+        WindowsRegistry.closeKey(handle);", "+        // LOG.log(\"[50]\");", "+      }", "+      catch(WindowsRegistry.RegistryException re) {", "+        // LOG.log(\"[I] \"+re.toString());", "+        /* if it couldn't be read, there was nothing to do anyway */", "+      }      ", "+      // LOG.log(\"[Z] \"+re);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "936aac3a1f510c472c82db7a0ed1b957", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "28ed37193d3d1605a7ea343a3a2a748ce08a7b25", "commitAfterChange": "deccdad7d1e1e890f5a05d651027f51330f6ca59", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "        public void run()", "signatureAfterChange": "        public void setUp() throws Exception", "diff": ["-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        DrJava._initConfig();", "-        _mf = new MainFrame(); ", "-      } ", "+  public void setUp() throws Exception {", "+    super.setUp();", "+    ", "+    _log.log(\"INVOKing DrJava._initConfig() for \" + this);", "+    DrJava._initConfig();", "+    ", "+    _log.log(\"CREATing a MainFrame for \" + this);", "+    _mf = new MainFrame(); ", "+    _log.log(\"created a MainFrame for \" + this + \"; stating file setup\");", "+      ", "+      _log.log(\"File initialization (setUp) is complete\");"]}], "num": 10339}
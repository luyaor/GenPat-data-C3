{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17584bbaf7e139fb1a423175dfcd530d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d4a6fd891314d56666a7aa725773017", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public synchronized void resumeHelper(boolean shouldCopyBack) throws DebugException", "signatureAfterChange": "   protected synchronized void _resumeHelper(boolean shouldCopyBack)      throws DebugException", "diff": ["-  public synchronized void resumeHelper(boolean shouldCopyBack) throws DebugException{", "-    if (!isReady()) return;", "-    ThreadReference thread = null;", "-    try{", "-      thread = _suspendedThreads.pop();", "-    }catch(NoSuchElementException e){", "-      /** Just return because there is no thread to resume */", "-      return;", "+  protected synchronized void _resumeHelper(boolean shouldCopyBack) ", "+    throws DebugException", "+  {", "+    try {", "+      ThreadReference thread = _suspendedThreads.pop();", "+      ", "+      if( printMessages ) System.out.println(\"In resumeThread()\");", "+      _resumeThread(thread, shouldCopyBack);", "-    ", "-    if( printMessages ) System.out.println(\"In resumeThread()\");", "-    resumeThread(thread, shouldCopyBack);", "+    catch (NoSuchElementException e) {", "+      throw new DebugException(\"No thread to resume.\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2227e951bdf5ee7b5c3dc9b25f2b34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 29, "signatureBeforeChange": "      private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException", "signatureAfterChange": "   private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)     throws DebugException", "diff": ["-  ", "-  private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException{", "-    if( thread == null)", "-      return;", "+   */", "+  private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)", "+    throws DebugException", "+  {", "+    if (thread == null) {", "+      throw new IllegalArgumentException(\"Cannot resume a null thread\");", "+    }", "-    ", "-    if( printMessages )  System.out.println(\"Getting suspendCount = \" + suspendCount);", "+    if (printMessages) System.out.println(\"Getting suspendCount = \" + suspendCount);", "-    if( shouldCopyBack ){", "-      _doCopyBack(); /* copy variables back into the thread */", "+    if (shouldCopyBack) {", "+      // Copy variables back into the thread", "+      _copyVariablesFromInterpreter();", "-    try{", "+    try {", "-    catch(DebugException e){", "+    catch(DebugException e) {  //??", "+    // Must resume the correct number of times", "+    ", "+    // Notify listeners of a resume", "+    ", "+    // Switch to next suspended thread, if any"]}], "num": 18208}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3f21e37b97bd16a057c364eddf3c868", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cb09279f20c84c00f98ca0c7f1dbdb6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "dc96b8e17de1b9fbcfb0683311d7e482b6fcfcf3", "commitAfterChange": "270c6e5f741c371e9536c93af7f5525dbf67eeee", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "diff": ["-      RuntimeBindings newBindings = _bindings;", "-      Option<Object> val = Option.none();", "-      for (Node n : tree) {", "-        StatementEvaluator.Result r = n.acceptVisitor(new StatementEvaluator(newBindings, _opt));", "-        newBindings = r.bindings();", "-        val = r.value();", "-      }", "-      return Pair.make(newBindings, val);", "+      StatementEvaluator.Result r = new StatementEvaluator(_bindings, _opt).evaluateSequence(tree);", "+      return Pair.make(r.bindings(), r.value());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f44d462379fbce4ed8a38f9989890702", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "dc96b8e17de1b9fbcfb0683311d7e482b6fcfcf3", "commitAfterChange": "270c6e5f741c371e9536c93af7f5525dbf67eeee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "diff": ["-    try {", "-      TypeContext newContext = _typeContext;", "-      for (Node n : tree) {", "-        newContext = n.acceptVisitor(new StatementChecker(newContext, _opt));", "-      }", "-      return newContext;", "-    }", "+    try { return new StatementChecker(_typeContext, _opt).checkList(tree); }"]}], "num": 11301}
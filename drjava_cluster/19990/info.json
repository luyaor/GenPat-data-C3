{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f46829cbf2956bfb4a7ac3cc8ad7e5c7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42776d2d9325c1f5600a3a1acf59b106", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "98f0c27d2704f53c27c12dba8736793eeeac44cf", "commitAfterChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": "   protected void updateText(final boolean finish)", "signatureAfterChange": "   protected void updateText()", "diff": ["-  protected void updateText(final boolean finish) {", "-    Utilities.invokeLater(new Runnable() {", "-      public void run() {", "-        // MainFrame.LOG.log(\"updateText\");", "-        if (((_is!=null) || (_erris!=null)) &&", "-            (_updateNowButton.isEnabled())) {", "-          _updateNowButton.setEnabled(false);", "-          int changeCount = 0;", "-          StringBuilder sb = new StringBuilder(_textArea.getText());", "-          // MainFrame.LOG.log(\"\\tgot text\");", "-          try {", "-            // MainFrame.LOG.log(\"\\treading...\");", "-            // abort after reading 5 blocks (50 kB), read more later", "-            // don't block the event thread any longer", "-            while((_is!=null) &&", "-                  (_erris!=null) &&", "-                  (changeCount<=BUFFER_READS_PER_TIMER) &&", "-                  (_erris!=null) &&", "-                  ((_red = _is.read(_buf))>=0)) {", "-              // MainFrame.LOG.log(\"\\tread \"+_red+\" bytes\");", "-              sb.append(new String(_buf, 0, _red));", "-              if (finish) { changeCount = 1; } else { ++changeCount; }", "-            }", "-            if (_is==null) { sb.append(\"\\nInput stream suddenly became null.\"); }", "-            if (_erris==null) { sb.append(\"\\nError input stream suddenly became null.\"); }", "-            while((changeCount<=BUFFER_READS_PER_TIMER) &&", "-                  (_erris!=null) &&", "-                  ((_errred = _erris.read(_errbuf))>=0)) {", "-              // MainFrame.LOG.log(\"\\tread \"+_red+\" bytes\");", "-              sb.append(new String(_errbuf, 0, _errred));", "-              if (finish) { changeCount = 1; } else { ++changeCount; }", "-            }", "-            if ((_red>0) && (changeCount<BUFFER_READS_PER_TIMER)) {", "-              sb.append(new String(_buf, 0, _red));", "-              if (finish) { changeCount = 1; } else { ++changeCount; }", "-            }", "-            if ((_errred>0) && (changeCount<BUFFER_READS_PER_TIMER)) {", "-              sb.append(new String(_errbuf, 0, _errred));", "-              if (finish) { changeCount = 1; } else { ++changeCount; }", "-            }", "-          }", "-          catch(IOException ioe) {", "-            // MainFrame.LOG.log(\"\\taborted\");", "-            // stop polling", "-            sb.append(\"\\n\\nI/O Exception reading from process\\n\");", "-            if (finish) { changeCount = 1; } else { ++changeCount; }", "-            abortActionPerformed(null);", "-          }", "-          finally {", "-            if (changeCount>0) {", "-              // MainFrame.LOG.log(\"\\tsetting text\");", "-              _textArea.setText(sb.toString());", "-              int maxLines = edu.rice.cs.drjava.DrJava.getConfig().", "-                getSetting(edu.rice.cs.drjava.config.OptionConstants.FOLLOW_FILE_LINES);", "-              if (maxLines>0) { // if maxLines is 0, buffer is unlimited", "-                try {", "-                  int start = 0;", "-                  int len = _textArea.getText().length();", "-                  int curLines = _textArea.getLineCount();", "-                  if (curLines>maxLines) {", "-                    start = _textArea.getLineStartOffset(curLines-maxLines);", "-                    len -= start;", "-                    sb = new StringBuilder(_textArea.getText(start,len));", "-                    _textArea.setText(sb.toString());", "-                  }", "-                }", "-                catch(javax.swing.text.BadLocationException e) { /* ignore, do not truncate */ }", "-              }", "-              // MainFrame.LOG.log(\"\\ttext length = \"+s.length());", "-            }", "-          }", "-        // MainFrame.LOG.log(\"\\tupdating buttons\");", "-        updateButtons();", "-    });", "+  /** Update the text area with the text that was read. */", "+  protected void updateText() {", "+    // MainFrame.LOG.log(\"updateText\");", "+    if (_updateNowButton.isEnabled()) {", "+      try {", "+        if ((_is!=null) && (_p!=null) &&", "+            (_is.ready()) &&", "+            (_p.getInputStream().available()>0)) { readText(false); }", "+      }", "+      catch(IOException ioe) {", "+        _sb.append(\"\\n\\nI/O Exception reading from process\\n\");", "+        abortActionPerformed(null);", "+        ++_changeCount;", "+      }", "+      if (_changeCount>0) {", "+        _changeCount = 0;", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            // MainFrame.LOG.log(\"\\tsetting text\");", "+            _textArea.setText(_sb.toString());", "+            int maxLines = edu.rice.cs.drjava.DrJava.getConfig().", "+              getSetting(edu.rice.cs.drjava.config.OptionConstants.FOLLOW_FILE_LINES);", "+            if (maxLines>0) { // if maxLines is 0, buffer is unlimited", "+              try {", "+                int start = 0;", "+                int len = _textArea.getText().length();", "+                int curLines = _textArea.getLineCount();", "+                if (curLines>maxLines) {", "+                  start = _textArea.getLineStartOffset(curLines-maxLines);", "+                  len -= start;", "+                  _sb = new StringBuilder(_textArea.getText(start,len));", "+                  _textArea.setText(_sb.toString());", "+                }", "+              }", "+              catch(javax.swing.text.BadLocationException e) { /* ignore, do not truncate */ }", "+            }", "+            // MainFrame.LOG.log(\"\\ttext length = \"+s.length());", "+          }", "+        });", "+      }", "+      // MainFrame.LOG.log(\"\\tupdating buttons\");", "+      updateButtons();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0739c24bf54476416fafc7d03630857", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r   protected void updateText()", "signatureAfterChange": "   protected void updateText()", "diff": ["-  /** Update the text area with the text that was read. */\r", "-  protected void updateText() {\r", "-    // MainFrame.LOG.log(\"updateText\");\r", "-    if (_updateNowButton.isEnabled()) {\r", "-//      try {\r", "-//        if ((_is!=null) && (_p!=null) &&\r", "-//            (_is.ready()) &&\r", "-//            (_p.getInputStream().available()>0)) { readText(false); }\r", "-//      }\r", "-//      catch(IOException ioe) {\r", "-//        try {\r", "-//          _p.exitValue();\r", "-//          // if we get here, process has finished, and we don't display the I/O exception\r", "-//        }\r", "-//        catch(IllegalThreadStateException e) {\r", "-//          // process has NOT finished yet, display the I/O exception\r", "-//          _sb.append(\"\\n\\nI/O Exception reading from process\\n\");\r", "-//        }\r", "-//        abortActionPerformed(null);\r", "-//        ++_changeCount;\r", "-//      }\r", "-      if (_changeCount>0) {\r", "-        _changeCount = 0;\r", "-        SwingUtilities.invokeLater(new Runnable() {\r", "-          public void run() {\r", "-            // MainFrame.LOG.log(\"\\tsetting text\");\r", "-            _textArea.setText(_sb.toString());\r", "-            int maxLines = edu.rice.cs.drjava.DrJava.getConfig().\r", "-              getSetting(edu.rice.cs.drjava.config.OptionConstants.FOLLOW_FILE_LINES);\r", "-            if (maxLines>0) { // if maxLines is 0, buffer is unlimited\r", "-              try {\r", "-                int start = 0;\r", "-                int len = _textArea.getText().length();\r", "-                int curLines = _textArea.getLineCount();\r", "-                if (curLines>maxLines) {\r", "-                  start = _textArea.getLineStartOffset(curLines-maxLines);\r", "-                  len -= start;\r", "-                  _sb = new StringBuilder(_textArea.getText(start,len));\r", "-                  _textArea.setText(_sb.toString());\r", "-                }\r", "-              }\r", "-              catch(javax.swing.text.BadLocationException e) { /* ignore, do not truncate */ }\r", "-            }\r", "-            // MainFrame.LOG.log(\"\\ttext length = \"+s.length());\r", "-          }\r", "-        });\r", "-      }\r", "-      // MainFrame.LOG.log(\"\\tupdating buttons\");\r", "-      updateButtons();\r", "-    }\r", "-  }\r", "+  /** Update the text area with the text that was read. */", "+  protected void updateText() {", "+    // MainFrame.LOG.log(\"updateText\");", "+    if (_updateNowButton.isEnabled()) {", "+//      try {", "+//        if ((_is!=null) && (_p!=null) &&", "+//            (_is.ready()) &&", "+//            (_p.getInputStream().available()>0)) { readText(false); }", "+//      }", "+//      catch(IOException ioe) {", "+//        try {", "+//          _p.exitValue();", "+//          // if we get here, process has finished, and we don't display the I/O exception", "+//        }", "+//        catch(IllegalThreadStateException e) {", "+//          // process has NOT finished yet, display the I/O exception", "+//          _sb.append(\"\\n\\nI/O Exception reading from process\\n\");", "+//        }", "+//        abortActionPerformed(null);", "+//        ++_changeCount;", "+//      }", "+      if (_changeCount>0) {", "+        _changeCount = 0;", "+        EventQueue.invokeLater(new Runnable() {", "+          public void run() {", "+            // MainFrame.LOG.log(\"\\tsetting text\");", "+            _textArea.setText(_sb.toString());", "+            int maxLines = edu.rice.cs.drjava.DrJava.getConfig().", "+              getSetting(edu.rice.cs.drjava.config.OptionConstants.FOLLOW_FILE_LINES);", "+            if (maxLines>0) { // if maxLines is 0, buffer is unlimited", "+              try {", "+                int start = 0;", "+                int len = _textArea.getText().length();", "+                int curLines = _textArea.getLineCount();", "+                if (curLines>maxLines) {", "+                  start = _textArea.getLineStartOffset(curLines-maxLines);", "+                  len -= start;", "+                  _sb = new StringBuilder(_textArea.getText(start,len));", "+                  _textArea.setText(_sb.toString());", "+                }", "+              }", "+              catch(javax.swing.text.BadLocationException e) { /* ignore, do not truncate */ }", "+            }", "+            // MainFrame.LOG.log(\"\\ttext length = \"+s.length());", "+          }", "+        });", "+      }", "+      // MainFrame.LOG.log(\"\\tupdating buttons\");", "+      updateButtons();", "+    }", "+  }"]}], "num": 19990}
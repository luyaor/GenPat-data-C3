{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00b5feb601470bed83a656009ec61c65", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39a1e7265c9b668d30e11b46b77843b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 417, "methodNumberAfterChange": 417, "signatureBeforeChange": "\r \r   public void forMinusAssignmentExpression(MinusAssignmentExpression that)", "signatureAfterChange": "    public void forMinusAssignmentExpression(MinusAssignmentExpression that)", "diff": ["-\r", "-  public void forMinusAssignmentExpression(MinusAssignmentExpression that) {\r", "-    forMinusAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forMinusAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMinusAssignmentExpression(MinusAssignmentExpression that) {", "+    forMinusAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forMinusAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a9aa716093e0abe5b6c57723d48e8e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 420, "methodNumberAfterChange": 420, "signatureBeforeChange": "\r \r   public void forModAssignmentExpression(ModAssignmentExpression that)", "signatureAfterChange": "    public void forModAssignmentExpression(ModAssignmentExpression that)", "diff": ["-\r", "-  public void forModAssignmentExpression(ModAssignmentExpression that) {\r", "-    forModAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forModAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forModAssignmentExpression(ModAssignmentExpression that) {", "+    forModAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forModAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b9566e813983a9f5904c7a8f3831e2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 418, "methodNumberAfterChange": 418, "signatureBeforeChange": "\r \r   public void forMultiplyAssignmentExpression(MultiplyAssignmentExpression that)", "signatureAfterChange": "    public void forMultiplyAssignmentExpression(MultiplyAssignmentExpression that)", "diff": ["-\r", "-  public void forMultiplyAssignmentExpression(MultiplyAssignmentExpression that) {\r", "-    forMultiplyAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forMultiplyAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMultiplyAssignmentExpression(MultiplyAssignmentExpression that) {", "+    forMultiplyAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forMultiplyAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a99bc1b1fbcf1c20f2121f07c8c72a30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 419, "methodNumberAfterChange": 419, "signatureBeforeChange": "\r \r   public void forDivideAssignmentExpression(DivideAssignmentExpression that)", "signatureAfterChange": "    public void forDivideAssignmentExpression(DivideAssignmentExpression that)", "diff": ["-\r", "-  public void forDivideAssignmentExpression(DivideAssignmentExpression that) {\r", "-    forDivideAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forDivideAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forDivideAssignmentExpression(DivideAssignmentExpression that) {", "+    forDivideAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forDivideAssignmentExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5408449d7fb21e4e6bed4cf753f3e79", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 416, "methodNumberAfterChange": 416, "signatureBeforeChange": "\r \r   public void forPlusAssignmentExpression(PlusAssignmentExpression that)", "signatureAfterChange": "    public void forPlusAssignmentExpression(PlusAssignmentExpression that)", "diff": ["-\r", "-  public void forPlusAssignmentExpression(PlusAssignmentExpression that) {\r", "-    forPlusAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forPlusAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPlusAssignmentExpression(PlusAssignmentExpression that) {", "+    forPlusAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forPlusAssignmentExpressionOnly(that);", "+  }"]}], "num": 6418}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1e4c52dcf5d26d3f76894c26de4223a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "551fb64b0c3c35d510d160b9b178a15c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "             public void actionPerformed(ActionEvent e)", "signatureAfterChange": "   protected void handleSlaveConnected()", "diff": ["-            int count = 0;", "-            public void actionPerformed(ActionEvent e) {", "-              synchronized(MainJVM.this) {", "-                if (!_shouldReset) {", "-                  _stopTimerThread();", "-                  return;", "-                }", "-                if (count < 2) {", "-                  _model.printDebugMessage(\"Could not connect to Interpreter JVM, trying again...\");", "-                  restartInterpreterJVM();", "-                  count++;", "-                  return;", "-                }", "-                _model.printDebugMessage(\"Unable to connect to Interpreter JVM, so the Interactions Pane is unavailable.\");", "-                _stopTimerThread();", "-              }", "-            }", "+   */", "+  protected void handleSlaveConnected() {", "+    // we reset the enabled flag since, unless told otherwise via", "+    // killInterpreter(false), we want to automatically respawn", "+    _enabled = true;", "+    _cleanlyRestarting = false;", "+    ", "+    // _model may be null if we're running a test on this", "+    if (_model != null) {", "+      _model.interactionsReady();", "+    }", "+", "+    _log.log(\"thread in connected: \" + Thread.currentThread());", "+", "+    synchronized(this) {", "+      // notify so that if we were waiting (in ensureConnected)", "+      // this will wake em up", "+      notify();", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dd9651e2c4a72cdb932bcfd5794b2c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "signatureAfterChange": "   public synchronized void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "diff": ["-  public void registerInterpreterJVM(InterpreterJVMRemoteI remote)", "+  public synchronized void registerInterpreterJVM(InterpreterJVMRemoteI remote)", "-    synchronized(this) {", "-      if (_interpreterJVM != null) { ", "-        try {", "-          //DrJava.consoleOut().println(\"killing jvm! \" + i);", "-          remote.exitJVM();", "-        }", "-        catch (RemoteException re) {", "-        }", "-        return;", "+    if (_interpreterJVM != null) { ", "+      try {", "+        //DrJava.consoleOut().println(\"killing jvm! \" + i);", "+        remote.exitJVM();", "-      _timerThread.disable();", "-      _interpreterJVM = remote;", "-      // _model may be null if we're running a test on this", "-      if (_model != null) {", "-        _model.interactionsReady();", "+      catch (RemoteException re) {", "-      _startupInProgress = false;", "-      // wake up anyone waiting for an interpreter!", "-      notify();", "+      return;", "+    _timerThread.disable();", "+    _interpreterJVM = remote;", "+    // _model may be null if we're running a test on this", "+    if (_model != null) {", "+      _model.interactionsReady();", "+    }", "+    _startupInProgress = false;", "+    // wake up anyone waiting for an interpreter!", "+    notify();"]}], "num": 30512}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ccf5fbf78710c0931c209d68e5b38fd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcecddd59d57e56fdbc1c1aa33ec4025", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected void handleSlaveQuit(int status)", "signatureAfterChange": "   protected void handleSlaveQuit(int status)", "diff": ["+   */", "+  protected void handleSlaveQuit(int status) {", "+    debug.logValue(\"Slave quit\", \"status\", status);", "+    boolean wasRestarting;", "+    boolean doRestart;", "+    synchronized (_startupLock) {", "+      wasRestarting = _cleanlyRestarting;", "+      _cleanlyRestarting = false;", "+      doRestart = _restart;", "+      _interpreterJVM.set(null);", "+    }", "+    if (!wasRestarting) { _interactionsModel.replCalledSystemExit(status); }", "+    if (doRestart) {", "+      // We have already fired this event if we are cleanly restarting", "+      if (!wasRestarting) { _interactionsModel.interpreterResetting(); }", "+      startInterpreterJVM();", "+    }", "+  }", "-    */", "-  protected void handleSlaveQuit(int status) {", "-    debug.logStart();", "-    // Only restart the slave if _restart is true", "-//    Utilities.showDebug(\"MainJVM: slaveJVM has quit with status \" + status + \" _workDir = \" + _workDir + ", "-//      \" _cleanlyRestarting = \" + _cleanlyRestarting);", "-    if (_restart) {", "-      // We have already fired this event if we are cleanly restarting", "-      if (! _cleanlyRestarting) _interactionsModel.interpreterResetting();", "-//      Utilities.showDebug(\"MainJVM: calling startInterpreterJVM()\");", "-      startInterpreterJVM();", "-    if (!_cleanlyRestarting) _interactionsModel.replCalledSystemExit(status);", "-    _cleanlyRestarting = false;", "-    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcc6aca4b034c6ab6db87406720b7bd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "    public void killInterpreter(File wd)", "signatureAfterChange": "    public void killInterpreter(File wd)", "diff": ["+    boolean restart;", "-        _workDir = wd;", "-        _restart = (wd != null);", "-        _cleanlyRestarting = true;", "-        if (_restart) _interactionsModel.interpreterResetting();", "-      }", "-    /* Dropped lock before making remote call. */", "-    try { quitSlave(); } // new slave JVM is restarted by call on startInterpreterJVM on death of current slave", "+      _workDir = wd;", "+      _restart = (wd != null);", "+      _cleanlyRestarting = true;", "+      restart = _restart;", "+    }", "+      ", "+    /* Dropping lock before performing operations on the interactions document/pane and making remote call. */", "+    try { ", "+      if (restart) _interactionsModel.interpreterResetting();", "+      quitSlave(); ", "+    } // new slave JVM is restarted by call on startInterpreterJVM on death of current slave"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f94fb688664b8d9bed961a9f7ebca5dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void killInterpreter(File wd)", "signatureAfterChange": "   public void killInterpreterJVM(File wd)", "diff": ["+   */", "+  public void killInterpreterJVM(File wd) {", "+    debug.logStart();", "+    _startupComplete.attemptEnsureSignaled();", "+    boolean restart = (wd != null);", "+    InterpreterJVMRemoteI current;", "+    synchronized (_startupLock) {", "+      _workingDir = wd;", "+      _restart = restart;", "+      _cleanlyRestarting = true;", "+      current = _interpreterJVM.getAndSet(null);", "+    }", "+    if (current != null) {", "+      if (restart) _interactionsModel.interpreterResetting();", "+      quitSlave();", "+      // new slave JVM is started by in handleSlaveQuit()", "+    }", "+    debug.logEnd();", "+  }", "-  ", "-  public void killInterpreter(File wd) {", "-    boolean restart;", "-    synchronized(_masterJVMLock) {", "-      _workDir = wd;", "-      _restart = (wd != null);", "-      _cleanlyRestarting = true;", "-      restart = _restart;", "-    }", "-    ", "-    /* Dropping lock before performing operations on the interactions document/pane and making remote call. */", "-    try { ", "-      if (restart) _interactionsModel.interpreterResetting();", "-      quitSlave(); ", "-    } // new slave JVM is restarted by call on startInterpreterJVM on death of current slave", "-    catch (RemoteException e) {", "-      _log.log(this + \"could not connect to the interpreterJVM while trying to kill it.  Threw \" + e);", "-    }"]}], "num": 29235}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35f3b946abaa1a93b6b9421e78cd642b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a14055216138bf26d27546232c4be15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/Option.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 3, "signatureBeforeChange": "     T remove(DefaultOptionMap om)", "signatureAfterChange": "      void notifyListeners(Configuration config, T val)", "diff": ["-    /** the destructor for a mapping in the magic-typed hashtable. */", "-    T remove(DefaultOptionMap om) { return map.remove(om); }", "+    void notifyListeners(Configuration config, T val) {", "+\tVector<OptionListener<T>> v = listeners.get(config);", "+\tif(v==null) return; // no listeners", "+\tOptionEvent e = new OptionEvent<T>(this,val);", "+\tint size = v.size();", "+\tfor(int i = 0; i < size; i++) {", "+\t    v.elementAt(i).optionChanged(e);", "+\t}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b762c1983eee041dd15085a5d1d89e7b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int replaceAll()", "signatureAfterChange": "   public int replaceAll()", "diff": ["-    */", "-    public int replaceAll() { return _state.replaceAll(); }", "+   */", "+  public int replaceAll() {", "+    if (_searchAllDocuments) {", "+      AbstractDocumentInterface startDoc = _doc;", "+      _searchAllDocuments = false;", "+      // replace all in the first document", "+      int count = _replaceAllInCurrentDoc();", "+      _doc = _docIterator.getNextDocument(_doc);", "+      int n = _docIterator.getDocumentCount();", "+      for (int i=1; i < n; i++) {", "+        // replace all in the rest of the documents", "+        count += _replaceAllInCurrentDoc();", "+        _doc = _docIterator.getNextDocument(_doc);", "+      }", "+      _searchAllDocuments = true;", "+      return count;", "+    }", "+    else return _replaceAllInCurrentDoc();", "+  }"]}], "num": 30813}
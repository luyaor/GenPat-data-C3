{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9cb42c150dee0e13b017d4a4af52a58", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57acc8c1f3d7efafb31ed3fc79b6058b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessSequence.java", "commitBeforeChange": "08dc50acc6315b4a29619a0eb44a9574f8e58999", "commitAfterChange": "fdb0eba529d65804f971cdb52c673713ef0d4616", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   protected void connectProcess(Process p)", "signatureAfterChange": "   protected void connectProcess(Process p)", "diff": ["-    StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+_index,", "-                                                      p.getInputStream(),", "-                                                      _combinedStdOutStream,", "-                                                      false,", "-                                                      PROCESS_SEQUENCE_THREAD_GROUP);", "-    _redirectors.add(r);", "-    r.start();", "-    r = new StreamRedirectThread(\"stderr Redirector \"+_index,", "-                                 p.getErrorStream(),", "-                                 _combinedStdErrStream,", "-                                 false,", "-                                 PROCESS_SEQUENCE_THREAD_GROUP);", "-    _redirectors.add(r);", "-    r.start();", "+    if (_stdOutRedirector==null) {", "+      _stdOutRedirector = new StreamRedirectThread(\"stdout Redirector \"+_index,", "+                                                   p.getInputStream(),", "+                                                   _combinedStdOutStream,", "+                                                   false/*close*/,", "+                                                   new ProcessSequenceThreadGroup(_combinedStdErrStream),", "+                                                   true/*keepRunning*/);", "+      _stdOutRedirector.start();", "+    }", "+    else {", "+      _stdOutRedirector.setInputStream(p.getInputStream());", "+    }", "+    if (_stdErrRedirector==null) {", "+      _stdErrRedirector = new StreamRedirectThread(\"stderr Redirector \"+_index,", "+                                                   p.getErrorStream(),", "+                                                   _combinedStdErrStream,", "+                                                   false/*close*/,", "+                                                   new ProcessSequenceThreadGroup(_combinedStdErrStream),", "+                                                   true/*keepRunning*/);", "+      _stdErrRedirector.start();", "+    }", "+    else {", "+      _stdErrRedirector.setInputStream(p.getErrorStream());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c02ddb59ba24ad991a351b7f80129c43", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessSequence.java", "commitBeforeChange": "91061a0d47469bc7d07ba5fa464f35ab97f70dbb", "commitAfterChange": "296befb4a12a5cc35f5f70ed97c5006f2e9fc8bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ProcessSequence(ProcessCreator[] pcs)", "signatureAfterChange": "   public ProcessSequence(ProcessCreator[] pcs)", "diff": ["+    ", "+    _debugInputStream = new PipedInputStream();", "+    try {", "+      _debugOutputStream = new PipedOutputStream(_debugInputStream);", "+      _debugInputStream.connect(_debugOutputStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+     _combinedInputJoinedWithDebugStream = new JoinInputStream(_combinedInputStream, _debugInputStream);", "+    _debugOutput = new PrintWriter(new OutputStreamWriter(_debugOutputStream));", "+", "+              GeneralProcessCreator.LOG.log(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "-              // TODO-MGR: find a way to record the error in the ExternalProcessPanel (mgricken)", "-//              DrJavaErrorHandler.record(e);", "+              _debugOutput.println(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "+              _debugOutput.flush();", "+      GeneralProcessCreator.LOG.log(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "-      // TODO-MGR: find a way to record the error in the ExternalProcessPanel (mgricken)", "-//      DrJavaErrorHandler.record(e);", "+      _debugOutput.println(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "+      _debugOutput.flush();", "+//    _debugOutput.println(\"\\n\\nProcessSequence started\\n\\n\");", "+//    _debugOutput.flush();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c03a0b3e9e8cb49a04d1986c03fcbed5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessChain.java", "commitBeforeChange": "08dc50acc6315b4a29619a0eb44a9574f8e58999", "commitAfterChange": "fdb0eba529d65804f971cdb52c673713ef0d4616", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ProcessChain(ProcessCreator[] pcs)", "signatureAfterChange": "   public ProcessChain(ProcessCreator[] pcs)", "diff": ["+", "+    _combinedInputStream = new PipedInputStream();", "+    try {", "+      _combinedStdOutStream = new PipedOutputStream(_combinedInputStream);", "+      _combinedInputStream.connect(_combinedStdOutStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+    _combinedErrorStream = new PipedInputStream();", "+    try {", "+      _combinedStdErrStream = new PipedOutputStream(_combinedErrorStream);", "+      _combinedErrorStream.connect(_combinedStdErrStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+", "-                                                        PROCESS_CHAIN_THREAD_GROUP);", "-      _stdOutRedirectors.add(r);", "+                                                        new ProcessChainThreadGroup(this));", "+      _redirectors.add(r);", "-                                   PROCESS_CHAIN_THREAD_GROUP);", "-      _stdErrRedirectors.add(r);", "+                                   new ProcessChainThreadGroup(this));", "+      _redirectors.add(r);", "+    // now pipe output from the last process into our output streams", "+    StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+(_processes.length-1),", "+                                                      _processes[_processes.length-1].getInputStream(),", "+                                                      _combinedStdOutStream,", "+                                                      new ProcessChainThreadGroup(this));", "+    _redirectors.add(r);", "+    r.start();", "+    r = new StreamRedirectThread(\"stderr Redirector \"+(_processes.length-1),", "+                                 _processes[_processes.length-1].getErrorStream(),", "+                                 _combinedStdErrStream,", "+                                 new ProcessChainThreadGroup(this));", "+    _redirectors.add(r);", "+    r.start();"]}], "num": 3969}
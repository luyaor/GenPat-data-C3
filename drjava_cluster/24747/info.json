{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aad8935e853213e26dfa0e43cf6fb930", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ce4e0322e5468f457404a701df35041", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "8a3aaf6e3fe6fafb27249a8ad4b2c013ef4ae05a", "commitAfterChange": "102797244429ae58868d0037b49467f5a00bbd6a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private void _setUpToolBar()", "signatureAfterChange": "   private void _setUpToolBar()", "diff": ["-    _toolBar.add(_printAction);", "+    // Print and Close buttons", "+    JButton printButton = new JButton(\"Print...\",_getIcon(\"Print16.gif\"));", "+    printButton.setToolTipText(\"Print this document\");", "+    printButton.addActionListener(_printListener);", "+    _toolBar.add(printButton);", "-", "-    _toolBar.addSeparator();", "-", "+    ", "+    // Horizontal Gap", "+    _toolBar.add(Box.createHorizontalGlue());", "+  ", "+    // Navigation components", "+    ", "-    _toolBar.add(_pageTextField);", "-    _toolBar.add(of);", "-", "-", "+    JComponent c = _pageChanger.getComponent();", "+    Dimension d = c.getPreferredSize();", "+    d = new Dimension(100,d.height);", "+    c.setMaximumSize(d);", "+    c.setPreferredSize(d);", "+    c.setMinimumSize(d);", "+    c.setToolTipText(\"Goto Page\");", "+    _toolBar.add(c);", "+    _toolBar.add(of);   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d593df1191ad5cf484ed65aa01b9192", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static List<List<List<String>>> commandLineToLists(String cmdline)", "signatureAfterChange": "   public static List<List<List<String>>> commandLineToLists(String cmdline)", "diff": ["-    final String ESCAPED_SPACE = new Character((char)0x1B).toString()+\" \";", "+    final String ESCAPE = String.valueOf((char)0x1B);", "+    final String ESCAPED_SPACE = ESCAPE+\" \";", "+    // also add escaped path separator (';' or ':') as keyword, but treat it differently", "+    final String ESCAPED_PATH_SEPARATOR = ESCAPE+java.io.File.pathSeparator;", "+    tok.addKeyword(ESCAPED_PATH_SEPARATOR); // escaped path separator", "+    // also add escaped process separator (':' or ';') as keyword, but treat it differently", "+    final String ESCAPED_PROCESS_SEPARATOR = ESCAPE+ProcessChain.PROCESS_SEPARATOR;", "+    tok.addKeyword(ESCAPED_PROCESS_SEPARATOR); // escaped process separator", "+    // also add escaped pipe ('|') as keyword, but treat it differently", "+    final String ESCAPED_PIPE_SEPARATOR = ESCAPE+ProcessChain.PIPE_SEPARATOR;", "+    tok.addKeyword(ESCAPED_PIPE_SEPARATOR); // escaped pipe", "-          else if (n.equals(ESCAPED_SPACE)) {", "-            // escaped whitespace", "-            sb.append(ESCAPED_SPACE);", "+          else if (n.equals(ESCAPED_SPACE) ||", "+                   n.equals(ESCAPED_PATH_SEPARATOR) ||", "+                   n.equals(ESCAPED_PROCESS_SEPARATOR) ||", "+                   n.equals(ESCAPED_PIPE_SEPARATOR)) {", "+            // escaped characters", "+            sb.append(n);"]}], "num": 24747}
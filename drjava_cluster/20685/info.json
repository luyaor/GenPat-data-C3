{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6a7b2cbcd6f046414b5b021308aaeef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "993320b95e57e3204b2ef38252e9c29b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "420215825e681a0b291c00f3cf7aa39a982faffe", "commitAfterChange": "c657da4404f6681bffc368045343d4bc04e51744", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public String getFilename()", "signatureAfterChange": "   public DefinitionsDocument(GlobalEventNotifier notifier, CompoundUndoManager undoManager)", "diff": ["+   */", "+  public DefinitionsDocument(GlobalEventNotifier notifier, CompoundUndoManager undoManager) {", "+    super();", "+    _notifier = notifier;", "+    int ind = DrJava.getConfig().getSetting(INDENT_LEVEL).intValue();", "+    _indenter = new Indenter(ind);", "+    _initNewIndenter();", "+    _init();", "+    _undoManager = undoManager;", "+  }", "-  public String getFilename() {", "-    String filename = \"(Untitled)\";", "-    try {", "-      File file = getFile();", "-      filename = file.getName();", "-    }", "-    catch (IllegalStateException ise) {", "-      // No file, leave as \"untitled\"", "-    }", "-    catch (FileMovedException fme) {", "-      // Recover, even though file has been deleted", "-      File file = fme.getFile();", "-      filename = file.getName();", "-    }", "-    return filename;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b069811204b5bdfd1679cea3b16bd475", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     @Override public Type visit(ObjectMethodCall node)", "signatureAfterChange": "     @Override public Type visit(ObjectMethodCall node)", "diff": ["-          Expression translation;", "-          if (node instanceof PolymorphicObjectMethodCall) {", "-            translation =", "-              new PolymorphicStaticMethodCall((ReferenceTypeName) resolved, node.getMethodName(), node.getArguments(),", "-                                              ((PolymorphicObjectMethodCall) node).getTypeArguments(),", "-                                              node.getSourceInfo());", "-          }", "-          else {", "-            translation = new StaticMethodCall((ReferenceTypeName) resolved, node.getMethodName(),", "-                                               node.getArguments(), node.getSourceInfo());", "-          }", "+          Expression translation = new StaticMethodCall((ReferenceTypeName) resolved, node.getTypeArgs(),", "+                                                        node.getMethodName(), node.getArguments(),", "+                                                        node.getSourceInfo());", "-      ", "-      Iterable<Type> targs = IterUtil.empty();", "-      if (node instanceof PolymorphicObjectMethodCall) {", "-        targs = checkTypeNameList(((PolymorphicObjectMethodCall) node).getTypeArguments());", "-      }", "+      Iterable<Type> targs = checkTypeNameList(node.getTypeArgs().unwrap(Collections.<TypeName>emptyList())); "]}], "num": 20685}
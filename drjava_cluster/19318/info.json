{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60703e34475d58c4dc6e9d66877d3164", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf4e0aeb86fb3ba9cd0d5cbb4c362da6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "a1bb596f611e797f635c25509a0e5fd84bbde0d1", "commitAfterChange": "1ad2cf8823fa75a1b2d677ad26440a5bc60f0265", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public static void main(final String[] args)", "signatureAfterChange": "      public static void main(final String[] args)", "diff": ["-  ", "-      //      MainFrame mf = new MainFrame();", "+      // The MainFrame *must* be constructed after the compiler setup process has", "+      // occurred; otherwise, the list of compilers in the UI will be wrong.", "+      // At some point this should be fixed, which would involve making the", "+      // CompilerRegistry notify listeners when there is a change in the list of", "+      // available compilers.", "+      MainFrame mf = new MainFrame();", "-      openCommandLineFiles(_mf, args);", "-      _mf.show();", "+      openCommandLineFiles(mf, args);", "+      mf.show();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de970af1e1e944ee7d3d3c22693fd007", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "c750f23eb2b9150b4fb75772deac7c17626a7d1c", "commitAfterChange": "74e4ff93e186e54c8f3a2ca5764d77cf5247e4cc", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 209, "signatureBeforeChange": "   protected void _docAppend(ConsoleDocument doc, String s, String style)", "signatureAfterChange": "   protected void _docAppend(ConsoleDocument doc, String s, String style)", "diff": ["-    synchronized(_systemWriterLock) {", "+    /** A lock object to prevent print calls from flooding the JVM, ensuring the UI remains responsive. */", "+    final Object systemWriterLock = new Object();", "+    ", "+    synchronized(systemWriterLock) {", "-        ", "-        // Wait to prevent being flooded with println's", "-        _systemWriterLock.wait(WRITE_DELAY);", "+        systemWriterLock.wait(WRITE_DELAY);  // Wait to prevent being print flooding", "-      catch (InterruptedException e) {", "-        // It's ok, we'll go ahead and resume", "-      }", "+      catch (InterruptedException e) { /* Ignore and resume */ }"]}], "num": 19318}
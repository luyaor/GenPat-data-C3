{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b383f44b978f3eef305dc7162149c16", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183f646eaf6ac1b9a5485c9b0a399374", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/ClassPathManager.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private ClassLoader buildClassLoader(List<ClassPathEntry>locpe)", "signatureAfterChange": "   private ClassLoader buildClassLoader(List<File> path)", "diff": ["-  private ClassLoader buildClassLoader(List<ClassPathEntry>locpe) {", "-    ClassLoader c = new DeadClassLoader();", "-    for(ClassPathEntry cpe: locpe) { c = cpe.getClassLoader(c); }", "-    return c;", "-  }", "+  private ClassLoader buildClassLoader(List<File> path) {", "+    List<URL> urls = new LinkedList<URL>();", "+    for (File f : path) {", "+      try {", "+        URL u = f.toURI().toURL();", "+        urls.add(u);", "+      }", "+      catch (MalformedURLException e) { error.log(\"Can't convert file to URL\", e); }", "+    }", "+    return new URLClassLoader(urls.toArray(new URL[urls.size()]), new DeadClassLoader());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caab8ee706ba1c445ce42d232625024c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/ClassPathManager.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private ClassLoader buildClassLoader(List<File> path)", "signatureAfterChange": "      public synchronized Iterable<File> getClassPath()", "diff": ["-  /** Builds a new classloader for the list of classpath entries. */", "-  private ClassLoader buildClassLoader(List<File> path) {", "-    List<URL> urls = new LinkedList<URL>();", "-    for (File f : path) {", "-      try {", "-        URL u = f.toURI().toURL();", "-        urls.add(u);", "-      }", "-      catch (MalformedURLException e) { error.log(\"Can't convert file to URL\", e); }", "-    }", "-    return new URLClassLoader(urls.toArray(new URL[urls.size()]), new DeadClassLoader());", "-  }", "+  ", "+  public synchronized Iterable<File> getClassPath() { return _fullPath; }"]}], "num": 20941}
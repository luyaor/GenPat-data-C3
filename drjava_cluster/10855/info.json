{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9eab9d8f4e25bf7049624be3e09d456b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29ccfd1f88bb4876046c31b215ec77b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "90ef69282c46168e0825e1541e1aac142b594af9", "commitAfterChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public synchronized void testMultiThreadedSetCurrentThread()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testMultiThreadedSetCurrentThread()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    BreakpointTestListener debugListener = new BreakpointTestListener();", "-   ", "-    // Compile the class", "-    OpenDefinitionsDocument doc = doCompile(SUSPEND_CLASS, tempFile());", "-    _debugger.addListener(debugListener);", "-    // Start debugger", "-    synchronized(_notifierLock) {", "-      _debugger.startup();", "-      _waitForNotifies(1);", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertDebuggerStartedCount(1);", "-    debugListener.assertDebuggerShutdownCount(0);", "-    assertTrue(\"Debug Manager should be ready\", _debugger.isReady());", "+     BreakpointTestListener debugListener = new BreakpointTestListener();", "-    int index = SUSPEND_CLASS.indexOf(\"int a = 1;\");", "-    _debugger.toggleBreakpoint(doc,index,5);", "-    ", "-     // Run the main() method, hitting breakpoints", "-    synchronized(_notifierLock) {", "-      interpretIgnoreResult(\"java Suspender\");", "-      _waitForNotifies(3); // suspended, updated, breakpointReached", "-      _notifierLock.wait();", "-    }    ", "-    final DebugThreadData thread = new DebugThreadData(_debugger.getCurrentThread());", "-    synchronized(_notifierLock){", "-      _debugger.resume();", "-      /** _debugger.setCurrentThread(...); ", "-       * must be executed in another thread because otherwise the notifies", "-       * will be received before the _notifierLock is released", "-       */", "-      new Thread() {", "-        public void run(){", "-          doSetCurrentThread(thread);", "-        }", "-      }.start();", "-      _waitForNotifies(2);  // suspended, updated", "-      _notifierLock.wait();", "-    }", "-    // Ensure thread suspended", "-    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "-    ", "-      // Close doc and make sure breakpoints are removed", "-    _model.closeFile(doc);", "-    ", "-    // Shutdown the debugger", "-    if (printMessages) System.out.println(\"Shutting down...\");", "-    synchronized(_notifierLock) {", "-      _debugger.shutdown();", "-      _waitForNotifies(1);  // shutdown", "-      _notifierLock.wait();", "-    }", "-    ", "-    debugListener.assertDebuggerShutdownCount(1);  //fires", "-    if (printMessages) System.out.println(\"Shut down.\");", "-    _debugger.removeListener(debugListener);", "+     // Compile the class", "+     OpenDefinitionsDocument doc = doCompile(MONKEY_CLASS, tempFile());", "+     _debugger.addListener(debugListener);", "+     // Start debugger", "+     synchronized(_notifierLock) {", "+       _debugger.startup();", "+       _waitForNotifies(1);", "+       _notifierLock.wait();", "+     }", "+     debugListener.assertDebuggerStartedCount(1);", "+     debugListener.assertDebuggerShutdownCount(0);", "+     assertTrue(\"Debug Manager should be ready\", _debugger.isReady());", "+     ", "+     int index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I\\'m a thread! Yeah!\\\");\");", "+     _debugger.toggleBreakpoint(doc,index,11);", "+     index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"James likes bananas!\\\");\");", "+     _debugger.toggleBreakpoint(doc,index,17);", "+     ", "+      // Run the main() method, hitting breakpoints", "+     synchronized(_notifierLock) {", "+       interpretIgnoreResult(\"java Monkey\");", "+       _waitForNotifies(6); // suspended, updated, breakpointReached", "+       _notifierLock.wait();", "+     }    ", "+     DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "+     DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "+     synchronized(_notifierLock){", "+       _asynchDoSetCurrentThread(threadB);", "+       _waitForNotifies(2);  // updated, interpreterChanged", "+       _notifierLock.wait();", "+     }", "+     ", "+     DebugThreadData thread1 = new DebugThreadData(_debugger.getThreadAt(1));", "+     DebugThreadData thread2 = new DebugThreadData(_debugger.getCurrentThread());", "+     ", "+     /** make sure threads have switched places */", "+     assertTrue(thread1.getUniqueID() == threadA.getUniqueID());", "+     assertTrue(thread2.getUniqueID() == threadB.getUniqueID());", "+     ", "+       // Close doc and make sure breakpoints are removed", "+     _model.closeFile(doc);", "+     ", "+     // Shutdown the debugger", "+     if (printMessages) System.out.println(\"Shutting down...\");", "+     InterpretListener interpretListener = new InterpretListener();", "+     _model.addListener(interpretListener);", "+     synchronized(_notifierLock) {", "+       //_asynchResume();", "+       //_asynchResume();", "+       _debugger.shutdown();", "+       _waitForNotifies(2);  // shutdown, interactionEnded", "+       _notifierLock.wait();", "+     }", "+     ", "+     debugListener.assertDebuggerShutdownCount(1);  //fires", "+     if (printMessages) System.out.println(\"Shut down.\");", "+     _model.removeListener(interpretListener);", "+     _debugger.removeListener(debugListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f1fdc90a4b1e5b83a97a1c5693a90f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "5402d816f4ee865f7ec73de4093cafaa0c215bb0", "commitAfterChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static Test suite()", "signatureAfterChange": "   public void testStaticFieldsConsistent()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-  public static Test suite() {", "-    return new TestSuite(DebugTest.class);", "-  }", "+   */", "+  public void testStaticFieldsConsistent()", "+    throws DebugException, BadLocationException, DocumentAdapterException,", "+    IOException, InterruptedException", "+  {", "+    if (printMessages) {", "+      System.out.println(\"----testStaticFieldsConsistent----\");", "+    }", "+    StepTestListener debugListener = new StepTestListener();", "+    ", "+    // Compile the class", "+    File file = new File(_tempDir, \"DrJavaDebugStaticField.java\");", "+    OpenDefinitionsDocument doc = doCompile(CLASS_WITH_STATIC_FIELD, file);", "+    ", "+    _debugger.addListener(debugListener);", "+", "+    // Start debugger", "+    synchronized(_notifierLock) {", "+      _debugger.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(1);", "+    ", "+    _debugger.toggleBreakpoint(doc,CLASS_WITH_STATIC_FIELD.indexOf(\"System.out.println\"), 4);", "+    debugListener.assertBreakpointSetCount(1);", "+", "+    // Run the foo() method, hitting breakpoint", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"java DrJavaDebugStaticField\");", "+      _waitForNotifies(6);  // (suspended, updated, breakpointReached) *2", "+      _notifierLock.wait();", "+    }", "+", "+    DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "+    DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "+", "+     if (printMessages) {", "+      System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+    }", "+      ", "+    // Ensure breakpoint is hit", "+    debugListener.assertBreakpointReachedCount(2);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(2);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertCurrThreadResumedCount(0);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertEquals(\"x has correct value at start\", \"0\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"assigning x succeeds\", \"5\", interpret(\"DrJavaDebugStaticField.x = 5\"));", "+    assertEquals(\"assignment reflected in this\", \"5\", interpret(\"this.x\"));", "+", "+    // Step over once", "+    synchronized(_notifierLock){", "+      _asynchStep(Debugger.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(3);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(3);  // fires", "+    debugListener.assertBreakpointReachedCount(2);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertInteractionsContains(\"x == 5\");", "+    assertEquals(\"x retains correct value after step\", \"5\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"this has correct value for x after step\", \"5\", interpret(\"this.x\"));", "+", "+    // Step over again", "+    synchronized(_notifierLock) {", "+      _asynchStep(Debugger.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) {", "+      System.out.println(\"****\"+getInteractionsText());", "+    }", "+    debugListener.assertStepRequestedCount(2);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(2); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(4);  // fires", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(4);  // fires", "+    debugListener.assertBreakpointReachedCount(2);", "+    assertEquals(\"x has correct value after increment\", \"6\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"this has correct value for x after increment\", \"6\", interpret(\"this.x\"));", "+", "+    synchronized(_notifierLock){", "+      _asynchDoSetCurrentThread(threadB);", "+      _waitForNotifies(2);  // updated, suspended", "+      _notifierLock.wait();", "+    }", "+    assertEquals(\"x has correct value in other thread\", \"6\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"this has correct value for x in other thread\", \"6\", interpret(\"this.x\"));", "+", "+    // Close doc and make sure breakpoints are removed", "+    _model.closeFile(doc);", "+    debugListener.assertBreakpointRemovedCount(1);  //fires (no waiting)", "+    ", "+    // Shutdown the debugger", "+    if (printMessages) {", "+      System.out.println(\"Shutting down...\");", "+    }", "+    synchronized(_notifierLock) {", "+      _debugger.shutdown();", "+      _waitForNotifies(1);  // shutdown", "+      _notifierLock.wait();", "+    }", "+    ", "+    debugListener.assertDebuggerShutdownCount(1);  //fires", "+    if (printMessages) {", "+      System.out.println(\"Shut down.\");", "+    }", "+    _debugger.removeListener(debugListener);", "+  }"]}], "num": 10855}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "185bace7762246f74d5c672ec0f20f41", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11c457bbe436a6d7670b4ef32decde87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "          public void test_forModifiersAndVisibility()", "signatureAfterChange": "          public void test_forModifiersAndVisibility()", "diff": ["-        new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"public\", \"private\"});", "+        new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\", \"private\"});", "-      testMav = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"public\", \"abstract\"});", "+      testMav = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\", \"abstract\"});", "-      testMav = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"abstract\", \"final\"});", "+      testMav = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"abstract\", \"final\"});", "-      testMav = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"final\", \"abstract\"});", "+      testMav = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"final\", \"abstract\"});", "-      testMav = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"volatile\", \"final\"});", "+      testMav = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"volatile\", \"final\"});", "-      testMav = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"static\", \"final\", \"static\"});", "+      testMav = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"static\", \"final\", \"static\"});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a53e57308d75579a86838f9d2785da8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "      public void testFindClassReference()", "signatureAfterChange": "      public void testFindClassReference()", "diff": ["-      assertEquals(\"Should return string\", string, _b.findClassReference(null, \"java.lang.String\", new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return string\", string,", "+                   _b.findClassReference(null, \"java.lang.String\", new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return null\", null, _b.findClassReference(null, \"non-existant\", new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return null\", null, ", "+                   _b.findClassReference(null, \"non-existant\", new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return string\", string, _b.findClassReference(new PackageData(\"java.lang\"), \"String\", new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return string\", string,", "+                   _b.findClassReference(new PackageData(\"java.lang\"), \"String\", new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return null\", null, _b.findClassReference(new PackageData(\"nonsense\"), \"non-existant\", new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return null\", null, ", "+                   _b.findClassReference(new PackageData(\"nonsense\"), \"non-existant\", ", "+                                         new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return inner\", inner, _b.findClassReference(string, \"Inner\", new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return inner\", inner,", "+                   _b.findClassReference(string, \"Inner\", new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return null\", null, _b.findClassReference(string, \"non-existant\", new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return null\", null, ", "+                   _b.findClassReference(string, \"non-existant\", new NullLiteral(SourceInfo.NO_INFO)));"]}], "num": 31295}
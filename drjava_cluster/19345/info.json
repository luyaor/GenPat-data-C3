{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47e23bed4c9f36f60b5c9ac4c1405d27", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1a09bc6c00cf7e8f27ad049763c72b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "66067a3f1d3a007b2ddad388dba56bb3c6f9df80", "commitAfterChange": "81d6db8320cf4667127c44e5b1de134b58b6f3dc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Class<?> visit(SwitchStatement node)", "signatureAfterChange": "   public Class<?> visit(SwitchStatement node)", "diff": ["-    try {", "-      // Visits the components of this node", "-      Expression exp = node.getSelector();", "-      Class<?> c = exp.acceptVisitor(this);", "-      if (c != char.class      && c != byte.class && c != short.class && c != int.class  && ", "-          c != Character.class && c != Byte.class && c != Short.class && c != Integer.class &&", "-          (TigerUtilities.isTigerEnabled() && (c.getSuperclass() != Class.forName(\"java.lang.Enum\")))) {", "-        //!TigerUtilities.isEnum(c) ) {", "-        node.setProperty(NodeProperties.ERROR_STRINGS,", "-                         new String[] { c.getName() });", "-        throw new ExecutionError(\"selector.type\", node);", "-      }", "-      // unbox it if needed", "-      if (c == Character.class || c == Byte.class || c == Short.class || c == Integer.class) {", "-        node.setSelector(_unbox(exp, c));", "-      }", "-      ", "-      // Check the type of the case labels", "-      Iterator<SwitchBlock> it = node.getBindings().iterator();", "-      while (it.hasNext()) {", "-        SwitchBlock sb = it.next();", "-        sb.acceptVisitor(this);", "-        exp = sb.getExpression();", "-        if (exp != null) {", "-          Class<?> lc = NodeProperties.getType(exp);", "-          if (lc != char.class &&  lc != byte.class &&", "-              lc != short.class && lc != int.class &&", "-              (TigerUtilities.isTigerEnabled() && (lc.getSuperclass() != Class.forName(\"java.lang.Enum\")))) {", "-            //!TigerUtilities.isEnum(lc)) {", "-            node.setProperty(NodeProperties.ERROR_STRINGS,", "-                             new String[] { lc.getName() });", "-            throw new ExecutionError(\"switch.label.type\", node);", "-          }", "-          if (c != lc) {", "-            Number n = null;", "-            if (exp.hasProperty(NodeProperties.VALUE)) {", "-              Object cst = exp.getProperty(NodeProperties.VALUE);", "-              if (lc == char.class) {", "-                n = new Integer(((Character)cst).charValue());", "-              } else {", "-                n = (Number)cst;", "-              }", "+    // Visits the components of this node", "+    Expression exp = node.getSelector();", "+    Class<?> c = exp.acceptVisitor(this);", "+    if (c != char.class      && c != byte.class && c != short.class && c != int.class  && ", "+        c != Character.class && c != Byte.class && c != Short.class && c != Integer.class &&", "+        // (TigerUtilities.isTigerEnabled() && (c.getSuperclass() != Class.forName(\"java.lang.Enum\")))) {", "+        !TigerUtilities.isEnum(c) ) {", "+      node.setProperty(NodeProperties.ERROR_STRINGS,", "+                       new String[] { c.getName() });", "+      throw new ExecutionError(\"selector.type\", node);", "+    }", "+    // unbox it if needed", "+    if (c == Character.class || c == Byte.class || c == Short.class || c == Integer.class) {", "+      node.setSelector(_unbox(exp, c));", "+    }", "+    ", "+    // Check the type of the case labels", "+    Iterator<SwitchBlock> it = node.getBindings().iterator();", "+    while (it.hasNext()) {", "+      SwitchBlock sb = it.next();", "+      sb.acceptVisitor(this);", "+      exp = sb.getExpression();", "+      if (exp != null) {", "+        Class<?> lc = NodeProperties.getType(exp);", "+        if (lc != char.class &&  lc != byte.class &&", "+            lc != short.class && lc != int.class &&", "+            //  (TigerUtilities.isTigerEnabled() && (lc.getSuperclass() != Class.forName(\"java.lang.Enum\")))) {", "+            !TigerUtilities.isEnum(lc)) {", "+          node.setProperty(NodeProperties.ERROR_STRINGS,", "+                           new String[] { lc.getName() });", "+          throw new ExecutionError(\"switch.label.type\", node);", "+        }", "+        if (c != lc) {", "+          Number n = null;", "+          if (exp.hasProperty(NodeProperties.VALUE)) {", "+            Object cst = exp.getProperty(NodeProperties.VALUE);", "+            if (lc == char.class) {", "+              n = new Integer(((Character)cst).charValue());", "+            } else {", "+              n = (Number)cst;", "-            if (c == byte.class) {", "-              if (exp.hasProperty(NodeProperties.VALUE)) {", "-                if (n.byteValue() != n.intValue()) {", "-                  node.setProperty(NodeProperties.ERROR_STRINGS,", "-                                   new String[] { c.getName() });", "-                  throw new ExecutionError", "-                    (\"switch.label.type\", node);", "-                }", "-              } else {", "-                throw new ExecutionError(\"switch.label.type\", node);", "-              }", "-            } else if (c == short.class || c == char.class) {", "-              if (exp.hasProperty(NodeProperties.VALUE)) {", "-                if (n.shortValue() != n.intValue()) {", "-                  node.setProperty(NodeProperties.ERROR_STRINGS,", "-                                   new String[] { c.getName() });", "-                  throw new ExecutionError", "-                    (\"switch.label.type\", node);", "-                }", "-              } else if (lc == int.class) {", "+          }", "+          if (c == byte.class) {", "+            if (exp.hasProperty(NodeProperties.VALUE)) {", "+              if (n.byteValue() != n.intValue()) {", "-                throw new ExecutionError(\"switch.label.type\", node);", "+                throw new ExecutionError", "+                  (\"switch.label.type\", node);", "+            } else {", "+              throw new ExecutionError(\"switch.label.type\", node);", "+            }", "+          } else if (c == short.class || c == char.class) {", "+            if (exp.hasProperty(NodeProperties.VALUE)) {", "+              if (n.shortValue() != n.intValue()) {", "+                node.setProperty(NodeProperties.ERROR_STRINGS,", "+                                 new String[] { c.getName() });", "+                throw new ExecutionError", "+                  (\"switch.label.type\", node);", "+              }", "+            } else if (lc == int.class) {", "+              node.setProperty(NodeProperties.ERROR_STRINGS,", "+                               new String[] { c.getName() });", "+              throw new ExecutionError(\"switch.label.type\", node);", "-    } ", "-    // this try/catch block should in fact not be there, but to use", "-    // TigerUtilities.isEnum(c) instead if the value of the ENUM flag", "-    // was known (see 2 commented lines above)", "-    catch(ClassNotFoundException e){", "-      throw new ExecutionError(\"Tiger is enabled, but cannot find class java.lang.Enum! Please contact the DynamicJava/DrJava team (javaplt@cs.rice.edu).\");", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd21b1d0af26a709eae4d6fd017ff724", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "b79563bf1d51671314589f6c744a87acc54fe8fa", "commitAfterChange": "517a134496ea28d3d08f7cd449813e2a756de857", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void prevInteraction()", "signatureAfterChange": "   public void prevInteraction()", "diff": ["+    // Only move back if we haven't passed the current interaction", "+    if (!_passedCurrent) {", "+      _currentInteraction--;", "+    }", "+    _showCurrentInteraction();", "+    _passedCurrent = false;", "+  }", "-      _doc.insertText(_doc.getDocLength(), _interactions.get(--_currentInteraction), _doc.DEFAULT_STYLE);"]}], "num": 19345}
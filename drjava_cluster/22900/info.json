{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e90179870b8e3ab6a7cd38d29ef01bb9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "254980fc07482c89dbe71fca95760dbd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 83, "signatureBeforeChange": "   @Override public Type visit(SimpleAssignExpression node)", "signatureAfterChange": "     @Override public Type visit(SimpleAssignExpression node)", "diff": ["-   */", "-  @Override public Type visit(SimpleAssignExpression node) {", "-    Expression left = node.getLeftExpression();", "-    Type result = left.acceptVisitor(this);", "-    Type rightT = node.getRightExpression().acceptVisitor(this);", "-    ", "-    if (!hasVariableType(left)) {", "-      throw new ExecutionError(\"left.expression\", node);", "-    }", "-    if (hasVariable(left) && getVariable(left).isFinal() ||", "-        hasField(left) && getField(left).isFinal()) {", "-      throw new ExecutionError(\"cannot.modify\", node);", "-    }", "-", "-    try {", "-      Expression newRight = ts.assign(getVariableType(left),", "-                                      node.getRightExpression());", "-      node.setRightExpression(newRight);", "-      return setType(node, result);", "-    }", "-    catch (UnsupportedConversionException e) {", "-      setErrorStrings(node, ts.userRepresentation(rightT),", "-                      ts.userRepresentation(getVariableType(left)));", "-      throw new ExecutionError(\"assignment.types\", node);", "-    }", "-  }", "+     */", "+    @Override public Type visit(SimpleAssignExpression node) {", "+      Expression left = node.getLeftExpression();", "+      Type result = check(left);", "+", "+      if (!hasVariableType(left)) {", "+        throw new ExecutionError(\"left.expression\", node);", "+      }", "+      if (hasVariable(left) && getVariable(left).isFinal() ||", "+          hasField(left) && getField(left).isFinal()) {", "+        throw new ExecutionError(\"cannot.modify\", node);", "+      }", "+      ", "+      Type target = getVariableType(left);", "+      Type rightT = check(node.getRightExpression(), target);", "+      try {", "+        Expression newRight = ts.assign(target, node.getRightExpression());", "+        node.setRightExpression(newRight);", "+        return setType(node, result);", "+      }", "+      catch (UnsupportedConversionException e) {", "+        setErrorStrings(node, ts.userRepresentation(rightT),", "+                        ts.userRepresentation(target));", "+        throw new ExecutionError(\"assignment.types\", node);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef9c4ba179d8efa499856948da12d61d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "b42121281abc84b5922f4d3c2653d8341fced477", "commitAfterChange": "6b690d7e50bc9f782260d6c38aaf261dfe0715e0", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["-      _machine.setFindWord(_findField.getText());", "+      final String findWord = _findField.getText();", "+      _machine.setFindWord(findWord);", "-            _selectFoundItem();", "+            _selectFoundOrReplacedItem(findWord.length());", "-        if (_machine.getFindWord().length() <= 50) statusMessage.append(_machine.getFindWord());", "-        else statusMessage.append(_machine.getFindWord().substring(0, 49) + \"...\");", "+        if (findWord.length() <= 50) statusMessage.append(findWord);", "+        else statusMessage.append(findWord.substring(0, 49) + \"...\");"]}], "num": 22900}
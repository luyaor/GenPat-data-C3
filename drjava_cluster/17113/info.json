{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f8f6b33a5873d2aece21d36a70535f2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2010590c843c4d4314a5ac3a6dddf0af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/LogTest.java", "commitBeforeChange": "80b5fb6a38e815634acd75afbaca24da4d11be21", "commitAfterChange": "dea430b985112dc86310f3cdaf8b15a8dea3799c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void testConcurrentWrites() throws IOException, InterruptedException", "signatureAfterChange": "   public void testConcurrentWrites() throws IOException, InterruptedException", "diff": ["-    */\r", "-  public void testConcurrentWrites() throws IOException, InterruptedException {\r", "-    File file3 = IOUtil.createAndMarkTempFile(\"logtest003\",\".txt\");\r", "-    Log log3 = new Log(file3, true);\r", "-    Random r = new Random();\r", "-    Thread[] threads = new Thread[NUM_THREADS];\r", "-    for (int i = 0; i < NUM_THREADS; i++) threads[i] = new LogTestThread(log3, r.nextInt(DELAY));\r", "-    for (int i = 0; i < NUM_THREADS; i++) threads[i].start();\r", "-    for (int i = 0; i < NUM_THREADS; i++) threads[i].join();\r", "-   \r", "-    BufferedReader fin = new BufferedReader(new FileReader(file3));\r", "-    Date earlier = new Date(new Date().getTime() - SHORT_TIME);\r", "-    Date now = new Date();\r", "-    String s0 = fin.readLine();\r", "-    Date time0 = parse(s0);\r", "-    assertTrue(\"Log opened within last 10 seconds\", time0.compareTo(earlier) >= 0 && time0.compareTo(now) <= 0);\r", "-    assertEquals(\"Log open message\", \"Log '\" + file3.getName() + \"' opened\", s0.substring(30, 43+file3.getName().length()));\r", "-    \r", "-    for (int i = 0; i < NUM_THREADS; i++) {\r", "-      String s1 = fin.readLine();\r", "-      Date time1 = parse(s1);\r", "-      assertTrue(\"Date of message within last 10 seconds\", time1.compareTo(earlier) >= 0 && time1.compareTo(now) <= 0);\r", "-      assertEquals(\"Log message\", \"Test message\", s1.substring(30));\r", "-    } \r", "-    \r", "-    fin.close();\r", "-  }\r", "+    */", "+  public void testConcurrentWrites() throws IOException, InterruptedException {", "+    File file3 = IOUtil.createAndMarkTempFile(\"logtest003\",\".txt\");", "+    Log log3 = new Log(file3, true);", "+    Random r = new Random();", "+    Thread[] threads = new Thread[NUM_THREADS];", "+    for (int i = 0; i < NUM_THREADS; i++) threads[i] = new LogTestThread(log3, r.nextInt(DELAY));", "+    for (int i = 0; i < NUM_THREADS; i++) threads[i].start();", "+    for (int i = 0; i < NUM_THREADS; i++) threads[i].join();", "+   ", "+    BufferedReader fin = new BufferedReader(new FileReader(file3));", "+    Date earlier = new Date(new Date().getTime() - SHORT_TIME);", "+    Date now = new Date();", "+    String s0 = fin.readLine();", "+    Date time0 = parse(s0);", "+    assertTrue(\"Log opened within last 10 seconds\", time0.compareTo(earlier) >= 0 && time0.compareTo(now) <= 0);", "+    String log3OpenMsg = \"Log '\" + file3.getName() + \"' opened\";", "+    int offset = dateEnd(s0);", "+    assertEquals(\"Log open message\", log3OpenMsg, s0.substring(offset, offset + log3OpenMsg.length()));", "+    ", "+    for (int i = 0; i < NUM_THREADS; i++) {", "+      String s1 = fin.readLine();", "+      Date time1 = parse(s1);", "+      assertTrue(\"Date of message within last 10 seconds\", time1.compareTo(earlier) >= 0 && time1.compareTo(now) <= 0);", "+      assertEquals(\"Log message\", \"Test message\", s1.substring(dateEnd(s1)));", "+    } ", "+    ", "+    fin.close();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51c715b82628b151883b9fdd778105e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/LogTest.java", "commitBeforeChange": "80b5fb6a38e815634acd75afbaca24da4d11be21", "commitAfterChange": "dea430b985112dc86310f3cdaf8b15a8dea3799c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r   public void testExceptionPrinting() throws IOException", "signatureAfterChange": "   public void testExceptionPrinting() throws IOException", "diff": ["-    */\r", "-  public void testExceptionPrinting() throws IOException {\r", "-    File file2 = IOUtil.createAndMarkTempFile(\"logtest002\",\".txt\");\r", "-    Log log2 = new Log(file2, true);\r", "-//    System.err.println(\"Starting testExceptionPrinting\");\r", "-    \r", "-    // Throw a couple of exceptions and log them\r", "-    try { throw new ArrayIndexOutOfBoundsException(); }\r", "-    catch (ArrayIndexOutOfBoundsException e) {\r", "-      //e.printStackTrace();\r", "-      log2.log(\"Message 1\", e);\r", "-    }\r", "-    \r", "-    try { throw new NullPointerException(); }\r", "-    catch (NullPointerException e) {\r", "-      //e.printStackTrace();\r", "-      log2.log(\"Message 2\", e.getStackTrace());\r", "-    }\r", "-    \r", "-    BufferedReader fin = new BufferedReader(new FileReader(file2));\r", "-    Date earlier = new Date(new Date().getTime() - SHORT_TIME);\r", "-    Date now = new Date();\r", "-    \r", "-    String s0 = fin.readLine();\r", "-    Date time0 = parse(s0);\r", "-    assertTrue(\"Log opened within last few seconds\", time0.compareTo(earlier) >= 0 && time0.compareTo(now) <= 0);\r", "-    assertEquals(\"Log open message\", \"Log '\" + file2.getName() + \"' opened\", s0.substring(30, 43+file2.getName().length()));\r", "-    \r", "-    String s1 = fin.readLine();\r", "-    Date time1 = parse(s1);\r", "-    assertTrue(\"Date of message 1 within last few seconds\", time1.compareTo(earlier) >= 0 && time1.compareTo(now) <= 0);\r", "-    assertEquals(\"Log message 1\", \"Message 1\", s1.substring(30));\r", "-    assertEquals(\"Log exception 1\", \"java.lang.ArrayIndexOutOfBoundsException\", fin.readLine());\r", "-    \r", "-    // Since it's difficult to test the rest of the stack trace, just skip over it\r", "-    String s2;\r", "-    Date time2;\r", "-    do {\r", "-      s2 = fin.readLine();\r", "-//      System.err.println(\"traceback line = \" + s2);\r", "-      time2 = parse(s2);  // returns null if there is a parse error\r", "-    }\r", "-    while (time2 == null); \r", "-    \r", "-//    System.err.println(\"Skipped over traceback\");\r", "-    \r", "-    assertTrue(\"Date of message 2 within last few seconds\", time2.compareTo(earlier) >= 0 && time2.compareTo(now) <= 0);\r", "-    assertEquals(\"Log message 2\", \"Message 2\", s2.substring(30));\r", "-    assertEquals(\"Log exception 2 (trace line 1)\", \r", "-                 \"edu.rice.cs.util.LogTest.testExceptionPrinting\", fin.readLine().substring(0,46));\r", "-\r", "-    fin.close();\r", "-  }\r", "+    */", "+  public void testExceptionPrinting() throws IOException {", "+    File file2 = IOUtil.createAndMarkTempFile(\"logtest002\",\".txt\");", "+    Log log2 = new Log(file2, true);", "+//    System.err.println(\"Starting testExceptionPrinting\");", "+    ", "+    // Throw a couple of exceptions and log them", "+    try { throw new ArrayIndexOutOfBoundsException(); }", "+    catch (ArrayIndexOutOfBoundsException e) {", "+      //e.printStackTrace();", "+      log2.log(\"Message 1\", e);", "+    }", "+    ", "+    try { throw new NullPointerException(); }", "+    catch (NullPointerException e) {", "+      //e.printStackTrace();", "+      log2.log(\"Message 2\", e.getStackTrace());", "+    }", "+    ", "+    BufferedReader fin = new BufferedReader(new FileReader(file2));", "+    Date earlier = new Date(new Date().getTime() - SHORT_TIME);", "+    Date now = new Date();", "+    ", "+    String s0 = fin.readLine();", "+    Date time0 = parse(s0);", "+    assertTrue(\"Log opened within last few seconds\", time0.compareTo(earlier) >= 0 && time0.compareTo(now) <= 0);", "+    String log2OpenMsg = \"Log '\" + file2.getName() + \"' opened\";", "+    int offset = dateEnd(s0);", "+    assertEquals(\"Log open message\", log2OpenMsg, s0.substring(offset, offset + log2OpenMsg.length()));", "+    ", "+    String s1 = fin.readLine();", "+    Date time1 = parse(s1);", "+    assertTrue(\"Date of message 1 within last few seconds\", time1.compareTo(earlier) >= 0 && time1.compareTo(now) <= 0);", "+    assertEquals(\"Log message 1\", \"Message 1\", s1.substring(dateEnd(s1)));", "+    assertEquals(\"Log exception 1\", \"java.lang.ArrayIndexOutOfBoundsException\", fin.readLine());", "+    ", "+    // Since it's difficult to test the rest of the stack trace, just skip over it", "+    String s2;", "+    Date time2;", "+    do {", "+      s2 = fin.readLine();", "+//      System.err.println(\"traceback line = \" + s2);", "+      time2 = parse(s2);  // returns null if there is a parse error", "+    }", "+    while (time2 == null); ", "+    ", "+//    System.err.println(\"Skipped over traceback\");", "+    ", "+    assertTrue(\"Date of message 2 within last few seconds\", time2.compareTo(earlier) >= 0 && time2.compareTo(now) <= 0);", "+    assertEquals(\"Log message 2\", \"Message 2\", s2.substring(dateEnd(s2)));", "+    String method = \"edu.rice.cs.util.LogTest.testExceptionPrinting\";", "+    assertEquals(\"Log exception 2 (trace line 1)\", method, fin.readLine().substring(0, method.length()));", "+", "+    fin.close();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "875240e683982df9f746d523e74c4acd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/LogTest.java", "commitBeforeChange": "80b5fb6a38e815634acd75afbaca24da4d11be21", "commitAfterChange": "dea430b985112dc86310f3cdaf8b15a8dea3799c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r   public void testLog() throws IOException", "signatureAfterChange": "   public void testLog() throws IOException", "diff": ["-    */\r", "-  public void testLog() throws IOException {\r", "-    File file1 = IOUtil.createAndMarkTempFile(\"logtest001\",\".txt\");\r", "-    Log log1 = new Log(file1, true);\r", "-    log1.log(\"Message 1\");\r", "-    log1.log(\"Message 2\");\r", "-    log1.log(\"Message 3\");\r", "-    \r", "-    BufferedReader fin = new BufferedReader(new FileReader(file1));\r", "-    Date earlier = new Date(new Date().getTime() - SHORT_TIME);\r", "-    Date now = new Date();\r", "-    \r", "-    String s0 = fin.readLine();\r", "-//    System.err.println(\"s0 = \" + s0);\r", "-//    System.err.println(\"s0 converted to millis \" + parse(s0));\r", "-//    System.err.println(\"Current time in millis is: \" + System.currentTimeMillis());\r", "-    Date time0 = parse(s0);\r", "-    assertTrue(\"Log opened within last few seconds\", time0.compareTo(earlier) >= 0 && time0.compareTo(now) <= 0);\r", "-    assertEquals(\"Log open message\", \"Log '\" + file1.getName() + \"' opened\", s0.substring(30, 43+file1.getName().length()));\r", "-    \r", "-    String s1 = fin.readLine();\r", "-    Date time1 = parse(s1);\r", "-    assertTrue(\"Date of message 1 within last few seconds\", time1.compareTo(earlier) >= 0 && time1.compareTo(now) <= 0);\r", "-    assertEquals(\"Log message 1\", \"Message 1\", s1.substring(30));\r", "-    \r", "-    String s2 = fin.readLine();\r", "-    Date time2 = parse(s2);\r", "-    assertTrue(\"Date of message 2 within last few seconds\", time2.compareTo(earlier) >= 0 && time2.compareTo(now) <= 0);\r", "-    assertEquals(\"Log message 2\", \"Message 2\", s2.substring(30));\r", "-    \r", "-    String s3 = fin.readLine();\r", "-    Date time3 = parse(s3);\r", "-    assertTrue(\"Date of message 3 within last few seconds\", time3.compareTo(earlier) >= 0 && time3.compareTo(now) <= 0);\r", "-    assertEquals(\"Log message 3\", \"Message 3\", s3.substring(30));\r", "-  \r", "-    fin.close();\r", "-  }\r", "+    */", "+  public void testLog() throws IOException {", "+    File file1 = IOUtil.createAndMarkTempFile(\"logtest001\",\".txt\");", "+    Log log1 = new Log(file1, true);", "+    log1.log(\"Message 1\");", "+    log1.log(\"Message 2\");", "+    log1.log(\"Message 3\");", "+    ", "+    BufferedReader fin = new BufferedReader(new FileReader(file1));", "+    Date earlier = new Date(new Date().getTime() - SHORT_TIME);", "+    Date now = new Date();", "+    ", "+    String s0 = fin.readLine();", "+//    System.err.println(\"s0 = \" + s0);", "+//    System.err.println(\"s0 converted to millis \" + parse(s0));", "+//    System.err.println(\"Current time in millis is: \" + System.currentTimeMillis());", "+", "+    Date time0 = parse(s0);", "+//    System.err.println(\"s0 = '\" + s0 + \"'\");", "+//    System.err.println(\"time0 = \" + time0);", "+    assertTrue(\"Log opened within last few seconds\", time0.compareTo(earlier) >= 0 && time0.compareTo(now) <= 0);", "+    String log1OpenMsg = \"Log '\" + file1.getName() + \"' opened\";", "+    int offset = dateEnd(s0);", "+    ", "+    assertEquals(\"Log open message\", log1OpenMsg , s0.substring(offset, offset + log1OpenMsg.length()));", "+    ", "+    String s1 = fin.readLine();", "+//    System.err.println(\"s1 = '\" + s1 + \"'\");", "+    Date time1 = parse(s1);", "+    assertTrue(\"Date of message 1 within last few seconds\", time1.compareTo(earlier) >= 0 && time1.compareTo(now) <= 0);", "+    assertEquals(\"Log message 1\", \"Message 1\", s1.substring(dateEnd(s1)));", "+    ", "+    String s2 = fin.readLine();", "+    Date time2 = parse(s2);", "+    assertTrue(\"Date of message 2 within last few seconds\", time2.compareTo(earlier) >= 0 && time2.compareTo(now) <= 0);", "+    assertEquals(\"Log message 2\", \"Message 2\", s2.substring(dateEnd(s2)));", "+    ", "+    String s3 = fin.readLine();", "+    Date time3 = parse(s3);", "+    assertTrue(\"Date of message 3 within last few seconds\", time3.compareTo(earlier) >= 0 && time3.compareTo(now) <= 0);", "+    assertEquals(\"Log message 3\", \"Message 3\", s3.substring(dateEnd(s3)));", "+  ", "+    fin.close();", "+  }"]}], "num": 17113}
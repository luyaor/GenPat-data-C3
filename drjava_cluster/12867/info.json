{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb5238b6bd2c148dc98bd9b331561d19", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f00b9dca4e33931cf23df0ba30d2c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected final void invokeSlave(String[] jvmArgs, String cp, File workDir) throws IOException, RemoteException", "signatureAfterChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "diff": ["-  protected final void invokeSlave(String[] jvmArgs, String cp, File workDir) throws IOException, RemoteException {", "+  protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException, ", "+    RemoteException {", "-    _log.log(this + \".invokeSlave(\" + edu.rice.cs.util.StringOps.toString(jvmArgs) + \", \" + cp + \", \" + workDir + \") called\");", "-    ", "-    synchronized(_masterJVMLock) {", "+    synchronized(_masterJVMLock) { // synchronization prelude only lets one thread at a time execute the sequel", "-      if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");      ", "-      if (_slave != null) throw new IllegalStateException(\"slave non-null in invoke: \" + _slave);", "-      ", "+      try { while (_startupInProgress || _monitorThread != null) _masterJVMLock.wait(); }", "+      catch(InterruptedException e) { throw new UnexpectedException(e); }", "-      _stub = null;", "-    /**********************************************", "-     * First, we we export ourselves to a file... *", "-     **********************************************/", "-//      Thread t = new Thread(_exportMasterThreadName) {", "-//        public void run() {", "-    _log.log(AbstractMasterJVM.this + \" starting creation of RMI stub for AbstractMasterJVM\");", "-    try { _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this); }", "+    _log.log(this + \".invokeSlave(...) called\");", "+    assert (_slave != null);", "-    // Debug: check that the IP address is 127.0.0.1", "-    // javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-    ", "-    catch (RemoteException re) {", "-      // javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-      throw new UnexpectedException(re);  // should never happen", "+    /******************************************************************************************************", "+     * First, we we export ourselves to a file, if it has not already been done on a previous invocation. *", "+     *****************************************************************************************************/", "+", "+    if (_masterStub == null) {", "+      try { _masterStub = (MasterRemote) UnicastRemoteObject.exportObject(this); }", "+      catch (RemoteException re) {", "+        javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+        _log.log(this + \" threw \" + re);", "+        throw new UnexpectedException(re);  // should never happen", "+      }", "+      _log.log(this + \" EXPORTed Master JVM\");", "+      ", "+      _masterStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+      _masterStubFile.deleteOnExit();", "+      ", "+      // serialize stub to _masterStubFile", "+      FileOutputStream fstream = new FileOutputStream(_masterStubFile);", "+      ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "+      ostream.writeObject(_masterStub);", "+      ostream.flush();", "+      fstream.close();", "+      ostream.close();", "-//          synchronized(_exportLock) { _exportLock.notify(); }", "-//        }", "-//      };", "-//      t.start();", "-//      synchronized(_exportLock) {", "-//        try {", "-//          while (_stub == null) { ", "-//            _log.log(\"invokeSlave thread in \" + this + \" waiting for creation of AbstractMasterJVM RMI stub to complete\");", "-//            _exportLock.wait(); ", "-//          } ", "-//        }", "-//        catch (InterruptedException ie) { throw new UnexpectedException(ie); }  // should never happen", "-    ", "-    _log.log(this + \" completed creation of RMI stub for AbstractMasterJVM\");", "-    _stubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _stubFile.deleteOnExit();", "-    ", "-    // serialize stub to _stubFile", "-    FileOutputStream fstream = new FileOutputStream(_stubFile);", "-    ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_stub);", "-    ostream.flush();", "-    fstream.close();", "-//      ostream.close();", "-    ", "-    _log.log(this + \" completed writing RMI stub for AbstractMasterJVM to a file\");", "-    ", "-    /***********************************************************************************", "-     * Done exporting ourselves to a file ...  Now let's export our classloader        *", "-     * This will be used to handle classloading requests from the slave jvm.           *", "-     ***********************************************************************************/", "-    ", "-    final RemoteClassLoader _classLoader = new RemoteClassLoader(getClass().getClassLoader());", "-    _classLoaderStub = null;", "-//      t = new Thread(_exportMasterThreadName) {", "-//        public void run() {", "-    _log.log(AbstractMasterJVM.this + \" starting creation of RMI stub for RemoteClassLoader\");", "-    try {  _classLoaderStub = UnicastRemoteObject.exportObject(_classLoader); }", "-    ", "-    // Debug: check that the IP address is 127.0.0.1", "-    //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-    ", "-    catch (RemoteException re) {", "-      //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-      throw new UnexpectedException(re);  // should never happen", "-    }", "-//          synchronized(_exportLock) { _exportLock.notify(); }", "-//        }", "-//      };", "-    ", "-//      t.start();", "-//      synchronized(_exportLock) {", "-//        try { ", "-//          while (_classLoaderStub == null) { ", "-//            _log.log(\"invokeSlave thread in \" + this + \" waiting for creation of RemoteClassLoader RMI stub to complete\");", "-//            _exportLock.wait(); ", "-//          } ", "-//        }", "-//        catch (InterruptedException ie) { throw new UnexpectedException(ie); }  // should never happen", "-//      }", "-    ", "-    _log.log(this + \" completed creation of RMI stub for RemoteClassLoader\");", "-    _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _classLoaderStubFile.deleteOnExit();", "-    // serialize stub to _classLoaderStubFile", "-    fstream = new FileOutputStream(_classLoaderStubFile);", "-    ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_classLoaderStub);", "-    ostream.flush();", "-    fstream.close();", "-    ostream.close();", "-    ", "-    _log.log(this + \" completed writing RMI stub for RemoteClassLoader to a file\");", "-    ", "-    String[] args = ", "-      new String[] { _stubFile.getAbsolutePath(), _slaveClassName, _classLoaderStubFile.getAbsolutePath() };", "-    ", "-    /* Create the slave JVM. */  ", "-    _log.log(this + \" is starting a slave JVM\");", "-    final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs, workDir);", "+    final String[] args = ", "+      new String[] { _masterStubFile.getAbsolutePath(), _slaveClassName };", "-    Thread restartThread = new Thread(_waitForQuitThreadName) {", "+    _monitorThread = new Thread(_waitForQuitThreadName) {", "-        _log.log(this + \"has started a Slave monitor thread waiting on process \" + process);", "-        try {", "+        try { /* Create the slave JVM. */ ", "+          ", "+          _log.log(AbstractMasterJVM.this + \" is STARTING a Slave JVM with args \" + Arrays.toString(args));", "+          ", "+          final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs, workDir);", "+          _log.log(AbstractMasterJVM.this + \" CREATED Slave JVM process \" + process + \" with \" + asString());", "+          ", "-          _log.log(\"Process \" + process + \" died under control of \" + AbstractMasterJVM.this + \" with status \" + status);", "+          _log.log(process + \" DIED under control of \" + asString() + \" with status \" + status);", "-              /* If we get here, the process died without registering. (This might be the case if something was wrong", "-               * with the classpath, or if the new JVM couldn't acquire a port for debugging.)  Proper behavior in ", "-               * this case is unclear, so we'll let our subclasses decide.  By default, we print a stack trace and ", "-               * do not proceed, to avoid going into a loop. */", "+              /* If we get here, the process died without registering.  One possible cause is the intermittent funky 3 minute", "+               * pause in readObject in RUNNER.  Other possible causes are errors in the classpath or the absence of a ", "+               * debug port.  Proper behavior in this case is unclear, so we'll let our subclasses decide. */", "-            _slave = null;", "-            final boolean masterWithdrawn = UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "-            final boolean loaderWithdrawn = UnicastRemoteObject.unexportObject(_classLoader, true);", "-            if (! masterWithdrawn || ! loaderWithdrawn) {", "-              _log.log(\"unexport step failed in \" + AbstractMasterJVM.this);", "-              throw new UnexpectedException(\"remote objects exported by Master JVM could not be withdrawn!\");", "+            if (_slave != null) { // Slave JVM quit spontaneously", "+              _slave = null; ", "-            ", "-            _log.log(AbstractMasterJVM.this + \" calling handleSlaveQuit(\" + status + \")\");", "-            handleSlaveQuit(status);", "+            _monitorThread = null;", "+            _masterJVMLock.notifyAll();  // signal that Slave JVM died to any thread waiting for _monitorThread == null", "+            ", "+//          _log.log(asString() + \" calling handleSlaveQuit(\" + status + \")\");", "+          handleSlaveQuit(status);", "+", "-        catch (NoSuchObjectException e) { throw new UnexpectedException(e); }", "-        catch (InterruptedException ie) { throw new UnexpectedException(ie); }", "+        catch(NoSuchObjectException e) { throw new UnexpectedException(e); }", "+        catch(InterruptedException e) { throw new UnexpectedException(e); }", "+        catch(IOException e) { throw new UnexpectedException(e); }", "+      private String asString() { return \"MonitorThread@\" + Integer.toHexString(hashCode()); }", "-    _log.log(this + \" is starting a slave monitor thread to detect when the Slave JVM dies\");", "-    restartThread.start();", "+//    _log.log(this + \" is starting a slave monitor thread to detect when the Slave JVM dies\");", "+    _monitorThread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d41706c153c4efcdcf64563e54e64d84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InsertVariableDialog.java", "commitBeforeChange": "91d926f5e8557085503ecb402ffa610f4022f505", "commitAfterChange": "97f4d18b1b96ab5f6fef892b2420a830c7869018", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   private void initComponents()", "signatureAfterChange": "   private void initComponents()", "diff": ["-    _varValueField.setEditable(false);", "-    ", "-    JPanel bottom = new JPanel(new BorderLayout());    ", "-    bottom.add(_varValueField, BorderLayout.CENTER);    ", "-    bottom.add(buttons, BorderLayout.SOUTH);", "+    for (Map.Entry<String, Properties> p: _props.entrySet()) {", "+      _tabbedPane.addTab(p.getKey(), createPane(p.getKey(), p.getValue()));", "+    }", "+    _tabbedPane.addChangeListener(new ChangeListener() {", "+      public void stateChanged(ChangeEvent e) {", "+        String panelName = _props.keySet().toArray(new String[0])[_tabbedPane.getSelectedIndex()];", "+        String key = _varTableModel.get(panelName).getValueAt(_varTable.get(panelName).getSelectedRow(),0).toString();", "+        _varValueField.setText(_props.get(panelName).getProperty(key));", "+        _selected = new edu.rice.cs.plt.tuple.Pair<String,String>(key, _props.get(panelName).getProperty(key));", "+      }", "+    });", "+", "+    JPanel bottom = new JPanel(new BorderLayout());", "+    bottom.add(_varValueField, BorderLayout.CENTER);    ", "+    bottom.add(buttons, BorderLayout.SOUTH);", "+    new JPanel(new BorderLayout());", "-        ", "-    _varTableModel = new DefaultTableModel(0,1) {", "+    ", "+    String panelName = _props.keySet().toArray(new String[0])[0];", "+    String key = _varTableModel.get(panelName).getValueAt(_varTable.get(panelName).getSelectedRow(),0).toString();", "+    _varValueField.setText(_props.get(panelName).getProperty(key));", "+    _selected = new edu.rice.cs.plt.tuple.Pair<String,String>(key, _props.get(panelName).getProperty(key));", "+    ", "+    main.add(_tabbedPane, BorderLayout.CENTER);", "+    ", "+    //The following line enables to use scrolling tabs.", "+    _tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);", "+", "+    // do not allow preview to have focus", "+    _tabbedPane.addFocusListener(new FocusAdapter() {", "+      public void focusLost(FocusEvent e) {", "+        if (e.getOppositeComponent() == _varValueField) {", "+          _tabbedPane.getSelectedComponent().requestFocus();", "+        }", "+      }", "+    });", "+", "+    super.getContentPane().add(main);", "+    super.setResizable(false);", "+    pack();", "+", "+    MainFrame.setPopupLoc(this, _mainFrame);    ", "+  }", "-    };", "-    _varTable = new JTable(_varTableModel);", "-    JScrollPane varTableSP = new JScrollPane(_varTable);", "-    _varTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "-    _varTable.putClientProperty(\"JTable.autoStartsEdit\", Boolean.FALSE);", "-    ListSelectionModel lsm = _varTable.getSelectionModel();", "-        String key = _varTableModel.getValueAt(_varTable.getSelectedRow(),0).toString();", "-        _selected = new edu.rice.cs.plt.tuple.Pair<String,String>(key, _props.getProperty(key));", "-        _varValueField.setText(_props.getProperty(key));", "-    _varTable.setSelectionModel(lsm);", "-    // do not allow preview to have focus", "-    _varTable.addFocusListener(new FocusAdapter() {", "-      public void focusLost(FocusEvent e) {", "-        if (e.getOppositeComponent() == _varValueField) {", "-          _varTable.requestFocus();", "-        }", "-      }", "-    });", "-", "-    for(Object o: _props.keySet()) {", "-      _varTableModel.addRow(row);", "-    _varTable.setRowSelectionInterval(0,0);", "-    String key = _varTableModel.getValueAt(_varTable.getSelectedRow(),0).toString();", "-    _varValueField.setText(_props.getProperty(key));", "-    _selected = new edu.rice.cs.plt.tuple.Pair<String,String>(key, _props.getProperty(key));", "-    main.add(varTableSP, BorderLayout.CENTER);", "-    ", "-    super.getContentPane().add(main);", "-    super.setResizable(false);", "-    pack();", "-", "-    MainFrame.setPopupLoc(this, _mainFrame);    "]}], "num": 12867}
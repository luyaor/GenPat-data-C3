{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "157c9adf40888c9c34cb6813d7377119", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fcfbbbb6641eaf48fd29502a683cf18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "72163ebd454d71c0955c00c7a1a43c6fa207331b", "commitAfterChange": "cdddd415c8ee9888478b5a253ffbb086fce1ed57", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public DefinitionsPane(MainFrame mf,                          GlobalModel model,                          OpenDefinitionsDocument doc)", "signatureAfterChange": "   public DefinitionsPane(MainFrame mf,                          GlobalModel model,                          OpenDefinitionsDocument doc)", "diff": ["+    ", "+    //Create the popup menu.", "+    _popMenu = new JPopupMenu();", "+    ", "+    _popMenu.add(_mainFrame.cutAction);", "+    _popMenu.add(_mainFrame.copyAction);", "+    _popMenu.add(_mainFrame.pasteAction);", "+    //don't forget to remove this, or at least make it more intelligent", "+    if (_mainFrame.getModel().getDebugManager() != null) {", "+      _popMenu.addSeparator();", "+      _toggleBreakpointMenuItem = _popMenu.add(_mainFrame._toggleBreakpointAction);", "+      _toggleBreakpointMenuItem.setEnabled(false);", "+    }", "+    ", "+    //Add listener to components that can bring up popup menus.", "+    this.addMouseListener( new MouseAdapter() {", "+      public void mousePressed(MouseEvent e) {", "+        setCaretPosition(viewToModel(e.getPoint()));", "+        maybeShowPopup(e);", "+        if (_toggleBreakpointMenuItem != null) {", "+          _toggleBreakpointMenuItem.setEnabled(_mainFrame.inDebugMode());", "+        }", "+      }", "+      ", "+      public void mouseReleased(MouseEvent e) {", "+        maybeShowPopup(e);", "+      }", "+      ", "+      private void maybeShowPopup(MouseEvent e) {", "+        if (e.isPopupTrigger()) {", "+          _popMenu.show(e.getComponent(),", "+                        e.getX(), e.getY());", "+        }", "+      }", "+    });", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9236b2e6589583b35a49d6ecb6667185", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "d8743e3580123e01ed3e3df696be4659a04c6fac", "commitAfterChange": "7a9a1a584dbea988e52c91909a30a2d54f580df1", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private void _doStartup()", "signatureAfterChange": "   private void _doStartup()", "diff": ["+    ", "-    File junitLocation = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);", "-    boolean concJUnitLocationConfigured =", "-      DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "-      edu.rice.cs.drjava.model.junit.DefaultJUnitModel.isValidConcJUnitFile(junitLocation);", "-    File rtLocation = DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION);", "-    boolean rtLocationConfigured =", "-      edu.rice.cs.drjava.model.junit.DefaultJUnitModel.isValidRTConcJUnitFile(rtLocation);", "-    if (DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED) &&", "-        !rtLocationConfigured && // not valid", "-        (rtLocation != null) && // not null", "-        (!FileOps.NULL_FILE.equals(rtLocation)) && // not NULL_FILE", "-        (rtLocation.exists())) { // but exists", "-      // invalid file, clear setting", "-      DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION, FileOps.NULL_FILE);", "-      rtLocationConfigured = false;", "-    }", "-    if (concJUnitLocationConfigured &&", "-        rtLocationConfigured &&", "-        DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED)) {", "-      try {", "-        // NOTE: this is a work-around", "-        // it seems like it's impossible to pass long file names here on Windows", "-        // so we are using a clumsy method that determines the short file name", "-        File shortF = FileOps.getShortFile(rtLocation);", "-        jvmArgs.add(\"-Xbootclasspath/p:\"+shortF.getAbsolutePath().replace(File.separatorChar, '/'));", "-      }", "-      catch(IOException ioe) {", "-        // we couldn't get the short file name (on Windows), disable \"lucky\" warnings", "-        DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION, FileOps.NULL_FILE);", "+    // ------------------------------------------------------", "+    // this section here loops if the rt.concjunit.jar file is", "+    // being re-generated or the settings are changed", "+    final CompletionMonitor cm = new CompletionMonitor();", "+    boolean repeat;", "+    do {", "+      repeat = false;", "+      File junitLocation = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);", "+      boolean concJUnitLocationConfigured =", "+        DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "+        edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(junitLocation);", "+      ", "+      File rtLocation = DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION);", "+      boolean rtLocationConfigured =", "+        edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtLocation);", "+      ", "+      if (DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED) && // enabled", "+          !rtLocationConfigured && // not valid", "+          (rtLocation != null) && // not null", "+          (!FileOps.NULL_FILE.equals(rtLocation)) && // not NULL_FILE", "+          (rtLocation.exists())) { // but exists", "+        // invalid file, clear setting", "+        DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+        javax.swing.JOptionPane.showMessageDialog(null,", "+                                                  \"The selected file is invalid and was disabled:\\n\"+rtLocation,", "+                                                  \"Invalid ConcJUnit Runtime File\",", "+                                                  javax.swing.JOptionPane.ERROR_MESSAGE);", "-    }", "+      if (concJUnitLocationConfigured && // ConcJUnit configured and enabled", "+          rtLocationConfigured && // \"lucky\" warnings configured", "+          DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED)) { // and enabled", "+        try {", "+          // NOTE: this is a work-around", "+          // it seems like it's impossible to pass long file names here on Windows", "+          // so we are using a clumsy method that determines the short file name", "+          File shortF = FileOps.getShortFile(rtLocation);", "+          ", "+          // check the JavaVersion of the rt.concjunit.jar file to make sure it is compatible", "+          if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isCompatibleRTConcJUnitFile(shortF)) {", "+            // enabled, valid and compatible", "+            // add the JVM argument", "+            jvmArgs.add(\"-Xbootclasspath/p:\"+shortF.getAbsolutePath().replace(File.separatorChar, '/'));", "+          }", "+          else {", "+            // enabled, valid but incompatible", "+            // ask to regenerate", "+            repeat = true; // re-check settings", "+            cm.reset();", "+            edu.rice.cs.drjava.model.junit.ConcJUnitUtils.", "+              showIncompatibleWantToRegenerateDialog(null,", "+                                                     new Runnable() { public void run() { cm.signal(); } }, // yes", "+                                                     new Runnable() { public void run() { cm.signal(); } }); // no", "+            while(!cm.attemptEnsureSignaled()); // wait for dialog to finish", "+          }", "+        }", "+        catch(IOException ioe) {", "+          // we couldn't get the short file name (on Windows), disable \"lucky\" warnings", "+          DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+          rtLocationConfigured = false;", "+          javax.swing.JOptionPane.showMessageDialog(null,", "+                                                    \"There was a problem with the selected file, and it was disabled:\\n\"+rtLocation,", "+                                                    \"Invalid ConcJUnit Runtime File\",", "+                                                    javax.swing.JOptionPane.ERROR_MESSAGE);", "+        }", "+      }", "+    } while(repeat);", "+    // end of the section that may loop", "+    // ------------------------------------------------------"]}], "num": 4409}
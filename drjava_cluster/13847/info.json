{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d84dc3d77e06a21968545d00614afbec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3350dc821cfd862806213d61dbb84f53", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 372, "methodNumberAfterChange": 372, "signatureBeforeChange": "\r \r   public void forConstructorDef(ConstructorDef that)", "signatureAfterChange": "    public void forConstructorDef(ConstructorDef that)", "diff": ["-\r", "-  public void forConstructorDef(ConstructorDef that) {\r", "-    forConstructorDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getParameters().length; i++) that.getParameters()[i].visit(this);\r", "-    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);\r", "-    that.getStatements().visit(this);\r", "-    forConstructorDefOnly(that);\r", "-  }\r", "+", "+  public void forConstructorDef(ConstructorDef that) {", "+    forConstructorDefDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getParameters().length; i++) that.getParameters()[i].visit(this);", "+    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);", "+    that.getStatements().visit(this);", "+    forConstructorDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea12f100431a63017e469a819cc373e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public Void forInterfaceDef(InterfaceDef that)", "signatureAfterChange": "   public Void forInterfaceDef(InterfaceDef that)", "diff": ["-    String className = that.getName().getText();", "-    that.getMav().visit(this);", "-    that.getName().visit(this);", "-    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "-    SymbolData sd = addSymbolData(that, getQualifiedClassName(className));", "+    String className = getQualifiedClassName(that.getName().getText());", "+    // The following for loop should be no-op because interfaces can't have fields!", "+    assert that.getTypeParameters().length == 0;", "+//    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+    SymbolData sd = defineSymbolData(that, className);", "-      ", "+    that.getMav().visit(this);", "+    that.getName().visit(this);", "-    _classesToBeParsed.remove(getQualifiedClassName(className));", "+    _classesToBeParsed.remove(className);", "-  }  "]}], "num": 13847}
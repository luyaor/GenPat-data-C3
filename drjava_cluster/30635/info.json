{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08c87def898402ee90704327c4396984", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d774f10efc644613eef53f17674209a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "commitAfterChange": "08dc50acc6315b4a29619a0eb44a9574f8e58999", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void removeRegion(final R region)", "signatureAfterChange": "   public void removeRegion(final R region)", "diff": ["-    docRegions.remove(region);  // remove the region from the manager", "+    final boolean wasRemoved = docRegions.remove(region);  // remove the region from the manager", "-    // notify", "-    Utilities.invokeLater(new Runnable() { public void run() {", "-      _lock.startRead();", "-      try { for (RegionManagerListener<R> l: _listeners) { l.regionRemoved(region); } } ", "-      finally { _lock.endRead(); }", "-    } });", "+    // only notify if the region was actually added", "+    if (wasRemoved) {", "+      // notify", "+      Utilities.invokeLater(new Runnable() { public void run() {", "+        _lock.startRead();", "+        try { for (RegionManagerListener<R> l: _listeners) { l.regionRemoved(region); } } ", "+        finally { _lock.endRead(); }", "+      } });", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2b19215b8a8eb074b47ce65a16d063a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "commitAfterChange": "733b3cf4d974c1c6ea9506fe8718b272fd7a917d", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 222, "signatureBeforeChange": "     public boolean changeRegion(R oldRegion, R newRegion)", "signatureAfterChange": "     public void changeRegion(R region, Lambda<Object,R> cmd)", "diff": ["-     *  @return true if a change was made */", "-    public boolean changeRegion(R oldRegion, R newRegion) {", "-      int index = _regions.indexOf(oldRegion);", "-      if (index<0) { return false; }", "+     *  @param cmd command that mutates the region. */", "+    public void changeRegion(R region, Lambda<Object,R> cmd) {", "+      int index = _regions.indexOf(region);", "+      if (index<0) { return; }", "-      boolean changed = changeRegionHelper(r, newRegion);", "-      if (changed) {", "-        Utilities.invokeLater(new Runnable() { public void run() { ", "-          // notify", "-          _lock.startRead();", "-          try {", "-            for (RegionManagerListener<R> l: _listeners) { l.regionChanged(r); }", "-          } finally { _lock.endRead(); }            ", "-        } });", "-      }", "-      return changed;", "+      cmd.apply(r);", "+      Utilities.invokeLater(new Runnable() { public void run() { ", "+        // notify", "+        _lock.startRead();", "+        try {", "+          for (RegionManagerListener<R> l: _listeners) { l.regionChanged(r); }", "+        } finally { _lock.endRead(); }            ", "+      } });"]}], "num": 30635}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b93c50915cba8fb763cf288c48e211b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02937406171fedabea9b740c70f29aee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected void assertReplThrewContinuationException(String code) throws EditDocumentException, InterruptedException", "signatureAfterChange": "   protected void assertReplThrewContinuationException(final String code) throws EditDocumentException, InterruptedException", "diff": ["-  protected void assertReplThrewContinuationException(String code) throws EditDocumentException, InterruptedException {", "+  protected void assertReplThrewContinuationException(final String code) throws EditDocumentException, InterruptedException {", "-    IncompleteInputInteractionsModel model = (IncompleteInputInteractionsModel) _model;", "-    InteractionsDocument doc = model.getDocument();", "-    doc.reset(\"This is a test\");", "-    doc.append(code, InteractionsDocument.DEFAULT_STYLE);", "-    Utilities.clearEventQueue();  // required because subsequent interpretCurrentInteraction is not run in event thread.", "-    model._logInteractionStart();", "-    model.interpretCurrentInteraction();", "-    _log.log(\"Waiting for InteractionDone()\");", "+    final IncompleteInputInteractionsModel model = (IncompleteInputInteractionsModel) _model;", "+    final InteractionsDocument doc = model.getDocument();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() {", "+        doc.reset(\"This is a test\");", "+        doc.append(code, InteractionsDocument.DEFAULT_STYLE);", "+      }", "+    });", "+    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() {", "+        model._logInteractionStart();", "+        model.interpretCurrentInteraction();", "+        _log.log(\"Waiting for InteractionDone()\");", "+      }", "+    });", "+    Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f96caa5cc9dba9096fcbc1ec1437142", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 589, "methodNumberAfterChange": 589, "signatureBeforeChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset,                                          final boolean shouldHighlight, final boolean shouldAddToHistory)", "signatureAfterChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset,                                          final boolean shouldHighlight, final boolean shouldAddToHistory)", "diff": ["+         ", "+    final boolean toSameDoc = _model.getActiveDocument().equals(doc);", "-    boolean toSameDoc = _model.getActiveDocument().equals(doc);", "-    ", "-    if (! toSameDoc) {", "-      _model.setActiveDocument(doc);  // blocks until active document is set internally", "-      _findReplace.updateFirstDocInSearch();", "-    }", "-    else _model.refreshActiveDocument();", "-   ", "-    /* The commented out code caused the debugger to deadlock in some situations.  After frame initialization, this", "-     * method is only called in event thread. */", "-//    Runnable command = new Runnable() {  ", "-//      public void run() {", "+    Runnable command = new Runnable() {", "+      public void run() {", "+        ", "-        if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {      ", "-          _currentDefPane.centerViewOnOffset(offset);", "-          _currentDefPane.requestFocusInWindow();", "+        if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) { ", "+          EventQueue.invokeLater(new Runnable() { ", "+            public void run() { ", "+              if (! toSameDoc) Utilities.clearEventQueue();  // pause to let async aspects of active document switch complete", "+              _currentDefPane.centerViewOnOffset(offset);", "+              _currentDefPane.requestFocusInWindow();", "+            }", "+          });", "-//          doc.acquireReadLock();", "-//          try {", "-//          }", "-//          finally { doc.releaseReadLock(); }", "-        ", "-//        if (shouldAddToHistory) { addToBrowserHistory(); }    ", "-//      }", "-//    };", "+      }", "+    };", "-    /* Comment by mgricken: If ! toSameDoc, the _currentDefPane hasn't been created yet for a new document.   ", "-     * Consequently, we need to use EventQueue.invokeLater if ! toSameDoc. */", "-//    if (toSameDoc) Utilities.invokeLater(command);  ", "-//    else EventQueue.invokeLater(command);", "+    if (! toSameDoc) {", "+      _model.setActiveDocument(doc);  // blocks until active document is set internally", "+      _findReplace.updateFirstDocInSearch();", "+      EventQueue.invokeLater(command);  // postpone running command until everything already in the queue completes.", "+    }", "+    else {", "+      _model.refreshActiveDocument();", "+      command.run();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad8e3bd0d9501927b6d820c386092e82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected void assertReplThrewContinuationException(String code) throws EditDocumentException, InterruptedException", "signatureAfterChange": "   protected void assertReplThrewContinuationException(final String code) throws EditDocumentException, InterruptedException", "diff": ["-  protected void assertReplThrewContinuationException(String code) throws EditDocumentException, InterruptedException {", "+  protected void assertReplThrewContinuationException(final String code) throws EditDocumentException, InterruptedException {", "-    IncompleteInputInteractionsModel model = (IncompleteInputInteractionsModel) _model;", "-    InteractionsDocument doc = model.getDocument();", "-    doc.reset(\"This is a test\");", "-    doc.append(code, InteractionsDocument.DEFAULT_STYLE);", "-    Utilities.clearEventQueue();  // required because subsequent interpretCurrentInteraction is not run in event thread.", "-    model._logInteractionStart();", "-    model.interpretCurrentInteraction();", "-    _log.log(\"Waiting for InteractionDone()\");", "+    final IncompleteInputInteractionsModel model = (IncompleteInputInteractionsModel) _model;", "+    final InteractionsDocument doc = model.getDocument();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() {", "+        doc.reset(\"This is a test\");", "+        doc.append(code, InteractionsDocument.DEFAULT_STYLE);", "+      }", "+    });", "+    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() {", "+        model._logInteractionStart();", "+        model.interpretCurrentInteraction();", "+        _log.log(\"Waiting for InteractionDone()\");", "+      }", "+    });", "+    Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();"]}], "num": 7863}
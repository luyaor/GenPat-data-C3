{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a39f7b26a821f2b1115c02976e79324", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16179ccf8846dbd13c7e9340f708cb9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "commitAfterChange": "b1aa79fb7a1aab3c0f34f51e168c7e7a945d8cf6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "signatureAfterChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "diff": ["-      for (int i = 0; i < files.length; i++) {", "-        String fileName = files[i].getAbsolutePath();", "+      // The hashset is used to make sure we never send in duplicate files. This can happen if", "+      // the java file was sent in allong with the corresponding .dj* file. The dj* file", "+      // is renamed to a .java file and thus we have two of the same file in the list.  By", "+      // adding the renamed file to the hashset, the hashset efficiently removes duplicates.", "+      HashSet<File> javaFileSet = new HashSet<File>();", "+      for (File f : files) {", "+        File canonicalFile;", "+        try {", "+          canonicalFile = f.getCanonicalFile();", "+        } catch(IOException e) {", "+          canonicalFile = f.getAbsoluteFile();", "+        }", "+        String fileName = canonicalFile.getPath();", "-          files[i] = new File(fileName.substring(0, lastIndex) + \".java\");", "+          javaFileSet.add(new File(fileName.substring(0, lastIndex) + \".java\"));", "+        }", "+        else {", "+          javaFileSet.add(canonicalFile);", "+      files = javaFileSet.toArray(new File[0]);", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fbaeae33825ae281499f99db0293ea6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFiles(File[] files)      throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _openFiles(File[] files)      throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-//        SHOW_GETDOC = true;", "-        ", "+    //        SHOW_GETDOC = true;", "+    ", "-    for (File f: files) {", "-      if (f == null) {", "-        throw new IOException(\"File name returned from FileSelector is null\");", "-      }", "+    for (final File f: files) {", "+      if (f == null) throw new IOException(\"File name returned from FileSelector is null\");", "-        if (storedAOE == null) {", "-          storedAOE = aoe;", "-        }", "-      } catch(FileNotFoundException e){", "-        filesNotFound.add(f);", "-      }", "+        if (storedAOE == null) storedAOE = aoe;", "+      } ", "+      catch(FileNotFoundException e) { filesNotFound.add(f); }", "-    for(final OpenDefinitionsDocument d: filesOpened){", "+    for (final OpenDefinitionsDocument d: filesOpened){", "-//        SHOW_GETDOC = false;", "-    for(File f: filesNotFound){", "-      _notifier.fileNotFound(f);", "-    }", "+    //        SHOW_GETDOC = false;", "+    for (File f: filesNotFound) { _notifier.fileNotFound(f); }", "-    if (storedAOE != null) {", "-      throw storedAOE;", "-    }", "-", "-    if (retDoc != null) {", "-      return retDoc;", "-    }", "+    if (storedAOE != null) throw storedAOE;", "+    ", "+    if (retDoc != null) return retDoc;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b452d1f6e2ec7603f24968418ab9781", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 408, "methodNumberAfterChange": 406, "signatureBeforeChange": "     public boolean shouldRevertFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "     public boolean shouldRevertFile(OpenDefinitionsDocument doc)", "diff": ["-      if (! _model.getActiveDocument().equals(doc)) {", "-        _model.setActiveDocument(doc);", "-      }", "+      if (! _model.getActiveDocument().equals(doc)) _model.setActiveDocument(doc);", "-      catch (IllegalStateException ise) {", "-        // No file exists", "-        fname = \"Untitled file\";", "-      }", "-      catch (FileMovedException fme) {", "-        // File was deleted, but use the same name anyway", "-        fname = fme.getFile().getName();", "-      }", "+      catch (IllegalStateException ise) { fname = \"Untitled file\"; } // No file exists", "+        ", "+      catch (FileMovedException fme) { fname = fme.getFile().getName(); }", "+      // File was deleted, but use the same name anyway", "-      String text = fname + \" has changed on disk. Would you like to \" +", "-      \"reload it?\\nThis will discard any changes you have made.\";", "+      String text = fname + \" has changed on disk. Would you like to reload it?\\n\" + ", "+        \"This will discard any changes you have made.\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a13ea1b3b026e938b11fa6da3a66e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "1551840e0590a4d224d98cf5aeb081d54054aafb", "commitAfterChange": "fe644290d76f63ed4693cfbe935eaacd56666243", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean hasErrorsWithPositions(OpenDefinitionsDocument odd)", "signatureAfterChange": "   public boolean hasErrorsWithPositions(OpenDefinitionsDocument odd)", "diff": ["-   */", "+  /** This function tells if there are errors with source locations associated with the given file. */", "-    try {", "-      file = odd.getFile();", "-    }", "-    catch (IllegalStateException ise) {", "-      //no associated file, do nothing", "-    }", "-    catch (FileMovedException fme) {", "-      file = fme.getFile();", "-    }", "-    if (file == null) {", "-      return false;", "-    }", "+    try { file = odd.getFile(); }", "+    catch (IllegalStateException ise) { /* no associated file, do nothing */ }", "+    catch (FileMovedException fme) { file = fme.getFile(); }", "+    if (file == null) return false;", "-    try {", "-      file = file.getCanonicalFile();", "-    }", "-    catch (IOException ioe) {", "-      // Oh well, look for the file as is.", "-    }", "+    try { file = file.getCanonicalFile(); }", "+    catch (IOException ioe) { /* Oh well, look for the file as is.*/ }", "-    if (saei == null) {", "-      return false;", "-    }", "-    if (saei.getStartPos() == saei.getEndPos()) {", "-      return false;", "-    }", "+    if (saei == null) return false;", "+    if (saei.getStartPos() == saei.getEndPos()) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b3d5fc1842e581206f30cfeee67cf4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 170, "signatureBeforeChange": "   private void _setCurrentDirectory(File file)", "signatureAfterChange": "   private void _setCurrentDirectory(File file)", "diff": ["-    _openChooser.setCurrentDirectory(file.getAbsoluteFile());", "-    _saveChooser.setCurrentDirectory(file.getAbsoluteFile());", "-    _javadocChooser.setCurrentDirectory(file.getAbsoluteFile());", "+    // We want to use absolute paths whenever possible, since canonical paths", "+    //  resolve symbolic links and can be quite long and unintuitive.", "+    // However, Windows blows up if you set the current directory of a", "+    //  JFileChooser to an absolute path with \"..\" in it.", "+    // In that case, we'll use the canonical path for the file chooser.", "+    // (Fix for bug 707734)", "+    try {", "+      File f = file.getAbsoluteFile();", "+      if (PlatformFactory.ONLY.isWindowsPlatform() &&", "+          (file.getAbsolutePath().indexOf(\"..\") != -1)) {", "+        f = file.getCanonicalFile();", "+      }", "+      _openChooser.setCurrentDirectory(f);", "+      _saveChooser.setCurrentDirectory(f);", "+      _javadocChooser.setCurrentDirectory(f);", "+    }", "+    catch (IOException ioe) {", "+      // If getCanonicalFile throws an IOException, we can't", "+      //  set the directory of the file chooser.  Oh well.", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dce31395d4966e623191313720b3842a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "   public void junitJVMReady()", "signatureAfterChange": "   public void junitJVMReady()", "diff": ["-    ", "-    if (_docBeingTested != null) {", "+//    if (_docBeingTested != null) {", "+    if (_isTestInProgress) {", "-      try {", "-        fileName = _docBeingTested.getDocument().getFile().getAbsolutePath();", "-      }", "-      catch (IllegalStateException ise) {", "-      }", "-      catch (FileMovedException fme) {", "-        fileName = fme.getFile().getAbsolutePath();", "-      }", "-      errors[0] = new JUnitError(new File(fileName), -1, -1, \"Previous test was interrupted\", true,", "-                                 \"\", \"No associated stack trace\");", "+//      try {", "+//        fileName = _docBeingTested.getDocument().getFile().getAbsolutePath();", "+//      }", "+//      catch (IllegalStateException ise) {", "+//      }", "+//      catch (FileMovedException fme) {", "+//        fileName = fme.getFile().getAbsolutePath();", "+//      }", "+//      errors[0] = new JUnitError(new File(fileName), -1, -1, \"Previous test was interrupted\", true,", "+//                                 \"\", \"No associated stack trace\");", "+      errors[0] = new JUnitError(\"Previous test was interrupted\", true, \"\");", "-      _docBeingTested = null;", "+//      _docBeingTested = null;", "+      _isTestInProgress = false;"]}], "num": 5811}
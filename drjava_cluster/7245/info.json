{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c84caa2553e9adf3fb01b7879a3a818b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f6b8db8479185abd825b6150653e92d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public Class visit(IfThenStatement node)", "signatureAfterChange": "   public Class visit(IfThenStatement node)", "diff": ["+    Expression cond = node.getCondition();", "+    ", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+    Class type = cond.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "-", "+    ", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"cond.booleanValue();\"", "+      node.setCondition(_unbox(cond, type));", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44fb9934fac8dac7b526b2a699330571", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Class visit(IfThenElseStatement node)", "signatureAfterChange": "   public Class visit(IfThenElseStatement node)", "diff": ["+    Expression cond = node.getCondition();", "+    ", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+    Class type = cond.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "+    }", "+    ", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"cond.booleanValue();\"", "+      node.setCondition(_unbox(cond, type));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d0a232276d58fa811cba37c2b20cebe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "d177c7b252113934f48a076489797b39dc0f639d", "commitAfterChange": "a58ec688d3981da4575e2c6fb686db26b70ae68b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public Class visit(DoStatement node)", "signatureAfterChange": "   public Class visit(DoStatement node)", "diff": ["-    // Check the condition", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+    Expression exp = node.getCondition();", "+    Class type = exp.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "+    }", "+    ", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"exp.booleanValue();\"", "+      node.setCondition(_unbox(exp, type));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5c78852fa044545e7b458876e8cf58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "d177c7b252113934f48a076489797b39dc0f639d", "commitAfterChange": "a58ec688d3981da4575e2c6fb686db26b70ae68b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public Class visit(ForStatement node)", "signatureAfterChange": "   public Class visit(ForStatement node)", "diff": ["-    Node cond = node.getCondition();", "+    Expression cond = node.getCondition();", "-      // Check the condition", "-      if (cond.acceptVisitor(this) != boolean.class) {", "+      ", "+      Class type = cond.acceptVisitor(this);", "+      if (type != boolean.class && type != Boolean.class) {", "+      }", "+      ", "+      // Auto unbox: Boolean->boolean", "+      if (type == Boolean.class) {", "+        // add method call on expression:", "+        //   \"cond.booleanValue();\"", "+        node.setCondition(_unbox(cond, type));"]}], "num": 7245}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80f3894511ffb307f72633a684843f7c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51f5b672e6fb430c6a0dbe32cc7cecef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "0a93533cf1b555344278f97d8d989cd2f113c958", "commitAfterChange": "c950bf1122c303a9137db70374c1cd2e2fc01d08", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "               protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "               protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-      ", "-      // if a test is running, don't start another one", "-      if (_isTestInProgress) {", "-        return;", "+      // if a test is running, don't start another one, but make sure someone's not", "+      // trying to notify that the previous test had finished.", "+      synchronized(_notifier) {", "+        if (_isTestInProgress) return;", "-      ", "+        ", "+      ", "-", "+        ", "+        ", "+                  ", "-          if(entry.isFile()){", "+          if(entry.isFile() && entry.getPath().endsWith(\".class\")){", "+                  ", "+                    ", "-              // class file is bad", "+              // class file is bads", "+      ", "-      ", "-      List<String> tests = _jvm.runTestSuite(classNames, files, allTests);", "-      ArrayList<OpenDefinitionsDocument> odds =", "-        new ArrayList<OpenDefinitionsDocument>();", "-      Iterator<String> it2 = tests.iterator();", "-      while (it2.hasNext()) {", "-        odds.add(classNamesToODDs.get(it2.next()));", "+      // synchronized over _notifier so that junitStarted is ensured to be ", "+      // called before the testing thread (JUnitTestManager) makes any notifications", "+      // to the notifier.  This can happen if the test fails quickly or if the test", "+      // class is not found.", "+      synchronized(_notifier) {", "+        List<String> tests = _jvm.runTestSuite(classNames, files, allTests);", "+        ArrayList<OpenDefinitionsDocument> odds =", "+          new ArrayList<OpenDefinitionsDocument>();", "+        Iterator<String> it2 = tests.iterator();", "+        while (it2.hasNext()) {", "+          odds.add(classNamesToODDs.get(it2.next()));", "+        }", "+        _notifier.junitStarted(odds);", "-      _notifier.junitStarted(odds);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adfcd4c0a1c53a163a1fb573252c1635", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "cd3fdc4192308881ec8f5fad639265e225a75848", "commitAfterChange": "f09079b576a626b69c1cf6a20aa2d21acb9dbff4", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "   public static File getShortFile(File f) throws IOException", "signatureAfterChange": "   public static File getShortFile(File f) throws IOException", "diff": ["+//      LOG.log(\"parent: \"+parent);", "-          // the format of a line is:", "-          //  Volume in drive C is SYSTEM", "-          //  Volume Serial Number is B4ED-7405", "-          //", "-          //  Directory of C:\\", "-          //", "-          // 09/02/2009  11:02 PM    <DIR>          DOCUME~1     Documents and Settings", "-          // 09/02/2009  11:02 PM               123 LONGFI~1     Long File Name", "-          // 09/02/2009  11:02 PM    <DIR>                       shortdir", "-          // 09/02/2009  11:02 PM               123              short", "-          ", "-          // skip empty lines", "-          if (line.trim().length() == 0) continue;", "-          ", "-          // header starts with whitespace", "-          if (line.startsWith(\" \")) continue;", "-          ", "-          // strip off first two columns", "-          int pos = line.indexOf(\"  \");", "-          if (pos == -1) continue;", "-          pos = line.indexOf(\"  \", pos+2);", "-          if (pos == -1) continue;", "-          line = line.substring(pos).trim();", "-          ", "-          // <DIR>          DOCUME~1     Documents and Settings", "-          //            123 LONGFI~1     Long File Name", "-          // <DIR>                       shortdir", "-          //            123              short", "-          ", "-          // strip off third column (<DIR> or file size)", "-          pos = line.indexOf(' ');", "-          if (pos == -1) continue;", "-          line = line.substring(pos).trim();", "-          ", "-          File shortF = null;", "-          // if the line ends with the file name we are looking for...", "-          if (line.equals(f.getName())) {", "-            // short file name only", "-            shortF = new File(parent, line);", "-            if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "-              // this is the short file name we are looking for", "-              found = true;", "-            }", "-          }", "-          else if (line.startsWith(f.getName())) {", "-            // perhaps already short file name of a long file name", "-            shortF = new File(parent, f.getName());", "-            if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "-              // this is the short file name we are looking for", "-              found = true;", "-            }", "-          }", "-          else if (line.endsWith(\" \"+f.getName())) {", "-            // remove the long file name at the end and trim off whitespace", "-            // DOCUME~1", "-            // LONGFI~1", "-            // ", "-            // ", "-            String shortLine = line.substring(0, line.length() - f.getName().length()).trim();", "+          if (!found) {", "+//            LOG.log(\"\\tline: '\"+line+\"'\");", "+            // the format of a line is:", "+            //  Volume in drive C is SYSTEM", "+            //  Volume Serial Number is B4ED-7405", "+            //", "+            //  Directory of C:\\", "+            //", "+            // 09/02/2009  11:02 PM    <DIR>          DOCUME~1     Documents and Settings", "+            // 09/02/2009  11:02 PM               123 LONGFI~1     Long File Name", "+            // 09/02/2009  11:02 PM    <DIR>                       shortdir", "+            // 09/02/2009  11:02 PM               123              short", "-            if (line.length() == 0) {", "-              // already short", "-              found = true;", "-              shortF = f;", "+            // skip empty lines", "+            if (line.trim().length() == 0) continue;", "+            ", "+            // header starts with whitespace", "+            if (line.startsWith(\" \")) continue;", "+            ", "+            // strip off first two columns", "+            int pos = line.indexOf(\"  \");", "+            if (pos == -1) continue;", "+            pos = line.indexOf(\"  \", pos+2);", "+            if (pos == -1) continue;", "+            line = line.substring(pos).trim();", "+//            LOG.log(\"\\t[1] '\"+line+\"'\");", "+            ", "+            // <DIR>          DOCUME~1     Documents and Settings", "+            //            123 LONGFI~1     Long File Name", "+            // <DIR>                       shortdir", "+            //            123              short", "+            ", "+            // strip off third column (<DIR> or file size)", "+            pos = line.indexOf(' ');", "+            if (pos == -1) continue;", "+            line = line.substring(pos).trim();", "+//            LOG.log(\"\\t[2] '\"+line+\"'\");", "+            ", "+            File shortF = null;", "+            // if the line ends with the file name we are looking for...", "+            if (line.equals(f.getName())) {", "+              // short file name only", "+              shortF = new File(parent, line);", "+//              LOG.log(\"\\t[3] shortF = \"+shortF);", "+              if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "+                // this is the short file name we are looking for", "+//                LOG.log(\"\\t[3a] found\");", "+                found = true;", "+              }", "-            else {", "-              shortF = new File(parent, shortLine);", "+            else if (line.startsWith(f.getName()) && f.getName().contains(\"~\")) {", "+              // perhaps already short file name of a long file name", "+              shortF = new File(parent, f.getName());", "+//              LOG.log(\"\\t[4] shortF = \"+shortF);", "+              if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "+                // this is the short file name we are looking for", "+//                LOG.log(\"\\t[4a] found\");", "+                found = true;", "+              }", "+            }", "+            else if (line.endsWith(\" \"+f.getName())) {", "+              // remove the long file name at the end and trim off whitespace", "+              // DOCUME~1", "+              // LONGFI~1", "+              // ", "+              // ", "+              String shortLine = line.substring(0, line.length() - f.getName().length()).trim();", "+//              LOG.log(\"\\t[5] shortLine: '\"+shortLine+\"'\");", "-              // if this file exists, check that it is exactly the file we're looking for", "-              if (shortF.exists()) {", "-                if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "-                  // this is the short file name we are looking for", "-                  // set flag to true, but continue reading lines from the process", "-                  // otherwise DIR /X may block because the stdout stream is full", "-                  found = true;", "+              if (line.length() == 0) {", "+                // already short", "+                found = true;", "+                shortF = f;", "+//                LOG.log(\"\\t[6] shortF = \"+shortF);", "+              }", "+              else {", "+                shortF = new File(parent, shortLine);", "+//                LOG.log(\"\\t[7] shortF = \"+shortF);", "+                ", "+                // if this file exists, check that it is exactly the file we're looking for", "+                if (shortF.exists()) {", "+                  if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "+                    // this is the short file name we are looking for", "+                    // set flag to true, but continue reading lines from the process", "+                    // otherwise DIR /X may block because the stdout stream is full", "+                    found = true;", "+                  }", "-          }", "-          if (found && (shortF != null)) {", "-            // prepend the short file name to s", "-            s = shortF.getName()+((s.length()==0)?\"\":(File.separator+s));", "+            if (found && (shortF != null)) {", "+              // prepend the short file name to s", "+//              LOG.log(\"\\t[8 ] s = '\"+s+\"'\");", "+              s = shortF.getName()+((s.length()==0)?\"\":(File.separator+s));", "+//              LOG.log(\"\\t[8a] s = '\"+s+\"'\");", "+            }"]}], "num": 11070}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a245c6a4054795d37ebf09954f1b9d30", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d928249f833d338e137b36a15732f22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVMTest.java", "commitBeforeChange": "23f26b7beff70c50bdf89d599411e87eb533660c", "commitAfterChange": "d270e635809ff45e86dfa41e0144eeb70ed87876", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testAddNamedDebugInterpreter()", "signatureAfterChange": "   public void testAddNamedDebugInterpreter()", "diff": ["-    Hashtable<String,JavaInterpreter> debugInterpreters = InterpreterJVM.ONLY.getDebugInterpreters();", "-    JavaInterpreter interpreter1 = new DynamicJavaAdapter();", "-    JavaInterpreter interpreter2 = new DynamicJavaAdapter();", "-    JavaInterpreter interpreter3 = new DynamicJavaAdapter();", "-", "-    assertTrue(debugInterpreters.isEmpty());", "-    InterpreterJVM.ONLY.addDebugInterpreter(\"interpreter1\", interpreter1);", "-    assertEquals(interpreter1, debugInterpreters.get(\"interpreter1\"));", "-    assertTrue(!debugInterpreters.containsKey(\"interpreter2\"));", "-", "-    InterpreterJVM.ONLY.addDebugInterpreter(\"interpreter2\", interpreter2);", "-    assertEquals(interpreter1, debugInterpreters.get(\"interpreter1\"));", "-    assertEquals(interpreter2, debugInterpreters.get(\"interpreter2\"));", "-", "+    assertTrue(_debugInterpreters.isEmpty());", "+    _addInterpreter(\"interpreter1\", _interpreter1);", "+    assertEquals(_interpreter1, _debugInterpreters.get(\"interpreter1\"));", "+    assertTrue(!_debugInterpreters.containsKey(\"interpreter2\"));", "+    ", "+    _addInterpreter(\"interpreter2\", _interpreter2);", "+    assertEquals(_interpreter1, _debugInterpreters.get(\"interpreter1\"));", "+    assertEquals(_interpreter2, _debugInterpreters.get(\"interpreter2\"));", "+    ", "-      InterpreterJVM.ONLY.addDebugInterpreter(\"interpreter1\", interpreter3);", "+      _addInterpreter(\"interpreter1\", _interpreter3);", "-      assertEquals(interpreter1, debugInterpreters.get(\"interpreter1\"));", "-      assertEquals(interpreter2, debugInterpreters.get(\"interpreter2\"));", "-      assertTrue(!debugInterpreters.contains(interpreter3));", "+      assertEquals(_interpreter1, _debugInterpreters.get(\"interpreter1\"));", "+      assertEquals(_interpreter2, _debugInterpreters.get(\"interpreter2\"));", "+      assertTrue(!_debugInterpreters.contains(_interpreter3));", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b585c7da6aa33bb6aca1b71ba41e6374", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVMTest.java", "commitBeforeChange": "60798300f32b2ec4f4cff0f390993b3a5984e6c1", "commitAfterChange": "6fa1e9e0526601b88fed849b111530adacda855f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testSwitchingActiveInterpreter() throws ExceptionReturnedException", "signatureAfterChange": "   public void testSwitchingActiveInterpreter() throws ExceptionReturnedException", "diff": ["-    jvm.getActiveInterpreter().defineVariable(var0, val0);", "-    assertEquals(val0, jvm.getActiveInterpreter().interpret(var0));", "+    JavaInterpreter interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "+    interpreter.defineVariable(var0, val0);", "+    assertEquals(val0, interpreter.interpret(var0));", "+    interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "-      jvm.getActiveInterpreter().interpret(var0);", "+      interpreter.interpret(var0);", "-    jvm.getActiveInterpreter().defineVariable(var1,val1);", "-    assertEquals(val1, jvm.getActiveInterpreter().interpret(var1));", "+    interpreter.defineVariable(var1,val1);", "+    assertEquals(val1, interpreter.interpret(var1));", "+    interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "-      jvm.getActiveInterpreter().interpret(var0);", "+      interpreter.interpret(var0);", "-      jvm.getActiveInterpreter().interpret(var1);", "+      interpreter.interpret(var1);", "-    jvm.getActiveInterpreter().defineVariable(var2,val2);", "-    assertEquals(val2, jvm.getActiveInterpreter().interpret(var2));", "+    interpreter.defineVariable(var2,val2);", "+    assertEquals(val2, interpreter.interpret(var2));", "-    jvm.setDefaultInterpreter();", "+    jvm.setToDefaultInterpreter();", "+    interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "-      jvm.getActiveInterpreter().interpret(var1);", "+      interpreter.interpret(var1);", "-      jvm.getActiveInterpreter().interpret(var2);", "+      interpreter.interpret(var2);", "+    interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "-      jvm.getActiveInterpreter().interpret(var0);", "+      interpreter.interpret(var0);", "-      jvm.getActiveInterpreter().interpret(var2);", "+      interpreter.interpret(var2);", "-    assertEquals(val1, jvm.getActiveInterpreter().interpret(var1));", "+    assertEquals(val1, interpreter.interpret(var1));", "-      assertEquals(\"Interpreter <not an interpreter> does not exist.\", ex.getMessage());", "+      assertEquals(\"Interpreter 'not an interpreter' does not exist.\", ex.getMessage());"]}], "num": 29924}
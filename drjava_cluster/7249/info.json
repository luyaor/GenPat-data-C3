{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad29231e2f7339029d9af31a7345938e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2e42bc5a1beaa64ecf7aefa50cd772", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected static Map<FullVersion, Iterable<JarJDKToolsLibrary>>     getCompletedCompoundResults(GlobalModel model,                                 Iterable<JarJDKToolsLibrary> collapsed,                                 Iterable<JarJDKToolsLibrary> compoundCollapsed)", "signatureAfterChange": "   protected static Map<FullVersion, Iterable<JarJDKToolsLibrary>>     getCompletedCompoundResults(GlobalModel model,                                 Iterable<JarJDKToolsLibrary> collapsed,                                 Iterable<JarJDKToolsLibrary> compoundCollapsed)", "diff": ["+    JDKToolsLibrary.msg(\"---- Getting Completed Compound Results ----\");", "+    ", "-      JDKToolsLibrary.msg(\"compoundLib: \"+compoundLib.version());", "-      JDKToolsLibrary.msg(\"\\t\"+compoundLib.location());", "+      JDKToolsLibrary.msg(\"compoundLib: \"+compoundLib);", "+      JDKToolsLibrary.msg(\"    \"+compoundLib.location());", "-        JDKToolsLibrary.msg(\"\\texact? \"+javaLib.version());", "+        if (!javaLib.jdkDescriptor().isBaseForCompound()) continue; // javaLib not suitable as base", "+        JDKToolsLibrary.msg(\"    exact? \"+javaLib);", "-          JDKToolsLibrary.msg(\"\\t\\tfound\");", "+          JDKToolsLibrary.msg(\"        found\");", "-          JDKToolsLibrary.msg(\"\\tmajor? \"+javaLib.version());", "+          if (!javaLib.jdkDescriptor().isBaseForCompound()) continue; // javaLib not suitable as base", "+          JDKToolsLibrary.msg(\"    major? \"+javaLib);", "-            JDKToolsLibrary.msg(\"\\t\\tfound\");", "+            JDKToolsLibrary.msg(\"        found\");", "-          JDKToolsLibrary.msg(\"\\t==> \"+lib.version());", "+          JDKToolsLibrary.msg(\"    ==> \"+lib.version());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "604917a5679a26278f4d2b3b7f4c9ce2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipCommentsTest.java", "commitBeforeChange": "0047e2d5991ef20f74452ac3c21bd6d7ee99b408", "commitAfterChange": "818d684134925745129d103adc256ed04e291a53", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public void testOpenBracePrefix() throws BadLocationException", "signatureAfterChange": "    public void testOpenBracePrefix() throws BadLocationException", "diff": ["-      \"    // one line comment \\n\" + /*  50 */", "+      \"    // {        }       \\n\" + /*  50 */", "-      \"     * javadoc comment  \\n\" + /* 125 */", "+      \"     * {        }       \\n\" + /* 125 */", "-      \"    int method()        \\n\" + /* 175 */", "-      \"    {                   \\n\" + /* 200 */", "+      \"    int method() /*     \\n\" + /* 175 */", "+      \" */ {                   \\n\" + /* 200 */", "-      \"    { // one line       \\n\" + /* 325 */", "-      \"    }                   \\n\" + /* 350 */", "-      \"    */                  \\n\" + /* 375 */", "+      \"/**stuff*/   {  // stuff\\n\" + /* 325 */", "+      \"             }          \\n\" + /* 350 */", "+      \"                        \\n\" + /* 375 */", "-    assertTrue(\"At start of block - line starts with an open brace.\",        _rule.applyRule(_doc, 221));", "+    assertTrue(\"Line closes comment. It follows an open brace.\",             _rule.applyRule(_doc, 201));", "+    assertTrue(\"Line closes comment. It follows an open brace.\",             _rule.applyRule(_doc, 221));", "-    assertTrue(\"Line inside multi-line comment, starts with an open brace\", !_rule.applyRule(_doc, 325));", "-    assertTrue(\"Line inside multi-line comment, starts with a close brace\", !_rule.applyRule(_doc, 355));", "+    assertTrue(\"Line closes comment. It follows an open brace.\",             _rule.applyRule(_doc, 325));", "+    assertTrue(\"Line starts with a close brace.\",                           !_rule.applyRule(_doc, 355));", "+    assertTrue(\"Empty line.\",                                               !_rule.applyRule(_doc, 390));"]}], "num": 7249}
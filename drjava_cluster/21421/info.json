{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "104a3bf6b5b4eaf9fbaa3424304757d1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "631fcbf951674059599cc28a38b6a256", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data enclosing)", "signatureAfterChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data enclosing)", "diff": ["+    //Should conssolidate with same method in AdvancedVisitor; almost identical", "-    String[] mav;", "+    String[] mav = new String[] {\"final\"};", "+        ", "-      mav = new String[] {\"final\"};", "-      SymbolData type = getSymbolData(vd.getType().getName(), vd.getType().getSourceInfo());", "-      if (type != null) {", "-        varData[i] = ", "-          new VariableData(name, new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, mav), type, true, enclosing);", "-        varData[i].gotValue();", "+      SourceInfo si = vd.getType().getSourceInfo();", "+      SymbolData type = getSymbolData(vd.getType().getName(), si);", "+      ", "+      if (type == null) {  // should add && ! elementary level here ?  What about library types?", "+        //see if this is a partially qualified field reference", "+        type = enclosing.getInnerClassOrInterface(vd.getType().getName());", "-      else { ", "-        /* if type is null, then there was an error, trying to resolve it. ", "-         * Just put 'null' in the array, because we will never try to access it. */", "-        _addError(\"Class or Interface \" + vd.getType().getName() + \" not found\", vd);", "-        varData[i]=null;", "+      ", "+      if (type == null) {", "+        //if we still couldn't resolve sd, create a continuation for it.", "+        type = new SymbolData(enclosing.getSymbolData().getName() + \"$\" + vd.getType().getName());", "+        enclosing.getSymbolData().addInnerClass(type);", "+        type.setOuterData(enclosing.getSymbolData());", "+      ", "+      varData[i] = new VariableData(name, ", "+                                    new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, mav), ", "+                                    type, true, enclosing);", "+      varData[i].gotValue();", "+   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "742a946c4958a2a140cfc102eedae03f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": "   protected VariableData[] _variableDeclaration2VariableData(VariableDeclaration vd, Data enclosing)", "signatureAfterChange": "   protected VariableData[] _variableDeclaration2VariableData(VariableDeclaration vd, Data enclosing)", "diff": ["-    Type type;", "-    String name;", "-    for (int i = 0; i < declarators.length; i++) {", "-      declarators[i].visit(this);", "-      type = declarators[i].getType();", "-      name = declarators[i].getName().getText();", "-      SymbolData sd = getSymbolData(type.getName(), type.getSourceInfo());", "-      ", "-      if (sd == null) {", "-        //see if this is a partially qualified field reference", "-        sd = enclosing.getInnerClassOrInterface(type.getName());", "-      }", "-      ", "-      if (sd == null) {", "-        //if we still couldn't resolve sd, create a continuation for it.", "-        sd = new SymbolData(enclosing.getSymbolData().getName() + \"$\" + type.getName());", "-        enclosing.getSymbolData().addInnerClass(sd);", "-        sd.setOuterData(enclosing.getSymbolData());", "-        continuations.put(sd.getName(), new Pair<SourceInfo, LanguageLevelVisitor>(type.getSourceInfo(), this));", "-      }", "-      ", "+    for (VariableDeclarator declarator: declarators) {", "+      declarator.visit(this); // Does NOTHING!", "+      Type type = declarator.getType();", "+      String name = declarator.getName().getText();", "+      SymbolData sd = handleDeclarator(type, name, enclosing);", "+   ", "-        boolean initialized = declarators[i] instanceof InitializedVariableDeclarator;", "+        boolean initialized = declarator instanceof InitializedVariableDeclarator;", "-      else _addAndIgnoreError(\"Class or Interface \" + type.getName() + \" not found\", declarators[i].getType());", "+      else _addAndIgnoreError(\"Class or Interface \" + name + \" not found\", type);"]}], "num": 21421}
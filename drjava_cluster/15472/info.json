{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "459909f462196d7e8f6f231f2749b9a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0be2f3cddac28e13e6613167a6e836d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipComments.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-      int currentPos = doc.getCurrentLocation(),", "-        startPos   = doc.getLineFirstCharPos(currentPos),", "-        endPos     = doc.getLineEndPos(currentPos),", "-        lineLength = endPos - startPos;", "+      int origPos = doc.getCurrentLocation();", "+      int startPos   = doc.getLineFirstCharPos(origPos);", "+      int endPos     = doc.getLineEndPos(origPos);", "+      int lineLength = endPos - startPos;", "+      int prefixLen = _prefix.length();", "-      char currentChar, previousChar = '\\0';", "+      char prevChar = '\\0';", "-      for (int i = 0; i < lineLength; i++) {", "-        // Get state for walker position.", "-        ", "-        doc.move( startPos - currentPos + i);", "-        ReducedModelState state = doc.getStateAtCurrent();", "-        doc.move(-startPos + currentPos - i);", "-        ", "-        ", "-        currentChar = text.charAt(i);", "-        ", "-        if (state.equals(INSIDE_LINE_COMMENT)) return false;", "-        if (state.equals(INSIDE_BLOCK_COMMENT)) {  // Handle case: ...*/*", "-          previousChar = '\\0'; ", "-          continue;", "-        }", "-        if (state.equals(FREE)) { // Can prefix still fit on the current line?", "-          if (_prefix.length() > lineLength - i) return false;", "-          else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/') {", "-            // '/' is the only non-WS character that we consume without", "-            // immediately returning false. When we try to match the prefix,", "-            // we also need to reflect this implicit lookahead mechanism.", "-            return true;", "+//      System.err.println(\"line is: '\" + text + \"'\");", "+      ", "+      doc.setCurrentLocation(startPos);", "+      try { ", "+        for (int i = 0; i < lineLength; i++, doc.move(1)) {", "+          ", "+          ReducedModelState state = doc.getStateAtCurrent();", "+          ", "+          if (state.equals(INSIDE_BLOCK_COMMENT)) {  // Handle case: ...*/*", "+            assert prevChar == '\\0'; ", "+            continue;", "-          else if (currentChar == '/') {", "-            if (previousChar == '/') return false;", "+          char currentChar = text.charAt(i);", "+//          System.err.println(\"Iteration \" + i + \": ch = \" + currentChar + \" prevCh = \" + prevChar);", "+          ", "+          if (currentChar == '/') {", "+            if (prevChar == '/') return false;  // opened a LINE_COMMENT", "+            if (prevChar == '\\0') {", "+              prevChar = currentChar;", "+              continue;     // leading char in line is '/'", "+            }", "-          else if (currentChar == ' ' || currentChar == '\\t') {  }", "-          else if (!(currentChar == '*' && previousChar == '/')) return false;", "+          else if (currentChar == '*' && prevChar == '/') { // opened a BLOCK_COMMENT, subsequent chars will be inside", "+            prevChar = '\\0';", "+            continue;      ", "+          }", "+          else if (currentChar == ' ' || currentChar == '\\t') {  ", "+            if (prevChar == '\\0') {", "+              continue;  // consume opening whitespace", "+            }", "+          }", "+          return text.startsWith(_prefix, i);   // special cases have already been eliminated", "-        if (previousChar == '/' && currentChar != '*') return false;", "-        previousChar = currentChar;", "-      return false;", "+      finally { doc.setCurrentLocation(origPos); }", "+    return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2b9beb3656bc3f43b7cd6448e5fe3b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 58, "signatureBeforeChange": "   private Method getDefineVariableMethod(ReferenceType interpreterRef, Value val)", "signatureAfterChange": "   private Method getDefineVariableMethod(ReferenceType interpreterRef,                                           Value val)     throws DebugException", "diff": ["-  private Method getDefineVariableMethod(ReferenceType interpreterRef, Value val){", "+  private Method getDefineVariableMethod(ReferenceType interpreterRef, ", "+                                         Value val)", "+    throws DebugException", "+  {", "+    String signature_mid = \"\";", "-      signature = signature_beginning + \"Ljava/lang/Object;\" + signature_end;", "+      signature_mid = \"Ljava/lang/Object;\";", "-      signature = signature_beginning + \"Z\" + signature_end;      ", "+      signature_mid = \"Z\";    ", "-      signature = signature_beginning + \"B\" + signature_end;      ", "+      signature_mid = \"B\";", "-      signature = signature_beginning + \"C\" + signature_end;", "+      signature_mid = \"C\";", "-      signature = signature_beginning + \"D\" + signature_end;      ", "+      signature_mid = \"D\";", "-      signature = signature_beginning + \"F\" + signature_end;", "+      signature_mid = \"F\";", "-      signature = signature_beginning + \"I\" + signature_end;", "+      signature_mid = \"I\";", "-      signature = signature_beginning + \"J\" + signature_end;", "+      signature_mid = \"J\";", "-      signature = signature_beginning + \"S\" + signature_end;", "+      signature_mid = \"S\";", "- ", "+    ", "+    signature = signature_beginning + signature_mid + signature_end;", "+    if (methods.size() <= 0) {", "+      throw new DebugException(\"Could not find defineVariable method.\");", "+    }", "-    int i = 0;    ", "-    Method tempMethod = (Method)methods.get(i);", "-    ", "-    while( tempMethod.isAbstract() ){", "-      ++i;", "-      tempMethod = (Method)methods.get(i);", "+    // Make sure we have a concrete method", "+    Method tempMethod = (Method) methods.get(0);", "+    for (int i = 1; i < methods.size() && tempMethod.isAbstract(); i++) {", "+      tempMethod = (Method) methods.get(i);", "+    }", "+    if (tempMethod.isAbstract()) {", "+      throw new DebugException(\"Could not find concrete defineVariable method.\");"]}], "num": 15472}
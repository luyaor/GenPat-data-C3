{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6193ee68ff206aa1c3b7af067e3eeda4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02202481c89fe958b605648940e74d38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tprotected void checkList(List l, String s, Node n)", "signatureAfterChange": "     protected void checkList(List<Expression> l, String s, Node n)", "diff": ["-\t */", "-\tprotected void checkList(List l, String s, Node n) {", "-\t    ListIterator it = l.listIterator();", "-\t    while (it.hasNext()) {", "-\t\tObject o = ((Node)it.next()).acceptVisitor(this);", "-\t\tif (o != null) {", "-\t\t    if (o instanceof ReferenceType) {", "-\t\t\tthrow new ExecutionError(s, n);", "-\t\t    }", "-\t\t    it.set(o);", "-\t\t}", "-\t    }", "-\t}", "+     */", "+    protected void checkList(List<Expression> l, String s, Node n) {", "+      ListIterator<Expression> it = l.listIterator();", "+      while (it.hasNext()) {", "+        Object o = it.next().acceptVisitor(this);", "+        if (o != null) {", "+          if (o instanceof ReferenceType) {", "+            throw new ExecutionError(s, n);", "+          }", "+          it.set((Expression)o);  // cast to Expression is a guess here /**/", "+        }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef678755d94bf81caae5a385dda1fa5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Node visit(ObjectMethodCall node)", "diff": ["-  public Object visit(ObjectMethodCall node) {", "+  public Node visit(ObjectMethodCall node) {", "-    LinkedList arguments = null; // Add parameterization <Node>.", "+    LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-      arguments = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getArguments().iterator();", "+      arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "+      Iterator<Expression> it = node.getArguments().iterator();", "-        arguments.add((Node)((Node)it.next()).acceptVisitor(this));", "+        arguments.add((Expression) it.next().acceptVisitor(this));"]}], "num": 10225}
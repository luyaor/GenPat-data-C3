{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ea558b0bc396ca4912c7a0b35f2f3aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d3af899c720abc86fd53cd652c01d51", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "     public Object visit(PreIncrement node)", "signatureAfterChange": "   public Class visit(PreIncrement node)", "diff": ["+   */", "+  public Class visit(PreIncrement node) {", "+    Node exp = node.getExpression();", "+    Class c  = (Class)exp.acceptVisitor(this);", "+    ", "+    // The type of the subexpression must be numeric", "+    if (!c.isPrimitive()   ||", "+        c == void.class    ||", "+        c == boolean.class) {", "+      throw new ExecutionError(\"pre.increment.type\", node);", "+    }", "+    ", "+    // The subexpression must be a variable", "+    if (!exp.hasProperty(NodeProperties.MODIFIER)) {", "+      throw new ExecutionError(\"pre.increment.type\", node);", "+    }", "+    ", "+    node.setProperty(NodeProperties.TYPE, c);", "+    return c;", "+  }", "-     */", "-    public Object visit(PreIncrement node) {", "-        Node exp = node.getExpression();", "-        Class c  = (Class)exp.acceptVisitor(this);", "-", "-        // The type of the subexpression must be numeric", "-        if (!c.isPrimitive()   ||", "-            c == void.class    ||", "-            c == boolean.class) {", "-            throw new ExecutionError(\"pre.increment.type\", node);", "-        }", "-", "-        // The subexpression must be a variable", "-        if (!exp.hasProperty(NodeProperties.MODIFIER)) {", "-            throw new ExecutionError(\"pre.increment.type\", node);", "-        }", "-", "-        node.setProperty(NodeProperties.TYPE, c);", "-        return c;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "947d1b0df8bbb7fd02cd0ad057318e73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "     public Object visit(PreDecrement node)", "signatureAfterChange": "   public Class visit(PreDecrement node)", "diff": ["+   */", "+  public Class visit(PreDecrement node) {", "+    Node exp = node.getExpression();", "+    Class c  = (Class)exp.acceptVisitor(this);", "+    ", "+    // The type of the subexpression must be numeric", "+    if (!c.isPrimitive()   ||", "+        c == void.class    ||", "+        c == boolean.class) {", "+      throw new ExecutionError(\"pre.decrement.type\", node);", "+    }", "+    ", "+    // The subexpression must be a variable", "+    if (!exp.hasProperty(NodeProperties.MODIFIER)) {", "+      throw new ExecutionError(\"pre.decrement.type\", node);", "+    }", "+    ", "+    node.setProperty(NodeProperties.TYPE, c);", "+    return c;", "+  }", "-     */", "-    public Object visit(PreDecrement node) {", "-        Node exp = node.getExpression();", "-        Class c  = (Class)exp.acceptVisitor(this);", "-", "-        // The type of the subexpression must be numeric", "-        if (!c.isPrimitive()   ||", "-            c == void.class    ||", "-            c == boolean.class) {", "-            throw new ExecutionError(\"pre.decrement.type\", node);", "-        }", "-", "-        // The subexpression must be a variable", "-        if (!exp.hasProperty(NodeProperties.MODIFIER)) {", "-            throw new ExecutionError(\"pre.decrement.type\", node);", "-        }", "-", "-        node.setProperty(NodeProperties.TYPE, c);", "-        return c;", "-    }"]}], "num": 15224}
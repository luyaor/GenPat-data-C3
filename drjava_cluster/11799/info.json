{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a202cad2919d914b24afa34f4cb32b81", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ee5977f3bcb8546a26e940ebdce2b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "ecec455630699fb47e48815ed0e8ff7ef49584c1", "commitAfterChange": "09b707cda41d2d3c82d34a50c8dbebc9d7cd95a2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "\r   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["-    \r", "+\r", "-                                                 LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d + \"),\r", "+                                                 LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\"),\r", "+      msg(\"root: \"+root);\r", "+        msg(\"\\tsubdir: \"+subdir);\r", "+    // JavaMint\r", "+    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/classes.jar\"), jars);\r", "+    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/tools.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/soylatte/lib/classes.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/soylatte/lib/tools.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/classes.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/tools.jar\"), jars);\r", "+    try {\r", "+      String mint_home = System.getenv(\"MINT_HOME\");\r", "+      if (mint_home!=null) {\r", "+        addIfFile(new File(new File(mint_home), \"dist/lib/classes.jar\"), jars);\r", "+        addIfFile(new File(new File(mint_home), \"dist/lib/tools.jar\"), jars);\r", "+      }\r", "+    }\r", "+    catch(Exception e) { /* ignore MINT_HOME variable */ }\r", "+    \r", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> mintResults =\r", "+      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();\r", "+    \r", "-        if (results.containsKey(v)) { results.put(v, IterUtil.compose(lib, results.get(v))); }\r", "-        else { results.put(v, IterUtil.singleton(lib)); }\r", "+        Map<FullVersion, Iterable<JarJDKToolsLibrary>> mapToAddTo = results;\r", "+        if (v.vendor().equals(JavaVersion.VendorType.MINT)) { mapToAddTo = mintResults; }\r", "+        \r", "+        if (mapToAddTo.containsKey(v)) { mapToAddTo.put(v, IterUtil.compose(lib, mapToAddTo.get(v))); }\r", "+        else { mapToAddTo.put(v, IterUtil.singleton(lib)); }\r", "-    return IterUtil.reverse(IterUtil.collapse(results.values()));\r", "+    \r", "+    Iterable<JarJDKToolsLibrary> collapsed = IterUtil.reverse(IterUtil.collapse(results.values()));\r", "+    Iterable<JarJDKToolsLibrary> mintCollapsed = IterUtil.reverse(IterUtil.collapse(mintResults.values()));\r", "+    \r", "+    for(JarJDKToolsLibrary javaLib: collapsed) {\r", "+      msg(\"JDK: \"+javaLib.version());\r", "+    }\r", "+    for(JarJDKToolsLibrary mintLib: mintCollapsed) {\r", "+      msg(\"Mint: \"+mintLib.version());\r", "+    }\r", "+    \r", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> javaMintResults =\r", "+      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();\r", "+    // now we have the JDK libraries in collapsed and the Mint libraries in mintCollapsed\r", "+    for(JarJDKToolsLibrary mintLib: mintCollapsed) {\r", "+      FullVersion mintVersion = mintLib.version();\r", "+      msg(\"Mint version \"+mintVersion.majorVersion()+\": \"+mintVersion);\r", "+      JarJDKToolsLibrary found = null;\r", "+      // try to find a JDK in results that matches mintVersion exactly, except for vendor\r", "+      for(JarJDKToolsLibrary javaLib: collapsed) {\r", "+        FullVersion javaVersion = javaLib.version();\r", "+        msg(\"\\tlooking for exact version: Java version \"+javaVersion.majorVersion()+\": \"+javaVersion);\r", "+        if ((javaVersion.majorVersion().equals(mintVersion.majorVersion())) &&\r", "+            (javaVersion.maintenance()==mintVersion.maintenance()) &&\r", "+            (javaVersion.update()==mintVersion.update()) &&\r", "+            (javaVersion.release()==mintVersion.release())) {\r", "+          found = javaLib;\r", "+          break;\r", "+        }\r", "+      }\r", "+      // if we didn't find one, take the best JDK that matches the major version\r", "+      if (found==null) {\r", "+        for(JarJDKToolsLibrary javaLib: collapsed) {\r", "+          FullVersion javaVersion = javaLib.version();\r", "+          msg(\"\\tlooking for major version Java version \"+javaVersion.majorVersion()+\": \"+javaVersion);\r", "+          if (javaVersion.majorVersion().equals(mintVersion.majorVersion())) {\r", "+            found = javaLib;\r", "+            break;\r", "+          }\r", "+        }\r", "+      }\r", "+      // if we found a JDK, then create a new Mint library\r", "+      if (found!=null) {\r", "+        msg(\"\\t#### picked \"+found.version());\r", "+        JarJDKToolsLibrary lib = makeFromFile(mintLib.location(), model, found.bootClassPath());\r", "+        if (lib.isValid()) {\r", "+          FullVersion v = lib.version();\r", "+          if (javaMintResults.containsKey(v)) { javaMintResults.put(v, IterUtil.compose(lib, javaMintResults.get(v))); }\r", "+          else { javaMintResults.put(v, IterUtil.singleton(lib)); }\r", "+        }\r", "+      }\r", "+    }\r", "+    Iterable<JarJDKToolsLibrary> composed =\r", "+      IterUtil.compose(collapsed,IterUtil.reverse(IterUtil.collapse(javaMintResults.values())));\r", "+\r", "+    for(JarJDKToolsLibrary composedLib: composed) {\r", "+      msg(\"Composed: \"+composedLib.version());\r", "+    }\r", "+    return composed;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a246b674cec23063da4096f93aa8cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "0de85ca2b785d7ad489463f9a174133a91014910", "commitAfterChange": "601a464d68d9614b980a0acf64c3c8928b17445c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["+    addIfFile(edu.rice.cs.util.FileOps.getDrJavaFile(), jars); // drjava.jar file itself; check if it's a combined Mint/DrJava jar", "+", "+    // Search for all compound JDK descriptors in the drjava.jar file", "+    Iterable<CompoundJDKDescriptor> descriptors = searchForCompoundJDKDescriptors(); ", "+    for(CompoundJDKDescriptor desc: descriptors) {", "+      // add the specific search directories and files", "+      for(File f: desc.getSearchDirectories()) { addIfDir(f, roots); }", "+      for(File f: desc.getSearchFiles()) { addIfFile(f, jars); }", "+      // add to the set of packages that need to be shadowed", "+      TOOLS_PACKAGES.addAll(desc.getToolsPackages());", "+    }", "+    ", "-    ", "+", "-    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "-    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/soylatte/lib/classes.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/soylatte/lib/tools.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "-    try {", "-      String mint_home = System.getenv(\"MINT_HOME\");", "-      if (mint_home!=null) {", "-        JDKToolsLibrary.msg(\"MINT_HOME environment variable set to: \"+mint_home);", "-        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/classes.jar\"), jars);", "-        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/tools.jar\"), jars);", "-      }", "-      else {", "-        JDKToolsLibrary.msg(\"MINT_HOME not set\");", "-      }", "-    }", "-    catch(Exception e) { /* ignore MINT_HOME variable */ }", "-    addIfFile(edu.rice.cs.util.FileOps.getDrJavaFile(), jars); // drjava.jar file itself; check if it's a combined Mint/DrJava jar", "+//    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "+//    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "+//    addIfFile(new File(\"/usr/local/soylatte/lib/classes.jar\"), jars);", "+//    addIfFile(new File(\"/usr/local/soylatte/lib/tools.jar\"), jars);", "+//    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "+//    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "+//    try {", "+//      String mint_home = System.getenv(\"MINT_HOME\");", "+//      if (mint_home!=null) {", "+//        JDKToolsLibrary.msg(\"MINT_HOME environment variable set to: \"+mint_home);", "+//        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/classes.jar\"), jars);", "+//        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/tools.jar\"), jars);", "+//      }", "+//      else {", "+//        JDKToolsLibrary.msg(\"MINT_HOME not set\");", "+//      }", "+//    }", "+//    catch(Exception e) { /* ignore MINT_HOME variable */ }", "-    Map<FullVersion, Iterable<JarJDKToolsLibrary>> mintResults =", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> compoundResults =", "-        if (v.vendor().equals(JavaVersion.VendorType.COMPOUND)) { mapToAddTo = mintResults; }", "+        if (v.vendor().equals(JavaVersion.VendorType.COMPOUND)) { mapToAddTo = compoundResults; }", "-    Iterable<JarJDKToolsLibrary> mintCollapsed = IterUtil.reverse(IterUtil.collapse(mintResults.values()));", "+    Iterable<JarJDKToolsLibrary> compoundCollapsed = IterUtil.reverse(IterUtil.collapse(compoundResults.values()));", "-    Map<FullVersion, Iterable<JarJDKToolsLibrary>> javaMintResults =", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> allResults =", "-    // now we have the JDK libraries in collapsed and the Mint libraries in mintCollapsed", "-    for(JarJDKToolsLibrary mintLib: mintCollapsed) {", "-      JDKToolsLibrary.msg(\"mintLib: \"+mintLib.version());", "-      JDKToolsLibrary.msg(\"\\t\"+mintLib.location());", "-      FullVersion mintVersion = mintLib.version();", "+    // now we have the JDK libraries in collapsed and the compound libraries in compoundCollapsed", "+    for(JarJDKToolsLibrary compoundLib: compoundCollapsed) {", "+      JDKToolsLibrary.msg(\"compoundLib: \"+compoundLib.version());", "+      JDKToolsLibrary.msg(\"\\t\"+compoundLib.location());", "+      FullVersion compoundVersion = compoundLib.version();", "-      // try to find a JDK in results that matches mintVersion exactly, except for vendor", "+      // try to find a JDK in results that matches compoundVersion exactly, except for vendor", "-        if ((javaVersion.majorVersion().equals(mintVersion.majorVersion())) &&", "-            (javaVersion.maintenance()==mintVersion.maintenance()) &&", "-            (javaVersion.update()==mintVersion.update()) &&", "-            (javaVersion.release()==mintVersion.release())) {", "+        if ((javaVersion.majorVersion().equals(compoundVersion.majorVersion())) &&", "+            (javaVersion.maintenance()==compoundVersion.maintenance()) &&", "+            (javaVersion.update()==compoundVersion.update()) &&", "+            (javaVersion.release()==compoundVersion.release())) {", "-          if (javaVersion.majorVersion().equals(mintVersion.majorVersion())) {", "+          if (javaVersion.majorVersion().equals(compoundVersion.majorVersion())) {", "-      // if we found a JDK, then create a new Mint library", "+      // if we found a JDK, then create a new compound library", "-        JarJDKToolsLibrary lib = makeFromFile(mintLib.location(), model, found.bootClassPath());", "+        JarJDKToolsLibrary lib = makeFromFile(compoundLib.location(), model, found.bootClassPath());", "-          if (javaMintResults.containsKey(v)) { javaMintResults.put(v, IterUtil.compose(lib, javaMintResults.get(v))); }", "-          else { javaMintResults.put(v, IterUtil.singleton(lib)); }", "+          if (allResults.containsKey(v)) { allResults.put(v, IterUtil.compose(lib, allResults.get(v))); }", "+          else { allResults.put(v, IterUtil.singleton(lib)); }", "-      compose(collapsed,IterUtil.reverse(IterUtil.collapse(javaMintResults.values())));", "+      compose(collapsed,IterUtil.reverse(IterUtil.collapse(allResults.values())));"]}], "num": 11799}
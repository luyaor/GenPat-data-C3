{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffeefefc6f5123df10a2a58338136217", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f83e314ce2b206a0e92c884b83054d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/CompletionMonitor.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public synchronized boolean attemptEnsureSignaled(long timeout)", "signatureAfterChange": "   public boolean attemptEnsureSignaled(long timeout)", "diff": ["-  public synchronized boolean attemptEnsureSignaled(long timeout) {", "-    if (timeout == 0) { return attemptEnsureSignaled(); }", "-    else if (_signal) { return true; }", "-    else {", "-      // must record expected wake-up time to account for spurious wake-ups", "-      long timeoutTime = System.currentTimeMillis() + timeout;", "-      try {", "-        do {", "-          this.wait(timeout);", "-          long currentTime = System.currentTimeMillis();", "-          if (currentTime >= timeoutTime) { return _signal; } // timeout has been reached", "-          else { timeout = timeoutTime - currentTime; }", "-        } while (!_signal);", "-        return true;", "-      }", "-      catch (InterruptedException e) { return _signal; } // _signal may have become true at the same time", "-    }", "+  public boolean attemptEnsureSignaled(long timeout) {", "+    try { ensureSignaled(timeout, TimeUnit.MILLISECONDS); return true; }", "+    catch (InterruptedException e) { return _signal; }", "+    catch (TimeoutException e) { return _signal; }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9775d508e95efb83d79ccf36d706232", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConditionMonitor.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public synchronized boolean attemptEnsureTrue(long timeout)", "signatureAfterChange": "   public boolean attemptEnsureTrue(long timeout)", "diff": ["-  public synchronized boolean attemptEnsureTrue(long timeout) {", "-    if (timeout == 0) { return attemptEnsureTrue(); }", "-    else if (_condition.isTrue()) { return true; }", "-    else {", "-      // must record expected wake-up time to account for spurious wake-ups", "-      long timeoutTime = System.currentTimeMillis() + timeout;", "-      try {", "-        do {", "-          this.wait(timeout);", "-          long currentTime = System.currentTimeMillis();", "-          if (currentTime >= timeoutTime) { return _condition.isTrue(); } // timeout has been reached", "-          else { timeout = timeoutTime - currentTime; }", "-        } while (!_condition.isTrue());", "-        return true; // no need to invoke condition again -- it was true at least once", "-      }", "-      catch (InterruptedException e) { return _condition.isTrue(); } // check, just in case it became true", "-    }", "+  public boolean attemptEnsureTrue(long timeout) {", "+    try { ensureTrue(timeout, TimeUnit.MILLISECONDS); return true; }", "+    catch (InterruptedException e) { return _condition.isTrue(); }", "+    catch (TimeoutException e) { return _condition.isTrue(); }", "+  }"]}], "num": 11220}
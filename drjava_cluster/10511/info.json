{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e64cf4aa6b9a7497f995dfc53d4dc8e5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14a2c305d44b96cc7b6482fadf05e0b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "6ad2822901d46fa8a7737b28cb55d8534bd497e7", "commitAfterChange": "d6d5a09297d2787acc270fa60f0b9a354c352952", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "signatureAfterChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "diff": ["+    // _doc may be null if the next document isn't found and the user didn't want to continue!", "+    if (_doc == null) return new FindResult(startDoc, -1, true, true);", "+      // _doc may be null if the next document isn't found and the user didn't want to continue!", "+      if (_doc == null) return new FindResult(startDoc, -1, true, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0b1433021cd7b3f4841fbab2e9ddb99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevStmtPlus.java", "commitBeforeChange": "72a0d444dc62ca781c9b91acdee71819a6f4cdd3", "commitAfterChange": "7144a04f8cef658fdd6189df9de3fd59eb678bec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-      char[] ws = {' ', '\\t', '\\n', ';'};", "+      char[] ws = {' ', '\\t', '\\n', ';'};  // Why is ';' a delimiter?", "-        prevDelimiterPos -= doc.balanceBackward() - 1;  // use matching '{' or '(' as delim", "+        int delta = doc.balanceBackward(); // Number of chars backward to matching '{' or '('", "+        if (delta < 0) { // no matching delimiter!", "+          throw new UnexpectedException(\"No matching '{' or '(' preceding '\" + delim + \"' at offset \" + here + \" in \"", "+                                       + doc);", "+        }", "+        prevDelimiterPos -= delta - 1;  // Position just to right of matching '{' or '('"]}], "num": 10511}
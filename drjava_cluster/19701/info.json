{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b14363435a004c7d5a2313ff194278f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e7ffd370bec8347b09ba93922826e7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "b91661a64fee7b8cdd1ac1251ccb6b9269f4f733", "commitAfterChange": "223d0c96bf01ec9cd58365db0a5f43a8cc81523f", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void highlightLine(int line)", "signatureAfterChange": "   public Object highlightLine(int line, DefaultHighlighter.DefaultHighlightPainter brush)", "diff": ["-  public void highlightLine(int line) {      ", "-      DefinitionsDocument doc = _model.getActiveDocument().getDocument();", "+  public Object highlightLine(int line, DefaultHighlighter.DefaultHighlightPainter brush) {", "+      ", "+      OpenDefinitionsDocument doc = _model.getActiveDocument();", "+      doc.syncCurrentLocationWithDefinitions(doc.getDocument().getCurrentLocation());", "-      int curPos = doc.getCurrentLocation();", "-      int startPos = doc.getLineStartPos(curPos);", "-      int endPos = doc.getLineEndPos(curPos);", "+      ", "+      int curPos = doc.getDocument().getCurrentLocation();", "+      int startPos = doc.getDocument().getLineStartPos(curPos);", "+      int endPos = doc.getDocument().getLineEndPos(curPos);", "+      Object o=null;      ", "-\t  _frame.getCurrentDefPane().getHighlighter().addHighlight(startPos,", "-\t\t\t\t    endPos,", "-\t\t\t\t    _breakpointHighlightPainter);", "-      } catch (BadLocationException badBadLocation) {}", "-  }    ", "+  \t  o = _frame.getCurrentDefPane().getHighlighter().addHighlight(startPos,", "+\t\t\t\t\t\t\t\t       endPos,", "+\t\t\t\t\t\t\t\t       brush);", "+      } catch (BadLocationException badBadLocation) { System.err.println(\"DebugPanel.highlightLine() Got a ble.\"); }", "+      return o;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a337301e544b0a136da62e7ba4b434d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 30, "signatureBeforeChange": "   private void _gotoErrorSourceLocation(final int idx)", "signatureAfterChange": "     private void _gotoErrorSourceLocation(OpenDefinitionsDocument doc,                                           final int idx)", "diff": ["-   */", "-  private void _gotoErrorSourceLocation(final int idx) {", "-    if (idx < 0) return;", "-", "-    _highlightErrorInSource(idx);", "-", "-    int errPos = _errorPositions[idx].getOffset();", "-    // move caret to that position", "-    _definitionsPane.setCaretPosition(errPos);", "-    _definitionsPane.grabFocus();", "-  }", "+     */", "+    private void _gotoErrorSourceLocation(OpenDefinitionsDocument doc,", "+                                          final int idx) {", "+      CompilerErrorModel errorModel = doc.getCompilerErrorModel();", "+      Position[] positions = errorModel.getPositions();", "+", "+", "+      if ((idx < 0) || (idx >= positions.length)) return;", "+", "+      int errPos = positions[idx].getOffset();", "+", "+      // switch to correct def pane", "+      _model.setActiveDocument(doc);", "+", "+      // move caret to that position", "+      DefinitionsPane defPane = _frame.getCurrentDefPane();", "+      defPane.setCaretPosition(errPos);", "+      defPane.grabFocus();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3de30443f881906bdec0a7fdfed6103", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "ae4333c8dd1b54b8a781008188f09b6786d95ae2", "commitAfterChange": "a42a1005ad3faca50638e0131df3bc7c45ba82de", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 62, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["-        ", "+", "+          frames = thread.frames();", "+        catch (InvalidStackFrameException isfe) {", "+          currWatch.setNoValue();", "+          currWatch.setNoType();", "+          _log(\"Failed to get local var from stack frame\", isfe);", "+          continue;", "+        }", "-          currWatch.setValue(_getValue(currFrame.getValue(localVar)));", "+          // currWatch.setValue(_getValue(currFrame.getValue(localVar)));", "-            currWatch.setType(String.valueOf(localVar.type()));", "+            Value v = _getValueOfLocalVariable(localVar, thread);", "+            currWatch.setValue(v);", "+            // currWatch.setType(String.valueOf(localVar.type()));", "+            currWatch.setType(v.type().name());", "-          catch (ClassNotLoadedException cnle) {", "+          catch (Exception ex) {", "+            _log(\"Exception when getting the value of a local variable\", ex);", "+            currWatch.setNoValue();", "-        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea6acb621e4be819db97301ada0ec3fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/SyntaxErrorResult.java", "commitBeforeChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "commitAfterChange": "462c4a613a015a2dbcac948815ea1318bb028f22", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    public SyntaxErrorResult(TokenMgrError pe, String s)", "signatureAfterChange": "    public SyntaxErrorResult(ParseError pe, String s)", "diff": ["+  public SyntaxErrorResult(ParseError pe, String s)", "+  {", "+    ParseException parseEx = pe.getParseException();", "+    if(parseEx != null) {", "+      _startRow = parseEx.getBeginLine();", "+      _startCol = parseEx.getBeginColumn();", "+      _endRow = parseEx.getEndLine();", "+      _endCol = parseEx.getEndColumn();", "+      _errorMessage = parseEx.getShortMessage();      ", "+    }      ", "+    else {", "+      _startRow = _endRow = pe.getLine();", "+      _startCol = _endCol = pe.getColumn();", "+      _errorMessage = pe.getMessage();", "+    }", "+    ", "+    _interaction = s;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3ef999715f029e1b3439ce37bfd2923", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionInsideComment.java", "commitBeforeChange": "558f3e76b0939d235eb8771fbc6a284d80a06f72", "commitAfterChange": "6930bf707dd308d41a2f9ece27f497b294b94f33", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc, int pos)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc, BraceReduction reducedModel, int pos)", "diff": ["-  //private IndentRule _noRule = new QuestionBraceIsParenOrBracket();", "-  boolean applyRule(DefinitionsDocument doc, int pos) {", "-    // Reduced model makes it easy!", "-    // return (stateAtRelLocation(dist. to START) == INSIDE_BLOCK_COMMENT)", "-    // [see classes in reducedmodel package:", "-    //  ReducedModelStates, AbstractReducedModel, InsideBlockComment]", "-    // I only wish we had stateAtAbsLocation.", "-    return true;", "+   */", "+  boolean applyRule(DefinitionsDocument doc, BraceReduction reducedModel, int pos) {", "+    int here = doc.getCurrentLocation();", "+    ReducedModelState state = null;", "+    int distToStart = here - doc.getLineStartPos(here);", "+    reducedModel.resetLocation();  // Gaaah!", "+    state = reducedModel.stateAtRelLocation(-distToStart);", "+    return (state.equals(ReducedModelStates.INSIDE_BLOCK_COMMENT));"]}], "num": 19701}
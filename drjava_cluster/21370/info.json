{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93e791e83fb7c87cb56307c40ac3db96", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9924197771f763875bcffbb6209223", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "50d7405dbdeb05d9fc0520b24d57e1f92428ff65", "commitAfterChange": "7ff90c83877cc5b21bb771b7b8f391533604640f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "signatureAfterChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "diff": ["-    Iterable<File> searchPath = IterUtil.compose(LanguageLevelConverter.OPT.bootClassPath(),", "-                                                 LanguageLevelConverter.OPT.classPath());", "-    if (directoryName != null) { searchPath = IterUtil.compose(searchPath, new File(directoryName)); }", "-    ", "-      /** We'll use this class loader to look up resources (*not* to load classes) */", "-      PathClassLoader loader = new PathClassLoader(EmptyClassLoader.INSTANCE, searchPath);", "-      InputStream stream = loader.getResourceAsStream(qualifiedClassName.replace('.', '/') + \".class\");", "+      String fileName = qualifiedClassName.replace('.', '/') + \".class\";", "+      InputStream stream = RESOURCES.value().getResourceAsStream(fileName);", "+      if (stream == null && directoryName != null) {", "+        stream = PathClassLoader.getResourceInPathAsStream(fileName, new File(directoryName));", "+      }", "-    //This is done so that the SymbolData in the Symboltable is updated and returned.", "+    // This is done so that the SymbolData in the Symboltable is updated and returned.", "-    //make it be a non-continuation, since we are filing it in", "+    // make it be a non-continuation, since we are filling it in"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a64a58b3e1787d7a6acaff7d1affca77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "f1daacb1f9c546b2b765d3fc6cc41bd412931a0f", "commitAfterChange": "591ec87995880046281596623701cb5a561fc66e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "signatureAfterChange": "      public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "diff": ["+    JavadocModel javadoc = new NoJavadocAvailable(model);", "-      Iterable<File> path = IterUtil.singleton(f);", "+      Iterable<File> path = IterUtil.singleton(IOUtil.attemptAbsoluteFile(f));", "-          ClassLoader debugLoader = new PreemptingClassLoader(new PathClassLoader(path), debuggerPackage);", "+          ClassLoader debugLoader = new PreemptingClassLoader(new PathClassLoader(loader, path), debuggerPackage);", "+      ", "+      try {", "+        new PathClassLoader(loader, path).loadClass(\"com.sun.tools.javadoc.Main\");", "+        File bin = new File(f.getParentFile(), \"../bin\");", "+        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(f.getParentFile(), \"../Home/bin\"); }", "+        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(System.getProperty(\"java.home\", f.getParent())); }", "+        javadoc = new DefaultJavadocModel(model, bin, path);", "+      }", "+      catch (ClassNotFoundException e) { /* can't load */ }", "+      catch (LinkageError e) { /* can't load (probably not necessary, but might as well catch it) */ }", "+        ", "-    return new JarJDKToolsLibrary(f, version, compiler, debugger);", "+    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc);"]}], "num": 21370}
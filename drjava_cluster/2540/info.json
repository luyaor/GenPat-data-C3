{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a98de67e528dea0ac56946373e149c7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b76d1026ad54d2fe94ba5407949ec52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/ParserTest.java", "commitBeforeChange": "8ef464a5916d345894f41b4678b1a0525d26cfff", "commitAfterChange": "f30f8f4a19cbec375d60179da7ca925083cfb5db", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testVarArgsFormalParameters() throws ParseException", "signatureAfterChange": "      public void testVarArgsFormalParameters() throws ParseException", "diff": ["-    assertEquals(\"param should be array\", ArrayType.class, fpList.get(0).getType().getClass());", "-    ArrayType at = (ArrayType)fpList.get(0).getType();", "-    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceType: String)\", at.getElementType().toString());", "+    assertEquals(\"param should be array\", ArrayTypeName.class, fpList.get(0).getType().getClass());", "+    ArrayTypeName at = (ArrayTypeName)fpList.get(0).getType();", "+    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceTypeName: String)\", at.getElementType().toString());", "-    assertEquals(\"param should be array\", ArrayType.class, fpList.get(0).getType().getClass());", "-    at = (ArrayType)fpList.get(0).getType();", "-    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceType: String)\", at.getElementType().toString());", "+    assertEquals(\"param should be array\", ArrayTypeName.class, fpList.get(0).getType().getClass());", "+    at = (ArrayTypeName)fpList.get(0).getType();", "+    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceTypeName: String)\", at.getElementType().toString());", "-    assertEquals(\"param should be int\", \"(koala.dynamicjava.tree.IntType: int)\", fpList.get(0).getType().toString());", "+    assertEquals(\"param should be int\", \"(koala.dynamicjava.tree.IntTypeName: int)\", fpList.get(0).getType().toString());", "-    assertEquals(\"1st param should be int\", \"(koala.dynamicjava.tree.IntType: int)\", fpList.get(0).getType().toString());", "-    assertEquals(\"2nd param should be array\", ArrayType.class, fpList.get(1).getType().getClass());", "-    at = (ArrayType)fpList.get(1).getType();", "-    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceType: String)\", at.getElementType().toString());", "+    assertEquals(\"1st param should be int\", \"(koala.dynamicjava.tree.IntTypeName: int)\", fpList.get(0).getType().toString());", "+    assertEquals(\"2nd param should be array\", ArrayTypeName.class, fpList.get(1).getType().getClass());", "+    at = (ArrayTypeName)fpList.get(1).getType();", "+    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceTypeName: String)\", at.getElementType().toString());", "-    assertEquals(\"1st param should be int\", \"(koala.dynamicjava.tree.IntType: int)\", fpList.get(0).getType().toString());", "-    assertEquals(\"2nd param should be int\", \"(koala.dynamicjava.tree.IntType: int)\", fpList.get(1).getType().toString());", "-    assertEquals(\"3rd param should be array\", ArrayType.class, fpList.get(2).getType().getClass());", "-    at = (ArrayType)fpList.get(2).getType();", "-    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceType: String)\", at.getElementType().toString());", "+    assertEquals(\"1st param should be int\", \"(koala.dynamicjava.tree.IntTypeName: int)\", fpList.get(0).getType().toString());", "+    assertEquals(\"2nd param should be int\", \"(koala.dynamicjava.tree.IntTypeName: int)\", fpList.get(1).getType().toString());", "+    assertEquals(\"3rd param should be array\", ArrayTypeName.class, fpList.get(2).getType().getClass());", "+    at = (ArrayTypeName)fpList.get(2).getType();", "+    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceTypeName: String)\", at.getElementType().toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94ada46c266aa11f26e81a4bb435d786", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void testBookmark() throws Exception", "signatureAfterChange": "      public void testBookmark() throws Exception", "diff": ["-    assertEquals(\"Should be 2 bookmarks\", 2, bms.size());", "+    assertEquals(\"Should be 2 bookmarks\", 2, bms.size());  // the bookmarks are disjoint", "-    assertEquals(\"Should be 3 bookmarks\", 3, bms.size());", "-    assertEquals(\"Start offset should be 3\", 3, bms.get(0).getStartOffset());", "-    assertEquals(\"End offset should be 6\", 6, bms.get(0).getEndOffset());", "-    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "-    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "-    assertEquals(\"Start offset should be 8\", 8, bms.get(2).getStartOffset());", "-    assertEquals(\"End offset should be 12\", 12, bms.get(2).getEndOffset());", "+    assertEquals(\"Should be 0 bookmarks\", 0, bms.size());  // the preceding two bookmarks overlapped and were deleted", "+//    assertEquals(\"Start offset should be 5\", 5, bms.get(0).getStartOffset());", "+//    assertEquals(\"End offset should be 10\", 10, bms.get(0).getEndOffset());", "+//    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "+//    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "+//    assertEquals(\"Start offset should be 8\", 8, bms.get(2).getStartOffset());", "+//    assertEquals(\"End offset should be 12\", 12, bms.get(2).getEndOffset());", "-    assertEquals(\"Should be 2 bookmarks\", 2, bms.size());", "-    assertEquals(\"Start offset should be 3\", 3, bms.get(0).getStartOffset());", "-    assertEquals(\"End offset should be 6\", 6, bms.get(0).getEndOffset());", "-    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "-    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "+    assertEquals(\"Should be 1 bookmarks\", 1, bms.size());  // no preceding bookmark", "+    assertEquals(\"Start offset should be 8\", 8, bms.get(0).getStartOffset());", "+    assertEquals(\"End offset should be 12\", 12, bms.get(0).getEndOffset());", "+//    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "+//    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "-    assertEquals(\"Should be 1 bookmarks\", 1, bms.size());", "-    assertEquals(\"Start offset should be 5\", 5, bms.get(0).getStartOffset());", "-    assertEquals(\"End offset should be 10\", 10, bms.get(0).getEndOffset());", "+    assertEquals(\"Should be 2 bookmarks\", 2, bms.size());  // no overlap", "+    assertEquals(\"Start offset should be 3\", 3, bms.get(0).getStartOffset());", "+    assertEquals(\"End offset should be 6\", 6, bms.get(0).getEndOffset());", "+    assertEquals(\"Start offset should be 8\", 8, bms.get(1).getStartOffset());", "+    assertEquals(\"End offset should be 12\", 12, bms.get(1).getEndOffset());"]}], "num": 2540}
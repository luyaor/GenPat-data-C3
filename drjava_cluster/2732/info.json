{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ec83fb29bbb3813d775a94a2b9fb0e4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57994452ae77c0b1f8226ebdcd2363c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/swing/SwingWorker.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public SwingWorker()", "signatureAfterChange": "      public SwingWorker()", "diff": ["-    Thunk<T> task = new Thunk<T>() {", "-      public T value() {", "-        try { return doInBackground(); }", "-        catch (Throwable t) { throw new WrappedException(t); }", "-        finally {", "-          SwingUtilities.invokeLater(new Runnable() {", "-            public void run() { done(); }", "-          });", "-        }", "+    super();", "+    _continueMonitor = new CompletionMonitor(false);", "+    _workerThread = new Thread(\"SwingWorker\") {", "+      public void run() {", "+        started();", "+        try { finishedCleanly(doInBackground()); }", "+        catch (InterruptedException e) { stopped(); }", "+        catch (Exception e) { finishedWithTaskException(e); }", "+        catch (Throwable t) { finishedWithImplementationException(new WrappedException(t)); }", "-    _controller = ConcurrentUtil.computeInProcess(task, false);", "-    _cancelled = false;", "+    finishListeners().add(new Runnable() {", "+      public void run() {", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() { done(); }", "+        });", "+      }", "+    });", "+    // Defined as a stand-alone class in order to simplify self-references.", "+    class IntermediateListener implements Runnable1<I> {", "+      public void run(I val) {", "+        intermediateListeners().remove(this); // don't respond again until the Swing task runs", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            List<I> vals = new LinkedList<I>();", "+            // add listener before drain to ensure a concurrent write isn't missed", "+            intermediateListeners().add(IntermediateListener.this);", "+            intermediateQueue().drainTo(vals);", "+            process(vals);", "+          }", "+        });", "+      }", "+    }", "+    intermediateListeners().add(new IntermediateListener());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b87d43812f2eabac950899db70d55299", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "1c3947ce9682f305287b6afe6b5c5d87597bae6f", "commitAfterChange": "0acb22a1f5b2329a270795e5839a4690952252ed", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "diff": ["-      try {  /** Run the junit test suite that has already been set up on the slave JVM */", "-        _testInProgress = true;", "+      /** Run the junit test suite that has already been set up on the slave JVM */", "+      _testInProgress = true;", "-        new Thread(new Runnable() {", "-          public void run() { ", "-            try {", "+      new Thread(new Runnable() {", "+        public void run() { ", "+          try {", "-              _notifier.junitStarted(); ", "-              boolean testsPresent = _jvm.runTestSuite();  // The false boolean return value could be changed to an exception.", "-              if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "-            }", "-            catch(RemoteException e) { // Unit testing was aborted; cleanup", "-              EventQueue.invokeLater(new Runnable() { public void run() { nonTestCase(allTests); } });", "-            }", "+            _notifier.junitStarted(); ", "+            boolean testsPresent = _jvm.runTestSuite();  // The false return value could be changed to an exception.", "+            if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "-        }).start();", "-      }", "-      catch(Exception e) {", "-        _notifier.junitEnded();  // balances junitStarted()", "-        _testInProgress = false;", "-        throw new UnexpectedException(e);", "-      }", "+          catch(RemoteException e) { // Unit testing aborted; cleanup; hourglassOf already called in junitStarted", "+            _notifier.junitEnded();  // balances junitStarted()", "+            _testInProgress = false;", "+          }", "+        }", "+      }).start();"]}], "num": 2732}
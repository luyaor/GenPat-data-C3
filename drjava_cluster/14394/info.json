{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c970ff68940c98cefa75d68d8238254", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a7ca023a543dc7389ec66f022f97a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "signatureAfterChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "diff": ["-    for (int i = 0; i<thrown.length; i++) {", "+    for (int i = 0; i < thrown.length; i++) {", "-      _addError(\"Internal error: returnType is null\", that);", "+      _addError(\"Internal error: the returnType for \" + md + \" is null\", that);", "+//      Utilities.show(\"****** null return type for \" + md + \" Receiver type is \" + context + \" File is \" + _file ", "+//                       + \" MethodData is \" + md);", "+//      assert false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a976ddbd3242325fdf7ad4bad42b6fb8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public CompilerInterface[] getAvailableCompilers()", "diff": ["-    for (int i = 0; i < DEFAULT_COMPILERS.length; i++) {", "+    for (String[] row:  DEFAULT_COMPILERS) {", "-      for (int j = 0; j < DEFAULT_COMPILERS[i].length; j++) {", "-        String name = DEFAULT_COMPILERS[i][j];", "-        try {", "-          if (_createCompiler(name, availableCompilers)) {", "-            break;", "-          }", "-        }", "+      for (String name: row) {", "+        try { if (_createCompiler(name, availableCompilers)) break; }"]}], "num": 14394}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "540090b27296010cf6375ac9fd45dca6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57889e8f04568ec50ba091b17f562144", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "452210e4b030d3fd06cc11ebd7b6773526fbeddc", "commitAfterChange": "ec1234c8205fc39cf1fac2ca94b073f8a0c191b4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   static synchronized void initConfig() throws IllegalStateException", "signatureAfterChange": "   static FileConfiguration _initConfig() throws IllegalStateException", "diff": ["-  static synchronized void initConfig() throws IllegalStateException {", "-    // Make sure someone doesn't try to change the config object.", "-    if (_config != null) throw new IllegalStateException(\"Can only call initConfig once!\");", "+  static FileConfiguration _initConfig() throws IllegalStateException {", "+//    // Make sure someone doesn't try to change the config object.", "+//    if (_config != null) throw new IllegalStateException(\"Can only call initConfig once!\");", "+    ", "+    FileConfiguration config;", "-    _config = new FileConfiguration(_propertiesFile);", "-    try { _config.loadConfiguration(); }", "+    config = new FileConfiguration(_propertiesFile);", "+    try { config.loadConfiguration(); }", "-      _config.resetToDefaults();", "-      _config.storeStartupException(e);", "+      config.resetToDefaults();", "+//      Utilities.showDebug(\"Config Exception is: \" + e.toString());", "+      config.storeStartupException(e);", "+    _config = config; // required to support calls on DrJava._initConfig() in unit tests", "+    return config;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a13ea1b3b026e938b11fa6da3a66e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "1551840e0590a4d224d98cf5aeb081d54054aafb", "commitAfterChange": "fe644290d76f63ed4693cfbe935eaacd56666243", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean hasErrorsWithPositions(OpenDefinitionsDocument odd)", "signatureAfterChange": "   public boolean hasErrorsWithPositions(OpenDefinitionsDocument odd)", "diff": ["-   */", "+  /** This function tells if there are errors with source locations associated with the given file. */", "-    try {", "-      file = odd.getFile();", "-    }", "-    catch (IllegalStateException ise) {", "-      //no associated file, do nothing", "-    }", "-    catch (FileMovedException fme) {", "-      file = fme.getFile();", "-    }", "-    if (file == null) {", "-      return false;", "-    }", "+    try { file = odd.getFile(); }", "+    catch (IllegalStateException ise) { /* no associated file, do nothing */ }", "+    catch (FileMovedException fme) { file = fme.getFile(); }", "+    if (file == null) return false;", "-    try {", "-      file = file.getCanonicalFile();", "-    }", "-    catch (IOException ioe) {", "-      // Oh well, look for the file as is.", "-    }", "+    try { file = file.getCanonicalFile(); }", "+    catch (IOException ioe) { /* Oh well, look for the file as is.*/ }", "-    if (saei == null) {", "-      return false;", "-    }", "-    if (saei.getStartPos() == saei.getEndPos()) {", "-      return false;", "-    }", "+    if (saei == null) return false;", "+    if (saei.getStartPos() == saei.getEndPos()) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dce31395d4966e623191313720b3842a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "   public void junitJVMReady()", "signatureAfterChange": "   public void junitJVMReady()", "diff": ["-    ", "-    if (_docBeingTested != null) {", "+//    if (_docBeingTested != null) {", "+    if (_isTestInProgress) {", "-      try {", "-        fileName = _docBeingTested.getDocument().getFile().getAbsolutePath();", "-      }", "-      catch (IllegalStateException ise) {", "-      }", "-      catch (FileMovedException fme) {", "-        fileName = fme.getFile().getAbsolutePath();", "-      }", "-      errors[0] = new JUnitError(new File(fileName), -1, -1, \"Previous test was interrupted\", true,", "-                                 \"\", \"No associated stack trace\");", "+//      try {", "+//        fileName = _docBeingTested.getDocument().getFile().getAbsolutePath();", "+//      }", "+//      catch (IllegalStateException ise) {", "+//      }", "+//      catch (FileMovedException fme) {", "+//        fileName = fme.getFile().getAbsolutePath();", "+//      }", "+//      errors[0] = new JUnitError(new File(fileName), -1, -1, \"Previous test was interrupted\", true,", "+//                                 \"\", \"No associated stack trace\");", "+      errors[0] = new JUnitError(\"Previous test was interrupted\", true, \"\");", "-      _docBeingTested = null;", "+//      _docBeingTested = null;", "+      _isTestInProgress = false;"]}], "num": 2257}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff5d7594a68c5a4584f33e1b8539593f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085dd43544ac279e57a9bc3cbdecf3df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 11, "signatureBeforeChange": "          public static void main(String... args)", "signatureAfterChange": "     public T call()", "diff": ["+    public ThunkCallable(Thunk<? extends T> thunk) { _thunk = thunk; }", "+    public T call() { return _thunk.value(); }", "-    ", "-    public static void main(String... args) {", "-      OutputStream out = System.out;", "-      IOUtil.replaceSystemOut(VoidOutputStream.INSTANCE);", "-      try {", "-        out.write(PREFIX);", "-        ObjectOutputStream objOut = new ObjectOutputStream(out);", "-        try {", "-          Object result = null;", "-          Exception exception = null;", "-          try {", "-            ObjectInputStream objIn = new ObjectInputStream(System.in);", "-            try {", "-              Thunk<?> task = (Thunk<?>) objIn.readObject();", "-              try { result = task.value(); }", "-              catch (Throwable e) { exception = new InvocationTargetException(e); }", "-            }", "-            finally { objIn.close(); }", "-          }", "-          catch (Exception e) { exception = e; } // problem with objIn", "-          ", "-          objOut.writeObject(result);", "-          objOut.writeObject(exception);", "-        }", "-        finally { objOut.close(); }", "-      }", "-      catch (IOException e) { error.log(\"Error writing to System.out\", e); }", "-      finally { IOUtil.revertSystemOut(); }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "247e452d7d16fd1885b9a9fcef9061e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "aff4ca7a048d3be1e2f863c90bf8f2bfe09306fd", "commitAfterChange": "7636e2659b4b69c586b657836319e825c9bf35fa", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "signatureAfterChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "diff": ["-    ", "+    boolean first = true;", "-          if (doc.getFile().canWrite()) {", "+          final File docFile = doc.getFile();", "+          if (!docFile.exists() || docFile.canWrite()) {", "-          else {", "-            // file is read-only, ask user about it", "+          else if (first) {", "+            // file is read-only, ask user about it once", "-        File[] res = _notifier.filesReadOnly(com, files.toArray(new File[files.size()]));", "+        File[] res = _notifier.filesReadOnly(files.toArray(new File[files.size()]));", "-          try {", "-            File roFile = odd.getFile();", "-            if (rewriteFiles.contains(roFile)) {", "-              docsToWrite.add(odd);", "-              // try to make the file writable", "-              // strangely enough, there is a File.setReadOnly() method, but", "-              // no built-in way to make the file writable", "-              // Sun recommends deleting the read-only file (does that work?)", "-              File backup = new File(roFile.getAbsolutePath()+\"~\");", "-              boolean noBackup = true;", "-              if (backup.exists()) {", "-                try {", "-                  noBackup = backup.delete();", "-                }", "-                catch(SecurityException se) {", "-                  noBackup = false;", "-                }", "-              }", "-              if (noBackup) {", "-                try {", "-                  noBackup = roFile.renameTo(backup);", "-                  roFile.createNewFile();", "-                }", "-                catch(SecurityException se) {", "-                  noBackup = false;", "-                }", "-                catch(IOException ioe) { }", "-                try {", "-                  roFile.createNewFile();", "-                }", "-                catch(SecurityException se) { }", "-                catch(IOException ioe) { }", "-              }", "-              if (!noBackup) {", "-                try {", "-                  roFile.delete();", "-                }", "-                catch(SecurityException se) { /* can't do anything about it */ }", "-              }", "-              try {", "-                edu.rice.cs.plt.io.IOUtil.copyFile(backup, roFile);", "-              }", "-              catch(SecurityException se) {", "-                /* can't do anything about it */", "-              }", "-              catch(IOException ioe) {", "-                /* can't do anything about it */", "-              }", "-            }", "+          File roFile = odd.getFile();", "+          if (rewriteFiles.contains(roFile)) {", "+            docsToWrite.add(odd);", "+            FileOps.makeWritable(roFile);", "-          catch(FileMovedException fme) { /* ignore, don't know what to do here */ }", "+      first = false;"]}], "num": 2171}
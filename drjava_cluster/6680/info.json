{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "460d7e179340d5b8d0b6a403fcc41655", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9fa0b153c8737cfc4a5669d5e05681e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "6ec50bbad6902867dbbd689ce421d583e985cd75", "commitAfterChange": "40c5d59f4d83560f5b1a6adb2abd1bc3bc016193", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testCloseFiles() throws BadLocationException", "signatureAfterChange": "   public void testCloseFiles() throws BadLocationException", "diff": ["-      public synchronized void interpreterReady(File wd) {  // closing all files calls resetInteractions", "-//        Utilities.show(\"interpreterReady(\" + wd + \") called\");", "-//        Utilities.show(\"Traceback is:\\n\" + StringOps.getStackTrace());", "-        interpreterReadyCount++;", "-        synchronized(_readyLock) { _readyLock.notify(); }", "-      }", "-    // wait for interpreter to be ready", "-    try {", "-      synchronized(_readyLock) {", "-        if (listener.getInterpreterReadyCount() == 0) _readyLock.wait(10000);  // intentionally not a while ", "-      }", "-    }", "-    catch(InterruptedException e) { fail(\"Wait for interpreterReady event was interrupted by \" + e); }", "-    listener.assertInterpreterReadyCount(1);  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebe095b044affaad70c13caf2999589a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "02b5ca416f64b6343429bd55e72b9ce1f40f0611", "commitAfterChange": "267871686ee9cb7da11475b012538aa6ee86c7c7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testCloseFiles() throws BadLocationException", "signatureAfterChange": "   public void testCloseFiles() throws BadLocationException", "diff": ["+      public synchronized void interpreterReady(File wd) {  // closing all files calls resetInteractions", "+//        Utilities.show(\"interpreterReady(\" + wd + \") called\");", "+//        Utilities.show(\"Traceback is:\\n\" + StringOps.getStackTrace());", "+        interpreterReadyCount++;", "+      }", "+    Utilities.clearEventQueue();", "-    assertLength(0, _model.getActiveDocument());", "+    assertLength(0, _model.getActiveDocument());    ", "+    listener.assertInterpreterReadyCount(1);"]}], "num": 6680}
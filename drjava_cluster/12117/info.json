{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36b3b3cca919a71eeeb70f5ab3dfc0ff", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53edaea34349c01c46daa065a6aa4771", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/StickyClassLoader.java", "commitBeforeChange": "1315d6a0a86dff003075278cfb7be802b0cc3b67", "commitAfterChange": "8eab9615a55806850da177101ab342e53c8cc842", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected Class loadClass(String name, boolean resolve)    throws ClassNotFoundException", "signatureAfterChange": "   protected Class loadClass(String name, boolean resolve)    throws ClassNotFoundException", "diff": ["+    // check if it's already loaded!", "+    clazz = findLoadedClass(name);", "+    if (clazz != null) {", "+      return clazz;", "+    }", "-        clazz = defineClass(name, data, 0, data.length);", "+        try {", "+          clazz = defineClass(name, data, 0, data.length);", "+        }", "+        catch (Error t) {", "+          /*", "+          System.err.println(\"Sticky \" + this + \" error when loading \" + name +", "+                             \" with resolve=\" + resolve + \":\");", "+          */", "+          //t.printStackTrace();", "+          throw t;", "+        }", "+    /*", "+    System.out.println(\"Sticky loaded OK: \" + name + \" \" + clazz + \" loader=\" +", "+                       clazz.getClassLoader());", "+    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2531c3ee5ae28c39b8a425e6c7e06d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "b68b258fee7c24e8a8c68fc2e7d3d99ccd585753", "commitAfterChange": "ec06880aa408b928b2f252538b208a76154d8334", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   protected void readText(final boolean finish)", "signatureAfterChange": "   protected void readText(final boolean finish)", "diff": ["-    if (((_is!=null) || (_erris!=null)) &&", "-        (_updateNowButton.isEnabled())) {", "-      _updateNowButton.setEnabled(false);", "+    if (((_is!=null) || (_erris!=null))) {", "-        _sb.append(\"\\n\\nI/O Exception reading from process\\n\");", "+        if (_p!=null) {", "+          try {", "+            _p.exitValue();", "+            // if we get here, process has finished, and we don't display the I/O exception", "+          }", "+          catch(IllegalThreadStateException e) {", "+            // process has NOT finished yet, display the I/O exception", "+            _sb.append(\"\\n\\nI/O Exception reading from process\\n\");", "+          }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e43b6c09f7e6553897c9a1e0fe930d88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "6affb651d9a7cac4ccd8cb2496fd606ef867f67b", "commitAfterChange": "afd6b29774fc42079476cd6409b622dfbd923e78", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private static void _setupCompilerIfNeeded()", "signatureAfterChange": "     private static void _setupCompilerIfNeeded()", "diff": ["-   */", "-  private static void _setupCompilerIfNeeded() {", "-    if (CompilerRegistry.ONLY.isNoCompilerAvailable()) {", "-      // no compiler available; let's try to let the user pick one.", "-      final String[] text = {", "-        \"DrJava can not find any Java compiler. Would you \",", "-        \"like to configure the location of the compiler? \",", "-        \"The compiler is generally located in 'tools.jar', \",", "-        \"in the 'lib' subdirectory under your JDK \",", "-        \"installation directory. (If you say 'No', DrJava \",", "-        \"will be unable to compile programs.)\"", "-      };", "-", "-      int result = JOptionPane.showConfirmDialog(null,", "-                                                 text,", "-                                                 \"Compiler not found\",", "-                                                 JOptionPane.YES_NO_OPTION);", "-", "-      if (result == JOptionPane.YES_OPTION) {", "-        JFileChooser chooser = new JFileChooser();", "-", "-        do {", "-          if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {", "-            File jar = chooser.getSelectedFile();", "-            ", "-            // set the javac property", "-            Configuration.ONLY.setJavacLocation(jar.getAbsolutePath());", "-", "-            // need to re-call getAvailable for it to re-check availability", "-            CompilerInterface[] compilers", "-              = CompilerRegistry.ONLY.getAvailableCompilers();", "-", "-            if (compilers[0] != NoCompilerAvailable.ONLY) {", "-              CompilerRegistry.ONLY.setActiveCompiler(compilers[0]);", "-              Configuration.ONLY.saveProperties();", "-          }", "-        while (CompilerRegistry.ONLY.isNoCompilerAvailable() &&", "-               _userWantsToPickAgain());", "-      }", "-  }", "+     */", "+    private static void _setupCompilerIfNeeded() {", "+        if (CompilerRegistry.ONLY.isNoCompilerAvailable()) {", "+            // no compiler available; let's try to let the user pick one.", "+            final String[] text = {", "+                \"DrJava can not find any Java compiler. Would you \",", "+                \"like to configure the location of the compiler? \",", "+                \"The compiler is generally located in 'tools.jar', \",", "+                \"in the 'lib' subdirectory under your JDK \",", "+                \"installation directory. (If you say 'No', DrJava \",", "+                \"will be unable to compile programs.)\"", "+            };", "+", "+            int result = JOptionPane.showConfirmDialog(null,", "+                                                       text,", "+                                                       \"Compiler not found\",", "+                                                       JOptionPane.YES_NO_OPTION);", "+", "+            if (result == JOptionPane.YES_OPTION) {", "+                JFileChooser chooser = new JFileChooser();", "+", "+                do {", "+                    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {", "+                        File jar = chooser.getSelectedFile();", "+            ", "+                        // set the javac property", "+                        CONFIG.setSetting(JAVAC_LOCATION,", "+                                          jar.getAbsolutePath());", "+", "+                        // need to re-call getAvailable for it to re-check availability", "+                        CompilerInterface[] compilers", "+                            = CompilerRegistry.ONLY.getAvailableCompilers();", "+", "+                        if (compilers[0] != NoCompilerAvailable.ONLY) {", "+                            CompilerRegistry.ONLY.setActiveCompiler(compilers[0]);", "+                            try {", "+                                CONFIG.saveConfiguration();", "+                            } catch(IOException e) {", "+                                // for now, do nothing", "+                            }", "+                        }", "+                    }", "+                }", "+                while (CompilerRegistry.ONLY.isNoCompilerAvailable() &&", "+                       _userWantsToPickAgain());", "+            }", "+        }", "+    }"]}], "num": 12117}
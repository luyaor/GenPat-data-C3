{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "536ee44df09589312a1ef809a6da5f80", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01274c9880bf9c8a24683de730da02c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public <T extends INavigatorItem> Enumeration<T> getDocuments()", "signatureAfterChange": "   public Enumeration<ItemT> getDocuments()", "diff": ["-  public <T extends INavigatorItem> Enumeration<T> getDocuments() {", "+  public Enumeration<ItemT> getDocuments() {", "-    final ArrayList<T> list = new ArrayList<T>();", "+    final Vector<ItemT> list = new Vector<ItemT>(); // Use Vector because it implements an Enumeration", "+      // e has a raw type because depthFirstEnumeration() has a raw type signature", "-        if (node.isLeaf() && node != _model.getRoot()) ", "-          list.add((T)node.getUserObject());", "+        if (node.isLeaf() && node != _model.getRoot()) {", "+          list.add(getNodeUserObject(node));", "+        }", "-    ", "-    return new Enumeration<T>() {", "-      ", "-      private Iterator<T> it = list.iterator();", "-      ", "-      public boolean hasMoreElements() { return it.hasNext(); }", "-      ", "-      public T nextElement() { return it.next(); }", "-    };", "+    return list.elements();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cacf02aaac4af36db3f1b28025700cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public Enumeration<INavigatorItem> getDocuments()", "signatureAfterChange": "   public <T extends INavigatorItem> Enumeration<T> getDocuments()", "diff": ["-  public Enumeration<INavigatorItem> getDocuments() {", "+  public <T extends INavigatorItem> Enumeration<T> getDocuments() {", "-    final ArrayList<INavigatorItem> list = new ArrayList<INavigatorItem>();", "-    Enumeration e_tmp = ((DefaultMutableTreeNode)_model.getRoot()).depthFirstEnumeration();", "+    final ArrayList<T> list = new ArrayList<T>();", "-    while(e_tmp.hasMoreElements()) {", "-      DefaultMutableTreeNode node = (DefaultMutableTreeNode)e_tmp.nextElement();", "-      if (node.isLeaf() && node != _model.getRoot()) ", "-        list.add((INavigatorItem)node.getUserObject());", "+    synchronized(_model) {", "+      Enumeration e_tmp = ((DefaultMutableTreeNode)_model.getRoot()).depthFirstEnumeration();", "+      ", "+      while(e_tmp.hasMoreElements()) {", "+        DefaultMutableTreeNode node = (DefaultMutableTreeNode)e_tmp.nextElement();", "+        if (node.isLeaf() && node != _model.getRoot()) ", "+          list.add((T)node.getUserObject());", "+      }", "-    return new Enumeration<INavigatorItem>() {", "+    return new Enumeration<T>() {", "-      private Iterator<INavigatorItem> it = list.iterator();", "+      private Iterator<T> it = list.iterator();", "-      public INavigatorItem nextElement() { return it.next(); }", "+      public T nextElement() { return it.next(); }"]}], "num": 24742}
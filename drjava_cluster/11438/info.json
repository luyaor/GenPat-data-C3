{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a557ecad93a20bbe0dfb9819b2b8c50f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "787e78effcfa68c00a91b43ab505d798", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 1, "signatureBeforeChange": "   protected void slaveQuitDuringStartup(int status)", "signatureAfterChange": "     public AbstractSlaveJVM value()", "diff": ["+    public SlaveFactory(String className) { _className = className; }", "+    public AbstractSlaveJVM value() {", "+      try { return (AbstractSlaveJVM) ReflectUtil.getStaticField(_className, \"ONLY\"); }", "+      catch (ReflectException e) {", "+        try { return (AbstractSlaveJVM) ReflectUtil.loadObject(_className); }", "+        catch (ReflectException e2) { throw new WrappedException(e2); }", "+     }", "+    }", "-    */", "-  protected void slaveQuitDuringStartup(int status) {", "-    // Reset Master JVM state (in case invokeSlave is called again on this object)", "-    _startupInProgress = false;", "-    _quitOnStartup = false;", "-    _monitorThread = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6ca0420fcbb3eefb83986f55183ffbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "    public void killInterpreter(File wd)", "signatureAfterChange": "    public void killInterpreter(File wd)", "diff": ["-      try {", "-        quitSlave();  // new slave JVM is restarted by call on startInterpreterJVM on death of current slave", "-      catch (ConnectException ce) {", "-        _log.logTime(\"Could not connect to the interpreterJVM while trying to kill it\", ce);", "-      }", "-      catch (RemoteException re) { _threwException(re); }", "+    /* Dropped lock before making remote call. */", "+    try { quitSlave(); } // new slave JVM is restarted by call on startInterpreterJVM on death of current slave", "+    catch (RemoteException e) {", "+      _log.log(this + \"could not connect to the interpreterJVM while trying to kill it.  Threw \" + e);"]}], "num": 11438}
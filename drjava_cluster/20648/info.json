{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d577a2362b10314be73695c51f2f985", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1580ca8757e88fb5495f15412256c305", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5813bf964cbcf2c61ee22c7a5dc496aee7b09e37", "commitAfterChange": "a068a65da96363415d4ffc6e29a7efc1f9fab2cd", "methodNumberBeforeChange": 622, "methodNumberAfterChange": 624, "signatureBeforeChange": "   void _switchDefScrollPane()", "signatureAfterChange": "   void _switchDefScrollPane()", "diff": ["+      if (_currentDefPane != null) { _currentDefPane.removeFocusListener(_undoRedoDefinitionsFocusListener); }", "+      _currentDefPane.addFocusListener(_undoRedoDefinitionsFocusListener);", "+      if (_currentDefPane != null) { _currentDefPane.removeFocusListener(_undoRedoDefinitionsFocusListener); }", "+      _currentDefPane.addFocusListener(_undoRedoDefinitionsFocusListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5572505331c6f83a04f006e8deca655a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "885cfecca904bc390539dbda728502710df6c2d9", "commitAfterChange": "486e06f49cab17669850c6f2af5b6414d0649d5d", "methodNumberBeforeChange": 497, "methodNumberAfterChange": 497, "signatureBeforeChange": "   void debuggerAutomaticTrace()", "signatureAfterChange": "   void debuggerAutomaticTrace()", "diff": ["-    if(isDebuggerReady() && !_model.getDebugger().isAutomaticTraceEnabled()) {", "-      try {", "-        int rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "-        ", "-        _automaticTraceTimer = new Timer(rate, new ActionListener() {", "-          public void actionPerformed(ActionEvent e) {", "-            if (_model.getDebugger().isAutomaticTraceEnabled()) {", "-              // hasn't been disabled in the meantime", "-              debuggerStep(Debugger.StepType.STEP_INTO);", "+    if(isDebuggerReady())  {", "+      if(!_model.getDebugger().isAutomaticTraceEnabled()) {", "+        try {", "+          int rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "+          ", "+          _automaticTraceTimer = new Timer(rate, new ActionListener() {", "+            public void actionPerformed(ActionEvent e) {", "+              if (_model.getDebugger().isAutomaticTraceEnabled()) {", "+                // hasn't been disabled in the meantime", "+                debuggerStep(Debugger.StepType.STEP_INTO);", "+              }", "-          }", "-        });", "-        _automaticTraceTimer.setRepeats(false);", "-        _model.getDebugger().setAutomaticTraceEnabled(true);", "-        debuggerStep(Debugger.StepType.STEP_INTO);", "+          });", "+          _automaticTraceTimer.setRepeats(false);", "+          _model.getDebugger().setAutomaticTraceEnabled(true);", "+          _debugPanel.setAutomaticTraceButtonText();", "+          debuggerStep(Debugger.StepType.STEP_INTO);", "+        }", "+        catch (IllegalStateException ise) {", "+          // This may happen if the user if stepping very frequently,", "+          // and is even more likely if they are using both hotkeys", "+          // and UI buttons. Ignore it in this case.", "+          // Hopefully, there are no other situations where", "+          // the user can be trying to step while there are no", "+          // suspended threads.", "+        }        ", "-      catch (IllegalStateException ise) {", "-        // This may happen if the user if stepping very frequently,", "-        // and is even more likely if they are using both hotkeys", "-        // and UI buttons. Ignore it in this case.", "-        // Hopefully, there are no other situations where", "-        // the user can be trying to step while there are no", "-        // suspended threads.", "+      else {", "+        _model.getDebugger().setAutomaticTraceEnabled(false);", "+        _debugPanel.setAutomaticTraceButtonText();", "+        if (_automaticTraceTimer!=null) _automaticTraceTimer.stop();", "-    }", "+    }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad3a5cb0fb4fd663f1297dacb35d2355", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "signatureAfterChange": "   public void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "diff": ["-      //System.out.println(\"interpreter jvm registered: \" + remote);", "-      _interpreterJVM = remote;", "-      //_startupInProgress = false;", "+      if (_interpreterJVM != null) { ", "+        try {", "+          //DrJava.consoleOut().println(\"killing jvm! \" + i);", "+          remote.exitJVM();", "+        }", "+        catch (RemoteException re) {", "+        }", "+        return;", "+      }", "+      _timerThread.disable();", "+      _interpreterJVM = remote;    ", "+      // _model may be null if we're running a test on this", "+      if (_model != null) {", "+        _model.interactionsReady();", "+      }", "+      _startupInProgress = false;"]}], "num": 20648}
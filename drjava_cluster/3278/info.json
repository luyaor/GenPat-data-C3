{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bce29d8fb090994bf851665d6c4bad48", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71ff7a539eb3c9e5735b0657c8a859ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "e02b291d62bdaa0ea7b37dd3f2ab84515aaa6d58", "commitAfterChange": "8d09927a54fdf6b15f8ba5f6b7e80366b0cf24be", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static String replaceVariables(String str, PropertyMaps props, Lambda<String,DrJavaProperty> getter)", "signatureAfterChange": "   public static String replaceVariables(String str, PropertyMaps props, Lambda<String,DrJavaProperty> getter)", "diff": ["-    int pos = str.indexOf(\"${\");", "-    int bsPos = str.indexOf('\\\\');", "-    if ((bsPos!=-1) && (bsPos<pos)) { pos = bsPos; }", "-    // find every ${", "-    // LOG.log(\"========================\");", "-    while(pos>=0) {", "-      // LOG.log(\"str = '\"+str+\"', pos = \"+pos);", "-      // see if this is an escaped \\ (\\\\)", "-      if ((str.charAt(pos)=='\\\\') &&", "-          (pos<str.length()-1) &&", "-          (str.charAt(pos+1)=='\\\\')) {", "-        // change the \\\\ into a single \\", "-        // LOG.log(\"\\t\\\\\\\\\");", "-        str = str.substring(0, pos) + str.substring(pos+1);", "-      }", "-      // see if this is an escaped $ (\\$)", "-      else if ((str.charAt(pos)=='\\\\') &&", "-               (pos<str.length()-1) &&", "-               (str.charAt(pos+1)=='$')) {", "-        // change the \\$ into a single $", "-        // LOG.log(\"\\t\\\\$\");", "-        str = str.substring(0, pos) + str.substring(pos+1);", "-        // and skip", "-        ++pos;", "-      }", "-      else if ((str.charAt(pos)=='$')) {", "-        // LOG.log(\"\\t$\");", "-        // look if this is str property name enclosed by ${...}, e.g. \"${user.home}\"", "-        if ((pos<str.length()-1) && (str.charAt(pos+1)=='{')) {", "-          int nextClose = str.indexOf('}',pos+1);", "-          if (nextClose>=0) {", "-            String key = str.substring(pos+2, nextClose);", "-            // LOG.log(\"\\tkey = '\"+key+\"'\");", "-            for(String category: props.getCategories()) {", "-              // LOG.log(\"\\ttrying category '\"+category+\"'\");", "-              DrJavaProperty p = props.getProperty(category, key);", "-              if (p!=null) {", "-                // found property name", "-                // replace \"${property.name}\" with the value of the property, e.g. /home/user", "-                String s = getter.apply(p);", "-                str = str.substring(0, pos) + s + str.substring(nextClose+1);", "-                // advance to the last character of the value", "-                pos = nextClose;", "-                break;", "+    BalancingStreamTokenizer tok = new BalancingStreamTokenizer(new StringReader(str));", "+    tok.wordRange(0,255);", "+    tok.addQuotes(\"${\", \"}\");", "+    ", "+    // LOG.log(\"---------\");", "+    // LOG.log(\"Replacing: \"+str);", "+    StringBuilder sb = new StringBuilder();", "+    String next = null;", "+    try {", "+      while((next=tok.getNextToken())!=null) {", "+        if ((next.startsWith(\"${\")) &&", "+             (next.endsWith(\"}\"))) {", "+          // LOG.log(\"Found property: \"+next);", "+          String key;", "+          String attrList = \"\";", "+          int firstCurly = next.indexOf('}');", "+          int firstSemi = next.indexOf(';');", "+          if (firstSemi<0) {", "+            // format: ${property.name}", "+            // for key, cut off ${ and }", "+            key = next.substring(2,firstCurly);", "+          }", "+          else {", "+            // format: {$property.name;...}", "+            // for key, cut off ${ and ;...}", "+            key = next.substring(2,firstSemi);", "+            // for attribute list, cut off ${propertyname; and }", "+            attrList = next.substring(firstSemi+1,next.length()-1).trim();", "+          }", "+          // LOG.log(\"\\tKey      = '\"+key+\"'\");", "+          // LOG.log(\"\\tAttrList = '\"+attrList+\"'\");", "+          boolean found = false;", "+          for(String category: props.getCategories()) {", "+            DrJavaProperty p = props.getProperty(category, key);", "+            if (p!=null) {", "+              // found property name", "+              p.resetAttributes();", "+              ", "+              // if we have a list of attributes", "+              try {", "+                if (attrList.length()>0) {", "+                  BalancingStreamTokenizer atok = new BalancingStreamTokenizer(new StringReader(attrList));", "+                  atok.wordRange(0,255);", "+                  atok.whitespaceRange(0,32);", "+                  atok.addQuotes(\"\\\"\", \"\\\"\");", "+                  atok.addKeyword(\";\");", "+                  atok.addKeyword(\"=\");", "+                  // LOG.log(\"\\tProcessing AttrList\");", "+                  String n = null;", "+                  while((n=atok.getNextToken())!=null) {", "+                    if ((n==null) || n.equals(\";\") || n.equals(\"=\") || n.startsWith(\"\\\"\")) {", "+                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key);", "+                    }", "+                    String name = n;", "+                    // LOG.log(\"\\t\\tname = '\"+name+\"'\");", "+                    n = atok.getNextToken();", "+                    if ((n==null) || (!n.equals(\"=\"))) {", "+                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key);", "+                    }", "+                    // LOG.log(\"\\t\\tread '='\");", "+                    n = atok.getNextToken();", "+                    if ((n==null) || (!n.startsWith(\"\\\"\"))) {", "+                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key);", "+                    }", "+                    String value = \"\";", "+                    if (n.length()>1) {", "+                      value = n.substring(1,n.length()-1);", "+                      // LOG.log(\"\\t\\tvalue = '\"+value+\"'\");", "+                    }", "+                    n = atok.getNextToken();", "+                    if ((n!=null) && (!n.equals(\";\"))) {", "+                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key);", "+                    }", "+                    // LOG.log(\"\\t\\tread ';' or EOF\");", "+                    // processed correctly", "+                    // LOG.log(\"\\t\\treplacing variables in '\"+value+\"'...\");", "+                    String replacedValue = replaceVariables(value, props, getter);", "+                    // LOG.log(\"\\t\\treplaced value is '\"+replacedValue+\"'\");", "+                    ", "+                    p.setAttribute(name, replacedValue);", "+                    ", "+                    if (n==null) { break; }", "+                  }", "+                }", "+                // append the value of the property, e.g. /home/user instead of \"${property.name}\"", "+                String finalValue = getter.apply(p);", "+                // LOG.log(\"\\tfinal value: '\"+finalValue+\"'\");", "+                found = true;", "+                sb.append(finalValue);", "+              }              ", "+              catch(IllegalArgumentException e) {", "+                sb.append(\"<-- Error: \"+e.getMessage()+\" -->\");", "+              if (found) { break; }", "+              continue;", "+            if (found) { break; }", "+          }", "+          if (!found) {", "+            // unknown property", "+            sb.append(next);", "+        else {", "+          sb.append(next);", "+        }", "-      pos = str.indexOf(\"${\", pos+1);", "-      bsPos = str.indexOf(\"\\\\\\\\\", pos+1);", "-      if ((bsPos!=-1) && (bsPos<pos)) { pos = bsPos; }", "-    // LOG.log(\"end str = '\"+str+\"'\");", "-    return str;", "+    catch(IllegalArgumentException e) {", "+      return \"<-- Error: \"+e.getMessage()+\" -->\";", "+    }", "+    catch(IOException e) {", "+      return \"<-- Error: \"+e.getMessage()+\" -->\";", "+    }", "+    ", "+    // LOG.log(\"Returning '\"+sb.toString()+\"'\");", "+    // LOG.log(\"---------\");", "+    ", "+    return sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e5e93e1d27f18c9c1bfc3dbe173c42b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "e02b291d62bdaa0ea7b37dd3f2ab84515aaa6d58", "commitAfterChange": "8d09927a54fdf6b15f8ba5f6b7e80366b0cf24be", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   protected void colorVariables(final JTextPane pane,                                 final DocumentListener dl,                                 final SimpleAttributeSet normal,                                 final SimpleAttributeSet variable,                                 final SimpleAttributeSet error)", "signatureAfterChange": "   protected void colorVariables(final JTextPane pane,                                 final PropertyMaps props,                                 final DocumentListener dl,                                 final SimpleAttributeSet normal,                                 final SimpleAttributeSet variable,                                 final SimpleAttributeSet error)", "diff": ["+                                final PropertyMaps props,", "+        BalancingStreamTokenizer tok = new BalancingStreamTokenizer(new StringReader(str));", "+        tok.wordRange(0,255);", "+        tok.addQuotes(\"${\", \"}\");", "+", "+        int pos = 0;", "+        String next = null;", "-//          int pos = str.indexOf(\"${\");", "-//          int bsPos = str.indexOf(\"\\\\\\\\\");", "-//          if ((bsPos!=-1) && (bsPos<pos)) { pos = bsPos; }", "-          int pos = 0;", "-          SimpleAttributeSet sas = variable;", "-          // LOG.log(str);", "-          while((str.length()>0)&&(pos>=0)&&(pos<str.length())) {", "-            // LOG.log(\"pos = \"+pos); ", "-            // see if this is an escaped \\ (\\\\)", "-            if ((str.charAt(pos)=='\\\\') &&", "-                (pos<str.length()-1) &&", "-                (str.charAt(pos+1)=='\\\\')) {", "-              doc.setCharacterAttributes(pos,pos+1,normal,true);", "-              pos += 2;", "-            }", "-            else if ((str.charAt(pos)=='\\\\') &&", "-                     (pos<str.length()-1) &&", "-                     (str.charAt(pos+1)=='$')) {", "-              // escaped $ (\\$)", "-              doc.setCharacterAttributes(pos,pos+1,normal,true);", "-              pos += 2;", "-            }", "-            else if ((str.charAt(pos)=='$') &&", "-                     (pos<str.length()-1) &&", "-                     (str.charAt(pos+1)=='{')) {", "-              // beginning of what should be a ${variable}", "-              boolean found = false;", "-              for(String category: PropertyMaps.ONLY.getCategories()) {", "-                for(DrJavaProperty prop: PropertyMaps.ONLY.getProperties(category).values()) {", "-                  String key = prop.getName();", "-                  int endPos = pos + key.length() + 3;", "-                  if (str.substring(pos, Math.min(str.length(), endPos)).equals(\"${\"+key+\"}\")) {", "-                    // found property name", "-                    found = true;", "-                    doc.setCharacterAttributes(pos,endPos-pos,variable,true);", "-                    pos = endPos;", "-                    break;", "-                  }", "-                }", "-              }", "-              if (!found) {", "-                int closePos = str.indexOf('}', pos);", "-                if (closePos!=-1) {", "-                  doc.setCharacterAttributes(pos,closePos-pos+1,error,true);", "-                  pos = closePos+1;", "+          while((next=tok.getNextToken())!=null) {", "+            if (next.startsWith(\"${\")) {", "+              if (next.endsWith(\"}\")) {", "+                String key;", "+                String attrList = \"\";", "+                int firstCurly = next.indexOf('}');", "+                int firstSemi = next.indexOf(';');", "+                if (firstSemi<0) {", "+                  key = next.substring(2,firstCurly);", "-                  doc.setCharacterAttributes(pos,1,error,true);", "-                  ++pos;", "+                  key = next.substring(2,firstSemi);", "+                  attrList = next.substring(firstSemi+1,next.length()-1).trim();", "+                boolean found = false;", "+                for(String category: props.getCategories()) {", "+                  DrJavaProperty p = props.getProperty(category, key);", "+                  if (p!=null) {", "+                    found = true;", "+                    doc.setCharacterAttributes(pos,pos+next.length(),variable,true);", "+", "+                    // found property name", "+                    // if we have a list of attributes", "+                    if (attrList.length()>0) {", "+                      int subpos = pos + 2 + key.length() + 1;", "+                      int added = 0;", "+                      BalancingStreamTokenizer atok = new BalancingStreamTokenizer(new StringReader(attrList));", "+                      atok.wordRange(0,255);", "+                      atok.addQuotes(\"\\\"\", \"\\\"\");", "+                      atok.addKeyword(\";\");", "+                      atok.addKeyword(\"=\");", "+                      // LOG.log(\"\\tProcessing AttrList\");", "+                      String n = null;", "+                      while((n=atok.getNextToken())!=null) {", "+                        if ((n==null) || n.trim().equals(\";\") || n.trim().equals(\"=\") || n.trim().startsWith(\"\\\"\")) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        added += n.length();", "+                        String name = n.trim();", "+                        n = atok.getNextToken();", "+                        if ((n==null) || (!n.trim().equals(\"=\"))) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        added += n.length();", "+                        n = atok.getNextToken();", "+                        if ((n==null) || (!n.trim().startsWith(\"\\\"\"))) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        added += n.length();", "+                        n = atok.getNextToken();", "+                        if ((n!=null) && (!n.trim().equals(\";\"))) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        if (n!=null) { added += n.length(); }", "+                        try {", "+                          p.getAttribute(name);", "+                        }", "+                        catch(IllegalArgumentException e) {", "+                          doc.setCharacterAttributes(subpos,subpos+added,error,true);", "+                        }", "+                        subpos += added;", "+                      }", "+                    }", "+                  }", "+                  if (found) { break; }", "+                }", "+                if (!found) {", "+                  doc.setCharacterAttributes(pos,pos+next.length(),error,true);", "+                }", "+              }", "+              else {", "+                doc.setCharacterAttributes(pos,pos+next.length(),error,true);", "-              doc.setCharacterAttributes(pos,1,normal,true);", "-              ++pos;", "+              doc.setCharacterAttributes(pos,pos+next.length(),normal,true);", "+            pos += next.length();", "+        catch(Exception e) { /* ignore  */ }"]}], "num": 3278}
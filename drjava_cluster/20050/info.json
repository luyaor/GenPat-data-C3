{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f537e4eccab585a7ca3ed6829bf4d3e4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42da609d736cfa514abd73841d023ef3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void testBooleanBitwiseAnd()", "signatureAfterChange": "   public void testBooleanBitwiseAnd() throws ExceptionReturnedException", "diff": ["-  public void testBooleanBitwiseAnd() {", "-    Node exp = _parseCode(\"new Boolean(true) & new Boolean(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testBooleanBitwiseAnd() throws ExceptionReturnedException {", "+    String text = \"new Boolean(true) & new Boolean(false);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: true true boolean)])\";", "+    String expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)])\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f72e109c7ec4c20d9e54b2b2f2b3eb9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void testBooleanBitwiseOr()", "signatureAfterChange": "   public void testBooleanBitwiseOr() throws ExceptionReturnedException", "diff": ["-  public void testBooleanBitwiseOr() {", "-    Node exp = _parseCode(\"new Boolean(true) | new Boolean(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testBooleanBitwiseOr() throws ExceptionReturnedException {", "+    String text = \"new Boolean(true) | new Boolean(false);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: true true boolean)])\";", "+    String expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)])\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+  }"]}], "num": 20050}
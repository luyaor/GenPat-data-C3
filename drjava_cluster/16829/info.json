{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4590e980ba0a419d75578473b57560f9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dcc1c6c5ef8f8a06829c2c3d3572cd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static <T> Set<T> asSet(Option<? extends T> opt)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\") public static <T> Thunk<Set<T>> hashSetFactory()", "diff": ["+   */", "+  @SuppressWarnings(\"unchecked\") public static <T> Thunk<Set<T>> hashSetFactory() {", "+    return (Thunk<Set<T>>) DefaultHashSetFactory.INSTANCE;", "+  }", "-  /** Convert an Option to an empty or singleton set. */", "-  public static <T> Set<T> asSet(Option<? extends T> opt) {", "-    return opt.apply(new OptionVisitor<T, Set<T>>() {", "-      public Set<T> forSome(T val) { return Collections.singleton(val); }", "-      public Set<T> forNone() { return emptySet(); }", "-    });", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99f8cc57dda20321c50c23d01630ef3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 81, "signatureBeforeChange": "       public Set<T> forSome(T val)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public static <T> Option<T> castIfContains(Collection<? extends T> c, Object obj)", "diff": ["+   */", "+  @SuppressWarnings(\"unchecked\")", "+  public static <T> Option<T> castIfContains(Collection<? extends T> c, Object obj) {", "+    if (c.contains(obj)) { return Option.some((T) obj); }", "+    else { return Option.none(); }", "-    return opt.apply(new OptionVisitor<T, Set<T>>() {", "-      public Set<T> forSome(T val) { return Collections.singleton(val); }"]}], "num": 16829}
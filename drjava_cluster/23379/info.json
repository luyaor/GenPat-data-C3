{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5dff63ac4e7fdd4d6b22f9a78eee754", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ab66d858610e3abf18c805d2a9007fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeClassFinder.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public ClassInfo lookupClass(String cname, ClassInfo cinfo) \tthrows ClassNotFoundException", "signatureAfterChange": "     public ClassInfo lookupClass(String cname, ClassInfo cinfo) throws ClassNotFoundException", "diff": ["-    public ClassInfo lookupClass(String cname, ClassInfo cinfo)", "-\tthrows ClassNotFoundException {", "-\tString name = cinfo.getName();", "-\tif (classPool.contains(cname)) {", "-\t    return classPool.get(cname);", "-\t} else {", "-\t    // cname represents perhaps an inner class", "-\t    String s = name + \"$\" + cname;", "-\t    if (classPool.contains(s)) {", "-\t\treturn classPool.get(s);", "-\t    }", "-\t}", "-\ttry {", "-\t    return new JavaClassInfo(context.lookupClass(cname, name));", "-\t} catch (ClassNotFoundException e) {", "-\t    // look after an inner class of the declaring class", "-\t    ClassInfo ci = cinfo.getDeclaringClass();", "-\t    try {", "-\t\tif (ci != null) {", "-\t\t    return new JavaClassInfo", "-\t\t\t(context.lookupClass(ci.getName() + \"$\" + cname));", "-\t\t}", "-\t\tthrow new ClassNotFoundException(cname);", "-\t    } catch (ClassNotFoundException ex) {", "-\t\t// Look after an inner class of an ancestor", "-\t\tci = cinfo;", "-\t\twhile ((ci = ci.getSuperclass()) != null) {", "-\t\t    try {", "-\t\t\treturn new JavaClassInfo", "-\t\t\t    (context.lookupClass(ci.getName() + \"$\" + cname));", "-\t\t    } catch (ClassNotFoundException e2) {", "-\t\t    } catch (TreeCompiler.PseudoError e2) {", "-\t\t\treturn e2.getClassInfo();", "-\t\t    }", "-\t\t}", "-\t    } catch (TreeCompiler.PseudoError ex) {", "-\t\treturn ex.getClassInfo();", "-\t    }", "-\t} catch (TreeCompiler.PseudoError e) {", "-\t    return e.getClassInfo();", "-\t}", "-\tthrow new ClassNotFoundException(cname);", "-    }", "+    public ClassInfo lookupClass(String cname, ClassInfo cinfo) throws ClassNotFoundException {", "+      ", "+      String name = cinfo.getName();", "+      if (classPool.contains(cname)) return classPool.get(cname);", "+      // cname represents perhaps an inner class", "+      String s = name + \"$\" + cname;", "+      if (classPool.contains(s)) return classPool.get(s);", "+      try { return new JavaClassInfo(context.lookupClass(cname, name)); }", "+      catch (ClassNotFoundException e) {", "+        // look after an inner class of the declaring class", "+        ClassInfo ci = cinfo.getDeclaringClass();", "+        try {", "+          if (ci != null) {", "+            return new JavaClassInfo(context.lookupClass(ci.getName() + \"$\" + cname));", "+          }", "+          throw new ClassNotFoundException(cname);", "+        } catch (ClassNotFoundException ex) {", "+          // Look after an inner class of an ancestor", "+          ci = cinfo;", "+          while ((ci = ci.getSuperclass()) != null) {", "+            try {", "+              return new JavaClassInfo(context.lookupClass(ci.getName() + \"$\" + cname));", "+            } catch (ClassNotFoundException e2) {", "+            } catch (TreeCompiler.PseudoError e2) {", "+              return e2.getClassInfo();", "+            }", "+          }", "+        } catch (TreeCompiler.PseudoError ex) {", "+          return ex.getClassInfo();", "+        }", "+      } catch (TreeCompiler.PseudoError e) {", "+        return e.getClassInfo();", "+      }", "+      throw new ClassNotFoundException(cname);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b80ee72e4da8c85bd0c92687896303", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeClassFinder.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public ClassInfo lookupClass(String cname, ClassInfo cinfo) throws ClassNotFoundException", "signatureAfterChange": "     public ClassInfo lookupClass(String cname, ClassInfo cinfo) \tthrows ClassNotFoundException", "diff": ["-    public ClassInfo lookupClass(String cname, ClassInfo cinfo) throws ClassNotFoundException {", "-      ", "-      String name = cinfo.getName();", "-      if (classPool.contains(cname)) return classPool.get(cname);", "-      // cname represents perhaps an inner class", "-      String s = name + \"$\" + cname;", "-      if (classPool.contains(s)) return classPool.get(s);", "-", "-      try { return new JavaClassInfo(context.lookupClass(cname, name)); }", "-      catch (ClassNotFoundException e) {", "-        // look after an inner class of the declaring class", "-        ClassInfo ci = cinfo.getDeclaringClass();", "-        try {", "-          if (ci != null) {", "-            return new JavaClassInfo(context.lookupClass(ci.getName() + \"$\" + cname));", "-          }", "-          throw new ClassNotFoundException(cname);", "-        } catch (ClassNotFoundException ex) {", "-          // Look after an inner class of an ancestor", "-          ci = cinfo;", "-          while ((ci = ci.getSuperclass()) != null) {", "-            try {", "-              return new JavaClassInfo(context.lookupClass(ci.getName() + \"$\" + cname));", "-            } catch (ClassNotFoundException e2) {", "-            } catch (TreeCompiler.PseudoError e2) {", "-              return e2.getClassInfo();", "-            }", "-          }", "-        } catch (TreeCompiler.PseudoError ex) {", "-          return ex.getClassInfo();", "-        }", "-      } catch (TreeCompiler.PseudoError e) {", "-        return e.getClassInfo();", "-      }", "-      throw new ClassNotFoundException(cname);", "+    public ClassInfo lookupClass(String cname, ClassInfo cinfo)", "+\tthrows ClassNotFoundException {", "+\tString name = cinfo.getName();", "+\tif (classPool.contains(cname)) {", "+\t    return classPool.get(cname);", "+\t} else {", "+\t    // cname represents perhaps an inner class", "+\t    String s = name + \"$\" + cname;", "+\t    if (classPool.contains(s)) {", "+\t\treturn classPool.get(s);", "+\t    }", "+\t}", "+\ttry {", "+\t    return new JavaClassInfo(context.lookupClass(cname, name));", "+\t} catch (ClassNotFoundException e) {", "+\t    // look after an inner class of the declaring class", "+\t    ClassInfo ci = cinfo.getDeclaringClass();", "+\t    try {", "+\t\tif (ci != null) {", "+\t\t    return new JavaClassInfo", "+\t\t\t(context.lookupClass(ci.getName() + \"$\" + cname));", "+\t\t}", "+\t\tthrow new ClassNotFoundException(cname);", "+\t    } catch (ClassNotFoundException ex) {", "+\t\t// Look after an inner class of an ancestor", "+\t\tci = cinfo;", "+\t\twhile ((ci = ci.getSuperclass()) != null) {", "+\t\t    try {", "+\t\t\treturn new JavaClassInfo", "+\t\t\t    (context.lookupClass(ci.getName() + \"$\" + cname));", "+\t\t    } catch (ClassNotFoundException e2) {", "+\t\t    } catch (TreeCompiler.PseudoError e2) {", "+\t\t\treturn e2.getClassInfo();", "+\t\t    }", "+\t\t}", "+\t    } catch (TreeCompiler.PseudoError ex) {", "+\t\treturn ex.getClassInfo();", "+\t    }", "+\t} catch (TreeCompiler.PseudoError e) {", "+\t    return e.getClassInfo();", "+\t}", "+\tthrow new ClassNotFoundException(cname);"]}], "num": 23379}
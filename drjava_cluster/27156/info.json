{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44d2b6ac1f962ea679bbc3927317e9e6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f200fd3c5fbe9f1f23a96c746ea066b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1824c23d7190107a20690dc4a2840a5d74f14a93", "commitAfterChange": "3b64166f1d62b17dc65eb373f58379c1d93452e7", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "signatureAfterChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "diff": ["+    ", "+    final int wordLen =  _findWord.length();", "-    assert (start >= 0 && start <= docLen) && (len >= 0 && len <= docLen);", "+    assert (start >= 0 && start <= docLen) && (len >= 0 && len <= docLen) && wordLen > 0;", "-", "-    if (docLen == 0) return new FindResult(doc, -1, true, allWrapped); // failure result", "-    final int newStart;", "+    int newStart;", "-    final int adjustment = _findWord.length() - 1; // max size of the findWord suffix (prefix) within preceding text", "+    final int adjustment = wordLen - 1; // non-negative max size of the findWord suffix (prefix) within preceding text", "+      if (newLen > docLen) newLen = docLen;", "-      newStart = len;", "-      newLen = (docLen - len) + adjustment;", "+      newStart = len - adjustment;", "+      if (newStart < 0) newStart = 0;", "+      newLen = docLen - newStart;", "-      ", "-    if (newLen > docLen) newLen = docLen;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac03c64c417ced95f69d36670df48f49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 75, "signatureBeforeChange": "   private boolean onlyWhiteSpaceBeforeCurrent() throws BadLocationException", "signatureAfterChange": "   private boolean onlyWhiteSpaceBeforeCurrent() throws BadLocationException", "diff": ["-    String text = getText(0, _currentLocation);  // _currentLocation is length", "-    //get the text after the previous new line, but before the current location", "-    text = text.substring(text.lastIndexOf(\"\\n\") + 1);", "-    //check all positions in the new text to determine if there are any blank chars", "-    int pos = text.length() - 1;", "+    assert isReadLocked();", "+    ", "+    int lineStart = _getLineStartPos(_currentLocation);", "+    if (lineStart < 0) lineStart = 0;    // _currentLocation on first line", "+    int prefixSize = _currentLocation - lineStart;", "+    ", "+    // get prefix of _currentLocation (the text after the previous new line, but before the current location)", "+    String prefix = getText(lineStart, prefixSize);", "+    ", "+    //check all positions in the prefix to determine if there are any blank chars", "+    int pos = prefixSize - 1;", "-    while (pos >= 0 && text.charAt(pos) == ' ') pos--;", "-    return (pos < 0); ", "+    while (pos >= 0 && prefix.charAt(pos) == ' ') pos--;", "+    return (pos < 0);", "+  }"]}], "num": 27156}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea25a6b7c9cf8f83a165eac20bb800c3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26de97ca1a75d1f6865470da13b6b895", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "45c1b52040a43258c26d6135dd1fc15a1c6840d2", "commitAfterChange": "ae4333c8dd1b54b8a781008188f09b6786d95ae2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testAccessFieldsOfOuterClasses()      throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "signatureAfterChange": "   public void testAccessFieldsOfOuterClasses()      throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "diff": ["-    // Set one breakpoints", "+    // Set one breakpoint", "-     ", "-    // Run the main() method, hitting both breakpoints in different threads", "+", "+    // Run the main() method, hitting the breakpoint", "+    ", "+    // Test that IdentityVisitor really does visit all nodes and their subnodes", "+    // by giving it a statement consisting of lots of different syntax components.", "+    // Tests that the debugger has the correct notion of ", "+    interpret(\"foo\");", "+    assertInteractionsContains(\"6\");", "+", "+    interpret(\"foo = 123\");", "+    assertEquals(\"foo should have been modified\" ,", "+                 \"123\",", "+                 interpret(\"MonkeyStuff.this.foo\"));", "+    interpret(\"int foo = 999;\");", "+    assertEquals(\"foo should refer to the foo that was declared\",", "+                 \"999\",", "+                 interpret(\"foo\"));", "+    assertEquals(\"declaring foo should not have changed MonkeyStuff.this.foo\",", "+                 \"123\",", "+                 interpret(\"MonkeyStuff.this.foo\"));", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73a555a3714fdb97e581983de0ac2bc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "a42a1005ad3faca50638e0131df3bc7c45ba82de", "commitAfterChange": "0b0e9049d382a4fa995a6c0df7ce197dd950d3eb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testAccessStaticFieldsOfOuterClass()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "signatureAfterChange": "   public void testAccessStaticFieldsAndMethodsOfOuterClass()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "diff": ["-  public void testAccessStaticFieldsOfOuterClass()", "+  public void testAccessStaticFieldsAndMethodsOfOuterClass()", "-                 interpret(\"MonkeyTwoDeep.twoDeepFoo\"));", "+                 interpret(\"MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "+    ", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyTwoDeep.getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e425a02e79de37f80b7d92a4d6df8609", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "a42a1005ad3faca50638e0131df3bc7c45ba82de", "commitAfterChange": "0b0e9049d382a4fa995a6c0df7ce197dd950d3eb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testAccessFieldsOfOuterClasses()      throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "signatureAfterChange": "   public void testAccessFieldsAndMethodsOfOuterClasses()      throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "diff": ["-  public void testAccessFieldsOfOuterClasses() ", "+  public void testAccessFieldsAndMethodsOfOuterClasses() ", "+    ", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyTwoDeep.this.getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyInner.MonkeyTwoDeep.this.getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyStuff.MonkeyInner.MonkeyTwoDeep.this.getNegativeTwo()\"));"]}], "num": 19058}
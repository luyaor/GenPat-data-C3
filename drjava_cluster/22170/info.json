{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6985db5fe6d66a84bde062d14fa6bdfb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c651821d3622dcf7f53c7879a6c3d5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void testPlusOperator()", "signatureAfterChange": "   public void testPlusOperator() throws ExceptionReturnedException", "diff": ["-  public void testPlusOperator() {", "-    Node exp = _parseCode(\"+new Double(10);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testPlusOperator() throws ExceptionReturnedException {", "+    String text = \"+new Double(10);\";", "+    String expected = \"(koala.dynamicjava.tree.ObjectMethodCall: doubleValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Double) [(koala.dynamicjava.tree.IntegerLiteral: 10 10 int)]))\";", "+", "+    _checkUnaryExpression(text, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb44357b2ee3094ca068cc96d2056e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void testComplimentingOneBoolean()", "signatureAfterChange": "   public void testComplimentingOneBoolean() throws ExceptionReturnedException", "diff": ["-  public void testComplimentingOneBoolean() {", "-    Node exp = _parseCode(\"~new Integer(24);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "-  }", "+  public void testComplimentingOneBoolean() throws ExceptionReturnedException {", "+    String text = \"~new Integer(24);\";", "+    String expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 24 24 int)]))\";", "+", "+    _checkUnaryExpression(text, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e22617f1f9131dd4ba4a00eb64fc63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public void testMinusOperator()", "signatureAfterChange": "   public void testMinusOperator() throws ExceptionReturnedException", "diff": ["-  public void testMinusOperator() {", "-    Node exp = _parseCode(\"-new Integer(10);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "-    ", "-    ", "+  public void testMinusOperator() throws ExceptionReturnedException {", "+    String text = \"-new Integer(10);\";", "+    String expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 10 10 int)]))\";", "+", "+    _checkUnaryExpression(text, expected);", "+  }"]}], "num": 22170}
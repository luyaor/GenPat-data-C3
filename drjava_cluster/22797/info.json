{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "839ac887a5a2aa45bda4ec3d2b2712c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a9b5d41824b2a50ad4e6bc0357042ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/DynamicJava.java", "commitBeforeChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "commitAfterChange": "608d05e2a10d21cbc190b09334cd60b3c39fbc37", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public static void main(String... args) throws IOException", "signatureAfterChange": "      public static void main(String... args) throws IOException", "diff": ["-    while (true) {", "+    String input;", "+    do {", "-      String input = in.readLine();", "-      try {", "-        Option<Object> result = i.interpret(input);", "-        result.apply(new OptionVisitor<Object, Void>() {", "-          public Void forSome(Object o) { System.out.println(TextUtil.toString(o)); return null; }", "-          public Void forNone() { return null; }", "-        });", "+      input = in.readLine();", "+      if (input != null) {", "+        try {", "+          Option<Object> result = i.interpret(input);", "+          result.apply(new OptionVisitor<Object, Void>() {", "+            public Void forSome(Object o) { System.out.println(TextUtil.toString(o)); return null; }", "+            public Void forNone() { return null; }", "+          });", "+        }", "+        catch (InterpreterException e) { e.printUserMessage(); debug.log(e); }", "+        catch (RuntimeException e) {", "+          System.out.println(\"INTERNAL ERROR: Uncaught exception\");", "+          e.printStackTrace();", "+        }", "+        System.out.println();", "-      catch (InterpreterException e) { e.printUserMessage(); debug.log(e); }", "-      catch (RuntimeException e) {", "-        System.out.println(\"INTERNAL ERROR: Uncaught exception\");", "-        e.printStackTrace();", "-      }", "-      System.out.println();", "-    }", "+    } while (input != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c46b4090ed159842b52e42f515811e9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "8bc200087783c364b85293d74698e136f9d39e73", "commitAfterChange": "cdc8036e660934a45b263608a1cde80ec1d15c5d", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public TypeData forComplexNameReference(ComplexNameReference that)", "signatureAfterChange": "   public TypeData forComplexNameReference(ComplexNameReference that)", "diff": ["-   */", "+    */", "+    if (lhs == null) return null;   // defensive code based on NullPointerException that MAY be due to lhs == null", "+    ", "-      if (classRef != null) {return classRef;}", "+      if (classRef != null) { return classRef; }", "-    ", "-    checkAccessibility(that, lhs.getSymbolData().getMav(), lhs.getSymbolData().getName(), lhs.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "+    if (_data == null) return null;  // intermittent NullPointerException in next line; lhs == null or _data == null", "+    checkAccessibility(that, lhs.getSymbolData().getMav(), lhs.getSymbolData().getName(), lhs.getSymbolData(), ", "+                       _data.getSymbolData(), \"class or interface\", true);", "-        if (!reference.hasModifier(\"static\")) {", "-          _addError(\"Non-static variable \" + reference.getName() + \" cannot be accessed from the static context \" + Data.dollarSignsToDots(lhs.getName()) + \".  Perhaps you meant to instantiate an instance of \" + Data.dollarSignsToDots(lhs.getName()), that);", "+        if (! reference.hasModifier(\"static\")) {", "+          _addError(\"Non-static variable \" + reference.getName() + \" cannot be accessed from the static context \" + ", "+                    Data.dollarSignsToDots(lhs.getName()) + \".  Perhaps you meant to instantiate an instance of \" + ", "+                    Data.dollarSignsToDots(lhs.getName()), that);"]}], "num": 22797}
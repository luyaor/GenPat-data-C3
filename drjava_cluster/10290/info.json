{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ecbf6b2ac987649abc2e214570ae91c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c37e8186ea7a5914ddeadba5a7a6b05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "7d7f71637ac82cabd526a44e6c766574f76fc311", "commitAfterChange": "33c99bc453e2b8a224944d7334183adb0010fc32", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void declareClassImport(String cname) throws ClassNotFoundException", "signatureAfterChange": "   public void declareClassImport(String cname) throws ClassNotFoundException", "diff": ["+   */", "+  public void declareClassImport(String cname) throws ClassNotFoundException {", "+    try {", "+      // A previous importation of this class is removed to avoid a new", "+      // existance verification and to speed up further loadings.", "+      if (!singleTypeImportClauses.remove(cname)) {", "+        Class.forName(cname, true, classLoader);", "+      }", "+    } catch (ClassNotFoundException e) {", "+      // try to find an inner class with this name", "+      Class c = findInnerClass(cname);", "+      singleTypeImportClauses.remove((c == null) ? cname : c.getName());", "+      singleTypeImportClauses.add(0, (c == null) ? cname : c.getName());", "+    } finally {", "+      singleTypeImportClauses.add(0, cname);", "+  }", "-     */", "-    public void declareClassImport(String cname) throws ClassNotFoundException {", "-\ttry {", "-\t    // A previous importation of this class is removed to avoid a new", "-\t    // existance verification and to speed up further loadings.", "-\t    if (!singleTypeImportClauses.remove(cname)) {", "-\t\tClass.forName(cname, true, classLoader);", "-\t    }", "-\t} catch (ClassNotFoundException e) {", "-\t    // try to find an inner class with this name", "-\t    Class c = findInnerClass(cname);", "-\t    singleTypeImportClauses.remove((c == null) ? c.getName() : cname);", "-\t    singleTypeImportClauses.add(0, (c == null) ? c.getName() : cname);", "-\t} finally {", "-\t    singleTypeImportClauses.add(0, cname);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9bfe7bf8472a8577671e4db5362bda9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "signatureAfterChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "diff": ["-    assertEquals(\"wrong name for _file2\", _file2.getCanonicalPath(), src[0].getCanonicalPath()); // assumes reverse order", "-    assertEquals(\"Wrong name for _file1\", _file1.getCanonicalPath(), src[1].getCanonicalPath());", "+    assertEquals(\"wrong name for _file2\", _file2.getCanonicalPath(), src[1].getCanonicalPath()); // assumes same (not reverse) order", "+    assertEquals(\"Wrong name for _file1\", _file1.getCanonicalPath(), src[0].getCanonicalPath());"]}], "num": 10290}
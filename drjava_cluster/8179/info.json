{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d62e082843951329a978f4b9f4e8745", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48e139e1e17ad3fa95abed2469faf69b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 60, "signatureBeforeChange": "   private void _createDebugger()", "signatureAfterChange": "   private void _createDebugger()", "diff": ["-      ", "+", "+      getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+        public void regionAdded(final Breakpoint bp) { setProjectChanged(true); }", "+        public void regionChanged(final Breakpoint bp) { setProjectChanged(true); }", "+        public void regionRemoved(final Breakpoint bp) { ", "+          try {", "+            getDebugger().removeBreakpoint(bp);", "+          } catch(DebugException de) { /* just ignore it */ }", "+          setProjectChanged(true);", "+          }", "+      });", "+      getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {", "+        public void regionAdded(DocumentRegion r) { setProjectChanged(true); }", "+        public void regionChanged(DocumentRegion r) { setProjectChanged(true); }", "+        public void regionRemoved(DocumentRegion r) { setProjectChanged(true); }", "+      });", "+      ", "+        public void watchSet(final DebugWatchData w) { setProjectChanged(true); }", "+        public void watchRemoved(final DebugWatchData w) { setProjectChanged(true); }    ", "+        ", "+        public void regionAdded(final Breakpoint bp) { }", "+        public void regionChanged(final Breakpoint bp) { }", "+        public void regionRemoved(final Breakpoint bp) { }", "-        public void breakpointSet(final Breakpoint bp) {", "-          setProjectChanged(true);", "-        }", "-        public void breakpointChanged(final Breakpoint bp) {", "-          setProjectChanged(true);", "-        }    ", "-        public void breakpointRemoved(final Breakpoint bp) {", "-          setProjectChanged(true);", "-        }    ", "-        public void watchSet(final DebugWatchData w) {", "-          setProjectChanged(true);", "-        }", "-        public void watchRemoved(final DebugWatchData w) {", "-          setProjectChanged(true);", "-        }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7afb7884a0a83bb1718132ee86801f4d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "   private void _createDebugger()", "signatureAfterChange": "   private void _createDebugger()", "diff": ["+      ", "+      // add listener to set the project file to \"changed\" when a breakpoint or watch is added, removed, or changed", "+      _debugger.addListener(new DebugListener() {", "+        public void debuggerStarted() { }", "+        public void debuggerShutdown() { }", "+        public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) { }", "+        public void breakpointSet(final Breakpoint bp) {", "+          setProjectChanged(true);", "+        }", "+        public void breakpointReached(final Breakpoint bp) { }", "+        public void breakpointRemoved(final Breakpoint bp) {", "+          setProjectChanged(true);", "+        }    ", "+        public void watchSet(final DebugWatchData w) {", "+          setProjectChanged(true);", "+        }", "+        public void watchRemoved(final DebugWatchData w) {", "+          setProjectChanged(true);", "+        }    ", "+        public void stepRequested() { }", "+        public void currThreadSuspended() { }", "+        public void currThreadResumed() { }", "+        public void threadStarted() { }", "+        public void currThreadDied() { }", "+        public void nonCurrThreadDied() {  }", "+        public void currThreadSet(DebugThreadData thread) { }", "+      });"]}], "num": 8179}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9f8cc7fbd1ab3eca74b07b4f4c1efdf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a976ddbd3242325fdf7ad4bad42b6fb8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public CompilerInterface[] getAvailableCompilers()", "diff": ["-    for (int i = 0; i < DEFAULT_COMPILERS.length; i++) {", "+    for (String[] row:  DEFAULT_COMPILERS) {", "-      for (int j = 0; j < DEFAULT_COMPILERS[i].length; j++) {", "-        String name = DEFAULT_COMPILERS[i][j];", "-        try {", "-          if (_createCompiler(name, availableCompilers)) {", "-            break;", "-          }", "-        }", "+      for (String name: row) {", "+        try { if (_createCompiler(name, availableCompilers)) break; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9286361c83397602de01784e010a869", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   private void _javadocAllWorker(File destDirFile,                                  FileSaveSelector saver,                                  String classpath)", "signatureAfterChange": "   private void _javadocAllWorker(File destDirFile, FileSaveSelector saver, String classpath)", "diff": ["-  private void _javadocAllWorker(File destDirFile,", "-                                 FileSaveSelector saver,", "-                                 String classpath)", "-  {", "-    if (!_ensureValidToolsJar()) {", "-      return;", "-    }", "+  private void _javadocAllWorker(File destDirFile, FileSaveSelector saver, String classpath) {", "+    ", "+    if (!_ensureValidToolsJar()) return;", "-    HashSet<String> docUnits = new HashSet<String>();  // units to send to Javadoc (packages or files)", "-    HashSet<File> sourceRootSet = new HashSet<File>();  // set of unique source roots for open files", "-    HashSet<File> defaultRoots = new HashSet<File>();  // source roots for files in default package", "-    HashSet<String> topLevelPacks = new HashSet<String>();  // top level package names to include", "+    HashSet<String> docUnits      = new HashSet<String>(); // units to send to Javadoc (packages or files)", "+    HashSet<File>   sourceRootSet = new HashSet<File>();   // set of unique source roots for open files", "+    HashSet<File>   defaultRoots  = new HashSet<File>();   // source roots for files in default package", "+    HashSet<String> topLevelPacks = new HashSet<String>(); // top level package names to include", "-    for (int i = 0; i < docs.size(); i++) {", "-      OpenDefinitionsDocument doc = docs.get(i);", "+    for (OpenDefinitionsDocument doc: docs) {", "-        if (file == null) {", "-          throw new IllegalStateException(\"No file for this document.\");", "-        }", "+        if (file == null) throw new IllegalStateException(\"No file for this document.\");", "-          if (!defaultRoots.contains(sourceRoot)) {", "+          if (! defaultRoots.contains(sourceRoot)) {", "-", "-            for (int j = 0; j < javaFiles.length; j++) {", "-              docUnits.add(javaFiles[j].getAbsolutePath());", "-            }", "+            for (File f: javaFiles) { docUnits.add(f.getAbsolutePath());}", "-            searchRoot = new File(sourceRoot,", "-                                  pack.replace('.', File.separatorChar));", "+            searchRoot = new File(sourceRoot, pack.replace('.', File.separatorChar));", "-          if (!topLevelPacks.contains(topLevelPack)", "-                || !sourceRootSet.contains(sourceRoot)) {", "+          if (! topLevelPacks.contains(topLevelPack) || ! sourceRootSet.contains(sourceRoot)) {", "-    if (docUnits.size() == 0) {", "-      return;", "-    }", "+    if (docUnits.size() == 0) return;", "-      if (a != 0) {", "-        sourcePath.append(separator);", "-      }", "+      if (a != 0)  sourcePath.append(separator);", "-"]}], "num": 6200}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a26b62e8d6116e68a308abaf079e575", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c64ac8a56c2f67fc9de1534b855bb00", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": "          public void testForPlusAssignmentExpression()", "signatureAfterChange": "          public void testForPlusAssignmentExpression()", "diff": ["-      //Plus Assignment with numbers:", "+      // Plus Assignment with numbers:", "-      //if variable does not have value, cannot be plus assigned", "+      // if variable does not have value, cannot be plus assigned", "-      assertEquals(\"Error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\",", "+                   errors.get(0).getFirst());", "-      //if variable is final, with a value cannot be reassigned", "+      // if variable is final, with a value cannot be reassigned", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "+                   errors.get(1).getFirst());", "-      assertEquals(\"There should be 2 errors\", 2, errors.size());", "+      assertEquals(\"There should still be 2 errors\", 2, errors.size());", "-      assertEquals(\"There should be 4 errors\", 4, errors.size());", "-      assertEquals(\"The first error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\", errors.get(2).getFirst());", "-      assertEquals(\"The second error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\", errors.getLast().getFirst());", "-", "-      ", "-      ", "+      assertEquals(\"There should still be 2 errors\", 2, errors.size());  // Generated two duplicate messages.", "+      assertEquals(\"The first error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\", ", "+                   errors.get(0).getFirst());", "-      PlusAssignmentExpression pa3 = new PlusAssignmentExpression(SourceInfo.NO_INFO, sRef, new BooleanLiteral(SourceInfo.NO_INFO, true));", "+      PlusAssignmentExpression pa3 = ", "+        new PlusAssignmentExpression(SourceInfo.NO_INFO, sRef, new BooleanLiteral(SourceInfo.NO_INFO, true));", "-      assertEquals(\"string concatenation with string at the front.  Should return String type\", stringSD.getInstanceData(), pa3.visit(_etc));", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "+      assertEquals(\"string concatenation with string at the front.  Should return String type\", ", "+                   stringSD.getInstanceData(), ", "+                   pa3.visit(_etc));", "+      assertEquals(\"Should still be 2 errors\", 2, errors.size());", "-      //when both sides are strings", "-      PlusAssignmentExpression pa4 = new PlusAssignmentExpression(SourceInfo.NO_INFO, sRef, new StringLiteral(SourceInfo.NO_INFO, \"cat\"));", "-      assertEquals(\"string concatenation with string on both sides.  Should return String type\", stringSD.getInstanceData(), pa4.visit(_etc));", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "+      // when both sides are strings", "+      PlusAssignmentExpression pa4 = ", "+        new PlusAssignmentExpression(SourceInfo.NO_INFO, sRef, new StringLiteral(SourceInfo.NO_INFO, \"cat\"));", "+      assertEquals(\"string concatenation with string on both sides.  Should return String type\", ", "+                   stringSD.getInstanceData(), pa4.visit(_etc));", "+      assertEquals(\"Should still be 2 errors\", 2, errors.size());", "-      //when string is second", "+      // when string is second", "-      PlusAssignmentExpression pa5 = new PlusAssignmentExpression(SourceInfo.NO_INFO, nf, new StringLiteral(SourceInfo.NO_INFO, \"house \"));", "-      assertEquals(\"string + concatenation with string at back.  Should give error\", stringSD.getInstanceData(), pa5.visit(_etc));", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String or both be numbers.  You have specified arguments of type int and java.lang.String\", errors.getLast().getFirst());", "-      ", "-", "-      ", "+      PlusAssignmentExpression pa5 = ", "+        new PlusAssignmentExpression(SourceInfo.NO_INFO, nf, new StringLiteral(SourceInfo.NO_INFO, \"house \"));", "+      assertEquals(\"string + concatenation with string at back.  Should give error\", ", "+                   stringSD.getInstanceData(), ", "+                   pa5.visit(_etc));", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String \" + ", "+                   \"or both be numbers.  You have specified arguments of type int and java.lang.String\", ", "+                   errors.get(2).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cab4b621c660294b6619f9daf258f723", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": "      public void testForArrayAccessOnly()", "signatureAfterChange": "      public void testForArrayAccessOnly()", "diff": ["-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Could not resolve symbol bad_reference\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());  // Generated a duplicate error", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Could not resolve symbol bad_reference\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad, SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot access an array element of a type name.  Perhaps you meant to create a new instance of int[]\", errors.getLast().getFirst());", "+      assertEquals(\"Should return int\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad, SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 2 errors\", 2, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot access an array element of a type name.  Perhaps you meant to create \" +", "+                   \"a new instance of int[]\", ", "+                   errors.get(1).getFirst());", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The variable referred to by this array access is a char, not an array\", errors.getLast().getFirst());", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The variable referred to by this array access is a char, not an array\", ", "+                   errors.get(2).getFirst());", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You have used a type name in place of an array index.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-", "+      assertEquals(\"Should now be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You have used a type name in place of an array index.  Perhaps you meant to create \" +", "+                   \"a new instance of int\", ", "+                   errors.get(3).getFirst());", "-      assertEquals(\"Should be 6 errors\", 6, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot reference an array element with an index of type double.  Instead, you must use an int\", errors.getLast().getFirst());", "-", "-      ", "+      assertEquals(\"Should now be 5 errors\", 5, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot reference an array element with an index of type double.  Instead, you must use an int\",", "+                   errors.get(4).getFirst());   "]}], "num": 12445}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45c5e712646d92ce64990393d7dfd536", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dc27339db760c85318a1ed661a1e8f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "          public void testGetVariableAccessorListHelper()", "signatureAfterChange": "          public void testGetVariableAccessorListHelper()", "diff": ["-      ModifiersAndVisibility _publicMav = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"public\"});", "-      ModifiersAndVisibility _privateMav = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"private\"});", "+      ModifiersAndVisibility _publicMav = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"});", "+      ModifiersAndVisibility _privateMav = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"private\"});", "-      MethodData lone_star = new MethodData(\"lone_star\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], ", "-                                     new String[0], texas, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData lone_star = new MethodData(\"lone_star\", _publicMav, ", "+                                            new TypeParameter[0], SymbolData.INT_TYPE, ", "+                                            new VariableData[0], ", "+                                            new String[0], texas, ", "+                                            new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData armadillo = new MethodData(\"armadillo\", _privateMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], ", "-                                     new String[0], texas, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData armadillo = new MethodData(\"armadillo\", _privateMav, ", "+                                            new TypeParameter[0], ", "+                                            SymbolData.BOOLEAN_TYPE,", "+                                            new VariableData[0], ", "+                                            new String[0], texas, ", "+                                            new NullLiteral(SourceInfo.NO_INFO));", "-      //now add a field badRoad to Houston.  Its gettor returns a supertype of its type, so it is okay to call.  Will be returned.", "+      // Now add a field badRoad to Houston.  Its gettor returns a supertype of its type, so it is okay to call.  ", "+      // Will be returned.", "-      MethodData badRoad = new MethodData(\"badRoad\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], ", "-                                     new String[0], houston, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData badRoad = new MethodData(\"badRoad\", _publicMav,", "+                                          new TypeParameter[0],", "+                                          SymbolData.INT_TYPE,", "+                                          new VariableData[0], ", "+                                          new String[0], houston, ", "+                                          new NullLiteral(SourceInfo.NO_INFO));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3d3638ec66c262f2c0182bd9f143d6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyFullJavaVisitor.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "          public void testForAbstractMethodDef()", "signatureAfterChange": "          public void testForAbstractMethodDef()", "diff": ["-      MethodDef mdef = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+      MethodDef mdef = new AbstractMethodDef(SourceInfo.NONE, ", "-                                             new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                             new Word(SourceInfo.NO_INFO, \"methodName\"),", "+                                             new PrimitiveType(SourceInfo.NONE, \"int\"), ", "+                                             new Word(SourceInfo.NONE, \"methodName\"),", "-      _ibfv._symbolData.setMav(_abstractMav);", "+      _ibfv._enclosing.setMav(_abstractMav);", "-      mdef = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+      mdef = new AbstractMethodDef(SourceInfo.NONE, ", "-                                             new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                             new Word(SourceInfo.NO_INFO, \"MyInterface\"),", "+                                             new PrimitiveType(SourceInfo.NONE, \"int\"), ", "+                                             new Word(SourceInfo.NONE, \"MyInterface\"),", "-      AbstractMethodDef amd3 = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+      AbstractMethodDef amd3 = new AbstractMethodDef(SourceInfo.NONE, ", "-                                                     new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                     new Word(SourceInfo.NO_INFO, \"methodName2\"),", "+                                                     new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                                     new Word(SourceInfo.NONE, \"methodName2\"),", "-      assertTrue(\"The method def should be public\", _ibfv._symbolData.getMethods().get(1).hasModifier(\"public\"));", "+      assertTrue(\"The method def should be public\", _ibfv._enclosing.getMethods().get(1).hasModifier(\"public\"));", "-      AbstractMethodDef amd4 = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+      AbstractMethodDef amd4 = new AbstractMethodDef(SourceInfo.NONE, ", "-                                                     new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                     new Word(SourceInfo.NO_INFO, \"methodName3\"),", "+                                                     new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                                     new Word(SourceInfo.NONE, \"methodName3\"),", "-      AbstractMethodDef amd5 = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+      AbstractMethodDef amd5 = new AbstractMethodDef(SourceInfo.NONE, ", "-                                                     new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                     new Word(SourceInfo.NO_INFO, \"methodName4\"),", "+                                                     new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                                     new Word(SourceInfo.NONE, \"methodName4\"),"]}], "num": 10831}
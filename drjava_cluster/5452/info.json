{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93c1c40cfaacf6bb89400e3ab45d5931", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21f8338f4557a6c87bb97e68d8454c48", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 309, "signatureBeforeChange": "   public static <T1, T2, T3> Predicate3<T1, T2, T3>      asPredicate(final Lambda3<? super T1, ? super T2, ? super T3, ? extends Boolean> lambda)", "signatureAfterChange": "   public static <T1, T2, T3>      Predicate3<T1, T2, T3> asPredicate(Lambda3<? super T1, ? super T2, ? super T3, ? extends Boolean> lambda)", "diff": ["-  /** @return  A predicate based on an input that acts as a predicate but is not typed as one */", "-  public static <T1, T2, T3> Predicate3<T1, T2, T3> ", "-    asPredicate(final Lambda3<? super T1, ? super T2, ? super T3, ? extends Boolean> lambda) {", "-    return new Predicate3<T1, T2, T3>() { ", "-      public Boolean value(T1 arg1, T2 arg2, T3 arg3) { return lambda.value(arg1, arg2, arg3); }", "-    };", "-  }", "+  /** Create a predicate based on an input that acts as a predicate but is not typed as one. */", "+  public static <T1, T2, T3> ", "+    Predicate3<T1, T2, T3> asPredicate(Lambda3<? super T1, ? super T2, ? super T3, ? extends Boolean> lambda) {", "+    return new LambdaPredicate3<T1, T2, T3>(lambda);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73323e5aa588a7c6079423d9e2b4049", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 306, "signatureBeforeChange": "   public static <T1, T2> Predicate2<T1, T2>      asPredicate(final Lambda2<? super T1, ? super T2, ? extends Boolean> lambda)", "signatureAfterChange": "   public static <T1, T2> Predicate2<T1, T2> asPredicate(Lambda2<? super T1, ? super T2, ? extends Boolean> lambda)", "diff": ["-  /** @return  A predicate based on an input that acts as a predicate but is not typed as one */", "-  public static <T1, T2> Predicate2<T1, T2> ", "-    asPredicate(final Lambda2<? super T1, ? super T2, ? extends Boolean> lambda) {", "-    return new Predicate2<T1, T2>() { ", "-      public Boolean value(T1 arg1, T2 arg2) { return lambda.value(arg1, arg2); }", "-    };", "-  }", "+  /** Create a predicate based on an input that acts as a predicate but is not typed as one. */", "+  public static <T1, T2> Predicate2<T1, T2> asPredicate(Lambda2<? super T1, ? super T2, ? extends Boolean> lambda) {", "+    return new LambdaPredicate2<T1, T2>(lambda);", "+  }"]}], "num": 5452}
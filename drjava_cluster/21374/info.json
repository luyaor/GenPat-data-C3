{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e999442875ea0e06b24eec00ad6d551e", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b71bc91cd3b4792acb761e6f2d873f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "8c59b6d09078dbcf117925bc686cacee46ca999f", "commitAfterChange": "f8e25255cc9b1c52f4c1874e15c63efdafe32091", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     @Override public Type visit(ReferenceTypeName node)", "signatureAfterChange": "     @Override public Type visit(ReferenceTypeName node)", "diff": ["-        catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "+        catch (AmbiguousNameException e) {", "+          setErrorStrings(node, name);", "+          throw new ExecutionError(\"ambiguous.name\", node);", "+        }", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, name);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }", "+        String nextId = ids.next().image();", "-          ClassType memberType = ts.lookupClass(t, ids.next().image(), IterUtil.<Type>empty(), context.accessModule());", "+          ClassType memberType = ts.lookupClass(t, nextId, IterUtil.<Type>empty(), context.accessModule());", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, nextId);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22b7de15d66ba778f9f43dcfb4acd07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "8c59b6d09078dbcf117925bc686cacee46ca999f", "commitAfterChange": "f8e25255cc9b1c52f4c1874e15c63efdafe32091", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     @Override public Type visit(GenericReferenceTypeName node)", "signatureAfterChange": "     @Override public Type visit(GenericReferenceTypeName node)", "diff": ["-        catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "+        catch (AmbiguousNameException e) {", "+          setErrorStrings(node, name);", "+          throw new ExecutionError(\"ambiguous.name\", node);", "+        }", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, name);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }", "+        String nextId = ids.next().image();", "-          ClassType memberType = ts.lookupClass(t, ids.next().image(), targs, context.accessModule());", "+          ClassType memberType = ts.lookupClass(t, nextId, targs, context.accessModule());", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, nextId);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }"]}], "num": 21374}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c766a5fa594421abbd4a84e85f0ed165", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f23f542b3ab6a1f4510ca075e59628f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "17285283461a98a54216b38ffd842a9ade691a61", "commitAfterChange": "c5c5f6e584e52b0f1a2d2a9448693aba4f7f3980", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected ObjectFieldAccess _getObjectFieldAccessForField(String field, Context context)", "signatureAfterChange": "   protected ObjectFieldAccess _getObjectFieldAccessForField(String field, Context context)", "diff": ["-    for (int i = 0; i <= numDollars; i++) {          ", "-      expr = _buildObjectFieldAccess(i, numDollars);", "-      expr = new ObjectFieldAccess(expr, field);", "+    Expression newExpr = null;", "+    ", "+    // Check if this has an anonymous inner class", "+    if (hasAnonymous(_thisClassName)) { ", "+      // Get the class", "+      Class c;", "-        // the type checker will tell us if it's a field", "-        tc.visit((ObjectFieldAccess)expr);", "-        return (ObjectFieldAccess)expr;", "+        c = context.lookupClass(_thisClassName);", "-      catch (ExecutionError e2) {", "-        // do nothing, try an outer class", "+      catch (ClassNotFoundException e) {", "+        throw new UnexpectedException (e);", "+      }", "+      Field[] fields = c.getDeclaredFields();    ", "+      int numToWalk;", "+      String outerClassName = null;", "+      // Check for a field that begins with this$", "+      for (int i = 0; i < fields.length; i++) {", "+        if (fields[i].getName().startsWith(\"this$\")) {", "+          String fieldName = fields[i].getName();", "+          int lastIndex = fieldName.lastIndexOf(\"$\");", "+          numDollars = Integer.valueOf(fieldName.substring(lastIndex+1, fieldName.length())).intValue() + 1;", "+          break;", "+        }", "+    for (int i = 0; i <= numDollars; i++) {          ", "+      expr = _buildObjectFieldAccess(i, numDollars);", "+      newExpr = new ObjectFieldAccess(expr, field);", "+      try {", "+        // the type checker will tell us if it's a field", "+        tc.visit((ObjectFieldAccess)newExpr);", "+        return (ObjectFieldAccess)newExpr;", "+      }", "+      catch (ExecutionError e) {", "+        // try concatenating \"val$\" to the beginning of field", "+        newExpr = new ObjectFieldAccess(expr, \"val$\" + field);", "+        try {", "+          // the type checker will tell us if it's a field", "+          tc.visit((ObjectFieldAccess)newExpr);", "+          return (ObjectFieldAccess)newExpr;", "+        }", "+        catch (ExecutionError e2) {", "+          // do nothing, try an outer class", "+        }", "+      }", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9f0d5164ef9460d477bde054dbc5a38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "17285283461a98a54216b38ffd842a9ade691a61", "commitAfterChange": "c5c5f6e584e52b0f1a2d2a9448693aba4f7f3980", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["+            if (hasAnonymous(outerRt)) {", "+              // We don't know the appropriate this$N to look for so we have to", "+              // search for a field that begins with this$.", "+              List fields = outerRt.allFields();", "+              Iterator iter = fields.iterator();", "+              while (iter.hasNext()) {", "+                Field f = (Field)iter.next();", "+                String name = f.name();", "+                if (name.startsWith(\"this$\")) {", "+                  int lastIndex = name.lastIndexOf(\"$\");", "+                  outerIndex = Integer.valueOf(name.substring(lastIndex+1, name.length())).intValue();", "+                  break;", "+                }", "+              }", "+            }", "+            if (field == null) {", "+              // Try concatenating \"val$\" to the beginning of the field in", "+              // case it's a final local variable of the outer class", "+              field = outerRt.fieldByName(\"val$\" + currName);", "+            }", "+            ", "+              if (outer == null) {", "+                // We're probably in the constructor and this$N has", "+                // not yet been initialized. We can't do anything, so just", "+                // break display no value.", "+                break;", "+              }", "-              if (field == null) {", "-                // Enter the loop again with the next outer enclosing class", "-                outerIndex--;", "-                outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+              if (field == null) {  ", "+                // Try concatenating \"val$\" to the beginning of the field in", "+                // case it's a final local variable of the outer class", "+                field = outerRt.fieldByName(\"val$\" + currName);", "+                ", "+                if (field == null) {", "+                  // Enter the loop again with the next outer enclosing class", "+                  outerIndex--;", "+                  outerThis = outerRt.fieldByName(\"this$\" + outerIndex);                  ", "+                }"]}], "num": 15162}
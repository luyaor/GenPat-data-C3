{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bef8931cde5aca839894bcfb7819e1f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "247ff2bbef331d4c93ff0c3ae47532a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 121, "signatureBeforeChange": "          public void testForSourceFile()", "signatureAfterChange": "          public void testForSourceFile()", "diff": ["-      ClassDef cd = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Awesome\"),", "+      ClassDef cd = new ClassDef(SourceInfo.NO_INFO, PUBLIC_MAV, new Word(SourceInfo.NO_INFO, \"Awesome\"),", "-      ClassDef cd2 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Gnarly\"),", "+      ClassDef cd2 = new ClassDef(SourceInfo.NO_INFO, PUBLIC_MAV, new Word(SourceInfo.NO_INFO, \"Gnarly\"),", "-      InterfaceDef id = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, ", "+      InterfaceDef id = new InterfaceDef(SourceInfo.NO_INFO, PUBLIC_MAV, ", "-      assertTrue(\"_classNamesInThisFile should contain the two ClassDefs.\", ", "-                 testLLVisitor._classNamesInThisFile.contains(\"Awesome\"));", "-      assertTrue(\"_classNamesInThisFile should contain the two ClassDefs.\", ", "-                 testLLVisitor._classNamesInThisFile.contains(\"Gnarly\"));", "+      assertTrue(\"_classesInThisFile should contain the two ClassDefs.\", ", "+                 testLLVisitor._classesInThisFile.contains(\"Awesome\"));", "+      assertTrue(\"_classesInThisFile should contain the two ClassDefs.\", ", "+                 testLLVisitor._classesInThisFile.contains(\"Gnarly\"));", "-      assertTrue(\"_classNamesInThisFile should contain the InterfaceDef\", ", "-                 testLLVisitor._classNamesInThisFile.contains(\"NiftyWords\"));", "-      assertTrue(\"_classesToBeParsed should contain the two ClassDefs.\", ", "-                 testLLVisitor._classesToBeParsed.containsKey(\"Awesome\"));", "-      assertTrue(\"_classesToBeParsed should contain the two ClassDefs.\", ", "-                 testLLVisitor._classesToBeParsed.containsKey(\"Gnarly\"));", "-      assertTrue(\"_classesToBeParsed should contain the InterfaceDef\", ", "-                 testLLVisitor._classesToBeParsed.containsKey(\"NiftyWords\"));", "+      assertTrue(\"_classesInThisFile should contain the InterfaceDef\", ", "+                 testLLVisitor._classesInThisFile.contains(\"NiftyWords\"));", "+      assertTrue(\"_classesInThisFile should contain the two ClassDefs.\", ", "+                 testLLVisitor._classesInThisFile.contains(\"Awesome\"));", "+      assertTrue(\"_classesInThisFile should contain the two ClassDefs.\", ", "+                 testLLVisitor._classesInThisFile.contains(\"Gnarly\"));", "+      assertTrue(\"_classesInThisFile should contain the InterfaceDef\", ", "+                 testLLVisitor._classesInThisFile.contains(\"NiftyWords\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aad39cc7cc27942ee8ab105b4309c319", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "          public void testForTypeOnly()", "signatureAfterChange": "          public void testForTypeOnly()", "diff": ["-      Type t = new PrimitiveType(SourceInfo.NO_INFO, \"double\");", "+      Type t = new PrimitiveType(SourceInfo.NONE, \"double\");", "-      t = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Adam\", new Type[0]);", "+      t = new ClassOrInterfaceType(SourceInfo.NONE, \"Adam\", new Type[0]);", "-      t = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Adam.Wulf\", new Type[0]);", "+      t = new ClassOrInterfaceType(SourceInfo.NONE, \"Adam.Wulf\", new Type[0]);", "-      t = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Adam.Wulf\", new Type[0]);", "+      t = new ClassOrInterfaceType(SourceInfo.NONE, \"Adam.Wulf\", new Type[0]);", "+      String tcSD = _cbbtc._symbolData.getName();", "-      assertEquals(\"The error message should be correct\", \"The class or interface Adam.Wulf is private and cannot be accessed from \" + _cbbtc._symbolData.getName(),", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The class or interface Adam.Wulf in Adam.Wulf is private and cannot be accessed from \" + tcSD,", "-      t = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Adam.Wulf\", new Type[0]);", "+      t = new ClassOrInterfaceType(SourceInfo.NONE, \"Adam.Wulf\", new Type[0]);", "-      assertEquals(\"The error message should be correct\", \"The class or interface Adam is private and cannot be accessed from \" + _cbbtc._symbolData.getName(),", "+      assertEquals(\"The error message should be correct\", ", "+                     \"The class or interface Adam in Adam is private and cannot be accessed from \" + tcSD,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c888531babcc4cd75bd0cec6f94902a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "          public void testForTypeOnly()", "signatureAfterChange": "          public void testForTypeOnly()", "diff": ["-      Type t = new PrimitiveType(SourceInfo.NO_INFO, \"double\");", "+      Type t = new PrimitiveType(SourceInfo.NONE, \"double\");", "-      t = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Adam\", new Type[0]);", "+      t = new ClassOrInterfaceType(SourceInfo.NONE, \"Adam\", new Type[0]);", "-      t = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Adam.Wulf\", new Type[0]);", "+      t = new ClassOrInterfaceType(SourceInfo.NONE, \"Adam.Wulf\", new Type[0]);", "-      t = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Adam.Wulf\", new Type[0]);", "+      t = new ClassOrInterfaceType(SourceInfo.NONE, \"Adam.Wulf\", new Type[0]);", "+      String tcSDName =  _ibbtc._symbolData.getName();", "-                   \"The class or interface Adam.Wulf is private and cannot be accessed from \" + ", "-                     _ibbtc._symbolData.getName(),", "+                   \"The class or interface Adam.Wulf in Adam.Wulf is private and cannot be accessed from \" + tcSDName,", "-      t = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Adam.Wulf\", new Type[0]);", "+      t = new ClassOrInterfaceType(SourceInfo.NONE, \"Adam.Wulf\", new Type[0]);", "-                   \"The class or interface Adam is private and cannot be accessed from \" + _ibbtc._symbolData.getName(),", "+                   \"The class or interface Adam in Adam is private and cannot be accessed from \" + tcSDName,"]}], "num": 20251}
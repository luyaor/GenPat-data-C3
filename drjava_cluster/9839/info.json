{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cc4e38c5f834672dc24d235317dfaa2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8e89dda3cc9549963e502208dbbfe9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testParen() throws BadLocationException", "signatureAfterChange": "      public void testParen() throws BadLocationException", "diff": ["-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace\", !_rule.testApplyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", _rule.testApplyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", _rule.testApplyRule(_doc, 30, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5ab86eaecde324e95a3d2054d68fa4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsCurlyTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testOnlyCurly() throws BadLocationException", "signatureAfterChange": "      public void testOnlyCurly() throws BadLocationException", "diff": ["-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 28, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 30, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 28, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 30, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 18, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 19, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.testApplyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.testApplyRule(_doc, 18, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.testApplyRule(_doc, 19, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.testApplyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Close brace immediately after open brace.\", _rule.applyRule(_doc, 12, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Close brace immediately after open brace.\", _rule.testApplyRule(_doc, 12, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Close brace immediately after open brace.\", _rule.applyRule(_doc, 29, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Close brace immediately after open brace.\", _rule.testApplyRule(_doc, 29, Indenter.IndentReason.OTHER));"]}], "num": 9839}
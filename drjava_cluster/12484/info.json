{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "493cef1d2cb92925511b21ee86fedf53", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "637fd55bb7ae357beaa82868070e9886", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelListTest.java", "commitBeforeChange": "4cf68dc70458288095c944d37276893b11daf353", "commitAfterChange": "c22ae4a2b42306ce89775aaf2a5b300676337b0d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "    public void testCurrent()", "signatureAfterChange": "    public void testCurrent()", "diff": ["-    try {", "-      itFull.current();", "-      fail(\"Current call in initial position did not fail.\");", "-    }", "-    catch (RuntimeException e) {", "-      //This call was supposed to throw an exception", "-            assertEquals(\"current() throws exception when at end\",", "-                   e.getMessage(),", "-                   \"Attempt to call current on an iterator in the initial position\");", "-    }", "-    try {", "-      itFull.current();", "-      fail(\"Current call in final position did not fail.\");", "-    }", "-    catch (RuntimeException e) {", "-      //This call was supposed to throw an exception", "-      assertEquals(\"current() throws exception when at end\",", "-                   e.getMessage(),", "-                   \"Attempt to call current on an iterator in the final position\");", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef785af52e2d73a42b6959b3af0dbe6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "81f7bc68ef7285bacd5689ea0a54ea5647d9a1d8", "commitAfterChange": "12384109e03448701c98d404f37be617f6e32fee", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "diff": ["-      // invokeMethod would throw an ObjectCollectedException if the StringReference", "-      // declared by _vm.mirrorOf(name) had been garbage collected before", "-      // invokeMethod could execute. This happened infrequently so by trying this", "-      // multiple times, the chance of failure each time should be acceptably low.", "-      ", "-      int tries = 0;", "-      while (tries < MAXINVOKETRIES) {", "-        try {", "-          Value v = _getValueOfLocalVariable(localVar, threadRef);", "-          frame = threadRef.frame(0);", "-          frame.setValue(localVar, v);", "-          break;", "-        }", "-        catch (ObjectCollectedException oce) {", "-          if (printMessages) System.out.println(\"Got ObjectCollectedException\");", "-          tries++;", "-        }", "-        catch (ClassNotLoadedException cnle) {", "-          printMessage(\"Could not update the value of '\" + localVar.name() + \"' (class not loaded)\");", "-          break;", "-        }", "-        catch (InvalidTypeException ite) {", "-          printMessage(\"Could not update the value of '\" + localVar.name() + \"' (invalid type exception)\");", "-          break;", "-        }", "+      try {", "+        Value v = _getValueOfLocalVariable(localVar, threadRef);", "+        frame = threadRef.frame(0);", "+        frame.setValue(localVar, v);", "-      if (tries >= MAXINVOKETRIES) {", "-        throw new DebugException(\"The value of the variable: \" + localVar.name() + \" could not be obtained from interpreterJVM\");", "+      catch (ClassNotLoadedException cnle) {", "+        printMessage(\"Could not update the value of '\" + localVar.name() + \"' (class not loaded)\");", "+      }", "+      catch (InvalidTypeException ite) {", "+        printMessage(\"Could not update the value of '\" + localVar.name() + \"' (invalid type exception)\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f763c342dff5ccf2ea55880aa6d8291", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "   private void _createDebugger()", "signatureAfterChange": "       private void _setupDebugger()", "diff": ["-   */", "-  private void _createDebugger() {", "-    try {", "-      _debugger = new edu.rice.cs.drjava.model.debug.jpda.JPDADebugger(this); // TODO: load dynamically", "-      _jvm.setDebugModel(_debugger.callback());", "+  private void _setupDebugger() {", "+    _jvm.setDebugModel(_debugger.callback());", "-      // add listener to set the project file to \"changed\" when a breakpoint or watch is added, removed, or changed", "-      getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "-        public void regionAdded(final Breakpoint bp, int index) { setProjectChanged(true); }", "-        public void regionChanged(final Breakpoint bp, int index) { setProjectChanged(true); }", "-        public void regionRemoved(final Breakpoint bp) { ", "-          try {", "-            getDebugger().removeBreakpoint(bp);", "-          } catch(DebugException de) { /* just ignore it */ }", "-          setProjectChanged(true);", "-          }", "-      });", "-      getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {", "-        public void regionAdded(DocumentRegion r, int index) { setProjectChanged(true); }", "-        public void regionChanged(DocumentRegion r, int index) { setProjectChanged(true); }", "-        public void regionRemoved(DocumentRegion r) { setProjectChanged(true); }", "-      });", "+    // add listener to set the project file to \"changed\" when a breakpoint or watch is added, removed, or changed", "+    getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+      public void regionAdded(final Breakpoint bp, int index) { setProjectChanged(true); }", "+      public void regionChanged(final Breakpoint bp, int index) { setProjectChanged(true); }", "+      public void regionRemoved(final Breakpoint bp) { ", "+        try {", "+          getDebugger().removeBreakpoint(bp);", "+        } catch(DebugException de) { /* just ignore it */ }", "+        setProjectChanged(true);", "+      }", "+    });", "+    getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {", "+      public void regionAdded(DocumentRegion r, int index) { setProjectChanged(true); }", "+      public void regionChanged(DocumentRegion r, int index) { setProjectChanged(true); }", "+      public void regionRemoved(DocumentRegion r) { setProjectChanged(true); }", "+    });", "+    ", "+    _debugger.addListener(new DebugListener() {", "+      public void watchSet(final DebugWatchData w) { setProjectChanged(true); }", "+      public void watchRemoved(final DebugWatchData w) { setProjectChanged(true); }    ", "-      _debugger.addListener(new DebugListener() {", "-        public void watchSet(final DebugWatchData w) { setProjectChanged(true); }", "-        public void watchRemoved(final DebugWatchData w) { setProjectChanged(true); }    ", "-        ", "-        public void regionAdded(final Breakpoint bp, int index) { }", "-        public void regionChanged(final Breakpoint bp, int index) { }", "-        public void regionRemoved(final Breakpoint bp) { }", "-        public void debuggerStarted() { }", "-        public void debuggerShutdown() { }", "-        public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) { }", "-        public void breakpointReached(final Breakpoint bp) { }", "-        public void stepRequested() { }", "-        public void currThreadSuspended() { }", "-        public void currThreadResumed() { }", "-        public void threadStarted() { }", "-        public void currThreadDied() { }", "-        public void nonCurrThreadDied() {  }", "-        public void currThreadSet(DebugThreadData thread) { }", "-      });", "-    }", "-    catch( NoClassDefFoundError ncdfe ) {", "-      // JPDA not available, so we won't use it.", "-      _debugger = NoDebuggerAvailable.ONLY;", "-    }", "-    catch( UnsupportedClassVersionError ucve ) {", "-      // Wrong version of JPDA, so we won't use it.", "-      _debugger = NoDebuggerAvailable.ONLY;", "-    }", "-    catch( Throwable t ) {", "-      // Something went wrong in initialization, don't use debugger", "-      _debugger = NoDebuggerAvailable.ONLY;", "-    }", "+      public void regionAdded(final Breakpoint bp, int index) { }", "+      public void regionChanged(final Breakpoint bp, int index) { }", "+      public void regionRemoved(final Breakpoint bp) { }", "+      public void debuggerStarted() { }", "+      public void debuggerShutdown() { }", "+      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) { }", "+      public void breakpointReached(final Breakpoint bp) { }", "+      public void stepRequested() { }", "+      public void currThreadSuspended() { }", "+      public void currThreadResumed() { }", "+      public void threadStarted() { }", "+      public void currThreadDied() { }", "+      public void nonCurrThreadDied() {  }", "+      public void currThreadSet(DebugThreadData thread) { }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c99a58deb84c2e46447d7850d36102", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-    int i = _docs.indexOf(doc);", "-    if( i == -1 ) {", "-      throw new IllegalArgumentException(\"Document \" + doc + \" not found in Document Navigator\");", "-    }", "-    else {", "-      INavigatorItem tbr = _docs.remove(i);", "-      _docs.add(doc);", "-      this.setListData(_docs);", "+    synchronized (_model) {", "+      removeDocument(doc);", "+      addDocument(doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b6bc2ba441752b7cbc4376eff8a154", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "77b9ea56fffd44f6aad237da0f14f4908138204c", "commitAfterChange": "701cda038bdbb4505f738d5f2728e5888b8608b3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "    private void _print()", "signatureAfterChange": "   abstract protected void _print();", "diff": ["-  private void _print() {", "-    try {", "-      _document.print();", "-    }", "-    catch (FileMovedException fme) {", "-      _mainFrame._showFileMovedError(fme);", "-    }", "-    catch (PrinterException e) {", "-      _showError(e, \"Print Error\", \"An error occured while printing.\");", "-    }", "-    catch (BadLocationException e) {", "-      _showError(e, \"Print Error\", \"An error occured while printing.\");", "-    }", "-  }", "+  /** Prints the document being previewed */", "+  abstract protected void _print();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee9fb94159a3c29ea0be9362bb422ceb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JDKToolsLibrary.java", "commitBeforeChange": "f9f0ab44b47660447cfff11e665a39c76a7f44d4", "commitAfterChange": "45133bcfe62104f64c54f0a9dd6f0b7d50269b38", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "    public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "signatureAfterChange": "      public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "diff": ["-  } ", "-    CompilerInterface compiler = NoCompilerAvailable.ONLY;", "-    String compilerAdapter = null;", "-    ", "-    // force DrJava to try to load the javac main class;", "-    // if tools.jar isn't on the class path, this will fail", "-    // having tools.jar on the class path is not sufficient", "-    try {", "-      ReflectUtil.class.getClassLoader().loadClass(compilerMainClass(JavaVersion.CURRENT));", "-      compilerAdapter = adapterForCompiler(version.majorVersion());", "-    }", "-    catch(ClassNotFoundException e) { /* keep compilerAdapter == null */ }", "-    catch(UnsupportedClassVersionError e) { /* keep compilerAdapter == null */ }", "-    catch(RuntimeException e) { /* keep compilerAdapter == null */ }  ", "+    CompilerInterface compiler = NoCompilerAvailable.ONLY;", "+    String compilerAdapter = adapterForCompiler(version.majorVersion());"]}], "num": 12484}
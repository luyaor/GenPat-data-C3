{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ce0c770dd70d5e6f7fc64d1b725d1aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42776d2d9325c1f5600a3a1acf59b106", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "98f0c27d2704f53c27c12dba8736793eeeac44cf", "commitAfterChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": "   protected void updateText(final boolean finish)", "signatureAfterChange": "   protected void updateText()", "diff": ["-  protected void updateText(final boolean finish) {", "-    Utilities.invokeLater(new Runnable() {", "-      public void run() {", "-        // MainFrame.LOG.log(\"updateText\");", "-        if (((_is!=null) || (_erris!=null)) &&", "-            (_updateNowButton.isEnabled())) {", "-          _updateNowButton.setEnabled(false);", "-          int changeCount = 0;", "-          StringBuilder sb = new StringBuilder(_textArea.getText());", "-          // MainFrame.LOG.log(\"\\tgot text\");", "-          try {", "-            // MainFrame.LOG.log(\"\\treading...\");", "-            // abort after reading 5 blocks (50 kB), read more later", "-            // don't block the event thread any longer", "-            while((_is!=null) &&", "-                  (_erris!=null) &&", "-                  (changeCount<=BUFFER_READS_PER_TIMER) &&", "-                  (_erris!=null) &&", "-                  ((_red = _is.read(_buf))>=0)) {", "-              // MainFrame.LOG.log(\"\\tread \"+_red+\" bytes\");", "-              sb.append(new String(_buf, 0, _red));", "-              if (finish) { changeCount = 1; } else { ++changeCount; }", "-            }", "-            if (_is==null) { sb.append(\"\\nInput stream suddenly became null.\"); }", "-            if (_erris==null) { sb.append(\"\\nError input stream suddenly became null.\"); }", "-            while((changeCount<=BUFFER_READS_PER_TIMER) &&", "-                  (_erris!=null) &&", "-                  ((_errred = _erris.read(_errbuf))>=0)) {", "-              // MainFrame.LOG.log(\"\\tread \"+_red+\" bytes\");", "-              sb.append(new String(_errbuf, 0, _errred));", "-              if (finish) { changeCount = 1; } else { ++changeCount; }", "-            }", "-            if ((_red>0) && (changeCount<BUFFER_READS_PER_TIMER)) {", "-              sb.append(new String(_buf, 0, _red));", "-              if (finish) { changeCount = 1; } else { ++changeCount; }", "-            }", "-            if ((_errred>0) && (changeCount<BUFFER_READS_PER_TIMER)) {", "-              sb.append(new String(_errbuf, 0, _errred));", "-              if (finish) { changeCount = 1; } else { ++changeCount; }", "-            }", "-          }", "-          catch(IOException ioe) {", "-            // MainFrame.LOG.log(\"\\taborted\");", "-            // stop polling", "-            sb.append(\"\\n\\nI/O Exception reading from process\\n\");", "-            if (finish) { changeCount = 1; } else { ++changeCount; }", "-            abortActionPerformed(null);", "-          }", "-          finally {", "-            if (changeCount>0) {", "-              // MainFrame.LOG.log(\"\\tsetting text\");", "-              _textArea.setText(sb.toString());", "-              int maxLines = edu.rice.cs.drjava.DrJava.getConfig().", "-                getSetting(edu.rice.cs.drjava.config.OptionConstants.FOLLOW_FILE_LINES);", "-              if (maxLines>0) { // if maxLines is 0, buffer is unlimited", "-                try {", "-                  int start = 0;", "-                  int len = _textArea.getText().length();", "-                  int curLines = _textArea.getLineCount();", "-                  if (curLines>maxLines) {", "-                    start = _textArea.getLineStartOffset(curLines-maxLines);", "-                    len -= start;", "-                    sb = new StringBuilder(_textArea.getText(start,len));", "-                    _textArea.setText(sb.toString());", "-                  }", "-                }", "-                catch(javax.swing.text.BadLocationException e) { /* ignore, do not truncate */ }", "-              }", "-              // MainFrame.LOG.log(\"\\ttext length = \"+s.length());", "-            }", "-          }", "-        // MainFrame.LOG.log(\"\\tupdating buttons\");", "-        updateButtons();", "-    });", "+  /** Update the text area with the text that was read. */", "+  protected void updateText() {", "+    // MainFrame.LOG.log(\"updateText\");", "+    if (_updateNowButton.isEnabled()) {", "+      try {", "+        if ((_is!=null) && (_p!=null) &&", "+            (_is.ready()) &&", "+            (_p.getInputStream().available()>0)) { readText(false); }", "+      }", "+      catch(IOException ioe) {", "+        _sb.append(\"\\n\\nI/O Exception reading from process\\n\");", "+        abortActionPerformed(null);", "+        ++_changeCount;", "+      }", "+      if (_changeCount>0) {", "+        _changeCount = 0;", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            // MainFrame.LOG.log(\"\\tsetting text\");", "+            _textArea.setText(_sb.toString());", "+            int maxLines = edu.rice.cs.drjava.DrJava.getConfig().", "+              getSetting(edu.rice.cs.drjava.config.OptionConstants.FOLLOW_FILE_LINES);", "+            if (maxLines>0) { // if maxLines is 0, buffer is unlimited", "+              try {", "+                int start = 0;", "+                int len = _textArea.getText().length();", "+                int curLines = _textArea.getLineCount();", "+                if (curLines>maxLines) {", "+                  start = _textArea.getLineStartOffset(curLines-maxLines);", "+                  len -= start;", "+                  _sb = new StringBuilder(_textArea.getText(start,len));", "+                  _textArea.setText(_sb.toString());", "+                }", "+              }", "+              catch(javax.swing.text.BadLocationException e) { /* ignore, do not truncate */ }", "+            }", "+            // MainFrame.LOG.log(\"\\ttext length = \"+s.length());", "+          }", "+        });", "+      }", "+      // MainFrame.LOG.log(\"\\tupdating buttons\");", "+      updateButtons();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58c24200739fcdac7fc5b3899e9411cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ClassAndInterfaceFinder.java", "commitBeforeChange": "816e415ebd3619964409d5b7c5a5d20fa993a7b5", "commitAfterChange": "79e38a44be6c4c379730bdfb5468461330077836", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public String getClassName()", "signatureAfterChange": "   public String getClassName()", "diff": ["-  public String getClassName(){", "-    try{", "+   */", "+  public String getClassName() { return getName(false); }", "-      ", "-      FileReader fr = new FileReader(_file);", "-      StreamTokenizer tokenizer = new StreamTokenizer(fr);", "-      tokenizer.slashSlashComments(true);", "-      tokenizer.slashStarComments(true);", "-      tokenizer.lowerCaseMode(false);", "-      tokenizer.wordChars('_','_');", "-      tokenizer.wordChars('.','.');", "-      ", "-      // find the \"class\" or \"package\" keyword", "-      do{", "-      }while(!foundClassOrInterfaceKeyword(tokenType, tokenizer) && ", "-             !foundPackageKeyword(tokenType, tokenizer));", "-      // find the name of the class or package", "-      do{", "-      }while(!(tokenType == StreamTokenizer.TT_WORD || tokenType == StreamTokenizer.TT_EOF));", "-      ", "-      if(keyword.equals(\"class\")){", "-        // we have just a class defined without a package, so return;", "-        return tokenizer.sval;", "-      }else", "-      if(keyword.equals(\"interface\")){", "-        // we have just an interface without a package, so return;", "-        return tokenizer.sval;", "-      }else", "-      if(keyword.equals(\"package\")){", "-        package_name = tokenizer.sval;", "-      }", "-      do{", "-        tokenType = tokenizer.nextToken();", "-      }while(!foundClassOrInterfaceKeyword(tokenType, tokenizer));", "-      do{", "-        tokenType = tokenizer.nextToken();", "-      }while(!(tokenType == StreamTokenizer.TT_WORD || tokenType == StreamTokenizer.TT_EOF));", "-      if(tokenType != StreamTokenizer.TT_EOF){", "-        if(package_name.length() > 0){", "-          return package_name + \".\" + tokenizer.sval;", "-        }else{", "-          return tokenizer.sval;", "-        }", "-      }else{", "-        return \"\";      ", "-      }", "-    }catch(FileNotFoundException e){", "-      return \"\";", "-    }catch(IOException e){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d34e90ce04f019cc2287d98975799c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 411, "methodNumberAfterChange": 411, "signatureBeforeChange": "     public boolean canAbandonFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "     public boolean canAbandonFile(OpenDefinitionsDocument doc)", "diff": ["+      return _fileSaveHelper(doc, JOptionPane.YES_NO_CANCEL_OPTION);", "+    }", "-      int rc = JOptionPane.showConfirmDialog(MainFrame.this,", "-                                             text,", "-                                             \"Save \" + fname + \"?\",", "-                                             JOptionPane.YES_NO_CANCEL_OPTION);", "-            catch(IllegalStateException ise) {", "-              // Shouldn't happen because this file was just saved", "-              throw new UnexpectedException(ise);", "-            }", "-            catch(FileMovedException fme) { ", "-              // Shouldn't happend because this file was just saved", "-              throw new UnexpectedException(fme);", "-//              savedFilename = \"The current file\"; ", "-            }", "-//            rc = JOptionPane.showConfirmDialog(MainFrame.this,", "-//                                               savedFilename + ", "-//                                               \"  is now in the current project.\\n\" +", "-//                                               \"If you close it, it will be permanently removed \"+", "-//                                               \"from the project.\\n\" +", "-//                                               \"Do you still wish to close it.\",", "-//                                               \"Close Project File\",", "-//                                               JOptionPane.YES_NO_CANCEL_OPTION);", "-//            if (rc != JOptionPane.YES_OPTION)", "-//              return false;", "-//            else return true;", "-        case JOptionPane.CLOSED_OPTION:", "-        case JOptionPane.CANCEL_OPTION:", "-        default:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7a731fd8ec23a42a3c5a0ddef968835", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 23, "signatureBeforeChange": "    public static <K, V> Map.Entry<K, V> mapEntryForKey(final Map<K, V> map, final K key)", "signatureAfterChange": "     public Map<K, V> value()", "diff": ["+    private DefaultHashMapFactory() {}", "+    public Map<K, V> value() { return new HashMap<K, V>(); }", "-  public static <K, V> Map.Entry<K, V> mapEntryForKey(final Map<K, V> map, final K key) {", "-    return new Map.Entry<K, V>() {", "-      public K getKey() { return key; }", "-      public V getValue() { return map.get(key); }", "-      public V setValue(V value) { return map.put(key, value); }", "-      public boolean equals(Object o) {", "-        if (this == o) { return true; }", "-        else if (!(o instanceof Map.Entry<?, ?>)) { return false; }", "-        else {", "-          Map.Entry<?, ?> cast = (Map.Entry<?, ?>) o;", "-          if (key == null ? cast.getKey() == null : key.equals(cast.getKey())) {", "-            V val = map.get(key);", "-            return val == null ? cast.getValue() == null : val.equals(cast.getValue());", "-          }", "-          else { return false; }", "-        }", "-      }", "-      public int hashCode() {", "-        V val = map.get(key);", "-        return (key == null ? 0 : key.hashCode()) ^ (val == null ? 0 : val.hashCode());", "-      }", "-    };", "-  }"]}], "num": 24655}
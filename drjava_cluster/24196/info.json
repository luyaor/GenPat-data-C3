{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66765b07d41b9d6de048e7d0b7e00733", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "129a85b4b4339c6080bc9250dbf7a163", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/ScrollableListDialog.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   private ScrollableListDialog(Frame owner,                                 String dialogTitle,                                String leaderText,                                java.util.List<T> listItems,                                java.util.List<T> selItems,                                int messageType,                                int width,                                int height,                                Icon icon,                                boolean fitToScreen,                                java.util.List<JButton> buttons,                                boolean selectable)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   private ScrollableListDialog(Frame owner, String dialogTitle, String leaderText, List<T> listItems, List<T> selItems,                                int messageType, int width, int height, Icon icon, boolean fitToScreen,                                 List<JButton> buttons, boolean selectable)", "diff": ["-   */", "+    */", "-  private ScrollableListDialog(Frame owner, ", "-                               String dialogTitle,", "-                               String leaderText,", "-                               java.util.List<T> listItems,", "-                               java.util.List<T> selItems,", "-                               int messageType,", "-                               int width,", "-                               int height,", "-                               Icon icon,", "-                               boolean fitToScreen,", "-                               java.util.List<JButton> buttons,", "-                               boolean selectable) {", "+  private ScrollableListDialog(Frame owner, String dialogTitle, String leaderText, List<T> listItems, List<T> selItems,", "+                               int messageType, int width, int height, Icon icon, boolean fitToScreen, ", "+                               List<JButton> buttons, boolean selectable) {", "-    if (listItems == null) {", "-      throw new IllegalArgumentException(\"listItems cannot be null\");", "-    }", "+    if (listItems == null) throw new IllegalArgumentException(\"listItems cannot be null\");", "-    if (icon != null) {", "-      //use the user-provided icon", "+    if (icon != null) { //use the user-provided icon", "-    } else {", "-      //lookup the message-dependent icon", "+    } ", "+    else { //lookup the message-dependent icon", "-      if (messageIcon != null) {", "-       dialogIconLabel = new JLabel(messageIcon); ", "-      }", "+      if (messageIcon != null) dialogIconLabel = new JLabel(messageIcon); ", "-    if (dialogIconLabel != null) {", "-      leaderPanel.add(dialogIconLabel);", "-    }", "+    if (dialogIconLabel != null) leaderPanel.add(dialogIconLabel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210d5fe56d444b046bc08ae3c17fc02e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 310, "methodNumberAfterChange": 303, "signatureBeforeChange": "   private static <I extends FunctionInvocation, T extends FunctionInvocationCandidate<I>>       Iterable<T> bestMatches(Iterable<T> candidates)", "signatureAfterChange": "   private <F extends Function>       Iterable<FunctionInvocationCandidate<F>> bestInvocations(Iterable<F> functions,                                                                final Iterable<? extends Type> targs,                                                                final Iterable<? extends Expression> args,                                                                final Option<Type> expected)", "diff": ["-  private static <I extends FunctionInvocation, T extends FunctionInvocationCandidate<I>>", "-      Iterable<T> bestMatches(Iterable<T> candidates) {", "+  private <F extends Function>", "+      Iterable<FunctionInvocationCandidate<F>> bestInvocations(Iterable<F> functions,", "+                                                               final Iterable<? extends Type> targs,", "+                                                               final Iterable<? extends Expression> args,", "+                                                               final Option<Type> expected) {", "-    List<T> matches = new LinkedList<T>();", "-    for (T c : candidates) {", "+    Iterable<FunctionInvocationCandidate<F>> candidates = IterUtil.mapSnapshot(functions,", "+                                                                     new Lambda<F, FunctionInvocationCandidate<F>>() {", "+      public FunctionInvocationCandidate<F> value(F f) {", "+        return new FunctionInvocationCandidate<F>(f, targs, args, expected);", "+      }", "+    });", "+    List<FunctionInvocationCandidate<F>> matches = new LinkedList<FunctionInvocationCandidate<F>>();", "+    for (FunctionInvocationCandidate<F> c : candidates) {", "-      for (T c : candidates) {", "+      for (FunctionInvocationCandidate<F> c : candidates) {", "-      for (T c : candidates) {", "+      for (FunctionInvocationCandidate<F> c : candidates) {", "-    return CollectUtil.minList(matches, new Order<T>() {", "-      public boolean contains(T c1, T c2) {", "+    return CollectUtil.minList(matches, new Order<FunctionInvocationCandidate<F>>() {", "+      public boolean contains(FunctionInvocationCandidate<F> c1, FunctionInvocationCandidate<F> c2) {"]}], "num": 24196}
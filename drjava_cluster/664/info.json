{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3247393261897cb3a01b5e67fea3f0a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a9d425b7625a344d874cdf2c19b2acc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 31, "signatureBeforeChange": "    private synchronized void _stepHelper(int flag, boolean shouldNotify) throws DebugException", "signatureAfterChange": "   private synchronized void _stepHelper(int flag, boolean shouldNotify)     throws DebugException", "diff": ["-  private synchronized void _stepHelper(int flag, boolean shouldNotify) throws DebugException{", "-    if (!isReady() || (_suspendedThreads.size() <= 0)) return;", "+   */", "+  private synchronized void _stepHelper(int flag, boolean shouldNotify)", "+    throws DebugException", "+  {", "+    if (_suspendedThreads.size() <= 0) {", "+      throw new IllegalStateException(\"Cannot step if no threads are suspended.\");", "+    }", "-    if( printMessages ) System.out.println(\"About to peek...\");", "+    if (printMessages) System.out.println(\"About to peek...\");", "-    if( printMessages ) System.out.println(\"Stepping \" + thread.toString());", "+    if (printMessages) System.out.println(\"Stepping \" + thread.toString());", "-    _doCopyBack();", "+    _copyVariablesFromInterpreter();", "-    if( printMessages ) System.out.println(\"Deleting pending requests...\");", "+    if (printMessages) System.out.println(\"Deleting pending requests...\");", "-    // don't allow the creation of a new StepRequest if there's already one for", "-    // the current thread", "+    // If there's already a step request for the current thread, delete", "+    //  it first", "-        ", "-    if( printMessages ) System.out.println(\"Issued step request\");", "+    ", "+    if (printMessages) System.out.println(\"Issued step request\");", "-    if( shouldNotify ){", "+    if (shouldNotify) {", "-    if( printMessages ) System.out.println(\"About to resume\");", "-    resumeNoCopy();", "+    if (printMessages) System.out.println(\"About to resume\");", "+    _resumeWithoutCopyingVariables();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84023d185e21e9141f77cfd039d31608", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "e7fa83968a0076b95166203c3ff9a5bddde8dfee", "commitAfterChange": "b2bccf49a3d470addd7a5aec1fd2eaf00accbe3b", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": "   public Expression makePrimitive(Expression e) throws UnsupportedConversionException", "signatureAfterChange": "   public Expression makePrimitive(Expression e) throws UnsupportedConversionException", "diff": ["-    //       be unboxed.  We allow it here, because that seems like the correct approach.", "+    //       be unboxed.  We allow it here unless the type is null, because that seems", "+    //       like the correct approach.", "+    else if (isSubtype(t, NULL)) { throw new UnsupportedConversionException(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b9c416fef41ab0b5eab037e3a48ba9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public synchronized void startup() throws DebugException", "signatureAfterChange": "   public synchronized void startup() throws DebugException", "diff": ["+      ", "+      ", "+      // Listen for events when threads die", "-      EventHandler eventHandler = new EventHandler(this, _vm);", "+      ", "+      // Listen for events from JPDA in a new thread", "+      EventHandlerThread eventHandler = new EventHandlerThread(this, _vm);", "+    }", "+    ", "+    else {", "+      // Already started", "+      throw new IllegalStateException(\"Debugger has already been started.\");"]}], "num": 664}
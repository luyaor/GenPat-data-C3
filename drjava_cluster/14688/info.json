{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "200b2f3a2306feeb9d9e051bd281e3f1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eeef0b955a7215f0edc421ca83be183", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testInfiniteLoop() throws Exception", "signatureAfterChange": "   public void testInfiniteLoop() throws Exception", "diff": ["-    CompileShouldSucceedListener listener = new CompileShouldSucceedListener(false);", "-    TestListener listener2 = new TestListener() {", "-      public void junitStarted() {", "-//        assertEquals(\"Documents don't match\", doc, odds.get(0));", "-        junitStartCount++;", "-      }", "+    JUnitTestListener listener = new JUnitTestListener(false) {", "-//        Utilities.show(\"junitSuiteStarted called\");", "-        junitSuiteStartedCount++;", "+        synchronized(this) { junitSuiteStartedCount++; }", "-      public void junitTestStarted(String name) {", "-        assertEquals(\"running wrong test\", \"testInfinite\", name);", "-        junitTestStartedCount++;", "-      }", "-      public void junitEnded() {", "-//        System.err.println(\"InterpreterReadyCount after reset = \" + interpreterReadyCount);", "-        // assertInterpreterReadyCount(1);  // not true if testing is aborted", "-        junitEndCount++;", "-        synchronized(_junitLock) {", "-          _junitDone = true;", "-          _junitLock.notify();", "-        }", "-      }", "-      public void interpreterResetting() {", "-        assertInterpreterReadyCount(0);", "-        interpreterResettingCount++;", "-      }", "-      public void interpreterReady(File wd) {", "-        assertInterpreterResettingCount(1);", "-        assertJUnitEndCount(0);", "-        interpreterReadyCount++;", "-      }", "-      ", "-      public void consoleReset() { consoleResetCount++; }", "+", "-    if (printMessages) System.out.println(\"before compile\");", "-    doc.startCompile();", "+    listener.compile(doc);", "+    ", "+    _log.log(\"Compilation of infinite loop completed\");", "+    ", "-    if (printMessages) System.out.println(\"after compile\");", "-    _model.removeListener(listener);", "-    _model.addListener(listener2);", "+", "+//    _model.removeListener(listener);", "+//    ", "+//    _model.addListener(listener2);", "-    _logJUnitStart();", "+    listener.logJUnitStart();", "-//      Utilities.show(\"startJUnit being called\");", "+      _log.log(\"startJUnit being called\");", "-      _waitJUnitDone();", "+      listener.waitJUnitDone();", "-    catch (UnexpectedException e) { /* Expected behavior for this test */ }", "+    catch (Exception e) { /* Expected behavior for this test */ }", "+    ", "+    listener.waitResetDone();  // reset should occur when test suite is started", "-    listener2.assertJUnitStartCount(1);", "-    _model.removeListener(listener2);", "-    listener2.assertJUnitEndCount(1);", "+    listener.assertJUnitStartCount(1);", "+    _model.removeListener(listener);", "+    listener.assertJUnitEndCount(1);", "+    _log.log(\"testInfiniteLoop completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a9eb698f2fcf41aa0ff465b9f8da38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void initComponents()", "signatureAfterChange": "   private void initComponents()", "diff": ["+    _fileChooser = new FileChooser(null);", "+    _fileChooser.setDialogTitle(\"Select .drjavajar File\");", "+    _fileChooser.setApproveButtonText(\"Select\");", "-    ", "-    _tabbedPane = new JTabbedPane();", "-      Action saveJavaAction = new AbstractAction(\"Save\") {", "-        public void actionPerformed(ActionEvent e) {", "-          _saveJava();", "-        }", "-      };", "-      _saveJavaButton = new JButton(saveJavaAction);", "-      Action runJavaAction = new AbstractAction(\"Run Java Class\") {", "-        public void actionPerformed(ActionEvent e) {", "-          _runJava();", "+      _runCommandButton.addFocusListener(new FocusAdapter() {", "+        @SuppressWarnings(\"unchecked\")", "+        public void focusGained(FocusEvent e) {", "+          _insertCommandButton.setEnabled(false);", "-      };", "-      _runJavaButton = new JButton(runJavaAction);", "+        public void focusLost(FocusEvent e) {", "+          if ((e.getOppositeComponent() == _commandLinePreview) || ", "+              (e.getOppositeComponent() == _commandWorkDirLinePreview) ||", "+              (e.getOppositeComponent() == _commandDrJavaJarFileLinePreview)) {", "+            _runCommandButton.requestFocus();", "+          }", "+        }", "+      });", "-      Action saveJavaAction = new AbstractAction(\"Save to Menu...\") {", "-        public void actionPerformed(ActionEvent e) {", "-          _saveJava();", "-        }", "-      };", "-      _saveJavaButton = new JButton(saveJavaAction);", "-    Action insertJavaAction = new AbstractAction(\"Insert Variable...\") {", "-      public void actionPerformed(ActionEvent e) {", "-        _insertVariableJava();", "-      }", "-    };", "-    _insertJavaButton = new JButton(insertJavaAction);", "-    _insertJavaButton.setEnabled(false);", "-    _cancelJavaButton = new JButton(cancelAction);", "-    _tabbedPane.addTab(\"Command Line\", null, _commandPanel, \"Execute command line process\");", "-    // set up \"Java\" panel", "-    _javaPanel = makeJavaPane();", "-    _tabbedPane.addTab(\"Java Class\", null, _javaPanel, \"Execute Java class\");", "-    _tabbedPane.setSelectedComponent(_commandPanel);", "-    ", "-    //The following line enables to use scrolling tabs.", "-    _tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);", "-    ", "-    super.getContentPane().add(_tabbedPane);", "+    super.getContentPane().add(_commandPanel);"]}], "num": 14688}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78fd66021336749affa3fd97e5d8e25c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad66ea8b03d4b836a4c2c81ad269ee01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void tearDown() throws Exception", "signatureAfterChange": "   public void tearDown() throws Exception", "diff": ["+    _log.log(\"Tearing down \" + this);", "+    _log.log(\"Completed tear down of \" + this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c274f4eb0ba56d8734fd3295096a1ad4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["-//          Utilities.showDebug(\"Ready to interpret \" + ev.toString());", "+          _log.log(\"Ready to interpret \" + ev);", "-//          Utilities.showDebug(\"Interpreted result is: \" + result.toString());", "+          _log.log(\"Interpreted result is: \" + result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1f96d059780cb8c91049223facf40cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "02d5c825c13aaa4caad6b7e4e89ccbdbfdc16c9f", "commitAfterChange": "61b133443156e1d09628166c6ed1f7901c3e505e", "methodNumberBeforeChange": 399, "methodNumberAfterChange": 399, "signatureBeforeChange": "   public void updateStatusField()", "signatureAfterChange": "   public void updateStatusField()", "diff": ["+      _tabbedPanesFrame.setTitle(\"Tabbed Panes - \"+fileName);", "+      if (_debugFrame!=null) _debugFrame.setTitle(\"Debugger - \"+fileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebf3ac327db4ef1bde3132a954ab83cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testNoNullPointer()", "signatureAfterChange": "   public void testNoNullPointer()", "diff": ["-   */", "+    */", "-    directory = new File(directory.getAbsolutePath() + \"/shouldBreak\");", "-    File[] testFiles = directory.listFiles(new FileFilter() {", "+    _log.log(\"Running testNoNullPointer\");", "+    dir1 = new File(dir1.getAbsolutePath() + \"/shouldBreak\");", "+    File[] testFiles = dir1.listFiles(new FileFilter() {", "-", "-      LanguageLevelConverter llc = new LanguageLevelConverter();", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-      for (int i = 0; i<testFiles.length; i++) {", "-        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+    _log.log(\"testFiles = \" + testFiles);", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    for (int i = 0; i<testFiles.length; i++) {", "+      result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+      assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());"]}], "num": 5733}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb27e34ed5cd29483a24f28f172b9643", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34bf7d1e27caada162452cf37baed0c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "4b6c56880670c4bb0f37de6a58c9d30d501c274a", "commitAfterChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public DefinitionsPane getLastDefPane()", "signatureAfterChange": "         public void stateChanged (ChangeEvent ce)", "diff": ["+      _showHighlightsCheckBox.addChangeListener( new ChangeListener() {", "+        public void stateChanged (ChangeEvent ce) {", "+          DefinitionsPane lastDefPane = _frame.getCurrentDefPane();", "+          ", "+          if (_showHighlightsCheckBox.isSelected()) {", "+            lastDefPane.setCaretPosition( lastDefPane.getCaretPosition());", "+            getErrorListPane().switchToError(getSelectedIndex());", "+            lastDefPane.requestFocus();", "+            lastDefPane.getCaret().setVisible(true);", "+          }", "+          else {", "+            lastDefPane.removeErrorHighlight();", "+          }", "+        }", "-     */", "-    public DefinitionsPane getLastDefPane() {", "-      return _lastDefPane;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ebd0519eed4ec21804d6382293a95c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/GlobalModelTest.java", "commitBeforeChange": "2ec67558fcc2be0c684677fea7ee9feb674b02bc", "commitAfterChange": "a937ccbbfe3e2271b14c781e19a341556df45efe", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public boolean canAbandonFile()", "signatureAfterChange": "        public boolean canAbandonFile(File file)", "diff": ["+", "+      public boolean canAbandonFile(File file) {", "+        _canAbandonCount++;", "+        return true; // yes allow the abandon", "+      }", "-    }", "-    public boolean canAbandonFile() {", "-      return true;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f3949498794e047b5866f74b15538c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "bd2e852d4b09497531ae79af49475815d01d70b1", "commitAfterChange": "85b72c50d3f809a70141774d731cbef2c25b2f7f", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 33, "signatureBeforeChange": "          public boolean isNew()", "signatureAfterChange": "       public void valueChanged(TreeSelectionEvent e)", "diff": ["+    TreeSelectionListener tsl = new TreeSelectionListener() {", "+      public void valueChanged(TreeSelectionEvent e) {", "+        int n = e.getPaths().length;", "+        File[] changed = new File[n];", "+        boolean[] areNew = new boolean[n];", "+        for (int i=0; i < n; i++) {", "+          changed[i] = getFileForTreePath(e.getPaths()[i]);", "+          areNew[i] = e.isAddedPath(i);", "+        }", "+        File newLead = getFileForTreePath(e.getNewLeadSelectionPath());", "+        File oldLead = getFileForTreePath(e.getOldLeadSelectionPath());", "+        FileSelectionEvent fse = new FileSelectionEvent(DirectoryChooser.this,", "+                                                        changed, areNew,", "+                                                        newLead, oldLead);", "+        //File[] changed, boolean[] areNew, File newLead, File oldLead", "+        l.valueChanged(fse);", "+      }", "-    ", "-    public boolean isNew() { return _isNew; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c903faa8187fccd336c4aec0cfad1ee1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public boolean inProgress()", "signatureAfterChange": "       public InterpretResult forNone()", "diff": ["+    return result.apply(new OptionVisitor<Object, InterpretResult>() {", "+      public InterpretResult forNone() { return InterpretResult.noValue(); }", "-  /** Returns whether this interpreter is currently in progress with an interaction. */", "-  public boolean inProgress() { return _inProgress; }"]}], "num": 4692}
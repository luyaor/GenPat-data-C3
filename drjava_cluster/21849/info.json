{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29fb1f6aa7e28824a5a2e945e911507e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4083c61460d8a20dfc411e8bfb73d4be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 288, "signatureBeforeChange": "   public static <T, R> Lambda<T, R> asLambda(final Runnable1<? super T> r, final R result)", "signatureAfterChange": "   public static <T, R> Lambda<T, R> asLambda(Runnable1<? super T> r, R result)", "diff": ["-  /** @return  A lambda that executes the given runnable, then returns {@code result} */", "-  public static <T, R> Lambda<T, R> asLambda(final Runnable1<? super T> r, final R result) {", "-    return new Lambda<T, R>() { public R value(T arg) { r.run(arg); return result; } };", "-  }", "+  /** Create a lambda that executes the given runnable, then returns {@code result}. */", "+  public static <T, R> Lambda<T, R> asLambda(Runnable1<? super T> r, R result) {", "+    return new RunnableLambda<T, R>(r, result);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b32764f6550ffc63f97f0856e16a0c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 117, "signatureBeforeChange": "   public static Predicate<File> asPredicate(final FileFilter filter)", "signatureAfterChange": "   public static FilePredicate asFilePredicate(FileFilter filter)", "diff": ["-  public static Predicate<File> asPredicate(final FileFilter filter) {", "-    return new Predicate<File>() {", "-      public Boolean value(File f) { return filter.accept(f); }", "-    };", "+  public static FilePredicate asFilePredicate(FileFilter filter) {", "+    return new FileFilterFilePredicate(filter);", "+  }"]}], "num": 21849}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "206c757ceb3a9af4039b2c261f6d68a2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c75c60bac3b5074e23726edc9c352585", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r   public static void main(String[] args)", "signatureAfterChange": "   public static void main(String[] args)", "diff": ["-  /**Do a conversion from the command line, to allow quick testing*/\r", "-  public static void main(String[] args) {\r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.CURRENT);\r", "-    File[] files = new File[args.length];\r", "-    for (int i = 0; i < args.length; i++) {\r", "-      files[i] = new File(args[i]);\r", "-    }\r", "-    \r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result = \r", "-        llc.convert(files);\r", "-    System.out.println(result.getFirst().size() + result.getSecond().size() + \" errors.\");\r", "-    for(JExprParseException p : result.getFirst()) {\r", "-      System.out.println(p);\r", "-    }\r", "-    for(Pair<String, JExpressionIF> p : result.getSecond()) {\r", "-      System.out.println(p.getFirst() + \" \" + p.getSecond().getSourceInfo());\r", "-    }\r", "-  }\r", "+  /**Do a conversion from the command line, to allow quick testing*/", "+  public static void main(String[] args) {", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    File[] files = new File[args.length];", "+    for (int i = 0; i < args.length; i++) {", "+      files[i] = new File(args[i]);", "+    }", "+    ", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result = ", "+        llc.convert(files, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    System.out.println(result.getFirst().size() + result.getSecond().size() + \" errors.\");", "+    for(JExprParseException p : result.getFirst()) {", "+      System.out.println(p);", "+    }", "+    for(Pair<String, JExpressionIF> p : result.getSecond()) {", "+      System.out.println(p.getFirst() + \" \" + p.getSecond().getSourceInfo());", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f80d5146954fc5c4b5ec60307e7eeee6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public static Iterable<File> listFilesRecursively(File f, Predicate<? super File> filter,                                                      Predicate<? super File> recursionFilter)", "signatureAfterChange": "   public static Iterable<File> listFilesRecursively(File f, Predicate<? super File> filter,                                                      Predicate<? super File> recursionFilter)", "diff": ["-    return listFilesRecursively(f, asFileFilter(filter), asFileFilter(recursionFilter));", "+    return listFilesRecursively(f, asFilePredicate(filter), asFilePredicate(recursionFilter),", "+                                new RecursionStack<File>(Wrapper.<File>factory()));", "+  }"]}], "num": 19307}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca231f08f0feeae700b41019a82e07fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39024a7dca8bf9f876ed2013bc4611a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ShadowingClassLoaderTest.java", "commitBeforeChange": "24a4bd9b5af47fdf2b927852ef0f4a564c73861b", "commitAfterChange": "a0233fef3427e8ddd7241be47fe79cd3cd5d54bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testShadowedClassLoading() throws ClassNotFoundException", "signatureAfterChange": "      public void testShadowedClassLoading() throws ClassNotFoundException", "diff": ["-    ShadowingClassLoader l = new ShadowingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.reflect\");", "+    // simple black list", "+    ShadowingClassLoader l = ShadowingClassLoader.blackList(BASE_LOADER, \"edu.rice.cs.plt.reflect\");", "-    ShadowingClassLoader l2 = new ShadowingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.refl\");", "+    // prefix containing partial word shouldn't work", "+    ShadowingClassLoader l2 = ShadowingClassLoader.blackList(BASE_LOADER, \"edu.rice.cs.plt.refl\");", "-    ShadowingClassLoader l3 = new ShadowingClassLoader(BASE_LOADER, false, \"edu.rice.cs.plt.reflect\");", "+    // simple white list", "+    ShadowingClassLoader l3 = ShadowingClassLoader.whiteList(BASE_LOADER, \"edu.rice.cs.plt.reflect\");", "+    ", "+    // default black list doesn't block bootstrap classes", "+    ShadowingClassLoader l4 = ShadowingClassLoader.blackList(BASE_LOADER, \"javax\", \"edu\");", "+    assertLoadsSameClass(BASE_LOADER, l4, \"java.lang.Number\");", "+    assertLoadsSameClass(BASE_LOADER, l4, \"javax.swing.JFrame\");", "+    assertLoadsClass(BASE_LOADER, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertDoesNotLoadClass(l4, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    ", "+    // default white list doesn't block bootstrap classes", "+    ShadowingClassLoader l5 = ShadowingClassLoader.whiteList(BASE_LOADER, \"javax\", \"edu.rice.cs.plt.reflect\");", "+    assertLoadsSameClass(BASE_LOADER, l5, \"javax.swing.JFrame\");", "+    assertLoadsSameClass(BASE_LOADER, l5, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertLoadsClass(BASE_LOADER, \"edu.rice.cs.plt.iter.IterUtil\");", "+    assertDoesNotLoadClass(l5, \"edu.rice.cs.plt.iter.IterUtil\");", "+    ", "+    // can filter boostrap classes with filterBootClasses parameter", "+    ShadowingClassLoader l6 =", "+    new ShadowingClassLoader(BASE_LOADER, true, IterUtil.make(\"javax\", \"edu\"), true);", "+    assertLoadsSameClass(BASE_LOADER, l6, \"java.lang.Number\");", "+    assertLoadsClass(BASE_LOADER, \"javax.swing.JFrame\");", "+    assertDoesNotLoadClass(l6, \"javax.swing.JFrame\");", "+    assertLoadsClass(BASE_LOADER, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertDoesNotLoadClass(l4, \"edu.rice.cs.plt.reflect.ReflectUtil\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d881e64af4589e5c9573298b2d8b77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public Void forInnerClassDef(InnerClassDef cd)", "signatureAfterChange": "   public Void forInnerClassDef(InnerClassDef cd)", "diff": ["-   */", "+    */", "-", "+    ", "+    /** WARNING: the code suffix copied from ClassDef; it it works it should be refactored. */", "-", "-    _readAndWriteThroughIndex(cd.getSourceInfo().getEndLine(), cd.getSourceInfo().getEndColumn() - 1);;", "-", "-    // We don't bother visiting any of the signature nodes -- parameters, type, name, etc.", "+    ", "+    int baseIndent = cd.getSourceInfo().getStartColumn() - 1;", "+    className = LanguageLevelVisitor.getUnqualifiedClassName(sd.getName());", "+    _readAndWriteThroughIndex(cd.getSourceInfo().getEndLine(), cd.getSourceInfo().getEndColumn() - 1);", "+    ", "+    // Augment this class declaration", "+    writeConstructor(className, sd, baseIndent);", "+    writeAccessors(sd, baseIndent);", "+    String valueToStringName = writeValueToString(sd, baseIndent);", "+    String valueEqualsName = writeValueEquals(sd, baseIndent);", "+    String valueHashCodeName = writeValueHashCode(sd, baseIndent, valueEqualsName);", "+    writeToString(sd, baseIndent, valueToStringName);", "+    writeEquals(className, sd, baseIndent, valueEqualsName);", "+    writeHashCode(className, sd, baseIndent, false, valueHashCodeName);", "+    for (String s : _endOfClassVarDefs) {", "+      _writeToFileOut(newLine + indentString(baseIndent, 1) + s);", "+    }", "+    if (_endOfClassVarDefs.size() > 0) {", "+      _writeToFileOut(newLine);", "+      _endOfClassVarDefs.clear();", "+    }", "+    _writeToFileOut(indentString(baseIndent, 0));", "+    ", "+    ", "+// We don't bother visiting any of the signature nodes -- parameters, type, name, etc.", "-}", "+  }"]}], "num": 28554}
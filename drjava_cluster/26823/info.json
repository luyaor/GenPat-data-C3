{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c42b49ec4455fada4bdcc06ec1bbca3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f374b1cba440deb77a37568dda38b73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 94, "signatureBeforeChange": "          public void testGetSymbolData_IsQualified()", "signatureAfterChange": "          public void testGetQualifiedSymbolData()", "diff": ["-    public void testGetSymbolData_IsQualified() {", "+    public void testGetQualifiedSymbolData() {", "-      assertEquals(\"should return null--does not exist\", null, ", "-                   _llv._getSymbolData_IsQualified(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false, true));", "-      assertEquals(\"should be one error so far.\", 1, errors.size());", "+      assertEquals(\"should the continuation symbol\", sd, ", "+                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false, true));", "+//      assertEquals(\"should be one error so far.\", 1, errors.size());", "-      SymbolData sd2 = _llv._getSymbolData_IsQualified(\"java.lang.Integer\", JExprParser.NO_SOURCE_INFO, true, true, true);", "+      SymbolData sd2 = _llv._getQualifiedSymbolData(\"java.lang.Integer\", JExprParser.NO_SOURCE_INFO, true, true, true);", "-      SymbolData sd3 = _llv._getSymbolData_IsQualified(\"Wow\", JExprParser.NO_SOURCE_INFO, true, true, true);", "-      assertEquals(\"should return Wow\", \"Wow\", sd3.getName());", "-      assertFalse(\"Should not be a continuation.\", sd3.isContinuation());", "+      SymbolData sd3 = _llv._getQualifiedSymbolData(\"Wow\", JExprParser.NO_SOURCE_INFO, true, true, true);", "+      assertEquals(\"search should fail\", null, sd3);", "+//      assertEquals(\"should return Wow\", \"Wow\", sd3.getName());", "+//      assertFalse(\"Should not be a continuation.\", sd3.isContinuation());", "-      ", "-      //Test that classes in the symbol table are handled correctly", "-      assertEquals(\"should return null sd--does not exist\", null, ", "-                   _llv._getSymbolData_IsQualified(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, false, false, true));", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "+      // \"testPackage.File\" has been entered as a continuation in symbolTable.  Why should the following lookup fail?", "+//      //Test that classes in the symbol table are handled correctly", "+//      assertEquals(\"should return null sd--does not exist\", null, ", "+//                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, false, false, true));", "+//      assertEquals(\"Should be 1 error\", 1, errors.size());", "-                   _llv._getSymbolData_IsQualified(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false,  true));", "+                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false,  true));", "-                   _llv._getSymbolData_IsQualified(\"java.lang.String\", JExprParser.NO_SOURCE_INFO, true, false, true));", "+                   _llv._getQualifiedSymbolData(\"java.lang.String\", JExprParser.NO_SOURCE_INFO, true, false, true));", "-                   _llv._getSymbolData_IsQualified(\"testPackage.not.in.symboltable\", ", "+                   _llv._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-      assertEquals(\"should be three errors so far.\", 3, errors.size());", "+      assertEquals(\"should be two errors so far.\", 2, errors.size());", "-                 _llv._getSymbolData_IsQualified(\"testPackage.not.in.symboltable\", ", "+                 _llv._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-                 _llv._getSymbolData_IsQualified(\"notRightPackage\", JExprParser.NO_SOURCE_INFO, false, false, false));", "-      assertEquals(\"should still be three errors.\", 3, errors.size());", "+                 _llv._getQualifiedSymbolData(\"notRightPackage\", JExprParser.NO_SOURCE_INFO, false, false, false));", "+      assertEquals(\"should still be two errors.\", 2, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97943781bd11616adb1fe6bed105cbab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void testSaveAlreadySaved() throws Exception", "signatureAfterChange": "   public void testSaveAlreadySaved() throws BadLocationException, IOException", "diff": ["-  public void testSaveAlreadySaved() throws Exception {", "+  public void testSaveAlreadySaved() throws BadLocationException, IOException {", "-    Utilities.clearEventQueue();  // config changes rely on the event thread", "-    final OpenDefinitionsDocument doc = setupDocument(FOO_TEXT);", "+    OpenDefinitionsDocument doc = setupDocument(FOO_TEXT);", "-    assertFalse(\"Confirm that backup status is initially false\", DrJava.getConfig().getSetting(BACKUP_FILES));", "-    saveFile(doc, new FileSelector(file));", "+    doc.saveFile(new FileSelector(file));", "-        catch (FileMovedException fme) { ", "-//          System.err.println(\"File \" + f + \" to be saved DOES NOT EXIST\");", "-          fail(\"file does not exist\"); // We know file should exist", "-        }   ", "+        catch (FileMovedException fme) { fail(\"file does not exist\"); }   // We know file should exist", "-    final File backup = new File(file.getPath() + \"~\");", "-//    System.err.println(\"fileName = \" + file);", "-//    System.err.println(\"backupName = \" + backup);", "+    File backup = new File(file.getPath() + \"~\");", "-    ", "-    assertFalse(\"Confirm that backup has been deleted if it already existed\", backup.exists());", "-    Utilities.clearEventQueue();", "-    ", "-//    System.err.println(\"Document text = '\" + doc.getText() + \"'\");", "-    saveFile(doc, new FileSelector(file)); ", "+    doc.saveFile(new FileSelector(file));", "-//    Utilities.clearEventQueue();", "-    listener.assertSaveCount(1);", "-    assertEquals(\"Contents of saved file 2nd write\", BAR_TEXT, IOUtil.toString(file));", "-    assertFalse(\"No backup was made\", backup.exists());", "-//    System.err.println(\"Confirm that \" + backup + \" does not exist: \" + backup.exists());", "-    //enable file backups", "-    ", "-    DrJava.getConfig().setSetting(BACKUP_FILES, Boolean.TRUE);", "+    listener.assertSaveCount(1);", "+    assertEquals(\"contents of saved file 2nd write\", BAR_TEXT, IOUtil.toString(file));", "+    assertFalse(\"no backup was made\", backup.exists());", "+    ", "+    //enable file backups", "+    DrJava.getConfig().setSetting(BACKUP_FILES, Boolean.TRUE);", "-", "-//    System.err.println(\"Backup status = \" + DrJava.getConfig().getSetting(BACKUP_FILES) + \" for backup file \" + backup);", "-//    System.err.println(\"Before saving to '\" + file + \"', confirm \" + backup + \" does not exist: \" + backup.exists());", "-    ", "-    assertTrue(\"Confirm that BACKUP_FILES is true\", DrJava.getConfig().getSetting(BACKUP_FILES));", "-    assertFalse(\"Confirm that backup file \" + backup + \" does not yet exist\", backup.exists());", "-    assertEquals(\"Confirm that file \" + file + \" was modified properly\", BAR_TEXT, IOUtil.toString(file));", "-//    System.err.println(\"Old contents of file \" + file + \" = '\" + IOUtil.toString(file) + \"'\");", "-     // Save over top of the previous file", "-    saveFile(doc, new FileSelector(file));", "-    assertTrue(\"Confirm that backup file \" + backup + \" was created\", backup.exists());", "+    // Save over top of the previous file", "+    doc.saveFile(new FileSelector(file));", "-//    System.err.println(\"After saving, confirm \" + backup + \" exists: \" + backup.exists());", "-//    System.err.println(\"Backup has contents '\" + IOUtil.toString(backup) + \"'\");", "-//    System.err.println(\"New file has contents '\" + IOUtil.toString(file) + \"'\");", "-", "+    Utilities.clearEventQueue();", "-//    System.err.println(\"After checking save count, confirm \" + backup + \" exists: \" + backup.exists());"]}], "num": 26823}
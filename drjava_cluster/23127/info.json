{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06dfc5977b86ccc553e263301e090f91", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03af600c879f44347fade3010e20f303", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "d7e29fae36890273cb02f65a4dcc06babb1b1e53", "commitAfterChange": "40502fe8d6d2aa924af9e28579518088d3c23148", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 247, "signatureBeforeChange": "      private Expression box(Expression exp, ClassType boxedType)", "signatureAfterChange": "      private Expression box(Expression exp, ClassType boxedType)", "diff": ["-      StaticMethodCall m = new StaticMethodCall(boxedTypeName, \"valueOf\", arguments, ", "-                                                exp.getFilename(), exp.getBeginLine(), exp.getBeginColumn(), ", "-                                                exp.getEndLine(), exp.getEndColumn());", "+      StaticMethodCall m = new StaticMethodCall(boxedTypeName, \"valueOf\", arguments, exp.getSourceInfo());", "-      SimpleAllocation k = new SimpleAllocation(boxedTypeName, arguments, exp.getFilename(), exp.getBeginLine(),", "-                                                exp.getBeginColumn(), exp.getEndLine(), exp.getEndColumn());", "+      SimpleAllocation k = new SimpleAllocation(boxedTypeName, arguments, exp.getSourceInfo());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc24b47b5cfb2d9d29511ef81404325", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "d7e29fae36890273cb02f65a4dcc06babb1b1e53", "commitAfterChange": "40502fe8d6d2aa924af9e28579518088d3c23148", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     @Override public Type visit(ObjectMethodCall node)", "signatureAfterChange": "     @Override public Type visit(ObjectMethodCall node)", "diff": ["-                                              node.getFilename(), node.getBeginLine(), node.getBeginColumn(),", "-                                              node.getEndLine(), node.getEndColumn());", "+                                              node.getSourceInfo());", "-                                               node.getArguments(), node.getFilename(), node.getBeginLine(),", "-                                               node.getBeginColumn(), node.getEndLine(), node.getEndColumn());", "+                                               node.getArguments(), node.getSourceInfo());"]}], "num": 23127}
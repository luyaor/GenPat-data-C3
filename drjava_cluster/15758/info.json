{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3836726e948b1ad43caec3e0dcc7855d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d9e8fb58055eb8777906854dcd5983", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapter.java", "commitBeforeChange": "ece33a1eca956a4c4fa241038cad534de212ef70", "commitAfterChange": "5481b029dfc07ee092049dc1e5006c0f887620a2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public synchronized boolean setColoring(int point, Graphics g)", "signatureAfterChange": "   public synchronized boolean setColoring(int point, Graphics g)", "diff": ["-          g.setColor(INTERACTIONS_STANDARD_ERROR_COLOR);   ", "+          g.setColor(ColoringView.ERROR_COLOR);   ", "-          g.setColor(INTERACTIONS_DEBUGGER_COLOR);", "+          g.setColor(ColoringView.DEBUGGER_COLOR);", "-          g.setColor(INTERACTIONS_SYSTEM_OUT_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "+          g.setColor(ColoringView.INTERACTIONS_SYSTEM_OUT_COLOR);", "+          g.setFont(ColoringView.MAIN_FONT);", "-          g.setColor(INTERACTIONS_SYSTEM_IN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "+          g.setColor(ColoringView.INTERACTIONS_SYSTEM_IN_COLOR);", "+          g.setFont(ColoringView.MAIN_FONT);", "-          g.setColor(INTERACTIONS_SYSTEM_ERR_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "+          g.setColor(ColoringView.INTERACTIONS_SYSTEM_ERR_COLOR);", "+          g.setFont(ColoringView.MAIN_FONT);", "-          g.setColor(INTERACTIONS_OBJECT_RETURN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "+          g.setColor(ColoringView.NORMAL_COLOR);", "+          g.setFont(ColoringView.MAIN_FONT);", "-          g.setColor(INTERACTIONS_STRING_RETURN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "+          g.setColor(ColoringView.DOUBLE_QUOTED_COLOR);", "+          g.setFont(ColoringView.MAIN_FONT);", "-          g.setColor(INTERACTIONS_NUMBER_RETURN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "+          g.setColor(ColoringView.NUMBER_COLOR);", "+          g.setFont(ColoringView.MAIN_FONT);", "-          g.setColor(INTERACTIONS_CHARACTER_RETURN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "+          g.setColor(ColoringView.SINGLE_QUOTED_COLOR);", "+          g.setFont(ColoringView.MAIN_FONT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f98a4835e5c0b404a72ffcf39d5618f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipCommentsTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "      public void testNoPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"At DOCSTART.\", rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"At start of block.\", rule.applyRule(_doc, 25, Indenter.OTHER));", "-    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 54, Indenter.OTHER));", "-    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 60, Indenter.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 104, Indenter.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 110, Indenter.OTHER));", "-    assertTrue(\"Line inside javadoc comment.\", !rule.applyRule(_doc, 130, Indenter.OTHER));", "-    assertTrue(\"Line closes javadoc comment.\", rule.applyRule(_doc, 150, Indenter.OTHER));", "-    assertTrue(\"START is free.\", rule.applyRule(_doc, 180, Indenter.OTHER));", "-    assertTrue(\"START is free.\", rule.applyRule(_doc, 230, Indenter.OTHER));", "-    assertTrue(\"START starts multi-line comment.\", rule.applyRule(_doc, 260, Indenter.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 275, Indenter.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.OTHER));", "-    assertTrue(\"Line closes multi-line comment.\", rule.applyRule(_doc, 399, Indenter.OTHER));", "-    assertTrue(\"START is free.\", rule.applyRule(_doc, 400, Indenter.OTHER));", "-    assertTrue(\"At end of document.\", rule.applyRule(_doc, 401, Indenter.OTHER));", "+    assertTrue(\"At DOCSTART.\", rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At start of block.\", rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 60, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 104, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 110, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside javadoc comment.\", !rule.applyRule(_doc, 130, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes javadoc comment.\", rule.applyRule(_doc, 150, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is free.\", rule.applyRule(_doc, 180, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is free.\", rule.applyRule(_doc, 230, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts multi-line comment.\", rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is free.\", rule.applyRule(_doc, 400, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At end of document.\", rule.applyRule(_doc, 401, Indenter.IndentReason.OTHER));"]}], "num": 15758}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed00fbadeff86f06fdc3d2457e0bd84b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e99bc477a26c85975f822b41adfc11f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   protected static LinkedHashMap<File,Set<JDKDescriptor>> getDefaultSearchRoots()", "signatureAfterChange": "   protected static LinkedHashMap<File,Set<JDKDescriptor>> getDefaultSearchRoots()", "diff": ["+    JDKToolsLibrary.msg(\"---- Getting Default Search Roots ----\");", "+    ", "-      addIfDir(new File(javaHome), null, roots);", "-      addIfDir(new File(javaHome, \"..\"), null, roots);", "-      addIfDir(new File(javaHome, \"../..\"), null, roots);", "+      addIfDir(new File(javaHome), roots);", "+      addIfDir(new File(javaHome, \"..\"), roots);", "+      addIfDir(new File(javaHome, \"../..\"), roots);", "-      addIfDir(new File(envJavaHome), null, roots);", "-      addIfDir(new File(envJavaHome, \"..\"), null, roots);", "-      addIfDir(new File(envJavaHome, \"../..\"), null, roots);", "+      addIfDir(new File(envJavaHome), roots);", "+      addIfDir(new File(envJavaHome, \"..\"), roots);", "+      addIfDir(new File(envJavaHome, \"../..\"), roots);", "-      addIfDir(new File(programFiles, \"Java\"), null, roots);", "-      addIfDir(new File(programFiles), null, roots);", "+      addIfDir(new File(programFiles, \"Java\"), roots);", "+      addIfDir(new File(programFiles), roots);", "-    addIfDir(new File(\"/C:/Program Files/Java\"), null, roots);", "-    addIfDir(new File(\"/C:/Program Files\"), null, roots);", "+    addIfDir(new File(\"/C:/Program Files/Java\"), roots);", "+    addIfDir(new File(\"/C:/Program Files\"), roots);", "-      addIfDir(new File(systemDrive, \"Java\"), null, roots);", "-      addIfDir(new File(systemDrive), null, roots);", "+      addIfDir(new File(systemDrive, \"Java\"), roots);", "+      addIfDir(new File(systemDrive), roots);", "-    addIfDir(new File(\"/C:/Java\"), null, roots);", "-    addIfDir(new File(\"/C:\"), null, roots);", "+    addIfDir(new File(\"/C:/Java\"), roots);", "+    addIfDir(new File(\"/C:\"), roots);", "-    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), null, roots);", "+    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), roots);", "-    addIfDir(new File(\"/usr/java\"), null, roots);", "-    addIfDir(new File(\"/usr/j2se\"), null, roots);", "-    addIfDir(new File(\"/usr\"), null, roots);", "-    addIfDir(new File(\"/usr/local/java\"), null, roots);", "-    addIfDir(new File(\"/usr/local/j2se\"), null, roots);", "-    addIfDir(new File(\"/usr/local\"), null, roots);", "+    addIfDir(new File(\"/usr/java\"), roots);", "+    addIfDir(new File(\"/usr/j2se\"), roots);", "+    addIfDir(new File(\"/usr\"), roots);", "+    addIfDir(new File(\"/usr/local/java\"), roots);", "+    addIfDir(new File(\"/usr/local/j2se\"), roots);", "+    addIfDir(new File(\"/usr/local\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm\"), null, roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), null, roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), null, roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), null, roots);", "+    addIfDir(new File(\"/usr/lib/jvm\"), roots);", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), roots);", "+    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), roots);", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), roots);", "-    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), null, roots);", "+    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), roots);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ea2043228e9aae8c93de0ecea2f3f9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "601a464d68d9614b980a0acf64c3c8928b17445c", "commitAfterChange": "b35a353aefac369485a6c43b1b1d62dab2d5057c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["-    LinkedHashSet<File> roots = new LinkedHashSet<File>();", "+    LinkedHashMap<File,Set<CompoundJDKDescriptor>> roots = new LinkedHashMap<File,Set<CompoundJDKDescriptor>>();", "-      addIfDir(new File(javaHome), roots);", "-      addIfDir(new File(javaHome, \"..\"), roots);", "-      addIfDir(new File(javaHome, \"../..\"), roots);", "+      addIfDir(new File(javaHome), null, roots);", "+      addIfDir(new File(javaHome, \"..\"), null, roots);", "+      addIfDir(new File(javaHome, \"../..\"), null, roots);", "-      addIfDir(new File(envJavaHome), roots);", "-      addIfDir(new File(envJavaHome, \"..\"), roots);", "-      addIfDir(new File(envJavaHome, \"../..\"), roots);", "+      addIfDir(new File(envJavaHome), null, roots);", "+      addIfDir(new File(envJavaHome, \"..\"), null, roots);", "+      addIfDir(new File(envJavaHome, \"../..\"), null, roots);", "-      addIfDir(new File(programFiles, \"Java\"), roots);", "-      addIfDir(new File(programFiles), roots);", "+      addIfDir(new File(programFiles, \"Java\"), null, roots);", "+      addIfDir(new File(programFiles), null, roots);", "-    addIfDir(new File(\"/C:/Program Files/Java\"), roots);", "-    addIfDir(new File(\"/C:/Program Files\"), roots);", "+    addIfDir(new File(\"/C:/Program Files/Java\"), null, roots);", "+    addIfDir(new File(\"/C:/Program Files\"), null, roots);", "-      addIfDir(new File(systemDrive, \"Java\"), roots);", "-      addIfDir(new File(systemDrive), roots);", "+      addIfDir(new File(systemDrive, \"Java\"), null, roots);", "+      addIfDir(new File(systemDrive), null, roots);", "-    addIfDir(new File(\"/C:/Java\"), roots);", "-    addIfDir(new File(\"/C:\"), roots);", "+    addIfDir(new File(\"/C:/Java\"), null, roots);", "+    addIfDir(new File(\"/C:\"), null, roots);", "-    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), roots);", "+    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), null, roots);", "-    addIfDir(new File(\"/usr/java\"), roots);", "-    addIfDir(new File(\"/usr/j2se\"), roots);", "-    addIfDir(new File(\"/usr\"), roots);", "-    addIfDir(new File(\"/usr/local/java\"), roots);", "-    addIfDir(new File(\"/usr/local/j2se\"), roots);", "-    addIfDir(new File(\"/usr/local\"), roots);", "+    addIfDir(new File(\"/usr/java\"), null, roots);", "+    addIfDir(new File(\"/usr/j2se\"), null, roots);", "+    addIfDir(new File(\"/usr\"), null, roots);", "+    addIfDir(new File(\"/usr/local/java\"), null, roots);", "+    addIfDir(new File(\"/usr/local/j2se\"), null, roots);", "+    addIfDir(new File(\"/usr/local\"), null, roots);", "-    addIfDir(new File(\"/usr/lib/jvm\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), roots);", "+    addIfDir(new File(\"/usr/lib/jvm\"), null, roots);", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), null, roots);", "+    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), null, roots);", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), null, roots);", "-    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), roots);", "+    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), null, roots);", "-    LinkedHashSet<File> jars = new LinkedHashSet<File>();", "-    addIfFile(edu.rice.cs.util.FileOps.getDrJavaFile(), jars); // drjava.jar file itself; check if it's a combined Mint/DrJava jar", "+    LinkedHashMap<File,Set<CompoundJDKDescriptor>> jars = new LinkedHashMap<File,Set<CompoundJDKDescriptor>>();", "+    // drjava.jar file itself; check if it's a combined Mint/DrJava jar", "+    addIfFile(edu.rice.cs.util.FileOps.getDrJavaFile(), (CompoundJDKDescriptor)null, jars);", "-      for(File f: desc.getSearchDirectories()) { addIfDir(f, roots); }", "-      for(File f: desc.getSearchFiles()) { addIfFile(f, jars); }", "+      for(File f: desc.getSearchDirectories()) { addIfDir(f, desc, roots); }", "+      for(File f: desc.getSearchFiles()) { addIfFile(f, desc, jars); }", "-    // matches: starts with \"j2sdk\", starts with \"jdk\", has form \"[number].[number].[number]\" (OS X), starts with \"java-\" (Linux)", "+    // matches: starts with \"j2sdk\", starts with \"jdk\", has form \"[number].[number].[number]\" (OS X), or", "+    // starts with \"java-\" (Linux)", "-    for (File root : roots) {", "-      for (File subdir : IOUtil.attemptListFilesAsIterable(root, subdirFilter)) {", "-        addIfFile(new File(subdir, \"lib/tools.jar\"), jars);", "-        addIfFile(new File(subdir, \"Classes/classes.jar\"), jars);", "+    for (Map.Entry<File,Set<CompoundJDKDescriptor>> root : roots.entrySet()) {", "+      for (File subdir : IOUtil.attemptListFilesAsIterable(root.getKey(), subdirFilter)) {", "+        addIfFile(new File(subdir, \"lib/tools.jar\"), root.getValue(), jars);", "+        addIfFile(new File(subdir, \"Classes/classes.jar\"), root.getValue(), jars);", "-    for (File jar : jars) {", "-      JarJDKToolsLibrary lib = makeFromFile(jar, model);", "-      if (lib.isValid()) {", "-        FullVersion v = lib.version();", "-        Map<FullVersion, Iterable<JarJDKToolsLibrary>> mapToAddTo = results;", "-        if (v.vendor().equals(JavaVersion.VendorType.COMPOUND)) { mapToAddTo = compoundResults; }", "-        ", "-        if (mapToAddTo.containsKey(v)) { mapToAddTo.put(v, IterUtil.compose(lib, mapToAddTo.get(v))); }", "-        else { mapToAddTo.put(v, IterUtil.singleton(lib)); }", "+    for (Map.Entry<File,Set<CompoundJDKDescriptor>> jar : jars.entrySet()) {", "+      for (CompoundJDKDescriptor desc : jar.getValue()) {", "+        JarJDKToolsLibrary lib = makeFromFile(jar.getKey(), model, desc);", "+        if (lib.isValid()) {", "+          FullVersion v = lib.version();", "+          Map<FullVersion, Iterable<JarJDKToolsLibrary>> mapToAddTo = results;", "+          if (v.vendor().equals(JavaVersion.VendorType.COMPOUND)) { mapToAddTo = compoundResults; }", "+          ", "+          if (mapToAddTo.containsKey(v)) { mapToAddTo.put(v, IterUtil.compose(lib, mapToAddTo.get(v))); }", "+          else { mapToAddTo.put(v, IterUtil.singleton(lib)); }", "+        }", "-        JarJDKToolsLibrary lib = makeFromFile(compoundLib.location(), model, found.bootClassPath());", "+        JarJDKToolsLibrary lib = makeFromFile(compoundLib.location(), model, compoundLib.getJDKDescriptor(),", "+                                              found.bootClassPath());"]}], "num": 3857}
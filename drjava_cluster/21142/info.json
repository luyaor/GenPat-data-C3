{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9810d684788be83a71fb8363370580f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7370b49095ac75776d858a31438e655a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 451, "methodNumberAfterChange": 451, "signatureBeforeChange": "\r \r   public void forPositiveExpression(PositiveExpression that)", "signatureAfterChange": "    public void forPositiveExpression(PositiveExpression that)", "diff": ["-\r", "-  public void forPositiveExpression(PositiveExpression that) {\r", "-    forPositiveExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forPositiveExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPositiveExpression(PositiveExpression that) {", "+    forPositiveExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forPositiveExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa06c6793ab31a84052958b473d97228", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 454, "methodNumberAfterChange": 454, "signatureBeforeChange": "\r \r   public void forNotExpression(NotExpression that)", "signatureAfterChange": "    public void forNotExpression(NotExpression that)", "diff": ["-\r", "-  public void forNotExpression(NotExpression that) {\r", "-    forNotExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forNotExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNotExpression(NotExpression that) {", "+    forNotExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forNotExpressionOnly(that);", "+  }"]}], "num": 21142}
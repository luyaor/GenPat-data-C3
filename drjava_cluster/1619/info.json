{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77846afd521b1ef56df827223686f2b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03aff601f42d3db33801ab580bae6222", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "cfea3e13a321911fb98c8bdb6bf527cebe9e8065", "commitAfterChange": "c93fe40cf9a3db4130d052c7d32f60d02ed31c7a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "signatureAfterChange": "   public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "diff": ["-        System.out.println(\"Finalizing: \" + e.getObject().hashCode());", "+//        System.out.println(\"Finalizing: \" + e.getObject().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Current: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Current: \" + _frame.getCurrentDefPane().hashCode());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "742a946c4958a2a140cfc102eedae03f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": "   protected VariableData[] _variableDeclaration2VariableData(VariableDeclaration vd, Data enclosing)", "signatureAfterChange": "   protected VariableData[] _variableDeclaration2VariableData(VariableDeclaration vd, Data enclosing)", "diff": ["-    Type type;", "-    String name;", "-    for (int i = 0; i < declarators.length; i++) {", "-      declarators[i].visit(this);", "-      type = declarators[i].getType();", "-      name = declarators[i].getName().getText();", "-      SymbolData sd = getSymbolData(type.getName(), type.getSourceInfo());", "-      ", "-      if (sd == null) {", "-        //see if this is a partially qualified field reference", "-        sd = enclosing.getInnerClassOrInterface(type.getName());", "-      }", "-      ", "-      if (sd == null) {", "-        //if we still couldn't resolve sd, create a continuation for it.", "-        sd = new SymbolData(enclosing.getSymbolData().getName() + \"$\" + type.getName());", "-        enclosing.getSymbolData().addInnerClass(sd);", "-        sd.setOuterData(enclosing.getSymbolData());", "-        continuations.put(sd.getName(), new Pair<SourceInfo, LanguageLevelVisitor>(type.getSourceInfo(), this));", "-      }", "-      ", "+    for (VariableDeclarator declarator: declarators) {", "+      declarator.visit(this); // Does NOTHING!", "+      Type type = declarator.getType();", "+      String name = declarator.getName().getText();", "+      SymbolData sd = handleDeclarator(type, name, enclosing);", "+   ", "-        boolean initialized = declarators[i] instanceof InitializedVariableDeclarator;", "+        boolean initialized = declarator instanceof InitializedVariableDeclarator;", "-      else _addAndIgnoreError(\"Class or Interface \" + type.getName() + \" not found\", declarators[i].getType());", "+      else _addAndIgnoreError(\"Class or Interface \" + name + \" not found\", type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3a16a8a20497fd5b9e9fc1e554f1804", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "ecec455630699fb47e48815ed0e8ff7ef49584c1", "commitAfterChange": "09b707cda41d2d3c82d34a50c8dbebc9d7cd95a2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "signatureAfterChange": "\r   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath)", "diff": ["+  /** Create a JarJDKToolsLibrary from a specific {@code \"tools.jar\"} or {@code \"classes.jar\"} file. */\r", "+  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath) {\r", "+    List<File> bootClassPath = null;\r", "-      LOG.log(\"compilerAdapter: \"+compilerAdapter );\r", "-        if (f.getName().equals(\"classes.jar\")) { LOG.log(\"[1]\"); libDir = f.getParentFile(); }\r", "+        if (f.getName().equals(\"classes.jar\")) { libDir = f.getParentFile(); }\r", "-          LOG.log(\"[2]\");\r", "-            LOG.log(\"[3]\");\r", "-              LOG.log(\"[4]\");\r", "-              if (IOUtil.attemptExists(new File(jreLibDir, \"rt.jar\"))) { LOG.log(\"[5]\"); libDir = jreLibDir; }\r", "+              if (IOUtil.attemptExists(new File(jreLibDir, \"rt.jar\"))) { libDir = jreLibDir; }\r", "-              if (IOUtil.attemptExists(new File(jdkLibDir, \"rt.jar\"))) { LOG.log(\"[6]\"); libDir = jdkLibDir; }\r", "+              if (IOUtil.attemptExists(new File(jdkLibDir, \"rt.jar\"))) { libDir = jdkLibDir; }\r", "-        LOG.log(\"libDir: \"+libDir);\r", "-        List<File> bootClassPath = null; // null defers to the compiler's default behavior\r", "+        bootClassPath = new ArrayList<File>();\r", "-          LOG.log(\"[7]\");\r", "-          LOG.log(\"jars: \"+jars);\r", "-          if (jars != null) { LOG.log(\"jars: \"+java.util.Arrays.toString(jars)); bootClassPath = Arrays.asList(jars); }\r", "+          if (jars != null) { bootClassPath.addAll(Arrays.asList(jars)); }\r", "+        bootClassPath.addAll(additionalBootClassPath);\r", "+        if (bootClassPath.isEmpty()) { bootClassPath = null; } // null defers to the compiler's default behavior\r", "+          msg(\"JarJDKToolsLibrary bootClassPath: \"+((bootClassPath!=null)?IOUtil.pathToString(bootClassPath):\"n/a\"));\r", "-          LOG.log(\"args, version: \"+version+\" f: \"+f.toString()+\" bootClassPath: \"+bootClassPath);\r", "-          LOG.log(\"attempt: \"+attempt+\", isAvailable: \"+attempt.isAvailable());\r", "-        catch (ReflectException e) { LOG.log(\"ReflectException\", e); /* can't load */ }\r", "-        catch (LinkageError e) { LOG.log(\"ReflectException\", e); /* can't load */ }\r", "+        catch (ReflectException e) { /* can't load */ }\r", "+        catch (LinkageError e) { /* can't load */ }\r", "-    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc);\r", "+    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc, bootClassPath);\r"]}], "num": 1619}
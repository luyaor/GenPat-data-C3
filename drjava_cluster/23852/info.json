{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3217739d05f328a8c64d7e9900dee4b5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c8a515e25c091a319f1879e71ef76c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "937476ee8896348910d6d75752ebec9108601607", "commitAfterChange": "8919b34b2a6db18ce9f1ce08c0f6b15bbc1fac15", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   private void _updateWatches()", "signatureAfterChange": "   private void _updateWatches()", "diff": ["-      ArrayList <Integer>arr_index = new ArrayList<Integer>();", "+      ArrayList<Integer> arr_index = new ArrayList<Integer>();", "-      if(!arr_index.isEmpty())  {", "-        int [] indices = new int[arr_index.size()];", "-        for (int i = 0; i < arr_index.size(); i++) {", "-          indices[i] = (Integer)arr_index.get(i);", "-        }", "-        val = _model.getInteractionsModel().getVariableToString(name, indices);", "-        type = _model.getInteractionsModel().getVariableType(name, indices);", "+      int [] indices = new int[arr_index.size()];", "+      for (int i = 0; i < arr_index.size(); i++) {", "+        indices[i] = arr_index.get(i);", "-      else {", "-        val = _model.getInteractionsModel().getVariableToString(name);", "-        type = _model.getInteractionsModel().getVariableType(name);", "-      }", "+      val = _model.getInteractionsModel().getVariableToString(name, indices);", "+      type = _model.getInteractionsModel().getVariableType(name, indices);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d150de921a09539b3488c44b11af8c11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fp, Data enclosing)", "signatureAfterChange": "   protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fps, SymbolData enclosing)", "diff": ["-   */", "-  protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fp, Data enclosing) { ", "-    TypeData[] tds = new TypeData[fp.length];", "-    for (int j = 0; j<fp.length; j++) {", "-      SymbolData type = _llv.getSymbolData(fp[j].getDeclarator().getType().getName(), fp[j].getSourceInfo());", "+    */", "+  protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fps, SymbolData enclosing) { ", "+    TypeData[] tds = new TypeData[fps.length];", "+    int j = 0;", "+    for (FormalParameter fp: fps) {", "+      SymbolData type = _llv.getSymbolData(fp.getDeclarator().getType().getName(), fp.getSourceInfo());", "-        type = enclosing.getInnerClassOrInterface(fp[j].getDeclarator().getType().getName());", "+        type = enclosing.getInnerClassOrInterface(fp.getDeclarator().getType().getName());", "-      tds[j]= type;", "+      tds[j]= type; j++;  // store type in next empty slot of tds", "+    assert j == fps.length;", "+    "]}], "num": 23852}
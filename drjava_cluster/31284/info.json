{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6baba7774edabec005852f5df2913083", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25f4645d7b8b6babc0f5bc4ba0f07fdc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "     private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,                                           Lambda2<Object, Object, Object>  primitiveCase)", "signatureAfterChange": "     private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,                                           Lambda2<Object, Object, Object>  primitiveCase)", "diff": ["-          setErrorStrings(node, ts.userRepresentation(leftT), ts.userRepresentation(rightT));", "+          TypePrinter printer = ts.typePrinter();", "+          setErrorStrings(node, printer.print(leftT), printer.print(rightT));", "-            setErrorStrings(node, ts.userRepresentation(leftT), ts.userRepresentation(rightT));", "+            TypePrinter printer = ts.typePrinter();", "+            setErrorStrings(node, printer.print(leftT), printer.print(rightT));", "-          setErrorStrings(node, ts.userRepresentation(leftT), ts.userRepresentation(rightT));", "+            TypePrinter printer = ts.typePrinter();", "+            setErrorStrings(node, printer.print(leftT), printer.print(rightT));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d2a568acd1e45f1d05c5be6c749893d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private ExecutionError unmatchedFunctionError(String kind, UnmatchedLookupException e, Node node, Type type,                                                 String name, Iterable<? extends Type> targs,                                                 Iterable<? extends Expression> args, Option<Type> expected,                                                 boolean onlyStatic)", "signatureAfterChange": "   private ExecutionError unmatchedFunctionError(String kind, UnmatchedLookupException e, Node node, Type type,                                                 String name, Iterable<? extends Type> targs,                                                 Iterable<? extends Expression> args, Option<Type> expected,                                                 boolean onlyStatic)", "diff": ["+    final TypePrinter printer = ts.typePrinter();", "-    String typeS = (onlyStatic ? \"static \" : \"\") + ts.userRepresentation(type);", "-    String expectedS = expected.isSome() ? ts.userRepresentation(expected.unwrap()) : \"\";", "+    String typeS = (onlyStatic ? \"static \" : \"\") + printer.print(type);", "+    String expectedS = expected.isSome() ? printer.print(expected.unwrap()) : \"\";", "-     candidatesS = SIGNATURE_STRING.value(IterUtil.first(candidates));", "+     candidatesS = printer.print(IterUtil.first(candidates));", "-      candidatesS = IterUtil.toString(IterUtil.map(candidates, SIGNATURE_STRING), prefix, prefix, \"\");", "+      Lambda<Function, String> printSig = new Lambda<Function, String>() {", "+        public String value(Function f) { return printer.print(f); }", "+      };", "+      candidatesS = IterUtil.toString(IterUtil.map(candidates, printSig), prefix, prefix, \"\");", "-    setErrorStrings(node, typeS, name, ts.userRepresentation(targs), nodeTypesString(args), expectedS, candidatesS);", "+    setErrorStrings(node, typeS, name, printer.print(targs), nodeTypesString(args, printer), expectedS, candidatesS);"]}], "num": 31284}
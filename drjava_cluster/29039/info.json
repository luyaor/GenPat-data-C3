{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c1aa22406823235b8c88151deec8e9a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "467f68e2ad1e7779545b37b0cce937c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Void forConstructorDef(ConstructorDef that)", "signatureAfterChange": "   public Void forConstructorDef(ConstructorDef that)", "diff": ["-   */", "+    */", "-    if ((that.getName().getText().indexOf(\".\") != -1 && !that.getName().getText().equals(_enclosingData.getName())) || !name.equals(getUnqualifiedClassName(_enclosingData.getName()))) {", "+    if ((that.getName().getText().indexOf('.') != -1 && ! that.getName().getText().equals(_enclosing.getName()))", "+          || ! name.equals(getUnqualifiedClassName(_enclosing.getName()))) {", "-    SymbolData returnType = _enclosingData;", "+    SymbolData returnType = _enclosing;", "-                                   new VariableData[0], throwStrings, _enclosingData, that);", "+                                    new VariableData[0], throwStrings, _enclosing, that);  // VariableData is dummy", "-    VariableData[] vds = formalParameters2VariableData(that.getParameters(), md);", "+    VariableData[] vds = formalParameters2VariableData(that.getParameters(), _enclosing);", "-    _enclosingData.addMethod(md);", "-    that.getStatements().visit(new BodyBodyFullJavaVisitor(md, _file, _package, _importedFiles, _importedPackages,", "-                                                           _classNamesInThisFile, continuations, ", "-                                                           _innerClassesToBeParsed));", "+    _enclosing.addMethod(md);", "+    that.getStatements().visit(new BodyBodyFullJavaVisitor(md, _file, _package, _enclosingClassName, _importedFiles, ", "+                                                           _importedPackages, _classesInThisFile, continuations, fixUps,", "+                                                           new HashSet<String>()));", "-    _enclosingData.incrementConstructorCount();", "+    _enclosing.incrementConstructorCount();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65b8f4728369ff5747640807482d168f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-    ", "-    MethodData md = createMethodData(that, _enclosingData);", "-    String className = getUnqualifiedClassName(_enclosingData.getName());", "+    assert _enclosing != null;", "+    MethodData md = createMethodData(that, _enclosing);", "+    String className = getUnqualifiedClassName(_enclosing.getName());", "-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors \"", "+                           + \"do not have an explicit return type\",", "-    else {", "-      _enclosingData.addMethod(md);", "-    }", "-    that.getBody().visit(new BodyBodyFullJavaVisitor(md, _file, _package, _importedFiles, _importedPackages, ", "-                                                     _classNamesInThisFile, continuations, _innerClassesToBeParsed));", "+    else _enclosing.addMethod(md);", "+    that.getBody().visit(new BodyBodyFullJavaVisitor(md, _file, _package, _enclosingClassName, _importedFiles, _importedPackages, ", "+                                                     _classesInThisFile, continuations, fixUps, new HashSet<String>()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd3ed83c0db5900e5da55385092a598", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-   */", "+    */", "-    MethodData md = createMethodData(that, _classData);", "+    MethodData md = createMethodData(that, _enclosing);", "-    String className = getUnqualifiedClassName(_classData.getName());", "+    String className = getUnqualifiedClassName(_enclosing.getName());", "-    else _classData.addMethod(md);", "+    else _enclosing.addMethod(md);", "-    that.getBody().visit(new BodyBodyIntermediateVisitor(md, _file, _package, _importedFiles, _importedPackages, ", "-                                                         _classNamesInThisFile, continuations, _innerClassesToBeParsed));", "+    that.getBody().visit(new BodyBodyIntermediateVisitor(md, _file, _package, _enclosingClassName, _importedFiles, ", "+                                                         _importedPackages, _classesInThisFile, continuations, ", "+                                                         fixUps, new HashSet<String>()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5358cde6a7b6a495fe8f53949bee611", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Void forConstructorDef(ConstructorDef that)", "signatureAfterChange": "   public Void forConstructorDef(ConstructorDef that)", "diff": ["-    if (!name.equals(getUnqualifiedClassName(_classData.getName()))) {", "+    if (!name.equals(getUnqualifiedClassName(_enclosing.getName()))) {", "-    SymbolData returnType = _classData;", "+    SymbolData returnType = _enclosing;", "-                                   new VariableData[0], throwStrings, _classData, that);", "+                                   new VariableData[0], throwStrings, _enclosing, that);  // VariableData is dummy", "-    VariableData[] vds = formalParameters2VariableData(that.getParameters(), md);", "+    VariableData[] vds = formalParameters2VariableData(that.getParameters(), _enclosing);", "-    _classData.addMethod(md);", "-    that.getStatements().visit(new BodyBodyIntermediateVisitor(md, _file, _package, _importedFiles, _importedPackages, ", "-                                                               _classNamesInThisFile, continuations, ", "-                                                               _innerClassesToBeParsed));", "+    _enclosing.addMethod(md);", "+    that.getStatements().visit(new BodyBodyIntermediateVisitor(md, _file, _package, _enclosingClassName, _importedFiles,", "+                                                               _importedPackages, _classesInThisFile, continuations, ", "+                                                               fixUps, new HashSet<String>()));", "-    _classData.incrementConstructorCount();", "+    _enclosing.incrementConstructorCount();"]}], "num": 29039}
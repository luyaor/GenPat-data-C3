{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa72ed534e260e1f84c4730450c60b58", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85eeee74a128a512355575060dd90384", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "00ef1eb4d5cc14a02a79039c3a1d533302feb4d3", "commitAfterChange": "c36edada76ee9f3d9322b919e75fbcf066a0cd41", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "signatureAfterChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "diff": ["+   ", "-      \"public class B {\\n\"+", "-      \"  public class C {\\n\"+", "-      \"    String str = \\\"\\\";\\n\"+", "-      \"    public C(String ... args){\\n\"+", "-      \"      for(String  s: args) {\\n\"+", "-      \"        str = str+s;\\n\"+", "-      \"      }\\n\"+", "-      \"    }\\n\"+", "-      \"    public String getStr(){\\n\"+", "-      \"      return str;\\n\"+", "-      \"    }\\n\"+", "-      \"  }\\n\"+", "-      \"}\\n\"+", "-      \"(new B()).new C(\\\"Str1\\\",\\\"Str2\\\",\\\"Str3\\\",\\\"Str4\\\").getStr();\\n\";", "+      \"interface Lambda { public Object apply(Object ... args); } \\n\" +", "+      \"Lambda l = new Lambda() { \\n\" +", "+      \"  public Object apply(Object... args) { \\n\" +", "+      \"    return true; \\n\" +", "+      \"  } \\n\" +", "+      \"}; \\n\" +", "+      \"l.apply()\";", "-    assertEquals(\"Wrong Output.\", \"Str1Str2Str3Str4\", res);", "+    assertEquals(\"Wrong output.\", Boolean.TRUE, res);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5127e8224dc49650b9cc931e3ea5a59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "commitAfterChange": "c363ed10ac87f45c0e34e1a82e2d35e2cafec337", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "signatureAfterChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "diff": ["-    ", "-    text = ", "-      \"public class ClassF { \" +", "-      \"  public ClassF(String ... args) { \" +", "-      \"    for (String s : args) \" +", "-      \"      System.out.println(s);\" +", "-      \"  } \" + ", "-      \"  public String m(String ... args) { \" +", "-      \"    String ret = \\\"\\\"; \" +", "-      \"    for(String s : args) ret += s; \" +", "-      \"    return ret; \" + ", "-      \"  }\" +", "-      \"}\\n\" +", "-      \"new ClassF(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\").m(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\")\";", "-    res = interpret(text);", "-    assertEquals(\"Wrong output.\", \"abcd\", res);", "-    ", "+        ", "-//      \"      for(int i=0;i<s.length;i++) {\\n\"+", "-//      \"        str = str+s[i];\\n\"+", "-//      \"      }\\n\"+"]}], "num": 24673}
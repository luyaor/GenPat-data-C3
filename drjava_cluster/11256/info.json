{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0e4dec4e75bed18b4327c87fd00c67d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16b7a18380e6690fc7b0cd4e2713d612", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 237, "signatureBeforeChange": "       public Boolean value(T1 arg1, T2 arg2)", "signatureAfterChange": "     public Boolean value(T1 arg1, T2 arg2)", "diff": ["-    return new Predicate2<T1, T2>() {", "-      public Boolean value(T1 arg1, T2 arg2) {", "-        for (Predicate2<? super T1, ? super T2> p : preds) { ", "-          if (!p.value(arg1, arg2)) { return false; }", "-        }", "-        return true;", "-      }", "+    public AndPredicate2(Iterable<? extends Predicate2<? super T1, ? super T2>> preds) { _preds = preds; }", "+    public Boolean value(T1 arg1, T2 arg2) {", "+      for (Predicate2<? super T1, ? super T2> p : _preds) { if (!p.value(arg1, arg2)) { return Boolean.FALSE; } }", "+      return Boolean.TRUE;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8826addd5332e48314f6993cc8c27589", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 257, "signatureBeforeChange": "       public Boolean value(T1 arg1, T2 arg2)", "signatureAfterChange": "     public Boolean value(T1 arg1, T2 arg2)", "diff": ["-    return new Predicate2<T1, T2>() {", "-      public Boolean value(T1 arg1, T2 arg2) {", "-        for (Predicate2<? super T1, ? super T2> p : preds) { ", "-          if (p.value(arg1, arg2)) { return true; }", "-        }", "-        return false;", "-      }", "+    public OrPredicate2(Iterable<? extends Predicate2<? super T1, ? super T2>> preds) { _preds = preds; }", "+    public Boolean value(T1 arg1, T2 arg2) {", "+      for (Predicate2<? super T1, ? super T2> p : _preds) { if (p.value(arg1, arg2)) { return Boolean.TRUE; } }", "+      return Boolean.FALSE;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4f5c09533afbd27f219df0db0ac6877", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 221, "signatureBeforeChange": "        public Boolean value(T1 arg1, T2 arg2)", "signatureAfterChange": "     public Boolean value(T1 arg1, T2 arg2)", "diff": ["+    public NegationPredicate2(Predicate2<? super T1, ? super T2> p) { _p = p; }", "+    public Boolean value(T1 arg1, T2 arg2) { return !_p.value(arg1, arg2); }", "-    return new Predicate2<T1, T2>() { ", "-      public Boolean value(T1 arg1, T2 arg2) { return !pred.value(arg1, arg2); }"]}], "num": 11256}
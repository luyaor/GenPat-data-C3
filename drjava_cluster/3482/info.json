{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19b6ed6eb3f6eb3525de3185c9877ed5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59cc64ca6400202fce513f98e376924a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "d999f0af23b00e87ee091cf6b7f8d16576621e4d", "commitAfterChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   private boolean wholeWordFoundAtCurrent(AbstractDocumentInterface doc, int foundOffset)", "signatureAfterChange": "   private boolean wholeWordFoundAtCurrent(AbstractDocumentInterface doc, int foundOffset)", "diff": ["+    String docText;", "+    doc.acquireReadLock();", "-      String docText;", "-      doc.acquireReadLock();", "-      try {", "-        docText = doc.getText(0, doc.getLength());", "-      }", "-      finally {doc.releaseReadLock();}      ", "-      ", "-      Character leftOfMatch = null;", "-      Character rightOfMatch = null;", "-      int leftLocation = foundOffset - 1;", "-      int rightLocation = foundOffset + _findWord.length();", "-      boolean leftOutOfBounds = false;", "-      boolean rightOutOfBounds = false;", "-      ", "-      try { leftOfMatch = new Character(docText.charAt(leftLocation)); }", "-      catch (IndexOutOfBoundsException e) { leftOutOfBounds = true; }", "-      ", "-      try { rightOfMatch = new Character(docText.charAt(rightLocation)); }", "-      catch (IndexOutOfBoundsException e) { rightOutOfBounds = true; }", "-      ", "-      if (!leftOutOfBounds && !rightOutOfBounds) ", "-        return isDelimiter(rightOfMatch) && isDelimiter(leftOfMatch);", "-      if (!leftOutOfBounds) return isDelimiter(leftOfMatch);", "-      if (!rightOutOfBounds) return isDelimiter(rightOfMatch);", "-      return true;", "+      docText = doc.getText();", "-    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    finally {doc.releaseReadLock();}      ", "+    ", "+    Character leftOfMatch = null;", "+    Character rightOfMatch = null;", "+    int leftLocation = foundOffset - 1;", "+    int rightLocation = foundOffset + _findWord.length();", "+    boolean leftOutOfBounds = false;", "+    boolean rightOutOfBounds = false;", "+    ", "+    try { leftOfMatch = new Character(docText.charAt(leftLocation)); }", "+    catch (IndexOutOfBoundsException e) { leftOutOfBounds = true; }", "+    ", "+    try { rightOfMatch = new Character(docText.charAt(rightLocation)); }", "+    catch (IndexOutOfBoundsException e) { rightOutOfBounds = true; }", "+    ", "+    if (!leftOutOfBounds && !rightOutOfBounds) ", "+      return isDelimiter(rightOfMatch) && isDelimiter(leftOfMatch);", "+    if (!leftOutOfBounds) return isDelimiter(leftOfMatch);", "+    if (!rightOutOfBounds) return isDelimiter(rightOfMatch);", "+    return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdeb001ab99a2bbea1f0cb7b127a85ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "97a825e752ef3da28458a0080f0990b0f0659788", "commitAfterChange": "3f50a00dbfaba534529de5a114a9d7c30612e9a7", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   private boolean wholeWordFoundAtCurrent(OpenDefinitionsDocument doc, int foundOffset)", "signatureAfterChange": "   private boolean wholeWordFoundAtCurrent(OpenDefinitionsDocument doc, int foundOffset)", "diff": ["-   */", "+    */", "-    String docText;", "-    doc.acquireReadLock();", "-    try { docText = doc.getText(); }", "-    finally {doc.releaseReadLock();}      ", "-    ", "-    Character leftOfMatch = null;", "-    Character rightOfMatch = null;", "-    int leftLocation = foundOffset - 1;", "-    int rightLocation = foundOffset + _findWord.length();", "+", "+    char leftOfMatch = 0;   //  forced initialization", "+    char rightOfMatch = 0;  //  forced initialization", "+    int leftLoc = foundOffset - 1;", "+    int rightLoc = foundOffset + _findWord.length();", "+", "+    doc.acquireReadLock();", "+    try { ", "+      try { leftOfMatch = doc.getText(leftLoc, 1).charAt(0); }", "+      catch (BadLocationException e) { leftOutOfBounds = true; }", "+      try { rightOfMatch = doc.getText(rightLoc, 1).charAt(0); }", "+      catch (BadLocationException e) { rightOutOfBounds = true; }", "+    }", "+    finally {doc.releaseReadLock();}      ", "-    try { leftOfMatch = new Character(docText.charAt(leftLocation)); }", "-    catch (IndexOutOfBoundsException e) { leftOutOfBounds = true; }", "-    ", "-    try { rightOfMatch = new Character(docText.charAt(rightLocation)); }", "-    catch (IndexOutOfBoundsException e) { rightOutOfBounds = true; }", "-    ", "-    if (!leftOutOfBounds && !rightOutOfBounds) ", "-      return isDelimiter(rightOfMatch) && isDelimiter(leftOfMatch);", "-    if (!leftOutOfBounds) return isDelimiter(leftOfMatch);", "-    if (!rightOutOfBounds) return isDelimiter(rightOfMatch);", "+    if (! leftOutOfBounds && ! rightOutOfBounds) return isDelimiter(rightOfMatch) && isDelimiter(leftOfMatch);", "+    if (! leftOutOfBounds) return isDelimiter(leftOfMatch);", "+    if (! rightOutOfBounds) return isDelimiter(rightOfMatch);"]}], "num": 3482}
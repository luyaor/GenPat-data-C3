{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "445b56b8bde4c043585da427ac1693e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8804aa55382803466b7dbf6ce96c6943", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public synchronized void runTestSequence() throws Exception", "signatureAfterChange": "      public void runTestSequence() throws Exception", "diff": ["-    public synchronized void runTestSequence() throws Exception {", "-      _currentTest = \"runTestSequence\";", "-      _justQuit = false;", "-      _letter = 'a';", "+    public void runTestSequence() throws Exception {", "+      ", "+      synchronized (_testLock) {", "+        _currentTest = \"runTestSequence\";", "+        _justQuit = false;", "+        _connected = false;", "+        _letter = 'a';", "+      }", "+      ", "+      invokeSlave(new String[] {\"-Djava.system.class.loader=edu.rice.cs.util.newjvm.CustomSystemClassLoader\"}, FileOption.NULL_FILE);           ", "-//      long start, end;", "-//      start = System.currentTimeMillis();", "-      invokeSlave(new String[]{\"-Djava.system.class.loader=edu.rice.cs.util.newjvm.CustomSystemClassLoader\"}, FileOption.NULL_FILE);", "-//      invokeSlave();", "-      wait();  // for handleConnected", "-//      end = System.currentTimeMillis();", "-//      System.err.println((end-start) + \"ms waiting for invocation\");", "+      synchronized (_testLock) { while (! _connected) _testLock.wait();  }", "-      // now, wait until five getletter calls passed", "-      // (after fifth call letter is 'f' due to the ++", "-//      start = System.currentTimeMillis();", "-      while (_letter != 'f') {", "-        wait();  // for getLetter()", "-      }", "+      // now, wait until five getletter calls passed; after fifth call letter is 'f' due to the ++", "+      synchronized(_testLock) { while (_letter != 'f') { _testLock.wait(); } }", "-//      end = System.currentTimeMillis();", "-//      System.err.println((end-start) + \"ms waiting for 'f'\");", "-", "-      // now make some slave calls", "-//      start = System.currentTimeMillis();", "-//      end = System.currentTimeMillis();", "-      //System.err.println((end-start) + \"ms calling getNumber\");", "-      // OK, time to kill the slave", "-//      start = System.currentTimeMillis();", "-      wait(); // for quit to finish", "-//      end = System.currentTimeMillis();", "-//      System.err.println((end-start) + \"ms waiting to quit\");", "+      synchronized(_testLock) { while (! _justQuit) _testLock.wait(); } // for quit to finish"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdf88e14d1ae699eeaa67e34404b1620", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public synchronized void runImmediateQuitTest() throws Exception", "signatureAfterChange": "     public void runImmediateQuitTest() throws Exception", "diff": ["-    public synchronized void runImmediateQuitTest() throws Exception {", "-      _currentTest = \"runImmediateQuitTest\";", "-      _justQuit = false;", "-", "-      // this needs to be reset because the slave is going to check it!", "-      _letter = 'a';", "-", "-      invokeSlave(new String[]{\"-Djava.system.class.loader=edu.rice.cs.util.newjvm.CustomSystemClassLoader\"}, FileOption.NULL_FILE);", "-//      invokeSlave();", "+    public void runImmediateQuitTest() throws Exception {", "-      // we don't wait for it to start before calling quit.", "-      // This should not throw an exception! It should quickly return,", "-      // queueing up a quit to be processes ASAP.", "-      quitSlave();", "-", "-      // now we just wait for the quit to process", "-      while (! _justQuit) {", "-        wait();", "+//      Utilities.show(\"ImmediateQuitTest started\");", "+      ", "+      _currentTest = \"runImmediateQuitTest\";", "+      synchronized (_testLock) { ", "+        _justQuit = false; ", "+        _connected = false;", "+        _letter = 'a';  // this needs to be reset because the slave is going to check it!", "-      // If we get here, it worked as expected.", "+      invokeSlave(new String[]{\"-Djava.system.class.loader=edu.rice.cs.util.newjvm.CustomSystemClassLoader\"}, FileOption.NULL_FILE);", "+", "+//      Utilities.show(\"slave invoked\");", "+      ", "+      // Immediately call quit, which should not throw an exception. It should return without waiting.", "+      quitSlave();", "+                     ", "+//      Utilities.show(\"slave quit\");     ", "+", "+      // now we just wait for the quit to process", "+      synchronized(_testLock) { ", "+        while (! _justQuit) _testLock.wait(); ", "+        _currentTest = \"\";  // If we get here, it worked as expected.", "+      }", "+                     ", "+//      Utilities.show(\"ImmediateQuitTest finished\");", "+      ", "-      _currentTest = \"\";"]}], "num": 29296}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c99349fb8f0a2e3b201f7968a5638029", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45642612b53377016fe3d76c2d7e2fa2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "74ef9fbe03efcd82eb19c1e26298c6b9ada091d1", "commitAfterChange": "2635960b836d3430a185539ff1211d21f9bd0bdd", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public OpenDefinitionsDocument openFiles(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public OpenDefinitionsDocument openFiles(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-    OpenDefinitionsDocument retDoc = null;", "-", "+    return _openFiles(files);", "+    ", "+  }", "-", "-", "-      try {", "-        //always return last opened Doc", "-        retDoc = _openFile(files[i].getAbsoluteFile());", "-      catch (AlreadyOpenException aoe) {", "-        retDoc = aoe.getOpenDocument();", "-        //Remember the first AOE", "-        if (storedAOE == null) {", "-          storedAOE = aoe;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c2c21853703637f4b4bd08cb71dfe6c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "commitAfterChange": "2df7289d55456372fbaf4e3ab78549d8571648f8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "signatureAfterChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "diff": ["-  /** Compiles all documents in the specified list of OpenDefinitionsDocuments. */", "+   */", "-    ", "-//    System.err.println(\"compile(\" + defDocs + \") called\");", "-    ", "-    // Only compile if all are saved", "-    if (_hasModifiedFiles(defDocs)) _notifier.saveBeforeCompile();", "-    // check for modified project files, in case they didn't save when prompted", "-    if (_hasModifiedFiles(defDocs)) return;", "-    // if any files haven't been saved after we told our", "-    // listeners to do so, don't proceed with the rest", "-    // of the compile.", "-    ", "-    // Get sourceroots and all files", "+    if (_prepareForCompile()) {", "+      _doCompile(defDocs);", "+    }", "+  }", "-    ", "-    File f;", "-    ", "-    for (OpenDefinitionsDocument doc : defDocs) {", "-        filesToCompile.add(doc.getFile());", "-    ", "-//    System.err.println(\"Filtered list of docs to compile: \" + filesToCompile);", "-    ", "-    _rawCompile(getSourceRootSet(), filesToCompile.toArray(new File[0]), excludedFiles.toArray(new File[0]));", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ab38ebc2dc92a97d1c0cd91624be2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "8279bc33117c74621df6401dedd10a0cae247a2c", "commitAfterChange": "ce3350f89c936debb5fbaa8f27f501d1524368cf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-    synchronized(this) {", "-     if (_startupInProgress) {", "-        return;", "-      }", "+    if (isStartupInProgress()) {", "+      return;", "+    }", "-      _startupInProgress = true;", "-", "-      killInterpreter();", "-", "-      String className = InterpreterJVM.class.getName();", "-      String[] args = new String[] { getIdentifier() };", "-      try {", "-        //System.err.println(\"started interpreter jvm\");", "-        _interpreterProcess = ExecJVM.runJVMPropogateClassPath(className, args);", "-        ", "-        // Start a thread to wait for the interpreter to die and to fire", "-        // off a new one (and notify model) when it happens", "-        Thread thread = new Thread() {", "-          public void run() {", "-            try {", "-              int status = _interpreterProcess.waitFor();", "-              restartInterpreterJVM();", "-              _model.replCalledSystemExit(status);", "-            }", "-            catch (InterruptedException ie) {", "-              throw new edu.rice.cs.util.UnexpectedException(ie);", "-            }", "-          }", "-        };", "-", "-        thread.start();", "-      }", "-      catch (IOException ioe) {", "-        _threwException(ioe);", "-      }", "+    try {", "+      invokeSlave();", "+    }", "+    catch (RemoteException re) {", "+      _threwException(re);", "+    }", "+    catch (IOException ioe) {", "+      _threwException(ioe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55c7336379be1e6abad9adc2e720b813", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "8a844a8f24b61cc57420bdf2211acc634ec89fef", "commitAfterChange": "f22d0a1255bdf1029bb9a8ca3e33cbdaf890f9a0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 29, "signatureBeforeChange": "     protected void rehash ()", "signatureAfterChange": "     public void revert()", "diff": ["-    protected void rehash () {", "-      Entry[] oldTable = table;", "-      ", "-      table     = new Entry[oldTable.length * 2 + 1];", "-      threshold = (int)(table.length * LOAD_FACTOR);", "-      ", "-      for (int i = oldTable.length-1; i >= 0; i--) {", "-        for (Entry old = oldTable[i]; old != null;) {", "-          Entry e = old;", "-          old = old.next;", "-          ", "-          int index = e.hash % table.length;", "-          e.next = table[index];", "-          table[index] = e;", "-        }", "+    public void revert() {", "+      for(String key : _addedKeys) {", "+        _table.remove(key);", "+      _addedKeys.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "610fb5011961b0bfa27b211ebafa44ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "76157e15bbd52f4d2639058382773284b7c9c0bd", "commitAfterChange": "37eb7cd9abe39acb853d1fd344f27a2631ce2406", "methodNumberBeforeChange": 492, "methodNumberAfterChange": 493, "signatureBeforeChange": "      void _saveProjectHelper(File file)", "signatureAfterChange": "      void _saveProjectHelper(File file)", "diff": ["-        String text = \"The project will be saved in XML format.\" + ", "-          \"\\nDo you want to change the project file's extension to \"+PROJECT_FILE_EXTENSION+\"?\";", "-        ", "-        Object[] options = {\"Change to \"+PROJECT_FILE_EXTENSION+\"\", \"Keep \\\"\" + ", "-          fileName.substring(fileName.lastIndexOf('.'))+\"\\\"\"};  ", "-        int rc = 1;", "-        if (!Utilities.TEST_MODE) {", "-          rc = JOptionPane.showOptionDialog(MainFrame.this, text, \"Change Extension?\", JOptionPane.YES_NO_OPTION,", "-                                            JOptionPane.QUESTION_MESSAGE, null, options, options[0]);", "-        }", "-        if (rc == 0) {", "-          fileName = fileName.substring(0,fileName.length() - OLD_PROJECT_FILE_EXTENSION.length()) + ", "-            PROJECT_FILE_EXTENSION;", "-          file = new File(fileName);", "-          if (! file.exists() || _verifyOverwrite(file)) { ", "-            _model.setProjectFile(file);", "-            _currentProjFile = file;", "-          }", "-        }", "+        file = MainFrameUtils.proposeToChangeExtension(MainFrame.this, file,", "+                                                       \"Change Extension?\",", "+                                                       \"The project will be saved in XML format.\"", "+                                                         + \"\\nDo you want to change the project file's extension to \\\"\"", "+                                                         + PROJECT_FILE_EXTENSION+ \"\\\"?\",", "+                                                       \"Change to \\\"\" + PROJECT_FILE_EXTENSION + \"\\\"\",", "+                                                       \"Keep \\\"\" + DrJavaFileUtils.getExtension(fileName) + \"\\\"\",", "+                                                       PROJECT_FILE_EXTENSION);", "+        _model.setProjectFile(file);", "+        _currentProjFile = file;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bcf98f92feb83e2c48821aece9c60ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void _gotoErrorSourceLocation(OpenDefinitionsDocument doc,                                           final int idx)", "signatureAfterChange": "    protected CompilerErrorModel<CompilerError> getErrorModel()", "diff": ["+", "+  protected CompilerErrorModel<CompilerError> getErrorModel(){", "+    return getModel().getCompilerErrorModel();", "+  }", "-     */", "-    private void _gotoErrorSourceLocation(OpenDefinitionsDocument doc,", "-                                          final int idx) {", "-      CompilerErrorModel errorModel = doc.getCompilerErrorModel();", "-      Position[] positions = errorModel.getPositions();", "-", "-", "-      if ((idx < 0) || (idx >= positions.length)) return;", "-", "-      Position pos = positions[idx];", "-      // switch to correct def pane", "-      _model.setActiveDocument(doc);", "-", "-      // move caret to that position", "-      DefinitionsPane defPane = _frame.getCurrentDefPane();", "-      if (pos != null) {", "-        int errPos = pos.getOffset();", "-        if (errPos >= 0 && errPos <= defPane.getText().length()) {", "-          defPane.setCaretPosition(errPos);", "-        }", "-      }", "-      defPane.requestFocus();", "-      defPane.getCaret().setVisible(true);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f774741484784d6070907d8bb79373e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/HashMultiset.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public <E> E[] toArray(E[] fill)", "signatureAfterChange": "   public boolean hasFixedSize()", "diff": ["+  public boolean isInfinite() { return false; }", "+  public boolean hasFixedSize() { return false; }", "-  ", "-  public <E> E[] toArray(E[] fill) {", "-    if (fill.length < _size) { ", "-      @SuppressWarnings(\"unchecked\") E[] newFill = ", "-        (E[]) Array.newInstance(fill.getClass().getComponentType(), _size);", "-      fill = newFill;", "-    }", "-    int i = 0;", "-    for (T elt : this) {", "-      @SuppressWarnings(\"unchecked\") E asE = (E) elt;", "-      fill[i] = asE;", "-      i++;", "-    }", "-    if (i < fill.length) { fill[i] = null; i++; }", "-    return fill;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8203b1e633cafde32a3bffe4f0ce2ab4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "a4a2af26b6c17a91ead92bae0871adcd6e96d716", "commitAfterChange": "d68c02cecc4cc58e597f55ca1d69f68604b75377", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public void indent(final int reason)", "signatureAfterChange": "   protected void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)", "diff": ["-   */", "-  public void indent(final int reason) {", "-", "-    /**", "-     * Because indent() is a function called directly by the Keymap,", "-     * it does not go through the regular insertString channels and thus", "-     * it may not be in sync with the document's position.  For that", "-     * reason, we must sync the document with the pane before we go", "-     * ahead and indent.", "-     * old: _doc().setCurrentLocation(getCaretPosition());", "-     * new:", "-     */", "-    _doc.setCurrentLocation(getCaretPosition());", "-", "-    final int selStart = getSelectionStart();", "-    final int selEnd = getSelectionEnd();", "-", "-    //    final SwingWorker worker = new SwingWorker() {", "-    //      public Object construct() {", "-", "-    //        // Use a progress monitor to show a progress dialog only if necessary.", "-    ProgressMonitor pm = null;", "-    //= new ProgressMonitor(_mainFrame, \"Indenting...\",", "-    //                    null, 0, selEnd - selStart);", "-", "-    //pm.setProgress(0);", "-    // 3 seconds before displaying the progress bar.", "-    //pm.setMillisToDecideToPopup(3000);", "-", "-    // XXX: Temporary hack because of slow indent...", "-    //  Prompt if more than 10000 characters to be indented", "-    boolean doIndent = true;", "-          doIndent = false;", "-          break;", "-          doIndent = true;", "-          break;", "-", "-    // Do the indent", "-    if (doIndent) {", "-      _mainFrame.hourglassOn();", "+   */", "+  protected void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm) {", "+    _mainFrame.hourglassOn();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "866a372ebc2014b288064a405d1ff120", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public void indent()", "signatureAfterChange": "   public void indent()", "diff": ["+   */", "+  public void indent(){", "+  indent(Indenter.OTHER);", "+  }", "-  public void indent() {", "-      _indentLines();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8890057c62ba9ddb2a3c68073b4bab22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "805c373a0ec3b1117a99ab61e1255aea61e2bd63", "commitAfterChange": "4117398987de5205499e8524a48aeb3a8a6b43ad", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public File getMasterWorkingDirectory()", "signatureAfterChange": "   public File getMasterWorkingDirectory()", "diff": ["-      file = DrJava.getConfig().getSetting(LAST_DIRECTORY);", "-      ", "-      // if it's the NULL_FILE, use \"user.home\"", "-      if (file==FileOption.NULL_FILE) {", "-        file = new File(System.getProperty(\"user.home\"));", "-      }", "+      file = FileOps.getValidDirectory(DrJava.getConfig().getSetting(LAST_DIRECTORY));", "-      file = new File(System.getProperty(\"user.home\"));", "+      file = FileOps.getValidDirectory(DrJava.getConfig().getSetting(LAST_DIRECTORY));", "-    while (!file.exists()) {", "-      // if the saved path doesn't exist anymore, try the parent", "-      file = file.getParentFile();", "-    }", "-    if (file==null) {", "-      // somehow we ended up with null, use \"user.home\"", "-      file = new File(System.getProperty(\"user.home\"));", "-    }", "-    // if it's not a directory, try the parent", "-    if (!file.isDirectory()) {", "-      if (file.getParent() != null) file = file.getParentFile();", "-    }", "-", "-    // this should be an existing directory now", "-    if (file.exists() && file.isDirectory()) {", "-\t// update the setting and return it", "-        DrJava.getConfig().setSetting(LAST_DIRECTORY, file);", "-        return file;", "-    }", "-", "-    // ye who enter here, abandon all hope...", "-    // the saved path didn't work, and neither did \"user.home\"", "-    throw new UnexpectedException(new IOException(\"File's parent file is null\"));", "+    // update the setting and return it", "+    DrJava.getConfig().setSetting(LAST_DIRECTORY, file);", "+    return file;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "911d99ca4ad8b8b3e3cd5d7b9676d9ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "f9b63c51c7bc39c2ca858a18aa7508745f80cf7d", "commitAfterChange": "d6d4677e688efef1e947ef9682a8dd44d0381e6b", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void valueChanged(TreeSelectionEvent e)", "signatureAfterChange": "   public void valueChanged(TreeSelectionEvent e)", "diff": ["-    DefaultMutableTreeNode treenode = (DefaultMutableTreeNode)this.getLastSelectedPathComponent();", "-    if(treenode == null)", "-    {", "+    Object treeNode = this.getLastSelectedPathComponent();", "+    if(treeNode == null || !(treeNode instanceof NodeData)) {", "-    else if(!treenode.isLeaf())", "-    {", "-      for(int i = 0; i<navListeners.size(); i++)", "-      {", "-        navListeners.elementAt(i).lostSelection(_currSelected);", "+    NodeData newSelection = (NodeData)treeNode;", "+    if(_currSelected != newSelection) {", "+      for(INavigationListener listener : navListeners) {", "+        listener.lostSelection(_currSelected);", "+        listener.gainedSelection(newSelection);", "-      _currSelected = null;", "-      return;", "-    }", "-    INavigatorItem newselection = (INavigatorItem)treenode.getUserObject();", "-    if(newselection == null)", "-    {", "-      return;", "-    }", "-    ", "-    if(_currSelected != newselection)", "-    {", "-      for(int i = 0; i<navListeners.size(); i++)", "-      {", "-        navListeners.elementAt(i).lostSelection(_currSelected);", "-        navListeners.elementAt(i).gainedSelection(newselection);", "-      }", "-      _currSelected = newselection;", "+      _currSelected = newSelection;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "980d85e83d1b9a910b502e5284692a2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "4a5d73f26539ac3437580a184cbddb734465435e", "commitAfterChange": "c9e80bbae1d05915842b741e3f824da56b5b7a57", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public String getClasspath()", "signatureAfterChange": "   public Vector<String> getClasspath()", "diff": ["-  public String getClasspath() {", "+  public Vector<String> getClasspath() {", "+    return _interpreterControl.getClasspath();", "+    /*", "+    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a751741168094f7f633ae715d20b7e51", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   synchronized void scrollToSource(Location location, boolean shouldHighlight)", "signatureAfterChange": "   synchronized void scrollToSource(Location location, boolean shouldHighlight)", "diff": ["-      filename = rt.sourceName();", "-      filename = getPackageDir(rt.name()) + filename;", "+      filename = getPackageDir(rt.name()) + rt.sourceName();", "-      ", "+", "-      ", "+", "-    File[] sourceRoots = _model.getSourceRootSet();", "-    Vector<File> roots = new Vector<File>();", "-    for (int i=0; i < sourceRoots.length; i++) {", "-      roots.addElement(sourceRoots[i]);", "-    }", "-    File f = _model.getSourceFileFromPaths(filename, roots);", "-    if (f == null) {", "-      Vector<File> sourcepath =", "-        DrJava.getConfig().getSetting(OptionConstants.DEBUG_SOURCEPATH);", "-      f = _model.getSourceFileFromPaths(filename, sourcepath);", "-    }", "+    File f = _model.getSourceFile(filename);", "+//    File[] sourceRoots = _model.getSourceRootSet();", "+//    Vector<File> roots = new Vector<File>();", "+//    for (int i=0; i < sourceRoots.length; i++) {", "+//      roots.addElement(sourceRoots[i]);", "+//    }", "+//    File f = _model.getSourceFileFromPaths(filename, roots);", "+//    if (f == null) {", "+//      Vector<File> sourcepath =", "+//        DrJava.getConfig().getSetting(OptionConstants.DEBUG_SOURCEPATH);", "+//      f = _model.getSourceFileFromPaths(filename, sourcepath);", "+//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad0ff6c9710e48274477655ac2262047", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "f1daacb1f9c546b2b765d3fc6cc41bd412931a0f", "commitAfterChange": "591ec87995880046281596623701cb5a561fc66e", "methodNumberBeforeChange": 345, "methodNumberAfterChange": 345, "signatureBeforeChange": "     private File _locateClassFile()", "signatureAfterChange": "     private File _locateClassFile()", "diff": ["+      // TODO: define in terms of GlobalModel.getClassPath()", "+      ", "-      String cp = System.getProperty(\"java.class.path\");", "-      String pathSeparator = System.getProperty(\"path.separator\");", "-      Vector<File> cpVector = new Vector<File>();", "-      int i = 0;", "-      while (i < cp.length()) {", "-        int nextSeparator = cp.indexOf(pathSeparator, i);", "-        if (nextSeparator == -1) {", "-          cpVector.add(new File(cp.substring(i, cp.length())));", "-          break;", "-        }", "-        cpVector.add(new File(cp.substring(i, nextSeparator)));", "-        i = nextSeparator + 1;", "-      }", "-      classFile = findFileInPaths(fileName, cpVector);", "+      classFile = findFileInPaths(fileName, RUNTIME_CLASS_PATH);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c195ac630893aa248bad52e419e80893", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "27c256ec9281e0464172656b15ccb73506c1cbc1", "commitAfterChange": "efe2cdfa860877c37343dbc5d29e380b33344492", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void chooseFile()", "signatureAfterChange": "   protected abstract Action _getAddAction();", "diff": ["-   */", "-  public void chooseFile() {", "-    File selection = (File) _list.getSelectedValue();", "-    if (selection != null) {", "-      File parent = selection.getParentFile();", "-      if (parent != null) {", "-        _jfc.setCurrentDirectory(parent);", "-      }", "-    }", "-", "-    _jfc.setFileFilter(_fileFilter);", "-", "-    File[] c = null;", "-    int returnValue = _jfc.showDialog(_parent, null);", "-    if (returnValue == JFileChooser.APPROVE_OPTION) {", "-      c = _jfc.getSelectedFiles();", "-    }", "-    if (c != null) {", "-      for(int i = 0; i < c.length; i++) {", "-        _listModel.addElement(c[i]);", "-      }", "-    }", "-  }", "+  protected abstract Action _getAddAction();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d128e50ccc9376828d8af5362d4ca83f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   protected String getCompilerErrorString()", "signatureAfterChange": "   protected String getCompilerErrorString()", "diff": ["-    buf.append(_model.getNumErrors());", "-    CompilerError[] modelErrors = _model.getCompilerErrorsWithoutFiles();", "-    if (modelErrors.length > 0) {", "-      buf.append(\"Without files:\\n\");", "-      for (int i=0; i < modelErrors.length; i++) {", "-        buf.append(modelErrors[i]);", "-        buf.append(\"\\n  \");", "-      }", "-    }", "-    buf.append(\"With files:\\n\");", "-    ListModel docs = _model.getDefinitionsDocuments();", "-    for (int i=0; i < docs.getSize(); i++) {", "-      OpenDefinitionsDocument doc = (OpenDefinitionsDocument) docs.getElementAt(i);", "-      buf.append(doc.getCompilerErrorModel().toString());", "-    }", "+    buf.append(_model.getCompilerErrorModel().toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d75ac86e8d20a7533864ade2dc614841", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void init(UIAdapter adapter)", "signatureAfterChange": "      public void shutdown()", "diff": ["+  ", "+  public void shutdown() {", "+    if (isReady()) {", "+      _vm.dispose();", "+      _vm = null;", "+    }", "-   */", "-   }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4bcd0388ebb6d552a7c4f42c2fee1c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "8a844a8f24b61cc57420bdf2211acc634ec89fef", "commitAfterChange": "f22d0a1255bdf1029bb9a8ca3e33cbdaf890f9a0", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public Object put(String key, Object value)", "signatureAfterChange": "     public Object put(String key, Object value)", "diff": ["-      int hash  = key.hashCode() & 0x7FFFFFFF;", "-      int index = hash % table.length;", "-      ", "-      for (Entry e = table[index]; e != null; e = e.next) {", "-        if ((e.hash == hash) && e.key.equals(key)) {", "-          Object old = e.value;", "-          e.value = value;", "-          return old;", "-        }", "-      }", "-      ", "-      // The key is not in the hash table", "-      if (count++ >= threshold) {", "-        rehash();", "-        index = hash % table.length;", "-      }", "-      ", "-      Entry e = EntryFactory.createEntry(hash, key, value, table[index]);", "-      table[index] = e;", "-      return NO_SUCH_KEY;", "+      boolean wasThere = _table.containsKey(key);", "+      Object val = _table.put(key,value);", "+      _addedKeys.add(key);", "+      return (wasThere) ? val : NO_SUCH_KEY;"]}], "num": 2160}
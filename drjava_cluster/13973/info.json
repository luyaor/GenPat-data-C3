{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eec42d1aff5d39113d9ed473a02d8e85", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccf3686f9a12fbf13122d0341a1bb396", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "fda2639b8f33ecf044705f9cb480e25dbae0c84a", "commitAfterChange": "3c5a933a3b7bdbbae2845e4b6fe81e012901940b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private JPanel makeCommandPane()", "signatureAfterChange": "      private JPanel makeCommandPane()", "diff": ["-    c.gridwidth = 1;", "+    c.weighty = 0.0;", "+    c.weighty = 32.0;", "-    _commandLine = new JRowColumnTextPane(4,40);", "+    _commandLine = new JTextPane();", "-             _okCommandButton.requestFocus();", "+             _commandWorkDirLine.requestFocus();", "+    c.weighty = 0.0;", "+    c.weighty = 32.0;", "-    _commandLinePreview = new JRowColumnTextPane(4,40);", "+    _commandLinePreview = new JTextPane();", "+    c.weighty = 0.0;", "-    JLabel workDirLabel = new JLabel(\"Working directory:\");", "+    JLabel workDirLabel = new JLabel(\"Work directory:\");", "+    c.weighty = 8.0;", "+    c.gridwidth = GridBagConstraints.RELATIVE;", "+    c.insets = compInsets;", "+    ", "+    _commandWorkDirLine = new JTextPane();", "+    // do not allow a newline", "+    _commandWorkDirLine.addKeyListener(new KeyListener() {", "+      public void keyPressed(KeyEvent e) {", "+        if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "+          e.consume();", "+        }", "+        else if (e.getKeyCode() == KeyEvent.VK_TAB) {", "+           e.consume();", "+           if (e.isShiftDown()) {", "+             _commandLine.requestFocus();", "+           }", "+           else {", "+             _okCommandButton.requestFocus();", "+           }", "+        }", "+      }", "+      public void  keyReleased(KeyEvent e) { }", "+      public void  keyTyped(KeyEvent e) { }", "+    });", "+    JScrollPane commandWorkDirLineSP = new JScrollPane(_commandWorkDirLine);", "+    commandWorkDirLineSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(commandWorkDirLineSP, c);", "+    main.add(commandWorkDirLineSP);", "+    ", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.insets = compInsets;", "+    ", "+    _commandWorkDirBtn = new JButton(\"...\");", "+    _commandWorkDirBtn.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) { chooseFile(_commandWorkDirLine); }", "+    });", "+    gridbag.setConstraints(_commandWorkDirBtn, c);", "+    main.add(_commandWorkDirBtn);", "+    ", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = 1;", "+    c.insets = labelInsets;", "+    JLabel commandWorkDirLinePreviewLabel = new JLabel(\"Work directory preview:\");", "+    gridbag.setConstraints(commandWorkDirLinePreviewLabel, c);", "+    main.add(commandWorkDirLinePreviewLabel);", "+", "+    c.weightx = 1.0;", "+    c.weighty = 8.0;", "-    _commandWorkDirSelector = createDirectorySelector();", "-    gridbag.setConstraints(_commandWorkDirSelector, c);", "-    main.add(_commandWorkDirSelector);", "+    _commandWorkDirLinePreview = new JTextPane();", "+    _commandWorkDirLineDoc = (StyledDocument)_commandWorkDirLinePreview.getDocument();", "+", "+    _commandWorkDirLinePreview.setEditable(false);", "+    _commandWorkDirLinePreview.setBackground(Color.LIGHT_GRAY);", "+    _commandWorkDirLinePreview.setSelectedTextColor(Color.LIGHT_GRAY);", "+    JScrollPane commandWorkDirLinePreviewSP = new JScrollPane(_commandWorkDirLinePreview);", "+    commandWorkDirLinePreviewSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(commandWorkDirLinePreviewSP, c);", "+    main.add(commandWorkDirLinePreviewSP);", "-          // Java Command line", "+          // command line", "-                         _javaCommandLineCmdAS,", "-                         _javaVarCommandLineCmdStyle,", "-                         _javaVarErrorCommandLineCmdStyle);", "+                         _commandLineCmdAS,", "+                         _varCommandLineCmdStyle,", "+                         _varErrorCommandLineCmdStyle);", "-          _javaCommandLinePreview.setText(\"Error.\");", "+          _commandLinePreview.setText(\"Error.\");", "-    ", "+", "+    // update the preview of the actual command line post substitution", "+    _workDirDocumentListener = new DocumentListener() {", "+      public void update(DocumentEvent e) {", "+        try {", "+          // preview", "+          _commandWorkDirLineDoc.remove(0,_commandWorkDirLineDoc.getLength());", "+          LOG.log(\"_commandWorkDirLine.getText() = '\"+_commandWorkDirLine.getText()+\"'\");", "+          String text = replaceVariables(_commandWorkDirLine.getText(), System.getProperties());", "+          LOG.log(\"text = '\"+text+\"'\");", "+          _commandWorkDirLineDoc.insertString(0, text, null);", "+          ", "+          // command line", "+          colorVariables(_commandWorkDirLine,", "+                         this,", "+                         System.getProperties(),", "+                         _commandLineCmdAS,", "+                         _varCommandLineCmdStyle,", "+                         _varErrorCommandLineCmdStyle);", "+          LOG.log(\"colorVariables\");", "+        }", "+        catch(BadLocationException ble) {", "+          _commandLinePreview.setText(\"Error: \"+ble);", "+        }", "+      }", "+      public void changedUpdate(DocumentEvent e) { update(e); }", "+      public void insertUpdate(DocumentEvent e) { update(e); }", "+      public void removeUpdate(DocumentEvent e)  { update(e); }", "+    };", "+    _commandWorkDirLine.getDocument().addDocumentListener(_workDirDocumentListener);", "+    _commandWorkDirLine.setText(\"%user.dir%\");", "+    _workDirDocumentListener.changedUpdate(null);", "+", "+        _workDirDocumentListener.changedUpdate(null);", "+        _workDirDocumentListener.changedUpdate(null);", "-    ", "+", "+    _lastCommandFocus = _commandLine;", "+      @SuppressWarnings(\"unchecked\")", "+      public void focusGained(FocusEvent e) {", "+        _lastCommandFocus = (JTextPane)e.getComponent();", "+      }", "-        if (e.getOppositeComponent() == _commandLinePreview) {", "+        if ((e.getOppositeComponent() == _commandLinePreview) || ", "+            (e.getOppositeComponent() == _commandWorkDirLinePreview)) {", "+        }", "+      }", "+    });", "+    _commandWorkDirLine.addFocusListener(new FocusAdapter() {", "+      @SuppressWarnings(\"unchecked\")", "+      public void focusGained(FocusEvent e) {", "+        _lastCommandFocus = (JTextPane)e.getComponent();", "+      }", "+      public void focusLost(FocusEvent e) {", "+        if ((e.getOppositeComponent() == _commandLinePreview) || ", "+            (e.getOppositeComponent() == _commandWorkDirLinePreview)) {", "+          _commandWorkDirLine.requestFocus();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfe3b86ca422c235df7a233767300e94", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "fda2639b8f33ecf044705f9cb480e25dbae0c84a", "commitAfterChange": "3c5a933a3b7bdbbae2845e4b6fe81e012901940b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 37, "signatureBeforeChange": "      private JPanel makeJavaPane()", "signatureAfterChange": "      private JPanel makeJavaPane()", "diff": ["-    c.weighty = 1.0;", "-    c.gridwidth = 1;", "+    c.weighty = 0.0;", "+    c.weighty = 32.0;", "-    _jvmLine = new JRowColumnTextPane(4,40);", "+    _jvmLine = new JTextPane();", "+    c.weighty = 0.0;", "+    c.weighty = 32.0;", "-    _javaCommandLine = new JRowColumnTextPane(4,40);", "+    _javaCommandLine = new JTextPane();", "-             _okCommandButton.requestFocus();", "+             _javaCommandWorkDirLine.requestFocus();", "+    c.weighty = 0.0;", "-    JLabel javaCommandLinePreviewLabel = new JLabel(\"Java command line preview:\");", "+    JLabel javaCommandLinePreviewLabel = new JLabel(\"Command line preview:\");", "+    c.weighty = 32.0;", "-    _javaCommandLinePreview = new JRowColumnTextPane(4,40);", "+    _javaCommandLinePreview = new JTextPane();", "+    c.weighty = 0.0;", "-    JLabel workDirLabel = new JLabel(\"Working directory:\");", "-    gridbag.setConstraints(workDirLabel, c);", "-    main.add(workDirLabel);", "+    JLabel javaWorkDirLabel = new JLabel(\"Work directory:\");", "+    gridbag.setConstraints(javaWorkDirLabel, c);", "+    main.add(javaWorkDirLabel);", "+    c.weighty = 12.0;", "+    c.gridwidth = GridBagConstraints.RELATIVE;", "+    c.insets = compInsets;", "+    ", "+    _javaCommandWorkDirLine = new JTextPane();", "+    // do not allow a newline", "+    _javaCommandWorkDirLine.addKeyListener(new KeyListener() {", "+      public void keyPressed(KeyEvent e) {", "+        if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "+          e.consume();", "+        }", "+        else if (e.getKeyCode() == KeyEvent.VK_TAB) {", "+           e.consume();", "+           if (e.isShiftDown()) {", "+             _javaCommandLine.requestFocus();", "+           }", "+           else {", "+             _okJavaButton.requestFocus();", "+           }", "+        }", "+      }", "+      public void  keyReleased(KeyEvent e) { }", "+      public void  keyTyped(KeyEvent e) { }", "+    });", "+    JScrollPane javaCommandWorkDirLineSP = new JScrollPane(_javaCommandWorkDirLine);", "+    javaCommandWorkDirLineSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(javaCommandWorkDirLineSP, c);", "+    main.add(javaCommandWorkDirLineSP);", "+", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.insets = compInsets;", "+    ", "+    _javaCommandWorkDirBtn = new JButton(\"...\");", "+    _javaCommandWorkDirBtn.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) { chooseFile(_javaCommandWorkDirLine); }", "+    });", "+    gridbag.setConstraints(_javaCommandWorkDirBtn, c);", "+    main.add(_javaCommandWorkDirBtn);", "+    ", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = 1;", "+    c.insets = labelInsets;", "+    JLabel javaCommandWorkDirLinePreviewLabel = new JLabel(\"Work directory preview:\");", "+    gridbag.setConstraints(javaCommandWorkDirLinePreviewLabel, c);", "+    main.add(javaCommandWorkDirLinePreviewLabel);", "+", "+    c.weightx = 1.0;", "+    c.weighty = 12.0;", "-    _javaCommandWorkDirSelector = createDirectorySelector();", "-    gridbag.setConstraints(_javaCommandWorkDirSelector, c);", "-    main.add(_javaCommandWorkDirSelector);", "-    ", "+    _javaCommandWorkDirLinePreview = new JTextPane();", "+    _javaCommandWorkDirLineDoc = (StyledDocument)_javaCommandWorkDirLinePreview.getDocument();", "+", "+    _javaCommandWorkDirLinePreview.setEditable(false);", "+    _javaCommandWorkDirLinePreview.setBackground(Color.LIGHT_GRAY);", "+    _javaCommandWorkDirLinePreview.setSelectedTextColor(Color.LIGHT_GRAY);", "+    JScrollPane javaCommandWorkDirLinePreviewSP = new JScrollPane(_javaCommandWorkDirLinePreview);", "+    javaCommandWorkDirLinePreviewSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(javaCommandWorkDirLinePreviewSP, c);", "+    main.add(javaCommandWorkDirLinePreviewSP);", "+", "+", "+    // update the preview of the actual work dir post substitution", "+    _javaWorkDirDocumentListener = new DocumentListener() {", "+      public void update(DocumentEvent e) {", "+        try {", "+          // preview", "+          _javaCommandWorkDirLineDoc.remove(0,_javaCommandWorkDirLineDoc.getLength());", "+          String text = replaceVariables(_javaCommandWorkDirLine.getText(), System.getProperties());", "+          _javaCommandWorkDirLineDoc.insertString(0, text, null);", "+          ", "+          // work dir", "+          colorVariables(_javaCommandWorkDirLine,", "+                         this,", "+                         System.getProperties(),", "+                         _javaCommandLineCmdAS,", "+                         _javaVarCommandLineCmdStyle,", "+                         _javaVarErrorCommandLineCmdStyle);", "+", "+        }", "+        catch(BadLocationException ble) {", "+          _javaCommandWorkDirLinePreview.setText(\"Error: \"+ble);", "+        }", "+      }", "+      public void changedUpdate(DocumentEvent e) { update(e); }", "+      public void insertUpdate(DocumentEvent e) { update(e); }", "+      public void removeUpdate(DocumentEvent e)  { update(e); }", "+    };", "+    _javaCommandWorkDirLine.getDocument().addDocumentListener(_javaWorkDirDocumentListener);", "+    _javaCommandWorkDirLine.setText(\"%user.dir%\");", "+    _javaWorkDirDocumentListener.changedUpdate(null);", "-        _lastJavaFocus = (JRowColumnTextPane)e.getComponent();", "+        _lastJavaFocus = (JTextPane)e.getComponent();", "-        if (e.getOppositeComponent() == _javaCommandLinePreview) {", "+        if ((e.getOppositeComponent() == _javaCommandLinePreview) ||", "+            (e.getOppositeComponent() == _javaCommandWorkDirLinePreview))", "-      }", "-    });", "+      });", "-        _lastJavaFocus = (JRowColumnTextPane)e.getComponent();", "+        _lastJavaFocus = (JTextPane)e.getComponent();", "-        if (e.getOppositeComponent() == _javaCommandLinePreview) {", "+        if ((e.getOppositeComponent() == _javaCommandLinePreview) ||", "+            (e.getOppositeComponent() == _javaCommandWorkDirLinePreview))", "-        }", "+    });", "+    _javaCommandWorkDirLine.addFocusListener(new FocusAdapter() {", "+      @SuppressWarnings(\"unchecked\")", "+      public void focusGained(FocusEvent e) {", "+        _lastJavaFocus = (JTextPane)e.getComponent();", "+      }", "+      public void focusLost(FocusEvent e) {", "+        if ((e.getOppositeComponent() == _javaCommandLinePreview) ||", "+            (e.getOppositeComponent() == _javaCommandWorkDirLinePreview))", "+          _javaCommandWorkDirLine.requestFocus();", "+        }"]}], "num": 13973}
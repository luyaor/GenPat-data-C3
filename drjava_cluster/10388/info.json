{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da07bb5af67ca7258ff37ac493719ad1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "429ccaebdca8f4b04ed3a9266ec79d53", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected static String getStackTrace(Throwable t)", "signatureAfterChange": "   protected static String getStackTrace(Throwable t)", "diff": ["-    // OK, now we search back to front looking for the first thing that's not", "-    // prefixed by edu.rice.cs.drjava or koala.dynamicjava.", "-    // We remove the extraneous items.", "-    while (! traceItems.isEmpty()) {", "-      String last = (String) traceItems.getLast();", "-      last = last.trim();", "-", "-      if (last.startsWith(\"at edu.rice.cs.drjava.\") ||", "-          last.startsWith(\"at koala.dynamicjava.\"))", "+    // OK, now we crop off everything after the first \"koala.dynamicjava.\" or", "+    //  \"edu.rice.cs.drjava.\", if there is one.", "+    ", "+    //  First, find the index of an occurrence.", "+    int index = -1;", "+    for (int i=0; i < traceItems.size(); i++) {", "+      String item = (String) traceItems.get(i);", "+      item = item.trim();", "+      if (item.startsWith(\"at edu.rice.cs.drjava.\") ||", "+          item.startsWith(\"at koala.dynamicjava.\"))", "-        traceItems.removeLast();", "-      }", "-      else {", "+        index = i;", "-", "-    // Now, check if the last item here is a java.lang.reflect. If so,", "-    // get rid of it.", "-    if (! traceItems.isEmpty()) {", "-      String last = (String) traceItems.getLast();", "-      last = last.trim();", "-", "-      if (last.startsWith(\"at java.lang.reflect.\")) {", "+    ", "+    // Now crop off the rest", "+    if (index > -1) {", "+      while (traceItems.size() > index) {", "-      }", "-    }", "-", "-    // sigh. on jdk 1.4 above the java.lang.reflect there", "-    // are some sun.reflect entries. get rid of em", "-    while (! traceItems.isEmpty()) {", "-      String last = (String) traceItems.getLast();", "-      last = last.trim();", "-", "-      if (last.startsWith(\"at sun.reflect.\"))", "-      {", "-        traceItems.removeLast();", "-      }", "-      else {", "-        break;", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c61b48a02391d9c0edd29d5545b80c3b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "321e79b1f242fd0fc2fe88ee000f7a52383c7144", "commitAfterChange": "511e6cd8ca564113db7580e483d49804656e893b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public CompilerInterface[] getAvailableCompilers()", "diff": ["-    Iterator<String> itor = _registeredCompilers.listIterator();", "+//    Iterator<String> itor = _registeredCompilers.listIterator();", "-    while (itor.hasNext()) {", "-      String name = itor.next();", "+//    while (itor.hasNext()) {", "+//    String name = itor.next();", "+    for (int i = 0; i < DEFAULT_COMPILERS.length; i++) {", "-", "-      try {", "-        _createCompiler(name, availableCompilers);", "-      }", "-      catch (Throwable t) {", "+      for (int j = 0; j < DEFAULT_COMPILERS[i].length; j++) {", "+        String name = DEFAULT_COMPILERS[i][j];", "+        try {", "+          if (_createCompiler(name, availableCompilers)) {", "+            break;", "+          }", "+        }", "+        catch (Throwable t) {", "+        }", "-    itor = DrJava.getConfig().getSetting(OptionConstants.EXTRA_COMPILERS).iterator();", "-", "-    while (itor.hasNext()) {", "-      String name = itor.next();", "-      try {", "-        _createCompiler(name, availableCompilers);", "-      }", "-      catch (Throwable t) {", "-        // Custom compiler failed to load.  Signal the user?", "-//        System.err.println(\"Unable to load \" + name);", "-      }", "-    }", "+//    itor = DrJava.getConfig().getSetting(OptionConstants.EXTRA_COMPILERS).iterator();", "+//", "+//    while (itor.hasNext()) {", "+//      String name = itor.next();", "+//      try {", "+//        _createCompiler(name, availableCompilers);", "+//      }", "+//      catch (Throwable t) {", "+//        // Custom compiler failed to load.  Signal the user?", "+////        System.err.println(\"Unable to load \" + name);", "+//      }", "+//    }"]}], "num": 10388}
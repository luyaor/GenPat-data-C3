{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48fc16244500c3f1da83a6a35a9abab4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2635e8a3ef7738d3501b34d4aaafdcff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void dispose() throws RemoteException", "signatureAfterChange": "   protected void dispose()", "diff": ["+   */", "+  protected void dispose() {", "+    while (!_monitor.compareAndSet(State.FRESH, State.DISPOSED)) {", "+      debug.logValue(\"Waiting for FRESH state\", \"current state\", _monitor.value());", "+      try { _monitor.ensureState(State.FRESH); }", "+      catch (InterruptedException e) { throw new UnexpectedException(e); }", "+    }", "+    debug.log(\"Entered DISPOSED state\");", "+    try { UnicastRemoteObject.unexportObject(this, true); }", "+    catch (NoSuchObjectException e) { error.log(e); }", "-  /** Withdraws RMI exports for this. */", "-  public void dispose() throws RemoteException {", "-    _log.log(this + \".dispose() called; slaveRemote is \" + _slave);", "-    if (_startupInProgress) _log.log(this + \".dispose() is KILLing startUp in process; dying slave reference does not yet exist\");", "-    SlaveRemote dyingSlave;", "-    synchronized(_masterJVMLock) {", "-      _masterStub = null;", "-      if (_monitorThread != null) _monitorThread = null;", "-      dyingSlave = _slave;  // save value of _slave in case it is not null", "-      _slave = null;", "-      ", "-      // Withdraw RMI exports", "-      // Slave in process of starting will die because master is inaccessible.", "-      _log.log(this + \".dispose() UNEXPORTing \" + this);", "-      UnicastRemoteObject.unexportObject(this, true);", "-    }", "-    if (dyingSlave != null) { ", "-      _log.log(this + \".dispose() QUITing \" + dyingSlave);", "-      dyingSlave.quit();  // unsynchronized; may hasten the death of dyingSlave", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "866b2cf12611f8433c1609cb59fc605f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected final void quitSlave() throws RemoteException", "signatureAfterChange": "   protected final void quitSlave()", "diff": ["+   */", "+  protected final void quitSlave() {", "+    if (isDisposed()) { throw new IllegalStateException(); }", "+", "+    // verify that we're in the right state, and that only one thread will quit at a time", "+    while (!_monitor.compareAndSet(State.RUNNING, State.QUITTING)) {", "+      debug.logValue(\"Waiting for RUNNING state\", \"current state\", _monitor.value());", "+      try { _monitor.ensureState(State.RUNNING); }", "+      catch (InterruptedException e) { throw new UnexpectedException(e); }", "+    }", "+    debug.log(\"Entered QUITTING state\");", "+    attemptQuit(_slave);", "+    _slave = null;", "+    _monitor.set(State.FRESH);", "+  }", "-    */", "-  protected final void quitSlave() throws RemoteException {", "-    SlaveRemote dyingSlave;", "-    synchronized(_masterJVMLock) {", "-      if (isStartupInProgress()) {", "-        /* There is a slave to be quit, but _slave == null, so we cannot contact it yet. Instead we set _quitOnStartup", "-         * and tell the slave to quit when it registers in registerSlave. */", "-        _quitOnStartup = true;", "-        return;", "-      }", "-      else if (_slave == null)  {", "-        _log.log(this + \" called quitSlave() when no slave was running\");", "-        return;", "-      }", "-      else {", "-        dyingSlave = _slave;", "-        _slave = null;", "-      }", "-    }", "-    dyingSlave.quit();  // remote operation is not synchronized!", "-  }"]}], "num": 11896}
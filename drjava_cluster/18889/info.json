{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f709ad1ab3e72ee68d3042784c883dc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ee645db41c78b8a74e7a594a0667c5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "40fa5284e8c663707faeb41ae0125801be606b5b", "commitAfterChange": "e116917927a60a297ec1454565818ede1b4cec2d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testNonStaticWatches() throws Exception", "signatureAfterChange": "   public void testNonStaticWatches() throws Exception", "diff": ["-    ", "+", "-    ", "+", "-    ", "+", "-    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "-    assertEquals(\"watch value incorrect\", \"6\", watches.elementAt(0).getValue());", "-    assertEquals(\"watch value incorrect\", \"8\", watches.elementAt(1).getValue());", "-    assertEquals(\"watch value incorrect\", \"10\", watches.elementAt(2).getValue());", "-    assertEquals(\"watch value incorrect\", \"12\", watches.elementAt(3).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    assertEquals(\"watch value incorrect\", \"null\", watches.elementAt(5).getValue());", "-    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.elementAt(5).getType());", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.get(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.get(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.get(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.get(4).getName());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.get(5).getName());", "+    assertEquals(\"watch value incorrect\", \"6\", watches.get(0).getValue());", "+    assertEquals(\"watch value incorrect\", \"8\", watches.get(1).getValue());", "+    assertEquals(\"watch value incorrect\", \"10\", watches.get(2).getValue());", "+    assertEquals(\"watch value incorrect\", \"12\", watches.get(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(4).getValue());", "+    assertEquals(\"watch value incorrect\", \"null\", watches.get(5).getValue());", "+    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.get(5).getType());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch value incorrect\", \"0\", watches.elementAt(1).getValue());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch value incorrect\", \"0\", watches.get(1).getValue());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch value incorrect\", \"8\", watches.elementAt(1).getValue());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch value incorrect\", \"8\", watches.get(1).getValue());", "-   ", "+", "-    ", "+", "-    ", "+", "-    ", "+", "-    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "-    assertEquals(\"watch value incorrect\", \"7\", watches.elementAt(0).getValue());", "-    assertEquals(\"watch value incorrect\", \"9\", watches.elementAt(1).getValue());", "-    assertEquals(\"watch value incorrect\", \"11\", watches.elementAt(2).getValue());", "-    assertEquals(\"watch value incorrect\", \"13\", watches.elementAt(3).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    assertEquals(\"watch value incorrect\", \"null\", watches.elementAt(5).getValue());", "-    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.elementAt(5).getType());", "-    ", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.get(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.get(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.get(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.get(4).getName());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.get(5).getName());", "+    assertEquals(\"watch value incorrect\", \"7\", watches.get(0).getValue());", "+    assertEquals(\"watch value incorrect\", \"9\", watches.get(1).getValue());", "+    assertEquals(\"watch value incorrect\", \"11\", watches.get(2).getValue());", "+    assertEquals(\"watch value incorrect\", \"13\", watches.get(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(4).getValue());", "+    assertEquals(\"watch value incorrect\", \"null\", watches.get(5).getValue());", "+    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.get(5).getType());", "+", "-    ", "+", "-    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "-    assertEquals(\"watch value incorrect\", \"7\", watches.elementAt(0).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(1).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(2).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(3).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(5).getValue());", "-    assertEquals(\"watch type incorrect\", DebugWatchData.NO_TYPE, watches.elementAt(5).getType());", "-    ", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.get(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.get(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.get(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.get(4).getName());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.get(5).getName());", "+    assertEquals(\"watch value incorrect\", \"7\", watches.get(0).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(1).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(2).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(4).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(5).getValue());", "+    assertEquals(\"watch type incorrect\", DebugWatchData.NO_TYPE, watches.get(5).getType());", "+", "-    debugListener.assertCurrThreadDiedCount(0);    ", "-    ", "+    debugListener.assertCurrThreadDiedCount(0);", "+", "-    assertEquals(\"watch name incorrect\", \"localVar\", watches.elementAt(6).getName());", "-    assertEquals(\"watch value incorrect\", \"11\", watches.elementAt(6).getValue());", "-    ", "+    assertEquals(\"watch name incorrect\", \"localVar\", watches.get(6).getName());", "+    assertEquals(\"watch value incorrect\", \"11\", watches.get(6).getValue());", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1dda93c67b0f27748b2a76fc0e89e3d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachineTest.java", "commitBeforeChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "commitAfterChange": "d61b8181e3991377c3e72e5da1d438e3d26d3479", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void testFindReplaceInAllOpenFiles() throws BadLocationException", "signatureAfterChange": "   public void testFindReplaceInAllOpenFiles() throws BadLocationException", "diff": ["-  public void testFindReplaceInAllOpenFiles() throws BadLocationException {    ", "-    doc.insertString(0, EVIL_TEXT, null); ", "-    docPrev.insertString(0, EVIL_TEXT_PREV, null); ", "-    docNext.insertString(0, EVIL_TEXT_NEXT, null); ", "+  public void testFindReplaceInAllOpenFiles() throws BadLocationException {", "+    _doc.insertString(0, EVIL_TEXT, null);", "+    _docPrev.insertString(0, EVIL_TEXT_PREV, null);", "+    _docNext.insertString(0, EVIL_TEXT_NEXT, null);", "-    frm.setFindWord(\"evil\");", "-    frm.setMatchCase(false);", "-    frm.setSearchBackwards(false);", "-    frm.setSearchAllDocuments(true);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 12, docNext);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 29, docNext);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 48, docNext);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 12, docPrev);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 29, docPrev);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 48, docPrev);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 12, doc);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 25, doc);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 40, doc);", "-    _testFindNextSucceeds(frm, CONTINUE, 12, 12, docNext);", "-    frm.setLastFindWord();", "-    frm.setSearchBackwards(true);", "-    _testFindNextSucceeds(frm, CONTINUE, 36, 36, doc);", "-    _testFindNextSucceeds(frm, CONTINUE, 36, 21, doc);", "-    _testFindNextSucceeds(frm, CONTINUE, 36, 8, doc);", "-    _testFindNextSucceeds(frm, CONTINUE, 44, 44, docPrev);", "-    frm.setReplaceWord(\"monkey\"); ", "-    frm.replaceAll();", "-    assertEquals(\"revised text\", ", "-                 \"Hear no monkey, see no monkey, speak no monkey.\", ", "-                 doc.getText(0, doc.getLength()));", "-    assertEquals(\"revised text\", ", "-                 \"Hear no monkeyprev, see no monkeyprev, speak no monkeyprev.\", ", "-                 docPrev.getText(0, docPrev.getLength()));", "-    assertEquals(\"revised text\", ", "-                 \"Hear no monkeynext, see no monkeynext, speak no monkeynext.\", ", "-                 docNext.getText(0, docNext.getLength()));", "+    _frm.setFindWord(\"evil\");", "+    _frm.setMatchCase(false);", "+    _frm.setSearchBackwards(false);", "+    _frm.setSearchAllDocuments(true);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 12, _docNext);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 29, _docNext);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 48, _docNext);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 12, _docPrev);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 29, _docPrev);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 48, _docPrev);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 12, _doc);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 25, _doc);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 40, _doc);", "+    _testFindNextSucceeds(_frm, CONTINUE, 12, 12, _docNext);", "+    _frm.setLastFindWord();", "+    _frm.setSearchBackwards(true);", "+    _testFindNextSucceeds(_frm, CONTINUE, 36, 36, _doc);", "+    _testFindNextSucceeds(_frm, CONTINUE, 36, 21, _doc);", "+    _testFindNextSucceeds(_frm, CONTINUE, 36, 8, _doc);", "+    _testFindNextSucceeds(_frm, CONTINUE, 44, 44, _docPrev);", "+    _frm.setReplaceWord(\"monkey\");", "+    _frm.replaceAll();", "+    assertEquals(\"revised text\",", "+                 \"Hear no monkey, see no monkey, speak no monkey.\",", "+                 _doc.getText(0, _doc.getLength()));", "+    assertEquals(\"revised text\",", "+                 \"Hear no monkeyprev, see no monkeyprev, speak no monkeyprev.\",", "+                 _docPrev.getText(0, _docPrev.getLength()));", "+    assertEquals(\"revised text\",", "+                 \"Hear no monkeynext, see no monkeynext, speak no monkeynext.\",", "+                 _docNext.getText(0, _docNext.getLength()));"]}], "num": 18889}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8c25a5d99f19b486bf4b0213f12ade1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "431e5667c6414801a54ebdd3b452f965", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "          public void testForClassImportStatement()", "signatureAfterChange": "          public void testForClassImportStatement()", "diff": ["-        new Word(SourceInfo.NO_INFO, \"alpha\"),", "-        new Word(SourceInfo.NO_INFO, \"beta\")};", "-      CompoundWord cw = new CompoundWord(SourceInfo.NO_INFO, words);", "-      ClassImportStatement cis = new ClassImportStatement(SourceInfo.NO_INFO, cw);", "+        new Word(NONE, \"alpha\"),", "+        new Word(NONE, \"beta\")};", "+      CompoundWord cw = new CompoundWord(NONE, words);", "+      ClassImportStatement cis = new ClassImportStatement(NONE, cw);", "-      assertEquals(\"The error message should be correct\", \"The class alpha.beta is not in the right package. Perhaps you meant to package it?\", errors.get(0).getFirst());", "-      ", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The class alpha.beta is not in the right package. Perhaps you meant to package it?\", ", "+                   errors.get(0).getFirst()); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddefbf5083cdcd9f87af4ae3dbd00987", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "               public void testForBooleanExpressionOnly()", "signatureAfterChange": "               public void testForBooleanExpressionOnly()", "diff": ["-      BooleanExpression be = new OrExpression(SourceInfo.NO_INFO, new BooleanLiteral(SourceInfo.NO_INFO, true), new BooleanLiteral(SourceInfo.NO_INFO, false));", "+      BooleanExpression be = new OrExpression(SourceInfo.NONE, new BooleanLiteral(SourceInfo.NONE, true), new BooleanLiteral(SourceInfo.NONE, false));", "-      assertEquals(\"The error message should be correct\", \"The right side of this expression is not a boolean value.  Therefore, you cannot apply a Boolean Operator (&&, ||) to it\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The right side of this expression is not a boolean value.  Therefore, you cannot apply a Boolean Operator (&&, ||) to it\", errors.getLast().getFirst());"]}], "num": 19917}
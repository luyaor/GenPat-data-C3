{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa705229debba3b5c091b26ff9f5cff4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27f87be45eaffa90bf9506acd89f41c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/NameVisitorExtension.java", "commitBeforeChange": "df1e36f71885ed44596fe30b7349f6c2af6222fa", "commitAfterChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Node visit(VariableDeclaration node)", "signatureAfterChange": "   public Node visit(VariableDeclaration node)", "diff": ["-    // TypeChecker", "-    Class lc = node.getType().acceptVisitor(_tc);", "-    Node init = node.getInitializer();", "-    if (init != null) {", "-      Class rc = init.acceptVisitor(_tc);", "-      _checkAssignmentStaticRules(lc, rc, node, init);", "-    }", "-", "+    /** ", "+     * The following commented code was moved into the actual ", "+     * AbstractTypeChecker to reduce duplication of code and", "+     * to fix some bugs", "+     */", "+//    // TypeChecker", "+//    Class lc = node.getType().acceptVisitor(_tc);", "+//    Node init = node.getInitializer();", "+//    if (init != null) {", "+//      Class rc = init.acceptVisitor(_tc);", "+//      _checkAssignmentStaticRules(lc, rc, node, init);", "+//    }", "+    _tc.preCheckVariableDeclaration(node);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bd3fdef54c61e0a71c19ee757a446f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileBuilder.java", "commitBeforeChange": "27cb6e93149c6a1991393a8ca4c655137f9f0cb6", "commitAfterChange": "dd2df9abefe60137729d1e2ed7d31fad6497b670", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private String makeRelative(File f) throws IOException", "signatureAfterChange": "   private String makeRelative(File f) throws IOException", "diff": ["-    String proj = _projectFile.getParentFile().getCanonicalPath() + File.separator;", "-    String path = f.getCanonicalPath();", "-    if (path.startsWith(proj)) {", "-      return path.substring(proj.length());", "-    }", "-    return path;", "+    return makeRelativeTo(f, _projectFile).getPath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c44f8646c2e0d6beb207e0c469f30f05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "8a099b753fcfb83be248d39f70edd5788e8b1222", "commitAfterChange": "4701dc92d8eb3da9b7f829b98cf858de261361f6", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public void replThrewException(String exceptionClass,                                  String message,                                  String stackTrace)", "signatureAfterChange": "   public void replThrewException(String exceptionClass,                                  String message,                                  String stackTrace)", "diff": ["+    _interactionsDoc.appendExceptionResult(exceptionClass,", "+                                           message,", "+                                           stackTrace,", "+                                           SYSTEM_ERR_STYLE);", "+    /*", "-    String txt = \"\\n\" + exceptionClass + \": \" + message;", "+    String txt = exceptionClass + \": \" + message;", "-    _docAppend(_interactionsDoc, txt, SYSTEM_ERR_STYLE);", "+    _docAppend(_interactionsDoc, txt + \"\\n\", SYSTEM_ERR_STYLE);", "+    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb61fd52550c451909315fd725eff5b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "76157e15bbd52f4d2639058382773284b7c9c0bd", "commitAfterChange": "37eb7cd9abe39acb853d1fd344f27a2631ce2406", "methodNumberBeforeChange": 772, "methodNumberAfterChange": 773, "signatureBeforeChange": "   private boolean _verifyOverwrite(File f)", "signatureAfterChange": "   private boolean _verifyOverwrite(File f)", "diff": ["-    Object[] options = {\"Yes\",\"No\"};", "-    int n = JOptionPane.showOptionDialog(MainFrame.this,", "-                                         \"<html>This file already exists.  Do you wish to overwrite the file?<br>\"+", "-                                         f.getPath()+\"<html>\",", "-                                         \"Confirm Overwrite\",", "-                                         JOptionPane.YES_NO_OPTION,", "-                                         JOptionPane.QUESTION_MESSAGE,", "-                                         null,", "-                                         options,", "-                                         options[1]);", "-    return (n == JOptionPane.YES_OPTION);", "+    return MainFrameUtils.verifyOverwrite(MainFrame.this, f);"]}], "num": 20220}
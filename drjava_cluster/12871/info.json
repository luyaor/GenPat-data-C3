{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c23a2e4d1c2fe01ba6b8deb96b29df2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f80eac1e466508ba1a86664567fb710", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "1c36c4f5a2718b62938a20268edf5b2f24819a2b", "commitAfterChange": "25faf15b00b7a598b085089c43f0beac765b2716", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "diff": ["-    try { return new ProcessTaskController<Remote>(jvmBuilder, DIRECT_EXECUTOR, task, onExit).get(); }", "+    // no need to spawn a thread if we don't need to wait for the process to quit", "+    Executor exec = (onExit == null) ? DIRECT_EXECUTOR : THREAD_EXECUTOR;", "+    try { return new ProcessTaskController<Remote>(jvmBuilder, exec, task, onExit).get(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d0ef90c87b2d6c6d8d89199acf317f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "9953c5f787113bb8bfb39d4af2a2ba9a2a873081", "commitAfterChange": "cf43b71b7afba8ecd60ed8b71f23b327139aa802", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder)       throws InterruptedException, InvocationTargetException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, InvocationTargetException, IOException", "diff": ["-    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder).value(); }", "+   */", "+  public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,", "+                                       Runnable1<? super Process> onExit)", "+      throws InterruptedException, InvocationTargetException, IOException {", "+    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder, onExit).value(); }"]}], "num": 12871}
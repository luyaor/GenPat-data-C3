{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30119af541cbf7e9553562a51cb523c6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00ed08166f1b049864c0e4c6d23ca785", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void startInterpreterJVM()", "diff": ["-   */", "+  /** Starts the interpreter if it's not running already. */", "-    if (isStartupInProgress() || isInterpreterRunning()) {", "-      return;", "-    }", "+    if (isStartupInProgress() || isInterpreterRunning())  return;", "-    if (allowAssertions()) {", "-      jvmArgs.add(\"-ea\");", "-    }", "+    if (allowAssertions())  jvmArgs.add(\"-ea\");", "-    for (int i=0; i < jvmArgs.size(); i++) {", "-      jvmArgsArray[i] = jvmArgs.get(i);", "-    }", "+    for (int i=0; i < jvmArgs.size(); i++) { jvmArgsArray[i] = jvmArgs.get(i); }", "-      //_startupClasspath is sent in as the interactions classpath", "-      //      System.out.println(\"startup: \" + _startupClasspath);", "+//      _startupClasspath is sent in as the interactions classpath", "+//      System.out.println(\"startup: \" + _startupClasspath);", "+//      new ScrollableDialog(null, \"Calling invokeSlave(\" + jvmArgs + \", \" + _startupClasspath + \")\", \"\", \"\").show();", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "-    catch (IOException ioe) {", "-      _threwException(ioe);", "-    }", "+    catch (RemoteException re) { _threwException(re); }", "+    catch (IOException ioe) { _threwException(ioe); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01757c7239fd7cb9bb77ad72f2d41f1a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ArrayData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public boolean equals(Object obj)", "signatureAfterChange": "        public boolean equals(Object obj)", "diff": ["-  ", "+    ", "-    if (this == obj) {return true;}", "+    if (this == obj) return true;", "-    if ((obj.getClass() != this.getClass())) { //|| (obj.hashCode() != this.hashCode())) {", "-      return false;", "-    }", "+    if (obj.getClass() != this.getClass()) return false;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "040bcc35fa213030b7532d357a1b4f0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classfile/JVMUtilities.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static String getReturnTypeName(Class<?> c)", "signatureAfterChange": "   public static String getReturnTypeName(Class<?> c)", "diff": ["-   */", "+  /** Returns the string that represents internally the given class */", "-    if (s != null) {", "-      return s;", "-    } else {", "-      return ((c.isArray()) ?", "-                c.getName() : \"L\" + c.getName() + \";\").replace('.', '/');", "-    }", "+    if (s != null) return s;", "+    return ((c.isArray()) ? c.getName() : \"L\" + c.getName() + \";\").replace('.', '/');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "048d1e31c207c82a61bede6ab4bb0b89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private String _getClassFromName(String name)", "signatureAfterChange": "      private String _getClassFromName(String name)", "diff": ["-      if ((paren > -1) && (paren < name.length())) {", "-        return name.substring(paren + 1, name.length() - 1);", "-      }", "-      else {", "-        throw new IllegalArgumentException(\"Name does not contain any parens: \" + name);", "-      }", "+      ", "+      if ((paren > -1) && (paren < name.length())) return name.substring(paren + 1, name.length() - 1);", "+      else throw new IllegalArgumentException(\"Name does not contain any parens: \" + name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "062b3a46ba6b29fe1dafabdf8edc645f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/ConsoleDocument.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public int getPositionBeforePrompt()", "signatureAfterChange": "   public synchronized int getPositionBeforePrompt()", "diff": ["-   */", "-  public int getPositionBeforePrompt() {", "-    if (_hasPrompt) {", "-      return _promptPos - _prompt.length();", "-    }", "-    else {", "-      return getDocLength();", "-    }", "+  /** Gets the position immediately before the prompt, or the doc length if there is no prompt. */", "+  public synchronized int getPositionBeforePrompt() {", "+    if (_hasPrompt) return _promptPos - _prompt.length();", "+    return getDocLength();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09558c9b526cefe8edc09da9f74a81f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "    public Object visit(FunctionCall node)", "signatureAfterChange": "    public Object visit(FunctionCall node)", "diff": ["-    if (Void.TYPE.equals(node.getProperty(NodeProperties.TYPE))) {", "-      return Interpreter.NO_RESULT;", "-    }", "-    else {", "-      return ret;", "-    }", "+    if (Void.TYPE.equals(node.getProperty(NodeProperties.TYPE))) return Interpreter.NO_RESULT;", "+    else return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c103d53aa18ffd40a79fb4a63dd3098", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorHandler.java", "commitBeforeChange": "3ce53d032ad1bc176a487b71ca8af2994e1e9b4a", "commitAfterChange": "f9cf0907b4c2618456fd74126eedfa638b8d8fcb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static Throwable getError(int index)", "signatureAfterChange": "   public static Throwable getError(int index)", "diff": ["-    if ((index >= 0) && (index < _errors.size())) {", "-      return _errors.get(index);", "-    }", "-    else {", "-      return new UnexpectedException(\"Error in DrJavaErrorHandler\");", "-    }", "+    ", "+    if (index >= 0 && index < _errors.size()) return _errors.get(index);", "+    else return new UnexpectedException(\"Error in DrJavaErrorHandler\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c98db2ec8b5f853ce92ce2e133f02dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "3ce53d032ad1bc176a487b71ca8af2994e1e9b4a", "commitAfterChange": "f9cf0907b4c2618456fd74126eedfa638b8d8fcb", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public File getMainClassContainingFile()", "signatureAfterChange": "   public File getMainClassContainingFile()", "diff": ["-  public File getMainClassContainingFile(){", "+  public File getMainClassContainingFile() {", "-    if (path == null){", "-      return null;", "-    }", "+    if (path == null) return null;", "-    if (path.toLowerCase().endsWith(OptionConstants.JAVA_FILE_EXTENSION)){", "+    if (path.toLowerCase().endsWith(OptionConstants.JAVA_FILE_EXTENSION)) {", "-    while (path.length() > 0){", "-      if (tempFile.exists()){", "-        return tempFile;", "-      } //if", "+    while (path.length() > 0) {", "+      if (tempFile.exists()) return tempFile;", "-      if (path.indexOf(File.separatorChar) == -1)", "-        break;", "+      if (path.indexOf(File.separatorChar) == -1) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ecaf88a2a3e8de4bc8e437cbb3f258d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "1acb63fa1c578959b54f9766299c6e0a8865f601", "commitAfterChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static byte[] readStreamAsBytes(final InputStream stream)     throws IOException", "signatureAfterChange": "   public static byte[] readStreamAsBytes(final InputStream stream) throws IOException", "diff": ["-  public static byte[] readStreamAsBytes(final InputStream stream)", "-    throws IOException", "-  {", "+  public static byte[] readStreamAsBytes(final InputStream stream) throws IOException {", "-    if (stream instanceof BufferedInputStream) {", "-      buffered = (BufferedInputStream) stream;", "-    }", "-    else {", "-      buffered = new BufferedInputStream(stream);", "-    }", "+    if (stream instanceof BufferedInputStream) buffered = (BufferedInputStream) stream;", "+    else  buffered = new BufferedInputStream(stream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16d4f4f29ffe7f0ae54870dfc69a229a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/ConsoleDocument.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void removeText(int offs, int len) throws DocumentAdapterException", "signatureAfterChange": "   public synchronized void removeText(int offs, int len) throws DocumentAdapterException", "diff": ["-  public void removeText(int offs, int len) throws DocumentAdapterException {", "-    if (offs < _promptPos) {", "-      _beep.run();", "-    }", "-    else {", "-      _document.removeText(offs, len);", "-    }", "+  public synchronized void removeText(int offs, int len) throws DocumentAdapterException {", "+    if (offs < _promptPos) _beep.run();", "+    else _document.removeText(offs, len);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ce33194bd28c5a33410d0222e0fbee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/StickyClassLoader.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected Class<?> loadClass(String name, boolean resolve)      throws ClassNotFoundException", "signatureAfterChange": "   protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException", "diff": ["-  protected Class<?> loadClass(String name, boolean resolve) ", "-    throws ClassNotFoundException", "-  {", "+  protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {", "-    if (clazz != null) {", "-      return clazz;", "-    }", "+    if (clazz != null) return clazz;", "-    if (name.startsWith(\"java.\") ||", "-        name.startsWith(\"javax.\") ||", "-        name.startsWith(\"sun.\") ||", "-        name.startsWith(\"com.sun.\") ||", "-        name.startsWith(\"org.omg.\") ||", "-        name.startsWith(\"sunw.\") ||", "-        name.startsWith(\"org.w3c.dom.\") ||", "-        name.startsWith(\"org.xml.sax.\") ||", "-        name.startsWith(\"net.jini.\")) ", "-    {", "-      try {", "-        clazz = getSystemClassLoader().loadClass(name);", "-      }", "+    if (name.startsWith(\"java.\") || name.startsWith(\"javax.\") || name.startsWith(\"sun.\") || ", "+        name.startsWith(\"com.sun.\") || name.startsWith(\"org.omg.\") || name.startsWith(\"sunw.\") || ", "+        name.startsWith(\"org.w3c.dom.\") || name.startsWith(\"org.xml.sax.\") || name.startsWith(\"net.jini.\")) {", "+      ", "+      try { clazz = getSystemClassLoader().loadClass(name); }", "-    if (resolve) {", "-      resolveClass(clazz);", "-    }", "+    if (resolve) resolveClass(clazz);", "-    /*", "-    System.out.println(\"Sticky loaded OK: \" + name + \" \" + clazz + \" loader=\" +", "-                       clazz.getClassLoader());", "-    */", "+//    System.out.println(\"Sticky loaded OK: \" + name + \" \" + clazz + \" loader=\" + clazz.getClassLoader());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a51064af4b9fec5fefb3cb1bff7465f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   DocFile parseFile(SExp s, String parentDir)", "signatureAfterChange": "   DocFile parseFile(SExp s, String parentDir)", "diff": ["-    if (name.compareToIgnoreCase(\"file\") != 0) {", "+    if (name.compareToIgnoreCase(\"file\") != 0)", "-    }", "-    if (! (s instanceof Cons)) {", "+    if (! (s instanceof Cons))", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a9dccec6cfbbb4c331fd47bef776368", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 216, "signatureBeforeChange": "     public boolean canAbandonFile()", "signatureAfterChange": "     public boolean canAbandonFile()", "diff": ["-      if (isModifiedSinceSave() || ", "-          (_file != null    && ", "-           !_file.exists()  && ", "-           _cacheAdapter.isReady())) {", "+      if (isModifiedSinceSave() || (_file != null && !_file.exists() && _cacheAdapter.isReady()))", "-      }", "-      else {", "-        return true;", "-      }", "+      else return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1afc640eec8ee987f05945cd5562a92a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private String parseFileName(SExp s)", "signatureAfterChange": "      private String parseFileName(SExp s)", "diff": ["-      if (l == Empty.ONLY) {", "+      if (l == Empty.ONLY)", "-      }else{", "+      else {", "-    else{", "-      throw new PrivateProjectException(\"expected name tag, found string\");", "-    }", "+    else throw new PrivateProjectException(\"expected name tag, found string\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "202aadd9590e01c31af7a9c66ce46805", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputModel.java", "commitBeforeChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "commitAfterChange": "f3b30de075946ab18141ef0ec7abdb9f0f10037b", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public T getCurrentItem()", "signatureAfterChange": "   public T getCurrentItem()", "diff": ["-   */", "+    */", "-    if (_items.size() > 0) {", "-      return _items.get(_index);", "-    }", "-    else {", "-      return null;", "-    }", "+    if (_items.size() > 0) return _items.get(_index);", "+    else return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20b7f03ac58336f534cb370393b9b849", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugWatchData.java", "commitBeforeChange": "b128df4fa9d8df79a76ba9e19a170c160365e646", "commitAfterChange": "e16fd9dc1aa815e303a7aa80be407f3a031e237d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void setValue(Object value)", "signatureAfterChange": "   public void setValue(Object value)", "diff": ["-    if (!valString.equals(_value)) {", "-      _changed = true;", "-    }", "-    else {", "-      _changed = false;", "-    }", "+    if (!valString.equals(_value)) _changed = true;", "+    else _changed = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2107ebbb768164fffb2900aba580ab27", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private LinkedList<CompilerError> _visitorErrors2CompilerErrors(LinkedList<Pair<String, JExpressionIF>> visitorErrors)", "signatureAfterChange": "   private LinkedList<CompilerError> _visitorErrors2CompilerErrors(LinkedList<Pair<String, JExpressionIF>> visitorErrors)", "diff": ["+      ", "-      if (jexpr == null) {", "-        si = JExprParser.NO_SOURCE_INFO;", "-      }", "-      else {", "-        si = pair.getSecond().getSourceInfo();", "-      }", "+      if (jexpr == null) si = JExprParser.NO_SOURCE_INFO;", "+      else si = pair.getSecond().getSourceInfo();", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22e2249abc43b23dccf46c3a003be3be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private int _getDistToPreviousNewline(TokenList.Iterator copyCursor)", "signatureAfterChange": "   private int _getDistToPreviousNewline(TokenList.Iterator copyCursor)", "diff": ["-   */", "+  /** Returns distance to after newline. */", "-    if (!copyCursor.atStart()) {", "-      copyCursor.prev();", "-    }", "+    if (!copyCursor.atStart()) copyCursor.prev();", "-    if (copyCursor.atStart()) {", "-      return -1;", "-    }", "+    if (copyCursor.atStart()) return -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "241cbea1364a1582aea7b41b4e12978b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/TestDocGetter.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public OpenDefinitionsDocument getDocumentForFile(File file)     throws IOException", "signatureAfterChange": "    public OpenDefinitionsDocument getDocumentForFile(File file)     throws IOException", "diff": ["-    if (docs.containsKey(file)) {", "-      return docs.get(file);", "-    }", "-    else {", "-      throw new IllegalStateException(\"TestDocGetter can't open new files!\");", "-    }", "+    if (docs.containsKey(file)) return docs.get(file);", "+    else throw new IllegalStateException(\"TestDocGetter can't open new files!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "294764ba004d4f5713ef7b6b8edef3ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 637, "methodNumberAfterChange": 637, "signatureBeforeChange": "          public File[] filesReadOnly(File... files)", "signatureAfterChange": "          public File[] filesReadOnly(File... files)", "diff": ["-      for (File f : files) {", "-        filePaths.add(f.getPath());", "-      }", "+      for (File f : files) { filePaths.add(f.getPath()); }", "-                                                \"The following file could not be saved because it is read-only.\\n\"+", "-                                                \"Do you want to overwrite it anyway?\\n\"+", "-                                                files[0].getPath(),", "+                                                \"The following file could not be saved because it is read-only.\\n\" +", "+                                                \"Do you want to overwrite it anyway?\\n\" + files[0].getPath(),", "-        overwrite = (res==0);", "+        overwrite = (res == 0);", "-        overwrite = (dialog.getButtonPressed()==0);", "+        overwrite = (dialog.getButtonPressed() == 0);", "-        if (files.length==1) { return files; }", "+        if (files.length == 1) return files;", "-          for(String s: dialog.getSelectedItems()) {", "-            overwriteFiles[i++] = new File(s);", "-          }", "+          for(String s: dialog.getSelectedItems()) { overwriteFiles[i++] = new File(s); }", "-      else {", "-        return new File[0];", "-      }", "+      else return new File[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b30ca9ff78c9be0dd57f6daeb3a1f87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction()", "diff": ["-   */", "+  /** Interprets the current given text at the prompt in the interactions doc. */", "-      if (_document.inProgress()) {", "-        return;", "-      }", "+      if (_document.inProgress()) return;", "-      if (toEval.startsWith(\"java \")) {", "-        toEval = _testClassCall(toEval);", "-      }", "+      if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c97ba4f1c16651e67f730175a804a3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 343, "methodNumberAfterChange": 343, "signatureBeforeChange": "   void refreshBreakpointHighlightPainter()", "signatureAfterChange": "   void refreshBreakpointHighlightPainter()", "diff": ["-      if (pair.getKey().isEnabled()) {", "-        pair.getValue().refresh(DefinitionsPane.BREAKPOINT_PAINTER);", "-      }", "-      else {", "-        pair.getValue().refresh(DefinitionsPane.DISABLED_BREAKPOINT_PAINTER);", "-      }", "+      if (pair.getKey().isEnabled()) pair.getValue().refresh(DefinitionsPane.BREAKPOINT_PAINTER);", "+      else pair.getValue().refresh(DefinitionsPane.DISABLED_BREAKPOINT_PAINTER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f714c3a87a9a25af6fcf88a9ef3d24f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 38, "signatureBeforeChange": "   protected String getQualifiedClassName(String className)", "signatureAfterChange": "   protected String getQualifiedClassName(String className)", "diff": ["-    if (!_package.equals(\"\") && !className.startsWith(_package)) {return _package + \".\" + className;}", "-    else { return className;}", "+//    if (className.equals(\"java\")) throw new RuntimeException(\"BOGUS getQualifiedClassName call on 'java'\");", "+    if (!_package.equals(\"\") && !className.startsWith(_package)) return _package + \".\" + className;", "+    else return className;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fa49ca2aa72e9675c962ca09fde4884", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerError.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public String getFileMessage()", "signatureAfterChange": "   public String getFileMessage()", "diff": ["-  public String getFileMessage(){", "-    if (_file == null){", "-      return \"(no associated file)\";", "-    } else {", "-      return fileName();", "-    }", "+  public String getFileMessage() {", "+    if (_file == null) return \"(no associated file)\";", "+    return fileName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31adb41b262c61abf145665238c85dfa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public OpenDefinitionsDocument getOpenDefDoc()", "signatureAfterChange": "   public OpenDefinitionsDocument getOpenDefDoc()", "diff": ["-    if(_odd == null){", "+    if(_odd == null)", "-    }else{", "-      return _odd;", "-    }", "+    else return _odd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f26434de23dae90cedf9cb0c7ffa9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/PreventExitSecurityManager.java", "commitBeforeChange": "b2b6471e1560c54bd01c487ab6cd5dc5ac9f4747", "commitAfterChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void checkPermission(Permission perm)", "signatureAfterChange": "   public void checkPermission(Permission perm)", "diff": ["-   */", "+  /** Disallow setting security manager, but otherwise delegate to parent. */", "-      if (! _timeToDeactivate) {", "-        throw new SecurityException(\"Can not reset security manager!\");", "-      }", "+      if (! _timeToDeactivate) throw new SecurityException(\"Can not reset security manager!\");", "-      if (_parent != null) {", "-        _parent.checkPermission(perm);", "-      }", "+      if (_parent != null) _parent.checkPermission(perm);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "357fc6ea68ccc617873210edc96ff78c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   private void updateInfo()", "signatureAfterChange": "   private void updateInfo()", "diff": ["-   */", "+  /** Update the information. */", "-    if (_matchList.getModel().getSize()>0) {", "-      _infoLabel.setText(\"Path:   \" + _info.apply(_pim.getCurrentItem()));", "-    }", "-    else {", "-      _infoLabel.setText(\"No file selected\");", "-    }", "+    if (_matchList.getModel().getSize()>0)  _infoLabel.setText(\"Path:   \" + _info.apply(_pim.getCurrentItem()));", "+    else _infoLabel.setText(\"No file selected\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35d0bf5bd2a46e0ac08139e404882807", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void setInputListener(InputListener listener)", "signatureAfterChange": "   public void setInputListener(InputListener listener)", "diff": ["-    if (_inputListener == NoInputListener.ONLY) {", "-      _inputListener = listener;", "-    }", "-    else {", "-      throw new IllegalStateException(\"Cannot change the input listener until it is released.\");", "-    }", "+    if (_inputListener == NoInputListener.ONLY) _inputListener = listener;", "+    else  throw new IllegalStateException(\"Cannot change the input listener until it is released.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36f2a44cde20e36e0b4a1267a84694cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b1ab5639c12e11d9d4773b42d5fad59d564680b4", "commitAfterChange": "c11d4ce83dfacd1ad010305b8bbd51b80abac1bf", "methodNumberBeforeChange": 262, "methodNumberAfterChange": 263, "signatureBeforeChange": "     public boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)", "signatureAfterChange": "     public boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)", "diff": ["-  private class MenuBar extends JMenuBar{", "+  private class MenuBar extends JMenuBar {", "-      if(MainFrame.this.getAllowKeyEvents()){", "-        return super.processKeyBinding(ks, e, condition, pressed);", "-      }else{", "-        return false;", "-      }", "+      if (MainFrame.this.getAllowKeyEvents()) return super.processKeyBinding(ks, e, condition, pressed);", "+      return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37c4261311787f0990e3cc1b2efc6280", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "   public void updateHighlight(int curPos)", "diff": ["-   */", "+  /** Update the highlight appropriately. */", "-    if (!model.hasErrorsWithPositions(_openDoc)) {", "-      return;", "-    }", "+    if (!model.hasErrorsWithPositions(_openDoc)) return;", "+    ", "+//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "-    if (error == null) {", "-      errorListPane.selectNothing();", "-    } ", "+    if (error == null) errorListPane.selectNothing();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7be9e70fc425902fbcbb41f9da4928", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private void _selectFoundItem()", "signatureAfterChange": "   private void _selectFoundItem()", "diff": ["-   */", "+  /** Calls _selectFoundItem(from, to) with reasonable defaults. */", "-    if(!_machine.getSearchBackwards()){", "-      from = position - _machine.getFindWord().length();", "-    }", "-    else {", "-      from = position + _machine.getFindWord().length();", "-    }", "+    if (!_machine.getSearchBackwards()) from = position - _machine.getFindWord().length();", "+    else from = position + _machine.getFindWord().length();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cd59014e72d73c9d3fda2415c8246d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public boolean isSelectedInGroup(INavigatorItem i)", "signatureAfterChange": "   public synchronized boolean isSelectedInGroup(INavigatorItem i)", "diff": ["-  public boolean isSelectedInGroup(INavigatorItem i){", "+  public synchronized boolean isSelectedInGroup(INavigatorItem i){", "-    if(n == _model.getRoot()){", "-      return true;", "-    }", "+    if (n == _model.getRoot()) return true;", "-    while(l.getParent() != _model.getRoot()){", "-      if(l.getParent() == n){", "-        return true;", "-      }", "+    while (l.getParent() != _model.getRoot()) {", "+      if(l.getParent() == n) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cf4d2c5b5a99b5d1e3a22516abfb380", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "1acb63fa1c578959b54f9766299c6e0a8865f601", "commitAfterChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public static void saveFile(FileSaver fileSaver) throws IOException", "signatureAfterChange": "   public static void saveFile(FileSaver fileSaver) throws IOException", "diff": ["-      } catch (FileNotFoundException fnfe) {", "-        if (fileSaver.continueWhenTempFileCreationFails()){", "+      } ", "+      catch (FileNotFoundException fnfe) {", "+        if (fileSaver.continueWhenTempFileCreationFails()) {", "-        } else {", "-          throw new IOException(\"Could not create temp file \" + tempFile +", "-                                \" in attempt to save \" + file);", "-        }", "+        } ", "+        else throw new IOException(\"Could not create temp file \" + tempFile + \" in attempt to save \" + file);", "-      if (tempFileUsed && !renameFile(tempFile, file)) {", "+      if (tempFileUsed && !renameFile(tempFile, file))", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d7a6a4f2752560f9c4c38b55ea6af06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "6d55d86705248616cac5b324a7c528485ceb6104", "commitAfterChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": "     public void addRegion(final R region)", "signatureAfterChange": "     public void addRegion(final R region)", "diff": ["-     */", "+      */", "-      if (!region.equals(_current) && ", "-          ((index==_regions.size()-1) || (!region.equals(_regions.get(index+1)))) &&", "-          ((index<=0) || (!region.equals(_regions.get(index-1))))) {", "-        if ((_current!=null) && (index>=0)) {", "-          _regions.add(index+1, region);", "-        }", "-        else {", "-          _regions.add(region);", "-        }", "+      if (! region.equals(_current) && ", "+          (index == _regions.size() - 1 || ! region.equals(_regions.get(index+1))) &&", "+          (index<=0 || ! region.equals(_regions.get(index-1)))) {", "+        if ((_current != null) && (index>=0)) _regions.add(index+1, region);", "+        else _regions.add(region);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f81108343f27b6454bfc1db01fe9f91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 776, "methodNumberAfterChange": 776, "signatureBeforeChange": "   void _showAutoImportDialog(String s)", "signatureAfterChange": "   void _showAutoImportDialog(String s)", "diff": ["-    if (_javaAPIList == null) {", "-      return;", "-    }", "+    if (_javaAPIList == null) return;", "+    ", "-    if ((DrJava.getConfig().getSetting(DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue()) &&", "-        (_autoImportClassList.size()>0)) {", "+    if (DrJava.getConfig().getSetting(DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue() &&", "+        _autoImportClassList.size() > 0) {", "-        for(OpenDefinitionsDocument d: docs) {", "+        for (OpenDefinitionsDocument d: docs) {", "-            if (simple.lastIndexOf('.')>=0) {", "-              simple = simple.substring(simple.lastIndexOf('.')+1);", "-            }", "+            if (simple.lastIndexOf('.') >= 0) simple = simple.substring(simple.lastIndexOf('.') + 1);", "+            ", "-            if (!autoImportList.contains(entry)) { autoImportList.add(entry); }", "+            if (! autoImportList.contains(entry)) { autoImportList.add(entry); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "424491d51133728ffec0a315394f1078", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DelegatingAction.java", "commitBeforeChange": "3b63bd62ccd1666c210054736f0739b2d5581af4", "commitAfterChange": "a5516b7eda904742cbd6f82d228cdf505735bd33", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public Object getValue(String key)", "signatureAfterChange": "   public Object getValue(String key)", "diff": ["-   */", "+  /** Returns value of the key, from delegatee is it's in {@link #KEYS_TO_DELEGATE} or from this if not. */", "-", "-    if (_isDelegatedKey(key)) {", "-      return _delegatee.getValue(key);", "-    }", "-    else {", "-      return _localProperties.get(key);", "-    }", "+    ", "+    if (_isDelegatedKey(key)) return _delegatee.getValue(key);", "+    else return _localProperties.get(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ab6e92b62dc41100d9536bbde47765", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      private String _getTestFromName(String name)", "signatureAfterChange": "      private String _getTestFromName(String name)", "diff": ["-      if ((paren > -1) && (paren < name.length())) {", "-        return name.substring(0, paren);", "-      }", "-      else {", "-        throw new IllegalArgumentException(\"Name does not contain any parens: \" + name);", "-      }", "+      ", "+      if ((paren > -1) && (paren < name.length())) return name.substring(0, paren);", "+      ", "+      else throw new IllegalArgumentException(\"Name does not contain any parens: \" + name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44fc1a374e3ea8262cbbb07158248ab0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": "      public void openProject(FileOpenSelector projectSelector)", "signatureAfterChange": "      public void openProject(FileOpenSelector projectSelector)", "diff": ["-      if( file.length < 1 ) {", "+      if (file.length < 1)", "-      }", "+      ", "-      if(!_model.isProjectActive() || (_model.isProjectActive() && _closeProject())) {", "-        _openProjectHelper(file[0]);", "-      }", "+      if (!_model.isProjectActive() || (_model.isProjectActive() && _closeProject())) _openProjectHelper(file[0]);", "-      // do nothing, we just won't open anything", "+      /* do nothing, we just won't open anything */", "-    catch(Exception e){", "-      e.printStackTrace(System.err);", "-    }", "+    catch(Exception e) { e.printStackTrace(System.err); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49023a9692ea2775c18e8313fd805002", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionConstants.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static Font getDefaultLineNumberFont()", "signatureAfterChange": "     public static Font getDefaultLineNumberFont()", "diff": ["-      if (PlatformFactory.ONLY.isMacPlatform()) {", "-        return Font.decode(\"Monaco-12\");", "-      }", "-      else {", "-        return Font.decode(\"Monospaced-12\");", "-      }", "+      if (PlatformFactory.ONLY.isMacPlatform()) return Font.decode(\"Monaco-12\");", "+      else return Font.decode(\"Monospaced-12\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eaa618703900a45e7186b9429b0f91a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "cd56f7a2a82093e6e34728c0b5dc6babe9356e0a", "commitAfterChange": "6f37af6087e88b55d504fabdb6eee22be7ba1948", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   InterpreterData getInterpreter(String name)", "signatureAfterChange": "   InterpreterData getInterpreter(String name)", "diff": ["-    if (interpreter != null) {", "-      return interpreter;", "-    }", "-    else {", "-      throw new IllegalArgumentException(\"Interpreter '\" + name + \"' does not exist.\");", "-    }", "+    ", "+    if (interpreter != null) return interpreter;", "+    else throw new IllegalArgumentException(\"Interpreter '\" + name + \"' does not exist.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51a9635c69cca05568fd2625aca6d78f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "9c56cd9d9775329b3a5e6a7701ab0c05369850af", "commitAfterChange": "a7a439f9a53360ece86e113cdb8203e5c8b2acda", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 121, "signatureBeforeChange": "   public void quit()", "signatureAfterChange": "   public void quit()", "diff": ["-      if (DrJava.getSecurityManager() != null) {", "-        DrJava.getSecurityManager().exitVM(0);", "-      }", "-      else {", "-        // If we are being debugged by another copy of DrJava,", "-        //  then we have no security manager.  Just exit cleanly.", "-        System.exit(0);", "-      }", "-", "+      if (DrJava.getSecurityManager() != null) DrJava.getSecurityManager().exitVM(0);", "+      else System.exit(0); // If we are being debugged by another copy of DrJava,", "+                           // then we have no security manager.  Just exit cleanly.", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52c7d42bd8dcaf93b5b2e6b84b8e95b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classfile/JVMUtilities.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static String getName(Class<?> c)", "signatureAfterChange": "   public static String getName(Class<?> c)", "diff": ["-   */", "+  /** Returns the string that represents internally the given class. */", "-    if (s != null) {", "-      return s;", "-    } else {", "-      return c.getName().replace('.', '/');", "-    }", "+    if (s != null) return s;", "+    return c.getName().replace('.', '/');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541f85b8dff349580d11eccaa0719ddc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected void _insertErrorText(CompilerError error, SwingDocument doc) throws BadLocationException", "signatureAfterChange": "     protected void _insertErrorText(CompilerError error, SwingDocument doc) throws BadLocationException", "diff": ["-      if (error.isWarning()) {", "-        doc.append(_getWarningText(), BOLD_ATTRIBUTES);", "-      }", "-      else {", "-        doc.append(_getErrorText(), BOLD_ATTRIBUTES);", "-      }", "+      if (error.isWarning()) doc.append(_getWarningText(), BOLD_ATTRIBUTES);", "+      else doc.append(_getErrorText(), BOLD_ATTRIBUTES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "545cf106e65cb67335138022f698532b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result)", "diff": ["-    if (type_result == null || value_result == null) {return null;}", "+    if (type_result == null || value_result == null)  return null; ", "-    if (!assertFound(value_result, that) || !assertFound(type_result, that)) {", "-      return null;", "-    }", "+    if (! assertFound(value_result, that) || ! assertFound(type_result, that)) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54aa2fa3a2ea61ca4c6e5a5ced361eae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 153, "signatureBeforeChange": "   public ErrorPanel getSelectedErrorPanel()", "signatureAfterChange": "   public ErrorPanel getSelectedErrorPanel()", "diff": ["-    if (c instanceof ErrorPanel) {", "-      return (ErrorPanel) c;", "-    }", "-    else {", "-      return null;", "-    }", "+    if (c instanceof ErrorPanel) return (ErrorPanel) c;", "+    return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "558f688d02a37fd2f6538fc84476fdad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void forwardSearchInteractionsInHistory()", "signatureAfterChange": "   public void forwardSearchInteractionsInHistory()", "diff": ["-   */", "+  /** Forward searches the history for interactions that started with the current interaction. */", "-    if (hasHistoryNext()) {", "-      forwardHistorySearch(getCurrentInteraction());", "-    }", "-    else {", "-      _beep.run();", "-    }", "+    if (hasHistoryNext()) forwardHistorySearch(getCurrentInteraction());", "+    else _beep.run();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2badacfe306276774230a3dccac116", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "    public Object visit(ObjectMethodCall node)", "signatureAfterChange": "    public Object visit(ObjectMethodCall node)", "diff": ["-    if (m.getReturnType().equals(Void.TYPE)) {", "-      return Interpreter.NO_RESULT;", "-    }", "-    else {", "-      return ret;", "-    }", "+    if (m.getReturnType().equals(Void.TYPE)) return Interpreter.NO_RESULT;", "+    else return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5be8cf661c5f1e5dd93711c64d89374d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/MultiThreadedTestCase.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void rethrow()", "signatureAfterChange": "     public void rethrow()", "diff": ["-        if (_e instanceof Error) {", "-          throw (Error)_e;", "-        }", "-        if (_e instanceof RuntimeException) {", "-          throw (RuntimeException)_e;", "-        }", "+        if (_e instanceof Error)  throw (Error)_e;", "+        if (_e instanceof RuntimeException) throw (RuntimeException)_e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c431f8a99ccf0852c9deec5ecbfd09a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   public void setTab(String tab, int pos)", "signatureAfterChange": "   public void setTab(String tab, int pos)", "diff": ["-      if (!onlySpaces || (len != tab.length())) {", "+      if (! onlySpaces || len != tab.length()) {", "-          if (diff > 0) {", "-            insertString(firstNonWSPos, tab.substring(0, diff), null);", "-          }", "-          else {", "-            remove(firstNonWSPos + diff, -diff);", "-          }", "+          if (diff > 0) insertString(firstNonWSPos, tab.substring(0, diff), null);", "+          else remove(firstNonWSPos + diff, -diff);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e33d46dff9f5163c6ec812ee0ad13d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "1551840e0590a4d224d98cf5aeb081d54054aafb", "commitAfterChange": "fe644290d76f63ed4693cfbe935eaacd56666243", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     public void selectItem(CompilerError error)", "signatureAfterChange": "     public void selectItem(CompilerError error)", "diff": ["-     */", "+    /** Selects the given error inside the error list pane. */", "+//      Utilities.showDebug(\"selectItem(\" + error + \") called\");", "+//        Utilities.showDebug(\"selected index = \" + i);", "-        if (i + 1 >= (_numErrors)) {", "-          endPos = getDocument().getLength();", "-        }", "-        else {", "-          endPos = _errorListPositions[i + 1].getOffset();", "-        }", "+        if (i + 1 >= (_numErrors)) endPos = getDocument().getLength();", "+        else endPos = _errorListPositions[i + 1].getOffset();", "+        ", "+//        Utilities.showDebug(\"startpos = \" + startPos + \" endpos = \" + endPos);", "+//            Utilities.showDebug(\"Either startRect or endRect is null!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e37aab3fea2eb4d1af298a16ad47346", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ClasspathFilter.java", "commitBeforeChange": "8f8a64864bd9c3c9658401188aaec5c9c0dfe4f7", "commitAfterChange": "9e1a29777c7e5973840e817aca59ceea66af7a9c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean accept(File f)", "signatureAfterChange": "   public boolean accept(File f)", "diff": ["-   */", "+  /** Returns true if the file's extension matches JAR or ZIP. */", "-    if (f.isDirectory()) {", "-      return true;", "-    }", "+    if (f.isDirectory()) return true;", "-    if (extension != null) {", "-      return (extension.equals(\"jar\") || extension.equals(\"zip\"));", "-    }", "+    if (extension != null) return (extension.equals(\"jar\") || extension.equals(\"zip\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eb120311cd8265b39d40b1b7821edc3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public T prevItem()", "signatureAfterChange": "     public T prevItem()", "diff": ["-      if (atFirstItem() || atStart() || ModelList.this.isEmpty()) {", "+      if (atFirstItem() || atStart() || ModelList.this.isEmpty())", "-      }", "-      else {", "-        return _point.pred.getItem();", "-      }", "+      return _point.pred.getItem();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f06235296e23d9b1ff0de5a5bca1fbd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public boolean isInnerClassOf(SymbolData outerClass, boolean stopAtStatic)", "signatureAfterChange": "   public boolean isInnerClassOf(SymbolData outerClass, boolean stopAtStatic)", "diff": ["-    if (this == outerClass) {return true;}", "+    if (this == outerClass) return true;", "-    if (outerData == null) {return false;}", "+    if (outerData == null) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f72ba7ae05545bdc4099539bc464f09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ColorOptionComponent.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private void _updateField(Color c)", "signatureAfterChange": "   private void _updateField(Color c)", "diff": ["-    if (_isBackgroundColor) {", "-      _colorField.setBackground(c);", "-    }", "-    else {", "-      _colorField.setForeground(c);", "-    }", "-    _colorField.setText(getLabelText() + \" (\"+_option.format(c)+\")\");", "+    if (_isBackgroundColor) _colorField.setBackground(c);", "+    else _colorField.setForeground(c);", "+    _colorField.setText(getLabelText() + \" (\" + _option.format(c) + \")\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6569f81e5d1488e06e23b3a25b39f248", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 324, "methodNumberAfterChange": 329, "signatureBeforeChange": "   private void addDocToClasspath(OpenDefinitionsDocument doc)", "signatureAfterChange": "   private void addDocToClasspath(OpenDefinitionsDocument doc)", "diff": ["-      try{", "-        if(doc.isProjectFile() || doc.isAuxiliaryFile()) {", "+      try {", "+        if (doc.isProjectFile() || doc.isAuxiliaryFile())", "-        }else{", "-          _interactionsModel.addExternalFilesClassPath(classpath.toURL());", "-        }", "-      }catch(MalformedURLException murle) {", "+        else _interactionsModel.addExternalFilesClassPath(classpath.toURL());", "+      }", "+      catch(MalformedURLException murle) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6596cd49a958508c9fa4e66083f19d81", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "701cda038bdbb4505f738d5f2728e5888b8608b3", "commitAfterChange": "a2c3a24c2af61d289658b8fde0de718a948c97d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Object interpret(String s) throws ExceptionReturnedException", "signatureAfterChange": "   public Object interpret(String s) throws ExceptionReturnedException", "diff": ["-    /**", "-     * trims the whitespace from beginning and end of string", "-     * checks the end to see if it is a semicolon", "-     * adds a semicolon if necessary", "+    ", "+    /* Trims the whitespace from beginning and end of string", "+     * Checks the end to see if it is a semicolon", "+     * Adds a semicolon if necessary", "-      if (print)", "-        return result;", "-      else", "-        return JavaInterpreter.NO_RESULT;", "+      if (print) return result;", "+      else return JavaInterpreter.NO_RESULT;", "-      if (cause instanceof ThrownException) {", "-        cause = ((ThrownException) cause).getException();", "-      }", "-      else if (cause instanceof CatchedExceptionError) {", "-        cause = ((CatchedExceptionError) cause).getException();", "-      }", "+      if (cause instanceof ThrownException) cause = ((ThrownException) cause).getException();", "+      else if (cause instanceof CatchedExceptionError) cause = ((CatchedExceptionError) cause).getException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68d7b97ae9881de7bc13409e4007db60", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public void changeInputListener(InputListener oldListener, InputListener newListener)", "signatureAfterChange": "   public void changeInputListener(InputListener oldListener, InputListener newListener)", "diff": ["-      if (_inputListener == oldListener) {", "-        _inputListener = newListener;", "-      }", "-      else {", "-        throw new IllegalArgumentException(\"The given old listener is not installed!\");", "-      }", "+      if (_inputListener == oldListener) _inputListener = newListener;", "+      else", "+        throw new IllegalArgumentException(\"The given old listener is not installed!\");      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "696ece3c34e904db4ba26c38fb2e1290", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 312, "methodNumberAfterChange": 312, "signatureBeforeChange": "       private void _setUpPanes()", "signatureAfterChange": "       private void _setUpPanes()", "diff": ["-        int debugHeight =", "-          DrJava.getConfig().getSetting(DEBUG_PANEL_HEIGHT).intValue();", "+        int debugHeight = DrJava.getConfig().getSetting(DEBUG_PANEL_HEIGHT).intValue();", "-        if ((debugHeight > debugMinSize.height)) {", "-          debugMinSize.height = debugHeight;", "-        }", "+        if ((debugHeight > debugMinSize.height)) debugMinSize.height = debugHeight;", "-    } else {", "-      _debugPanel = null;", "-    }", "+    } ", "+    else _debugPanel = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a8dac8aa17bcc0a5c16066caa62e2c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "      protected OpenDefinitionsDocument openFileHelper(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "      protected OpenDefinitionsDocument openFileHelper(FileOpenSelector com) throws IOException,      OperationCanceledException, AlreadyOpenException", "diff": ["-  protected OpenDefinitionsDocument openFileHelper(FileOpenSelector com)", "-    throws IOException, OperationCanceledException, AlreadyOpenException {", "+  protected OpenDefinitionsDocument openFileHelper(FileOpenSelector com) throws IOException, ", "+    OperationCanceledException, AlreadyOpenException {", "+    ", "-      if(odd.isProjectFile() || odd.isAuxiliaryFile()){", "+      if (odd.isProjectFile() || odd.isAuxiliaryFile())", "-      }else{", "-        _interactionsModel.addExternalFilesClassPath(classpath.toURL());", "-      }", "+      else _interactionsModel.addExternalFilesClassPath(classpath.toURL());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc150ae5470fc81a92b6bddd9d4c0fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/ExecJVM.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static void ventBuffers(Process theProc, LinkedList<String> outLines,                                  LinkedList<String> errLines) throws IOException", "signatureAfterChange": "   public static void ventBuffers(Process theProc, LinkedList<String> outLines,                                  LinkedList<String> errLines) throws IOException", "diff": ["-        if (outBuf.ready()) {", "-          output = outBuf.readLine();", "-        }", "-        else {", "-          output = null;", "-        }", "+        if (outBuf.ready()) output = outBuf.readLine();", "+        else output = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c04835f8ac884b1f198e94b329230dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "9c56cd9d9775329b3a5e6a7701ab0c05369850af", "commitAfterChange": "a7a439f9a53360ece86e113cdb8203e5c8b2acda", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "signatureAfterChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "diff": ["-      if (compilerErrorsArray.length == 0) {", "+      if (compilerErrorsArray.length == 0)", "-      }", "-//      Iterator<File> iter = filesToRestore.iterator();", "-//      while (iter.hasNext()) {", "-//        _getter.getDocumentForFile(iter.next()).revertFile();", "-//      }", "+", "-      // Restore the files that were moved.", "-//      Iterator<File> iter = filesToRestore.iterator();", "-//      while (iter.hasNext()) {", "-//        File f = iter.next();", "-//        File sourceFile = new File(f.getAbsolutePath() + \".beginner\");", "-//        // Windows needs this since otherwise rename won't work.", "-//        if (f.exists()) {", "-//          f.delete();", "-//        }", "-//        sourceFile.renameTo(f);", "-//      }", "-    else {", "-      _distributeErrors(new CompilerError[0]);", "-    }", "+    else _distributeErrors(new CompilerError[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e2bd78a7ed45fe01ef0f6a650b1ba6c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public void select(int selectionStart, int selectionEnd)", "signatureAfterChange": "   public void select(int selectionStart, int selectionEnd)", "diff": ["-    if (selectionStart < 0) {", "-      selectionStart = 0;", "-    }", "-    if (selectionEnd < 0) {", "-      selectionEnd = 0;", "-    }", "+    if (selectionStart < 0) selectionStart = 0;", "+    if (selectionEnd < 0) selectionEnd = 0;", "-    moveCaretPosition(selectionEnd);", "+    moveCaretPosition(selectionEnd);  // What the caret position in the reduced model?  It is now inconsistent!"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700aca1d73048e809a3a8be435519e88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc,                                             int offset, int lineNum)     throws DebugException", "signatureAfterChange": "   public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum)      throws DebugException", "diff": ["-  public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc,", "-                                            int offset, int lineNum)", "-    throws DebugException", "-  {", "+  public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum) ", "+    throws DebugException {", "+    ", "-", "-    if (breakpoint == null) {", "-      setBreakpoint(new Breakpoint (doc, offset, lineNum, this));", "-    }", "-    else {", "-      removeBreakpoint(breakpoint);", "-    }", "+    ", "+    if (breakpoint == null)  setBreakpoint(new Breakpoint (doc, offset, lineNum, this));", "+    else removeBreakpoint(breakpoint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "727c25cfb31ae4ffcd84676b3b9c8aff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 207, "methodNumberAfterChange": 209, "signatureBeforeChange": "     public boolean isModifiedSinceSave()", "signatureAfterChange": "     public boolean isModifiedSinceSave()", "diff": ["-      if(_cacheAdapter.isReady()){", "-        return getDocument().isModifiedSinceSave();", "-      }else{", "-        return false;", "-      }", "+      if (_cacheAdapter.isReady()) return getDocument().isModifiedSinceSave();", "+      else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "737a8d761000c58d4e40e8b5f040a21c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   static void openCommandLineFiles(MainFrame mf, String[] filesToOpen)", "signatureAfterChange": "   static void openCommandLineFiles(MainFrame mf, String[] filesToOpen)", "diff": ["-        if (isProjectFile) {", "-          mf.openProject(command);", "-        }", "-        else {", "-          mf.getModel().openFile(command);", "-        }", "+        if (isProjectFile) mf.openProject(command);", "+        else mf.getModel().openFile(command);", "-      catch (Exception ex) {", "-        throw new UnexpectedException(ex);", "-      }", "+      catch (Exception ex) { throw new UnexpectedException(ex); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "765bc3ad021daff5bd2ee614c0f368a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "   public void createConstructor(SymbolData sd)", "signatureAfterChange": "   public void createConstructor(SymbolData sd)", "diff": ["-    if (LanguageLevelConverter.isAdvancedFile(_file)) {return;}", "+    if (LanguageLevelConverter.isAdvancedFile(_file)) return;", "-    if (sd.isContinuation()) {return;}", "+    if (sd.isContinuation()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77add1ae71078347551666f566207089", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private String _getQuoteType(String quote)", "signatureAfterChange": "   private String _getQuoteType(String quote)", "diff": ["-    if (_cursor.atStart() || _cursor.atFirstItem()) {", "-      return quote;", "-    }", "+    if (_cursor.atStart() || _cursor.atFirstItem()) return quote;", "-    else {", "-      return quote;", "-    }", "+    else return quote;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77ebe1c80bb779055ab11dedf963b0ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void testEnded(String name, boolean wasSuccessful, boolean causedError)", "signatureAfterChange": "     public void testEnded(String name, boolean wasSuccessful, boolean causedError)", "diff": ["-     */", "+    /** Displays the results of a test that has finished. */", "-      if (fullName.equals(JUNIT_WARNING)) {", "-        return;", "-      }", "+      if (fullName.equals(JUNIT_WARNING)) return;", "+      ", "-        if (doc instanceof SwingDocument) {", "-          ((SwingDocument)doc).setCharacterAttributes(index, length, set, false);", "-        }", "+        if (doc instanceof SwingDocument) ((SwingDocument)doc).setCharacterAttributes(index, length, set, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c7244281ef5b0f437e834d12ab1a4f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void show(int _current)", "signatureAfterChange": "      private void show(int _current)", "diff": ["-  private void show(int _current){", "+  private void show(int _current) {", "-      if(text.length() > 0){", "+      if (text.length() > 0) {", "-        if(_scroller.getPreferredSize().getHeight() > 200){", "+        if (_scroller.getPreferredSize().getHeight() > 200)", "-        }", "+        ", "-      }else{", "-        _scroller.setVisible(false);", "+      else _scroller.setVisible(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da78a0ed1f544e36f6ac6daa317c178", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "   void getDistToCurrentBraceNewline(IndentInfo braceInfo)", "signatureAfterChange": "   void getDistToCurrentBraceNewline(IndentInfo braceInfo)", "diff": ["- */", "+    */", "-    if (braceInfo.distToBraceCurrent == -1 || copyCursor.atStart()) { // no brace", "-      return;", "-    }", "+    if (braceInfo.distToBraceCurrent == -1 || copyCursor.atStart()) return; // no brace", "-    if (walkcount == -1) {", "-      braceInfo.distToNewlineCurrent = -1;", "-    }", "+    if (walkcount == -1) braceInfo.distToNewlineCurrent = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e2d6a22c478df24603f7a3f9708671b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputModel.java", "commitBeforeChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "commitAfterChange": "f3b30de075946ab18141ef0ec7abdb9f0f10037b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public X getLongestMatch(X item, List<X> items, PredictiveInputModel<X> pim)", "signatureAfterChange": "     public X getLongestMatch(X item, List<X> items, PredictiveInputModel<X> pim)", "diff": ["-      if (items.size()>0) {", "-        return items.get(0); // can't thing of a good way", "-      }", "-      else {", "-        return null;", "-      }", "+      if (items.size() > 0)  return items.get(0); // can't thing of a good way", "+      else return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8034d1519c71807711d2e4e9dd8d3530", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "   private void _selectReplacedItem(int length)", "signatureAfterChange": "   private void _selectReplacedItem(int length)", "diff": ["-   */", "+  /** This method is used to select the item that has been inserted in a replacement. */", "-    if(_machine.getSearchBackwards()){", "-      from = to + length;", "-    }", "-    else {", "-      from = to - length;", "-    }", "+    if (_machine.getSearchBackwards()) from = to + length;", "+    else                               from = to - length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80e4a6bd76d9fa3e3cfb746b0136eedb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 69, "signatureBeforeChange": "   private String _getValue(Value value) throws DebugException", "signatureAfterChange": "   private String _getValue(Value value) throws DebugException", "diff": ["-      Value stringValue = object.invokeMethod(thread, method, new LinkedList<Value>(),", "-                                              ObjectReference.INVOKE_SINGLE_THREADED);", "-      if (stringValue == null) {", "-        return \"null\";", "-      }", "-      else {", "-        return stringValue.toString();", "-      }", "+      Value stringValue = ", "+        object.invokeMethod(thread, method, new LinkedList<Value>(), ObjectReference.INVOKE_SINGLE_THREADED);", "+      if (stringValue == null)  return \"null\";", "+      return stringValue.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81892ee77f0f28ac0640592548389bc6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public void removeInterpreter(String name)", "signatureAfterChange": "   public void removeInterpreter(String name)", "diff": ["-    if (!_enabled) {", "-      return;", "-    }", "+    if (!_enabled)  return;", "-      if (name.equals(_currentInterpreterName)) {", "-        _currentInterpreterName = null;", "-      }", "+      if (name.equals(_currentInterpreterName))  _currentInterpreterName = null;", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "+    catch (RemoteException re) { _threwException(re); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83ec60c101e38f9fadde36ca8d098731", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 240, "methodNumberAfterChange": 230, "signatureBeforeChange": "     public String getPackageName() throws InvalidPackageException", "signatureAfterChange": "     public String getPackageName() throws InvalidPackageException", "diff": ["-      if(isUntitled()) {", "-        _packageName = \"\";", "-      }", "-      else if(_packageName == null){", "-        _packageName = getDocument().getPackageName();", "-      }", "+      if (isUntitled()) _packageName = \"\";", "+      else if (_packageName == null) _packageName = getDocument().getPackageName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84cc0b193906c77180c05c080483b71b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    private static void createAndShowGUI(final String[] args)", "signatureAfterChange": "    private static void createAndShowGUI(final String[] args)", "diff": ["-        try {", "-          initConfig();", "-        }", "+        try { initConfig(); }", "-        if (!configLAFName.equals(currLAFName)) {", "-          UIManager.setLookAndFeel(configLAFName);", "-        }", "+        if (!configLAFName.equals(currLAFName)) UIManager.setLookAndFeel(configLAFName);", "-      ", "-        System.setProperty(\"sun.awt.exception.handler\",", "-                           \"edu.rice.cs.drjava.ui.AWTExceptionHandler\");", "+        System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.AWTExceptionHandler\");", "-          public void print(String s) {", "-            mf.getModel().systemOutPrint(s);", "-          }", "+          public void print(String s) { mf.getModel().systemOutPrint(s); }", "-          public void print(String s) {", "-            mf.getModel().systemErrPrint(s);", "-          }", "+          public void print(String s) { mf.getModel().systemErrPrint(s); }", "-        if (_showDrJavaDebugConsole) {", "-          showDrJavaDebugConsole(mf);", "-        }", "+        if (_showDrJavaDebugConsole) showDrJavaDebugConsole(mf);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "879fdea4933d8cdfd9b74237f8a34e5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public int startCompoundEdit()", "signatureAfterChange": "   public int startCompoundEdit()", "diff": ["-    if(_nextKey < Integer.MAX_VALUE) {", "-      _nextKey++;", "-    }", "-    else {", "-      _nextKey = Integer.MIN_VALUE;", "-    }", "+    if(_nextKey < Integer.MAX_VALUE) _nextKey++;", "+    else _nextKey = Integer.MIN_VALUE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a97035d8a04e4c76a08fefd43da9aea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 150, "signatureBeforeChange": "   public String getDisplayFilename(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public String getDisplayFilename(OpenDefinitionsDocument doc)", "diff": ["-      if (extIndex > 0) {", "-        filename = filename.substring(0, extIndex);", "-      }", "+      if (extIndex > 0) filename = filename.substring(0, extIndex);", "-    if (doc.isModifiedSinceSave()) {", "-      filename = filename + \" *\";", "-    }", "+    if (doc.isModifiedSinceSave()) filename = filename + \" *\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c60bf9eb91a79c22760bacc9abce4d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 371, "methodNumberAfterChange": 368, "signatureBeforeChange": "     public void interpreterChanged(boolean inProgress)", "signatureAfterChange": "     public void interpreterChanged(boolean inProgress)", "diff": ["-      if (inProgress) {", "-        _disableInteractionsPane();", "-      }", "-      else {", "-        _enableInteractionsPane();", "-      }", "+      if (inProgress) _disableInteractionsPane();", "+      else _enableInteractionsPane();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee8efea7c76686328f18e4e63511142", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "cc814c34f96bfde67f8ae465727b510fa3ed34c9", "commitAfterChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "     public DelegatingLocation(String sourceName, int lineNumber, Location delegee)", "signatureAfterChange": "     public DelegatingLocation(String sourceName, int lineNumber, Location delegee)", "diff": ["-        if (pos >= 0) {", "+        if (pos >= 0)", "-        }", "-        else {", "+        else", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f120a12944bab47203cbd296188be22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOpsTest.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public static void main(String[] args)", "signatureAfterChange": "   public static void main(String[] args)", "diff": ["-    if (args.length != 1) {", "-      System.exit(1);", "-    }", "+    if (args.length != 1) System.exit(1);", "-    if (!dir.exists()) {", "-      System.exit(2);", "-    }", "+   ", "+    if (! dir.exists()) System.exit(2);", "+", "-    // Ok, exit cleanly", "+    // OK, exit cleanly"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9086a94be9b6af51fcb9c1e03e0aefa1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public String generatePathString(TreePath tp)", "signatureAfterChange": "   public synchronized String generatePathString(TreePath tp)", "diff": ["-  public String generatePathString(TreePath tp) {", "+  public synchronized String generatePathString(TreePath tp) {", "-      if (curr == root) {", "-        path = \"./\" + path;", "-      }", "-      else {", "-        path = curr + \"/\" + path;", "-      }", "+      if (curr == root) path = \"./\" + path;", "+      else path = curr + \"/\" + path;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "921cc7c68a96f451f7c0b5df23fd6190", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public OpenDefinitionsDocument getDocument()", "signatureAfterChange": "   public OpenDefinitionsDocument getDocument()", "diff": ["-   */", "-  public OpenDefinitionsDocument getDocument(){", "-    if(_docs.size() > 0){", "-      return _docs.getFirst();", "-    }else{", "-      return null;", "-    }", "-  }", "+  /** Returns null if the list is empty, or the currently prefered OpenDefinitionsDocument. */", "+  public OpenDefinitionsDocument getDocument() {", "+    if (_docs.size() > 0) return _docs.getFirst();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "940b7a97aa4b8ab892874af9bab2349f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FileSelectorComponent.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void _chooseFile()", "signatureAfterChange": "   private void _chooseFile()", "diff": ["-    if (_fileFilter != null) {", "-      _chooser.setFileFilter(_fileFilter);", "-    }", "+    if (_fileFilter != null) _chooser.setFileFilter(_fileFilter);", "-      if (chosen != null) {", "-        setFileField(chosen);", "-      }", "+      if (chosen != null) setFileField(chosen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "943ae8c4afcfd907c8082882aefc5142", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionConstants.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static Font getDefaultMainFont()", "signatureAfterChange": "     public static Font getDefaultMainFont()", "diff": ["-      if (PlatformFactory.ONLY.isMacPlatform()) {", "-        return Font.decode(\"Monaco-12\");", "-      }", "-      else {", "-        return Font.decode(\"Monospaced-12\");", "-      }", "+      if (PlatformFactory.ONLY.isMacPlatform())  return Font.decode(\"Monaco-12\");", "+      else return Font.decode(\"Monospaced-12\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94726845c494d633fc657f403037d551", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/MatchWholeWordState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "    private void wrapAroundDocument()", "signatureAfterChange": "    private void wrapAroundDocument()", "diff": ["-    if (!_searchBackwards) {", "-      setPosition(0);", "-    }", "-    else {", "-      setPosition(_doc.getLength() - 1);", "-    }", "+    if (!_searchBackwards) setPosition(0);", "+    else setPosition(_doc.getLength() - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96bebf15d0886c5bb6b8192d8339f602", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   synchronized void handleDisconnectedException() throws DebugException", "signatureAfterChange": "   synchronized void handleDisconnectedException() throws DebugException", "diff": ["-   */", "+   *  queue, dealing only with exit events (VMDeath, VMDisconnect) so that we terminate correctly. */", "-          if (event instanceof VMDeathEvent) {", "-            _handleVMDeathEvent((VMDeathEvent)event);", "-          }", "-          else if (event instanceof VMDisconnectEvent) {", "-            _handleVMDisconnectEvent((VMDisconnectEvent)event);", "-          }", "+          if (event instanceof VMDeathEvent) _handleVMDeathEvent((VMDeathEvent)event);", "+          else if (event instanceof VMDisconnectEvent)  _handleVMDisconnectEvent((VMDisconnectEvent)event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "976ffbeff912026874dd5068ade355fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionConstants.java", "commitBeforeChange": "f6810ad68cbb0aaa0d9f5ff0052437da87098ab7", "commitAfterChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static Font getDefaultDocListFont()", "signatureAfterChange": "     public static Font getDefaultDocListFont()", "diff": ["-      if (PlatformFactory.ONLY.isMacPlatform()) {", "-        return Font.decode(\"Monaco-10\");", "-      }", "-      else {", "-        return Font.decode(\"Monospaced-10\");", "-      }", "+      if (PlatformFactory.ONLY.isMacPlatform()) return Font.decode(\"Monaco-10\");", "+      else return Font.decode(\"Monospaced-10\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99788c18ecb5cb30d931669e5cc70fad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 473, "methodNumberAfterChange": 474, "signatureBeforeChange": "    protected void setParentContainerEnabled(boolean enabled)", "signatureAfterChange": "    protected void setParentContainerEnabled(boolean enabled)", "diff": ["-   if (enabled) {", "-    hourglassOff();", "-   } else {", "-    hourglassOn();", "-   }", "+   if (enabled) hourglassOff(); ", "+   else hourglassOn();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a1247b3233d53a0af2140ca46857470", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ReverseHighlighter.java", "commitBeforeChange": "2aadb81a716e2a196f82baa127c28e3225664fab", "commitAfterChange": "c4ec4fbaa86590f5d9d73c067159d69b14149c37", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "          void union(Shape bounds)", "signatureAfterChange": "          void union(Shape bounds)", "diff": ["-      if (bounds instanceof Rectangle) {", "-        alloc = (Rectangle)bounds;", "-      }", "-      else {", "-        alloc = bounds.getBounds();", "-      }", "+      if (bounds instanceof Rectangle) alloc = (Rectangle)bounds;", "+      else alloc = bounds.getBounds();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ae138eac8d2530395404c5c37ea598a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SourceInfo.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public String toString()", "signatureAfterChange": "   public String toString()", "diff": ["-    if (_file == null) {", "-      fileName = \"(no file)\";", "-    }", "-    else {", "-      fileName = _file.getName();", "-    }", "+    if (_file == null) fileName = \"(no file)\";", "+    else               fileName = _file.getName();", "-    return \"[\" + fileName + \": \" +", "-           \"(\" + _startLine + \",\" + _startColumn + \")-\" +", "+    return \"[\" + fileName + \": \" + \"(\" + _startLine + \",\" + _startColumn + \")-\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c523b87b7acfc37307e0094715f02c8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public TypeData simpleSuperConstructorInvocationAllowed(SimpleSuperConstructorInvocation that)", "signatureAfterChange": "   public TypeData simpleSuperConstructorInvocationAllowed(SimpleSuperConstructorInvocation that)", "diff": ["-    if (args == null) {return null;}", "+    if (args == null) return null;", "-    if (cd == null) {return null;}", "+    if (cd == null) return null;", "-    //if constructor is declared to throw exceptions, add them to thrown list:", "+    // if constructor is declared to throw exceptions, add them to thrown list:", "-    for (int i = 0; i<thrown.length; i++) {", "+    for (int i = 0; i < thrown.length; i++) {", "-", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f960f7fab419a623b4089f60ff48e32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorFileOptionComponentTest.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public boolean vectorEquals(Vector<File> v1, Vector<File> v2)", "signatureAfterChange": "   public boolean vectorEquals(Vector<File> v1, Vector<File> v2)", "diff": ["-   */", "+    */", "-        if (!v1.elementAt(i).equals(v2.elementAt(i))) {", "-          return false;", "-        }", "+        if (!v1.elementAt(i).equals(v2.elementAt(i)))  return false;", "-    else { // different sizes", "-      return false;", "-    }", "+    else return false; /* different sizes */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a30ac525ec6d3925c2b9ffe759c01c9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    private void _checkPreviousInsertBackSlash()", "signatureAfterChange": "    private void _checkPreviousInsertBackSlash()", "diff": ["-    if (_cursor.current().getSize() == 2) {", "-      _cursor.setBlockOffset(1);", "-    }", "-    else {", "-      _cursor.next();", "-    }", "+    if (_cursor.current().getSize() == 2) _cursor.setBlockOffset(1);", "+    else _cursor.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a70cb76b56216d8f88ec598950dbc8c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "6d55d86705248616cac5b324a7c528485ceb6104", "commitAfterChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 230, "signatureBeforeChange": "     protected int getIndexOf(R region)", "signatureAfterChange": "     protected int getIndexOf(R region)", "diff": ["-        if (region==r) { return index; }", "-        else { ++index; }", "+        if (region == r) return index;", "+        else  ++index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab90c422c86e4b87436a458833467050", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private void _resumeThread(ThreadReference thread, boolean fromStep)     throws DebugException", "signatureAfterChange": "   private void _resumeThread(ThreadReference thread, boolean fromStep)     throws DebugException", "diff": ["-    catch(DebugException e) {  //??", "-      throw new UnexpectedException(e);", "-    }", "+    catch(DebugException e) { throw new UnexpectedException(e); }", "-    for (int i=suspendCount; i>0; i--) {", "-      thread.resume();", "-    }", "+    for (int i=suspendCount; i>0; i--) thread.resume();", "-    if (!fromStep && !_suspendedThreads.isEmpty()) {", "-      _switchToSuspendedThread();", "-    }", "+    if (! fromStep && ! _suspendedThreads.isEmpty()) _switchToSuspendedThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc0709a6ecd37e77581fd160e65c406", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void updateData()", "signatureAfterChange": "   public void updateData()", "diff": ["-   */", "+  /** Causes all display tables to update their information from the debug manager. */", "-        if (_debugger.isCurrentThreadSuspended()) {", "-          _stackFrames = _debugger.getCurrentStackFrameData();", "-        }", "-        else {", "-          _stackFrames = new Vector<DebugStackData>();", "-        }", "+        ", "+        if (_debugger.isCurrentThreadSuspended())  _stackFrames = _debugger.getCurrentStackFrameData();", "+        else  _stackFrames = new Vector<DebugStackData>();", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc74d5150beac8f283f1ac96a46c3fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "a7b492b5dc0c5b51f07f6d1e45c42a6f55e8cb91", "commitAfterChange": "5096aaab648cea3686054749f4edbb0813185db1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private static void _showErrorMessage(String cause, Throwable t)", "signatureAfterChange": "   private static void _showErrorMessage(String cause, Throwable t)", "diff": ["-    if (SHOW_DEBUG_DIALOGS) {", "-      new ScrollableDialog(null, \"Error\", \"Error details:\", msg).show();", "-    }", "-    else {", "-      System.out.println(msg);", "-    }", "+    if (SHOW_DEBUG_DIALOGS) new ScrollableDialog(null, \"Error\", \"Error details:\", msg).show();", "+    else System.out.println(msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "addc82806f12eb5d57ad471dd55bc460", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 218, "signatureBeforeChange": "     public boolean revertIfModifiedOnDisk() throws IOException", "signatureAfterChange": "     public boolean revertIfModifiedOnDisk() throws IOException", "diff": ["-", "-        if (shouldRevert) {", "-          doc.revertFile();", "-        }", "+        if (shouldRevert) doc.revertFile();", "-      else {", "-        return false;", "-      }", "+      return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae11afbc0891c9bc0efabc93e113ee21", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/ConsoleDocument.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void insertNewLine(int pos)", "signatureAfterChange": "   public void insertNewLine(int pos)", "diff": ["-    if (pos > getDocLength()) {", "-      pos = getDocLength();", "-    }", "-    else if (pos < 0) {", "-      pos = 0;", "-    }", "+    if (pos > getDocLength())  pos = getDocLength();", "+    else if (pos < 0) pos = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af734ffcf279ab67ffc9a1e1dfc72b0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public boolean selectDocumentAt(int x, int y)", "signatureAfterChange": "   public synchronized boolean selectDocumentAt(int x, int y)", "diff": ["-  public boolean selectDocumentAt(int x, int y) {", "+  public synchronized boolean selectDocumentAt(int x, int y) {", "-    if(path == null){", "-      return false;", "-    }else{", "+    if (path == null) return false;", "+    else {", "-      if(node instanceof LeafNode){", "+      if (node instanceof LeafNode) {", "-      }else if(node instanceof InnerNode){", "+      } ", "+      else if (node instanceof InnerNode) {", "-      }else if(node instanceof RootNode){", "+      } ", "+      else if (node instanceof RootNode) {", "-      }else{", "-        return false;", "-      }", "+      } ", "+      else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa92fc29897c3611386585291efbb2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 421, "methodNumberAfterChange": 419, "signatureBeforeChange": "    boolean inDebugMode()", "signatureAfterChange": "    boolean inDebugMode()", "diff": ["-    if (dm.isAvailable()) {", "-      return dm.isReady() && (_debugPanel != null);", "-    }", "-    else {", "-      return false;", "-    }", "+    if (dm.isAvailable()) return dm.isReady() && (_debugPanel != null);", "+    return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b8a2c05035ab5c8b47ceb3598bff17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "   private void _resetUndo()", "signatureAfterChange": "   private void _resetUndo()", "diff": ["-   */", "+  /** Reset the document Undo list. */", "-    if (_undoAction == null) {", "-      _undoAction = new UndoAction();", "-    }", "-    if (_redoAction == null) {", "-      _redoAction = new RedoAction();", "-    }", "+    if (_undoAction == null) _undoAction = new UndoAction();", "+    if (_redoAction == null) _redoAction = new RedoAction();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b32eda5805ed76e2eaf3b232a9fffe2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private int _getIndexForError(CompilerError error)", "signatureAfterChange": "     private int _getIndexForError(CompilerError error)", "diff": ["-     */", "+    /** Returns the index into _errorListPositions corresponding to the given CompilerError. */", "-      if (error == null) {", "-        throw new IllegalArgumentException(\"Couldn't find index for null error\");", "-      }", "+      ", "+      if (error == null) throw new IllegalArgumentException(\"Couldn't find index for null error\");", "-        ", "-        if (error.equals(e)) {", "-          return i;", "-        }", "+        if (error.equals(e))  return i;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcac0176e8d17da9718e7c804b3f5461", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerError.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public String getLineMessage()", "signatureAfterChange": "   public String getLineMessage()", "diff": ["-  public String getLineMessage(){", "-    if (_file == null || this._lineNumber < 0){", "-      return \"(no source location)\";", "-    } else {", "-      return \"\" + (_lineNumber + 1);", "-    }", "+  public String getLineMessage() {", "+    if (_file == null || this._lineNumber < 0) return \"(no source location)\";", "+    return \"\" + (_lineNumber + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcf5b27e4f2c35d009a1c57426a2742a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "cea46dd993e521d96771e5cfebb7a88bf25bb742", "commitAfterChange": "b7744671f21e751f13a1d59cecdc1108de1cf3f6", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 160, "signatureBeforeChange": "     public boolean isAuxiliaryFile()", "signatureAfterChange": "     public boolean isAuxiliaryFile()", "diff": ["-      if(!isUntitled()){", "-        return _state.isAuxiliaryFile(_file);", "-      }else{", "-        return false;", "-      }", "+      if (!isUntitled()) return _state.isAuxiliaryFile(_file);", "+      else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdd0ce6e872e3c8eabdee5beccff0be3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": "   private ImageIcon _getIcon(String name)", "signatureAfterChange": "   private ImageIcon _getIcon(String name)", "diff": ["-   */", "+  /** Mirrored from MainFrame, will later use the same Icon access code. */", "-    if (url != null) {", "-      return new ImageIcon(url);", "-    } else {", "-      return null;", "-    }", "+    if (url != null) return new ImageIcon(url);", "+    return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c142558f89faf959b7c55b5871a6f192", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "commitAfterChange": "010ae297b5b09284b0dfa287aa524a83e41fa50d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void updateData()", "signatureAfterChange": "   public void updateData()", "diff": ["-   */", "+  /** Causes all display tables to update their information from the debug manager. */", "+//    new ScrollableDialog(null, \"updateData() called in DebugPanel\", Thread.currentThread().toString(), Arrays.toString(Thread.currentThread().getStackTrace())).show();", "-        if (_debugger.isCurrentThreadSuspended()) {", "-          _stackFrames = _debugger.getCurrentStackFrameData();", "-        }", "-        else {", "-          _stackFrames = new Vector<DebugStackData>();", "-        }", "+        if (_debugger.isCurrentThreadSuspended()) _stackFrames = _debugger.getCurrentStackFrameData();", "+        else _stackFrames = new Vector<DebugStackData>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3a0a5c2dedd5db772682f24ebc48f70", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 414, "methodNumberAfterChange": 415, "signatureBeforeChange": "      private void prevRecentDoc()", "signatureAfterChange": "      private void prevRecentDoc()", "diff": ["-    if (_recentDocFrame.isVisible()) {", "-      _recentDocFrame.prev();", "-    }else{", "-      _recentDocFrame.setVisible(true);", "-    }", "+    if (_recentDocFrame.isVisible()) _recentDocFrame.prev();", "+    else _recentDocFrame.setVisible(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c538242a54508dffe2b19fbf32ce42fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-   */", "-  public void processKeyEvent(KeyEvent e) {", "-    if(_mainFrame.getAllowKeyEvents()){", "-      KeyStroke ks = KeyStroke.getKeyStrokeForEvent(e);", "-      Action a = KeyBindingManager.Singleton.get(ks);", "-      // Don't perform the action if the keystroke is NULL_KEYSTROKE,", "-      //  which can get generated by some Windows keys", "-      if ((ks != KeyStrokeOption.NULL_KEYSTROKE) && (a != null)) {", "-        //      System.out.println(\"Keystroke was null\");", "-        endCompoundEdit();", "-        // Performs the action a", "-        SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "-        ", "-        // Make sure we don't consume it again", "-        e.consume();", "-      }", "-      else {", "-        // Allows one step undoing of the keystrokes defined on the keymap (e.g. enter, tab, '{', '}', ':').", "-        Keymap km = getKeymap();", "-        ", "-        if (km.isLocallyDefined(ks) || km.isLocallyDefined(KeyStroke.getKeyStroke(ks.getKeyChar()))) {", "-          // We're breaking up compound edits at the granularity of \"enter\"'s.", "-          if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "-            endCompoundEdit();", "-          }", "-         ", "-          ", "-             CompoundUndoManager undoMan = _doc.getUndoManager();", "-          //int key = undoMan.startCompoundEdit();", "-          //        System.out.println(\"supering 1 \" + isAltF4);", "-             ", "-             super.processKeyEvent(e);", "-          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes (see the definition of _undoListener).", "-          endCompoundEdit();", "-//          undoMan.endCompoundEdit(key); //commented out because of frenchkeyboard fix", "-          //        e.consume();", "-        }", "-        else {", "-          ", "-", "-          ", "-          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down", "-          // and fixes bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when", "-          // the alt key is down.", "-          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit actually happened.", "-          if ((((e.getModifiers() & InputEvent.META_MASK) != 0)) // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) //fixed for frenchkeyboard support", "-                && e.getKeyCode() == KeyEvent.VK_UNDEFINED) {", "-            ", "-            //            //          System.out.println(\"not supering 1 \" + isAltF4);", "-            return;", "-          }", "-          ", "-                    ", "-          // The following conditional fixes ease of use issue 693253 by checking if a typed event is", "-          // shift-delete or shift-backspace and then performing a delete or backspace operation,", "-          // respectively", "-          if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {", "-            int newModifiers = e.getModifiers() & ~(InputEvent.SHIFT_MASK);", "-            ", "-            KeyStroke newKs = KeyStroke.getKeyStroke(ks.getKeyCode(), newModifiers, ks.isOnKeyRelease());", "-            String name = KeyBindingManager.Singleton.getName(newKs);", "-            ", "-            if (name != null && (name.equals(\"Delete Previous\") || name.equals(\"Delete Next\"))) {", "-              endCompoundEdit();", "-              // We are unsure about the third and fourth arguments (e and e.getSource()); we simply", "-              // reuse the original values", "-              SwingUtilities.notifyAction(KeyBindingManager.Singleton.get(newKs), newKs, e, e.getSource(), newModifiers);", "-              e.consume();", "-              //            System.out.println(\"not supering 2 \" + isAltF4);", "-              return;", "-            }", "-          }", "-          ", "-          // If the KeyEvent is not a pressed event, process it before we do", "-          // granular undo or _inCompoundEdit may get set incorrectly.", "-          // This code breaks Alt-F4, and may break other system keybindings", "-          // since the event is consumed by us.  For now, just check Alt-F4.", "-          if (e.getID() != KeyEvent.KEY_TYPED) {", "-            //          System.out.println(\"supering 2 \" + isAltF4);", "-            //          boolean isAltF4 = e.getKeyCode() == KeyEvent.VK_F4 && (KeyEvent.ALT_MASK & e.getModifiers()) != 0;", "-            //          if (!isAltF4) {", "-            super.processKeyEvent(e);", "-            //            e.consume();", "-            //          }", "-            return;", "-          }", "-          ", "-          // backspace deletes twice without this check, overrides other keystrokes", "-          // that use the mask modifier", "-// Following IF block is commented out in regards to French Keyboard Fix", "-          //          if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\b') {", "-//            int _keyval = (int) e.getKeyChar();", "-//            if (_keyval >= 32 && _keyval <= 126) {", "-//              CompoundUndoManager undoMan = _doc.getUndoManager();", "-//              if (!_inCompoundEdit) {", "-//                _inCompoundEdit = true;", "-//                _compoundEditKey = undoMan.startCompoundEdit();", "-//                getUndoAction().updateUndoState();", "-//                getRedoAction().updateRedoState();", "-//                //super.processKeyEvent(e);", "-//              }", "-              //            else {", "-              //              UndoableEdit lastEdit = undoMan.getNextUndo();", "-              //              lastEdit.die();", "-              //              _compoundEditKey = undoMan.startCompoundEdit();", "-              //              super.processKeyEvent(e);", "-              //              undoMan.addEdit(lastEdit);", "-              //              undoMan.endCompoundEdit(_compoundEditKey);", "-              //            }", "-            }", "-            //          System.out.println(\"supering 3 \" + isAltF4);", "-        ", "-        if((e.getModifiers()&InputEvent.ALT_MASK)!=0){   //If ALT_MASK is actually pressed, which means !=0 // For tests only", "-          testVariable = true;// For tests only", "-        }// For tests only", "-        else{// For tests only", "-          testVariable = false;// For tests only", "-        }// For tests only", "-        ", "-            ", "-        ", "-        super.processKeyEvent(e);", "-          }", "-          //        else {", "-          //          e.consume();", "-          //          _inCompoundEdit = false;", "-          //        }", "-        }", "-      }", "+  public void processKeyEvent(KeyEvent e) {", "+    if(_mainFrame.getAllowKeyEvents()) {", "+      KeyStroke ks = KeyStroke.getKeyStrokeForEvent(e);", "+      Action a = KeyBindingManager.Singleton.get(ks);", "+      // Don't perform the action if the keystroke is NULL_KEYSTROKE (generated by some Windows keys)", "+      if ((ks != KeyStrokeOption.NULL_KEYSTROKE) && (a != null)) {", "+        //      System.out.println(\"Keystroke was null\");", "+        endCompoundEdit();", "+        // Performs the action a", "+        SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "+        ", "+        // Make sure we don't consume it again", "+        e.consume();", "+      }", "+      else {", "+        // Allows one step undoing of the keystrokes defined on the keymap (e.g. enter, tab, '{', '}', ':').", "+        Keymap km = getKeymap();", "+        ", "+        if (km.isLocallyDefined(ks) || km.isLocallyDefined(KeyStroke.getKeyStroke(ks.getKeyChar()))) {", "+          // We're breaking up compound edits at the granularity of \"enter\"'s.", "+          if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "+            endCompoundEdit();", "+          }", "+         ", "+          ", "+             CompoundUndoManager undoMan = _doc.getUndoManager();", "+          //int key = undoMan.startCompoundEdit();", "+          //        System.out.println(\"supering 1 \" + isAltF4);", "+             ", "+             super.processKeyEvent(e);", "+          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes (see the definition of _undoListener).", "+          endCompoundEdit();", "+//          undoMan.endCompoundEdit(key); //commented out because of frenchkeyboard fix", "+          //        e.consume();", "+        }", "+        else {", "+          ", "+", "+          ", "+          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down", "+          // and fixes bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when", "+          // the alt key is down.", "+          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit actually happened.", "+          if ((((e.getModifiers() & InputEvent.META_MASK) != 0)) // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) //fixed for frenchkeyboard support", "+                && e.getKeyCode() == KeyEvent.VK_UNDEFINED) {", "+            ", "+            //            //          System.out.println(\"not supering 1 \" + isAltF4);", "+            return;", "+          }", "+          ", "+                    ", "+          // The following conditional fixes ease of use issue 693253 by checking if a typed event is", "+          // shift-delete or shift-backspace and then performing a delete or backspace operation,", "+          // respectively", "+          if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {", "+            int newModifiers = e.getModifiers() & ~(InputEvent.SHIFT_MASK);", "+            ", "+            KeyStroke newKs = KeyStroke.getKeyStroke(ks.getKeyCode(), newModifiers, ks.isOnKeyRelease());", "+            String name = KeyBindingManager.Singleton.getName(newKs);", "+            ", "+            if (name != null && (name.equals(\"Delete Previous\") || name.equals(\"Delete Next\"))) {", "+              endCompoundEdit();", "+              // We are unsure about the third and fourth arguments (e and e.getSource()); we simply", "+              // reuse the original values", "+              SwingUtilities.notifyAction(KeyBindingManager.Singleton.get(newKs), newKs, e, e.getSource(), newModifiers);", "+              e.consume();", "+              //            System.out.println(\"not supering 2 \" + isAltF4);", "+              return;", "+            }", "+          }", "+          ", "+          /* If the KeyEvent is not a pressed event, process it before we do", "+           * granular undo or _inCompoundEdit may get set incorrectly.", "+           * This code breaks Alt-F4, and may break other system keybindings", "+           * since the event is consumed by us.  For now, just check Alt-F4. */", "+          if (e.getID() != KeyEvent.KEY_TYPED) {", "+            super.processKeyEvent(e);", "+            return;", "+          }", "+          ", "+          ", "+        }", "+        // This if statement is for tests only", "+        if ((e.getModifiers()&InputEvent.ALT_MASK) != 0) testVariable = true; // ALT_MASK actually pressed", "+        else testVariable = false;", "+        ", "+        super.processKeyEvent(e);", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c94b407247628500870c51a97fdc6cbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 403, "methodNumberAfterChange": 403, "signatureBeforeChange": "     private void _saveAllBeforeProceeding(String message, BooleanOption option,                                           String checkMsg)", "signatureAfterChange": "     private void _saveAllBeforeProceeding(String message, BooleanOption option, String checkMsg)", "diff": ["-    private void _saveAllBeforeProceeding(String message, BooleanOption option,", "-                                          String checkMsg) {", "+    private void _saveAllBeforeProceeding(String message, BooleanOption option, String checkMsg) {", "+          ", "-              if (dialog.getCheckBoxValue()) {", "-                DrJava.getConfig().setSetting(option, Boolean.TRUE);", "-              }", "+              if (dialog.getCheckBoxValue())  DrJava.getConfig().setSetting(option, Boolean.TRUE);", "-        else {", "-          _saveAll();", "-        }", "+        else _saveAll();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca74c22a2ced3febbc3673526e8ff9fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public synchronized void testEnded(String name, boolean wasSuccessful, boolean causedError)", "signatureAfterChange": "     public synchronized void testEnded(String name, boolean wasSuccessful, boolean causedError)", "diff": ["-      if (!wasSuccessful || causedError) {", "-        set = TEST_FAIL_ATTRIBUTES;", "-      }", "-      else {", "-        set = TEST_PASS_ATTRIBUTES;", "-      }", "+      if (!wasSuccessful || causedError) set = TEST_FAIL_ATTRIBUTES;", "+      else set = TEST_PASS_ATTRIBUTES;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce641b1f28091b8641dc1e7d6e2d9bf1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public T nextItem()", "signatureAfterChange": "     public T nextItem()", "diff": ["-      if (atLastItem() || atEnd() || ModelList.this.isEmpty()) {", "+      if (atLastItem() || atEnd() || ModelList.this.isEmpty())", "-      }", "-      else {", "-        return _point.succ.getItem();", "-      }", "+      return _point.succ.getItem();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0eccf6a4f304173a7208e95c693bd94", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void reverseSearchInteractionsInHistory()", "signatureAfterChange": "   public synchronized void reverseSearchInteractionsInHistory()", "diff": ["-   */", "-  public void reverseSearchInteractionsInHistory() {", "-    if (hasHistoryPrevious()) {", "-      reverseHistorySearch(getCurrentInteraction());", "-    }", "-    else {", "-      _beep.run();", "-    }", "+  /** Reverse searches the history for interactions that started with the current interaction. */", "+  public synchronized void reverseSearchInteractionsInHistory() {", "+    if (hasHistoryPrevious()) reverseHistorySearch(getCurrentInteraction());", "+    else _beep.run();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d340b039e39afc70dbd22c820ca4a682", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 313, "methodNumberAfterChange": 313, "signatureBeforeChange": "   void _switchDefScrollPane()", "signatureAfterChange": "   void _switchDefScrollPane()", "diff": ["-   */", "+  /** Switch to the JScrollPane containing the DefinitionsPane for the current active document. */", "-    // demoted to package private protection to test the disabling editing while", "-    // compiling functionality.", "+    // demoted to package private protection to test the disabling editing while compiling functionality.", "-", "-    if (scroll == null) {", "+    if (scroll == null) scroll = _createDefScrollPane(_model.getActiveDocument());", "-        scroll = _createDefScrollPane(_model.getActiveDocument());", "-", "-      //throw new UnexpectedException(new Exception(\"Current definitions scroll pane not found.\"));", "-    }", "-    // if the current def pane is uneditable, that means", "-    // we arrived here from a compile with errors.  We're", "-    // guaranteed to make it editable again when we", "-    // return from the compilation, so we take the state", "-    // with us.  We guarantee only one definitions pane", "-    // is un-editable at any time.", "-    if ( _currentDefPane.isEditable() ){", "+    // if the current def pane is uneditable, that means we arrived here from a compile with errors.  We're", "+    // guaranteed to make it editable again when we return from the compilation, so we take the state", "+    // with us.  We guarantee only one definitions pane is un-editable at any time.", "+    if (_currentDefPane.isEditable()) {", "-      try{", "-        _currentDefPane.setEditable(true);", "-      }catch(NoSuchDocumentException e){", "-        // it's ok.", "-      }", "+      try { _currentDefPane.setEditable(true); }", "+      catch(NoSuchDocumentException e){ /* It's OK */ }", "+      ", "-    if(inDebugMode()) {", "-      _updateDebugStatus();", "-    }", "+    if (inDebugMode()) _updateDebugStatus();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d380bbc6eff4cd4ee863bc8d0a114d7f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/sexp/NumberAtom.java", "commitBeforeChange": "3ce53d032ad1bc176a487b71ca8af2994e1e9b4a", "commitAfterChange": "f9cf0907b4c2618456fd74126eedfa638b8d8fcb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public String toString()", "signatureAfterChange": "      public String toString()", "diff": ["-  public String toString(){ ", "-    if (_hasDecimals) {", "-      return \"\" + doubleValue();", "-    }", "-    else {", "-      return \"\" + intValue();", "-    }", "+  public String toString() { ", "+    if (_hasDecimals) return \"\" + doubleValue();", "+    else return \"\" + intValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3f31039bbf99b98c9d744205e1703ee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "cea46dd993e521d96771e5cfebb7a88bf25bb742", "commitAfterChange": "b7744671f21e751f13a1d59cecdc1108de1cf3f6", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 159, "signatureBeforeChange": "     public boolean isProjectFile()", "signatureAfterChange": "     public boolean isProjectFile()", "diff": ["-      if(!isUntitled()){", "-        return _state.isProjectFile(_file);", "-      }else{", "-        return false;", "-      }", "+      if (!isUntitled()) return _state.isProjectFile(_file);", "+      else return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d58128466a492cf4f7e5a5770b4edcdd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 238, "signatureBeforeChange": "     public void addDocumentListener(DocumentListener listener)", "signatureAfterChange": "     public void addDocumentListener(DocumentListener listener)", "diff": ["-      if(_cacheAdapter.isReady()){", "-        getDocument().addDocumentListener(listener);", "-      }", "-      else {", "-        _cacheAdapter.getReconstructor().addDocumentListener(listener);", "-      }", "+      if(_cacheAdapter.isReady()) getDocument().addDocumentListener(listener);", "+      else _cacheAdapter.getReconstructor().addDocumentListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5d7eea605efcdfec193945a1c801330", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileBuilder.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private String encodeFile(File f, String prefix, boolean relative) throws IOException", "signatureAfterChange": "   private String encodeFile(File f, String prefix, boolean relative) throws IOException", "diff": ["-    if (relative) {", "-      path = makeRelative(f);", "-    }", "-    else {", "-      path = f.getCanonicalPath();", "-    }", "+    if (relative) path = makeRelative(f);", "+    else path = f.getCanonicalPath();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5dfd9c155a7dd1fca06e01d837fc8a2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "commitAfterChange": "229b97efe43c666e9a5a8a6450aaf594c37171c3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private void _findAgain()", "signatureAfterChange": "   private void _findAgain()", "diff": ["-    if (_searchAll) {", "-      odd = _model.getActiveDocument();", "-    }", "-    else {", "-      if (_doc!=null) { odd = _doc.get(); }", "-    }", "-    if (odd!=null) {", "+    if (_searchAll) odd = _model.getActiveDocument();", "+    else if (_doc != null) { odd = _doc.get(); }", "+    if (odd != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80a728df1e48933059f846f70d8d2ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "commitAfterChange": "f998596e58db467638fd2c5025aacbfb31d4199f", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": "     public void addRegion(final R region)", "signatureAfterChange": "     public void addRegion(final R region)", "diff": ["-          (index<=0 || ! region.equals(_regions.get(index-1)))) {", "-        if ((_current != null) && (index>=0)) _regions.add(index+1, region);", "+          (index <= 0 || ! region.equals(_regions.get(index-1)))) {", "+        if ((_current != null) && (index >= 0)) _regions.add(index+1, region);", "-        if ((index<_regions.size()-1) && (region.equals(_regions.get(index+1)))) {", "-          nextCurrentRegion();", "-        }", "+        if ((index<_regions.size()-1) && (region.equals(_regions.get(index+1)))) nextCurrentRegion();", "-        else if ((index>0) && (region.equals(_regions.get(index-1)))) {", "-          prevCurrentRegion();", "-        }", "+        else if ((index>0) && (region.equals(_regions.get(index-1)))) prevCurrentRegion();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da603d4a4ba006021eb22085bcdefe80", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/CustomSystemClassLoader.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Class<?> loadClass(String name) throws ClassNotFoundException", "signatureAfterChange": "   public Class<?> loadClass(String name) throws ClassNotFoundException", "diff": ["-    if (c!= null) {", "-      return c;", "-    }", "+    if (c != null) return c;", "+", "-      if (resource == null) {", "-        throw new ClassNotFoundException(\"Resource not found: \" + fileName);", "-      }", "-      else if(fileName.startsWith(\"edu/rice/cs/util/newjvm/SlaveJVMRunner.class\")){", "+      if (resource == null)  throw new ClassNotFoundException(\"Resource not found: \" + fileName);", "+", "+      else if (fileName.startsWith(\"edu/rice/cs/util/newjvm/SlaveJVMRunner.class\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4d31b844fbe722012b9a2faf6e66f18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "28ed37193d3d1605a7ea343a3a2a748ce08a7b25", "commitAfterChange": "deccdad7d1e1e890f5a05d651027f51330f6ca59", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void setFrameState(String s)", "signatureAfterChange": "   public void setFrameState(String s)", "diff": ["-    if (_lastState!=null) {", "-      setLocation(_lastState.getLocation());", "-    }", "-    else {", "-      MainFrame.setPopupLoc(this, _mainFrame);", "-    }", "+    if (_lastState!=null) setLocation(_lastState.getLocation());", "+    else MainFrame.setPopupLoc(this, _mainFrame);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6e094442b2419dc7ea569e47297ee60", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/AFindReplaceMachineState.java", "commitBeforeChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "commitAfterChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    public void setSearchBackwards(boolean searchBackwards)", "signatureAfterChange": "    public void setSearchBackwards(boolean searchBackwards)", "diff": ["-      if (isOnMatch() && _findWord.equals(_lastFindWord)) {", "-        _skipOneFind = true;", "-      }else{", "-        _skipOneFind = false;", "-      }", "+      if (isOnMatch() && _findWord.equals(_lastFindWord))  _skipOneFind = true;", "+      else _skipOneFind = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d1e1e1dbd811fdedda5ab34d20422b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputModel.java", "commitBeforeChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "commitAfterChange": "f3b30de075946ab18141ef0ec7abdb9f0f10037b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public X getLongestMatch(X item, List<X> items, PredictiveInputModel<X> pim)", "signatureAfterChange": "     public X getLongestMatch(X item, List<X> items, PredictiveInputModel<X> pim)", "diff": ["-      if (items.size()>0) {", "-        return items.get(0);", "-      }", "-      else {", "-        return null;", "-      }", "+      if (items.size() > 0)  return items.get(0);", "+      else return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9c8386177361750883faf4eaaebc073", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ReverseHighlighter.java", "commitBeforeChange": "6d55d86705248616cac5b324a7c528485ceb6104", "commitAfterChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void changeHighlight(Object tag, int p0, int p1) throws BadLocationException", "signatureAfterChange": "   public void changeHighlight(Object tag, int p0, int p1) throws BadLocationException", "diff": ["-   */\r", "-  public void changeHighlight(Object tag, int p0, int p1) throws BadLocationException {\r", "-    Document doc = component.getDocument();\r", "-    if (tag instanceof LayeredHighlightInfo) {\r", "-      LayeredHighlightInfo lhi = (LayeredHighlightInfo)tag;\r", "-      if (lhi.width > 0 && lhi.height > 0) {\r", "-        component.repaint(lhi.x, lhi.y, lhi.width, lhi.height);\r", "-      }\r", "-      // Mark the highlights region as invalid, it will reset itself\r", "-      // next time asked to paint.\r", "-      lhi.width = lhi.height = 0;\r", "-      lhi.p0 = doc.createPosition(p0);\r", "-      lhi.p1 = doc.createPosition(p1);\r", "-      safeDamageRange(Math.min(p0, p1), Math.max(p0, p1));\r", "-    }\r", "-    else {\r", "-      HighlightInfo info = (HighlightInfo) tag;\r", "-      int oldP0 = info.p0.getOffset();\r", "-      int oldP1 = info.p1.getOffset();\r", "-      if (p0 == oldP0) {\r", "-        safeDamageRange(Math.min(oldP1, p1),\r", "-                        Math.max(oldP1, p1));\r", "-      } else if (p1 == oldP1) {\r", "-        safeDamageRange(Math.min(p0, oldP0),\r", "-                        Math.max(p0, oldP0));\r", "-      } else {\r", "-        safeDamageRange(oldP0, oldP1);\r", "-        safeDamageRange(p0, p1);\r", "-      }\r", "-      info.p0 = doc.createPosition(p0);\r", "-      info.p1 = doc.createPosition(p1);\r", "-    }\r", "-  }\r", "+   */", "+  public void changeHighlight(Object tag, int p0, int p1) throws BadLocationException {", "+    Document doc = component.getDocument();", "+    if (tag instanceof LayeredHighlightInfo) {", "+      LayeredHighlightInfo lhi = (LayeredHighlightInfo)tag;", "+      if (lhi.width > 0 && lhi.height > 0) {", "+        component.repaint(lhi.x, lhi.y, lhi.width, lhi.height);", "+      }", "+      // Mark the highlights region as invalid, it will reset itself", "+      // next time asked to paint.", "+      lhi.width = lhi.height = 0;", "+      lhi.p0 = doc.createPosition(p0);", "+      lhi.p1 = doc.createPosition(p1);", "+      safeDamageRange(Math.min(p0, p1), Math.max(p0, p1));", "+    }", "+    else {", "+      HighlightInfo info = (HighlightInfo) tag;", "+      int oldP0 = info.p0.getOffset();", "+      int oldP1 = info.p1.getOffset();", "+      if (p0 == oldP0) safeDamageRange(Math.min(oldP1, p1), Math.max(oldP1, p1));", "+      else if (p1 == oldP1) safeDamageRange(Math.min(p0, oldP0), Math.max(p0, oldP0));", "+      else {", "+        safeDamageRange(oldP0, oldP1);", "+        safeDamageRange(p0, p1);", "+      }", "+      info.p0 = doc.createPosition(p0);", "+      info.p1 = doc.createPosition(p1);", "+      // TODO: figure out what is wrong here.  The preceding lines are dead code.", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea81e41b2e87dc78079d8ae5dc4a4928", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public String getUndoPresentationName()", "signatureAfterChange": "   public String getUndoPresentationName()", "diff": ["-    if (_compoundEditInProgress()) {", "-      return \"Undo Previous Command\";", "-    }", "-    else {", "-      return super.getUndoPresentationName();", "-    }", "+    if (_compoundEditInProgress()) return \"Undo Previous Command\";", "+    return super.getUndoPresentationName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb99ebd21a908356217931eb38fcf9e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "    public TypeData forSwitchStatementOnly(SwitchStatement that, TypeData test_result, TypeData[] cases_result, boolean sawDefault)", "signatureAfterChange": "    public TypeData forSwitchStatementOnly(SwitchStatement that, TypeData test_result, TypeData[] cases_result,                                            boolean sawDefault)", "diff": ["-   */", "-   public TypeData forSwitchStatementOnly(SwitchStatement that, TypeData test_result, TypeData[] cases_result, boolean sawDefault) {", "+    */", "+   public TypeData forSwitchStatementOnly(SwitchStatement that, TypeData test_result, TypeData[] cases_result, ", "+                                          boolean sawDefault) {", "-     if (!sawDefault) {return null;}", "+     if (!sawDefault) return null;", "-     if (cases_result[cases_result.length-1] == null) { return null; }", "+     if (cases_result[cases_result.length-1] == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecf0b303fe18d7866b5531041f9d8b1a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 314, "methodNumberAfterChange": 317, "signatureBeforeChange": "        public String fixPathForNavigator(String path) throws IOException", "signatureAfterChange": "      public String fixPathForNavigator(String path) throws IOException", "diff": ["+  ", "+  public String fixPathForNavigator(String path) throws IOException {", "+    path = path.substring(0, path.lastIndexOf(File.separator));", "+    String _topLevelPath;", "+    if (getProjectFile() != null){", "+      _topLevelPath = getProjectFile().getCanonicalPath();", "+      _topLevelPath = _topLevelPath.substring(0, _topLevelPath.lastIndexOf(File.separator));;", "+    }", "+    else _topLevelPath = \"\";", "-  public String fixPathForNavigator(String path) throws IOException{", "-      path = path.substring(0, path.lastIndexOf(File.separator));", "-      String _topLevelPath;", "-      if(getProjectFile() != null){", "-        _topLevelPath = getProjectFile().getCanonicalPath();", "-        _topLevelPath = _topLevelPath.substring(0, _topLevelPath.lastIndexOf(File.separator));;", "-      }else{", "-        _topLevelPath = \"\";", "-      }", "-     ", "-      if (!path.equals(_topLevelPath) && !path.startsWith(_topLevelPath + File.separator) ){", "-        /** it's in external files, so don't give it a path */", "-        return \"\";", "-      }else{", "-        path = path.substring(_topLevelPath.length());", "-        return path;", "-      }", "+    if (!path.equals(_topLevelPath) && !path.startsWith(_topLevelPath + File.separator))", "+      /** it's in external files, so don't give it a path */", "+      return \"\";", "+    else {", "+      path = path.substring(_topLevelPath.length());", "+      return path;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f00dd4cefa88d32faa9c1c958ba269ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerProxy.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public boolean isAvailable()", "signatureAfterChange": "   public boolean isAvailable()", "diff": ["-    if (_realCompiler == null) {", "-      return false;", "-    }", "-    else {", "-      return _realCompiler.isAvailable();", "-    }", "+    if (_realCompiler == null) return false;", "+    else return _realCompiler.isAvailable();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f06cc51a087d3fd2f6ce61cf8abb0ba5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 189, "signatureBeforeChange": "     public String getFilename()", "signatureAfterChange": "     public String getFilename()", "diff": ["-      if (_file == null) {", "-        return \"(Untitled)\";", "-      }", "-      else {", "-        return _file.getName();", "-      }", "+      if (_file == null) return \"(Untitled)\";", "+      return _file.getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f27cd76e2e71bc9a4399658f35d86f95", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/TokenList.java", "commitBeforeChange": "75e37fee0d4b160f4d0f1fc58a049ca677edffbc", "commitAfterChange": "a1a11647d4dd38f0cbbb37dcb8ec06139897420a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     void updateBasedOnCurrentState()", "signatureAfterChange": "     void updateBasedOnCurrentState()", "diff": ["-      if (this.atStart()) {", "-        this.next();", "-      }", "+      if (this.atStart()) this.next();", "-      if (this.atEnd()) {", "-        return;", "-      }", "+      if (this.atEnd()) return;", "-      while (!this.atEnd()) {", "+      while (! this.atEnd()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f42519d5b4bf532fa645a077d79c8b33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void endCompoundEdit(int key)", "signatureAfterChange": "   public void endCompoundEdit(int key)", "diff": ["-    if(_keys.size() > 0) {", "-      if(_keys.get(0).intValue() == key) {", "+    if (_keys.size() > 0) {", "+      if (_keys.get(0).intValue() == key) {", "-          else {", "-            _compoundEdits.get(0).addEdit(compoundEdit);", "-          }", "+          else _compoundEdits.get(0).addEdit(compoundEdit);", "-      else {", "-        throw new IllegalStateException(\"Improperly nested compound edits.\");", "-      }", "+      else throw new IllegalStateException(\"Improperly nested compound edits.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f59a9412a83c5caab17ed8b9815d8b55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 303, "methodNumberAfterChange": 303, "signatureBeforeChange": "       private void nextRecentDoc()", "signatureAfterChange": "    private void nextRecentDoc()", "diff": ["-  ", "-    if(_recentDocFrame.isVisible()){", "-      _recentDocFrame.next();", "-    }else{", "-      _recentDocFrame.setVisible(true);", "-    }", "+    if (_recentDocFrame.isVisible()) _recentDocFrame.next();", "+    else _recentDocFrame.setVisible(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8add59f10aaeb2cf91ed15086970456", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 78, "signatureBeforeChange": "   private void _switchToPane(Component c)", "signatureAfterChange": "   private void _switchToPane(Component c)", "diff": ["-    if (c == _interactionsContainer) {", "-      newC = _interactionsPane;", "-    }", "-    if (c == _consoleScroll) {", "-      newC = _consolePane;", "-    }", "+    if (c == _interactionsContainer) newC = _interactionsPane;", "+", "+    if (c == _consoleScroll) newC = _consolePane;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c67dcb0f98ed9b776229df4e206ff6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyAdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public void forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-   */\r", "-  public void forAbstractMethodDef(AbstractMethodDef that) {\r", "-    forAbstractMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    \r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    \r", "-    //All interface methods are considered public by default: enforce this.\r", "-    if (md.hasModifier(\"private\")) {\r", "-      _addAndIgnoreError(\"Interface methods cannot be made private.  They must be public.\", that.getMav());\r", "-    }\r", "-    if (md.hasModifier(\"protected\")) {\r", "-      _addAndIgnoreError(\"Interface methods cannot be made protected.  They must be public.\", that.getMav());\r", "-    }\r", "-    \r", "- //All interface methods are considered public by default.\r", "-    md.addModifier(\"public\"); //(if it was already public, won't be added)\r", "-    md.addModifier(\"abstract\"); //and all interface methods are abstract. \r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors cannot appear in interfaces.\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-//    forAbstractMethodDefOnly(that);\r", "-  }\r", "+   */", "+  public void forAbstractMethodDef(AbstractMethodDef that) {", "+    forAbstractMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    ", "+    MethodData md = createMethodData(that, _symbolData);", "+    ", "+    //All interface methods are considered public by default: enforce this.", "+    if (md.hasModifier(\"private\")) {", "+      _addAndIgnoreError(\"Interface methods cannot be made private.  They must be public.\", that.getMav());", "+    }", "+    if (md.hasModifier(\"protected\")) {", "+      _addAndIgnoreError(\"Interface methods cannot be made protected.  They must be public.\", that.getMav());", "+    }", "+    ", "+ // All interface methods are considered public by default.", "+    md.addModifier(\"public\"); //(if it was already public, won't be added)", "+    md.addModifier(\"abstract\"); //and all interface methods are abstract. ", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors cannot appear in interfaces.\",", "+                         that);", "+    }", "+    else _symbolData.addMethod(md);", "+//    forAbstractMethodDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fed8a532a8c170ff9d2c5c0f22cd75a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public Object visit(FormalParameter node)", "signatureAfterChange": "     public Object visit(FormalParameter node)", "diff": ["-      if (node.isFinal()) {", "-        context.defineConstant(node.getName(), ci);", "-      } else {", "-        context.define(node.getName(), ci);", "-      }", "+      if (node.isFinal()) context.defineConstant(node.getName(), ci);", "+      else context.define(node.getName(), ci);"]}], "num": 745}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1f041dde4d1575a3e451ad91791fe14", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21cfb4b593931580254c51a8ae756cf1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "          public void testForClassDef()", "signatureAfterChange": "          public void testForClassDef()", "diff": ["-      assertEquals(\"The error message should be correct\", \"SuperSD is an interface and thus cannot appear after the keyword 'extends' here.  Perhaps you meant to say 'implements'?\", errors.get(7).getFirst());", "-      ", "-      ", "+      assertEquals(\"The error message should be correct\", ", "+                   \"SuperSD is an interface and thus cannot appear after the keyword 'extends' here.\" + ", "+                   \"  Perhaps you meant to say 'implements'?\", errors.get(7).getFirst());", "+     ", "-      assertEquals(\"The error message should be correct\", \"Hspia is public thus must be defined in a file with the same name.\", errors.get(8).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"Hspia is public thus must be defined in a file with the same name.\", errors.get(8).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c629365c5fad25b8195756af9df243b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "          public void testForBracedBody()", "signatureAfterChange": "          public void testForBracedBody()", "diff": ["-      BracedBody bbMethod = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"throwsException\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0])))});", "+      BracedBody bbMethod = ", "+        new BracedBody(JExprParser.NO_SOURCE_INFO, ", "+                       new BodyItemI[] { ", "+        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "+                                new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, ", "+                                                           new Word(JExprParser.NO_SOURCE_INFO, \"throwsException\"), ", "+                                                           new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, ", "+                                                                                           new Expression[0])))});", "-      assertEquals(\"The error message should be correct\", \"The method throwsException is declared to throw the exception java.util.prefs.BackingStoreException which needs to be caught or declared to be thrown\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The method throwsException is declared to throw the exception java.util.prefs.BackingStoreException\" + ", "+                   \" which needs to be caught or declared to be thrown\", errors.getLast().getFirst());"]}], "num": 347}
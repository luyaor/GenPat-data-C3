{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "379aa114a630d2daa604c84be6feaa6c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0970379a36f37be6e14fe1ab1fc3454c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 110, "signatureBeforeChange": "          public void testAddSymbolData()", "signatureAfterChange": "          public void testAddSymbolData()", "diff": ["-      SymbolData obj = new SymbolData(\"java.lang.Object\");", "-      obj.setIsContinuation(false);", "-      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "+      SymbolData obj = LanguageLevelConverter.symbolTable.get(\"java.lang.Object\");", "+//      obj.setIsContinuation(false);", "+//      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "-        new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Awesome\"),", "+        new ClassDef(SourceInfo.NO_INFO, PUBLIC_MAV, new Word(SourceInfo.NO_INFO, \"Awesome\"),", "-      /**Hierarchy should be empty at the end.*/", "-      assertEquals(\"hierarchy should be empty\", 0, _hierarchy.size());", "+//      /**Hierarchy should be empty at the end.*/", "+//      assertEquals(\"hierarchy should be empty\", 0, _hierarchy.size());", "-      assertEquals(\"hierarchy should be empty.\", 0, _hierarchy.size());", "+//      assertEquals(\"hierarchy should be empty.\", 0, _hierarchy.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43e9da990063e5f42eef1628a08cb21e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 119, "signatureBeforeChange": "          public void testCheckDifferentReturnTypes()", "signatureAfterChange": "          public void testCheckDifferentReturnTypes()", "diff": ["-      assertTrue(\"There should be a conflict in 1.4\", checkDifferentReturnTypes(md8, _sd, JavaVersion.JAVA_1_4));", "-      assertEquals(\"There should now be 4 errors\", 4, TypeChecker.errors.size());", "-      assertEquals(\"The error message should be correct\", TypeChecker.errors.getLast().getFirst(), ", "-                   \"superSuperMethodName(char) in superClass cannot override superSuperMethodName(char) in \" + ", "-                   superSuperSd.getName() + \"; attempting to use different return types\");", "+      /* Java 1.4 is not supported. */", "+//      assertTrue(\"There should be a conflict in 1.4\", checkDifferentReturnTypes(md8, _sd, JavaVersion.JAVA_1_4));", "+//      assertEquals(\"There should now be 4 errors\", 4, TypeChecker.errors.size());", "+//      assertEquals(\"The error message should be correct\", TypeChecker.errors.getLast().getFirst(), ", "+//                   \"superSuperMethodName(char) in superClass cannot override superSuperMethodName(char) in \" + ", "+//                   superSuperSd.getName() + \"; attempting to use different return types\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d03a54fd8f91cb89a1b36662f2e9ea8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForModifiersAndVisibilityDoFirst()", "signatureAfterChange": "          public void testForModifiersAndVisibilityDoFirst()", "diff": ["-      //Check that the proper modifiers are allowed:", "+      // Check that the proper modifiers are allowed:", "-                                                                new String[] {\"private\", \"static\"});", "-       _iv.forModifiersAndVisibilityDoFirst(mavs);", "+                                                               new String[] {\"private\", \"static\"});", "+      _iv.forModifiersAndVisibilityDoFirst(mavs);", "-", "+      ", "-      assertEquals(\"there should now be 1 errors\", 1, errors.size());", "-      assertEquals(\"The error message should be correct for private modifier:\", ", "-                   \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "-", "+//      assertEquals(\"there should now be 1 errors\", 1, errors.size());", "+//      assertEquals(\"The error message should be correct for private modifier:\", ", "+//                   \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "+      ", "-     ", "+      ", "-      assertEquals(\"There should now be 2 errors\", 2, errors.size());", "-      assertEquals(\"The error message should be correct for 1 bad, 1 good modifier:\", ", "-                   \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(1).getFirst());", "-", "+      assertEquals(\"There should still be 0 errors\", 0, errors.size());", "+      ", "-     ", "-      _iv.forModifiersAndVisibilityDoFirst(mavs3);", "-      assertEquals(\"There should now be 3 errors\", 3, errors.size());", "-      assertEquals(\"The error message should be correct for 2 bad modifiers:\",", "-                   \"The keywords \\\"final\\\" \\\"native\\\" cannot be used at the Intermediate level\", ", "-                   errors.get(2).getFirst());", "-", "+      _iv.forModifiersAndVisibilityDoFirst(mavs3);", "+      assertEquals(\"There should now be 1 errors\", 1, errors.size());", "+      assertEquals(\"The error message should be correct for 1 bad modifier:\",", "+                   \"The keyword \\\"native\\\" cannot be used at the Intermediate level\", ", "+                   errors.get(0).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52b5527ba27333ce4697595d32ec3331", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 22, "signatureBeforeChange": "          public void testForPrimitiveTypeDoFirst()", "signatureAfterChange": "          public void testForPrimitiveTypeDoFirst()", "diff": ["-     //only primative types boolean, char, int, and double are allowed at Intermediate level. ", "+      //only primative types boolean, char, int, and double are allowed at Intermediate level. ", "-", "+      ", "-            ", "+      ", "-", "+      ", "-      assertEquals(\"After visiting byte, errors should be 1\", 1, errors.size());", "-      assertEquals(\"After byte, error message is correct\", \"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used at the Intermediate level\", errors.getLast().getFirst());", "-", "+      assertEquals(\"After visiting byte, errors should be 0\", 0, errors.size());", "+      ", "-      assertEquals(\"After visiting short, errors should be 2\", 2, errors.size());", "-      assertEquals(\"After short, error message is correct\", \"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used at the Intermediate level\", errors.getLast().getFirst());", "-", "+      assertEquals(\"After visiting short, errors should be 0\", 0, errors.size());", "+      ", "-      assertEquals(\"After visiting long, errors should be 3\", 3, errors.size());", "-      assertEquals(\"After long, error message is correct\", \"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used at the Intermediate level\", errors.getLast().getFirst());", "-", "+      assertEquals(\"After visiting long, errors should be 0\", 0, errors.size());", "+      ", "-      assertEquals(\"After visiting float, errors should be 4\", 4, errors.size());", "-      assertEquals(\"After float, error message is correct\", \"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used at the Intermediate level\", errors.getLast().getFirst());", "+      assertEquals(\"After visiting float, errors should be 0\", 0, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fc1f1a7c8c977669748511e789fc4be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 31, "signatureBeforeChange": "               public void testCreateMethodData()", "signatureAfterChange": "                    public void testCreateMethodData()", "diff": ["-      MethodDef mdef = new ConcreteMethodDef(SourceInfo.NO_INFO, ", "-                                                    _finalMav, ", "-                                                    new TypeParameter[0], ", "-                                                    new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                    new Word(SourceInfo.NO_INFO, \"methodName\"),", "-                                                    new FormalParameter[0],", "-                                                    new ReferenceType[0], ", "-                                                    new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      MethodDef mdef = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+                                             _privateAbstractMav, ", "+                                             new TypeParameter[0], ", "+                                             new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                             new Word(SourceInfo.NO_INFO, \"methodName\"),", "+                                             new FormalParameter[0],", "+                                             new ReferenceType[0]); ", "-      MethodData mdata = new MethodData(\"methodName\", _finalMav, new TypeParameter[0], SymbolData.INT_TYPE, ", "-                                   new VariableData[0], ", "-                                   new String[0],", "-                                   _sd1,", "-                                   null);", "+      MethodData mdata = new MethodData(\"methodName\", _privateAbstractMav, new TypeParameter[0], SymbolData.INT_TYPE, ", "+                                        new VariableData[0], ", "+                                        new String[0],", "+                                        _sd1,", "+                                        null);", "-      assertEquals(\"There should be one error.\", 1, errors.size());", "-      assertEquals(\"The error message should be correct.\", \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "+      assertEquals(\"There should be one errors.\", 1, errors.size());", "+//      assertEquals(\"The error message should be correct.\", \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "-      mdef = new AbstractMethodDef(SourceInfo.NO_INFO, ", "-                                   _abstractMav, ", "-                                   new TypeParameter[] { new TypeParameter(SourceInfo.NO_INFO,", "-                                                                           new TypeVariable(SourceInfo.NO_INFO, \"T\"),", "-                                                                           new TypeVariable(SourceInfo.NO_INFO, \"U\"))},", "-                                   new VoidReturn(SourceInfo.NO_INFO, \"void\"), ", "-                                   new Word(SourceInfo.NO_INFO, \"methodName\"),", "-                                   new FormalParameter[] {", "-                                     new FormalParameter(SourceInfo.NO_INFO, ", "-                                                         new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                             new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                                                             new Word (SourceInfo.NO_INFO, \"field1\")),", "-                                                         false", "-                                                           ),", "-                                     new FormalParameter(SourceInfo.NO_INFO, ", "-                                                         new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                             new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                                                             new Word (SourceInfo.NO_INFO, \"field1\")),", "-                                                         false", "-                                                           )},", "-                                   new ReferenceType[] { new TypeVariable(SourceInfo.NO_INFO, \"X\") }", "-                                   );", "-       mdata = new MethodData(\"methodName\", ", "+      mdef = ", "+        new AbstractMethodDef(SourceInfo.NO_INFO, ", "-                                                                      new TypeVariable(SourceInfo.NO_INFO, \"U\"))}, ", "-                              SymbolData.VOID_TYPE, ", "-                              new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "-                                new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "-                              new String[] { \"X\" },", "-                              _sd1,", "-                              null);", "-       ", "-                              ", "-       MethodData result = _iv.createMethodData(mdef, _sd1);", "-       mdata.getParams()[0].setEnclosingData(result);", "-       mdata.getParams()[1].setEnclosingData(result);", "-       // have to add the parameters to the vars manually", "-       mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, result) });                                                          ", "-       assertEquals(\"Should return the correct MethodData\", mdata, result);", "-       assertEquals(\"There should be 2 errors.\", 2, errors.size());", "-       //This is now caught in the type checker.", "-       //assertEquals(\"The second error message should be correct.\", \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", errors.get(1).getFirst());", "-       assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());", "+                                                                      new TypeVariable(SourceInfo.NO_INFO, \"U\"))},", "+                              new VoidReturn(SourceInfo.NO_INFO, \"void\"), ", "+                              new Word(SourceInfo.NO_INFO, \"methodName\"),", "+                              new FormalParameter[] {", "+                                new FormalParameter(SourceInfo.NO_INFO, ", "+                                                    new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                                        new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                                                                        new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                    false", "+                                                   ),", "+                                  new FormalParameter(SourceInfo.NO_INFO, ", "+                                                      new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                                          new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                                                                          new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                      false", "+                                                     )},", "+                              new ReferenceType[] { new TypeVariable(SourceInfo.NO_INFO, \"X\") }", "+                              );", "+      mdata = ", "+        new MethodData(\"methodName\", ", "+                       _abstractMav, ", "+                       new TypeParameter[] { new TypeParameter(SourceInfo.NO_INFO,", "+                                                               new TypeVariable(SourceInfo.NO_INFO, \"T\"),", "+                                                               new TypeVariable(SourceInfo.NO_INFO, \"U\"))}, ", "+                       SymbolData.VOID_TYPE, ", "+                       new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "+                         new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "+                       new String[] { \"X\" },", "+                       _sd1,", "+                       null);", "+      ", "+      ", "+      MethodData result = _iv.createMethodData(mdef, _sd1);", "+      mdata.getParams()[0].setEnclosingData(result);", "+      mdata.getParams()[1].setEnclosingData(result);", "+      // have to add the parameters to the vars manually", "+      mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, result) });                                                          ", "+      assertEquals(\"Should return the correct MethodData\", mdata, result);", "+      assertEquals(\"There should be 2 errors.\", 2, errors.size());", "+      //This is now caught in the type checker.", "+      //assertEquals(\"The second error message should be correct.\", \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", errors.get(1).getFirst());", "+      assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e111b9b18fabce94883c2e9bdb22261", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectTest.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    public void testWriteFile() throws IOException, MalformedProjectFileException", "signatureAfterChange": "    public void testWriteFile() throws IOException, MalformedProjectFileException", "diff": ["-    assertEquals(\"first source filename\", new File(parent,\"/dir1/testfile1.java\").getPath(), ", "-                 pfir.getSourceFiles()[0].getPath());", "-    assertEquals(\"last source filename\", new File(parent,\"/dir3/testfile5.java\").getPath(), ", "-                 pfir.getSourceFiles()[4].getPath());", "+//    assertEquals(\"first source filename\", new File(parent,\"/dir1/testfile1.java\").getPath(), ", "+//                 pfir.getSourceFiles()[0].getPath());", "+//    assertEquals(\"last source filename\", new File(parent,\"/dir3/testfile5.java\").getPath(), ", "+//                 pfir.getSourceFiles()[4].getPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4cda15938f32b0d41be9ef6232ece9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapterTest.java", "commitBeforeChange": "74df86fd67328f41836d5f23da76b724b0648a22", "commitAfterChange": "debcaa5c7896b7af34301718bd146b407947838f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStylesListContentAndReset() throws DocumentAdapterException", "signatureAfterChange": "   public void testStylesListContentAndReset() throws DocumentAdapterException", "diff": ["-                 \"((0, 19), default)\", _adapter.getStylesList().get(0).toString());", "+                 \"((0, 19), object.return.style)\", _adapter.getStylesList().get(0).toString());", "+    _model.resetInterpreter();", "-    assertEquals(\"StylesList before reset should contain 4 pairs\",", "-                 4, _adapter.getStylesList().size());", "-    ", "-    assertEquals(\"The fourth element of the StylesLIst before reset should be\",", "-                 \"((19, 45), error)\", _adapter.getStylesList().get(3).toString());", "-    ", "-    _doc.reset();", "-    //_doc.insertText(_doc.getDocLength(), \"\\\"yes\\\"\", InteractionsDocument.STRING_RETURN_STYLE);", "-    assertEquals(\"StylesList after rest should only contain 2 pairs\",", "-                 2, _adapter.getStylesList().size());", "-    assertEquals(\"The first element of StylesList after reset should be\", ", "-                 \"((0, 19), default)\", _adapter.getStylesList().get(0).toString());", "-    assertEquals(\"The second element of StylesList after reset should be\", ", "-                 \"((19, 21), default)\", _adapter.getStylesList().get(1).toString());", "-  }", "+    assertEquals(\"StylesList after reset should contain 1 pair\",1, _adapter.getStylesList().size());", "+    //Resetting Interactions piece", "+    assertEquals(\"The only element of the StylesList after reset should be\",", "+                 \"((48, 74), error)\", _adapter.getStylesList().get(0).toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c136a3e2056dfe4332e4d45ac4f9e25e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 101, "signatureBeforeChange": "          public void testGetSymbolDataForClassFile()", "signatureAfterChange": "          public void testGetSymbolDataForClassFile()", "diff": ["-                  testLLVisitor.getSymbolDataForClassFile(\"java.lang.String\", SourceInfo.NO_INFO).isContinuation());", "+                  LanguageLevelConverter.getSymbolDataForClassFile(\"java.lang.String\", null).isContinuation());", "-      assertEquals(\"Should return null with a user class that can't be found\",", "-                   null,", "-                   testLLVisitor.getSymbolDataForClassFile(\"Marge\", SourceInfo.NO_INFO));", "-      assertEquals(\"There should be one error\", 1, errors.size());", "-      assertEquals(\"The error message should be correct\", ", "-                   \"Class Marge not found.\", ", "-                   errors.get(0).getFirst());", "+      assertNull(\"Should return null with a user class that can't be found\",", "+                 LanguageLevelConverter.getSymbolDataForClassFile(\"Marge\", null));", "+//      assertEquals(\"There should be one error\", 1, errors.size());", "+//      assertEquals(\"The error message should be correct\", \"Class Marge not found.\", errors.get(0).getFirst());"]}], "num": 20048}
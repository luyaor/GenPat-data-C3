{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "210fd0e5351b3d2abdedd5a3c5a4e7d1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6c53c5add1b5af9f3733a1b04085dc2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk7/edu/rice/cs/drjava/model/compiler/Javac170Compiler.java", "commitBeforeChange": "ac40c3972879cd0ae692485b72f8c40bbd1968d9", "commitAfterChange": "e3aa74ce1fa8ce4d59f29e9f6e97ca23385b706a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r   \r   public boolean isAvailable()", "signatureAfterChange": "\r   \r   public boolean isAvailable()", "diff": ["-      // Make sure the compiler returned is not null; this can happen if we have the JRE's library, not the JDK's.\r", "-      JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\r", "+      // This is the class that javax.tools.ToolProvider.getSystemJavaCompiler() uses\r", "+      // We create an instance of that class directly, bypassing ToolProvider, because ToolProvider returns null\r", "+      // if DrJava is started with just the JRE, instead of with the JDK, even if tools.jar is later made available\r", "+      // to the class loader.\r", "+      JavaCompiler compiler = (JavaCompiler)(Class.forName(\"com.sun.tools.javac.api.JavacTool\").newInstance());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d12dbd36aa67ac779c3cb3306a9116a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk7/edu/rice/cs/drjava/model/compiler/Javac170Compiler.java", "commitBeforeChange": "ac40c3972879cd0ae692485b72f8c40bbd1968d9", "commitAfterChange": "e3aa74ce1fa8ce4d59f29e9f6e97ca23385b706a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath, \r                                                List<? extends File> sourcePath, File destination, \r                                                List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "\r   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath, \r                                                List<? extends File> sourcePath, File destination, \r                                                List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-    \r", "-    JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\r", "+\r", "+    // This is the class that javax.tools.ToolProvider.getSystemJavaCompiler() uses.\r", "+    // We create an instance of that class directly, bypassing ToolProvider, because ToolProvider returns null\r", "+    // if DrJava is started with just the JRE, instead of with the JDK, even if tools.jar is later made available\r", "+    // to the class loader.\r", "+    JavaCompiler compiler = null;\r", "+    try {\r", "+      compiler = (JavaCompiler)(Class.forName(\"com.sun.tools.javac.api.JavacTool\").newInstance());\r", "+    }\r", "+    catch(ClassNotFoundException e) {\r", "+      errors.addFirst(new DJError(\"Compile exception: \" + e, false));\r", "+      error.log(e);\r", "+      return errors;\r", "+    }\r", "+    catch(InstantiationException e) {\r", "+      errors.addFirst(new DJError(\"Compile exception: \" + e, false));\r", "+      error.log(e);\r", "+      return errors;\r", "+    }\r", "+    catch(IllegalAccessException e) {\r", "+      errors.addFirst(new DJError(\"Compile exception: \" + e, false));\r", "+      error.log(e);\r", "+      return errors;\r", "+    }\r"]}], "num": 5545}
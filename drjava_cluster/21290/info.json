{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91acc6a0857c16cf6eddc9679c316bf1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09df0c282ac7b6af89b2b76edd0fb9bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r   public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */\r", "-  public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result) {\r", "-    if (left_result == null || right_result == null) {return null;}\r", "-    \r", "-    //make sure that both lhs and rhs could be resolved (not PackageDatas)\r", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {\r", "-      return null;\r", "-    }\r", "-\r", "-    \r", "-    if (!left_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);\r", "-    }\r", "-    else {\r", "-      assertInstanceType(left_result, \"The left side of this expression is a type, not an instance\", that);\r", "-    }\r", "-\r", "-    if (!right_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);\r", "-    }\r", "-    else {\r", "-      assertInstanceType(right_result, \"The right side of this expression is a type, not an instance\", that);\r", "-    }    \r", "-   \r", "-    return SymbolData.BOOLEAN_TYPE.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result) {", "+    if (left_result == null || right_result == null) {return null;}", "+    ", "+    //make sure that both lhs and rhs could be resolved (not PackageDatas)", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "+      return null;", "+    }", "+", "+    ", "+    if (!left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);", "+    }", "+    else {", "+      assertInstanceType(left_result, \"The left side of this expression is a type, not an instance\", that);", "+    }", "+", "+    if (!right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);", "+    }", "+    else {", "+      assertInstanceType(right_result, \"The right side of this expression is a type, not an instance\", that);", "+    }    ", "+   ", "+    return SymbolData.BOOLEAN_TYPE.getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ccf68f6438eeecfc4705044e25127d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r   public TypeData forNumericBinaryExpressionOnly(NumericBinaryExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forNumericBinaryExpressionOnly(NumericBinaryExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */\r", "-  public TypeData forNumericBinaryExpressionOnly(NumericBinaryExpression that, TypeData left_result, TypeData right_result) {\r", "-    if (left_result == null || right_result == null) {return null;}\r", "-    \r", "-    //make sure that both lhs and rhs could be resolved (not PackageDatas)\r", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    if (assertInstanceType(left_result, \"The left side of this expression is a type, not an instance\", that) &&\r", "-        !left_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-      \r", "-      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", that);\r", "-      return right_result.getInstanceData();\r", "-    }\r", "-    \r", "-    if (assertInstanceType(right_result, \"The right side of this expression is a type, not an instance\", that) &&\r", "-        !right_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-      \r", "-      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", that);\r", "-      return left_result.getInstanceData();\r", "-    }\r", "-\r", "-    \r", "-    return _getLeastRestrictiveType(left_result.getSymbolData(), right_result.getSymbolData()).getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forNumericBinaryExpressionOnly(NumericBinaryExpression that, TypeData left_result, TypeData right_result) {", "+    if (left_result == null || right_result == null) {return null;}", "+    ", "+    //make sure that both lhs and rhs could be resolved (not PackageDatas)", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "+      return null;", "+    }", "+    ", "+    if (assertInstanceType(left_result, \"The left side of this expression is a type, not an instance\", that) &&", "+        !left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+      ", "+      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", that);", "+      return right_result.getInstanceData();", "+    }", "+    ", "+    if (assertInstanceType(right_result, \"The right side of this expression is a type, not an instance\", that) &&", "+        !right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+      ", "+      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", that);", "+      return left_result.getInstanceData();", "+    }", "+", "+    ", "+    return _getLeastRestrictiveType(left_result.getSymbolData(), right_result.getSymbolData()).getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a91eb0bed645cfb1cb6c30da58c8601d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r   public TypeData forBooleanExpressionOnly(BooleanExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forBooleanExpressionOnly(BooleanExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */\r", "-  public TypeData forBooleanExpressionOnly(BooleanExpression that, TypeData left_result, TypeData right_result) {\r", "-   if (left_result == null || right_result == null) {return null;}\r", "-    \r", "-   //make sure that both lhs and rhs could be resolved (not PackageDatas)\r", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {\r", "-      return null;\r", "-    }\r", "-   \r", "-    if (assertInstanceType(left_result, \"The left side of this expression is a type, not an instance\", that) &&\r", "-        !left_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, _targetVersion)) {\r", "-      \r", "-      _addError(\"The left side of this expression is not a boolean value.  Therefore, you cannot apply a Boolean Operator (&&, ||) to it\", that);\r", "-    }\r", "-    \r", "-    if (assertInstanceType(right_result, \"The right side of this expression is a type, not an instance\", that) &&\r", "-        !right_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, _targetVersion)) {\r", "-      \r", "-      _addError(\"The right side of this expression is not a boolean value.  Therefore, you cannot apply a Boolean Operator (&&, ||) to it\", that);\r", "-    }\r", "-\r", "-    \r", "-    return SymbolData.BOOLEAN_TYPE.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forBooleanExpressionOnly(BooleanExpression that, TypeData left_result, TypeData right_result) {", "+   if (left_result == null || right_result == null) {return null;}", "+    ", "+   //make sure that both lhs and rhs could be resolved (not PackageDatas)", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "+      return null;", "+    }", "+   ", "+    if (assertInstanceType(left_result, \"The left side of this expression is a type, not an instance\", that) &&", "+        !left_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+      ", "+      _addError(\"The left side of this expression is not a boolean value.  Therefore, you cannot apply a Boolean Operator (&&, ||) to it\", that);", "+    }", "+    ", "+    if (assertInstanceType(right_result, \"The right side of this expression is a type, not an instance\", that) &&", "+        !right_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+      ", "+      _addError(\"The right side of this expression is not a boolean value.  Therefore, you cannot apply a Boolean Operator (&&, ||) to it\", that);", "+    }", "+", "+    ", "+    return SymbolData.BOOLEAN_TYPE.getInstanceData();", "+  }"]}], "num": 21290}
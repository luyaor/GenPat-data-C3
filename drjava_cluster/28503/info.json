{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ed10169ff22d555b69182804eff4118", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f23aea0b3ebd16ea4c00d922221791e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "45afdf26640d7e2a166ed67c249ba6fd207b1d2b", "commitAfterChange": "e7a6b9c5a51a2cf7b9cfb5a10d90c24a3c7c3844", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForTryCatchStatement()", "signatureAfterChange": "          public void testForTryCatchStatement()", "diff": ["-      assertEquals(\"After visiting both NormalTryCatchStatement and TryCatchFinallyStatement, there should be no errors\", 0, errors.size());", "+      assertEquals(\"After visiting both NormalTryCatchStatement and TryCatchFinallyStatement, there should be no \" ", "+                     + \"errors\", 0, errors.size());", "-                                new BitwiseOrExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)))});", "+                                new BitwiseOrExpression(SourceInfo.NO_INFO, ", "+                                                        new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                                new Word(SourceInfo.NO_INFO, \"i\")), ", "+                                                        new IntegerLiteral(SourceInfo.NO_INFO, 10)))});", "-      assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Bitwise or expressions cannot be used at any language level.  \" ", "+                     + \"Perhaps you meant to compare two values using regular or (||)\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "372dec7b24708624dc1a125fd6b5ef12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "          public void testShouldBreak()", "signatureAfterChange": "          public void testShouldBreak()", "diff": ["-      LeftShiftAssignmentExpression shift1 = new LeftShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      RightUnsignedShiftAssignmentExpression shift2 = new RightUnsignedShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      RightSignedShiftAssignmentExpression shift3 = new RightSignedShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      LeftShiftAssignmentExpression shift1 = ", "+        new LeftShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                          new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      RightUnsignedShiftAssignmentExpression shift2 = ", "+        new RightUnsignedShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, ", "+                                                   new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                                   new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      RightSignedShiftAssignmentExpression shift3 = ", "+        new RightSignedShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, ", "+                                                 new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                                 new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+                   errors.getLast().getFirst());", "-      BitwiseAndAssignmentExpression bit1 = new BitwiseAndAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseOrAssignmentExpression bit2 = new BitwiseOrAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseXorAssignmentExpression bit3 = new BitwiseXorAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseAndAssignmentExpression bit1 = ", "+        new BitwiseAndAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                           new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseOrAssignmentExpression bit2 = ", "+        new BitwiseOrAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                          new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseXorAssignmentExpression bit3 = ", "+        new BitwiseXorAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                           new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      BitwiseAndExpression bit4 = new BitwiseAndExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseOrExpression bit5 = new BitwiseOrExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseXorExpression bit6 = new BitwiseXorExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseNotExpression bit7 = new BitwiseNotExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseAndExpression bit4 = ", "+        new BitwiseAndExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                 new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseOrExpression bit5 = ", "+        new BitwiseOrExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseXorExpression bit6 = ", "+        new BitwiseXorExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                 new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseNotExpression bit7 = ", "+        new BitwiseNotExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"error message should be correct\", \"Bitwise and expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular and (&&)\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise and expressions cannot be used at any language level.\" + ", "+                   \"  Perhaps you meant to compare two values using regular and (&&)\", errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise or expressions cannot be used at any language level.\" + ", "+                   \"  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise xor expressions cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise xor expressions cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise not expressions cannot be used at any language level.  Perhaps you meant to negate this value using regular not (!)\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise not expressions cannot be used at any language level.\" +", "+                   \"  Perhaps you meant to negate this value using regular not (!)\", errors.getLast().getFirst());", "-      LeftShiftExpression shift4 = new LeftShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      RightUnsignedShiftExpression shift5 = new RightUnsignedShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      RightSignedShiftExpression shift6 = new RightSignedShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      LeftShiftExpression shift4 = ", "+        new LeftShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      RightUnsignedShiftExpression shift5 = ", "+        new RightUnsignedShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                         new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      RightSignedShiftExpression shift6 = ", "+        new RightSignedShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                       new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"You appear to be missing an expression here\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"You appear to be missing an expression here\", ", "+                   errors.getLast().getFirst());", "-      NoOpExpression noop = new NoOpExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      NoOpExpression noop = ", "+        new NoOpExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                           new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"Error message should be correct\", \"You are missing a binary operator here\", errors.getLast().getFirst());", "-      ", "-      ", "+      assertEquals(\"Error message should be correct\", \"You are missing a binary operator here\", ", "+                   errors.getLast().getFirst());"]}], "num": 28503}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "194b9f774288ce15310bb67d7692730b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "037effcb913396e3e02428f862cbeb58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private int _replaceAllInCurrentDoc()", "signatureAfterChange": "   private int _replaceAllInCurrentDoc()", "diff": ["-//    System.err.println(\"_replaceAllInCurrentDoc() called; _doc = [\" + _doc.getText() + \"]\");", "-    _doc.acquireWriteLock();", "-    try {", "-      if (_isForward) setPosition(0);", "-      else setPosition(_doc.getLength());", "-      ", "-      int count = 0;", "-      FindResult fr = findNext(false);  // find next match in current doc   ", "+", "+    assert EventQueue.isDispatchThread();", "+    ", "+    if (_isForward) setPosition(0);", "+    else setPosition(_doc.getLength());", "+    ", "+    int count = 0;", "+    FindResult fr = findNext(false);  // find next match in current doc   ", "-      ", "-      while (! fr.getWrapped()) {", "-        replaceCurrent();", "-        count++;", "+    ", "+    while (! fr.getWrapped()) {", "+      replaceCurrent();  // sets writeLock so that other threads do not see inconsistent state", "+      count++;", "-        fr = findNext(false);           // find next match in current doc", "+      fr = findNext(false);           // find next match in current doc", "-      }", "-      return count;", "-    finally { _doc.releaseWriteLock(); }", "+    return count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a85d80044c2621cbfdc1df728137784", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   private FindResult findNext(boolean searchAll)", "signatureAfterChange": "   private FindResult findNext(boolean searchAll)", "diff": ["+    assert EventQueue.isDispatchThread();", "+    ", "-    _doc.acquireReadLock();", "-    try {", "-      // If the user just found a match and toggled the \"Search Backwards\" option, we should skip the matched text.", "-      if (_skipText) {  // adjust position (offset)", "+    // If the user just found a match and toggled the \"Search Backwards\" option, we should skip the matched text.", "+    if (_skipText) {  // adjust position (offset)", "-        int wordLen = _lastFindWord.length();", "-        if (_isForward) setPosition(getCurrentOffset() + wordLen);", "-        else setPosition(getCurrentOffset() - wordLen);", "-        positionChanged();", "-      }", "-      ", "+      int wordLen = _lastFindWord.length();", "+      if (_isForward) setPosition(getCurrentOffset() + wordLen);", "+      else setPosition(getCurrentOffset() - wordLen);", "+      positionChanged();", "+    }", "+    ", "-      ", "-      int offset = getCurrentOffset();", "+    ", "+    int offset = getCurrentOffset();", "-      if (_isForward) { ", "-        start = offset; ", "-        len = _doc.getLength() - offset; ", "-      }", "-      else { ", "-        start = 0; ", "-        len = offset; ", "-      }", "-      fr = _findNextInDoc(_doc, start, len, searchAll);", "+    if (_isForward) { ", "+      start = offset; ", "+      len = _doc.getLength() - offset; ", "-    finally { _doc.releaseReadLock(); }", "+    else { ", "+      start = 0; ", "+      len = offset; ", "+    }", "+    fr = _findNextInDoc(_doc, start, len, searchAll);"]}], "num": 14249}
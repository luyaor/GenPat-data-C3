{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc3e41af41f2449fa553badcdda74842", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8b73a3c3a29d7c062a3b03607d871e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public TypeData forBracedBody(BracedBody that)", "signatureAfterChange": "   public TypeData forBracedBody(BracedBody that)", "diff": ["-   */", "+    */", "+//    System.err.println(\"forBracedBody called in \" + _data.getSymbolData() + \" for \" + that);", "-    if (startIndex == 0) {", "-      implicitSuperConstructor(that);", "-    }", "+    if (startIndex == 0) implicitSuperConstructor(that);", "-    for (int j = 0; j<this._thrown.size(); j++) {", "-      if (isUncaughtCheckedException(this._thrown.get(j).getFirst(), that)) {", "-        handleUncheckedException(this._thrown.get(j).getFirst(), this._thrown.get(j).getSecond());", "+    int thrownSize = _thrown.size();", "+    System.err.println(\"_thrown.size() in \" + _data + \" = \" + thrownSize);", "+    for (int j = 0; j < thrownSize; j++) {", "+      if (isUncaughtCheckedException(_thrown.get(j).getFirst(), that)) {", "+        handleUncheckedException(_thrown.get(j).getFirst(), _thrown.get(j).getSecond());", "-      ", "+    /** The following is supposed to be equivalent to calling SpecialTypeChecker.forBody(that, items_result) */", "-      //walk over what has been thrown and throw an error if it contains an unchecked exception", "-      for (int j = 0; j<this._thrown.size(); j++) {", "-        if (isUncaughtCheckedException(this._thrown.get(j).getFirst(), that)) {", "-          handleUncheckedException(this._thrown.get(j).getFirst(), this._thrown.get(j).getSecond());", "+      // Walk over what has been thrown and throw an error if it contains an unchecked exception", "+      for (int j = thrownSize; j < _thrown.size(); j++) {", "+        if (isUncaughtCheckedException(_thrown.get(j).getFirst(), that)) {", "+          handleUncheckedException(_thrown.get(j).getFirst(), _thrown.get(j).getSecond());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c75c60bac3b5074e23726edc9c352585", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r   public static void main(String[] args)", "signatureAfterChange": "   public static void main(String[] args)", "diff": ["-  /**Do a conversion from the command line, to allow quick testing*/\r", "-  public static void main(String[] args) {\r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.CURRENT);\r", "-    File[] files = new File[args.length];\r", "-    for (int i = 0; i < args.length; i++) {\r", "-      files[i] = new File(args[i]);\r", "-    }\r", "-    \r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result = \r", "-        llc.convert(files);\r", "-    System.out.println(result.getFirst().size() + result.getSecond().size() + \" errors.\");\r", "-    for(JExprParseException p : result.getFirst()) {\r", "-      System.out.println(p);\r", "-    }\r", "-    for(Pair<String, JExpressionIF> p : result.getSecond()) {\r", "-      System.out.println(p.getFirst() + \" \" + p.getSecond().getSourceInfo());\r", "-    }\r", "-  }\r", "+  /**Do a conversion from the command line, to allow quick testing*/", "+  public static void main(String[] args) {", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    File[] files = new File[args.length];", "+    for (int i = 0; i < args.length; i++) {", "+      files[i] = new File(args[i]);", "+    }", "+    ", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result = ", "+        llc.convert(files, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    System.out.println(result.getFirst().size() + result.getSecond().size() + \" errors.\");", "+    for(JExprParseException p : result.getFirst()) {", "+      System.out.println(p);", "+    }", "+    for(Pair<String, JExpressionIF> p : result.getSecond()) {", "+      System.out.println(p.getFirst() + \" \" + p.getSecond().getSourceInfo());", "+    }", "+  }"]}], "num": 17393}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74c30f783ef1aecc084fb6d7e93bedf9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c6486904589a9b8ae2d32b1103f2c66", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOption.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public KeyStroke parse(String s)", "signatureAfterChange": "   public KeyStroke parse(String s)", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      if (s.equals(\"<none>\")) {", "-        return NULL_KEYSTROKE;", "-      }", "-      ", "-      // Replace \"command\" with \"meta\" (OS X)", "-      int cIndex = s.indexOf(\"command\");", "-      if (cIndex > -1) {", "-        StringBuffer sb = new StringBuffer(s.substring(0, cIndex));", "-        sb.append(\"meta\");", "-        sb.append(s.substring(cIndex + \"command\".length(), s.length()));", "-        s = sb.toString();", "-      }", "-      ", "-      // Replace \"option\" with \"alt\" (OS X)", "-      int oIndex = s.indexOf(\"option\");", "-      if (oIndex > -1) {", "-        StringBuffer sb = new StringBuffer(s.substring(0, oIndex));", "-        sb.append(\"alt\");", "-        sb.append(s.substring(oIndex + \"option\".length(), s.length()));", "-        s = sb.toString();", "-      }", "-      ", "-      KeyStroke ks = KeyStroke.getKeyStroke(s);", "-      if (ks == null) {", "-        throw new OptionParseException(name, s,", "-                                     \"Must be a valid string representation of a Keystroke.\");", "-      }", "-      return ks;", "+    if (s.equals(\"<none>\")) {", "+      return NULL_KEYSTROKE;", "-    else return NULL_KEYSTROKE;", "+    ", "+    // Replace \"command\" with \"meta\" (OS X)", "+    int cIndex = s.indexOf(\"command\");", "+    if (cIndex > -1) {", "+      StringBuffer sb = new StringBuffer(s.substring(0, cIndex));", "+      sb.append(\"meta\");", "+      sb.append(s.substring(cIndex + \"command\".length(), s.length()));", "+      s = sb.toString();", "+    }", "+    ", "+    // Replace \"option\" with \"alt\" (OS X)", "+    int oIndex = s.indexOf(\"option\");", "+    if (oIndex > -1) {", "+      StringBuffer sb = new StringBuffer(s.substring(0, oIndex));", "+      sb.append(\"alt\");", "+      sb.append(s.substring(oIndex + \"option\".length(), s.length()));", "+      s = sb.toString();", "+    }", "+    ", "+    KeyStroke ks = KeyStroke.getKeyStroke(s);", "+    if (ks == null) {", "+      throw new OptionParseException(name, s,", "+                                     \"Must be a valid string representation of a Keystroke.\");", "+    }", "+    return ks;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9519cea474a8ce2315b7e9eb4402d998", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      KeyStroke ks = KeyStroke.getKeyStrokeForEvent(e);", "-      Action a = KeyBindingManager.Singleton.get(ks);", "-      if (a != null) {", "-        SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "-      }", "-      else {    ", "-        // backspace deletes twice without this check, overrides other keystrokes", "-        // that use the mask modifier", "-        if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\010') {", "-          super.processKeyEvent(e);       ", "-        }", "+    KeyStroke ks = KeyStroke.getKeyStrokeForEvent(e);", "+    Action a = KeyBindingManager.Singleton.get(ks);", "+    if (a != null) {", "+      SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "+    }", "+    else {    ", "+      // backspace deletes twice without this check, overrides other keystrokes", "+      // that use the mask modifier", "+      if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\010') {", "+        super.processKeyEvent(e);       ", "-    else", "-      super.processKeyEvent(e);"]}], "num": 25750}
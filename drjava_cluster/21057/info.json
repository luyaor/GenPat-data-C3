{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa699393bd63483c3b3236aac75413c8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dcada77336aec46a538479f0bb7e19a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree(int indentLevel)", "signatureAfterChange": "   public void buildTree(int indentLevel)", "diff": ["-      rule37 = new ActionStartCurrStmtPlus(oneLevel),", "-      rule36 = new ActionStartStmtOfBracePlus(oneLevel),", "+      rule37 = new ActionStartCurrStmtPlus(indentLevel),", "+      rule36 = new ActionStartStmtOfBracePlus(indentLevel),", "-      rule32 = new ActionStartCurrStmtPlus(\"\"),", "+      rule32 = new ActionStartCurrStmtPlus(0),", "-      rule39 = new ActionStartPrevStmtPlus(\"\", true),  // Indent line that starts new statement", "+      rule39 = new ActionStartPrevStmtPlus(0, true),  // Indent line that starts new statement", "-      rule28 = new ActionStartPrevStmtPlus(\"\", false),", "+      rule28 = new ActionStartPrevStmtPlus(0, false),", "-      rule19 = new ActionStartStmtOfBracePlus(\"\"),  // indents the line to match whitespace preceding the line enclosing brace", "+      rule19 = new ActionStartStmtOfBracePlus(0),  // indents the line to match whitespace preceding the line enclosing brace", "-      rule18 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule19, rule20),  // Does current line begin with '}' ignoring comment text", "+      rule18 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule19, rule20),  // Does current line begin with '}' ignoring comment text, WS", "-      rule16 = new ActionBracePlus(\" \" + oneLevel),", "-      rule15 = new ActionBracePlus(\" \"),", "+      rule16 = new ActionBracePlus(1 + indentLevel),", "+      rule15 = new ActionBracePlus(1),", "-      rule38 = new ActionBracePlus(\"\"),", "+      rule38 = new ActionBracePlus(0),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "674257c576fe27894faa21480d70b06c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "6d23d799552cf55313f22433cb12915906b19690", "commitAfterChange": "8a04e8e94a35e432777ebd444cf5fc70868fe9e4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree()", "signatureAfterChange": "   public void buildTree()", "diff": ["-    /*", "-    String oneLevel = _indentSize;", "+    String oneLevel = _indentLevel;", "-      rule33 = new ActionStartStmtPlus(oneLevel),", "+      rule33 = new ActionStartCurrStmtPlus(oneLevel),", "-      rule30 = new QuestionInTernary(rule31, rule32),", "-      rule29 = new QuestionLineContains(\":\", rule30, rule33),", "-      rule28 = new ActionStartStmtPlus(\"\"),                           ", "-      rule27 = new QuestionCurrLineStartsWith(\"{\", rule28, rule29),", "-      rule26 = rule28,", "+      rule30 = new QuestionExistsCharInStmt('?', ':', rule31, rule32),", "+      rule29 = new QuestionLineContains(':', rule30, rule33),", "+      rule28 = new ActionStartStmtOfBracePlus(\"\"),", "+      rule27 = new QuestionCurrLineStartsWithSkipComments(\"{\", rule28, rule29),", "+      //rule26 = new ActionStartPrevStmtPlus(\"\"),", "-      rule24 = rule28,", "-      rule23 = new QuestionInTernary(rule24, rule25),", "-      rule22 = new QuestionLineContains(\":\", rule23, rule24),", "-      rule21 = new ActionStartStmtOfBracePlus(\"\"),", "-      rule20 = new QuestionCurrLineStartsWith(\"}\", rule21, rule22),", "+      //rule24 = rule26,", "+      //rule23 = new QuestionExistsCharInStmt('?', ':', rule24, rule25),", "+      //rule22 = new QuestionLineContains(':', rule23, rule24),", "+      rule21 = rule28,", "+      rule20 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule21, /**rule22*/ rule25),", "-      rule17 = rule33,", "+      rule17 = rule32,", "-      rule09 = new ActionStartPrevLinePlus(\" * \"),", "-      rule08 = rule04,          ", "+      rule09 = new ActionStartPrevLinePlus(\"* \"),", "+      rule08 = new ActionStartPrevLinePlus(\"\"),          ", "-    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0fa2144872ff657b9ffa1225ed3a7dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "a3941c1000ac76b7c7dfbe2e02df0072cee011b6", "commitAfterChange": "9dde008cc707b0b4af3c382ad06f25fcd30d66ce", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree()", "signatureAfterChange": "   public void buildTree()", "diff": ["-      rule35 = new ActionStartCurrStmtPlus(oneLevel),", "-      rule34 = new ActionStartStmtOfBracePlus(oneLevel),", "-      rule33 = rule35,", "-      rule32 = new QuestionExistsCharInStmt('?', ':', rule33, rule34),", "-      rule31 = new QuestionLineContains(':', rule32, rule35),", "-      rule30 = new ActionStartCurrStmtPlus(\"\"),", "-      rule29 = new QuestionCurrLineStartsWithSkipComments(\"{\", rule30, rule31),", "-      rule28 = new ActionStartPrevStmtPlus(\"\", true),", "-      rule27 = rule34,", "-      rule26 = new ActionStartPrevStmtPlus(\"\", false),", "-      rule25 = new QuestionExistsCharInStmt('?', ':', rule26, rule27),", "-      rule24 = new QuestionLineContains(':', rule25, rule28),", "-      rule23 = new QuestionStartingNewStmt(rule24, rule29),", "-      rule22 = rule23,", "-      rule21 = rule34,", "+      rule37 = new ActionStartCurrStmtPlus(oneLevel),", "+      rule36 = new ActionStartStmtOfBracePlus(oneLevel),", "+      rule35 = rule37,", "+      rule34 = new QuestionExistsCharInStmt('?', ':', rule35, rule36),", "+      rule33 = new QuestionLineContains(':', rule34, rule37),", "+      rule32 = new ActionStartCurrStmtPlus(\"\"),", "+      rule31 = new QuestionCurrLineStartsWithSkipComments(\"{\", rule32, rule33),", "+      rule30 = new ActionStartPrevStmtPlus(\"\", true),", "+      rule29 = rule36,", "+      rule28 = new ActionStartPrevStmtPlus(\"\", false),", "+      rule27 = new QuestionExistsCharInStmt('?', ':', rule28, rule29),", "+      rule26 = new QuestionLineContains(':', rule27, rule30),", "+      rule25 = new QuestionStartingNewStmt(rule26, rule31),", "+      rule24 = rule25,", "+      rule23 = rule36,", "+      rule22 = new QuestionHasCharPrecedingOpenBrace(new char[] {'=',',','{'},rule23,rule24),", "+      rule21 = rule36,", "-      rule17 = new QuestionBraceIsCurly(rule18, rule23),", "+      rule17 = new QuestionBraceIsCurly(rule18, rule25),"]}], "num": 21057}
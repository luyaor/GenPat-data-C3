{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd7d41a403c322c10dd3cda79a861199", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa8a4bf36a9a1ad672a8d3f4d31fcce2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "                    public void testForSimpleMethodInvocation()", "signatureAfterChange": "          public void testForSimpleMethodInvocation()", "diff": ["-    ", "-      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      MethodInvocation oneIntArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "-      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+      ParenthesizedExpressionList pel1 = new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]);", "+      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), pel1);", "+      ParenthesizedExpressionList pel2 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[]{new IntegerLiteral(SourceInfo.NONE, 5)});", "+      MethodInvocation oneIntArg = ", "+        new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), pel2);", "+      ParenthesizedExpressionList pel3 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[]{new DoubleLiteral(SourceInfo.NONE, 4.2)});", "+      MethodInvocation oneDoubleArg = ", "+        new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), pel3);", "-      //if method not in class, give error", "+      // if method not in class, give error", "-      assertEquals(\"Error message should be correct\", \"No method found in class i.like.monkey with signature: myName().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"No method found in class i.like.monkey with signature: myName().\", ", "+                   errors.getLast().getFirst());", "-      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData noArgsM = ", "+        new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, ", "+                       new VariableData[0], new String[0], _sd1, NULL_LITERAL);", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData doubleArg = ", "+        new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, ", "+                       new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd1, NULL_LITERAL);", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData intArg = ", "+        new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, ", "+                       new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd1, NULL_LITERAL);", "-      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData().getName(), oneIntArg.visit(_etc).getName());", "+      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData().getName(), ", "+                   oneIntArg.visit(_etc).getName());", "-      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c336ed487a9b2ee2f3dd0be0e1a32f33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "                   public void testForSimpleMethodInvocation()", "signatureAfterChange": "                   public void testForSimpleMethodInvocation()", "diff": ["-      MethodInvocation noArgs = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0]));", "-      MethodInvocation oneIntArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5)}));", "-      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new DoubleLiteral(JExprParser.NO_SOURCE_INFO, 4.2)}));", "+      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation oneIntArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));"]}], "num": 25776}
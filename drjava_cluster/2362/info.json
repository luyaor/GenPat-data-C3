{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2598377f0a71f6bb19c44ffdf8f11dd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ace8ec10196f6bb9cf27cc6b37b76cc3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "7b90d9227a34693633b434e1d2773067e65a70e5", "commitAfterChange": "1b1a2ff927caf38a8f2ba21780232fcbeb4319bb", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   private void _updateWatches() throws DebugException", "signatureAfterChange": "   private void _updateWatches() throws DebugException", "diff": ["+      ObjectReference obj = currFrame.thisObject();", "+      ", "+        ", "-          ObjectReference obj = currFrame.thisObject();", "+          // Not compiled with debug flag.... ignore", "+        ObjectReference outer = obj;", "-          String className = outerRt.name();", "-          while (field == null) {", "+          Field outerThis = outerRt.fieldByName(\"this$0\");", "+          ", "+          while ((field == null) && (outerThis != null)) {", "+            outer = (ObjectReference) outer.getValue(outerThis);", "+            //outer = (ObjectReference)outer.getValue(outerThis);//currFrame.getValue(var);", "+            outerRt = outer.referenceType();", "+            field = outerRt.fieldByName(currName);", "+            ", "+            if (field == null) {", "+              // Enter the loop again with the next outer enclosing class", "+              outerThis = outerRt.fieldByName(\"this$0\");                ", "+            }    ", "+          }", "+          ", "+          if (field != null) {", "+            currWatch.setValue(_getValue(outer.getValue(field)));", "+            try {", "+              currWatch.setType(field.type());", "+            }", "+            catch (ClassNotLoadedException cnle) {", "+              currWatch.setType(null);", "+            }", "+          }", "+          /*", "+              LocalVariable var;", "+              ObjectReference outer;", "+              do {", "+                // get the object reference for outer classes", "+                var = currFrame.visibleVariableByName(\"this$0\");", "+                outer = (ObjectReference)currFrame.getValue(var);", "+              }", "+              while (!outer.referenceType().equals(outerRt));", "+                 ", "+              */", "+          ", "+              /*", "-            }", "-          }", "+              ", "+            }*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9f0d5164ef9460d477bde054dbc5a38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "17285283461a98a54216b38ffd842a9ade691a61", "commitAfterChange": "c5c5f6e584e52b0f1a2d2a9448693aba4f7f3980", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["+            if (hasAnonymous(outerRt)) {", "+              // We don't know the appropriate this$N to look for so we have to", "+              // search for a field that begins with this$.", "+              List fields = outerRt.allFields();", "+              Iterator iter = fields.iterator();", "+              while (iter.hasNext()) {", "+                Field f = (Field)iter.next();", "+                String name = f.name();", "+                if (name.startsWith(\"this$\")) {", "+                  int lastIndex = name.lastIndexOf(\"$\");", "+                  outerIndex = Integer.valueOf(name.substring(lastIndex+1, name.length())).intValue();", "+                  break;", "+                }", "+              }", "+            }", "+            if (field == null) {", "+              // Try concatenating \"val$\" to the beginning of the field in", "+              // case it's a final local variable of the outer class", "+              field = outerRt.fieldByName(\"val$\" + currName);", "+            }", "+            ", "+              if (outer == null) {", "+                // We're probably in the constructor and this$N has", "+                // not yet been initialized. We can't do anything, so just", "+                // break display no value.", "+                break;", "+              }", "-              if (field == null) {", "-                // Enter the loop again with the next outer enclosing class", "-                outerIndex--;", "-                outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+              if (field == null) {  ", "+                // Try concatenating \"val$\" to the beginning of the field in", "+                // case it's a final local variable of the outer class", "+                field = outerRt.fieldByName(\"val$\" + currName);", "+                ", "+                if (field == null) {", "+                  // Enter the loop again with the next outer enclosing class", "+                  outerIndex--;", "+                  outerThis = outerRt.fieldByName(\"this$\" + outerIndex);                  ", "+                }"]}], "num": 2362}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b1c6573ffe388b23644ab11170b3d8f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab24c4719bb462d2330c3e3867b28039", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "27c256ec9281e0464172656b15ccb73506c1cbc1", "commitAfterChange": "efe2cdfa860877c37343dbc5d29e380b33344492", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "signatureAfterChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "diff": ["-   */", "-  public void loadHistory(FileOpenSelector selector) throws IOException {", "-    ", "-    try {", "-      files = selector.getFiles();", "-    }", "-    catch (OperationCanceledException oce) {", "-      return;", "-      // don't need to do anything", "-    }", "-    Vector<String> strings = new Vector<String>();", "-        ", "-                text += currString + _newLine;", "-                text += currString + _newLine;", "-      _document.clearCurrentInteraction();", "-      // Crop off the last newline", "-      text.trim();", "-", "-      // Insert into the document and interpret", "-      _docAppend(text, InteractionsDocument.DEFAULT_STYLE);", "-      interpretCurrentInteraction();", "+   */", "+  public void loadHistory(FileOpenSelector selector) throws IOException {", "+    ArrayList<String> histories;", "+    try {", "+      histories = _getHistoryText(selector);", "+    }", "+    catch (OperationCanceledException oce) {", "+      return;", "+    }", "+    _document.clearCurrentInteraction();", "+", "+    // Insert into the document and interpret", "+    StringBuffer buf = new StringBuffer();", "+    for (int i = 0; i < histories.size(); i++) {", "+      ArrayList<String> interactions = _removeSeparators(histories.get(i));", "+      for (int j = 0; j < interactions.size(); j++) {", "+        String curr = interactions.get(j);", "+        int len = curr.length();", "+        buf.append(curr);", "+        if (len > 0 && curr.charAt(len - 1) != ';') {", "+          buf.append(';');", "+        }", "+        buf.append(_newLine);", "+      }", "+    }", "+    _docAppend(buf.toString().trim(), InteractionsDocument.DEFAULT_STYLE);", "+    interpretCurrentInteraction();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27ef0e6a36b2cc1f4fdae1f8fc9520f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "signatureAfterChange": "   public void loadHistory(final FileOpenSelector selector) throws IOException", "diff": ["-  public void loadHistory(FileOpenSelector selector) throws IOException {", "+  public void loadHistory(final FileOpenSelector selector) throws IOException {", "-    _document.acquireWriteLock();", "-    try {", "-      _document.clearCurrentInteraction();", "-      ", "-      // Insert into the document and interpret", "-      final StringBuilder buf = new StringBuilder();", "-      for (String hist: histories) {", "-        ArrayList<String> interactions = _removeSeparators(hist);", "-        for (String curr: interactions) {", "-          int len = curr.length();", "-          buf.append(curr);", "-          if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "-          buf.append(StringOps.EOL);", "+    final ArrayList<String> _histories = histories;", "+", "+    Utilities.invokeAndWait(new Runnable() {  // must run in event thread because caret is updated indivisibly", "+      public void run() {", "+        _document.acquireWriteLock();", "+        try {", "+          _document.clearCurrentInteraction();", "+          ", "+          // Insert into the document and interpret", "+          final StringBuilder buf = new StringBuilder();", "+          for (String hist: _histories) {", "+            ArrayList<String> interactions = _removeSeparators(hist);", "+            for (String curr: interactions) {", "+              int len = curr.length();", "+              buf.append(curr);", "+              if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "+              buf.append(StringOps.EOL);", "+            }", "+          }", "+          String text = buf.toString().trim();", "+//          System.err.println(\"Histtory is: '\" + text + \"'\");", "+          append(text, InteractionsDocument.DEFAULT_STYLE);", "+        finally { _document.releaseWriteLock(); }", "+        interpretCurrentInteraction();  // Must be executed in event thread", "-      append(buf.toString().trim(), InteractionsDocument.DEFAULT_STYLE);", "-    }", "-    finally { _document.releaseWriteLock(); }", "-    interpretCurrentInteraction();", "+    });", "+    // Wait is necessary because interpretation can only be applied after history is loaded", "+//    System.err.println(\"Interpreting loaded history\");", "+"]}], "num": 28007}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fef53b975ae546eaaef4f3e4c510286a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec224deb3b2807d3f549335c4abb2d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/descriptors/MintDescriptor.java", "commitBeforeChange": "b7d4cb04f4bb848380a14b3825abe047db8dc58f", "commitAfterChange": "101c103fed282ea73966b5bc0dce7152a188fba5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r   \r   public boolean containsCompiler(File f)", "signatureAfterChange": "   public boolean containsCompiler(File f)", "diff": ["-  \r", "-  public boolean containsCompiler(File f) {\r", "-    if (f.isFile()) {\r", "-      try {\r", "-        JarFile jf = new JarFile(f);\r", "-        return (jf.getJarEntry(\"edu/rice/cs/mint/comp/TransStaging.class\")!=null &&\r", "-                jf.getJarEntry(\"com/sun/source/tree/BracketExprTree.class\")!=null &&\r", "-                jf.getJarEntry(\"com/sun/source/tree/BracketStatTree.class\")!=null &&\r", "-                jf.getJarEntry(\"com/sun/source/tree/EscapeExprTree.class\")!=null &&\r", "-                jf.getJarEntry(\"com/sun/source/tree/EscapeStatTree.class\")!=null &&\r", "-                jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")==null);\r", "-      }\r", "-      catch(IOException ioe) { return false; }\r", "-    }\r", "-    else if (f.isDirectory()) {\r", "-      return (new File(f,\"edu/rice/cs/mint/comp/TransStaging.class\").exists() &&\r", "-              new File(f,\"com/sun/source/tree/BracketExprTree.class\").exists() &&\r", "-              new File(f,\"com/sun/source/tree/BracketStatTree.class\").exists() &&\r", "-              new File(f,\"com/sun/source/tree/EscapeExprTree.class\").exists() &&\r", "-              new File(f,\"com/sun/source/tree/EscapeStatTree.class\").exists() &&\r", "-              new File(f,\"com/sun/tools/javac/util/DefaultFileManager.class\").exists());\r", "-    }\r", "-    return false;\r", "-  }\r", "+    * @return true if the file contains the compiler */", "+  public boolean containsCompiler(File f) {", "+    return Util.exists(f,", "+                       \"edu/rice/cs/mint/comp/TransStaging.class\",", "+                       \"com/sun/source/tree/BracketExprTree.class\",", "+                       \"com/sun/source/tree/BracketStatTree.class\",", "+                       \"com/sun/source/tree/EscapeExprTree.class\",", "+                       \"com/sun/source/tree/EscapeStatTree.class\",", "+                       \"com/sun/tools/javac/util/DefaultFileManager.class\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb406883e07bc80a6452073036ca890a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "9de352299088533a44cc17c1ffd7938654146b70", "commitAfterChange": "fb275f71eca23e6f93c695458f20ebc27e058287", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected Class findClass(String name) throws ClassNotFoundException", "signatureAfterChange": "      public Class defineClass(String name, byte[] code)", "diff": ["+    public Class defineClass(String name, byte[] code)  {", "+      File file = new File(\"debug-\" + name + \".class\");", "+", "+", "+      /*", "+      try {", "+        FileOutputStream out = new FileOutputStream(file);", "+        out.write(code);", "+        out.close();", "+        DrJava.consoleErr().println(\"debug class \" + name + \" to \" + file.getAbsolutePath());", "+      catch (Throwable t) {}", "+      */", "+      ", "+      Class c = super.defineClass(name, code);", "+      return c;", "-    protected Class findClass(String name) throws ClassNotFoundException {", "-      //System.err.println(\"findClass: \" + name);", "-        return  (Class)classes.get(name);", "-      }", "-", "-      try {", "-        // classLoader contains URL class loaders to load from other", "-        // paths/urls. if we have one, try to load there.", "-        if (classLoader != null) {", "-          // getResourceAsStream finds a file that's in the classpath. It's", "-          // generally used to load resources (like images) from the same", "-          // location as class files. However for our purposes of loading the", "-          // bytes of a class file, this works perfectly. It will find the class", "-          // in any place in the classpath, and it doesn't force us to search", "-          // the classpath ourselves.", "-          // (The classpath includes URLs to other places even!)", "-          String fileName = name.replace('.', '/') + \".class\";", "-          InputStream stream = classLoader.getResourceAsStream(fileName);", "-          if (stream == null) {", "-            throw  new IOException();", "-          }", "-          byte[] data = new byte[stream.available()];", "-          stream.read(data);", "-          return  defineClass(name, data, 0, data.length);", "-        }", "-      }", "-      catch (Throwable t) {}", "-", "-      // Now try to just use the standard loader", "-      // Before, we didn't do this, and it resulted in getting some", "-      // class format errors (illegal constant pool) when loading.", "-      // i don't know why, but some classes seem to need to be loaded", "-      // using standard loader.", "-      ClassLoader l;", "-      if (classLoader != null) {", "-        l = classLoader;", "-        l = ClassLoader.getSystemClassLoader();", "-      try {", "-        return l.loadClass(name);", "-      catch (Throwable t) {}", "-      // If it exceptions, just fall through to here to try the interpreter.", "-      // If all else fails, try loading the class through the interpreter.", "-      // That's used for classes defined in the interpreter.", "-      return  interpreter.loadClass(name);"]}], "num": 21459}
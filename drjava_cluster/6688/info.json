{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56378ee9a926ad0c2f662a907d6094e3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da881d92b9da1eacc35650e88452d2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public BodyBodyFullJavaVisitor(BodyData bodyData,                                  File file,                                   String packageName,                                  LinkedList<String> importedFiles,                                   LinkedList<String> importedPackages,                                   LinkedList<String> classDefsInThisFile,                                   Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>> continuations,                                  LinkedList<String> innerClassesToBeParsed)", "signatureAfterChange": "   public BodyBodyFullJavaVisitor(BodyData bodyData,                                  File file,                                   String packageName,                                  String enclosingClassName,                                  LinkedList<String> importedFiles,                                   LinkedList<String> importedPackages,                                   HashSet<String> classesInThisFile,                                   Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>> continuations,                                  LinkedList<Command> fixUps,                                  HashSet<String> innerClassesInThisBody)", "diff": ["+                                 String enclosingClassName,", "-                                 LinkedList<String> classDefsInThisFile, ", "-                                 Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>> continuations,", "-                                 LinkedList<String> innerClassesToBeParsed) {", "-    super(file, packageName, importedFiles, importedPackages, classDefsInThisFile, continuations);", "+                                 HashSet<String> classesInThisFile, ", "+                                 Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>> continuations,", "+                                 LinkedList<Command> fixUps,", "+                                 HashSet<String> innerClassesInThisBody) {", "+    super(file, packageName, enclosingClassName, importedFiles, importedPackages, classesInThisFile, continuations, fixUps);", "-    _innerClassesToBeParsed = innerClassesToBeParsed;", "+//    _innerClassesInThisBody = innerClassesInThisBody;", "+    ", "+    SymbolData objectSD = symbolTable.get(\"java.lang.Object\");   ", "+    SymbolData integerSD = symbolTable.get(\"java.lang.Integer\");", "+    assert objectSD != null && integerSD != null;", "+    assert integerSD.isAssignableTo(objectSD, JavaVersion.JAVA_5);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e52cec3f5f071fc94ff25c7971ec7f7f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public LanguageLevelVisitor(File file,                                String packageName,                                LinkedList<String> importedFiles,                                LinkedList<String> importedPackages,                                LinkedList<String> classNamesInThisFile,                                Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>> classesToBeParsed,                               Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>> continuations)", "signatureAfterChange": "   public LanguageLevelVisitor(File file,                                String packageName,                               String enclosingClassName,                               LinkedList<String> importedFiles,                                LinkedList<String> importedPackages,                                HashSet<String> classesInThisFile,                                Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>> continuations,                               LinkedList<Command> fixUps)", "diff": ["+                              String packageName,", "+                              String enclosingClassName,", "+                              HashSet<String> classesInThisFile, ", "+                              Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>> continuations,", "+                              LinkedList<Command> fixUps) {", "+    _enclosingClassName = enclosingClassName;", "+    _classesInThisFile = classesInThisFile;", "+//    _innerClassesInThisBody = new HashSet<String>();", "+    this.fixUps = fixUps;", "-    */", "-  public LanguageLevelVisitor(File file, ", "-                              String packageName, ", "-                              LinkedList<String> importedFiles, ", "-                              LinkedList<String> importedPackages, ", "-                              LinkedList<String> classNamesInThisFile, ", "-                              Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>> classesToBeParsed,", "-                              Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>> continuations) {", "-    this(file, packageName, importedFiles, importedPackages, classNamesInThisFile, continuations);", "-    _classesToBeParsed = classesToBeParsed;", "+    assert fixUps != null;", "+    ", "+    // Ensure that the imported packages include \"java.lang\" ", "+    if (! _importedPackages.contains(\"java.lang\")) _importedPackages.addFirst(\"java.lang\");", "+    // Ensure that the symbol table contains the essential types;  TODO: this is kludge; fix it !!!", "+    LanguageLevelConverter.loadSymbolTable();"]}], "num": 6688}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19d7e27f88d6d5ba61f4a6a7376a44d2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9cf3ffeace7af732701e2643ef71ecc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1a21d93c6026fc975d9f1a1bda2fbd55942a0154", "commitAfterChange": "7cbabe0b7b5f77b58eac69afdca15c16ef2f6a9b", "methodNumberBeforeChange": 297, "methodNumberAfterChange": 297, "signatureBeforeChange": "   public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["-                  new FileProperty(\"drjava.current.file\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getActiveDocument().getRawFile(); }", "+                  new FileProperty(\"drjava.current.file\", new Thunk<File>() {", "+      public File value() { return _model.getActiveDocument().getRawFile(); }", "-                  new FileProperty(\"drjava.working.dir\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getInteractionsModel().getWorkingDirectory(); }", "+                  new FileProperty(\"drjava.working.dir\", new Thunk<File>() {", "+      public File value() { return _model.getInteractionsModel().getWorkingDirectory(); }", "-                  new FileProperty(\"drjava.master.working.dir\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getMasterWorkingDirectory(); }", "+                  new FileProperty(\"drjava.master.working.dir\", new Thunk<File>() {", "+      public File value() { return _model.getMasterWorkingDirectory(); }", "-                                   new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getProjectFile(); }", "+                                   new Thunk<File>() {", "+      public File value() { return _model.getProjectFile(); }", "-                                   new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getMainClass(); }", "+                                   new Thunk<File>() {", "+      public File value() { return _model.getMainClass(); }", "-                                   new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getProjectRoot(); }", "+                                   new Thunk<File>() {", "+      public File value() { return _model.getProjectRoot(); }", "-                                   new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getBuildDirectory(); }", "+                                   new Thunk<File>() {", "+      public File value() { return _model.getBuildDirectory(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcbd338ce239e5d94f47c5541afbfaeb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "f835199d645f480bb352cc51cff6dc5ae32e7dc4", "commitAfterChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 200, "signatureBeforeChange": "      private boolean containsInferenceVariable(Type t, final Set<? extends VariableType> vars,                                              final RecursionStack<Type> stack)", "signatureAfterChange": "       @Override public Boolean forVariableType(VariableType t)", "diff": ["-  ", "-  private boolean containsInferenceVariable(Type t, final Set<? extends VariableType> vars, ", "-                                            final RecursionStack<Type> stack) {", "-    return t.apply(new TypeAbstractVisitor<Boolean>() {", "-      public Boolean defaultCase(Type t) { return false; }", "-      ", "-      @Override public Boolean forArrayType(ArrayType t) { ", "-        return containsInferenceVariable(t.ofType(), vars, stack);", "-      }", "-      ", "-      @Override public Boolean forParameterizedClassType(ParameterizedClassType t) { ", "-        return checkList(t.typeArguments());", "-      }", "-      ", "-      @Override public Boolean forIntersectionType(IntersectionType t) { ", "-        return checkList(t.ofTypes());", "-      }", "-      ", "-      private Boolean checkList(Iterable<? extends Type> types) {", "-        for (Type t : types) { ", "-          if (containsInferenceVariable(t, vars, stack)) { return true; }", "-        }", "-        return false;", "-      }", "-      ", "-      @Override public Boolean forVariableType(final VariableType t) {", "-        if (vars.contains(t)) { return true; }", "-        else {", "-          Thunk<Boolean> handleBounds = new Thunk<Boolean>() {", "-            public Boolean value() {", "-              return containsInferenceVariable(t.symbol().lowerBound(), vars, stack) ||", "-                containsInferenceVariable(t.symbol().upperBound(), vars, stack);", "-            }", "-          };", "-          return stack.apply(handleBounds, false, t);", "-        }", "-      }", "-      ", "-      @Override public Boolean forWildcard(final Wildcard t) {", "-        Thunk<Boolean> handleBounds = new Thunk<Boolean>() {", "-          public Boolean value() {", "-            return containsInferenceVariable(t.symbol().lowerBound(), vars, stack) ||", "-              containsInferenceVariable(t.symbol().upperBound(), vars, stack);", "-          }", "-        };", "-        return stack.apply(handleBounds, false, t);", "-      }", "-      ", "-    });", "-  }", "+      @Override public Boolean forBoundType(BoundType t) {  return checkList(t.ofTypes()); }", "+      @Override public Boolean forVariableType(VariableType t) {", "+        return _vars.contains(t) || checkBoundedSymbol(t, t.symbol());", "+      }"]}], "num": 20462}
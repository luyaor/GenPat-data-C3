{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67fa149d352dce4df69619b0346608a3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "752f6530ad888302be423d289d5fce2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7bc6765693343476fc2f77685ee6bc931bf3b3f3", "commitAfterChange": "7f2688df99750a8a6042f231ca2bc23d3f2c923c", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "    private void _open()", "signatureAfterChange": "    private void _open()", "diff": ["-  private void _open() {", "+  private void _open() { ", "+    _open (_openSelector);", "+  }", "-      _model.openFiles(_openSelector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1517b452a8c82805ed895df358794f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionExistsCharInStmt.java", "commitBeforeChange": "ea961a8ccca5c43941de581940e257522d7033d4", "commitAfterChange": "61e5b2f858911ea73a13dba9fbe943d7030fb9fb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    if(endCharPos == DefinitionsDocument.ERROR_INDEX) {", "-      // Should not happen, endChar must exist on the current line", "-      throw new UnexpectedException(new", "-        IllegalArgumentException(\"Argument endChar to \" + ", "-                                 \"QuestionExistsCharInStmt must be a char \" +", "-                                 \"that exists on the current line.\"));", "-    }", "-    ", "-    char[] findCharDelims = {_findChar, ';', '{', '}'};", "-    int prevFindChar;", "-    ", "-    // Find the position of the previous occurence findChar from the ", "-    // position of endChar (looking in paren phrases as well)", "-    try {", "-      prevFindChar = doc.findPrevDelimiter(endCharPos, findCharDelims, false);", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    if ((prevFindChar == DefinitionsDocument.ERROR_INDEX) ||", "-        (prevFindChar < 0)) {", "-      // Couldn't find a previous occurence findChar", "-      return false;", "-    }", "-    ", "-    // Determine if prevFindChar was _findChar, rather than end", "-    //  of statement delimiter", "-    boolean found = false;", "-    try {", "-      String foundString = doc.getText(prevFindChar, 1);", "-      char foundChar = foundString.charAt(0);", "-      found = (foundChar == _findChar);", "-    }", "-    catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    return found;", "+    return doc.findCharInStmtBeforePos(_findChar, endCharPos);"]}], "num": 15492}
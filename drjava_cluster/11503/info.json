{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b0f492f7b326a67f559a6a2cf39496c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f4bfe89f1c6b8bcf2bc097a346ccece", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result,                                                        InstanceData finallyBlock_result)", "signatureAfterChange": "   protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlockRes, InstanceData[] catchBlocksRes,                                                        InstanceData finallyBlock_result)", "diff": ["-  protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, ", "+  protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlockRes, InstanceData[] catchBlocksRes, ", "-    if (tryBlock_result == null || tryBlock_result == SymbolData.NOT_FOUND.getInstanceData()) ", "+    if (tryBlockRes == null || tryBlockRes == SymbolData.NOT_FOUND.getInstanceData()) ", "-    TypeData leastRestrictiveType = tryBlock_result;", "-    for (int i = 0; i < catchBlocks_result.length; i++) {", "-      if (catchBlocks_result[i] == null) return finallyBlock_result;", "-      if (catchBlocks_result[i] != SymbolData.NOT_FOUND.getInstanceData() && ", "-          _isAssignableFrom(catchBlocks_result[i].getSymbolData(), leastRestrictiveType.getSymbolData())) {", "-        leastRestrictiveType = catchBlocks_result[i];", "+    TypeData leastRestrictiveType = tryBlockRes;", "+    for (int i = 0; i < catchBlocksRes.length; i++) {", "+      if (catchBlocksRes[i] == null) return finallyBlock_result;", "+      if (catchBlocksRes[i] != SymbolData.NOT_FOUND.getInstanceData() && ", "+          _isAssignableFrom(catchBlocksRes[i].getSymbolData(), leastRestrictiveType.getSymbolData())) {", "+        leastRestrictiveType = catchBlocksRes[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9b30af170e5ecfc6357f5052cef438a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, InstanceData finallyBlock_result)", "signatureAfterChange": "   protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result,                                                        InstanceData finallyBlock_result)", "diff": ["-   */", "-  protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, InstanceData finallyBlock_result) {// Return the common superclass or null if there exists a block that doesn't return no nothing (except the finally block) ", "-    if (tryBlock_result == null || tryBlock_result == SymbolData.NOT_FOUND.getInstanceData()) {return finallyBlock_result;}", "+    */", "+  protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, ", "+                                                      InstanceData finallyBlock_result) {", "+  // Return the common superclass or null if there exists a block that doesn't return a value(except the finally block) ", "+    if (tryBlock_result == null || tryBlock_result == SymbolData.NOT_FOUND.getInstanceData()) ", "+      return finallyBlock_result;", "-      if (catchBlocks_result[i] == null) {return finallyBlock_result;}", "-      if (catchBlocks_result[i] != SymbolData.NOT_FOUND.getInstanceData() && _isAssignableFrom(catchBlocks_result[i].getSymbolData(), leastRestrictiveType.getSymbolData())) {", "+      if (catchBlocks_result[i] == null) return finallyBlock_result;", "+      if (catchBlocks_result[i] != SymbolData.NOT_FOUND.getInstanceData() && ", "+          _isAssignableFrom(catchBlocks_result[i].getSymbolData(), leastRestrictiveType.getSymbolData())) {", "-    if (leastRestrictiveType == null && finallyBlock_result == null) {return null;}", "-    else if (leastRestrictiveType == null) {result = getCommonSuperType(null, finallyBlock_result.getSymbolData());}", "-    else if (finallyBlock_result == null) {result = getCommonSuperType(leastRestrictiveType.getSymbolData(), null);}", "-    else { result = getCommonSuperType(leastRestrictiveType.getSymbolData(), finallyBlock_result.getSymbolData());} ", "+    if (leastRestrictiveType == null && finallyBlock_result == null) return null;", "+    else if (leastRestrictiveType == null) result = getCommonSuperType(null, finallyBlock_result.getSymbolData());", "+    else if (finallyBlock_result == null) result = getCommonSuperType(leastRestrictiveType.getSymbolData(), null);", "+    else result = getCommonSuperType(leastRestrictiveType.getSymbolData(), finallyBlock_result.getSymbolData()); ", "-    if (result != null) {return result.getInstanceData();}", "+    if (result != null) return result.getInstanceData();"]}], "num": 11503}
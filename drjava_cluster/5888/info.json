{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9efaedef3fafe38d62d7a2aa31a1bec8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58c0c8783d6dfd14d84dae1cbb0a9f4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "7800062ae81518c3396891f7a26a405437cbcbf7", "commitAfterChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public int _getLineFirstCharPos(final int pos) throws BadLocationException", "signatureAfterChange": "   public int _getLineFirstCharPos(final int pos)", "diff": ["-  public int _getLineFirstCharPos(final int pos) throws BadLocationException {", "+  public int _getLineFirstCharPos(final int pos) {", "-    // assert isReadLocked();", "+//    assert EventQueue.isDispatchThread();", "+    ", "+    if (pos < 0 || pos > getLength()) return -1;", "+    int len = endLinePos - startLinePos;", "-    // Get all text on this line", "-    String text = getText(startLinePos, endLinePos - startLinePos);", "-    int walker = 0;", "-    while (walker < text.length()) {", "-      if (text.charAt(walker) == ' ' || text.charAt(walker) == '\\t') walker++;", "-      else {", "-        nonWSPos = startLinePos + walker;", "+    // Get all text on this line and search for first nonWS char", "+    String text = _getText(startLinePos, len);", "+    for (int i = 0; i < len; i++) {", "+      char ch = text.charAt(i);", "+      if (ch != ' ' && ch != '\\t') {", "+        nonWSPos = startLinePos + i;", "+    // if nonWSPos >= pos, then insertions after newWSPos leave query unchanged;", "+    // if nonWSPos < pos, insertion after pos - 1 leaves start point of search and result unchanged."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faf5ddfc56f1ea29bc5331a473831c30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public int _getLineFirstCharPos(final int pos)", "signatureAfterChange": "   public int _getLineFirstCharPos(final int pos)", "diff": ["-//    assert EventQueue.isDispatchThread();", "-    ", "-    if (pos < 0 || pos > getLength()) return -1;", "+    //    assert EventQueue.isDispatchThread();", "-    int len = endLinePos - startLinePos;", "-    String text = _getText(startLinePos, len);", "-    for (int i = 0; i < len; i++) {", "-      char ch = text.charAt(i);", "-      if (ch != ' ' && ch != '\\t') {", "-        nonWSPos = startLinePos + i;", "+    String text = _getText(startLinePos, endLinePos - startLinePos);", "+    int walker = 0;", "+    while (walker < text.length()) {", "+      if (text.charAt(walker) == ' ' || text.charAt(walker) == '\\t') walker++;", "+      else {", "+        nonWSPos = startLinePos + walker;", "-    // if nonWSPos >= pos, then insertions after newWSPos leave query unchanged;", "-    // if nonWSPos < pos, insertion after pos - 1 leaves start point of search and result unchanged."]}], "num": 5888}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a485636cc185e706aa5edde08029506", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03e3168ede3eeec81575edc44e697200", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/FontOptionComponent.java", "commitBeforeChange": "aac5f34523ac0f0412292e9d65f671aa46b752f4", "commitAfterChange": "10c44767bf3d5eefd230820d6106fe1ea2534e6f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void chooseFont()", "signatureAfterChange": "   public void chooseFont()", "diff": ["+    String oldText = _fontField.getText();", "+      if (!oldText.equals(_fontField.getText())) {", "+        notifyChangeListeners();        ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bef9bec879c826dad31968dcc8f5674", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private void _remove()", "signatureAfterChange": "   private void _remove()", "diff": ["-    int row = (len > 0) ? rows[len - 1] : 0;", "+    int row = (len > 0) ? rows[0] : 0;", "+    int rowCount = _regTree.getRowCount();", "+    if (row >= rowCount) row = Math.max(0, rowCount - 1);  // ensure row is in range", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e2bee6d735567f39aee65881c113055", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevStmtPlus.java", "commitBeforeChange": "8b24a954c4ca31d0bfd4e6cf29968bdfd85074dd", "commitAfterChange": "7a16360ed3db92a5068288b3b626cc549d236342", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void indentLine(DefinitionsDocument doc)", "signatureAfterChange": "   public void indentLine(DefinitionsDocument doc)", "diff": ["-      char[] indentDelims = {';', '{', '}', ':'};", "+      char[] indentDelims;", "+      char[] indentDelimsWithColon = {';', '{', '}', ':'};", "+      char[] indentDelimsWithoutColon = {';', '{', '}'};", "+      if (_useColon) {", "+        indentDelims = indentDelimsWithColon;", "+      } else {", "+        indentDelims = indentDelimsWithoutColon;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3273578238e87a428c3280715dcfb3e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/FileOptionComponent.java", "commitBeforeChange": "85538cb484722f3ee8b8f52d4f19defc02bd67d5", "commitAfterChange": "ec727abc662388138ad4bf94694974ef5e13db3c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public boolean update()", "signatureAfterChange": "      public boolean update()", "diff": ["-    if (_newFile != _currentFile) {", "+        ", "+    boolean validChoice = chooseFileFromField();", "+    if (!validChoice) return false;", "+    ", "+    if (!_newFile.equals(_currentFile)) {", "+      _currentFile = _newFile;", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "356dbbf4e7a1776ab55d29fdc3ea2730", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "b751c38fc70d22454ab93b852de5dd5f6f16d1ba", "commitAfterChange": "25137aee8580e8df5512ad30c8f4503bd397d8af", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static File[] getToolsJarFiles(File toolsJar)", "signatureAfterChange": "   public static File[] getToolsJarFiles(File toolsJar)", "diff": ["-    String winPrograms = System.getenv(\"ProgramFiles\");", "-    if (winPrograms != null) {", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms, \"Java\")));", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms)));", "-    }", "-    else {  // in case the environment variables aren't set up properly", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "+    final String jv = System.getProperty(\"java.version\");", "+    if (!jv.startsWith(\"1.3\") && !jv.startsWith(\"1.4\")) {", "+      // in Java 1.3 and 1.4, getenv is deprecated and throws an exception,", "+      // so we cannot use it", "+      String winPrograms = System.getenv(\"ProgramFiles\");", "+      if (winPrograms != null) {", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms, \"Java\")));", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms)));", "+      }", "+      else {  // in case the environment variables aren't set up properly", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "+      }", "+      ", "+      String winSystem = System.getenv(\"SystemDrive\");", "+      if (winSystem != null) {", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem, \"Java\")));", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem)));", "+      }", "+      else { // in case the environment variables aren't set up properly", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "+      }", "-    String winSystem = System.getenv(\"SystemDrive\");", "-    if (winSystem != null) {", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem, \"Java\")));", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem)));", "-    }", "-    else { // in case the environment variables aren't set up properly", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "-    }", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4409c9dd5584801f3b9ac649686eab63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "d3ca8d30db126f3de1352627e18f51d00a1bf339", "commitAfterChange": "1e619a02befaa7a99dc31172b2a007a2446ed2bd", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static List<List<List<String>>> commandLineToLists(String cmdline)", "signatureAfterChange": "   public static List<List<List<String>>> commandLineToLists(String cmdline)", "diff": ["-    // also add escaped process separator (':' or ';') as keyword, but treat it differently", "+    // also add escaped process separator ('#') as keyword, but treat it differently", "+    // also add escaped colon (':') as keyword on Windows, but treat it differently", "+    final String ESCAPED_COLON_SEPARATOR = ESCAPE+\":\";", "+    if (!ESCAPED_COLON_SEPARATOR.equals(ESCAPED_PATH_SEPARATOR)) {", "+      tok.addKeyword(ESCAPED_COLON_SEPARATOR); // escaped colon", "+    }", "-                   n.equals(ESCAPED_PIPE_SEPARATOR)) {", "+                   n.equals(ESCAPED_PIPE_SEPARATOR) ||", "+                   n.equals(ESCAPED_COLON_SEPARATOR)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f434e6be1eb8c5c4c8dabc4abf2006a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "d41b5de79662496f09ec590840d7e35134702a41", "commitAfterChange": "fd26cc12b714205eb66ef1427d78a124c29d57fc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void toggleBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws IOException, ClassNotFoundException, DebugException", "signatureAfterChange": "   public void toggleBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws IOException, ClassNotFoundException, DebugException", "diff": ["-    /**", "-    BreakpointManager bpManager = (BreakpointManager)_session.getManager(BreakpointManager.class);", "-", "-    _model.saveAllBeforeProceeding(GlobalModelListener.DEBUG_REASON);", "-", "-    if (_model.areAnyModifiedSinceSave()) return; // they cancelled the save.", "-", "-    String className = mapClassName(doc);", "-    if (className == null) {", "-      throw new ClassNotFoundException();", "+    Breakpoint breakpoint = doc.getBreakpointAt(lineNumber);", "+        ", "+    if (breakpoint != null) {", "+      removeBreakpoint( breakpoint);", "-", "-    Iterator i = bpManager.breakpoints(true);", "-    Object o;", "-    ResolvableBreakpoint rbp;", "-    ReferenceTypeSpec rts;", "+    else {", "+      setBreakpoint(doc, lineNumber);", "+    }", "-    while (i.hasNext()) {", "-      o = i.next();", "-      if (o instanceof ResolvableBreakpoint) {", "-        rbp = (ResolvableBreakpoint)o;", "-        rts = rbp.getReferenceTypeSpec();", "-        if (rts.matches(className) &&", "-            rbp instanceof LineBreakpoint &&", "-            ((LineBreakpoint)(rbp)).getLineNumber() == lineNumber) {", "-          // FOUND IT!", "-          removeBreakpoint((LineBreakpoint)rbp, className);", "-          return;", "-        }", "-      }", "-    }", "-", "-    setBreakpoint(className, lineNumber);", "-    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e0faac1ec61e71520d2d05b4365de4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "b97db40bea671594a37f7cabd8d363cab45e0154", "commitAfterChange": "fab79f2f445044e7a60a89e228042164713428d9", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public void gotoLine(int line)", "signatureAfterChange": "   public void gotoLine(int line)", "diff": ["+    int actualLine =1;", "+      actualLine++;", "+    _cachedLineNum = actualLine;", "+    _cachedLocation = _currentLocation;", "+    _cachedPrevLineLoc = getLineStartPos(_currentLocation);", "+    _cachedNextLineLoc = getLineEndPos(_currentLocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e6df8d45c3578c43b2cbc18b41309f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e9a3c458e98ae55999f3ec08806738a9c9f668dc", "commitAfterChange": "a73e93a8edce9508179438ae19a8b11327258b2d", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": "     protected DefinitionsDocument getDocument()", "signatureAfterChange": "     protected DefinitionsDocument getDocument()", "diff": ["-        System.out.println(\"DefaultGlobalModel: 1435: creating blank doc.\");", "+        File tempFile = _file;", "+        setFile(null);", "+        _cache.get(this).insertString(0, \"\\\"Error loading document from file: \" + tempFile + \"\\\"\", null);", "+        System.out.println(\"DefaultGlobalModel: 1442: this should NEVER happen\");", "+      }catch(BadLocationException e){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5bcca62260f7cd46a1e9bf0c6e5bc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacGJCompiler.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "      protected Hashtable<String, String> createOptionsHashtable(File[] sourceRoots)", "signatureAfterChange": "      protected Hashtable<String, String> createOptionsHashtable(File[] sourceRoots)", "diff": ["-    // Allow assertions in 1.4  (config option)", "-    //options.put(\"-source\", \"1.4\");", "+    // Allow assertions in 1.4 if configured and in Java >= 1.4", "+    String version = System.getProperty(\"java.version\");", "+    if ((_allowAssertions) && (version != null) &&", "+        (\"1.4.0\".compareTo(version) <= 0)) {", "+      options.put(\"-source\", \"1.4\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91c2757b82fec3bb881e95ab47b01b40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "ea5cfb95023de08fddeb23c31d383ebdee6d9006", "commitAfterChange": "fb61bb542bf295f9ff563d4fe1831b256b325388", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "        public void mouseReleased(MouseEvent e)", "signatureAfterChange": "        public void mouseReleased(MouseEvent e)", "diff": ["+        _error = _errorAtPoint(e.getPoint());", "+", "+        if (_isEmptySelection() && _error != null) {", "+          _errorListPane.switchToError(_error);", "+        }", "+        else {", "+          selectNothing();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a797db4bc12fe879360056cdc0609810", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJavaTestCase.java", "commitBeforeChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "commitAfterChange": "5cd90afd0cb351ab7e2ea31fa6aad54cecb3b6a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected void setUp() throws Exception", "signatureAfterChange": "   protected void setUp() throws Exception", "diff": ["+    final String newName = System.getProperty(TEST_DRJAVA_CONFIG_PROPERTY);", "+    if (newName!=null) {", "+      DrJava.setPropertiesFile(newName);", "+      DrJava._initConfig();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a918c4b78706cd8b3469809c142665ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "e8f48651b4fb31b2a1907635fbd654b3f66a98b2", "commitAfterChange": "2499b0018a7f137bb1baaaf2d077c26486e3f12e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "diff": ["-    String className = testString.substring(firstIndex, secondIndex);", "+    ", "+    String className1 = testString.substring(firstIndex, secondIndex);", "+    String className2 = testString.substring(0, firstIndex-1);", "+    String className;", "+    if(firstIndex == secondIndex){", "+      className = className2;", "+    }else{", "+      className = className1;", "+    }", "+    ", "+", "+//    for dubugging    ", "+//    try{", "+//      File temp = File.createTempFile(\"asdf\", \"java\", new File(\"/home/awulf\"));", "+//      FileWriter writer = new FileWriter(temp);", "+//      writer.write(\"testString: \" + testString + \"\\n\");", "+//      writer.write(\"old className: \" + className1 + \"\\n\");", "+//      writer.write(\"new className: \" + className2 + \"\\n\");", "+//      writer.write(\"file: \" + file + \"\\n\");", "+//      writer.write(\"lineNum: \" + lineNum + \"\\n\");", "+//      writer.write(\"exception: \" + exception + \"\\n\");", "+//      writer.write(\"!isFailure: \" + !isFailure + \"\\n\");", "+//      writer.write(\"testName: \" + testName + \"\\n\");", "+//      writer.write(\"className: \" + className + \"\\n\");", "+//      writer.write(\"stackTrace: \" + stackTrace + \"\\n\");", "+//      writer.close();", "+//    }catch(IOException e){", "+//      ", "+//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf95ebacf1dff79e42a6076ad92c8cda", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "9a73d72784b753ecb3a038fd849604256998d4d2", "commitAfterChange": "9297bd3255995599281a9a548fcd6e849eecaf7b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames)", "signatureAfterChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames)", "diff": ["-    _tableScrollPane.setPreferredSize(new Dimension(0, NUM_ROWS * PIXELS_PER_ROW));", "+    int rows = _tableModel.getRowCount();", "+    if (rows == 0) rows = 1;", "+    _tableScrollPane.setPreferredSize(new Dimension(0,  (rows * PIXELS_PER_ROW) - ((2*rows)-1)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7f65cf6ec79dfa5e83a5e502ea6414d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "015a587e3c75bdcf4fec55c8e43c23b1966c68b5", "commitAfterChange": "0e2d4b775324389dfc945afbec01e0e0bf50e1a4", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public void notifyActive()", "signatureAfterChange": "   public void notifyActive()", "diff": ["+    int len = getDJDocument().getLength();", "+    if(len < _position){", "+      // the document changed since we're set inactive", "+      //so set selection to be none", "+      _position = len;", "+      _selStart = len;", "+      _selEnd = len;", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9dfa8a6676bf3b0170f423361ee7238", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["+      ", "+      int debugPort = getDebugPort();", "-      String[] jvmargs = new String[] {\"-Dcom.apple.backgroundOnly=true\"};", "+      String[] jvmargs;", "+      if (debugPort > -1) {", "+        jvmargs = new String[] {", "+          \"-Dcom.apple.backgroundOnly=true\",", "+            // For debug interface:", "+            \"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=\" + debugPort,", "+            \"-Xdebug\",", "+            \"-Xnoagent\",", "+            \"-Djava.compiler=NONE\"", "+        };", "+      }", "+      else {", "+        jvmargs = new String[] { \"-Dcom.apple.backgroundOnly=true\" };", "+      }", "+      ", "-                _model.replCalledSystemExit(status);", "+                replCalledSystemExit(status);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da90a43fc2baad11c2c06c912f221f9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "51e8f4cbce06d140e9a09dd38237b848b4f27d8a", "commitAfterChange": "d350dd729092f66f8ad737ae377c54d2ad394fbf", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "   private void init(boolean info)", "signatureAfterChange": "   private void init(boolean info)", "diff": ["+      final String tooltip = a.getToolTipText();", "+      if (tooltip!=null) { _buttons[i].setToolTipText(tooltip); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e02db8d87308ad5025c908e8c978c98d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "2cd89063cbfbf0917c73ab6eef3bf3a4c73e4766", "commitAfterChange": "b7a80f7ccc058818677874970560634a8628aea6", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 65, "signatureBeforeChange": "   private ArrayList extractErrors(LinkedList lines)", "signatureAfterChange": "   private ArrayList extractErrors(LinkedList lines)", "diff": ["+    final String ERROR_INDICATOR = \"Error: \";", "+      // Check for the telltale signs of a thrown exception or error.", "-      // Check for the telltale signs of a thrown exception.", "-      errStart = output.indexOf(EXCEPTION_INDICATOR);", "+      errStart = output.indexOf(ERROR_INDICATOR);", "+      ", "+      // If we haven't found an error, look for an exception.", "+      if (errStart == -1) {", "+        errStart = output.indexOf(EXCEPTION_INDICATOR);", "+      }", "+            ", "-        do {", "-          buf.append(output);", "+        buf.append(output);", "+        while (lines.size() > 0) {", "-        } while (lines.size() > 0);", "+          buf.append('\\n');", "+          buf.append(output);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd2a300abc9e02e550fbbaea63ba29e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "d8a9b1581cb442d4a3822bc3181eb17c4d09e8c8", "commitAfterChange": "7a303c2457f60ceae3b286a0d52733d97d66ab81", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void forSourceFile(SourceFile sf)", "signatureAfterChange": "   public void forSourceFile(SourceFile sf)", "diff": ["-    _readAndWriteThroughIndex(sf.getSourceInfo().getEndLine(), sf.getSourceInfo().getEndColumn());", "+    //_readAndWriteThroughIndex(sf.getSourceInfo().getEndLine(), sf.getSourceInfo().getEndColumn());", "+    String remainder = _readThroughIndex(sf.getSourceInfo().getEndLine(), sf.getSourceInfo().getEndColumn());", "+    _writeToFileOut(remainder);", "+    // if the remainder doesn't end with a newline, then we didn't write a line number comment yet", "+    // write it now", "+    if (!remainder.endsWith(newLine)) _writeToFileOut(\" //[\"+_fileInLine+\"]\");"]}], "num": 28429}
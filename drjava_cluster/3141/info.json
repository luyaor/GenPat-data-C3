{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "292bd91cc434f0f72d154790c059f1ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65db467c31d0c922631adbbe5d3847d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "7e9ff3bb619e0dc2b4141d09cbd325f980ff3ee5", "commitAfterChange": "8004e8339d9ea14156f225b11f26f546f17ae259", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["+      // Performs the action a", "-    else {    ", "+    else {", "-      if (((e.getModifiers() & InputEvent.META_MASK) != 0) && e.getKeyCode() == KeyEvent.VK_UNDEFINED){", "-\treturn;", "+      if (((e.getModifiers() & InputEvent.META_MASK) != 0) && e.getKeyCode() == KeyEvent.VK_UNDEFINED) {", "+        return;", "+      }", "+      ", "+      // The following conditional fixes ease of use issue 693253 by checking if a typed event is ", "+      // shift-delete or shift-backspace and then performing a delete or backspace operation, ", "+      // respectively", "+      if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {", "+        int newModifiers = e.getModifiers() & ~(InputEvent.SHIFT_MASK);", "+        ", "+        KeyStroke newKs = KeyStroke.getKeyStroke(ks.getKeyCode(), newModifiers, ks.isOnKeyRelease());", "+        String name = KeyBindingManager.Singleton.getName(newKs);", "+", "+        if (name != null && (name.equals(\"Delete Previous\") || name.equals(\"Delete Next\"))) {", "+          // We are unsure about the third and fourth arguments (e and e.getSource()); we simply ", "+          // reuse the original values", "+          SwingUtilities.notifyAction(KeyBindingManager.Singleton.get(newKs), newKs, e, e.getSource(), newModifiers);", "+          e.consume();", "+          return;", "+        }", "-\tsuper.processKeyEvent(e);       ", "+        super.processKeyEvent(e);       "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878a1d39667633028621e4193005d298", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "c62d3e0fe024c724a67e86baf30c41235da58454", "commitAfterChange": "bd499b8e6c590fd3376a82010e399ae7edfc6975", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-     //Fixes bug ID:2898576 - Backspace undo/redo issues", "-      if(e.getKeyCode() == KeyEvent.VK_BACK_SPACE && deleteCEBool){", "-        endCompoundEdit(); ", "-        deleteCEBool=false;", "+      ", "+      //Fixes bug ID:2813140 - \"Go to Opening/Closing Brace\" Shortcut Inserts { or }", "+      if (((e.getKeyCode() == KeyEvent.VK_OPEN_BRACKET) || (e.getKeyCode() == KeyEvent.VK_CLOSE_BRACKET)) &&", "+          ((e.getModifiers() & InputEvent.CTRL_MASK) != 0) &&", "+          ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0)) {", "+        // Ctrl-Shift-Bracket", "+        if (e.getID() == KeyEvent.KEY_PRESSED) {", "+          _isCtrlShiftBracketDown = true;", "+        }", "+        else if (e.getID() == KeyEvent.KEY_RELEASED) {", "+          _isCtrlShiftBracketDown = false;", "+        }", "-      else if(e.getID()==KeyEvent.KEY_PRESSED && e.getKeyCode() != KeyEvent.VK_BACK_SPACE){", "-        deleteCEBool = true;", "+      ", "+      //Fixes bug ID:2898576 - Backspace undo/redo issues", "+      if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE && _isDeleteCompoundEdit) {", "+        endCompoundEdit(); ", "+        _isDeleteCompoundEdit = false;", "+      }", "+      else if (e.getID()==KeyEvent.KEY_PRESSED && e.getKeyCode() != KeyEvent.VK_BACK_SPACE) {", "+        _isDeleteCompoundEdit = true;", "+      ", "-          ", "-            "]}], "num": 3141}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca7ebf06d540d73ac1f98a9b5b6f868c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8b298be04e4cd6d2ed477aece5e68cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/util/text/SWTDocumentAdapter.java", "commitBeforeChange": "d2486bb242e4127e9ef18191ee729a7dd368e35a", "commitAfterChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void forceInsertText(int offs, String str, String style)     throws DocumentAdapterException", "signatureAfterChange": "   public synchronized void forceInsertText(final int offs, final String str,                                             final String style)     throws DocumentAdapterException", "diff": ["-  public void forceInsertText(int offs, String str, String style)", "+  public synchronized void forceInsertText(final int offs, final String str, ", "+                                           final String style)", "-    //AttributeSet s = null;", "-    //if (style != null) {", "-    //  s = _styles.get(style);", "-    //}", "-    try {", "-      _pane.replaceTextRange(offs, 0, str);", "+    SWTStyle s = null;", "+    if (style != null) {", "+      s = _styles.get(style);", "-    catch (IllegalArgumentException e) {", "-      throw new DocumentAdapterException(e);", "+    final SWTStyle chosenStyle = s;", "+    ", "+    _editException = null;", "+    _forceInsert = true;", "+", "+    // Do the insert", "+    _pane.getDisplay().syncExec(new Runnable() {", "+      public void run() {", "+        try {", "+          _pane.replaceTextRange(offs, 0, str);", "+          ", "+          // Add the style", "+          if (chosenStyle != null) {", "+            StyleRange range = new StyleRange();", "+            range.start = offs;", "+            range.length = str.length();", "+            range.fontStyle = chosenStyle.getFontStyle();", "+            range.foreground = chosenStyle.getColor();", "+            _pane.setStyleRange(range);", "+          }", "+        }", "+        catch (IllegalArgumentException e) {", "+          _editException = new DocumentAdapterException(e);", "+        }", "+      }", "+    });", "+    _forceInsert = false;", "+    if (_editException != null) {", "+      throw _editException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dea4e77f47b1b57a2238200b86c5ebf0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ecc95c0c60f2dabd3e5d52eee223ff564461e48", "commitAfterChange": "a7a03ce246432b4e0ab5d61753312842c1cd49c1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-   */", "-  public void startInterpreterJVM() {", "-    if (isStartupInProgress() || isInterpreterRunning()) {", "-      return;", "-    }", "-", "-    try {", "-      invokeSlave();", "-    }", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "-    catch (IOException ioe) {", "-      _threwException(ioe);", "-    }", "-  }", "+   */", "+  public void restartInterpreterJVM() {", "+    synchronized(this) {", "+     if (_startupInProgress) {", "+        return;", "+      }", "+", "+      _startupInProgress = true;", "+", "+      killInterpreter();", "+", "+      String className = InterpreterJVM.class.getName();", "+      String[] args = new String[] { getIdentifier() };", "+      try {", "+        //System.err.println(\"started interpreter jvm\");", "+        _interpreterProcess = ExecJVM.runJVMPropogateClassPath(className, args);", "+        ", "+        // Start a thread to wait for the interpreter to die and to fire", "+        // off a new one (and notify model) when it happens", "+        Thread thread = new Thread() {", "+          public void run() {", "+            try {", "+              int status = _interpreterProcess.waitFor();", "+              restartInterpreterJVM();", "+              _model.replCalledSystemExit(status);", "+            }", "+            catch (InterruptedException ie) {", "+              throw new edu.rice.cs.util.UnexpectedException(ie);", "+            }", "+          }", "+        };", "+", "+        thread.start();", "+      }", "+      catch (IOException ioe) {", "+        _threwException(ioe);", "+      }", "+    }", "+  }"]}], "num": 1167}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "805eb68d873505d6b46ff9f06f21b8f1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8972c1875f89553d300cefb865e0115f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 195, "methodNumberAfterChange": 378, "signatureBeforeChange": "   public String getDisplayFullPath(int index)", "signatureAfterChange": "   public List<OpenDefinitionsDocument> getAuxiliaryDocuments()", "diff": ["-  /** Return the absolute path of the file with the given index, or \"(untitled)\" if no file exists. */", "-  public String getDisplayFullPath(int index) {", "-    OpenDefinitionsDocument doc = getOpenDefinitionsDocuments().get(index);", "-    if (doc == null) throw new RuntimeException( \"Document not found with index \" + index);", "-    return doc.getDisplayFullPath();", "-  }", "+   /** Returns the OpenDefinitionsDocuments that are identified as auxiliary project source files. */", "+  public List<OpenDefinitionsDocument> getAuxiliaryDocuments() {", "+    List<OpenDefinitionsDocument> allDocs = getOpenDefinitionsDocuments();", "+    List<OpenDefinitionsDocument> selectedDocs = new LinkedList<OpenDefinitionsDocument>();", "+    for (OpenDefinitionsDocument d : allDocs)", "+      if (d.isAuxiliaryFile()) selectedDocs.add(d);", "+    return selectedDocs;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e13f9c013e98444c72b35f02cb2825", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testMemoryLeak() throws InterruptedException", "signatureAfterChange": "   public void testMemoryLeak() throws InterruptedException, IOException", "diff": ["-  public void testMemoryLeak() throws InterruptedException{", "+  public void testMemoryLeak() throws InterruptedException, IOException {", "-    OpenDefinitionsDocument doc1 = _model.newFile();", "-    OpenDefinitionsDocument doc2 = _model.newFile();", "-    OpenDefinitionsDocument doc3 = _model.newFile();", "-    OpenDefinitionsDocument doc4 = _model.newFile();", "-    OpenDefinitionsDocument doc5 = _model.newFile();", "+    ", "+   ", "+    OpenDefinitionsDocument doc1 = openFile(tempFile(1));", "+    OpenDefinitionsDocument doc2 = openFile(tempFile(2));", "+    OpenDefinitionsDocument doc3 = openFile(tempFile(3));", "+    OpenDefinitionsDocument doc4 = openFile(tempFile(4));", "+    OpenDefinitionsDocument doc5 = openFile(tempFile(5));", "-    assertEquals(\"There should be 4 in the LRU\", 4, _cache.getNumInCache());", "+    assertEquals(\"There should be 4 in the QUEUE\", 4, _cache.getNumInCache());"]}], "num": 21107}
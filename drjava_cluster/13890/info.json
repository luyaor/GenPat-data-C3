{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "096421f8ba9af1317ebfe436bf07023b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79aa1d9f2ad0e48fbe4416f102589949", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "640d94c961319de37237c21816ee469b313568b5", "commitAfterChange": "dbdd53c636f6618ffbae999ad0ee607bc3e2b6a3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Node visit(ObjectMethodCall node)", "signatureAfterChange": "   public Node visit(ObjectMethodCall node)", "diff": ["+    ", "+        AbstractTypeChecker tc = AbstractTypeChecker.makeTypeChecker(typeCheckerContext);", "-            params[i]=(args.get(i).acceptVisitor(AbstractTypeChecker.makeTypeChecker(typeCheckerContext)));", "+            params[i]=(args.get(i).acceptVisitor(tc));", "-        }   ", "+        }", "+        boolean existsInCurrentScope = false;", "+        ", "+        if(o == defaultQualifier) {", "+          try {", "+            ReflectionUtilities.lookupMethod((Class)((Node)o).acceptVisitor(tc),node.getMethodName(),params);", "+            existsInCurrentScope = true;", "+          }", "+          catch(Exception nsme) {", "+            //Expected to throw an Exception whenever the method call is to a method that does not exist in ", "+            //the class specified by the default qualifier. If caught, the method does not exist in current scope and the ", "+            //new Qualified name should be looked up, or if o is not of type Node.", "+          } ", "+        }", "+          ", "+        ", "-        o = new ReferenceType(ids);", "+        if (! existsInCurrentScope)", "+          o = new ReferenceType(ids);", "-        o = defaultQualifier;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a64153f329f2f75f023df90a604d71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "71879d695be61a14cdd93b2ece27fb14682043fb", "commitAfterChange": "e70766c672e058ab37ae5757bf5008b997a8ff63", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Node visit(ObjectMethodCall node)", "signatureAfterChange": "   public Node visit(ObjectMethodCall node)", "diff": ["+    if(o == null) {", "+      try {", "+        //Get fully qualified name for Object o if the methodCall is to a staticly imported method", "+        //The full class name is given as if the user gave a call using the entire fully qualified name", "+        Class[] params = new Class[args!=null? args.size() : 0];", "+        if(args != null) {", "+          for(int i = 0; i < args.size(); i++) {", "+            String toParse = args.get(i).toString();", "+            params[i]=(args.get(i).acceptVisitor(AbstractTypeChecker.makeTypeChecker(typeCheckerContext)));", "+          }", "+        }   ", "+        List<IdentifierToken> ids = context.getQualifiedName(node.getMethodName(),params);", "+        o = new ReferenceType(ids);", "+      }      ", "+      catch(Exception e){", "+        //If the class type of one of the parameters can't be found, throws an exception", "+        //Also, if no method found to have been imported, throws an exception", "+        //This will occur every time the user calls a method that has not been staticly imported", "+        //As this section is new code, this is being caught to prevent breaking old code", "+      }     ", "+    }"]}], "num": 13890}
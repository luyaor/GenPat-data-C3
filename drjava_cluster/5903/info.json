{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7402e7845ccc44f35accbc19dcfd137e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a03459a12d70d2a7d4d894670175dd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "4a6b642f3afd5dae71256130cdcaaf4fda509249", "commitAfterChange": "ab1acd6921fa73274023da473a4888d5bdd6b5f2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate int _indentSpecialCases(int tab, int distToPrevNewline) \t\tthrows BadLocationException", "signatureAfterChange": " \tprivate int _indentSpecialCases(int tab, int distToPrevNewline) \t\tthrows BadLocationException", "diff": ["-\t\t\tint start = _reduced.getDistToPreviousNewline(distToPrevNewline);", "+\t\t\tint start = _reduced.getDistToPreviousNewline(distToPrevNewline + 1);", "-\t\t\t//case of  }  if no matching { then let offset be 0.", "+\t\t\t//case of  }", "-", "-\t\t\t//normal endings", "-", "-      //return tab", "+\t\t\t// if no matching { then let offset be 0.", "+", "+\t\t\t//non-normal endings", "+\t\t\ti = length - distToPrevNewline - 2;", "+\t\t\twhile (i >= 0 && text.charAt(i) == ' ') {", "+\t\t\t\ti--;", "+\t\t\t}", "+\t\t\tif (i >= 0 && !(_normEndings.contains(text.substring(i, i+1)))) {", "+\t\t\t\tint j = 0;", "+\t\t\t\twhile (j < length && text.charAt(j) == ' ')", "+\t\t\t\t\tj++;", "+\t\t\t\t", "+\t\t\t\ttab = j + 2;", "+\t\t\t}", "+\t\t\t\t", "+      //return tab"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cc4df6f48d78da4ade078eedbad644f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DefinitionsDocument.java", "commitBeforeChange": "4a6b642f3afd5dae71256130cdcaaf4fda509249", "commitAfterChange": "ab1acd6921fa73274023da473a4888d5bdd6b5f2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate int _indentSpecialCases(int tab, int distToPrevNewline) \t\tthrows BadLocationException", "signatureAfterChange": " \tprivate int _indentSpecialCases(int tab, int distToPrevNewline) \t\tthrows BadLocationException", "diff": ["-\t\t\tint start = _reduced.getDistToPreviousNewline(distToPrevNewline);", "+\t\t\tint start = _reduced.getDistToPreviousNewline(distToPrevNewline + 1);", "-\t\t\t//case of  }  if no matching { then let offset be 0.", "+\t\t\t//case of  }", "-", "-\t\t\t//normal endings", "-", "-      //return tab", "+\t\t\t// if no matching { then let offset be 0.", "+", "+\t\t\t//non-normal endings", "+\t\t\ti = length - distToPrevNewline - 2;", "+\t\t\twhile (i >= 0 && text.charAt(i) == ' ') {", "+\t\t\t\ti--;", "+\t\t\t}", "+\t\t\tif (i >= 0 && !(_normEndings.contains(text.substring(i, i+1)))) {", "+\t\t\t\tint j = 0;", "+\t\t\t\twhile (j < length && text.charAt(j) == ' ')", "+\t\t\t\t\tj++;", "+\t\t\t\t", "+\t\t\t\ttab = j + 2;", "+\t\t\t}", "+\t\t\t\t", "+      //return tab"]}], "num": 5903}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac0ddbfc29646027ac68664a0494b13a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3304e384d9c62e8d8f8979ee4b1630b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "8ccb5b5787c23c1ec149415240d859632e14b0eb", "commitAfterChange": "de735ebb692c41fde6f4d0600cc3fb90b66c892a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public InteractionsController(InteractionsModel model,                                 InteractionsDocumentAdapter adapter,                                 InteractionsPane pane)", "signatureAfterChange": "   public InteractionsController(InteractionsModel model,                                 InteractionsDocumentAdapter adapter,                                 InteractionsPane pane)", "diff": ["+    DefaultEditorKit d = pane.EDITOR_KIT;", "+    ", "+    for(Action a : d.getActions()) {", "+      if(a.getValue(Action.NAME).equals(DefaultEditorKit.upAction)) ", "+        defaultUpAction = a;", "+      ", "+      if(a.getValue(Action.NAME).equals(DefaultEditorKit.downAction))", "+        defaultDownAction = a;", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35a05aeac7f53618796236573f53d945", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69b7f744a06a218546e1e05a5acb1e8cacf5750d", "commitAfterChange": "e10e7bd83f125e1856c739971a7fde05620d52b1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private void _attachToVM() throws DebugException", "signatureAfterChange": "   private void _attachToVM() throws DebugException", "diff": ["+    ", "+    // get the singleton instance of the interpreterJVM", "+    List referenceTypes = _vm.classesByName(\"edu.rice.cs.drjava.model.repl.newjvm.InterpreterJVM\");", "+    if (referenceTypes.size() <= 0) {", "+      throw new DebugException(\"Could not get a reference to interpreterJVM\");", "+    }", "+    ReferenceType rt = (ReferenceType)referenceTypes.get(0);", "+    Field field = rt.fieldByName(\"ONLY\");", "+    _interpreterJVM = (ObjectReference)rt.getValue(field);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e914917d2540cbad8a2c03801dec812", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "e21c87a73c9cc18626d8ac0032c171af7d12b5c4", "commitAfterChange": "5c74c26bc0d0172fae7fedb4ceddf9beb8fb625d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   private void _setupKeyBindingsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupKeyBindingsPanel(ConfigPanel panel)", "diff": ["+        // Get the tooltip, or default to its name, if none", "+        KeyStroke ks = tmpKsd.getKeyStroke();", "+        Action a = KeyBindingManager.Singleton.get(ks);", "+        String desc = (String) a.getValue(Action.SHORT_DESCRIPTION);", "+        if ((desc == null) || (desc.equals(\"\"))) {", "+          desc = tmpKsd.getName();", "+        }", "+        ", "-                                               tmpKsd.getName(), this);", "+                                               tmpKsd.getName(), this, desc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce0056c0cbfebe6a0139ab67ac565d8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessCreator.java", "commitBeforeChange": "1e619a02befaa7a99dc31172b2a007a2446ed2bd", "commitAfterChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Process start() throws IOException", "signatureAfterChange": "\r   public Process start() throws IOException", "diff": ["-    */", "-  public Process start() throws IOException {", "-    // set up work directory", "-    _evaluatedWorkDir = StringOps.replaceVariables(_workdir, _props, PropertyMaps.GET_CURRENT);", "-    _evaluatedWorkDir = StringOps.unescapeFileName(_evaluatedWorkDir);", "-    File dir = null;", "-    if (!_evaluatedWorkDir.trim().equals(\"\")) { dir = new File(_evaluatedWorkDir); }", "-    ", "-    // set up environment", "-    String[] env = null;", "-    if ((_env!=null) && (_env.size()>0)) {", "-      env = new String[_env.size()];", "-      int i = 0;", "-      for(String key: _env.keySet()) {", "-        String value = _env.get(key);", "-        env[i] = key+\"=\"+value;", "-      }", "-    }", "-    ", "-    // set up command line, if necessary", "-    if (_cmdline!=null) {", "-      _evaluatedCmdLine = StringOps.replaceVariables(_cmdline, _props, PropertyMaps.GET_CURRENT);", "-      List<String> cmds = StringOps.commandLineToList(_evaluatedCmdLine);", "-      _cmdarray = new String[cmds.size()];", "-      for (int i=0; i<cmds.size(); ++i) {", "-        _cmdarray[i] = StringOps.unescapeFileName(cmds.get(i));", "-      }", "-    }", "-    ", "-    return Runtime.getRuntime().exec(_cmdarray,env,dir);", "-  }", "+    */\r", "+  public Process start() throws IOException {\r", "+    // set up work directory\r", "+    _evaluatedWorkDir = StringOps.replaceVariables(_workdir, _props, PropertyMaps.GET_CURRENT);\r", "+    _evaluatedWorkDir = StringOps.unescapeFileName(_evaluatedWorkDir);\r", "+    File dir = null;\r", "+    if (!_evaluatedWorkDir.trim().equals(\"\")) { dir = new File(_evaluatedWorkDir); }\r", "+    \r", "+    // set up environment\r", "+    String[] env = null;\r", "+    if ((_env!=null) && (_env.size()>0)) {\r", "+      env = new String[_env.size()];\r", "+      int i = 0;\r", "+      for(String key: _env.keySet()) {\r", "+        String value = _env.get(key);\r", "+        env[i] = key+\"=\"+value;\r", "+      }\r", "+    }\r", "+    \r", "+    // set up command line, if necessary\r", "+    if (_cmdline!=null) {\r", "+      _evaluatedCmdLine = StringOps.replaceVariables(_cmdline, _props, PropertyMaps.GET_CURRENT);\r", "+      List<List<List<String>>> seqs = StringOps.commandLineToLists(_evaluatedCmdLine);\r", "+      if (seqs.size()!=1) { throw new IllegalArgumentException(\"ProcessCreator needs a command line with just one process.\"); }\r", "+      List<List<String>> pipe = seqs.get(0);\r", "+      if (pipe.size()<1) { throw new IllegalArgumentException(\"ProcessCreator needs a command line with just one process.\"); }\r", "+      List<String> cmds = pipe.get(0);\r", "+      _cmdarray = new String[cmds.size()];\r", "+      for (int i=0; i<cmds.size(); ++i) {\r", "+        _cmdarray[i] = StringOps.unescapeFileName(cmds.get(i));\r", "+      }\r", "+    }\r", "+    \r", "+    return Runtime.getRuntime().exec(_cmdarray,env,dir);\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f558c96cfc0bce5c89698d4fc8c2a4a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void selectItem(CompilerError error)", "signatureAfterChange": "     public void selectItem(CompilerError error)", "diff": ["+      CompilerErrorModel cem = getErrorModel();", "+//        Utilities.showDebug(\"startPos = \" + startPos);", "+        // or the end of the error if the last error (i.e. before the warnings title)", "-        if (i + 1 >= (_numErrors)) endPos = getDocument().getLength();", "-        else endPos = _errorListPositions[i + 1].getOffset();", "+        if (i + 1 >= (_numErrors)) endPos = getDocument().getLength();   ", "+        else { ", "+          endPos = _errorListPositions[i + 1].getOffset();", "+//          Utilities.showDebug(\"endPos(before) = \" + endPos);", "+          CompilerError nextError = _errorTable.get(_errorListPositions[i+1]);", "+//          Utilities.showDebug(\"nextError = \" + nextError);", "+          if (!error.isWarning() && nextError.isWarning()) endPos = endPos - _getWarningTitle().length();", "+//          Utilities.showDebug(\"endPos(after) = \" + endPos);", "+        }            ", "-          // Scroll to make sure this item is visible", "-          Rectangle startRect = modelToView(startPos);", "+          // If first error, show number of errors and warnings preferentially to showing the error", "+          // Otherwise, scroll to make sure this item is visible", "+          Rectangle startRect;", "+          if (i == 0)  startRect = modelToView(0);", "+          ", "+          else startRect = modelToView(startPos);", "+          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7c1d0c4ead6ba798746c710a5c396b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "commitAfterChange": "a3941c1000ac76b7c7dfbe2e02df0072cee011b6", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "   private void _setAllFonts(Font f)", "signatureAfterChange": "   private void _setAllFonts(Font f)", "diff": ["-    _currentDefPane.setFont(f);", "+        ", "+    Iterator scrollPanes = _defScrollPanes.values().iterator();", "+    while (scrollPanes.hasNext()) {  ", "+      JScrollPane scroll = (JScrollPane) scrollPanes.next();", "+      if (scroll != null) {", "+        DefinitionsPane pane = (DefinitionsPane) scroll.getViewport().getView();", "+        pane.setFont(f);", "+      }", "+    }", "+    _junitPanel.setListFont(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca3cf0fcce4b0ab6af3ab36802432f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "commitAfterChange": "880c4e5564712cd25400295c6a42774ca709acb6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public static boolean isCompatible(Class c1, Class c2)", "signatureAfterChange": "   public static boolean isBoxCompatible(Class c1, Class c2, boolean autoBoxEnabled)", "diff": ["+  }", "+  public static boolean isBoxCompatible(Class c1, Class c2, boolean autoBoxEnabled) {", "+      ", "+        ", "+      if (!c2.isPrimitive() && !autoBoxEnabled) {", "+        // We know autoboxing/unboxing is required but", "+        // the version of java doesn't support it", "+        throw new WrongVersionException(\"Auto-unboxing only supported in Java 1.5 or better\");", "+      }", "+      else {", "+        // unbox the second type (may not change)", "+        c2 = _correspondingPrimType(c2);", "+      }", "+      ", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == char.class;", "-        } else if (c1 == long.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class;", "-        } else if (c1 == short.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == char.class);", "+        } ", "+        else if (c1 == long.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class);", "+        } ", "+        else if (c1 == short.class) {", "-        } else if (c1 == float.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class;", "-        } else if (c1 == double.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class  ||", "-            c2 == float.class;", "-        } else {", "+        } ", "+        else if (c1 == float.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class);", "+        } ", "+        else if (c1 == double.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class  ||", "+                  c2 == float.class);", "+        } ", "+        else { // it's a boolean && c1 != c2", "-      } else {", "+      }", "+      else { // c1 == c2", "-    } else {", "+    }", "+    else { // It's a reference type", "+      if (c2 != null && c2.isPrimitive()) {", "+        if (!autoBoxEnabled) {", "+           throw new WrongVersionException(\"Auto-boxing/unboxing is only supported in Java 1.5 or better\");", "+        }", "+        c2 = _correspondingBoxingType(c2);", "+      }"]}], "num": 14242}
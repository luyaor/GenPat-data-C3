{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa8beba45a79edbc6539147d13655212", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a27f51a8e6b97fa25616faf7a4264d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 240, "signatureBeforeChange": "   public static <T1, T2, T3> boolean or(Iterable<? extends T1> iter1,                                          Iterable<? extends T2> iter2,                                         Iterable<? extends T3> iter3,                                         Predicate3<? super T1, ? super T2, ? super T3> pred)", "signatureAfterChange": "   public static <T1, T2, T3> boolean or(Iterable<? extends T1> iter1,                                          Iterable<? extends T2> iter2,                                         Iterable<? extends T3> iter3,                                         Predicate3<? super T1, ? super T2, ? super T3> pred)", "diff": ["-    while (i1.hasNext()) { if (pred.value(i1.next(), i2.next(), i3.next())) { return true; } }", "+    while (i1.hasNext()) { if (pred.contains(i1.next(), i2.next(), i3.next())) { return true; } }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc8188dbc22be4094f22efa6a2f44b05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 208, "methodNumberAfterChange": 239, "signatureBeforeChange": "   public static <T1, T2, T3> boolean and(Iterable<? extends T1> iter1,                                           Iterable<? extends T2> iter2,                                          Iterable<? extends T3> iter3,                                          Predicate3<? super T1, ? super T2, ? super T3> pred)", "signatureAfterChange": "   public static <T1, T2, T3> boolean and(Iterable<? extends T1> iter1,                                           Iterable<? extends T2> iter2,                                          Iterable<? extends T3> iter3,                                          Predicate3<? super T1, ? super T2, ? super T3> pred)", "diff": ["-    while (i1.hasNext()) { if (!pred.value(i1.next(), i2.next(), i3.next())) { return false; } }", "+    while (i1.hasNext()) { if (!pred.contains(i1.next(), i2.next(), i3.next())) { return false; } }"]}], "num": 19979}
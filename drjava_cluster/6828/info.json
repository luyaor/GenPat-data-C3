{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c835324fbc5a13b93d5ee94dff1b6de1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b82537f5be4fc8af784719f29cadb899", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "99e17181157667354a79af5fff7558664559fae9", "commitAfterChange": "0f014669daf60c46746e3e582159e95f94a3d43c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public EvaluationVisitor makeEvaluationVisitor(Context context)", "signatureAfterChange": "   public Visitor makeTranslationVisitor()", "diff": ["+   */", "+  public Visitor makeTranslationVisitor() {", "+    return new IdentityVisitor() {", "+        Expression e = visitThis(node);", "+        if (e instanceof QualifiedName) {", "+          return visit((QualifiedName)e);", "+        }", "+        else if (e instanceof ObjectFieldAccess) {", "+          return visit((ObjectFieldAccess)e);", "+        }", "+        else {", "+          throw new UnexpectedException(new IllegalArgumentException(\"Illegal type of Expression\"));", "+        }", "-   */", "-  public EvaluationVisitor makeEvaluationVisitor(Context context) {", "-    //return new DebugEvaluationVisitorExtension(context, _name);", "-    return new EvaluationVisitorExtension(context) {", "-      public Object visit(ThisExpression node) {", "-        return visit(_convertThisToName(node));", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1ed35d5aea7c9f8a4c974b0a4319063", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 37, "signatureBeforeChange": "   @Override public Type visit(NotExpression node)", "signatureAfterChange": "     @Override public Type visit(NotExpression node)", "diff": ["+     */", "+    @Override public Type visit(NotExpression node) {", "+      check(node.getExpression(), TypeSystem.BOOLEAN);", "+        Expression exp = ts.makePrimitive(node.getExpression());", "+        if (!(getType(exp) instanceof BooleanType)) {", "+          throw new ExecutionError(\"not.expression.type\", node);", "+        }", "+        node.setExpression(exp);", "+        return setType(node, getType(exp));", "-   */", "-  @Override public Type visit(NotExpression node) {", "-    node.getExpression().acceptVisitor(this);", "-    try {", "-      Expression exp = ts.makePrimitive(node.getExpression());", "-      if (!(getType(exp) instanceof BooleanType)) {", "-      node.setExpression(exp);", "-      return setType(node, getType(exp));", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"not.expression.type\", node);", "-    }", "-  }"]}], "num": 6828}
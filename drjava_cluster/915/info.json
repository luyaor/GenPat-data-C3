{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d9191b62e7affd67a6fae9e7c10c52b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01274c9880bf9c8a24683de730da02c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public <T extends INavigatorItem> Enumeration<T> getDocuments()", "signatureAfterChange": "   public Enumeration<ItemT> getDocuments()", "diff": ["-  public <T extends INavigatorItem> Enumeration<T> getDocuments() {", "+  public Enumeration<ItemT> getDocuments() {", "-    final ArrayList<T> list = new ArrayList<T>();", "+    final Vector<ItemT> list = new Vector<ItemT>(); // Use Vector because it implements an Enumeration", "+      // e has a raw type because depthFirstEnumeration() has a raw type signature", "-        if (node.isLeaf() && node != _model.getRoot()) ", "-          list.add((T)node.getUserObject());", "+        if (node.isLeaf() && node != _model.getRoot()) {", "+          list.add(getNodeUserObject(node));", "+        }", "-    ", "-    return new Enumeration<T>() {", "-      ", "-      private Iterator<T> it = list.iterator();", "-      ", "-      public boolean hasMoreElements() { return it.hasNext(); }", "-      ", "-      public T nextElement() { return it.next(); }", "-    };", "+    return list.elements();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9cf3ffeace7af732701e2643ef71ecc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1a21d93c6026fc975d9f1a1bda2fbd55942a0154", "commitAfterChange": "7cbabe0b7b5f77b58eac69afdca15c16ef2f6a9b", "methodNumberBeforeChange": 297, "methodNumberAfterChange": 297, "signatureBeforeChange": "   public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["-                  new FileProperty(\"drjava.current.file\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getActiveDocument().getRawFile(); }", "+                  new FileProperty(\"drjava.current.file\", new Thunk<File>() {", "+      public File value() { return _model.getActiveDocument().getRawFile(); }", "-                  new FileProperty(\"drjava.working.dir\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getInteractionsModel().getWorkingDirectory(); }", "+                  new FileProperty(\"drjava.working.dir\", new Thunk<File>() {", "+      public File value() { return _model.getInteractionsModel().getWorkingDirectory(); }", "-                  new FileProperty(\"drjava.master.working.dir\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getMasterWorkingDirectory(); }", "+                  new FileProperty(\"drjava.master.working.dir\", new Thunk<File>() {", "+      public File value() { return _model.getMasterWorkingDirectory(); }", "-                                   new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getProjectFile(); }", "+                                   new Thunk<File>() {", "+      public File value() { return _model.getProjectFile(); }", "-                                   new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getMainClass(); }", "+                                   new Thunk<File>() {", "+      public File value() { return _model.getMainClass(); }", "-                                   new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getProjectRoot(); }", "+                                   new Thunk<File>() {", "+      public File value() { return _model.getProjectRoot(); }", "-                                   new Lambda<File,Void>() {", "-      public File apply(Void notUsed) { return _model.getBuildDirectory(); }", "+                                   new Thunk<File>() {", "+      public File value() { return _model.getBuildDirectory(); }"]}], "num": 915}
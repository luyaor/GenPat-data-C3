{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51f064a95a082def4ed21b7494fd7ee1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57cc9caf7129284c5312f04ee227f99a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JDKToolsLibrary.java", "commitBeforeChange": "8e720afa329dc77cc45a6aba8a5a211e38ce857f", "commitAfterChange": "8a50a7d4180dfbf8ce4f8b3b2ddf43887adf7c81", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JDKToolsLibrary> makeFromRuntime(GlobalModel model)", "diff": ["-   */", "-  public static JDKToolsLibrary makeFromRuntime(GlobalModel model) {", "-    FullVersion version = JavaVersion.CURRENT_FULL;", "-    CompilerInterface compiler = NoCompilerAvailable.ONLY;", "-    String compilerAdapter = adapterForCompiler(version);", "-    if (compilerAdapter != null) {", "-        CompilerInterface attempt = (CompilerInterface) ReflectUtil.loadObject(compilerAdapter, sig, args);", "-        if (attempt.isAvailable()) { compiler = attempt; }", "+   */", "+  public static Iterable<JDKToolsLibrary> makeFromRuntime(GlobalModel model) {", "+    FullVersion version = JavaVersion.CURRENT_FULL;", "+", "+    String compilerAdapter = adapterForCompiler(version);", "+    msg(\"makeFromRuntime: compilerAdapter=\"+compilerAdapter);", "+    CompilerInterface compiler = getCompilerInterface(compilerAdapter, version);", "+    msg(\"                 compiler=\"+compiler.getClass().getName());", "+", "+    List<JDKToolsLibrary> list = new ArrayList<JDKToolsLibrary>();", "-    return new JDKToolsLibrary(version, compiler, debugger, javadoc);", "-  }", "+    if (compiler!=NoCompilerAvailable.ONLY) {", "+      // if we have found a compiler, add it", "+      msg(\"                 compiler found\");", "+      list.add(new JDKToolsLibrary(version, compiler, debugger, javadoc));", "+    }", "+      ", "+    if (JavaVersion.JAVA_6.compareTo(version.majorVersion())>=0) {", "+      // at least Java 6, try Eclipse compiler", "+      msg(\"                 at least Java 6, try EclipseCompiler\");", "+      // provide \"UNKNOWN 6.0\" as version", "+      FullVersion eclipseVersion = JavaVersion.parseFullVersion(JavaVersion.JAVA_6.fullVersion().versionString(),", "+                                                                \"Eclipse\",\"\");", "+      msg(\"                 version for Eclipse: \"+eclipseVersion);", "+      compiler = getCompilerInterface(\"edu.rice.cs.drjava.model.compiler.EclipseCompiler\", eclipseVersion);", "+      msg(\"                 compiler=\"+compiler.getClass().getName());", "+      if (compiler!=NoCompilerAvailable.ONLY) {", "+        // if we have found a compiler, add it", "+        msg(\"                 compiler found\");", "+        list.add(new JDKToolsLibrary(eclipseVersion, compiler, debugger, javadoc));", "+      }", "+    }", "+    msg(\"                 compilers found: \"+list.size());", "+    ", "+    if (list.size()==0) {", "+      // no compiler found, i.e. compiler == NoCompilerAvailable.ONLY", "+      msg(\"                 no compilers found, adding NoCompilerAvailable library\");", "+      list.add(new JDKToolsLibrary(version, NoCompilerAvailable.ONLY, debugger, javadoc));", "+    }", "+    ", "+    return list;", "+  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf07ad261e68f8bba065b4ff137d70e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "18f7005907576031115bfb0859e7ff6d53506e5e", "commitAfterChange": "70629f9e5e558e81031db46a0eeff962734da160", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 81, "signatureBeforeChange": "   private void _saveCommand()", "signatureAfterChange": "   private void _saveCommand()", "diff": ["-    String name = \"External \"+count;", "-    StringOption nameOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".name\",name);", "-    DrJava.getConfig().getOptionMap().setString(nameOption, name);", "+    final Vector<String> names = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES);", "+    final Vector<String> types = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES);", "+    final Vector<String> cmdlines = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES);", "+    final Vector<String> jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS);", "+    final Vector<String> workdirs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS);", "-    String type = \"cmdline\";", "-    StringOption typeOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".type\",type);", "-    DrJava.getConfig().getOptionMap().setString(typeOption, type);", "+    String name = JOptionPane.showInputDialog(this, \"Name for saved process:\", \"External Java \"+count);", "+    if (name==null) {", "+      // Always apply and save settings", "+      _saveSettings();", "+      this.setVisible(false);", "+      return;", "+    }", "+    ", "+    names.add(name);", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_NAMES,names);", "+    ", "+    types.add(\"cmdline\");", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_TYPES,types);", "-    StringOption cmdlineOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".cmdline\", cmdline);", "-    DrJava.getConfig().getOptionMap().setString(cmdlineOption, cmdline);", "+    cmdlines.add(cmdline);", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES,cmdlines);", "-    String jvmargs = \"\";", "-    StringOption jvmargsOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".jvmargs\",jvmargs);", "-    DrJava.getConfig().getOptionMap().setString(jvmargsOption, jvmargs);", "+    jvmargs.add(\"\");", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS,jvmargs);", "-    StringOption workdirOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".workdir\",workdir);", "-    DrJava.getConfig().getOptionMap().setString(workdirOption, workdir);", "+    workdirs.add(workdir);", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS,workdirs);"]}], "num": 15488}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1ed67581988ccd044703fbcdc98efee", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96cc8ca973751b70819681fc2d0e5fe8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "a6c0afbadc103bc26f8a5c30f4735e1c0d62a541", "commitAfterChange": "f77d59d2a07360ad309276a41936f8bee75e9ad9", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "signatureAfterChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "diff": ["-        jj_la1[75] = jj_gen;", "+        jj_la1[76] = jj_gen;", "-      if (jj_2_33(2147483647)) {", "+      if (jj_2_34(2147483647)) {", "+        case LESS:", "+          case LESS:", "-            break;", "-          default:", "-            jj_la1[76] = jj_gen;", "-            ;", "-          }", "-          jj_consume_token(SEMICOLON);", "-          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-          case BOOLEAN:", "-          case BYTE:", "-          case CHAR:", "-          case DOUBLE:", "-          case FALSE:", "-          case FLOAT:", "-          case INT:", "-          case LONG:", "-          case NEW:", "-          case NULL:", "-          case SHORT:", "-          case SUPER:", "-          case THIS:", "-          case TRUE:", "-          case VOID:", "-          case INTEGER_LITERAL:", "-          case LONG_LITERAL:", "-          case FLOAT_LITERAL:", "-          case DOUBLE_LITERAL:", "-          case CHARACTER_LITERAL:", "-          case STRING_LITERAL:", "-          case IDENTIFIER:", "-          case LPAREN:", "-          case BANG:", "-          case TILDE:", "-          case INCREMENT:", "-          case DECREMENT:", "-          case PLUS:", "-          case MINUS:", "-            exp = expression();", "+          case LESS:", "+          case BANG:", "+          case TILDE:", "-            update = statementExpressionList();", "+          case PLUS:", "+          case MINUS:", "+            exp = expression();", "+          jj_consume_token(SEMICOLON);", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case BOOLEAN:", "+          case BYTE:", "+          case CHAR:", "+          case DOUBLE:", "+          case FALSE:", "+          case FLOAT:", "+          case INT:", "+          case LONG:", "+          case NEW:", "+          case NULL:", "+          case SHORT:", "+          case SUPER:", "+          case THIS:", "+          case TRUE:", "+          case VOID:", "+          case INTEGER_LITERAL:", "+          case LONG_LITERAL:", "+          case FLOAT_LITERAL:", "+          case DOUBLE_LITERAL:", "+          case CHARACTER_LITERAL:", "+          case STRING_LITERAL:", "+          case IDENTIFIER:", "+          case LPAREN:", "+          case LESS:", "+          case INCREMENT:", "+          case DECREMENT:", "+            update = statementExpressionList();", "+            break;", "+          default:", "+            jj_la1[79] = jj_gen;", "+            ;", "+          }", "-          jj_la1[79] = jj_gen;", "+          jj_la1[80] = jj_gen;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8086f6dcb1a3091d44dac0bf0269ee2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 50, "signatureBeforeChange": "   final public ConstructorInvocation explicitConstructorInvocation() throws ParseException", "signatureAfterChange": "   final public ConstructorInvocation explicitConstructorInvocation() throws ParseException", "diff": ["-    if (jj_2_20(2147483647)) {", "-      b = jj_consume_token(THIS);", "-      args = arguments();", "-      e = jj_consume_token(SEMICOLON);", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FALSE:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case SHORT:", "-      case SUPER:", "-      case THIS:", "-      case TRUE:", "-      case VOID:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-        if (jj_2_19(2)) {", "-          exp = primaryExpression();", "-          jj_consume_token(DOT);", "-        } else {", "-          ;", "-        }", "-        b = jj_consume_token(SUPER);", "+    try {", "+      if (jj_2_20(2147483647)) {", "+        b = jj_consume_token(THIS);", "-        break;", "-      default:", "-        jj_la1[43] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+          if (jj_2_19(2)) {", "+            exp = primaryExpression();", "+            jj_consume_token(DOT);", "+          } else {", "+            ;", "+          }", "+          b = jj_consume_token(SUPER);", "+          args = arguments();", "+          e = jj_consume_token(SEMICOLON);", "+          break;", "+        default:", "+          jj_la1[44] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "-    }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid constructor invocation\");", "+    }"]}], "num": 29068}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e01beaebb77c31fac2deaf75e6516b86", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22ff61bc293cc55e64569fd58da3fc74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": "               public void testForComplexSuperReference()", "signatureAfterChange": "               public void testForComplexSuperReference()", "diff": ["-      ComplexSuperReference csr = new ComplexSuperReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"context\")));", "+      ComplexSuperReference csr = ", "+        new ComplexSuperReference(SourceInfo.NONE, ", "+                                  new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"context\")));", "-      //if enclosing_result is null, return null", "+      // if enclosing_result is null, return null", "-      ", "-      ", "-      //if enclosing result is a PackageData, give appropriate error and return null", "+", "+      // if enclosing result is a PackageData, give appropriate error and return null", "-      //if enclosing_result is not an outer data of the current context, give an error", "+      // if enclosing_result is not an outer data of the current context, give an error", "-      ", "-      ", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass));", "-      assertEquals(\"The error message should be correct\", \"You cannot reference context.super from here, because context is not an outer class of i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot reference context.super from here, because context is not an outer class of i.like.monkey\", ", "+                   errors.getLast().getFirst());", "-      //if enclosing_result is an outer data of current context, everything is peachy", "+      // if enclosing_result is an outer data of current context, everything is peachy", "-      ", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass));", "-      ", "-      //if we are in a static method, throw appropriate error", "+      // if we are in a static method, throw appropriate error", "-      ", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass));", "-      assertEquals(\"The error message should be correct\", \"'super' cannot be referenced from within a static method\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", \"'super' cannot be referenced from within a static method\", ", "+                   errors.getLast().getFirst());", "-      //if the enclosing result is an instance type, throw an error", "+      // if the enclosing result is an instance type, throw an error", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass.getInstanceData()));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass.getInstanceData()));", "-      assertEquals(\"The error message should be correct\", \"'super' can only be referenced from a type name, but you have specified an instance of that type.\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", \"'super' can only be referenced from a type name, \"", "+                     + \"but you have specified an instance of that type.\", ", "+                   errors.getLast().getFirst());", "-      ", "-      //if current context is static, give an error", "+      // if current context is static, give an error", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass));", "-      assertEquals(\"Error message should be correct\", \"You cannot reference context.super from here, because i.like.monkey or one of its enclosing classes is static.  Thus, an enclosing instance of context does not exist\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot reference context.super from here, because i.like.monkey or one of its enclosing \"", "+                     + \"classes is static.  Thus, an enclosing instance of context does not exist\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8c426517b643060f67a6a762b0de94f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": "               public void testForComplexThisReferenceOnly()", "signatureAfterChange": "               public void testForComplexThisReferenceOnly()", "diff": ["-      ComplexThisReference ctr = new ComplexThisReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"context\")));", "+      ComplexThisReference ctr = ", "+        new ComplexThisReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"context\")));", "-      //if enclosing_result is null, return null", "+      // if enclosing_result is null, return null", "-      ", "-      //if enclosing result is a PackageData, give appropriate error and return null", "+      // if enclosing result is a PackageData, give appropriate error and return null", "-      //if enclosing_result is not an outer data of the current context, give an error", "+      // if enclosing_result is not an outer data of the current context, give an error", "-      ", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass));", "-      assertEquals(\"The error message should be correct\", \"You cannot reference context.this from here, because context is not an outer class of i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", \"You cannot reference context.this from here, \"", "+                     + \"because context is not an outer class of i.like.monkey\", ", "+                   errors.getLast().getFirst());", "-      //if enclosing_result is an outer data of current context, everything is peachy", "+      // if enclosing_result is an outer data of current context, everything is peachy", "-      ", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass));", "-      //if we are in a static method, throw appropriate error", "+      // if we are in a static method, throw appropriate error", "-      ", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass));", "-      assertEquals(\"The error message should be correct\", \"'this' cannot be referenced from within a static method\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", \"'this' cannot be referenced from within a static method\", ", "+                   errors.getLast().getFirst());", "-      //if the enclosing result is an instance type, throw an error", "+      // if the enclosing result is an instance type, throw an error", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass.getInstanceData()));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass.getInstanceData()));", "-      assertEquals(\"The error message should be correct\", \"'this' can only be referenced from a type name, but you have specified an instance of that type.\", errors.getLast().getFirst());", "-      ", "-      ", "+      assertEquals(\"The error message should be correct\", ", "+                   \"'this' can only be referenced from a type name, but you have specified an instance of that type.\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass));", "-      assertEquals(\"Error message should be correct\", \"You cannot reference context.this from here, because i.like.monkey or one of its enclosing classes is static.  Thus, an enclosing instance of context does not exist\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot reference context.this from here, because i.like.monkey or one of its enclosing \"", "+                     + \"classes is static.  Thus, an enclosing instance of context does not exist\", ", "+                   errors.getLast().getFirst());"]}], "num": 6969}
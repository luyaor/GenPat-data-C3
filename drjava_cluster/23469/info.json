{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62ae89259556f52e883bf7f8f647f7bc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb68e7d4903fa60c6b1b02c84a97140e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 376, "methodNumberAfterChange": 376, "signatureBeforeChange": "\r \r   public void forClassImportStatement(ClassImportStatement that)", "signatureAfterChange": "    public void forClassImportStatement(ClassImportStatement that)", "diff": ["-\r", "-  public void forClassImportStatement(ClassImportStatement that) {\r", "-    forClassImportStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCWord().visit(this);\r", "-    forClassImportStatementOnly(that);\r", "-  }\r", "+", "+  public void forClassImportStatement(ClassImportStatement that) {", "+    forClassImportStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCWord().visit(this);", "+    forClassImportStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f915158fd408e467b619eb4b6a4cb3b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 380, "methodNumberAfterChange": 380, "signatureBeforeChange": "\r \r   public void forExpressionStatement(ExpressionStatement that)", "signatureAfterChange": "    public void forExpressionStatement(ExpressionStatement that)", "diff": ["-\r", "-  public void forExpressionStatement(ExpressionStatement that) {\r", "-    forExpressionStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getExpression().visit(this);\r", "-    forExpressionStatementOnly(that);\r", "-  }\r", "+", "+  public void forExpressionStatement(ExpressionStatement that) {", "+    forExpressionStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getExpression().visit(this);", "+    forExpressionStatementOnly(that);", "+  }"]}], "num": 23469}
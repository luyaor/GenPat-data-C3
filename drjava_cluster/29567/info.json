{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1104e22e9911919033600d8a3cf8e441", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2628a00361aa79cd40b36b780b243467", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/EnumDeclaration.java", "commitBeforeChange": "2956623adadc4e9d463894cafecdb1725bf77715", "commitAfterChange": "74ef9fbe03efcd82eb19c1e26298c6b9ada091d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public EnumDeclaration(int flags, String name, List<? extends ReferenceType> impl, List<Node> body,                           String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public EnumDeclaration(int flags, String name, List<? extends ReferenceType> impl, EnumBody body,                           String fn, int bl, int bc, int el, int ec)", "diff": ["-  public EnumDeclaration(int flags, String name, List<? extends ReferenceType> impl, List<Node> body,", "+  public EnumDeclaration(int flags, String name, List<? extends ReferenceType> impl, EnumBody body,", "-    super(flags, name, new ReferenceType(\"java.lang.Enum\"), impl, HandleConstructors(name, body), fn, bl, bc, el, ec);", "+    super(flags, // | java.lang.reflect.ENUM // DO SAME FOR FIELDS: ACC_ENUM /**/", "+          name, new ReferenceType(\"java.lang.Enum\"), impl,", "+      AddValues(name,", "+        HandleConstructors(name,", "+          makeEnumBodyDeclarationsFromEnumConsts(name, body)),", "+        body.getConstants()),", "+      fn, bl, bc, el, ec);", "+", "+    // Do all Enum checks here? /**/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5486058963a41f150dfe3f091924688a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "8c59b6d09078dbcf117925bc686cacee46ca999f", "commitAfterChange": "f8e25255cc9b1c52f4c1874e15c63efdafe32091", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "signatureAfterChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "diff": ["-        catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "+        catch (AmbiguousNameException e) {", "+          setErrorStrings(node, className);", "+          throw new ExecutionError(\"ambiguous.name\", node);", "+        }", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, className);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }", "-              else { throw new ExecutionError(\"ambiguous.name\", node); }", "+              else {", "+                setErrorStrings(node, memberName.image());", "+                throw new ExecutionError(\"ambiguous.name\", node);", "+              }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9039289bd85e3bbe8bdb10385f2ab185", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "12b972c6351f6122675c003ccbc59ef481c89cda", "commitAfterChange": "b10686f6739b4554b283179f3edc2b09ee48a09a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @Override public TypeContext visit(VariableDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(VariableDeclaration node)", "diff": ["+      setErasedType(node, ts.erasedClass(initT));", "+      setErasedType(node, ts.erasedClass(t));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daac0ba64952332f71ec749e963d3261", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "8c59b6d09078dbcf117925bc686cacee46ca999f", "commitAfterChange": "f8e25255cc9b1c52f4c1874e15c63efdafe32091", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     @Override public Type visit(SimpleFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(SimpleFieldAccess node)", "diff": ["-      catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "+      catch (AmbiguousNameException e) {", "+        setErrorStrings(node, node.getFieldName());", "+        throw new ExecutionError(\"ambiguous.name\", node);", "+      }", "-        else { throw new ExecutionError(\"ambiguous.name\", node); }", "+        else {", "+          setErrorStrings(node, node.getFieldName());", "+          throw new ExecutionError(\"ambiguous.name\", node);", "+        }"]}], "num": 29567}
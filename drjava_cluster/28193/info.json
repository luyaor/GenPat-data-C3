{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce0ea81793b53f43d1d041eeadce4563", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c14d688b265d718df0d239bf327e67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ConfigFrame(MainFrame frame)", "signatureAfterChange": "   public ConfigFrame(MainFrame frame)", "diff": ["+    ", "+    Action applyAction = new AbstractAction(\"Apply\") {", "+      public void actionPerformed(ActionEvent e) {", "+        // Always save settings", "+        try {", "+//          _mainFrame.enableResetInteractions();", "+          saveSettings(); ", "+          _applyButton.setEnabled(false); ", "+          ", "+        }", "+        catch (IOException ioe) {", "+        }", "+      }", "+    };", "+", "+    _applyButton = new JButton(applyAction);", "+    _applyButton.setEnabled(false);", "+    ", "+    Action okAction = new AbstractAction(\"OK\") {", "+      public void actionPerformed(ActionEvent e) {", "+        // Always apply and save settings", "+        boolean successful = true;", "+        try {", "+//          _mainFrame.enableResetInteractions();", "+          successful = saveSettings();", "+        }", "+        catch (IOException ioe) {", "+          // oh well...", "+        }", "+        if (successful) _applyButton.setEnabled(false);", "+        ConfigFrame.this.setVisible(false);", "+      }", "+    };", "+    _okButton = new JButton(okAction);", "+", "+", "+    Action cancelAction = new AbstractAction(\"Cancel\") {", "+      public void actionPerformed(ActionEvent e) {", "+        cancel();", "+      }", "+    };", "+    _cancelButton = new JButton(cancelAction);", "+", "-    _fileOptionChooser.setDialogTitle(\"Select\");", "-    _fileOptionChooser.setApproveButtonText(\"Select\");", "-    _fileOptionChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);", "-    _fileOptionChooser.setFileFilter(ClassPathFilter.ONLY);", "-    _browserChooser.setDialogTitle(\"Select Web Browser\");", "-    _browserChooser.setApproveButtonText(\"Select\");", "-    _browserChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);", "+    ", "-    _dirChooser.setSelectedFile(_getWorkDir());", "-    _dirChooser.setDialogTitle(\"Select\");", "-    _dirChooser.setApproveButtonText(\"Select\");", "-    _dirChooser.setMultiSelectionEnabled(false);", "+  ", "-    _createTree();", "+    /* Create tree and initialize tree. */", "+    _rootNode = new PanelTreeNode(\"Preferences\");", "+    _treeModel = new DefaultTreeModel(_rootNode);", "+    _tree = new JTree(_treeModel);", "+    ", "+    _initTree();", "+    ", "+    /* Create Panels. */", "-    /*", "-    _splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,", "-                                treeScroll,", "-                                _mainPanel);", "-    cp.add(_splitPane, BorderLayout.CENTER);", "-    */", "-", "-    Action okAction = new AbstractAction(\"OK\") {", "-      public void actionPerformed(ActionEvent e) {", "-        // Always apply and save settings", "-        boolean successful = true;", "-        try {", "-//          _mainFrame.enableResetInteractions();", "-          successful = saveSettings();", "-        }", "-        catch (IOException ioe) {", "-          // oh well...", "-        }", "-        if (successful) {", "-          _applyButton.setEnabled(false);", "-        }", "-        ConfigFrame.this.setVisible(false);", "-      }", "-    };", "-    _okButton = new JButton(okAction);", "-", "-    Action applyAction = new AbstractAction(\"Apply\") {", "-      public void actionPerformed(ActionEvent e) {", "-        // Always save settings", "-        try {", "-//          _mainFrame.enableResetInteractions();", "-          saveSettings(); ", "-          _applyButton.setEnabled(false); ", "-  ", "-        }", "-        catch (IOException ioe) {", "-        }", "-      }", "-    };", "-    _applyButton = new JButton(applyAction);", "-    _applyButton.setEnabled(false);", "-", "-    Action cancelAction = new AbstractAction(\"Cancel\") {", "-      public void actionPerformed(ActionEvent e) {", "-        cancel();", "-      }", "-    };", "-    _cancelButton = new JButton(cancelAction);", "-", "-    /* Now always saves settings...", "-    _saveSettingsButton = new JButton(\"Save Settings\");", "-    _saveSettingsButton.setToolTipText(\"Save all settings to disk for future sessions.\");", "-    _saveSettingsButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        saveSettings();", "-      }", "-    });", "-    */", "-//    int width = getWidth() / 4;", "-//    System.out.println(\"width: \" + getWidth());", "-//    System.out.println(\"width for divider: \" + width);", "-//    _splitPane.setDividerLocation(width);", "-//    _mainPanel.setPreferredSize(new Dimension(getWidth() - width,", "-//                                              _splitPane.getHeight()));", "+", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f43ca0b556ae3415a755c10a504632d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["+   */", "+  public FindReplaceDialog(MainFrame frame, SingleDisplayModel model) {", "+    super(frame, \"Find/Replace\");", "+    _model = model;", "+    _mainframe = frame;", "+", "+    int i = WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;", "+    //i = this.WHEN_FOCUSED;", "+    //i = this.WHEN_IN_FOCUSED_WINDOW;", "+    //InputMap im = _mainPanel.getInputMap(i);", "+    InputMap im = _findField.getInputMap(i);", "+    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), \"Close\");", "+    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), \"Find Next\");", "+    //ActionMap am = _mainPanel.getActionMap();", "+    ActionMap am = _findField.getActionMap();", "+    am.put(\"Find Next\", _findNextAction);", "+    am.put(\"Close\", new AbstractAction(\"Close\") {", "+      public void actionPerformed(ActionEvent ae) {", "+        _frame.getCurrentDefPane().requestFocus();", "+        _close();", "+      }", "+    });", "+", "+    // Setup color listeners.", "+    new ForegroundColorListener(_findField);", "+    new BackgroundColorListener(_findField);", "+    new ForegroundColorListener(_replaceField);", "+    new BackgroundColorListener(_replaceField);", "+", "+    /********* Lower Button Panel Initialization ********/", "+    _findNextButton = new JButton(_findNextAction);", "+    _replaceButton = new JButton(_replaceAction);", "+    _replaceFindButton = new JButton(_replaceFindAction);", "+    _replaceAllButton = new JButton(_replaceAllAction);", "+    //_closeButton = new JButton(_closeAction);", "+    _message = new JLabel(\"\"); // JL", "+", "+    _replaceAction.setEnabled(false);", "+    _replaceFindAction.setEnabled(false);", "+", "+    // set up the layout", "+    JPanel buttons = new JPanel();", "+    buttons.setLayout(new GridLayout(1,0,5,0));", "+    buttons.add(_findNextButton);", "+    buttons.add(_replaceButton);", "+    buttons.add(_replaceFindButton);", "+    buttons.add(_replaceAllButton);", "+    //buttons.add(_closeButton);", "+", "+    /******** Text Field Initializations ********/", "+    // Sets font for the \"Find\" field", "+    Font font = DrJava.getConfig().getSetting(FONT_MAIN);", "+    setFieldFont(font);", "+", "+    // Create the Labels", "+    JLabel findLabel = new JLabel(\"Find\", SwingConstants.LEFT);", "+    //findLabel.setLabelFor(_findField);", "+    findLabel.setHorizontalAlignment(SwingConstants.LEFT);", "+", "+    JLabel replaceLabel = new JLabel(\"Replace\", SwingConstants.LEFT);", "+    // replaceLabel.setLabelFor(_replaceField);", "+    replaceLabel.setHorizontalAlignment(SwingConstants.LEFT);", "+", "+    //JLabel matchLabel = new JLabel(\"Match\", SwingConstants.LEFT); // JL", "+    //matchLabel.setHorizontalAlignment(SwingConstants.LEFT);  // JL", "+", "+    // need separate label and field panels so that the find and", "+    // replace textfields line up", "+", "+    _labelPanel = new JPanel(new GridLayout(2,1));", "+    // _labelPanel.setLayout(new BoxLayout(_labelPanel, BoxLayout.Y_AXIS));", "+", "+    //_labelPanel.add(Box.createGlue());", "+    _labelPanel.add(findLabel);", "+    _labelPanel.add(replaceLabel);", "+    // _labelPanel.add(matchLabel); // JL", "+    _labelPanel.setBorder(new EmptyBorder(0,5,0,5)); // 5 pix on sides", "+", "+    _machine = new FindReplaceMachine(_model.getDocumentIterator());", "+    ", "+    _updateMachine();", "+    /******** Listeners for the right-hand check boxes ********/", "+    ", "+    MatchCaseListener mcl = new MatchCaseListener();", "+    _matchCase = new JCheckBox(\"Match Case\", DrJava.getConfig().getSetting(OptionConstants.FIND_MATCH_CASE));", "+    _machine.setMatchCase(DrJava.getConfig().getSetting(OptionConstants.FIND_MATCH_CASE));", "+    _matchCase.addItemListener(mcl);", "+", "+    SearchBackwardsListener bsl = new SearchBackwardsListener();", "+    _searchBackwards = new JCheckBox(\"Search Backwards\", DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "+    _machine.setSearchBackwards(DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "+    _searchBackwards.addItemListener(bsl);", "+//    _searchBackwards.setMargin(new Insets(0,4,0,3));", "+", "+    SearchAllDocumentsListener sadl= new SearchAllDocumentsListener();", "+    _searchAllDocuments = new JCheckBox(\"Search All Documents\", DrJava.getConfig().getSetting(OptionConstants.FIND_ALL_DOCUMENTS));", "+    _machine.setSearchAllDocuments(DrJava.getConfig().getSetting(OptionConstants.FIND_ALL_DOCUMENTS));", "+    _searchAllDocuments.addItemListener(sadl);", "+", "+    MatchWholeWordListener mwwl = new MatchWholeWordListener();", "+    _matchWholeWord = new JCheckBox(\"Whole Word\", DrJava.getConfig().getSetting(OptionConstants.FIND_WHOLE_WORD));// new JRadioButton(\"Whole Word\"); // JL", "+    if (DrJava.getConfig().getSetting(OptionConstants.FIND_WHOLE_WORD)) _machine.setMatchWholeWord();", "+    else  _machine.setFindAnyOccurrence();", "+    _matchWholeWord.addItemListener(mwwl);", "+    _matchCase.setPreferredSize(_matchWholeWord.getPreferredSize());", "+", "+    //FindAnyOccurrenceListener faol = new FindAnyOccurrenceListener(); // JL", "+    //_findAnyOccurrence = new JRadioButton(\"Any Occurrence\"); // JL", "+    //_findAnyOccurrence.addActionListener(faol); // JL", "+", "+    this.removeAll(); // actually, override the behavior of TabbedPanel", "+", "+", "+    /******** Initialize the panels containing the checkboxes ********/", "+    // remake closePanel", "+    _closePanel = new JPanel(new BorderLayout());", "+    _closePanel.add(_closeButton, BorderLayout.NORTH);", "+", "+    _lowerCheckPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    _lowerCheckPanel.add(_matchWholeWord);", "+    _lowerCheckPanel.add(_searchAllDocuments); // JL (added)", "+    //_lowerCheckPanel.add(_findAnyOccurrence); // JL", "+    // add radiobuttons to the buttongroup", "+    //_radioButtonGroup = new ButtonGroup(); // JL", "+    //_radioButtonGroup.add(_matchWholeWord); // JL", "+    //_radioButtonGroup.add(_findAnyOccurrence); // JL", "+", "+    _matchCaseAndClosePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    _matchCaseAndClosePanel.add(_matchCase); // JL", "+    _matchCaseAndClosePanel.add(_searchBackwards); // JL", "+    //_matchCaseAndClosePanel.add(_searchAllDocuments); // JL - moved to _radioButtonGroup", "+    //_matchCaseAndClosePanel.add(_matchWholeWord);", "+    //_matchCaseAndClosePanel.add(_findAnyOccurrence);", "+    _matchCaseAndClosePanel.add(_closePanel);", "+    //_findAnyOccurrence.setSelected(true); // JL", "+", "+", "+    /******** Set up the Panel containing the Text Fields ********/", "+    //_rightPanel = new JPanel(new GridLayout(1,2,5,0));", "+    JPanel midPanel = new JPanel(new GridLayout(2,1));", "+    JPanel farRightPanel = new JPanel(new GridLayout(2,1));", "+    midPanel.add(wrap(_findField));", "+    midPanel.add(wrap(_replaceField));", "+//    midPanel.add(wrap(_message)); // JL", "+    // midPanel.add(wrap(_lowerCheckPanel)); // JL", "+", "+    /******** Set up the Panel containing both rows of checkboxes ********/", "+    farRightPanel.add(_matchCaseAndClosePanel);", "+    farRightPanel.add(_lowerCheckPanel); // JL", "+    //farRightPanel.add(_message); // JL", "+", "+", "+    /******** Set upt the Panel containing the two above main panels ********/", "+    _rightPanel = new JPanel(new BorderLayout(5, 0));", "+    _rightPanel.add(midPanel, BorderLayout.CENTER);", "+    _rightPanel.add(farRightPanel, BorderLayout.EAST);", "+    //_rightPanel.add(_lowerCheckPanel, BorderLayout.SOUTH);", "+", "+", "+    /******* Put all the main panels onto the Find/Replace tab ********/", "+    hookComponents(this,_rightPanel,_labelPanel,buttons);", "+", "+", "+    _findField.addActionListener(_findNextAction);", "+", "+", "+    /******** Set the Tab order ********/", "+    _findField.setNextFocusableComponent(_replaceField);", "+    _replaceField.setNextFocusableComponent(_matchCase);", "+    _matchCase.setNextFocusableComponent(_searchBackwards);", "+    _searchBackwards.setNextFocusableComponent(_matchWholeWord); // JL (edited)", "+    _matchWholeWord.setNextFocusableComponent(_searchAllDocuments); // JL (edited)", "+    _searchAllDocuments.setNextFocusableComponent(_findNextButton); // JL (edited)", "+    //_findAnyOccurrence.setNextFocusableComponent(_findNextButton); // JL", "+    _replaceAllButton.setNextFocusableComponent(_closeButton);", "+    _closeButton.setNextFocusableComponent(_findField);", "+", "+    // DocumentListener that keeps track of changes in the find field.", "+    _findField.getDocument().addDocumentListener(new DocumentListener() {", "+      ", "+      /**If attributes in the find field have changed, gray out \"Replace\" & \"Replace and Find Next\" buttons.", "+       * @param e the event caught by this listener", "+       */", "+      public void changedUpdate(DocumentEvent e) { updateHelper(); }", "+", "+      /** If text has been changed in the find field, gray out \"Replace\" & \"Replace and Find Next\" buttons.", "+       *  @param e the event caught by this listener", "+       */", "+      public void insertUpdate(DocumentEvent e) { updateHelper(); }", "+      ", "+      /** If text has been changed in the find field, gray out \"Replace\" & \"Replace and Find Next\" buttons.", "+       *  @param e the event caught by this listener", "+       */", "+      public void removeUpdate(DocumentEvent e) { updateHelper(); }", "+      ", "+      private void updateHelper() {", "+        _machine.makeCurrentOffsetStart();", "+        _replaceAction.setEnabled(false);", "+        _replaceFindAction.setEnabled(false);", "+        _machine.positionChanged();", "+        if (_findField.getText().equals(\"\")) _replaceAllAction.setEnabled(false);", "+        else                                 _replaceAllAction.setEnabled(true);", "+      }", "+    });", "+  }", "-   */", "-  public FindReplaceDialog(MainFrame frame, SingleDisplayModel model) {", "-    super(frame, \"Find/Replace\");", "-    _model = model;", "-    _mainframe = frame;", "-    int i = WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;", "-    //i = this.WHEN_FOCUSED;", "-    //i = this.WHEN_IN_FOCUSED_WINDOW;", "-    //InputMap im = _mainPanel.getInputMap(i);", "-    InputMap im = _findField.getInputMap(i);", "-    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), \"Close\");", "-    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), \"Find Next\");", "-    //ActionMap am = _mainPanel.getActionMap();", "-    ActionMap am = _findField.getActionMap();", "-    am.put(\"Find Next\", _findNextAction);", "-    am.put(\"Close\", new AbstractAction(\"Close\") {", "-      public void actionPerformed(ActionEvent ae) {", "-        _frame.getCurrentDefPane().requestFocus();", "-        _close();", "-      }", "-    });", "-", "-    // Setup color listeners.", "-    new ForegroundColorListener(_findField);", "-    new BackgroundColorListener(_findField);", "-    new ForegroundColorListener(_replaceField);", "-    new BackgroundColorListener(_replaceField);", "-", "-    /********* Lower Button Panel Initialization ********/", "-    _findNextButton = new JButton(_findNextAction);", "-    _replaceButton = new JButton(_replaceAction);", "-    _replaceFindButton = new JButton(_replaceFindAction);", "-    _replaceAllButton = new JButton(_replaceAllAction);", "-    //_closeButton = new JButton(_closeAction);", "-    _message = new JLabel(\"\"); // JL", "-", "-    _replaceAction.setEnabled(false);", "-    _replaceFindAction.setEnabled(false);", "-", "-    // set up the layout", "-    JPanel buttons = new JPanel();", "-    buttons.setLayout(new GridLayout(1,0,5,0));", "-    buttons.add(_findNextButton);", "-    buttons.add(_replaceButton);", "-    buttons.add(_replaceFindButton);", "-    buttons.add(_replaceAllButton);", "-    //buttons.add(_closeButton);", "-", "-    /******** Text Field Initializations ********/", "-    // Sets font for the \"Find\" field", "-    Font font = DrJava.getConfig().getSetting(FONT_MAIN);", "-    setFieldFont(font);", "-", "-    // Create the Labels", "-    JLabel findLabel = new JLabel(\"Find\", SwingConstants.LEFT);", "-    //findLabel.setLabelFor(_findField);", "-    findLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-", "-    JLabel replaceLabel = new JLabel(\"Replace\", SwingConstants.LEFT);", "-    // replaceLabel.setLabelFor(_replaceField);", "-    replaceLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-", "-    //JLabel matchLabel = new JLabel(\"Match\", SwingConstants.LEFT); // JL", "-    //matchLabel.setHorizontalAlignment(SwingConstants.LEFT);  // JL", "-", "-    // need separate label and field panels so that the find and", "-    // replace textfields line up", "-", "-    _labelPanel = new JPanel(new GridLayout(2,1));", "-    // _labelPanel.setLayout(new BoxLayout(_labelPanel, BoxLayout.Y_AXIS));", "-", "-    //_labelPanel.add(Box.createGlue());", "-    _labelPanel.add(findLabel);", "-    _labelPanel.add(replaceLabel);", "-    // _labelPanel.add(matchLabel); // JL", "-    _labelPanel.setBorder(new EmptyBorder(0,5,0,5)); // 5 pix on sides", "-", "-    ", "-    _machine = new FindReplaceMachine(_model.getDocumentIterator());", "-", "-", "-    _updateMachine();", "-    /******** Listeners for the right-hand check boxes ********/", "-    ", "-    MatchCaseListener mcl = new MatchCaseListener();", "-    _matchCase = new JCheckBox(\"Match Case\", DrJava.getConfig().getSetting(OptionConstants.FIND_MATCH_CASE));", "-    _machine.setMatchCase(DrJava.getConfig().getSetting(OptionConstants.FIND_MATCH_CASE));", "-    _matchCase.addItemListener(mcl);", "-", "-    SearchBackwardsListener bsl = new SearchBackwardsListener();", "-    _searchBackwards = new JCheckBox(\"Search Backwards\", DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "-    _machine.setSearchBackwards(DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "-    _searchBackwards.addItemListener(bsl);", "-//    _searchBackwards.setMargin(new Insets(0,4,0,3));", "-", "-    SearchAllDocumentsListener sadl= new SearchAllDocumentsListener();", "-    _searchAllDocuments = new JCheckBox(\"Search All Documents\", DrJava.getConfig().getSetting(OptionConstants.FIND_ALL_DOCUMENTS));", "-    _machine.setSearchAllDocuments(DrJava.getConfig().getSetting(OptionConstants.FIND_ALL_DOCUMENTS));", "-    _searchAllDocuments.addItemListener(sadl);", "-", "-    MatchWholeWordListener mwwl = new MatchWholeWordListener();", "-    _matchWholeWord = new JCheckBox(\"Whole Word\", DrJava.getConfig().getSetting(OptionConstants.FIND_WHOLE_WORD));// new JRadioButton(\"Whole Word\"); // JL", "-    if(DrJava.getConfig().getSetting(OptionConstants.FIND_WHOLE_WORD)){", "-      _machine.setMatchWholeWord();", "-    }else{", "-      _machine.setFindAnyOccurrence();", "-    }", "-    _matchWholeWord.addItemListener(mwwl);", "-    _matchCase.setPreferredSize(_matchWholeWord.getPreferredSize());", "-", "-    //FindAnyOccurrenceListener faol = new FindAnyOccurrenceListener(); // JL", "-    //_findAnyOccurrence = new JRadioButton(\"Any Occurrence\"); // JL", "-    //_findAnyOccurrence.addActionListener(faol); // JL", "-", "-    this.removeAll(); // actually, override the behavior of TabbedPanel", "-", "-", "-    /******** Initialize the panels containing the checkboxes ********/", "-    // remake closePanel", "-    _closePanel = new JPanel(new BorderLayout());", "-    _closePanel.add(_closeButton, BorderLayout.NORTH);", "-", "-    _lowerCheckPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "-    _lowerCheckPanel.add(_matchWholeWord);", "-    _lowerCheckPanel.add(_searchAllDocuments); // JL (added)", "-    //_lowerCheckPanel.add(_findAnyOccurrence); // JL", "-    // add radiobuttons to the buttongroup", "-    //_radioButtonGroup = new ButtonGroup(); // JL", "-    //_radioButtonGroup.add(_matchWholeWord); // JL", "-    //_radioButtonGroup.add(_findAnyOccurrence); // JL", "-", "-    _matchCaseAndClosePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "-    _matchCaseAndClosePanel.add(_matchCase); // JL", "-    _matchCaseAndClosePanel.add(_searchBackwards); // JL", "-    //_matchCaseAndClosePanel.add(_searchAllDocuments); // JL - moved to _radioButtonGroup", "-    //_matchCaseAndClosePanel.add(_matchWholeWord);", "-    //_matchCaseAndClosePanel.add(_findAnyOccurrence);", "-    _matchCaseAndClosePanel.add(_closePanel);", "-    //_findAnyOccurrence.setSelected(true); // JL", "-", "-", "-    /******** Set up the Panel containing the Text Fields ********/", "-    //_rightPanel = new JPanel(new GridLayout(1,2,5,0));", "-    JPanel midPanel = new JPanel(new GridLayout(2,1));", "-    JPanel farRightPanel = new JPanel(new GridLayout(2,1));", "-    midPanel.add(wrap(_findField));", "-    midPanel.add(wrap(_replaceField));", "-//    midPanel.add(wrap(_message)); // JL", "-    // midPanel.add(wrap(_lowerCheckPanel)); // JL", "-", "-    /******** Set up the Panel containing both rows of checkboxes ********/", "-    farRightPanel.add(_matchCaseAndClosePanel);", "-    farRightPanel.add(_lowerCheckPanel); // JL", "-    //farRightPanel.add(_message); // JL", "-", "-", "-    /******** Set upt the Panel containing the two above main panels ********/", "-    _rightPanel = new JPanel(new BorderLayout(5, 0));", "-    _rightPanel.add(midPanel, BorderLayout.CENTER);", "-    _rightPanel.add(farRightPanel, BorderLayout.EAST);", "-    //_rightPanel.add(_lowerCheckPanel, BorderLayout.SOUTH);", "-", "-", "-    /******* Put all the main panels onto the Find/Replace tab ********/", "-    hookComponents(this,_rightPanel,_labelPanel,buttons);", "-", "-", "-    _findField.addActionListener(_findNextAction);", "-", "-", "-    /******** Set the Tab order ********/", "-    _findField.setNextFocusableComponent(_replaceField);", "-    _replaceField.setNextFocusableComponent(_matchCase);", "-    _matchCase.setNextFocusableComponent(_searchBackwards);", "-    _searchBackwards.setNextFocusableComponent(_matchWholeWord); // JL (edited)", "-    _matchWholeWord.setNextFocusableComponent(_searchAllDocuments); // JL (edited)", "-    _searchAllDocuments.setNextFocusableComponent(_findNextButton); // JL (edited)", "-    //_findAnyOccurrence.setNextFocusableComponent(_findNextButton); // JL", "-    _replaceAllButton.setNextFocusableComponent(_closeButton);", "-    _closeButton.setNextFocusableComponent(_findField);", "-", "-    // DocumentListener that keeps track of changes in the find field.", "-    _findField.getDocument().addDocumentListener(new DocumentListener() {", "-      /**", "-       * If attributes in the find field have changed, gray out", "-       * \"Replace\" and \"Replace and Find Next\" buttons.", "-       * @param e the event caught by this listener", "-       */", "-      public void changedUpdate(DocumentEvent e) {", "-        _machine.makeCurrentOffsetStart();", "-        _replaceAction.setEnabled(false);", "-        _replaceFindAction.setEnabled(false);", "-        _machine.positionChanged();", "-        if (_findField.getText().equals(\"\"))", "-          _replaceAllAction.setEnabled(false);", "-        else", "-          _replaceAllAction.setEnabled(true);", "-      }", "-", "-      /**", "-       * If text has been inserted into the find field, gray out", "-       * \"Replace\" and \"Replace and Find Next\" buttons.", "-       * @param e the event caught by this listener", "-       */", "-      public void insertUpdate(DocumentEvent e) {", "-        _machine.makeCurrentOffsetStart();", "-        _replaceAction.setEnabled(false);", "-        _replaceFindAction.setEnabled(false);", "-        _machine.positionChanged();", "-        if (_findField.getText().equals(\"\"))", "-          _replaceAllAction.setEnabled(false);", "-        else", "-          _replaceAllAction.setEnabled(true);", "-      }", "-", "-      /**", "-       * If text has been deleted from the find field, gray out", "-       * \"Replace\" and \"Replace and Find Next\" buttons.", "-       * @param e the event caught by this listener", "-       */", "-      public void removeUpdate(DocumentEvent e) {", "-        _machine.makeCurrentOffsetStart();", "-        _replaceAction.setEnabled(false);", "-        _replaceFindAction.setEnabled(false);", "-        _machine.positionChanged();", "-        if (_findField.getText().equals(\"\"))", "-          _replaceAllAction.setEnabled(false);", "-        else", "-          _replaceAllAction.setEnabled(true);", "-      }", "-    });", "-  }"]}], "num": 28193}
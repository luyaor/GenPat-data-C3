{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85e9edf9463141a72b57b3984ca94396", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "356dbbf4e7a1776ab55d29fdc3ea2730", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "b751c38fc70d22454ab93b852de5dd5f6f16d1ba", "commitAfterChange": "25137aee8580e8df5512ad30c8f4503bd397d8af", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static File[] getToolsJarFiles(File toolsJar)", "signatureAfterChange": "   public static File[] getToolsJarFiles(File toolsJar)", "diff": ["-    String winPrograms = System.getenv(\"ProgramFiles\");", "-    if (winPrograms != null) {", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms, \"Java\")));", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms)));", "-    }", "-    else {  // in case the environment variables aren't set up properly", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "+    final String jv = System.getProperty(\"java.version\");", "+    if (!jv.startsWith(\"1.3\") && !jv.startsWith(\"1.4\")) {", "+      // in Java 1.3 and 1.4, getenv is deprecated and throws an exception,", "+      // so we cannot use it", "+      String winPrograms = System.getenv(\"ProgramFiles\");", "+      if (winPrograms != null) {", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms, \"Java\")));", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms)));", "+      }", "+      else {  // in case the environment variables aren't set up properly", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "+      }", "+      ", "+      String winSystem = System.getenv(\"SystemDrive\");", "+      if (winSystem != null) {", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem, \"Java\")));", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem)));", "+      }", "+      else { // in case the environment variables aren't set up properly", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "+        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "+      }", "-    String winSystem = System.getenv(\"SystemDrive\");", "-    if (winSystem != null) {", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem, \"Java\")));", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem)));", "-    }", "-    else { // in case the environment variables aren't set up properly", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "-      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "-    }", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b34849b4da49847aae7f089a05eb76d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "commitAfterChange": "5491f825d209840377d660c81134a657fe7ce675", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static File[] getToolsJarFiles(File toolsJar)", "signatureAfterChange": "   public static File[] getToolsJarFiles(File toolsJar)", "diff": ["-    // We must maintain insertion order, so that the first entries have priority;", "-    // at the same time, we want to eliminate duplicates so that the same tools.jar file", "-    // doesn't show up multiple times.", "+    /*", "+     * javaHomeParents is a set of (attempted) canonical paths that may not exist.", "+     * We must maintain insertion order, so that the first entries have priority;", "+     * at the same time, we want to eliminate duplicates so that the same tools.jar file", "+     * doesn't show up multiple times.", "+     */", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "+    ", "+    String winPrograms = System.getenv(\"ProgramFiles\");", "+    if (winPrograms != null) {", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms, \"Java\")));", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms)));", "+    }", "+    else {  // in case the environment variables aren't set up properly", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "+    }", "+", "+    String winSystem = System.getenv(\"SystemDrive\");", "+    if (winSystem != null) {", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem, \"Java\")));", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem)));", "+    }", "+    else { // in case the environment variables aren't set up properly", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "+    }", "+    ", "+    ", "+    /* javaHomes is a set of potential Java installations.  Each is an existing directory. */", "-    javaHomes.add(javaHome);", "+    ", "+    try {", "+      if (javaHome.isDirectory()) { javaHomes.add(javaHome); }", "+    }", "+    catch (SecurityException e) { /* ignore */ }", "+    ", "+    FileFilter matchHomes = new FileFilter() {", "+      public boolean accept(File f) {", "+        return f.isDirectory() && (f.getName().startsWith(prefix1) || f.getName().startsWith(prefix2));", "+      }", "+    };", "-      javaHomes.addAll(FileOps.getFilesInDir(parent, false, new FileFilter() {", "-        public boolean accept(File f) {", "-          String name = f.getName();", "-          return name.startsWith(prefix1) || name.startsWith(prefix2);", "+      try {", "+        File[] files = parent.listFiles(matchHomes);", "+        if (files != null) {", "+          for (File f : files) { javaHomes.add(f); }", "-      }));", "+      }", "+      catch (SecurityException e) { /* ignore */ }", "+    /* The result is a set of existing tools.jar files, (attempted) canonicalized */", "-    if (toolsJar.exists()) result.add(FileOps.getCanonicalFile(toolsJar));", "+    ", "+    try {", "+      if (toolsJar.isFile()) result.add(FileOps.getCanonicalFile(toolsJar));", "+    }", "+    catch (SecurityException e) { /* ignore */ }", "+    ", "-      File tools = new File(home, \"lib/tools.jar\");", "-      if (tools.exists()) { result.add(FileOps.getCanonicalFile(toolsJar)); }", "+      try {", "+        File tools = new File(home, \"lib/tools.jar\");", "+        if (tools.isFile()) { result.add(FileOps.getCanonicalFile(tools)); }", "+      }", "+      catch (SecurityException e) { /* ignore */ }"]}], "num": 19862}
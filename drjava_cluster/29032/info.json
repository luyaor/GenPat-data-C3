{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9d99d3cfccf9ed353b6124082732797", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33d5e96d356873aed6234295d913241f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public synchronized void startUp() throws DebugException", "signatureAfterChange": "   public void startUp() throws DebugException", "diff": ["-  public synchronized void startUp() throws DebugException {", "+  public /* synchronized */ void startUp() throws DebugException {", "-          // TODO: holding a lock (this) while sleeping. try to release lock? (mgricken)", "-          // TODO: holding a lock (this) while sleeping. try to release lock? (mgricken)", "-          try { Thread.sleep(100); } // Give any temporary connection problems a chance to resolve", "+          try { Thread.sleep(500); } // Give any temporary connection problems a chance to resolve", "-      /* Move the following command to the end of the event queue so that it is done outside outside the readLock", "-       * held when this method is called from an InteractionsListener. */", "-      EventQueue.invokeLater(new Runnable() {", "-        public void run() { _model.getInteractionsModel().addListener(_watchListener); }", "-      });", "-      ", "+      _model.getInteractionsModel().addListener(_watchListener);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa13bcf88064b5d130e1b78ea4456b4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "5523fc1c8420b6c9512186f7b1faddd6cd1960a0", "commitAfterChange": "0e447714063de4343f51d85c5c1b4138c2abd929", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm,                       final FindResultsPanel panel)", "signatureAfterChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm,                       final FindResultsPanel panel)", "diff": ["-      EventQueue.invokeLater(new Runnable() {", "-        public void run() {", "+//      EventQueue.invokeLater(new Runnable() {", "+//        public void run() {", "-        }", "-      });", "+//        }", "+//      });"]}], "num": 29032}
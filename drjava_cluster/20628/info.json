{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3704873759ea7babd49bb462c8fd6d76", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f84ddf6a1fcdb32f8b013549d2cb75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["-        List    statements = p.parseStream();", "-        ListIterator    it = statements.listIterator();", "+        List<Node>   statements = p.parseStream();", "+        ListIterator<Node>   it = statements.listIterator();", "-          Visitor v = makeNameVisitor(nameVisitorContext, checkVisitorContext);", "-          Object o = n.acceptVisitor(v);", "-          if (o != null) {", "-            n = (Node)o;", "-          }", "+          NameVisitor nv = makeNameVisitor(nameVisitorContext, checkVisitorContext);", "+          Node o = n.acceptVisitor(nv);", "+          if (o != null) n = o;", "-          v = makeTypeChecker(checkVisitorContext);", "-          n.acceptVisitor(v);", "+          TypeChecker tc = makeTypeChecker(checkVisitorContext);", "+          n.acceptVisitor(tc);", "-          v = makeEvaluationVisitor(evalVisitorContext);", "-          result = n.acceptVisitor(v);", "+          EvaluationVisitor ev = makeEvaluationVisitor(evalVisitorContext);", "+          result = n.acceptVisitor(ev);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f6b9948bb11a43d966452c7106db65", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["-        List    statements = p.parseStream();", "-        ListIterator    it = statements.listIterator();", "+        List<Node>   statements = p.parseStream();", "+        ListIterator<Node>   it = statements.listIterator();", "-          Visitor v = makeNameVisitor(nameVisitorContext, checkVisitorContext);", "-          Object o = n.acceptVisitor(v);", "-          if (o != null) {", "-            n = (Node)o;", "-          }", "+          NameVisitor nv = makeNameVisitor(nameVisitorContext, checkVisitorContext);", "+          Node o = n.acceptVisitor(nv);", "+          if (o != null) n = o;", "-          v = makeTypeChecker(checkVisitorContext);", "-          n.acceptVisitor(v);", "+          TypeChecker tc = makeTypeChecker(checkVisitorContext);", "+          n.acceptVisitor(tc);", "-          v = makeEvaluationVisitor(evalVisitorContext);", "-          result = n.acceptVisitor(v);", "+          EvaluationVisitor ev = makeEvaluationVisitor(evalVisitorContext);", "+          result = n.acceptVisitor(ev);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a9051f22dc8cbddc14882cb74ad4753", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "   public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["+   */", "+  public Object interpret(Reader r, String fname) throws InterpreterException {", "+    try {", "+      SourceCodeParser    p = parserFactory.createParser(r, fname);", "+      List<Node> statements = p.parseStream();", "+      ListIterator<Node> it = statements.listIterator();", "+      Object result = null;", "+      ", "+      while (it.hasNext()) {", "+        Node n = it.next();", "+        ", "+        NameVisitor nv = new NameVisitor(nameVisitorContext);", "+        Node o = n.acceptVisitor(nv);", "+        if (o != null) n = o;", "+        ", "+        TypeChecker tc = new TypeChecker(checkVisitorContext);", "+        n.acceptVisitor(tc);", "+        ", "+        evalVisitorContext.defineVariables", "+          (checkVisitorContext.getCurrentScopeVariables());", "+        ", "+        EvaluationVisitor ev = new EvaluationVisitor(evalVisitorContext);", "+        result = n.acceptVisitor(ev);", "+      }", "+      ", "+      return result;", "+    } catch (ExecutionError e) {", "+      throw new InterpreterException(e);", "+    } catch (ParseError e) {", "+      throw new InterpreterException(e);", "+  }", "-     */", "-    public Object interpret(Reader r, String fname) throws InterpreterException {", "-\ttry {", "-\t    SourceCodeParser p = parserFactory.createParser(r, fname);", "-\t    List    statements = p.parseStream();", "-\t    ListIterator    it = statements.listIterator();", "-\t    Object result = null;", "-", "-\t    while (it.hasNext()) {", "-\t\tNode n = (Node)it.next();", "-", "-\t\tVisitor v = new NameVisitor(nameVisitorContext);", "-\t\tObject o = n.acceptVisitor(v);", "-\t\tif (o != null) {", "-\t\t    n = (Node)o;", "-\t\t}", "-", "-\t\tv = new TypeChecker(checkVisitorContext);", "-\t\tn.acceptVisitor(v);", "-", "-\t\tevalVisitorContext.defineVariables", "-\t\t    (checkVisitorContext.getCurrentScopeVariables());", "-", "-\t\tv = new EvaluationVisitor(evalVisitorContext);", "-\t\tresult = n.acceptVisitor(v);", "-\t    }", "-", "-\t    return result;", "-\t} catch (ExecutionError e) {", "-\t    throw new InterpreterException(e);", "-\t} catch (ParseError e) {", "-\t    throw new InterpreterException(e);", "-\t}"]}], "num": 20628}
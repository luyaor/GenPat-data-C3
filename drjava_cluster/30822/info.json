{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5155aa6dc6369d950203f3ac38e488e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "314ca31326262034d41fb153dd8db44f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1b2c230a180a408e07fefa4999fd97bfd19485a5", "commitAfterChange": "f88a51007770d2637f5170b66e852db63e500083", "methodNumberBeforeChange": 273, "methodNumberAfterChange": 273, "signatureBeforeChange": "      public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["+    * in external process command lines. */", "-    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.master.jvm.args.combined\") {", "+    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.master.jvm.args.combined\",", "+                                                              \"This property contains all the JVM arguments passed \"+", "+                                                              \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "+                                                              \"programs in. The arguments from the \\\"JVM Args for \"+", "+                                                              \"Main JVM\\\" and the special -X arguments from \\\"Maximum \"+", "+                                                              \"Heap Size for Main JVM\\\" are combined.\") {", "-    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.slave.jvm.args.combined\") {", "+    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.slave.jvm.args.combined\",", "+                                                              \"This property contains all the JVM arguments passed \"+", "+                                                              \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "+                                                              \"programs in. The arguments from the \\\"JVM Args for \"+", "+                                                              \"Slave JVM\\\" and the special -X arguments from \\\"Maximum \"+", "+                                                              \"Heap Size for Main JVM\\\" are combined.\") {", "-    }));", "+    }, ", "+                                                                  \"Returns the current document in DrJava.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-    }));", "+    },", "+                                                                  \"Returns the current working directory of DrJava.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which output should be relative\\\"\"));", "-    }));", "-    ", "+    },", "+                                                                  \"Returns the working directory of the DrJava master JVM.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which output should be relative\\\"\"));", "+", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.all.files\", File.pathSeparator, DEF_DIR) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.all.files\", File.pathSeparator, DEF_DIR,", "+                                                                      \"Returns a list of all files open in DrJava.\\n\"+", "+                                                                      \"Optional attributes:\\n\"+", "+                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.project.files\", File.pathSeparator, DEF_DIR) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.project.files\", File.pathSeparator, DEF_DIR,", "+                                                                      \"Returns a list of all files open in DrJava that belong \"+", "+                                                                      \"to a project and are underneath the project root.\\n\"+", "+                                                                      \"Optional attributes:\\n\"+", "+                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.included.files\", File.pathSeparator, DEF_DIR) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.included.files\", File.pathSeparator, DEF_DIR,", "+                                                                      \"Returns a list of all files open in DrJava that are \"+", "+                                                                      \"not underneath the project root but are included in \"+", "+                                                                      \"the project.\\n\"+", "+                                                                      \"Optional attributes:\\n\"+", "+                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.external.files\", File.pathSeparator, DEF_DIR) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.external.files\", File.pathSeparator, DEF_DIR,", "+                                                                      \"Returns a list of all files open in DrJava that are \"+", "+                                                                      \"not underneath the project root and are not included in \"+", "+                                                                      \"the project.\\n\"+", "+                                                                      \"Optional attributes:\\n\"+", "+                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.time.millis\") {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.time.millis\",", "+                                                              \"Returns the current time in milliseconds since 01/01/1970, \"+", "+                                                              \"unless other format is specified by the fmt attribute.\\n\"+", "+                                                              \"Optional attributes:\\n\"+", "+                                                              \"\\tfmt=\\\"full\\\" or \\\"long\\\" or \\\"medium\\\" or \\\"short\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"if\") {", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"if\",", "+                                                             \"If the cond attribute evaluates to true, returns \"+", "+                                                             \"the evaluation of the then attribute, otherwise \"+", "+                                                             \"the evaluation of the else attribute.\\n\"+", "+                                                             \"Required attribute:\\n\"+", "+                                                             \"\\tcond=\\\"<string evaluating to true of false>\\\"\\n\"+", "+                                                             \"Optional attributes:\\n\"+", "+                                                             \"\\tthen=\\\"<evaluated if true>\\\"\\n\"+", "+                                                             \"\\telse=\\\"<evaluated if false>\\\"\") {", "+        if (_attributes.get(\"cond\")==null) {", "+          _value = \"(if Error...)\";", "+          return;", "+        }", "-          _value = \"Error. cond not set to true or false.\";", "+          _value = \"(if Error...)\";", "-        _attributes.put(\"cond\", \"\");", "+        _attributes.put(\"cond\", null);", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"tmpfile\") {", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"tmpfile\",", "+                                                             \"Creates a temporary file and returns the name of it.\\n\"+", "+                                                             \"Optional attributes:\\n\"+", "+                                                             \"\\tname=\\\"<name for temp file>\\\"\\n\"+", "+                                                             \"\\tdir=\\\"<dir for temp file>\\\"\\n\"+", "+                                                             \"\\tkeep=\\\"<true if the file should not be erased>\\\"\\n\"+", "+                                                             \"\\tcontent=\\\"<text to go into the file>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"input\", \"(User Input...)\") {", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"input\", \"(User Input...)\",", "+                                                             \"Get an input string from the user.\\n\"+", "+                                                             \"Optional attributes:\\n\"+", "+                                                             \"\\tprompt=\\\"<prompt to display>\\\"\\n\"+", "+                                                             \"\\tdefault=\\\"<suggestion to the user>\\\"\") {", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new RecursiveFileListProperty(\"find\", File.pathSeparator, DEF_DIR, DEF_DIR));", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new RecursiveFileListProperty(\"find\", File.pathSeparator, DEF_DIR, DEF_DIR,", "+                                                                        \"Return a list of files found in the starting dir.\\n\"+", "+                                                                        \"Optional attributes:\\n\"+", "+                                                                        \"\\tsep=\\\"<separator between files>\\\"\\n\"+", "+                                                                        \"\\tdir=\\\"<dir where to start>\\\"\\n\"+", "+                                                                        \"\\trel=\\\"<dir to which the files are relative>\\\"\\n\"+", "+                                                                        \"\\tfilter=\\\"<filter, like *.txt, for files to list>\\\"\\n\"+", "+                                                                        \"\\tdirfilter=\\\"<filter for which dirs to recurse>\\\"\"));", "+", "+    // XML properties, correspond to XMLConfig", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"xml.in\", \"(XML Input...)\",", "+                                                             \"Read data from an XML file.\\n\"+", "+                                                             \"Required attributes:\\n\"+", "+                                                             \"\\tfile=\\\"<file with the XML>\\\"\\n\"+", "+                                                             \"\\tpath=\\\"<path into the XML tree>\\\"\\n\"+", "+                                                             \"\\tdefault=\\\"<default value if not found>\\\"\\n\"+", "+                                                             \"\\tmulti=\\\"<true if multiple values are allowed>\\\"\\n\"+", "+                                                             \"\\tsep=\\\"<separator between results>\\\"\") {", "+      public String toString() {", "+        return \"(XML Input...)\";", "+      }", "+      public void update() {", "+        String xmlfile = _attributes.get(\"file\");", "+        String xmlpath = _attributes.get(\"path\");", "+        String defval = _attributes.get(\"default\");", "+        String multi = _attributes.get(\"multi\");", "+        String sep = _attributes.get(\"sep\");", "+        if ((xmlfile==null) ||", "+            (xmlpath==null) ||", "+            (defval==null)) {", "+          _value = \"(XML Input Error...)\";", "+          return;", "+        }", "+        try {", "+          File f = new File(xmlfile);", "+          if (!f.exists()) {", "+            _value = defval;", "+            return;", "+          }", "+          XMLConfig xc = new XMLConfig(f);", "+          List<String> values = xc.getMultiple(xmlpath);", "+          if (!\"true\".equals(multi.toLowerCase())) {", "+            if (values.size()!=1) {", "+              _value = defval;", "+              return;", "+            }", "+            _value = values.get(0);", "+            return;", "+          }", "+          StringBuilder sb = new StringBuilder();", "+          for (String v: values) {", "+            sb.append(sep);", "+            sb.append(v);", "+          }", "+          _value = sb.toString().substring(1);", "+        }", "+        catch(XMLConfigException xce) {", "+          _value = defval;", "+        }", "+      }", "+      public String getCurrent() {", "+        invalidate();", "+        return super.getCurrent();", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"file\", null);", "+        _attributes.put(\"path\", null);", "+        _attributes.put(\"default\", null);", "+        _attributes.put(\"multi\", \"true\");", "+        _attributes.put(\"sep\", File.pathSeparator);", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"xml.out.action\", \"(XML Output...)\",", "+                                                             \"Write data to an XML file. Since this is an \"+", "+                                                             \"action, it will not produce any output, but it will \"+", "+                                                             \"write to the XML file.\\n\"+", "+                                                             \"Required attributes:\\n\"+", "+                                                             \"\\tfile=\\\"<file with the XML>\\\"\\n\"+", "+                                                             \"\\tpath=\\\"<path into the XML tree>\\\"\\n\"+", "+                                                             \"\\tcontent=\\\"<value to write into the XML>\\\"\\n\"+", "+                                                             \"\\tappend=\\\"<true to append, false to overwrite existing>\\\"\") {", "+      public String toString() {", "+        return \"(XML Output...)\";", "+      }", "+      public void update() {", "+        String xmlfile = _attributes.get(\"file\");", "+        String xmlpath = _attributes.get(\"path\");", "+        String content = _attributes.get(\"content\");", "+        String append = _attributes.get(\"append\");", "+        if ((xmlfile==null) ||", "+            (xmlpath==null)) {", "+          _value = \"(XML Output Error...)\";", "+        }", "+        try {", "+          File f = new File(xmlfile);", "+          XMLConfig xc;", "+          if (f.exists()) { xc = new XMLConfig(f); }", "+          else { xc = new XMLConfig(); }", "+          xc.set(xmlpath, content, append.toLowerCase().equals(\"false\"));", "+          xc.save(xmlfile);", "+          _value = \"\";", "+        }", "+        catch(XMLConfigException xce) {", "+          _value = \"(XML Output Error...)\";", "+        }", "+      }", "+      public String getCurrent() {", "+        invalidate();", "+        return super.getCurrent();", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"file\", null);", "+        _attributes.put(\"path\", null);", "+        _attributes.put(\"content\", \"\");", "+        _attributes.put(\"append\", \"false\");", "+      }", "+    });", "+", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.mode\") {", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.mode\",", "+                                                               \"Evaluates to true if a project is loaded.\") {", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.changed\") {  //TODO: factor out repeated code!", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.changed\",", "+                                                               \"Evaluates to true if the project has been \"+", "+                                                               \"changed since the last save.\") {  //TODO: factor out repeated code!", "-    }));", "+    },", "+                                                                   \"Returns the current project file in DrJava.\\n\"+", "+                                                                   \"Optional attributes:\\n\"+", "+                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "+", "-    }));", "+    },", "+                                                                   \"Returns the current project file in DrJava.\\n\"+", "+                                                                   \"Optional attributes:\\n\"+", "+                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-    }));", "+    },", "+                                                                   \"Returns the current project root in DrJava.\\n\"+", "+                                                                   \"Optional attributes:\\n\"+", "+                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-    }));", "+    },", "+                                                                   \"Returns the current build directory in DrJava.\\n\"+", "+                                                                   \"Optional attributes:\\n\"+", "+                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-                                    _model.getBuildDirectory().getAbsolutePath()) {", "+                                    _model.getBuildDirectory().getAbsolutePath(),", "+                                    \"Returns the class files currently in the build directory.\") {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae689ed24b430d1f0634a11f965cd635", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "73b7f0a42ebcf824c132189e958d58c40bbacf0e", "commitAfterChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "methodNumberBeforeChange": 259, "methodNumberAfterChange": 260, "signatureBeforeChange": "      public void setUpDrJavaProperties()", "signatureAfterChange": "      public void setUpDrJavaProperties()", "diff": ["-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.file\") {", "-      public void update() {", "-        try {", "-          File f = FileOps.makeRelativeTo(_model.getActiveDocument().getRawFile(),", "-                                          new File(StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(_attributes.get(\"dir\"), PropertyMaps.ONLY, PropertyMaps.GET_CURRENT))));", "-          try {", "-            f = f.getCanonicalFile();", "-          }", "-          catch(IOException ioe) { }", "-          _value = edu.rice.cs.util.StringOps.escapeSpacesWith1bHex(f.toString());", "-        }", "-        catch(IOException e) { _value = \"Error.\"; }", "-        catch(SecurityException e) { _value = \"Error.\"; }", "-      }", "-      public void resetAttributes() {", "-        _attributes.clear();", "-        _attributes.put(\"dir\", DEF_DIR);", "-      }", "-    });", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.working.dir\") {", "-      public void update() {", "-        try {", "-          File f;", "-          if (_attributes.get(\"dir\").equals(\"/\")) {", "-            f = _model.getInteractionsModel().getWorkingDirectory().getAbsoluteFile();", "-            try {", "-              f = f.getCanonicalFile();", "-            }", "-            catch(IOException ioe) { }", "-            _value = edu.rice.cs.util.StringOps.escapeSpacesWith1bHex(f.toString());", "-          }", "-          else {", "-            f = FileOps.makeRelativeTo(_model.getInteractionsModel().getWorkingDirectory(),", "-                                       new File(StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(_attributes.get(\"dir\"), PropertyMaps.ONLY, PropertyMaps.GET_CURRENT))));", "-            _value = edu.rice.cs.util.StringOps.escapeSpacesWith1bHex(f.toString());", "-          }", "-        }", "-        catch(IOException e) { _value = \"Error.\"; }", "-        catch(SecurityException e) { _value = \"Error.\"; }", "-      }    ", "-      public void resetAttributes() {", "-        _attributes.clear();", "-        _attributes.put(\"dir\", \"/\");", "-      }", "-    });", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileProperty(\"drjava.current.file\", new Lambda<File,Void>() {", "+      public File apply(Void notUsed) { return _model.getActiveDocument().getRawFile(); }", "+    }));", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileProperty(\"drjava.working.dir\", new Lambda<File,Void>() {", "+      public File apply(Void notUsed) { return _model.getInteractionsModel().getWorkingDirectory(); }", "+    }));", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileProperty(\"drjava.master.working.dir\", new Lambda<File,Void>() {", "+      public File apply(Void notUsed) { return _model.getMasterWorkingDirectory(); }", "+    }));", "-      protected List<OpenDefinitionsDocument> getList() { return _model.getOpenDefinitionsDocuments(); }", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(OpenDefinitionsDocument odd: _model.getOpenDefinitionsDocuments()) {", "+          l.add(odd.getRawFile());", "+        }", "+        return l;", "+      }", "-      protected List<OpenDefinitionsDocument> getList() { return _model.getProjectDocuments(); }", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(OpenDefinitionsDocument odd: _model.getProjectDocuments()) {", "+          l.add(odd.getRawFile());", "+        }", "+        return l;", "+      }", "-      protected List<OpenDefinitionsDocument> getList() { return _model.getAuxiliaryDocuments(); }", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(OpenDefinitionsDocument odd: _model.getAuxiliaryDocuments()) {", "+          l.add(odd.getRawFile());", "+        }", "+        return l;", "+      }", "-      protected List<OpenDefinitionsDocument> getList() { return _model.getNonProjectDocuments(); }", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(OpenDefinitionsDocument odd: _model.getNonProjectDocuments()) {", "+          l.add(odd.getRawFile());", "+        }", "+        return l;", "+      }", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new DrJavaProperty(\"tmpfile\") {", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"if\") {", "+      public String toString() {", "+        invalidate();", "+        update();", "+        return _value;", "+      }", "+      public void update() {", "+        if (_attributes.get(\"cond\").toLowerCase().equals(\"true\")) {", "+          _value = _attributes.get(\"then\");", "+        }", "+        else if (_attributes.get(\"cond\").toLowerCase().equals(\"false\")) {", "+          _value = _attributes.get(\"else\");", "+        }", "+        else {", "+          _value = \"Error. cond not set to true or false.\";", "+          return;", "+        }", "+      }", "+      public String getCurrent() {", "+        invalidate();", "+        return super.getCurrent();", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"cond\", \"\");", "+        _attributes.put(\"then\", \"\");", "+        _attributes.put(\"else\", \"\");", "+      }", "+    });", "+        ", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"tmpfile\") {", "+        ", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"input\", \"(User Input...)\") {", "+      public String toString() {", "+        return \"(User Input...)\";", "+      }", "+      public void update() {", "+        String msg = _attributes.get(\"prompt\");", "+        if (msg==null) msg = \"Please enter text for the external process.\";", "+        String input = _attributes.get(\"default\");", "+        if (input==null) input = \"\";", "+        input = JOptionPane.showInputDialog(MainFrame.this, msg, input);", "+        if (input==null) input = _attributes.get(\"default\");", "+        if (input==null) input = \"\";", "+        _value = input;", "+      }", "+      public String getCurrent() {", "+        invalidate();", "+        return super.getCurrent();", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"prompt\", null);", "+        _attributes.put(\"default\", null);", "+      }", "+    });", "+    ", "+    // Project", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.mode\") {", "+      public void update() {", "+        long millis = System.currentTimeMillis();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "+        Boolean b = _model.isProjectActive();", "+        if (f.equals(\"int\")) {", "+          _value = b?\"1\":\"0\";", "+        }", "+        else if (f.equals(\"yes\")) {", "+          _value = b?\"yes\":\"no\";", "+        }", "+        else {", "+          _value = b.toString();", "+        }", "+      }", "+      ", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"fmt\", \"boolean\");", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.changed\") {", "+      public void update() {", "+        long millis = System.currentTimeMillis();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "+        Boolean b = _model.isProjectChanged();", "+        if (f.equals(\"int\")) {", "+          _value = b?\"1\":\"0\";", "+        }", "+        else if (f.equals(\"yes\")) {", "+          _value = b?\"yes\":\"no\";", "+        }", "+        else {", "+          _value = b.toString();", "+        }", "+      }", "+      ", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"fmt\", \"boolean\");", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileProperty(\"project.file\", new Lambda<File,Void>() {", "+      public File apply(Void notUsed) { return _model.getProjectFile(); }", "+    }));", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileProperty(\"project.main.class\", new Lambda<File,Void>() {", "+      public File apply(Void notUsed) { return _model.getMainClass(); }", "+    }));", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileProperty(\"project.root\", new Lambda<File,Void>() {", "+      public File apply(Void notUsed) { return _model.getProjectRoot(); }", "+    }));", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileProperty(\"project.build.dir\", new Lambda<File,Void>() {", "+      public File apply(Void notUsed) { return _model.getBuildDirectory(); }", "+    }));", "+    // TODO:", "+//    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.class.files\", File.pathSeparator, DEF_DIR) {", "+//      protected List<File> getList() { return _model.getClassFiles(); }", "+//      // make it lazy again!", "+//      public String toString() {", "+//        return _value;", "+//      }", "+//      public boolean isCurrent() { return false; }", "+//    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"DrJava\", \"drjava.all.files\"));"]}], "num": 30822}
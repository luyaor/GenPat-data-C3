{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9957c61e3e77aea52eb61f4bec35e8c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "023c763b92c247e3790fdf9f4f137c95", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "c056ab71f347d40179703642e25ff83ac78c70e0", "commitAfterChange": "6e6dc20e393a893a5d9ad55d0b971c8d23c8c73e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree(int indentLevel)", "signatureAfterChange": "   public void buildTree(int indentLevel)", "diff": ["-      rule23 = rule36,", "-      rule22 = new QuestionHasCharPrecedingOpenBrace(new char[] {'=',',','{'},rule23,rule24),  // Is this line an element of an array initializer?", "-      rule21 = rule36,", "-      rule20 = new QuestionStartAfterOpenBrace(rule21, rule22),  // does the preceding line end with an open brace?", "+      rule22 = new QuestionHasCharPrecedingOpenBrace(new char[] {'=',',','{'}, rule36, rule24),  // Is this line an element of an array initializer?", "+      rule20 = new QuestionStartAfterOpenBrace(rule36, rule22),  // does the preceding line end with an open curly brace?", "-      rule38 = new QuestionCurrLineStartsWith(\")\", rule30, rule15), // does current line start with ')'?", "-      rule14 = new QuestionNewParenPhrase(rule38, rule16),         // is current line new phrase after open paren?", "-      rule13 = new QuestionBraceIsParenOrBracket(rule14, rule17),  // toot of non-comment indent tree: is brace enclosing start of this line in { '(', '['}?  ", "+      // root of non-comment indent tree: is brace enclosing start of this line in { '(', '['}?  ", "+      rule38 = new ActionBracePlus(\"\"),", "+      rule14 = new QuestionNewParenPhrase(rule15, rule16),  // is current non ) line a new phrase after open paren?", "+      rule23 = new QuestionNewParenPhrase(rule30, rule38),  // is current ) line a new phrase after open paren?", "+      rule21 = new QuestionCurrLineStartsWith(\")\", rule23, rule14), // does current line start with ')'?", "+      rule13 = new QuestionBraceIsParenOrBracket(rule21, rule17),   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "582321ad307b1ca7b6a587016cafc269", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "d1e77e5d0818e6bb43ce09eb1ecec03bb76646fd", "commitAfterChange": "936df97bedea66175f36cae49ba74b17abf11e8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree(int indentLevel)", "signatureAfterChange": "   public void buildTree(int indentLevel)", "diff": ["+      rule45 = new QuestionPrevLineStartsJavaDocWithText(rule46, rule04),  // Prev line begins special javadoc comment?", "-      rule45 = new QuestionPrevLineStartsJavaDocWithText(rule46, rule04),  // Prev line begins special javadoc comment?", "+      rule49 = new ActionStartPrevLinePlusMultilinePreserve(new String[] { \"  * \\n\", \"  */\"}, 0, 4, 0, 4),", "+      rule50 = new QuestionPrevLineStartsJavaDocWithText(rule49, rule41),", "+", "+      rule03 = new QuestionCurrLineEmptyOrEnterPress(rule45, rule48),", "-      rule49 = new ActionStartPrevLinePlusMultilinePreserve(new String[] {\"  */\" }, 0, 4, 0, 4), ", "-      rule50 = new QuestionFollowedByStar(rule46, rule49),", "-      rule51 = new QuestionPrevLineStartsJavaDocWithText(rule50, rule42),", "-      rule03 = new QuestionCurrLineEmptyOrEnterPress((autoCloseComments? rule51 : rule45), rule48),", "-      rule02 = new QuestionPrevLineStartsComment(rule03, rule06),", "+//      rule49 = new ActionStartPrevLinePlusMultilinePreserve(new String[] {\"  */\" }, 0, 4, 0, 4), ", "+//      rule50 = new QuestionFollowedByStar(rule46, rule49),", "+//      rule51 = new QuestionPrevLineStartsJavaDocWithText(rule50, rule42),", "+      rule51 = new QuestionCurrLineEmpty(rule50, rule03), // autoClose: rule03 unnecessarily retests CurrentLineEmpty", "+      rule02 = new QuestionPrevLineStartsComment(autoCloseComments ? rule51 : rule03, rule06),"]}], "num": 2702}
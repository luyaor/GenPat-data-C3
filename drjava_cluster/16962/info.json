{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "899277a05c42113a860087c0580276d9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28ebb5138b315009f9fd1ff4c71f3680", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public void testAnonymousClassIndex() throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   public void testAnonymousClassIndex() throws BadLocationException, ClassNameNotFoundException", "diff": ["-    _defModel.insertString(0, NESTED_CLASSES_TEXT, null);", "+    _doc.insertString(0, NESTED_CLASSES_TEXT, null);", "-    exp    = 4;", "-    act   = _defModel._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr));", "-    assertEquals(\"index at \"+substr+\" exp=`\"+exp+\"`, act=`\"+act+\"`\", exp, act);", "+    exp = 4;", "+    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "+    try { act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); }", "+    finally { _doc.releaseWriteLock(); }", "+    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "-    exp    = 5;", "-    act   = _defModel._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr));", "-    assertEquals(\"index at \"+substr+\" exp=`\"+exp+\"`, act=`\"+act+\"`\", exp, act);", "+    exp = 5;", "+    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "+    try { act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); }", "+    finally { _doc.releaseWriteLock(); }", "+    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "-    exp    = 6;", "-    act   = _defModel._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr));", "-    assertEquals(\"index at \"+substr+\" exp=`\"+exp+\"`, act=`\"+act+\"`\", exp, act);", "+    exp = 6;", "+    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "+    try { act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); }", "+    finally { _doc.releaseWriteLock(); }", "+    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "-    exp    = 7;", "-    act   = _defModel._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr));", "-    assertEquals(\"index at \"+substr+\" exp=`\"+exp+\"`, act=`\"+act+\"`\", exp, act);", "+    exp = 7;", "+    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "+    try { act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); }", "+    finally { _doc.releaseWriteLock(); }", "+    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "-    exp    = 8;", "-    act   = _defModel._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr));", "-    assertEquals(\"index at \"+substr+\" exp=`\"+exp+\"`, act=`\"+act+\"`\", exp, act);", "+    exp = 8;", "+    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "+    try { act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); }", "+    finally { _doc.releaseWriteLock(); }", "+    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1be16c8dcbc94634eb6625c4709c177", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "4ddd7404761b70fbc7f3b729484fc360047df6c1", "commitAfterChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public void testAnonymousClassIndex() throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   public void testAnonymousClassIndex() throws BadLocationException, ClassNameNotFoundException", "diff": ["-   */", "+    */", "-    _doc.insertString(0, NESTED_CLASSES_TEXT, null);", "-    ", "-    String substr;", "-    int exp, act;", "-    substr = \"{ /*Test$4*/\";", "-    exp = 4;", "-//    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "-//    try { ", "-    act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "-    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "-    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          _doc.insertString(0, NESTED_CLASSES_TEXT, null);", "+          ", "+          String substr;", "+          int exp, act;", "+          substr = \"{ /*Test$4*/\";", "+          exp = 4;", "+          act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "+          assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "+          ", "-    substr = \"{ /*Test$5*/\";", "-    exp = 5;", "-//    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "-//    try { ", "-      act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "-    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "-    ", "-    substr = \"{ /*Test$6*/\";", "-    exp = 6;", "-//    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "-//    try { ", "-    act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "-    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "-    ", "-    substr = \"{ /*Test$7*/\";", "-    exp = 7;", "-//    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "-//    try { ", "-      act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "-    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "-    ", "-    substr = \"{ /*Test$8*/\";", "-    exp = 8;", "-//    _doc.acquireWriteLock();  // implicitly locks the _reduced model", "-//    try { ", "-    act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "-    assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "+          substr = \"{ /*Test$5*/\";", "+          exp = 5;", "+          act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "+          assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "+          ", "+          substr = \"{ /*Test$6*/\";", "+          exp = 6;", "+          act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "+          assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "+          ", "+          substr = \"{ /*Test$7*/\";", "+          exp = 7;", "+          act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "+          assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "+          ", "+          substr = \"{ /*Test$8*/\";", "+          exp = 8;", "+          act = _doc._getAnonymousInnerClassIndex(NESTED_CLASSES_TEXT.indexOf(substr)); ", "+          assertEquals(\"index at \" + substr + \" exp=`\" + exp + \"`, act=`\" + act + \"`\", exp, act);", "+        }", "+        catch(BadLocationException e) { throw new UnexpectedException(e); }", "+        catch(ClassNameNotFoundException e) { throw new UnexpectedException(e); }", "+      }", "+    });"]}], "num": 16962}
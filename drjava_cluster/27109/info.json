{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4388acbf8ae368401ca26e090d020c7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a407c3905e87b908e42bc35d6adaa6ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public synchronized String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException", "signatureAfterChange": "   public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException", "diff": ["-  public synchronized String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException{", "-    TreePath p = getSelectionPath();", "-    TreeNode n = (TreeNode) p.getLastPathComponent();", "-    ", "-    if(n == _model.getRoot())", "-      throw new GroupNotSelectedException(\"there is no top level group for the root of the tree\");", "-    ", "-    while(!_roots.contains(n)) { n = n.getParent(); }", "-    ", "-    return ((GroupNode)n).getData();", "+  public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException {", "+    synchronized (_model) {", "+      TreePath p = getSelectionPath();", "+      TreeNode n = (TreeNode) p.getLastPathComponent();", "+      ", "+      if (n == _model.getRoot())", "+        throw new GroupNotSelectedException(\"there is no top level group for the root of the tree\");", "+      ", "+      while(!_roots.contains(n)) { n = n.getParent(); }", "+      ", "+      return ((GroupNode)n).getData();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e53c00a0b03902741244fcb0a59c00", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsController.java", "commitBeforeChange": "216fad0aa8523dbc9402b5e83d2d0e4e9e0fc64e", "commitAfterChange": "4297ff328013eaae7e900c94d6d5500e0fe9b17c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "   boolean selectToPromptPosAction()", "diff": ["-  AbstractAction selectToPromptPosAction = new AbstractAction() {", "-    public void actionPerformed(ActionEvent e) {", "-      // Selects the text between the old pos and the prompt", "-      StyledText pane = _view.getTextPane();", "-      int start = _doc.getPromptPos();", "-      int end = pane.getCaretOffset();", "-      if (end < start) {", "-        int t = start;", "-        start = end;", "-        end = t;", "-      }", "-      ", "-      pane.setSelection(start, end);", "+  /** Selects all text between the caret and the prompt */", "+  boolean selectToPromptPosAction() {", "+    // Selects the text between the old pos and the prompt", "+    StyledText pane = _view.getTextPane();", "+    int start = _doc.getPromptPos();", "+    int end = pane.getCaretOffset();", "+    if (end < start) {", "+      int t = start;", "+      start = end;", "+      end = t;", "+    ", "+    pane.setSelection(start, end);", "+    return false;", "+  }"]}], "num": 27109}
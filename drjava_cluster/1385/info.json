{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "751ba4ff3f8a8b1ed42aecae904c2f50", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0270957c2f1a9df81730d2c355d7204d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "commitAfterChange": "22cb21cbc806aa257284ccfb5bed593a93cc9671", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["+      int start, len;", "+      String findWord = this._findWord;", "-      String findSpace = _doc.getText(_current.getOffset(), ", "-                                      _doc.getLength()-_current.getOffset());", "-      // find the first occurrence of _findWord", "+      String findSpace;", "+      if(!_searchBackwards){", "+        start = _current.getOffset();", "+        len = _doc.getLength() - start;", "+      } else {", "+        start = 0;", "+        len = _current.getOffset();", "+      }", "+      findSpace = _doc.getText(start, len);", "+      if (!_matchCase){", "+        findSpace = findSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+", "+      // find the first occurrence of findWord", "-      if (_matchCase) ", "-        foundOffset = findSpace.indexOf(_findWord);", "-      else", "-        foundOffset = findSpace.toLowerCase().indexOf(_findWord.toLowerCase());", "+      foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                                      : findSpace.lastIndexOf(findWord);", "-        foundOffset += _current.getOffset() + _findWord.length();", "+        foundOffset += start;", "+        if (!_searchBackwards){", "+           foundOffset += findWord.length();", "+        }", "-      }", "-      else {", "+      } else {", "-        findSpace = _doc.getText(0, _start.getOffset());", "-        if (_matchCase) ", "-          foundOffset = findSpace.indexOf(_findWord);", "-        else", "-          foundOffset = findSpace.toLowerCase().indexOf(_findWord.toLowerCase());", "+        //When we wrap, we need to include some text that was already searched before wrapping.", "+        //Otherwise, we won't find an only match that has the caret in it already.", "+        if(!_searchBackwards){", "+          start = 0;", "+          len = _start.getOffset() + (_findWord.length() - 1);", "+          if(len > _doc.getLength()){", "+            len = _doc.getLength();", "+          }", "+        } else {", "+          start = _start.getOffset() - (_findWord.length() - 1);", "+          if (start < 0){", "+            start = 0;", "+          }", "+          len = _doc.getLength() - start;", "+        }", "+        findSpace = _doc.getText(start, len);", "+", "+        if (!_matchCase) {", "+          findSpace = findSpace.toLowerCase();", "+        }", "+", "+        foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                                        : findSpace.lastIndexOf(findWord);", "+", "-          foundOffset += _findWord.length();", "+          foundOffset += start;", "+          if (!_searchBackwards) {", "+            foundOffset += findWord.length();", "+          }", "-      // flag the return value so that they can tell that we had to wrap ", "+      // flag the return value so that they can tell that we had to wrap", "-    ", "+", "+      //This means we have found the word before, just not in this call", "-      } ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4975a6acfcd0303d62baba8e08d21f43", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "755690ad27d80d16d7853b1d30f45c8b48ddecb5", "commitAfterChange": "6d214db24b68a17f17e0cc8f3030a6df6dfa9e3d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["+        sb.append(\"<html>\");", "-          ", "-          sb.append(_region.getDocument().getText(startSel, length).trim());", "+          ", "+          // this highlights the actual region in red", "+          int startRed = _region.getStartOffset() - startSel;", "+          int endRed = _region.getEndOffset() - startSel;", "+          String s = _region.getDocument().getText(startSel, length);", "+          for(int i=0; i<s.length(); ++i) {", "+            if (!Character.isWhitespace(s.charAt(i))) {", "+              break;", "+            }", "+            --startRed;", "+            --endRed;", "+          }", "+          s = s.trim();", "+          if (startRed<0) { startRed = 0; }", "+          if (startRed>s.length()) { startRed = s.length(); }", "+          if (endRed<startRed) { endRed = startRed; }", "+          if (endRed>s.length()) { endRed = s.length(); }", "+          sb.append(StringOps.encodeHTML(s.substring(0, startRed)));", "+          sb.append(\"<font color=#ff0000>\");", "+          sb.append(StringOps.encodeHTML(s.substring(startRed, endRed)));", "+          sb.append(\"</font>\");", "+          sb.append(StringOps.encodeHTML(s.substring(endRed)));", "+          sb.append(\"</html>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a94dd5eb1583631412ce5bf2aa0546b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "c46b51159c995a9970485b3c515f743b3910e9fc", "commitAfterChange": "20a2512e394be5865ddd8dc1ebd648c5dfb08d0c", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["-    // Set size and position", "+    // Size and position", "+    int x = config.getSetting(WINDOW_X).intValue();", "+    int y = config.getSetting(WINDOW_Y).intValue();", "-    setBounds(0, 0, width, height);", "-    setSize(width, height);", "-", "+    ", "+    // Bounds checking.", "-    Dimension frameSize = this.getSize();", "+    ", "-    if (frameSize.height > screenSize.height - menubarHeight) {", "+    if (height > screenSize.height - menubarHeight) {", "-      frameSize.height = screenSize.height - menubarHeight;", "+      height = screenSize.height - menubarHeight;", "-    if (frameSize.width > screenSize.width) {", "+    if (width > screenSize.width) {", "-      frameSize.width = screenSize.width;", "+      width = screenSize.width;", "+    ", "+    // I assume that we want to be contained on the default screen.", "+    // TODO: support spanning screens in multi-screen setups.", "+    Rectangle bounds = GraphicsEnvironment.getLocalGraphicsEnvironment()", "+      .getDefaultScreenDevice().getDefaultConfiguration().getBounds();", "+    ", "+    if (x == Integer.MAX_VALUE) {", "+      // magic value for \"not set\" - center.", "+      x = (bounds.width - width + bounds.x) / 2;", "+    }", "+    if (y == Integer.MAX_VALUE) {", "+      // magic value for \"not set\" - center.", "+      y = (bounds.height - height + bounds.y) / 2;", "+    }", "+    ", "+    if (x < bounds.x) {", "+      // Too far left, move to left edge.", "+      x = bounds.x;", "+    }", "+    if (y < bounds.y) {", "+      // Too far up, move to top edge.", "+      y = bounds.y;", "+    }", "+    if ((x + width) > (bounds.x + bounds.width)) {", "+      // Too far right, move to right edge.", "+      x = bounds.width - width + bounds.x;", "+    }", "+    if ((y + height) > (bounds.y + bounds.height)) {", "+      // Too far down, move to bottom edge.", "+      y = bounds.height - height + bounds.y;", "+    }", "+    ", "-    this.setSize(frameSize);", "-    this.setLocation((screenSize.width - frameSize.width) / 2,", "-                     (screenSize.height - frameSize.height - menubarHeight) / 2);", "+    setBounds(x, y, width, height);", "-        /*", "-        try {", "-          UIManager.setLookAndFeel(oe.value);", "-          SwingUtilities.updateComponentTreeUI(MainFrame.this);", "-          if (_debugPanel != null) {", "-            SwingUtilities.updateComponentTreeUI(_debugPanel);", "-          }", "-          if (_configFrame != null) {", "-            SwingUtilities.updateComponentTreeUI(_configFrame);", "-          }", "-          if (_helpFrame != null) {", "-            SwingUtilities.updateComponentTreeUI(_helpFrame);", "-          }", "-          if (_aboutDialog != null) {", "-            SwingUtilities.updateComponentTreeUI(_aboutDialog);", "-          }", "-          SwingUtilities.updateComponentTreeUI(_docPanePopupMenu);", "-          SwingUtilities.updateComponentTreeUI(_interactionsPanePopupMenu);", "-          SwingUtilities.updateComponentTreeUI(_consolePanePopupMenu);", "-          SwingUtilities.updateComponentTreeUI(_openChooser);", "-          SwingUtilities.updateComponentTreeUI(_saveChooser);", "-          Iterator<TabbedPanel> it = _tabs.iterator();", "-          while (it.hasNext()) {", "-            SwingUtilities.updateComponentTreeUI(it.next());", "-          }", "-        }", "-        catch (Exception ex) {", "-          _showError(ex, \"Could Not Set Look and Feel\",", "-                     \"An error occurred while trying to set the look and feel.\");", "-        }", "-        */", "+//        try {", "+//          UIManager.setLookAndFeel(oe.value);", "+//          SwingUtilities.updateComponentTreeUI(MainFrame.this);", "+//          if (_debugPanel != null) {", "+//            SwingUtilities.updateComponentTreeUI(_debugPanel);", "+//          }", "+//          if (_configFrame != null) {", "+//            SwingUtilities.updateComponentTreeUI(_configFrame);", "+//          }", "+//          if (_helpFrame != null) {", "+//            SwingUtilities.updateComponentTreeUI(_helpFrame);", "+//          }", "+//          if (_aboutDialog != null) {", "+//            SwingUtilities.updateComponentTreeUI(_aboutDialog);", "+//          }", "+//          SwingUtilities.updateComponentTreeUI(_docPanePopupMenu);", "+//          SwingUtilities.updateComponentTreeUI(_interactionsPanePopupMenu);", "+//          SwingUtilities.updateComponentTreeUI(_consolePanePopupMenu);", "+//          SwingUtilities.updateComponentTreeUI(_openChooser);", "+//          SwingUtilities.updateComponentTreeUI(_saveChooser);", "+//          Iterator<TabbedPanel> it = _tabs.iterator();", "+//          while (it.hasNext()) {", "+//            SwingUtilities.updateComponentTreeUI(it.next());", "+//          }", "+//        }", "+//        catch (Exception ex) {", "+//          _showError(ex, \"Could Not Set Look and Feel\",", "+//                     \"An error occurred while trying to set the look and feel.\");", "+//        }", "+        "]}], "num": 1385}
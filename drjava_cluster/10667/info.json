{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0527273058daa00998b6e8010089262b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2772e0c1463244dd4d92591ccb42fd98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "signatureAfterChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "diff": ["-    final ArrayList<CompilerError> packageErrors = new ArrayList<CompilerError>();", "+    final ArrayList<DJError> packageErrors = new ArrayList<DJError>();", "-          packageErrors.add(new CompilerError(f, e.getMessage(), false));", "+          packageErrors.add(new DJError(f, e.getMessage(), false));", "-            throw new IOException(\"Could not create build directory: \"+buildDir);", "+            throw new IOException(\"Could not create build directory: \" + buildDir);", "-          CompilerError err = new CompilerError(t.toString(), false);", "+//          t.printStackTrace();", "+//          throw new UnexpectedException(t);", "+          DJError err = new DJError(t.toString(), false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cac4e5aa78f5ce4c99567d47ad242d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/javadoc/DefaultJavadocModel.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private void _runJavadoc(Iterable<String> files, File destDir, Iterable<String> extraArgs, boolean allDocs)", "signatureAfterChange": "   private void _runJavadoc(Iterable<String> files, File destDir, Iterable<String> extraArgs, boolean allDocs)", "diff": ["-    List<CompilerError> errors = new ArrayList<CompilerError>();", "+    List<DJError> errors = new ArrayList<DJError>();", "-      errors.add(new CompilerError(\"IOException: \" + e.getMessage(), false));", "+      errors.add(new DJError(\"IOException: \" + e.getMessage(), false));", "-      errors.add(new CompilerError(\"InterruptedException: \" + e.getMessage(), false));", "+      errors.add(new DJError(\"InterruptedException: \" + e.getMessage(), false));", "-    _javadocErrorModel = new CompilerErrorModel(IterUtil.toArray(errors, CompilerError.class), _model);", "+    _javadocErrorModel = new CompilerErrorModel(IterUtil.toArray(errors, DJError.class), _model);"]}], "num": 10667}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f8e5e3bed9b201c1221bd8bcebd466a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b678efc9e598959c07cd8dd8f83ba6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "310f2e2e5bd03b1be3d582b8bb080b976b35e862", "commitAfterChange": "5ac038fd2393232341f24ed3abaede1deb4e977a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "      private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-              // if match, add clasname to test suite", "+              // if match, add classname to test suite", "-        try {", "-          List<String> tests = _jvm.findTestClasses(classNames, files);", "-          if (tests == null || tests.isEmpty()) {", "-            nonTestCase(allTests);", "-            return;", "-          }", "-          ", "-          ArrayList<OpenDefinitionsDocument> odds = new ArrayList<OpenDefinitionsDocument>();", "-          for (String name: tests) { odds.add(classNamesToODDs.get(name)); }", "-   ", "-          try {", "-            /** Run the junit test suite that has already been set up on the slave JVM */", "-            _notifier.junitStarted(odds);", "-            //          new ScrollableDialog(null, \"junitStarted executed in DefaultJunitModel\", \"\", \"\").show();", "-            _jvm.runTestSuite();", "-            ", "-          }", "-          catch(IOException e) { ", "-            _notifier.junitEnded();  // balances junitStarted()", "-            throw new UnexpectedException(e); ", "-          }", "-        }", "-        catch(IOException e) { throw new UnexpectedException(e); }", "-          ", "+      List<String> tests;", "+      try { tests = _jvm.findTestClasses(classNames, files); }", "+      catch(IOException e) { throw new UnexpectedException(e); }", "+      ", "+      if (tests == null || tests.isEmpty()) {", "+        nonTestCase(allTests);", "+        return;", "+      }", "+      ", "+      ArrayList<OpenDefinitionsDocument> odds = new ArrayList<OpenDefinitionsDocument>();", "+      for (String name: tests) { odds.add(classNamesToODDs.get(name)); }", "+      ", "+      try {", "+        /** Run the junit test suite that has already been set up on the slave JVM */", "+        _notifier.junitStarted(odds);", "+        //          new ScrollableDialog(null, \"junitStarted executed in DefaultJunitModel\", \"\", \"\").show();", "+        _jvm.runTestSuite();", "+        ", "+      }", "+      catch(IOException e) { ", "+        _notifier.junitEnded();  // balances junitStarted()", "+        throw new UnexpectedException(e); ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa90bc48c3127ca4509e1cf8f78808bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "diff": ["+    String text;", "-    try {", "-      String text = getText(0, pos);", "-      synchronized(_reduced) {", "+    try { text = getText(0, pos); }", "+    finally { readUnlock(); }", "+    ", "+    synchronized(_reduced) {", "+      ", "+      final int origLocation = _currentLocation;", "+      // Move reduced model to location pos", "+      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+      ", "+      // Walk backward from specified position", "+      ", "+      while (i >= 0) { ", "+        /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "+         * text[i+1:pos-1] contains invalid chars */", "-        final int origLocation = _currentLocation;", "-        // Move reduced model to location pos", "-        _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "-        ", "-        // Walk backward from specified position", "-        ", "-        while (i >= 0) { ", "-          /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "-           * text[i+1:pos-1] contains invalid chars */", "-          ", "-          if (match(text.charAt(i), whitespace)) {", "-            // ith char is whitespace", "-            i--;", "-            continue;", "-          }", "-          ", "-          // Found a non-whitespace char;  move reduced model to location i", "-          _reduced.move(i - reducedPos);", "-          reducedPos = i;                  // reduced model points to i == reducedPos", "-          ", "-          // Check if matching char is within a comment (not including opening two characters)", "-          if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-              (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "-            i--;", "-            continue;", "-          }", "-          ", "-          if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "-            // Move i past the first comment character and continue searching", "-            i = i - 2;", "-            continue;", "-          }", "-          ", "-          // Found valid previous character", "-          break;", "+        if (match(text.charAt(i), whitespace)) {", "+          // ith char is whitespace", "+          i--;", "+          continue;", "-        /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "-        _reduced.move(origLocation - reducedPos);", "+        // Found a non-whitespace char;  move reduced model to location i", "+        _reduced.move(i - reducedPos);", "+        reducedPos = i;                  // reduced model points to i == reducedPos", "+        ", "+        // Check if matching char is within a comment (not including opening two characters)", "+        if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+            (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "+          i--;", "+          continue;", "+        }", "+        ", "+        if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "+          // Move i past the first comment character and continue searching", "+          i = i - 2;", "+          continue;", "+        }", "+        ", "+        // Found valid previous character", "+        break;", "+      ", "+      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+      _reduced.move(origLocation - reducedPos);", "-    finally { readUnlock(); }"]}], "num": 31276}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a11fb11541c51274300a47ea2e504531", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b0f678fc0898af3f2870f634d7b772a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "b20865d9a2ac76baa972c14a0f6e88b4dafc8ed0", "commitAfterChange": "97472913efee2f558cb839d549c0975d61cae86a", "methodNumberBeforeChange": 341, "methodNumberAfterChange": 606, "signatureBeforeChange": "    final private boolean jj_3_58()", "signatureAfterChange": "    final private boolean jj_3_38()", "diff": ["-", "-  final private boolean jj_3_58() {", "-    Token xsp;", "-    if (jj_3_56()) return true;", "-    while (true) {", "-      xsp = jj_scanpos;", "-      if (jj_3_56()) { jj_scanpos = xsp; break; }", "-    }", "-    while (true) {", "-      xsp = jj_scanpos;", "-      if (jj_3_57()) { jj_scanpos = xsp; break; }", "-    }", "-    return false;", "-  }", "+  final private boolean jj_3_38() {", "+    if (jj_scan_token(DOT)) return true;", "+    if (jj_scan_token(IDENTIFIER)) return true;", "+    Token xsp;", "+    xsp = jj_scanpos;", "+    if (jj_3R_198()) jj_scanpos = xsp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12745a0f0d41569293d92484749b2ded", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     void switchToError(CompilerError error)", "signatureAfterChange": "     void switchToError(CompilerError error)", "diff": ["-      if (error == null) {", "-        return;", "-      }", "+//      Utilities.showDebug(\"ErrorPanel.switchToError called\");", "+      if (error == null) return;", "-      if (error.file() != null) {", "-        try {", "-          OpenDefinitionsDocument doc = getModel().getDocumentForFile(error.file());", "-          // switch to correct def pane", "-          getModel().setActiveDocument(doc);", "-          ", "-          // check and see if this error is without source info, and", "-          // if so don't try to highlight source info!", "-          if (!error.hasNoLocation()) {", "-            CompilerErrorModel errorModel = getErrorModel();", "-            Position pos = errorModel.getPosition(error);", "-            ", "-            // move caret to that position", "-            DefinitionsPane defPane = _frame.getCurrentDefPane();", "-            if (pos != null) {", "-              int errPos = pos.getOffset();", "-              if (errPos >= 0 && errPos <= defPane.getText().length()) {", "-                defPane.centerViewOnOffset(errPos);", "-              }", "-            }", "-            defPane.requestFocusInWindow();", "-            defPane.getCaret().setVisible(true);", "-          }", "-          else {", "-            // Remove last highlight if we had an error with no position", "-            _frame.getCurrentDefPane().removeErrorHighlight();", "-          }", "-        }", "-        catch (IOException ioe) {", "-          // Don't highlight the source if file can't be opened", "-        }", "-      }", "-      else {", "-        //Remove last highlight if we had an error with no file", "-        _frame.getCurrentDefPane().removeErrorHighlight();", "-      }", "-      ", "-      // Select item wants the error, which is what we were passed", "+      _frame.getCurrentDefPane().removeErrorHighlight();  // hide previous error highlight", "+      ", "+      if (error.file() == null || error.hasNoLocation())  return;", "+      try {", "+        OpenDefinitionsDocument doc = getModel().getDocumentForFile(error.file());", "+        CompilerErrorModel errorModel = getErrorModel();", "+        Position pos = errorModel.getPosition(error);", "+        ", "+        // switch to correct def pane and move caret to error position", "+//        Utilities.showDebug(\"active document being set to \" + doc + \" in ErrorPanel.switchToError\");", "+        getModel().setActiveDocument(doc);", "+//        Utilities.showDebug(\"setting active document has completed\");", "+        DefinitionsPane defPane = _frame.getCurrentDefPane();", "+        if (pos != null) {", "+          int errPos = pos.getOffset();", "+          if (errPos >= 0 && errPos <= doc.getLength()) defPane.centerViewOnOffset(errPos);", "+        }", "+        // The following line is a brute force hack that fixed a bug plaguing the DefinitionsPane immediately after a compilation", "+        // with errors.  In some cases (which were consistently reproducible), the DefinitionsPane editing functions would break", "+        // whereby the keystrokes had their usual meaning but incorrect updates were performed in the DefintionsPane.  For example,", "+        // the display behaved as if the editor were in \"overwrite\" mode.", "+        _frame._switchDefScrollPane(); // resets an out-of-kilter DefinitionsPane on the first error after a compilation", "+        defPane.requestFocusInWindow();", "+        defPane.getCaret().setVisible(true);", "+      }", "+      catch (IOException ioe) {", "+        // Don't highlight the source if file can't be opened", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad7178ba6440c2693a2a46bbf3cd0d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "commitAfterChange": "b24b0a9d39ea5edde092f4dd2f0cce709847f77c", "methodNumberBeforeChange": 559, "methodNumberAfterChange": 331, "signatureBeforeChange": "    final private boolean jj_3R_96()", "signatureAfterChange": "    final private boolean jj_3R_96()", "diff": ["+", "+  final private boolean jj_3R_96() {", "+    if (jj_scan_token(DOT)) return true;", "+    if (jj_3R_138()) return true;", "+    return false;", "+  }", "-", "-  final private boolean jj_3R_96() {", "-    if (jj_3R_141()) return true;", "-    Token xsp;", "-    while (true) {", "-      xsp = jj_scanpos;", "-      if (jj_3_46()) { jj_scanpos = xsp; break; }", "-    }", "-    return false;", "-  }"]}], "num": 699}
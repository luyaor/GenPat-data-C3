{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "053279125adf14937e93084ab407f893", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04df16be02436b57f5799c93133d4e7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": "                    public void testCreateMethodData()", "signatureAfterChange": "                    public void testCreateMethodData()", "diff": ["-                                             _privateAbstractMav, ", "+                                             PRIVATE_ABSTRACT_MAV, ", "-      MethodData mdata = new MethodData(\"methodName\", _privateAbstractMav, new TypeParameter[0], SymbolData.INT_TYPE, ", "+      MethodData mdata = new MethodData(\"methodName\", PRIVATE_ABSTRACT_MAV, new TypeParameter[0], SymbolData.INT_TYPE, ", "+      _iv._package = \"i.like\";", "+      _iv._enclosingClassName = \"i.like.monkey\";", "+      _iv.symbolTable.put(\"i.like.monkey\", _sd1);", "+      System.err.println(\"SymbolData for i.like.monkey = \" + _iv.getQualifiedSymbolData(\"i.like.monkey\", SourceInfo.NO_INFO));", "-//      assertEquals(\"The error message should be correct.\", \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "+//      assertEquals(\"The error message should be correct.\", ", "+//      \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", ", "+//        errors.get(0).getFirst());", "+      UninitializedVariableDeclarator uvd1 =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                            new Word(SourceInfo.NO_INFO, \"field1\"));", "+      UninitializedVariableDeclarator uvd2 =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                            new Word(SourceInfo.NO_INFO, \"field1\"));", "-                              _abstractMav, ", "+                              ABSTRACT_MAV, ", "-                                                    new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                        new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                                                        new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                    uvd1,", "-                                                      new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                          new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                                                          new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                      uvd2,", "-                       _abstractMav, ", "+                       ABSTRACT_MAV, ", "-                       new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "-                         new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "+                       new VariableData[] { new VariableData(\"field1\", FINAL_MAV, SymbolData.DOUBLE_TYPE, true, _sd1),", "+                         new VariableData(\"field1\", FINAL_MAV, SymbolData.INT_TYPE, true, _sd1) }, ", "-      mdata.getParams()[0].setEnclosingData(result);", "-      mdata.getParams()[1].setEnclosingData(result);", "+      /* Enclosing data for formal parameters is the enclosing class, not the enclosing method. */", "+//      mdata.getParams()[0].setEnclosingData(result);", "+//      mdata.getParams()[1].setEnclosingData(result);", "+      ", "-      mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, result) });                                                          ", "+      mdata.addVars(new VariableData[] { new VariableData(\"field1\", FINAL_MAV, SymbolData.DOUBLE_TYPE, true, _sd1) });", "+      System.err.println(\"****** mdata  = \" + mdata);", "+      System.err.println(\"****** result = \" + result);", "-      //This is now caught in the type checker.", "-      //assertEquals(\"The second error message should be correct.\", \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", errors.get(1).getFirst());", "-      assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());", "+      // This is now caught in the type checker.", "+//      assertEquals(\"The second error message should be correct.\", ", "+//                   \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", ", "+//                   errors.get(1).getFirst());", "+      assertEquals(\"The second error message should be correct.\", ", "+                   \"You cannot have two method parameters with the same name\", ", "+                   errors.get(1).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1391a74050e64ae250887b70363467e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForVariableDeclarationOnly()", "signatureAfterChange": "          public void testForVariableDeclarationOnly()", "diff": ["-                                                       _packageMav,", "-                                                       new VariableDeclarator[] {", "+                                                          _packageMav,", "+                                                          new VariableDeclarator[] {", "-                               new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                               new Word (SourceInfo.NO_INFO, \"field1\")),", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                               new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "-                               new Word (SourceInfo.NO_INFO, \"field2\"))});", "-      VariableData vd1 = new VariableData(\"field1\", _finalPrivateMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "-      VariableData vd2 = new VariableData(\"field2\", _finalPrivateMav, SymbolData.BOOLEAN_TYPE, false, _cbiv._classData);", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                            new Word (SourceInfo.NO_INFO, \"field1\")),", "+          new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                              new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "+                                              new Word (SourceInfo.NO_INFO, \"field2\"))});", "+      VariableData vd1 = new VariableData(\"field1\", _privateFinalMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "+      VariableData vd2 = new VariableData(\"field2\", _privateFinalMav, SymbolData.BOOLEAN_TYPE, false, _cbiv._classData);", "+//      VariableData vd0 = _sd1.getVars().get(0);", "+//      System.err.println(\"Errors were: \" + errors);", "+//      System.err.println(\"_sd1.getVars() = \" + _sd1.getVars());", "+//      ", "+//      System.err.println(\"vd1 = \" + vd1);", "+//      System.err.println(\"vd1.getMav() = \" + vd1.getMav());", "+//      System.err.println(\"vd1.getType() = \" + vd1.getType());", "+//      System.err.println(\"vd1.getMav().getModifiers() = \" + vd1.getMav().getModifiers());", "+//      assertEquals(\"enclosingData are equal\", vd1.getEnclosingData(), vd0.getEnclosingData());", "+//      assertEquals(\"mavs are equal\", vd1.getMav(), vd0.getMav());", "+//      assertEquals(\"vd1.equals(vd0)\", vd1, vd0);", "-      VariableData vd3 = new VariableData(\"field3\", _finalPrivateMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "+      VariableData vd3 = new VariableData(\"field3\", _privateFinalMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "-      //Check a non-static field that has been assigned.  (won't work);", "+      // Check a non-static field that has been assigned.", "-      VariableData vd5 = new VariableData(\"field5\", _publicFinalMav, SymbolData.DOUBLE_TYPE, true, _cbiv._classData);", "-      assertEquals(\"There should be three errors\", 3, errors.size());", "-      assertEquals(\"The new error message should be correct\", \"Only static fields may be initialized outside of a constructor at the Intermediate level\", errors.get(2).getFirst());", "-      assertFalse(\"Field 5 was not added.\", _sd1.getVars().contains(vd5));", "+      VariableData vd5 = new VariableData(\"field5\", _privateFinalMav, SymbolData.DOUBLE_TYPE, true, _cbiv._classData);", "+      vd5.setHasInitializer(true);", "+//      VariableData vd0 = _sd1.getVars().get(4);", "+//      System.err.println(\"vd5 = \" + vd5);", "+//      System.err.println(\"vd0 = \" + vd0);", "+//      System.err.println(\"vd5.getMav() = \" + vd5.getMav());", "+//      System.err.println(\"vd5.getType() = \" + vd5.getType());", "+//      System.err.println(\"vd0.getMav() = \" + vd0.getMav());", "+//      System.err.println(\"vd0.getType() = \" + vd0.getType());", "+//      assertEquals(\"mavs are equal\", vd5.getMav(), vd0.getMav());", "+//      assertEquals(\"enclosingData are equal\", vd5.getEnclosingData(), vd0.getEnclosingData());", "+//      assertEquals(\"vd5.equals(vd0)\", vd5, vd0);", "+      assertTrue(\"Field 5 was added.\", _sd1.getVars().contains(vd5));", "-      VariableData vd6 = new VariableData(\"field6\", _finalPrivateMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "+      VariableData vd6 = new VariableData(\"field6\", _privateFinalMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "-      assertEquals(\"There should be four errors.\", 4, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot have two fields with the same name.  Either you already have a field by that name in this class, or one of your superclasses or interfaces has a field by that name\", errors.get(3).getFirst());", "+      assertEquals(\"There should be three errors.\", 3, errors.size());", "+      assertEquals(\"The error message should be correct\", \"You cannot have two fields with the same name.  Either you\" +", "+                   \" already have a field by that name in this class, or one of your superclasses or interfaces has a\" +", "+                   \" field by that name\", ", "+                   errors.get(2).getFirst());"]}], "num": 22234}
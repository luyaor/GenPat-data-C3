{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a99d566a19f27f3fe1fdf3954da68712", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "038acc11992a46f1bce80fc283f09819", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaInterpreterTest.java", "commitBeforeChange": "60148071cbc4c79594332b98a132b525b5109e02", "commitAfterChange": "3a6e74bbf98ddc5180a8b7f90656bf9c0a78b5b3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void testTypeCheckerExtension()", "signatureAfterChange": "   public void testTypeCheckerExtension()", "diff": ["-//    try { _interpreter.interpret(\"(false) ? 2/0 : 1 \"); }", "-//    catch(InterpreterException e) {", "-//      if ( e.getCause() instanceof ArithmeticException ) {", "-//        fail(\"testTypeCheckerExtension failed to prevent short circuit DivideByZeroException\");", "-//      }", "-//    }", "-//", "-//    try { _interpreter.interpret(\"(false) ? 2%0 : 1 \"); }", "-//    catch(InterpreterException e) {", "-//      if ( e.getCause() instanceof ArithmeticException ) {", "-//        fail(\"testTypeCheckerExtension failed to prevent short circuit DivideByZeroException\");", "-//      }", "-//    }", "+    try { _interpreter.interpret(\"(false) ? 2/0 : 1 \"); }", "+    catch(InterpreterException e) {", "+      if ( e.getCause() instanceof ArithmeticException ) {", "+        fail(\"testTypeCheckerExtension failed to prevent short circuit DivideByZeroException\");", "+      }", "+    }", "+", "+    try { _interpreter.interpret(\"(false) ? 2%0 : 1 \"); }", "+    catch(InterpreterException e) {", "+      if ( e.getCause() instanceof ArithmeticException ) {", "+        fail(\"testTypeCheckerExtension failed to prevent short circuit DivideByZeroException\");", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a1fb72a9c426b16ff83874198fc5f61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "b0a3e61fcb6f69254e613857fc8755d818cd4948", "commitAfterChange": "30084d60ea1c92bd9e5a911d71d6555be6180e71", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testCacheSize()", "signatureAfterChange": "   public void testCacheSize()", "diff": ["+    _cache.setCacheSize(34);", "+    assertEquals(\"Wrong cache size\", 34, _cache.getCacheSize());", "+    ", "+    /* test that an IllegalArgumentException is thrown when a", "+     * cacheSize <= 0 is provided", "+     */", "+    try {", "+     _cache.setCacheSize(0);", "+     fail(\"IllegalArgumentException expected.\");", "+    }", "+    catch (IllegalArgumentException iae) {", "+      //We're good", "+    }", "+    ", "+    try {", "+     _cache.setCacheSize(-34);", "+     fail(\"IllegalArgumentException expected.\");", "+    }", "+    catch (IllegalArgumentException iae) {", "+      //We're good", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b064680271d1e738dabbed42beb4b11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp()", "signatureAfterChange": "   public void setUp()", "diff": ["-    _globalContext.define(\"B\", Boolean.class);", "+    _globalContext.define(\"B\", Boolean.class);", "+    _globalContext.define(\"I\", int[].class);", "+    ", "+    try {", "+      _interpreter.interpret(\"int x = 0;\");", "+      _interpreter.interpret(\"Integer X = new Integer(0);\");", "+      _interpreter.interpret(\"Boolean B = Boolean.FALSE;\");", "+      _interpreter.interpret(\"boolean b = false;\");", "+      _interpreter.interpret(\"int[] I = {1, 2, 3};\");", "+    }", "+    catch (ExceptionReturnedException ere) {", "+      fail(\"Should have been able to declare variables for interpreter.\");", "+    }"]}], "num": 6337}
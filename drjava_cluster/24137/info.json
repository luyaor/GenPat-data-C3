{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdd00581e7d2e168c308de702fc1300b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b5e79eabb541cd166920592c6153374", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 82, "signatureBeforeChange": "   @Override public Type visit(ConditionalExpression node)", "signatureAfterChange": "     @Override public Type visit(ConditionalExpression node)", "diff": ["-   */", "-  @Override public Type visit(ConditionalExpression node) {", "-    node.getConditionExpression().acceptVisitor(this);", "-    node.getIfTrueExpression().acceptVisitor(this);", "-    node.getIfFalseExpression().acceptVisitor(this);", "-", "-    try {", "-      Expression cond = ts.makePrimitive(node.getConditionExpression());", "-      if (!(getType(cond) instanceof BooleanType)) {", "+     */", "+    @Override public Type visit(ConditionalExpression node) {", "+      check(node.getConditionExpression(), TypeSystem.BOOLEAN);", "+      check(node.getIfTrueExpression(), expected);", "+      check(node.getIfFalseExpression(), expected);", "+      ", "+      try {", "+        Expression cond = ts.makePrimitive(node.getConditionExpression());", "+        if (!(getType(cond) instanceof BooleanType)) {", "+          throw new ExecutionError(\"condition.type\", node);", "+        }", "+        node.setConditionExpression(cond);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      node.setConditionExpression(cond);", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"condition.type\", node);", "-    }", "-    ", "-    try {", "-      Pair<Expression, Expression> joined = ts.join(node.getIfTrueExpression(),", "-                                                    node.getIfFalseExpression());", "-      node.setIfTrueExpression(joined.first());", "-      node.setIfFalseExpression(joined.second());", "-      return setType(node, ts.capture(getType(joined.first())));", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"conditional.type\", node);", "-    }", "-  }", "+      try {", "+        Pair<Expression, Expression> joined = ts.join(node.getIfTrueExpression(),", "+                                                      node.getIfFalseExpression());", "+        node.setIfTrueExpression(joined.first());", "+        node.setIfFalseExpression(joined.second());", "+        return setType(node, ts.capture(getType(joined.first())));", "+      }", "+      catch (UnsupportedConversionException e) {", "+        throw new ExecutionError(\"conditional.type\", node);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5606eaab198c3d9c865fa3dd29fe23e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 80, "signatureBeforeChange": "   private Type handleBooleanExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleBooleanExpression(BinaryExpression node)", "diff": ["-   */", "-  private Type handleBooleanExpression(BinaryExpression node) {", "-    node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());    ", "-      if (!(getType(left) instanceof BooleanType) || !(getType(right) instanceof BooleanType)) {", "+     */", "+    private Type handleBooleanExpression(BinaryExpression node) {", "+      check(node.getLeftExpression(), TypeSystem.BOOLEAN);", "+      check(node.getRightExpression(), TypeSystem.BOOLEAN);", "+      try {", "+        Expression left = ts.makePrimitive(node.getLeftExpression());", "+        Expression right = ts.makePrimitive(node.getRightExpression());    ", "+        if (!(getType(left) instanceof BooleanType) || !(getType(right) instanceof BooleanType)) {", "+          throw new ExecutionError(\"boolean.expression.type\", node);", "+        }", "+        node.setLeftExpression(left);", "+        node.setRightExpression(right);", "+        return setType(node, TypeSystem.BOOLEAN);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      node.setLeftExpression(left);", "-      node.setRightExpression(right);", "+    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"boolean.expression.type\", node);", "-    }", "-  }"]}], "num": 24137}
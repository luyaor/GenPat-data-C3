{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd8c0b877ddc903b623f4a7e536677ad", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0efe4b34f5450cbf6cded1c5cc379789", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b6c98c2729d523213cf8ee6bbc9636575f25da66", "commitAfterChange": "4bdaddc150401ace7c16f01fa5c54525f5642ceb", "methodNumberBeforeChange": 482, "methodNumberAfterChange": 482, "signatureBeforeChange": "   private void _setUpContextMenus()", "signatureAfterChange": "   private void _setUpContextMenus()", "diff": ["-    // This listener updates the _cachedCaretPosition in the _interactionsController when the cursor is manually set.", "-    _interactionsPane.addMouseListener(new MouseInputAdapter() {", "-      public void mouseClicked(MouseEvent e) { ", "-        _interactionsController.setCachedCaretPos(_interactionsPane.viewToModel(e.getPoint()));", "-      }", "-    });", "+//    // This listener updates the _cachedCaretPosition in the _interactionsController when the cursor is manually set.", "+//    _interactionsPane.addMouseListener(new MouseInputAdapter() {", "+//      public void mouseClicked(MouseEvent e) { ", "+//        _interactionsController.setCachedCaretPos(_interactionsPane.viewToModel(e.getPoint()));", "+//      }", "+//    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b56c119fcdeb1e78d6d4dd62b6be35f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "420215825e681a0b291c00f3cf7aa39a982faffe", "commitAfterChange": "c657da4404f6681bffc368045343d4bc04e51744", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": "            private void _openProjectHelper(File projectFile)", "signatureAfterChange": "            private void _openProjectHelper(File projectFile)", "diff": ["+    ", "+    ", "+    ", "+    ", "-      ", "-      ", "-                                                                                         _model.getDocumentNavigator()));", "+                                                                                             _model.getDocumentNavigator()));", "+      _setUpContextMenus();", "+      ", "+      ", "+    _closeAll();", "-    /* i have to copy the list, but i can't use clone, since List is an interface", "-     * so i need to manually copy the list.", "-     * ", "-     * i have to copy it, becase when i close all the files, i have to keep a reference to the currently open files", "-     */", "-    /*", "-    LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "-    for(int i=0;i<old_lod.size();i++){", "-      lod.add(old_lod.get(i));", "-    }", "-    */", "-    ", "-    ", "-    // XXX", "-    _closeAll();", "-", "-/*    ", "-    OpenDefinitionsDocument odd;", "-    INavigatorItem item;", "-", "-    System.out.println(lod.size());", "-    System.out.println(\"-------------\");", "-    for(int i=0;i<lod.size();i++){", "-      odd = lod.get(i);", "-      item = _model.getIDocGivenODD(odd);", "-      try{", "-        new_nav.addDocument(item, odd.getFile().getParent());", "-        System.out.println(\"adding \" + item + \" at \" + odd.getFile().getParent());", "-      }catch(IllegalStateException e){", "-        ", "-      }catch(FileMovedException e){", "-        ", "-      }", "-      ", "-    }", "-    System.out.println(\"-------------\");", "-", "-  */  ", "-    ", "-    ", "-    //System.out.println(\"classpaths are now = \" + DrJava.getConfig().getSetting(OptionConstants.EXTRA_CLASSPATH));", "-    ", "-    _model.getDocumentNavigator().asContainer().addMouseListener(new RightClickMouseAdapter()", "-                                                                   {", "-      protected void _popupAction(MouseEvent e) {", "-//        System.out.println(e.getSource());", "-        _docPanePopupMenu.show(e.getComponent(), e.getX(), e.getY());", "-      }", "-    }", "-    );", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca882e722020fa62d6162b91bbacc5d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "a35de807c6239a74c75cd1d9a337e2c468729622", "commitAfterChange": "bf372fc29acf6ea260cc55361328f14ce539744d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private void init(boolean info)", "signatureAfterChange": "   private void init(boolean info)", "diff": ["-    addWindowListener(new java.awt.event.WindowAdapter() {", "-      public void windowClosing(WindowEvent winEvt) {", "-        buttonPressed(_actions.get(_actions.size()-1));", "-      }", "-    });"]}], "num": 10936}
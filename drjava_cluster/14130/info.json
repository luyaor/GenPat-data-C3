{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cffab6a5135727ae0ed97af42dcb74c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17a8665b86550506946c67d698579f7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void disable()", "signatureAfterChange": "    protected void handleSlaveQuit(int status)", "diff": ["-    ", "-    public void disable() {", "-      _shouldReset = false;", "+", "+  protected void handleSlaveQuit(int status) {", "+    // Only restart the slave if _enabled is true", "+    if (_enabled) {", "+      // _model may be null if we're running a test on this", "+      if (_model != null) {", "+        _model.interactionsResetting();", "+      }", "+", "+      startInterpreterJVM();", "+    }", "+", "+    if (!_cleanlyRestarting && (_model != null)) {", "+      _model.replCalledSystemExit(status);", "+    }", "+    _cleanlyRestarting = false;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "551fb64b0c3c35d510d160b9b178a15c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "             public void actionPerformed(ActionEvent e)", "signatureAfterChange": "   protected void handleSlaveConnected()", "diff": ["-            int count = 0;", "-            public void actionPerformed(ActionEvent e) {", "-              synchronized(MainJVM.this) {", "-                if (!_shouldReset) {", "-                  _stopTimerThread();", "-                  return;", "-                }", "-                if (count < 2) {", "-                  _model.printDebugMessage(\"Could not connect to Interpreter JVM, trying again...\");", "-                  restartInterpreterJVM();", "-                  count++;", "-                  return;", "-                }", "-                _model.printDebugMessage(\"Unable to connect to Interpreter JVM, so the Interactions Pane is unavailable.\");", "-                _stopTimerThread();", "-              }", "-            }", "+   */", "+  protected void handleSlaveConnected() {", "+    // we reset the enabled flag since, unless told otherwise via", "+    // killInterpreter(false), we want to automatically respawn", "+    _enabled = true;", "+    _cleanlyRestarting = false;", "+    ", "+    // _model may be null if we're running a test on this", "+    if (_model != null) {", "+      _model.interactionsReady();", "+    }", "+", "+    _log.log(\"thread in connected: \" + Thread.currentThread());", "+", "+    synchronized(this) {", "+      // notify so that if we were waiting (in ensureConnected)", "+      // this will wake em up", "+      notify();", "+    }", "+  }"]}], "num": 14130}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19cae32e0d638786eaffeaf0738cf1dd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40aeae5ae0273434302e03c8b176469e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 254, "signatureBeforeChange": "   public void addToBrowserHistory()", "signatureAfterChange": "   public void addToBrowserHistory()", "diff": ["-  /** Add the current location to the browser history.  Aborts if not run in event thread. */", "+  /** Add the current location to the browser history.  Only runs in event thread. Assumes that doc is not null. */", "-    assert doc != null && EventQueue.isDispatchThread();", "+//    assert doc != null && EventQueue.isDispatchThread();", "+//      System.err.println(\"addToBrowserHistory() called for lineNum \" + doc.getLineOfOffset(pos) + \" in \" + doc);", "+      BrowserDocumentRegion current = _browserHistoryManager.getCurrentRegion();", "+      if (current != null) {", "+        OpenDefinitionsDocument currentDoc = current.getDocument();", "+        if (doc == currentDoc) {", "+          int lineNum = doc.getLineOfOffset(pos);", "+          int currentLineNum = currentDoc.getLineOfOffset(current.getStartOffset());", "+//          System.err.println(\"lineNum = \" + lineNum + \" currentLineNum = \" + currentLineNum);", "+          if (Math.abs(lineNum - currentLineNum) <= DIFF_THRESHOLD) return;", "+        }", "+      }", "-      endPos = doc.createPosition(doc._getLineEndPos(pos));", "+      endPos = startPos; // was doc.createPosition(doc._getLineEndPos(pos));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db16a3f27ae48bee6a817a1860c5f57a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "ff6e7ba398be9a577f63882c7a59f62ba76dc9b6", "commitAfterChange": "ec45520bd7c034fcd5a1e91bf25ccd1d46b70ecf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public synchronized void step(int flag) throws DebugException", "signatureAfterChange": "   public synchronized void step(int flag) throws DebugException", "diff": ["-      System.out.println(\"Current thread is null\");", "+      //System.out.println(\"Current thread is null\");", "+    //if (!_thread.isSuspended()) ", "+      //DrJava.consoleOut().println(\"Current thread is not suspended while trying to create a step request!\");    ", "+    // don't allow the creation of a new StepRequest if there's already one on", "+    // the current thread", "+    List steps = _eventManager.stepRequests();", "+    for (int i = 0; i < steps.size(); i++) {", "+      //DrJava.consoleOut().println(\"creating a new step: event thread: \" + ", "+      //                            ((StepRequest)steps.get(i)).thread() + ", "+      //                            \" current thread: \" +", "+      //                            _thread);", "+      if (((StepRequest)steps.get(i)).thread().equals(_thread)) {", "+        //DrJava.consoleOut().println(\"There's already a StepRequest on the current thread\");", "+        //DrJava.consoleOut().println(\"suspendCount: \" + _thread.suspendCount());", "+        /*try {", "+          DrJava.consoleOut().println(\"frames: \" + _thread.frames());", "+        }", "+        catch(IncompatibleThreadStateException itse) {", "+          DrJava.consoleOut().println(\"Can't print frames, thread is not suspended!\");", "+        }*/", "+        _thread.resume();", "+        return;", "+      }", "+    }", "+        ", "-    System.out.println(\"_thread resumed\");", "+    //System.out.println(\"_thread resumed\");"]}], "num": 4816}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fd22bd187c0603e5062c7900415030b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4e3d60fd405a9924437d80573dc1df2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public List<String> findTestClasses(List<String> classNames, List<File> files) throws RemoteException", "signatureAfterChange": "   public Option<List<String>> findTestClasses(List<String> classNames, List<File> files)", "diff": ["-  public List<String> findTestClasses(List<String> classNames, List<File> files) throws RemoteException {", "-    InterpreterJVMRemoteI slave = ensureInterpreterConnected();", "-    return slave.findTestClasses(classNames, files);", "+  public Option<List<String>> findTestClasses(List<String> classNames, List<File> files) {", "+    InterpreterJVMRemoteI remote = _accessInterpreterJVM();", "+    if (remote == null) { return Option.none(); }", "+    try { return Option.some(remote.findTestClasses(classNames, files)); }", "+    catch (RemoteException e) { _handleRemoteException(e); return Option.none(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7d0aa5ba4b8b86cf2173f93e62f536d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void setShowMessageOnResetFailure(boolean show)", "signatureAfterChange": "   public Option<Pair<Boolean, Boolean>> setActiveInterpreter(String name)", "diff": ["-    */", "-  public void setShowMessageOnResetFailure(boolean show) {", "-    // silently fail if disabled. see killInterpreter docs for details.", "-    if (! _restart) return;", "-    ", "-    InterpreterJVMRemoteI slave = ensureInterpreterConnected();", "-    ", "-    try { slave.setShowMessageOnResetFailure(show); }", "-    catch (RemoteException re) { _threwException(re); }", "-  }", "+  public Option<Pair<Boolean, Boolean>> setActiveInterpreter(String name) {", "+    InterpreterJVMRemoteI remote = _accessInterpreterJVM();", "+    if (remote == null) { return Option.none(); }", "+    try { return Option.some(remote.setActiveInterpreter(name)); }", "+    catch (RemoteException e) { _handleRemoteException(e); return Option.none(); }"]}], "num": 13414}
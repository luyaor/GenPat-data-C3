{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "707f5434a337f8eab73aa9a9a1d776b4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b11b359edfdbc19432bccff33d0ebe2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ReflectUtilTest.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testCast()", "signatureAfterChange": "         public void testBox()", "diff": ["-  public void testCast() {", "-    Object o3 = LambdaUtil.nullThunk();", "-    assertEquals(\"x\", cast(String.class, o1));", "-    assertEquals((Integer) 23, cast(Integer.class, o2));", "-    assertEquals(null, t.value());", "+  ", "+  public void testBox() {", "+    assertSame(Boolean.class, box(boolean.class));", "+    assertSame(Character.class, box(char.class));", "+    assertSame(Byte.class, box(byte.class));", "+    assertSame(Short.class, box(short.class));", "+    assertSame(Integer.class, box(int.class));", "+    assertSame(Long.class, box(long.class));", "+    assertSame(Float.class, box(float.class));", "+    assertSame(Double.class, box(double.class));", "+    assertSame(Void.class, box(void.class));", "+    assertSame(Integer.class, box(Integer.class));", "+    assertSame(String.class, box(String.class));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb6bb1b5da6a0e59ae95233966d277a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 226, "signatureBeforeChange": "     public void addRegion(final R region)", "signatureAfterChange": "     public void addRegion(final R region)", "diff": ["-      boolean added = false;", "-      for (int i=0; i< _regions.size();i++) {", "-        DocumentRegion r = _regions.get(i);", "-        int oldStart = r.getStartOffset();", "-        int newStart = region.getStartOffset ();", "-        ", "-        if ( newStart < oldStart) {", "-          // Starts before, add here", "-          _regions.add(i, region);", "-          added = true;", "-          break;", "+      int index = getIndexOf(_current);", "+      // only add if current, previous, and next are not already the region; prevents trivial duplicates", "+      if (!region.equals(_current) && ", "+          ((index==_regions.size()-1) || (!region.equals(_regions.get(index+1)))) &&", "+          ((index<=0) || (!region.equals(_regions.get(index-1))))) {", "+        if ((_current!=null) && (index>=0)) {", "+          _regions.add(index+1, region);", "-        if ( newStart == oldStart) {", "-          // Starts at the same place", "-          int oldEnd = r.getEndOffset();", "-          int newEnd = region.getEndOffset();", "-          ", "-          if ( newEnd < oldEnd) {", "-            // Ends before, add here", "-            _regions.add(i, region);", "-            added = true;", "-            break;", "+        else {", "+          _regions.add(region);", "+        }", "+        ", "+        _current = region;", "+        final int regionIndex = getIndexOf(region);", "+        final String stackTrace = StringOps.getStackTrace();", "+        ", "+        // notify", "+        Utilities.invokeLater(new Runnable() { public void run() {", "+          _lock.startRead();", "+          try {", "+            for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region, regionIndex); }", "+          } finally { _lock.endRead(); }", "+        } });", "+        ", "+        // remove region if necessary", "+        shrinkManager();", "+      }", "+      else {", "+        // if next was the region to be added, make that the current region", "+        if ((index<_regions.size()-1) && (region.equals(_regions.get(index+1)))) {", "+          nextCurrentRegion();", "+        }", "+        // if previous was the region to be added, make that the current region", "+        else if ((index>0) && (region.equals(_regions.get(index-1)))) {", "+          prevCurrentRegion();", "+        }", "+      }", "+    }", "-      if (!added) { _regions.add(region); }", "-          ", "-      // notify", "-      Utilities.invokeLater (new Runnable() { public void run() {", "-        _lock.startRead();", "-        try {", "-          for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region); }", "-        } finally { _lock.endRead(); }", "-      } });"]}], "num": 25453}
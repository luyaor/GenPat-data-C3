{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18d5fb59268b88809479a446738ad7a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72aef74716ef5177920c10340cbc56da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "ef7dc3345b6835fe8ebb574f1a9119ee4c786794", "commitAfterChange": "21836dcccd81c2207652ee85b319b723ac9ff10b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public void testFormat()", "signatureAfterChange": "    public void testFormat()", "diff": ["-    Vector<Integer> iv = new Vector<Integer>();", "-    assertEquals(\"[]\", _ivo.format(iv));", "+    Vector<String> sv = new Vector<String>();", "+    assertEquals(\"\", _svo.format(sv));", "-    iv.add(new Integer(-33));", "-    assertEquals(\"[-33]\", _ivo.format(iv));", "+    sv.add(\"\");", "+    assertEquals(\"[]\", _svo.format(sv));", "-    iv.add(new Integer(2));", "-    assertEquals(\"[-33,2]\", _ivo.format(iv));", "+    sv.add(\"-33\");", "+    assertEquals(\"[,-33]\", _svo.format(sv));", "-    iv.add(new Integer(0));", "-    assertEquals(\"[-33,2,0]\", _ivo.format(iv));", "+    sv.add(\"2\");", "+    assertEquals(\"[,-33,2]\", _svo.format(sv));", "+", "+    sv.add(\"\");", "+    assertEquals(\"[,-33,2,]\", _svo.format(sv));", "+", "+    sv.add(\",\");", "+    assertEquals(\"[,-33,2,,\\\\,]\", _svo.format(sv));", "+", "+    sv.add(\"0\");", "+    assertEquals(\"[,-33,2,,\\\\,,0]\", _svo.format(sv));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ebe7f4a6c294ca28cf16c4ba33c5dfd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "92062677ca813cb9ab44428a0d2d54f0c3309b04", "commitAfterChange": "274f7defc49003e66c942e814c9ce22958b3814c", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "signatureAfterChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "diff": ["-    _finalCount = 0;", "-    _finalDocCount = 0;", "+    _finalPaneCt = 0;", "+    _finalDocCt = 0;", "-        _finalCount++;", "+        _finalPaneCt++;", "-        _finalDocCount++;", "+        _finalDocCt++;", "-    _ct = 0;", "-    do { _cleanup(); }", "-    while (_finalDocCount != 6 || _finalCount != 6);", "+    int ct = 0;", "+    do {  ", "+      // make sure that the event queue is empty", "+      Utilities.clearEventQueue();", "+      Utilities.clearEventQueue();", "+      ", "+      System.gc();", "+      System.runFinalization();", "+      System.gc();", "+      ct++; ", "+    }", "+    while(ct < 10 && (_finalDocCt != 6 || _finalPaneCt != 6));", "-    if (_ct > 1) System.out.println(\"testDocumentPaneMemoryLeak required \" + _ct + \" iterations\");", "+    if (ct == 10) fail(\"Failed to reclaim all documents; panes left = \" + (6-_finalPaneCt) + \"; docs left = \" + ", "+                       (6 - _finalDocCt));", "+    ", "+    if (ct > 1) System.out.println(\"testDocumentPaneMemoryLeak required \" + ct + \" iterations\");", "-    assertEquals(\"all the defdocs should have been garbage collected\", 6, _finalDocCount);", "-    assertEquals(\"all the panes should have been garbage collected\", 6, _finalCount);", "-//    System.err.println(\"_finalCount = \" + _finalCount);", "+    assertEquals(\"all the defdocs should have been garbage collected\", 6, _finalDocCt);", "+    assertEquals(\"all the panes should have been garbage collected\", 6, _finalPaneCt);", "+//    System.err.println(\"_finalPaneCt = \" + _finalPaneCt);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1401e65059959950876565cf8ff206d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "a6ad77fef884f528ddfb31a18f08f168fcd5e3f2", "commitAfterChange": "20e19df5b6c16c841aeff102df396402e35bacf3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "diff": ["-    String stackTrace = StringOps.getStackTrace(failure.thrownException());", "+    String exception = failure.thrownException().toString();", "+    StackTraceElement[] stackTrace = failure.thrownException().getStackTrace();", "+    StringBuilder sb = new StringBuilder();", "+    sb.append(exception);", "+    sb.append('\\n');", "+    for(StackTraceElement s: stackTrace) {", "+      sb.append(\"\\tat \");", "+      sb.append(s);", "+    }", "+    String combined = sb.toString();", "-    if (stackTrace.indexOf(classNameAndTest) == -1) {", "+    if (combined.indexOf(classNameAndTest) == -1) {", "-      if (stackTrace.indexOf(className) == -1) {", "+      if (combined.indexOf(className) == -1) {", "-      lineNum = _lineNumber(stackTrace, classNameAndTest);", "+      lineNum = _lineNumber(combined, classNameAndTest);", "-    String exception =  (isError) ? failure.thrownException().toString(): ", "+    String message =  (isError) ? failure.thrownException().toString(): ", "-      // TODO: replace LL stack trace elements", "-      return new JUnitError(new File(\"nofile\"), 0, 0, exception, !isFailure, testName, className, stackTrace);", "+      return new JUnitError(new File(\"nofile\"), 0, 0, message, !isFailure, testName, className, exception, stackTrace);", "-    // The code augmentation for elementary and intermediate level files causes the error to be highlighted on", "-    // the wrong line.  The following code adjusts for this discrepancy.", "-    String name = file.getName();", "-    int adjLineNum;", "-    if (name.endsWith(\".dj0\") || name.endsWith(\".dj0\")) adjLineNum = lineNum - 1;", "-    else adjLineNum = lineNum;", "-    // TODO: replace LL stack trace elements", "-    return new JUnitError(file, adjLineNum, 0, exception, !isFailure, testName, className, stackTrace);", "+    return new JUnitError(file, lineNum, 0, message, !isFailure, testName, className, exception, stackTrace);"]}], "num": 27304}
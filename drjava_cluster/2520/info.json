{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da93058a808a0999e61386bde0aa66d7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "703c1671299e4d2e879a53a219ec5921", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "101c103fed282ea73966b5bc0dce7152a188fba5", "commitAfterChange": "2bbdbef8ef11cd93c30f52236eee8443bfc75e9d", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": "     public void viewInteractionsClassPath()", "signatureAfterChange": "     public void viewInteractionsClassPath()", "diff": ["-    String cp = IterUtil.multilineToString(_model.getInteractionsClassPath());", "+    String cp = IterUtil.multilineToString(IterUtil.filter(_model.getInteractionsClassPath(),", "+                                                           new Predicate<File>() {", "+      HashSet<File> alreadySeen = new HashSet<File>();", "+      public boolean contains(File arg) {", "+        // filter out empty strings and duplicates", "+        return !(\"\".equals(arg.toString().trim())) && alreadySeen.add(arg);", "+      }", "+    }));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b99e00ac532eee03a162cf6192250141", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ComposedMap.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public ComposedMap(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child)", "signatureAfterChange": "      public ComposedMap(Map<? extends K, ? extends X> map1, Map<? super X, ? extends V> map2)", "diff": ["-  public ComposedMap(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child) {", "-    _parent = parent;", "-    _child = child;", "-    _keys = new UnionSet<K>(parent.keySet(), child.keySet());", "-  }", "+  public ComposedMap(Map<? extends K, ? extends X> map1, Map<? super X, ? extends V> map2) {", "+    _map1 = map1;", "+    _map2 = map2;", "+    _keys = new FilteredSet<K>(_map1.keySet(), new Predicate<K>() {", "+      public boolean contains(K key) { return _map2.containsKey(_map1.get(key)); }", "+    });"]}], "num": 2520}
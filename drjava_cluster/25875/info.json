{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5c35f08f10bf6ed6877556aaf57cd63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "188909faf375d598f3b74d9beffcb65d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersionTest.java", "commitBeforeChange": "391e45139a20d29595a89151324a2e220b5d12fb", "commitAfterChange": "b3945c97981b1413d538a04b218b57bbc9b0fda9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public void testParseFullVersionSort()", "signatureAfterChange": "    public void testParseFullVersionSort() throws IOException", "diff": ["-  public void testParseFullVersionSort() {", "+  public void testParseFullVersionSort() throws IOException {", "-    FullVersion vMint = parseFullVersion(\"1.6.0_11\",\"mint\",\"mint\");", "+    File mintJDK = File.createTempFile(\"jdk-mint-\",\".tmp\");", "+    mintJDK.delete();", "+    FullVersion vMint = parseFullVersion(\"1.6.0_11\",\"mint\",\"mint\", mintJDK);", "-    FullVersion vOpenJDK = parseFullVersion(\"1.6.0_11\",\"OpenJDK Runtime Environment\",\"Sun Microsystems Inc.\");", "+    File hjJDK = File.createTempFile(\"jdk-hj-\",\".tmp\");", "+    hjJDK.delete();", "+    FullVersion vHJ = parseFullVersion(\"1.6.0_11\",\"hj\",\"hj\", hjJDK);", "+    assertEquals(UNKNOWN, vHJ.vendor());", "+    assertEquals(\"6.0_11\", vHJ.versionString());", "+    File nextGenJDK = File.createTempFile(\"jdk-nextgen-\",\".tmp\");", "+    nextGenJDK.delete();", "+    FullVersion vNextGen = parseFullVersion(\"1.6.0_11\",\"nextgen\",\"nextgen\", nextGenJDK);", "+    assertEquals(UNKNOWN, vNextGen.vendor());", "+    assertEquals(\"6.0_11\", vNextGen.versionString());", "+    FullVersion vOpenJDK = parseFullVersion(\"1.6.0_11\",\"OpenJDK Runtime Environment\",", "+                                            \"Sun Microsystems Inc.\");", "-    FullVersion vApple = parseFullVersion(\"1.6.0_11\",\"Java(TM) 2 Runtime Environment, Standard Edition\",\"\\\"Apple Computer, Inc.\\\"\");", "+    FullVersion vApple = parseFullVersion(\"1.6.0_11\",\"Java(TM) 2 Runtime Environment, Standard Edition\",", "+                                          \"\\\"Apple Computer, Inc.\\\"\");", "-    FullVersion vSun = parseFullVersion(\"1.6.0_11\",\"Java(TM) 2 Runtime Environment, Standard Edition\",\"Sun Microsystems Inc.\");", "+    FullVersion vSun = parseFullVersion(\"1.6.0_11\",\"Java(TM) 2 Runtime Environment, Standard Edition\",", "+                                        \"Sun Microsystems Inc.\");", "+    sorter.add(vHJ);", "+    sorter.add(vNextGen);", "-    Iterable<FullVersion> expected = IterUtil.make(vUnrecognized, vMint, vOpenJDK, vApple, vSun);", "+    // alphabetically ordered by file: jdk-hj... < jdk-mint... < jdk-nextgen...", "+    Iterable<FullVersion> expected = IterUtil.make(vUnrecognized, vHJ, vMint, vNextGen, vOpenJDK, vApple, vSun);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd9005543a08ff62c0123c7e598e5e1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InsertVariableDialog.java", "commitBeforeChange": "f88a51007770d2637f5170b66e852db63e500083", "commitAfterChange": "a35de807c6239a74c75cd1d9a337e2c468729622", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      protected void updatePanes()", "signatureAfterChange": "      protected void updatePanes()", "diff": ["+    _tabbedPane.setSelectedIndex(0);", "+    String category = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());", "+    Map<String, DrJavaProperty> properties = PropertyMaps.ONLY.getProperties(category);", "+    _varTable.get(category).getSelectionModel().setSelectionInterval(0,0);", "+    String key = _varTableModel.get(category).getValueAt(_varTable.get(category).getSelectedRow(),0).toString();", "+    DrJavaProperty value = properties.get(key);", "+    _varValueField.setText(value.toString());", "+    _helpPane.setText(value.getHelp());", "+    _selected = new edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty>(key, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d30d0458b3f54e648e1e10b3a3a5abc4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "edb6c56f8ad5495255b4157f1e495f302271cd2d", "commitAfterChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void testInteractionsCanSeeCompile()     throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testInteractionsCanSeeCompiledClasses()     throws BadLocationException, IOException, InterruptedException", "diff": ["-  public void testInteractionsCanSeeCompile()", "+  public void testInteractionsCanSeeCompiledClasses()", "-    OpenDefinitionsDocument doc = setupDocument(FOO_TEXT);", "-    _doCompile(doc, tempFile());", "+    // Compile Foo", "+    OpenDefinitionsDocument doc1 = setupDocument(FOO_TEXT);", "+    File dir1 = new File(_tempDir, \"dir1\");", "+    dir1.mkdir();", "+    File file1 = new File(dir1, \"TestFile1.java\");", "+    _doCompile(doc1, file1);", "-", "+    assertEquals(\"interactions result\",", "+                 \"DrJavaTestFoo\",", "+                 result);", "+    ", "+    // Add directory 1 to extra classpath and close doc1", "+    Vector<File> cp = new Vector<File>();", "+    cp.addElement(dir1);", "+    DrJava.CONFIG.setSetting(EXTRA_CLASSPATH, cp);", "+    _model.closeFile(doc1);", "+    ", "+    // Compile Baz which extends Foo in another directory.", "+    OpenDefinitionsDocument doc2 = setupDocument(BAZ_TEXT);", "+    File dir2 = new File(_tempDir, \"dir2\");", "+    dir2.mkdir();", "+    File file2 = new File(dir2, \"TestFile1.java\");", "+    _doCompile(doc2, file2);", "+    ", "+    // Ensure that Baz can use the Foo class from extra classpath", "+    result = interpret(\"new DrJavaTestBaz().getClass().getName()\");", "+    assertEquals(\"interactions result\",", "+                 \"DrJavaTestBaz\",", "+                 result);", "+    ", "+    // Also ensure that Foo can be used directly", "+    result = interpret(\"new DrJavaTestFoo().getClass().getName()\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c6f315661ef9574c6973d7e350f960", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ea3de3bd50de8d728bdb5d615bd9b8838d2e94b4", "commitAfterChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "methodNumberBeforeChange": 292, "methodNumberAfterChange": 298, "signatureBeforeChange": "   private void _close()", "signatureAfterChange": "   private void _close()", "diff": ["-    if ((_model.isProjectActive() && _model.getActiveDocument().inProjectPath()) ||", "-        _model.getActiveDocument().isAuxiliaryFile()) {", "-      ", "-      String fileName = null;", "-      OpenDefinitionsDocument doc = _model.getActiveDocument();", "-      try {", "-        if (doc.isUntitled()) fileName = \"File\";", "-        else fileName = _model.getActiveDocument().getFile().getName();", "+    // this works with multiple selected files now", "+    java.util.List<OpenDefinitionsDocument> l = _model.getDocumentNavigator().getSelectedDocuments();", "+    boolean queryNecessary = false; // is a query necessary because the files are project or auxiliary files?", "+    for (OpenDefinitionsDocument doc: l) {", "+      if ((_model.isProjectActive() && doc.inProjectPath()) || doc.isAuxiliaryFile()) {", "+        queryNecessary = true;", "+        break;", "-      catch(FileMovedException e) { fileName = e.getFile().getName(); }", "-      String text = \"Closing this file will permanently remove it from the current project.\" + ", "-        \"\\nAre you sure that you want to close this file?\";", "-      ", "+    }", "+    if (queryNecessary) {", "+      int rc;", "+      String fileName = null;", "-      int rc = ", "-        JOptionPane.showOptionDialog(MainFrame.this, text,\"Close \" + fileName + \"?\", JOptionPane.YES_NO_OPTION,", "-                                     JOptionPane.QUESTION_MESSAGE, null, options, options[1]);", "+      if (l.size()==1) {", "+        OpenDefinitionsDocument doc = l.get(0);", "+        try {", "+          if (doc.isUntitled()) fileName = \"File\";", "+          else fileName = _model.getActiveDocument().getFile().getName();", "+        }", "+        catch(FileMovedException e) { fileName = e.getFile().getName(); }", "+        String text = \"Closing this file will permanently remove it from the current project.\" + ", "+          \"\\nAre you sure that you want to close this file?\";", "+        ", "+        rc = JOptionPane.showOptionDialog(MainFrame.this, text,\"Close \" + fileName + \"?\", JOptionPane.YES_NO_OPTION,", "+                                          JOptionPane.QUESTION_MESSAGE, null, options, options[1]);", "+      }", "+      else {", "+        fileName = l.size()+\" files\";", "+        String text = \"Closing these \"+fileName+\" will permanently remove them from the current project.\" + ", "+          \"\\nAre you sure that you want to close these files?\";", "+        ", "+        rc = JOptionPane.showOptionDialog(MainFrame.this, text, \"Close \"+l.size()+\" files?\", JOptionPane.YES_NO_OPTION,", "+                                          JOptionPane.QUESTION_MESSAGE, null, options, options[1]);", "+      }", "-    //Either this is an external file or user actually wants to close it", "-    _model.closeFile(_model.getActiveDocument());", "+    // Either this is an external file or user actually wants to close it", "+    for(OpenDefinitionsDocument doc: l) {", "+      _model.closeFile(doc);", "+    }"]}], "num": 25875}
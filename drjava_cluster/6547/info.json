{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dfbde52e2b41d9fcc44944a19cfaff2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01ef938893d04c7c9d88e525a7b783f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected InstanceData[] getArgTypesForInvocation(ParenthesizedExpressionList pel)", "signatureAfterChange": "   protected InstanceData[] getArgTypesForInvocation(ParenthesizedExpressionList pel)", "diff": ["-    ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+    ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages,", "+                                                          _vars, _thrown);", "-        _addError(\"Cannot pass a class or interface name as a constructor argument.  Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);", "+        _addError(\"Cannot pass a class or interface name as a constructor argument.  \" + ", "+                  \"Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "031dcaafad3242dd0862059ba19851d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "be84679bc73e85f88d6958fbfdf8b35be73855ab", "commitAfterChange": "a6b0a623369310bca609596a45d42dfc11ddae97", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   private CompilerError parseJavadocErrorLine(String line)", "signatureAfterChange": "   private CompilerError parseJavadocErrorLine(String line)", "diff": ["-          lineno = Integer.valueOf(linenoString.toString()).intValue();", "+          // Adjust Javadoc's one-based line numbers to our zero-based indeces.", "+          lineno = Integer.valueOf(linenoString.toString()).intValue() -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09a6b3b7c8052257374b7a7a5741aaa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "17f7883ffae3637cf9ec6b5aa5b32f12aa6f1a56", "commitAfterChange": "c3f7f9d7c32c110a7370bfc2864b2e98a988bba6", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "          public void updateLocation()", "signatureAfterChange": "          public void updateLocation()", "diff": ["-                                 \":\" + doc.getCurrentCol());", "+                                 \":\" + doc.getCurrentCol() + \"\\t\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b3d644f8c669fce9ec7f696caeac03b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   public TypeData forArrayInitializer(ArrayInitializer that)", "signatureAfterChange": "   public TypeData forArrayInitializer(ArrayInitializer that)", "diff": ["-    throw new RuntimeException(\"Internal Program Error: forArrayInitializer should never be called, but it was.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: forArrayInitializer should never be called, but it was.\" + ", "+                               \"  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10be7e3e645c21ce6ba9944e93a3f625", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "facb31d52d0108009578d6a1708ac1dfc68b98b8", "commitAfterChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void selectItem(JUnitError error)", "signatureAfterChange": "     public void selectItem(JUnitError error)", "diff": ["-      int startPos = _errorListPositions[i].getOffset();", "+      int startPos = _errorListPositions[i].getOffset() + 16; //16 ='s for the beginning line"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "117e4daa2691abcfaaa2b56fd867faa9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "   public void forBitwiseNotExpressionDoFirst(BitwiseNotExpression that)", "signatureAfterChange": "   public void forBitwiseNotExpressionDoFirst(BitwiseNotExpression that)", "diff": ["-    _addAndIgnoreError(\"Bitwise not expressions cannot be used at any language level.  Perhaps you meant to negate this value using regular not (!)\", that);", "+    _addAndIgnoreError(\"Bitwise not expressions cannot be used at any language level.\" + ", "+                       \"  Perhaps you meant to negate this value using regular not (!)\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123d453c9915312ad47c778c9d619243", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "45f11437d24a95250c66e3a94437d7de4d6682c1", "commitAfterChange": "97bb3c70440590a053a3f2aff064ff2a0f94447e", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public void testInterfaceNameMisleading() throws BadLocationException", "signatureAfterChange": "   public void testInterfaceNameMisleading() throws BadLocationException", "diff": ["+      \" \\\"class Foo\\\"\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16ee87ad9c28194af83dcdd22c7d2875", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,                                                    boolean addError)", "signatureAfterChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,                                                    boolean addError)", "diff": ["-//        _addAndIgnoreError(\"The class \" + qualifiedClassName + \" was not found in the file \" + sourceFile, new NullLiteral(si));", "+//        _addAndIgnoreError(\"The class \" + qualifiedClassName + \" was not found in the file \" + sourceFile, ", "+//                           new NullLiteral(si));", "-//    if (qualifiedClassName.contains(\"List\")) {System.out.println(\"Line 777: There are \" + continuations.size() + \" continuations \" + continuations);}", "+//    if (qualifiedClassName.contains(\"List\")) {System.out.println(\"Line 777: There are \" + continuations.size() + ", "+//      \" continuations \" + continuations);}", "-          continuations.put(qualifiedClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, createANewInstanceOfMe(sourceFile)));//this));", "+          continuations.put(qualifiedClassName, ", "+                            new Pair<SourceInfo, LanguageLevelVisitor>(si, createANewInstanceOfMe(sourceFile)));//this));", "-            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + \" is present, but does not have proper read permissions\", new NullLiteral(si));", "+            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + ", "+                               \" is present, but does not have proper read permissions\", new NullLiteral(si));", "-            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + \" needs to be recompiled, but its directory does not have proper write permissions\", new NullLiteral(si));", "+            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + ", "+                               \" needs to be recompiled, but its directory does not have proper write permissions\", ", "+                               new NullLiteral(si));", "-            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + \" is present, but its full path cannot be resolved (symbolic links may not have proper permissions)\", new NullLiteral(si));", "+            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + ", "+                               \" is present, but its full path cannot be resolved \" + ", "+                               \"(symbolic links may not have proper permissions)\", ", "+                               new NullLiteral(si));", "-          throw new RuntimeException(\"Internal Program Error: Invalid file format not caught initially\" + sourceFile.getName() + \". Please report this bug\");", "+          throw new RuntimeException(\"Internal Program Error: Invalid file format not caught initially\" + ", "+                                     sourceFile.getName() + \". Please report this bug\");", "-              //  errors.add(new Pair<String, JExpressionIF>(\"Could not resolve \" + className, new NullLiteral(p.getFirst())));", "+              //  errors.add(new Pair<String, JExpressionIF>(\"Could not resolve \" + className, ", "+              //                                             new NullLiteral(p.getFirst())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16f6e83ad1457a89c0238aead022a54b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/Version.java", "commitBeforeChange": "af42ada0b6687466ab569107eaa8cedede22fcf7", "commitAfterChange": "305e74f11a5e82bdcb3b368a6f9906d7c49642e1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    private static Date _getBuildDate()", "signatureAfterChange": "    private static Date _getBuildDate()", "diff": ["-      return new SimpleDateFormat(\"yyyyMMdd-HHmm\").parse(BUILD_TIME_STRING);", "+      return new SimpleDateFormat(\"yyyyMMdd-HHmm z\").parse(BUILD_TIME_STRING + \" GMT\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "174d8238bcd34cd2417ef28380802df3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected Data _getData()", "signatureAfterChange": "   protected Data _getData()", "diff": ["-  /**The top level type checker does not have a data*/", "+  /**The top level type checker does not have a data */", "-    throw new RuntimeException(\"Internal Program Error: _getData() shouldn't get called from TypeChecker.  Please report this bug.\");", "+    throw new RuntimeException(\"Internal Program Error: _getData() shouldn't get called from TypeChecker.  \" +", "+                               \"Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b5c703923db747bb746f5942e8d38b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   protected static void _addAndIgnoreError(String message, JExpressionIF that)", "signatureAfterChange": "   protected static void _addAndIgnoreError(String message, JExpressionIF that)", "diff": ["-      throw new RuntimeException(\"Internal Program Error: _addAndIgnoreError called while _errorAdded was true.  Please report this bug.\");", "+      throw new RuntimeException(\"Internal Program Error: _addAndIgnoreError called while _errorAdded was true.\" + ", "+                                 \"  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "283b108e5809f10b68feb26808760ff5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result)", "signatureAfterChange": "   public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result)", "diff": ["-  /**Make sure that the condition statement of the while returns type boolean. */", "+  /** Make sure that the condition statement of the while returns type boolean. */", "-      if (!condition_result.isInstanceType()) {", "-        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      if (! condition_result.isInstanceType()) {", "+        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, it is a class or \" +", "+                    \"interface name\", that);", "-        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that.getCondition());", "+        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, its type is \" + ", "+                  condition_result.getName(), that.getCondition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a88f7d29078200595305e88866955d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "f3cec878a36c37903881e7e5ebc712640ce9c55f", "commitAfterChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "      public int getCurrentLine()", "signatureAfterChange": "   public int getCurrentLine()", "diff": ["-  public int getCurrentLine() { return _doc.getLineOfOffset(getCaretPosition()); }", "+    * @return current line of the definitions pane, >=1 */", "+  public int getCurrentLine() { return _doc.getLineOfOffset(getCaretPosition())+1; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d1daf658054586df1afc61ccd2db198", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public TypeData complexThisConstructorInvocationNotAllowed(ComplexThisConstructorInvocation that)", "signatureAfterChange": "   public TypeData complexThisConstructorInvocationNotAllowed(ComplexThisConstructorInvocation that)", "diff": ["-   */", "+  /** ComplexThisConstructorInvocations are not ever allowed--throw an appropriate error. */", "-    _addError(\"Constructor Invocations of this form are never allowed.  A constructor invocation can appear here, but it must either be a super constructor invocation or have the form this(...)\", that);", "+    _addError(\"Constructor Invocations of this form are never allowed.  A constructor invocation can appear here, \"", "+                + \"but it must either be a super constructor invocation or have the form this(...)\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e4b7ca7f63c55d56b4d6265e89f453d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModel.java", "commitBeforeChange": "209bedfa2bd8c92b4b250a04fcd63c3f7f96576a", "commitAfterChange": "8993de4964b51e2163e6ef77e75f505716cdcf78", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tprivate int _moveRight(int count, \t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor, \t\t\t\t\t\t\t\t\t\t\t\t int currentOffset)", "signatureAfterChange": " \tprivate int _moveRight(int count, \t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor, \t\t\t\t\t\t\t\t\t\t\t\t int currentOffset)", "diff": ["-\t\t\twhile (count >= copyCursor.current().getSize()){", "+\t\t\twhile (count >= copyCursor.current().getSize() - currentOffset){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ef0f158f46e1736f4c819f54c4b8d82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp() throws Exception", "signatureAfterChange": "   public void setUp() throws Exception", "diff": ["-      \"   (file (name \\\"src/test1.java\\\")(select 32 32)(active)))\";", "-//      \"   (file (name \\\"src/test2.java\\\")(select 32 32)(active)))\";", "+      \"   (file (name \\\"src/test1.java\\\")(select 32 32)(active))\" +", "+      \"   (file (name \\\"src/test2.java\\\")(select 32 32)))\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f1982aaf00423acc4b9b3be6fbc634b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d0727a77251489c271609794ef5d58d9b3aab593", "commitAfterChange": "e782d4da2d7bff038017015047af677bda357a17", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 187, "signatureBeforeChange": "      public void nonTestCase()", "signatureAfterChange": "      public void nonTestCase()", "diff": ["-        \"For information on how to write JUnit TestCases, visit:\\n\\n\" +", "+        \"For information on how to write JUnit TestCases, view the JUnit\\n\" +", "+        \"chapter in the User Documentation or the online Help, or visit:\\n\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47ec724aa59428c8cb2be979638be9ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public void forBitwiseOrExpressionDoFirst(BitwiseOrExpression that)", "signatureAfterChange": "   public void forBitwiseOrExpressionDoFirst(BitwiseOrExpression that)", "diff": ["-    _addAndIgnoreError(\"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", that);", "+    _addAndIgnoreError(\"Bitwise or expressions cannot be used at any language level.\" + ", "+                       \"  Perhaps you meant to compare two values using regular or (||)\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57f8d9d8112200011cbc3219301fe32c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public TypeData forBlock(Block that)", "signatureAfterChange": "   public TypeData forBlock(Block that)", "diff": ["-  /*Visit the block, and update with what it assigns.  Return the result of visiting the block.*/", "+  /* Visit the block, and update with what it assigns.  Return the result of visiting the block. */", "-    if (bd == null) { throw new RuntimeException(\"Internal Program Error: Enclosing body does not contain this block.  Please report this bug\"); }", "+    if (bd == null) ", "+      throw new RuntimeException(\"Internal Program Error: Enclosing body does not contain this block.\" +", "+                                                 \"  Please report this bug\");", "-    BodyTypeChecker btc = createANewInstanceOfMe(bd, _file, _package, _importedFiles, _importedPackages, cloneVariableDataList(_vars), _thrown);", "+    BodyTypeChecker btc = createANewInstanceOfMe(bd, _file, _package, _importedFiles, _importedPackages, ", "+                                                 cloneVariableDataList(_vars), _thrown);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6defb71af89f0cc5c571ba3063d756ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorCaretListener.java", "commitBeforeChange": "0d6a1751a06319b8d446186ea0aafba68239ee0c", "commitAfterChange": "50d54a2cc075d489d4814ce780949e6748ba1350", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private void _highlightErrorInSource(int newIndex)", "signatureAfterChange": "   private void _highlightErrorInSource(int newIndex)", "diff": ["-      if (_errorListPane.getLastDefPane() != null)", "+      if (_errorListPane.getLastDefPane() != null) {", "-      _definitionsPane.addErrorHighlight(prevNewline, nextNewline);", "+      }", "+      _definitionsPane.addErrorHighlight(prevNewline+1, nextNewline);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "733ca3578558376e0abd5565cc5fc4db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "09bec3d114e78a39aad7410d5a4ed3ab2cdf1dc4", "commitAfterChange": "8ece0edfbf0fa97c28d74f8231f220f413cd26e5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private void _setupFontPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupFontPanel(ConfigPanel panel)", "diff": ["-                                               \"<html>The font for displaying line numbers.<br>\" +", "-                                               \"Cannot be displayed larger than the main font.</html>\"));", "+                                               \"<html>The font for displaying line numbers on the left side of<br>\" +", "+                                               \"the Definitions Pane if Show All Line Numbers is enabled.<br>\" +", "+                                               \"Cannot be displayed larger than the Main Font.</html>\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75b8667fac97244d116f4db0b2258f59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "28ed37193d3d1605a7ea343a3a2a748ce08a7b25", "commitAfterChange": "deccdad7d1e1e890f5a05d651027f51330f6ca59", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testMultipleFilesArray() throws BadLocationException", "signatureAfterChange": "   public void testMultipleFilesArray() throws BadLocationException", "diff": ["-    _log.log(\"testMultipleFilesArray completed\");", "+    _log.log(this + \".testMultipleFilesArray() completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "761be2fa476c293df7fb5d0e001e5cc7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result)", "signatureAfterChange": "   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result,                                        TypeData update_result, TypeData code_result)", "diff": ["-  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result) {", "+  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, ", "+                                      TypeData update_result, TypeData code_result) {", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or \" +", "+                  \"interface name\", that);", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that);", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + ", "+                  condition_result.getName(), that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f07796862fc0f02ab658657c10207d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/LineEnumRule.java", "commitBeforeChange": "a0fc8c5fa07b0843323281f1820fcdddd0e30323", "commitAfterChange": "d8a9b1581cb442d4a3822bc3181eb17c4d09e8c8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void updateFont()", "signatureAfterChange": "   public void updateFont()", "diff": ["-    SIZE = (int) _nfm.getStringBounds(\"99999\", getGraphics()).getWidth() + 3;", "+    SIZE = (int) _nfm.getStringBounds(\"99999\", getGraphics()).getWidth() + 3 + WHITE_SPACE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f8e19c515bf6870f32c22df71a41196", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result)", "signatureAfterChange": "   public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result,                                           TypeData thenStatement_result)", "diff": ["-  public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result) {", "+  public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, ", "+                                         TypeData thenStatement_result) {", "-        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, it is a class \" +", "+                    \"or interface name\", that);", "-        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());", "+        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, its type is \" + ", "+                  testExpression_result.getName(), that.getTestExpression());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82841552264795f28914c2d739f4777f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type)", "signatureAfterChange": "   public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type)", "diff": ["-   */", "+    */", "-    if (!(type instanceof ArrayData)) {_addError(\"You cannot initialize the non-array type \" + type.getName() + \" with an array initializer\", that); return type.getInstanceData();}", "+    if (!(type instanceof ArrayData)) {_addError(\"You cannot initialize the non-array type \" + type.getName() + ", "+                                                 \" with an array initializer\", that); return type.getInstanceData();}", "-        ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+        ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages,", "+                                                              _vars, _thrown);", "-        thingsThatHaveBeenAssigned.addAll(etc.thingsThatHaveBeenAssigned); //incorporate the things that were assigned in the expression here", "+        ", "+        // Incorporate the things that were assigned in the expression here", "+        thingsThatHaveBeenAssigned.addAll(etc.thingsThatHaveBeenAssigned); ", "+", "-              _addError(\"The elements of this initializer should have type \" + elementType.getName() + \" but element \" + i + \" has type \" + result[i].getSymbolData().getName(), (JExpression) that.getItems()[i]);", "+              _addError(\"The elements of this initializer should have type \" + elementType.getName() + \" but element \"", "+                          + i + \" has type \" + result[i].getSymbolData().getName(), (JExpression) that.getItems()[i]);", "-              assertInstanceType(result[i], \"The elements of this initializer should all be instances, but you have specified the type name \" + result[i].getName(), (JExpression) that.getItems()[i]);", "+              assertInstanceType(result[i], \"The elements of this initializer should all be instances,\" + ", "+                                 \" but you have specified the type name \" + result[i].getName(), ", "+                                 (JExpression) that.getItems()[i]);", "-    ", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "869dafcfa471b390ccc191d2aaef0b84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public TypeData forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that)", "signatureAfterChange": "   public TypeData forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that)", "diff": ["-   */", "+    */", "-      checkAccessibility(that, enclosingType.getSymbolData().getMav(), enclosingType.getSymbolData().getName(), enclosingType.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "+      checkAccessibility(that, enclosingType.getSymbolData().getMav(), enclosingType.getSymbolData().getName(), ", "+                         enclosingType.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "-      checkAccessibility(that, innerClass.getMav(), innerClass.getName(), innerClass, _data.getSymbolData(), \"class or interface\", true);", "+      checkAccessibility(that, innerClass.getMav(), innerClass.getName(), innerClass, _data.getSymbolData(), ", "+                         \"class or interface\", true);", "-               _addError (\"The constructor of a non-static inner class can only be called on an instance of its containing class (e.g. new \" + ", "-                   Data.dollarSignsToDots(enclosingType.getName()) + \"().new \" + that.getType().getName() + \"())\", that);", "+               _addError (\"The constructor of a non-static inner class can only be called on an instance of its\" + ", "+                          \" containing class (e.g. new \" + Data.dollarSignsToDots(enclosingType.getName()) + \"().new \" +", "+                          that.getType().getName() + \"())\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7e81b5979c805e94bafa2a931f68a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DocumentDebugAction.java", "commitBeforeChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "commitAfterChange": "ce1be4bebdf226da73b0f3a3408c7770e9d93c01", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected void _initializeRequests(Vector<ReferenceType> refTypes) throws DebugException", "signatureAfterChange": "   protected void _initializeRequests(Vector<ReferenceType> refTypes) throws DebugException", "diff": ["-          throw new LineNotExecutableException(toString()+\" not on an executable line; not set.\");", "+          throw new LineNotExecutableException(\"Cannot set breakpoint, line \"+getLineNumber()+\" is not an executable line.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "963e8230b74a4b240e82b8465de1f365", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "               public void testForCastExpressionOnly()", "signatureAfterChange": "          public void testForCastExpressionOnly()", "diff": ["-", "-      assertEquals(\"When value_result is subtype of type_result, return type_result.\", sd1.getInstanceData(), _etc.forCastExpressionOnly(cd, sd1, sd3.getInstanceData()));", "+      ", "+      assertEquals(\"When value_result is subtype of type_result, return type_result.\", sd1.getInstanceData(), ", "+                   _etc.forCastExpressionOnly(cd, sd1, sd3.getInstanceData()));", "-      assertEquals(\"When type_result is subtype of value_result, return type_result.\", sd3.getInstanceData(), _etc.forCastExpressionOnly(cd, sd3, sd1.getInstanceData()));", "+      assertEquals(\"When type_result is subtype of value_result, return type_result.\", sd3.getInstanceData(), ", "+                   _etc.forCastExpressionOnly(cd, sd3, sd1.getInstanceData()));", "-      assertEquals(\"When type_result and value_result are not subtypes of each other, return type_result\", sd2.getInstanceData(), _etc.forCastExpressionOnly(cd, sd2, sd1.getInstanceData()));", "+      assertEquals(\"When type_result and value_result are not subtypes of each other, return type_result\", ", "+                   sd2.getInstanceData(), _etc.forCastExpressionOnly(cd, sd2, sd1.getInstanceData()));", "-      assertEquals(\"Error message should be correct.\", \"You cannot cast an expression of type \" + sd1.getName() + \" to type \" + sd2.getName() + \" because they are not related\", errors.getLast().getFirst());     ", "+      assertEquals(\"Error message should be correct.\", \"You cannot cast an expression of type \" + sd1.getName() ", "+                     + \" to type \" + sd2.getName() + \" because they are not related\", ", "+                   errors.getLast().getFirst());     ", "-      assertEquals(\"When value_result is a SymbolData, return type_result\", fooMama.getInstanceData(), _etc.forCastExpressionOnly(cd, fooMama, foo));", "+      assertEquals(\"When value_result is a SymbolData, return type_result\", fooMama.getInstanceData(), ", "+                   _etc.forCastExpressionOnly(cd, fooMama, foo));", "-      assertEquals(\"Error message should be correct.\", \"You are trying to cast Foo, which is a class or interface type, not an instance.  Perhaps you meant to create a new instance of Foo\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct.\", ", "+                   \"You are trying to cast Foo, which is a class or interface type, not an instance.  \" ", "+                     + \"Perhaps you meant to create a new instance of Foo\",", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96c48161f29cb403d82dda824abc95a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT,", "-                                                         \"Prompt if Interactions Pane Exits Unexpectedly\", this,", "-                                                         \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "-                                                         \"in the Interactions Pane exits without the user clicking Reset.</html>\", false)", "+    ", "+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT,", "+                                                  \"Prompt if Interactions Pane Exits Unexpectedly\", ", "+                                                  this,", "+                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "+                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\",", "+                                                  false)", "-                                                         \"Prompt for Javadoc Destination\", this,", "+                                                         \"Prompt for Javadoc Destination\", ", "+                                                         this,", "-                                                         \"to select a destination directory.</html>\", false)", "+                                                         \"to select a destination directory.</html>\", ", "+                                                         false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JUNIT, \"Automatically Compile Before Testing\", this,", "+    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JUNIT, ", "+                                                         \"Automatically Compile Before Testing\", this,", "-//    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_RUN, \"Automatically Save and Compile Before Running Main Method\", this,", "-//                                                    \"<html>Whether DrJava should automatically save and compile before running<br>\" +", "-//                                                    \"a document's main method, or instead should ask the user each time.</html>\"));", "-//    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_DEBUG, \"Automatically Save and Compile Before Debugging\", this,", "-//                                                  \"<html>Whether DrJava should automatically save and compile before<br>\" +", "-//                                                  \"debugging or ask the user each time.</html>\"));", "+//    addOptionComponent(panel, ", "+//                       new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_RUN, ", "+//                                                  \"Automatically Save and Compile Before Running Main Method\", ", "+//                                                  this,", "+//                                                  \"<html>Whether DrJava automatically saves and compiles before running<br>\" +", "+//                                                  \"a document's main method or explicitly asks the user each time.</html>\"));", "+//    addOptionComponent(panel, ", "+//                       new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_DEBUG, ", "+//                                                  \"Automatically Save and Compile Before Debugging\", ", "+//                                                  this,", "+//                                                  \"<html>Whether DrJava automatically saves and compiles before<br>\" +", "+//                                                  \"debugging or explicitly asks the user each time.</html>\"));", "-", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC,", "-                                                         \"Warn on Breakpoint if Out of Sync\", this,", "-                                                         \"<html>Whether DrJava should warn the user if the class file<br>\" +", "-                                                         \"is out of sync before setting a breakpoint in that file.</html>\", false)", "+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC,", "+                                                  \"Warn on Breakpoint if Out of Sync\", ", "+                                                  this,", "+                                                  \"<html>Whether DrJava should warn the user if the class file<br>\" +", "+                                                  \"is out of sync before setting a breakpoint in that file.</html>\", ", "+                                                  false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE,", "-                                                         \"Warn if Debugging Modified File\", this,", "-                                                         \"<html>Whether DrJava should warn the user if the file being<br>\" +", "-                                                         \"debugged has been modified since its last save.</html>\", false)", "+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE,", "+                                                  \"Warn if Debugging Modified File\", ", "+                                                  this,", "+                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +", "+                                                  \"debugged has been modified since its last save.</html>\", ", "+                                                  false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF,", "-                                                         \"Warn to Restart to Change Look and Feel\", this,", "-                                                         \"<html>Whether DrJava should warn the user that look and feel<br>\" +", "-                                                         \"changes will not be applied until DrJava is restarted.</html>.\", false)", "+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF,", "+                                                  \"Warn to Restart to Change Look and Feel\", ", "+                                                  this,", "+                                                  \"<html>Whether DrJava should warn the user that look and feel<br>\" +", "+                                                  \"changes will not be applied until DrJava is restarted.</html>.\", ", "+                                                  false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.WARN_CHANGE_THEME,", "-                                                         \"Warn to Restart to Change Theme\", this,", "-                                                         \"<html>Whether DrJava should warn the user that theme<br>\" +", "-                                                         \"changes will not be applied until DrJava is restarted.</html>.\", false)", "+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_THEME,", "+                                                  \"Warn to Restart to Change Theme\", ", "+                                                  this,", "+                                                  \"<html>Whether DrJava should warn the user that theme<br>\" +", "+                                                  \"changes will not be applied until DrJava is restarted.</html>.\", ", "+                                                  false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.WARN_PATH_CONTAINS_POUND,", "-                                                         \"Warn if File's Path Contains a '#' Symbol\", this,", "-                                                         \"<html>Whether DrJava should warn the user if the file being<br>\" +", "-                                                         \"saved has a path that contains a '#' symbol.<br>\" +", "-                                                         \"Users cannot use such files in the Interactions Pane<br>\" +", "-                                                         \"because of a bug in Java.</html>\", false)", "+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.WARN_PATH_CONTAINS_POUND,", "+                                                  \"Warn if File's Path Contains a '#' Symbol\", ", "+                                                  this,", "+                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +", "+                                                  \"saved has a path that contains a '#' symbol.<br>\" +", "+                                                  \"Users cannot use such files in the Interactions Pane<br>\" +", "+                                                  \"because of a bug in Java.</html>\", ", "+                                                  false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED, ", "-                                                         \"Show a notification window when the first DrJava error occurs\", this,", "-                                                         \"<html>Whether to show a notification window when the first DrJava error occurs.<br>\"+", "-                                                         \"If this is disabled, only the \\\"DrJava Error\\\" button will appear.</html>\", false)", "+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED, ", "+                                                  \"Show a notification window when the first DrJava error occurs\", ", "+                                                  this,", "+                                                  \"<html>Whether to show a notification window when the first DrJava error occurs.<br>\" +", "+                                                  \"If this is disabled, only the \\\"DrJava Error\\\" button will appear.</html>\", ", "+                                                  false)", "-    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+", "-                                                 \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", this, true));", "+    ", "+    addOptionComponent(panel, ", "+                       new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" +", "+                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + ", "+                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", this, true));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c94425e423ca25c91251e562306cdf3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "1ef951d20d276f3c46e1cf20ba51ab4b6ce00f53", "commitAfterChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static List<Constructor> getConstructors(Class cl, int params)", "signatureAfterChange": "   public static List<Constructor> getConstructors(Class cl, int params)", "diff": ["-      if (ms[i].getParameterTypes().length == params) {", "+      if (ms[i].getParameterTypes().length <= (params + 1)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb670d2fab94abb196cf5f1f08e62d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "                      public void testForConcreteMethodDef()", "signatureAfterChange": "                      public void testForConcreteMethodDef()", "diff": ["-                   \"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+                   \"Only constructors can have the same name as the class they appear in, and constructors do not \"", "+                     + \"have an explicit return type\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0925f59c7cf5546d47a489851c29c69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorCaretListener.java", "commitBeforeChange": "0d6a1751a06319b8d446186ea0aafba68239ee0c", "commitAfterChange": "50d54a2cc075d489d4814ce780949e6748ba1350", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _highlightErrorInSource(int newIndex)", "signatureAfterChange": "   private void _highlightErrorInSource(int newIndex)", "diff": ["-      _definitionsPane.addErrorHighlight(prevNewline, nextNewline);", "+      _definitionsPane.addErrorHighlight(prevNewline+1, nextNewline);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5ce4ec12f3c5398cc2ee0166ea43f2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DependenciesTest.java", "commitBeforeChange": "305e74f11a5e82bdcb3b368a6f9906d7c49642e1", "commitAfterChange": "91e85cbdc2d00720e67d2d90d58a8488ef150336", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testUtilVersion() throws Throwable", "signatureAfterChange": "   public void testUtilVersion() throws Throwable", "diff": ["-    Date required = new SimpleDateFormat(\"yyyyMMdd-HHmm\").parse(REQUIRED_UTIL_VERSION);", "+    Date required = new SimpleDateFormat(\"yyyyMMdd-HHmm z\").parse(REQUIRED_UTIL_VERSION + \" GMT\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a63838e8bf96337327dd4a75cb8a1010", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "fc51b2245942e6d87f48245a9b8cdb4aedbcacc2", "commitAfterChange": "973271a114877f62b3cb122ffc9ab5f28c91b43a", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public int getLineFirstCharPos(final int pos) throws BadLocationException", "signatureAfterChange": "   public int getLineFirstCharPos(final int pos) throws BadLocationException", "diff": ["-      _storeInCache(key, nonWSPos, Math.max(pos, nonWSPos));", "+      _storeInCache(key, nonWSPos, Math.max(pos - 1, nonWSPos));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a990e6e68d637bed7b396b565aed7cda", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public SymbolData handleAnonymousClassInstantiation(AnonymousClassInstantiation that, SymbolData superC)", "signatureAfterChange": "   public SymbolData handleAnonymousClassInstantiation(AnonymousClassInstantiation that, SymbolData superC)", "diff": ["-   */", "+    */", "-      throw new RuntimeException(\"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\");", "+      throw new RuntimeException(\"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.\" + ", "+                                 \"  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9a3c569a65b337183f6dfccfe913128", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private void _setupDebugPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupDebugPanel(ConfigPanel panel)", "diff": ["-   */", "+  /** Add all of the components for the Debugger panel of the preferences window. */", "-//      String howto =", "-//        \"\\nThe debugger is not currently active.  To use the debugger, you\\n\" +", "-//        \"must include Sun's tools.jar or jpda.jar on your classpath when\\n\" +", "-//        \"starting DrJava.  Do not use the \\\"-jar\\\" option, because it\\n\" +", "-//        \"overrides the classpath and will not include tools.jar.\\n\" +", "-//        \"For example, in Windows you might type:\\n\\n\" +", "-//        \"  java -classpath drjava.jar;c:\\\\path\\\\tools.jar edu.rice.cs.drjava.DrJava\\n\\n\" +", "-//        \"(Substituting the correct path for tools.jar.)\\n\" +", "-//        \"See the user documentation for more details.\\n\";", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DEBUG_STEP_JAVA,", "-                                                  \"Step Into Java Classes\", this,", "+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.DEBUG_STEP_JAVA,", "+                                                  \"Step Into Java Classes\", ", "+                                                  this,", "-    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+", "-                                                 \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", this, true));", "-    addOptionComponent(panel, new StringOptionComponent(OptionConstants.DEBUG_STEP_EXCLUDE,", "-                                                 \"Classes/Packages To Exclude\", this,", "+    addOptionComponent(panel, ", "+                       new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" +", "+                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" +", "+                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", ", "+                                          this, true));", "+    addOptionComponent(panel, ", "+                       new StringOptionComponent(OptionConstants.DEBUG_STEP_EXCLUDE,", "+                                                 \"Classes/Packages To Exclude\", ", "+                                                 this,", "-                                                 \"To exclude a package, specify <code>packagename.*</code> in the list.</html>\"));", "+                                                 \"To exclude a package, add <code>packagename.*</code> to the list.</html>\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae19448fa0a5a30d4b150adb912b5264", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 91, "signatureBeforeChange": "   public void addMethod(MethodData method, boolean isAugmentedCode)", "signatureAfterChange": "   public void addMethod(MethodData method, boolean isAugmentedCode)", "diff": ["-      LanguageLevelVisitor.errors.addLast(new Pair<String, JExpressionIF>(\"This method's signature conflicts with an automatically generated method's signature\", ", "-                                                                        md.getJExpression()));", "+      LanguageLevelVisitor.errors.", "+        addLast(new Pair<String, JExpressionIF>(\"This method's signature conflicts with an automatically generated \"", "+                                                  + \"method's signature\", ", "+                                                md.getJExpression()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af0e4e0f457aa82d2b248b4defa91547", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "42465b0c95801c83cae0d8e781c43cb17e95c775", "commitAfterChange": "dd7f7fbbfae186b155b4ab01f1629e1623154745", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private Class _checkBinaryExpression(String text, String leftExpected, String rightExpected)      throws ExceptionReturnedException", "signatureAfterChange": "      private Class _checkBinaryExpression(String text, String leftExpected, String rightExpected)      throws ExceptionReturnedException", "diff": ["-    assertEquals(\"Left should have unboxed correctly.\", leftExpected, actual);", "+    assertEquals(\"Left should have typed correctly.\", leftExpected, actual);", "-    assertEquals(\"Right should have unboxed correctly.\", rightExpected, actual);", "+    assertEquals(\"Right should have typed correctly.\", rightExpected, actual);", "-    _interpreter.interpret(text);", "+    _interpreter.interpret(\"int x; Integer X; Boolean B; boolean b; \"+ text);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b0e819fbe566c20196080786607832", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "8a099b753fcfb83be248d39f70edd5788e8b1222", "commitAfterChange": "4701dc92d8eb3da9b7f829b98cf858de261361f6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected String interpret(String input) throws BadLocationException", "signatureAfterChange": "   protected String interpret(String input) throws BadLocationException", "diff": ["-    final int resultsEndLocation = interactionsDoc.getLength() -", "+    // skip 1 for newline", "+    final int resultsEndLocation = interactionsDoc.getLength() - 1 -", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c6af046b445cacab3d27382e15447c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "ff27298276d0b205036fe4b017017ca3896e9890", "commitAfterChange": "4ddb555fbb20c498ee5f44bc087ce9c848b2e79c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public boolean hasNextInteraction()", "signatureAfterChange": "   public boolean hasNextInteraction()", "diff": ["-    return _nextInteraction < _interactions.size();", "+    return _currentInteraction < _interactions.size() - 1;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba270e5d3d04585a7867e0541d73c8a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/Version.java", "commitBeforeChange": "305e74f11a5e82bdcb3b368a6f9906d7c49642e1", "commitAfterChange": "91e85cbdc2d00720e67d2d90d58a8488ef150336", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    private static Date _getBuildDate()", "signatureAfterChange": "    private static Date _getBuildDate()", "diff": ["-      return new SimpleDateFormat(\"yyyyMMdd-HHmm\").parse(BUILD_TIME_STRING);", "+      return new SimpleDateFormat(\"yyyyMMdd-HHmm z\").parse(BUILD_TIME_STRING + \" GMT\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb4f604fa3c0500fe9b37c7705b93784", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "   public void forBitwiseAndExpressionDoFirst(BitwiseAndExpression that)", "signatureAfterChange": "   public void forBitwiseAndExpressionDoFirst(BitwiseAndExpression that)", "diff": ["-    _addAndIgnoreError(\"Bitwise and expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular and (&&)\", that);", "+    _addAndIgnoreError(\"Bitwise and expressions cannot be used at any language level.\" + ", "+                       \"  Perhaps you meant to compare two values using regular and (&&)\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be5b4a641f5e86de91ae97ef5a062b86", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fd26cc12b714205eb66ef1427d78a124c29d57fc", "commitAfterChange": "5323cbe0456b733643ef09074d427edff3b9adaa", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "   private void _showConfigException()", "signatureAfterChange": "   private void _showConfigException()", "diff": ["-                 \"values instead.\\n\");", "+                 \"values instead.\\n\\n\" +", "+                 \"The problem was:\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4ab53ad0d7d317a35e1d3bb46b85bfb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public Void forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public Void forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do \"", "+                           + \"not have an explicit return type\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7693f662a2632585a2bc8d383dfa4ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "7f62f2f9bc3bd568f4385528634c331480fbe08e", "commitAfterChange": "d55b82d942f5baa7bd5bf3a1d9f1f1f9dce04a39", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public boolean saveSettings() throws IOException", "signatureAfterChange": "   public boolean saveSettings() throws IOException", "diff": ["-                                      \"in your home directory.\\n\\n\" + ioe,", "+                                      \"in your home directory. Another process may be \\n\" +", "+                                      \"using the file.\\n\\n\" + ioe,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc0ed77c7b2abcae8d97d35f4803f53", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "signatureAfterChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "diff": ["-        _addError(\"Cannot pass a class or interface name as an argument to a method.  Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);", "+        _addError(\"Cannot pass a class or interface name as an argument to a method.\" +", "+                  \"  Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce6c3a4bffb76c8f8003a58c2a24d22c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "          public void test_addAndIgnoreError()", "signatureAfterChange": "          public void test_addAndIgnoreError()", "diff": ["-        assertEquals(\"Make sure runtime exception message is correct.\", \"Internal Program Error: _addAndIgnoreError called while _errorAdded was true.  Please report this bug.\",", "+        assertEquals(\"Make sure runtime exception message is correct.\", ", "+                     \"Internal Program Error: _addAndIgnoreError called while _errorAdded was true.\" + ", "+                     \"  Please report this bug.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3ee79e76b021495c72a6e9327598595", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-openjdk6/edu/rice/cs/drjava/model/compiler/Javac160OpenJDKCompiler.java", "commitBeforeChange": "391e45139a20d29595a89151324a2e220b5d12fb", "commitAfterChange": "b3945c97981b1413d538a04b218b57bbc9b0fda9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public String getName()", "signatureAfterChange": "    public String getName()", "diff": ["+", "+  public String getName() { return \"OpenJDK \" + _version.versionString(); }", "-  ", "-  public String getName() {", "-    return super.getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d69bb37e45a4c0caf5ef85428b31e17f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Void forPrimitiveTypeDoFirst(PrimitiveType that)", "signatureAfterChange": "   public Void forPrimitiveTypeDoFirst(PrimitiveType that)", "diff": ["-      _addError(\"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used at the Advanced level\", that);", "+      _addError(\"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used \" +", "+                \"at the Advanced level\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d88143531276924adabe7742f3224c5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public Void forPrimitiveTypeDoFirst(PrimitiveType that)", "signatureAfterChange": "   public Void forPrimitiveTypeDoFirst(PrimitiveType that)", "diff": ["-      _addError(\"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used at the Intermediate level\", that);", "+      _addError(\"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used \" +", "+                \"at the Intermediate level\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d97565cf1670f5f0ebc83697c52018be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "ff27298276d0b205036fe4b017017ca3896e9890", "commitAfterChange": "4ddb555fbb20c498ee5f44bc087ce9c848b2e79c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public InteractionsScriptModel(InteractionsModel model, List<String> interactions)", "signatureAfterChange": "   public InteractionsScriptModel(InteractionsModel model, List<String> interactions)", "diff": ["-    _nextInteraction = 0;", "+    _currentInteraction = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc46bdc1b0d68a4983e676a6dc70c158", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do \"", "+                           + \"not have an explicit return type\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0c79774ec7e6cd0cf8e6928dc4627c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2be551782e07a0651826ef4b6bbb14ef56227a55", "commitAfterChange": "90ce2e88786b4edf30eceb4ebde41290759300d3", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "      private void _showClassNotFoundError(ClassNotFoundException cnfe)", "signatureAfterChange": "      private void _showClassNotFoundError(ClassNotFoundException cnfe)", "diff": ["-               \"Please check that your classpath includes all relevant paths.\\n\\n\");", "+               \"Please check that your classpath includes all relevant \" +", "+               \"directories.\\n\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2728958c2898d7254208a977180ef17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.  Please report this bug.\");}", "+    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "+                                     \"  Please report this bug.\");}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5dc78ef3b49502d37a4c7e1a32104d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result)", "signatureAfterChange": "   public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result,                                               TypeData thenStatement_result, TypeData elseStatement_result)", "diff": ["-   */", "-  public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result) {", "+    */", "+  public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, ", "+                                             TypeData thenStatement_result, TypeData elseStatement_result) {", "-        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, it is a \" +", "+                  \"class or interface name\", ", "+                  that);", "-        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());", "+        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, its type is \"", "+                    + testExpression_result.getName(), that.getTestExpression());", "-    if (testExpression_result == null ||", "-        thenStatement_result == null || ", "-        elseStatement_result == null) { return null; }", "-", "+    if (testExpression_result == null || thenStatement_result == null || elseStatement_result == null) return null;", "-  }", "+  } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e84ba28a26f3c57a7707b5975b99d832", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "69317eecda3235d4815eb5d9a5b9e536b8481c4a", "commitAfterChange": "3549437d3f0aec05949cb330cf74662cd269bb15", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   private void _setupMiscPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel(ConfigPanel panel)", "diff": ["-                                                  \"<html>On some platforms, DrJava does not shut down properly when files are open<br>\" + ", "+                                                  \"<html>On some platforms, DrJava does not shut down properly when files are open<br>\"+", "-                                                  \"<html>Whether DrJava should listen to a socket (see below) so it<br>\" + ", "-                                                         \"can be remote controlled and told to open files.<br>\" + ", "+                                                  \"<html>Whether DrJava should listen to a socket (see below) so it<br>\"+", "+                                                         \"can be remote controlled and told to open files.<br>\"+", "-                                                         \"<html>A running instance of DrJava can be remote controlled and<br>\" + ", "-                                                         \"told to open files. This specifies the port used for remote control.</html>\"));", "+                                                         \"<html>A running instance of DrJava can be remote controlled and<br>\"+", "+                                                         \"told to open files. This specifies the port used for remote control.<br>\" + ", "+                                                         \"(Changes will not be applied until DrJava is restarted.)</html>\"));", "-                                                         \"<html>The delay in milliseconds that has to elapse before DrJava will check<br>\" + ", "+                                                         \"<html>The delay in milliseconds that has to elapse before DrJava will check<br>\"+", "-                                                         \"<html>The maximum number of lines to keep in a \\\"Follow File\\\"<br>\" + ", "+                                                         \"<html>The maximum number of lines to keep in a \\\"Follow File\\\"<br>\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e90277864f3de90b877bdebc83f9c000", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "554902896b1f96c3839ea73c44260e0ca63ab535", "commitAfterChange": "b04ad32b6b168076ffec376c15a5d9d487d414f6", "methodNumberBeforeChange": 366, "methodNumberAfterChange": 366, "signatureBeforeChange": "   private File getChosenFile(JFileChooser fc, int choice) throws OperationCanceledException", "signatureAfterChange": "   private File getChosenFile(JFileChooser fc, int choice) throws OperationCanceledException", "diff": ["-                              DrJavaRoot.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]);", "+                              \".\" + DrJavaRoot.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec64ff1aa5723361110826e7849188c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public Void forAnonymousClassInstantiation(AnonymousClassInstantiation e)", "signatureAfterChange": "   public Void forAnonymousClassInstantiation(AnonymousClassInstantiation e)", "diff": ["-      throw new RuntimeException(\"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\");", "+      throw new RuntimeException(\"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.\" +", "+                                 \"  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2c8dea2d787f8efb251fd87389bed7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDABreakpoint.java", "commitBeforeChange": "9297bd3255995599281a9a548fcd6e849eecaf7b", "commitAfterChange": "b8d26b54d9d0d791e5e97a6dd352ae0f9f5f3b20", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void update()", "signatureAfterChange": "   public void update()", "diff": ["+  /** Update _startPos, _endPos and _lineNumber from the position that moves with the document. */", "-   try {  // _doc is inherited from DocumentRegion", "+    try {  // _doc is inherited from DocumentRegion", "-      _lineNumber = _doc.getLineOfOffset(offset);", "+      _lineNumber = _doc.getLineOfOffset(offset)+1; // our line numbers are 1-based"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5539ee8466c4d27bda32c3917b25f1a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/LineEnumRule.java", "commitBeforeChange": "a0fc8c5fa07b0843323281f1820fcdddd0e30323", "commitAfterChange": "d8a9b1581cb442d4a3822bc3181eb17c4d09e8c8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public LineEnumRule(DefinitionsPane p)", "signatureAfterChange": "   public LineEnumRule(DefinitionsPane p)", "diff": ["-    SIZE = (int) _nfm.getStringBounds(\"99999\", getGraphics()).getWidth() + 3;", "+    SIZE = (int) _nfm.getStringBounds(\"99999\", getGraphics()).getWidth() + 3 +10;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6716aa683fcf8fe5fe3c8aac2e11e1d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "fc51b2245942e6d87f48245a9b8cdb4aedbcacc2", "commitAfterChange": "973271a114877f62b3cb122ffc9ab5f28c91b43a", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public int findCharOnLine(final int pos, final char findChar)", "signatureAfterChange": "   public int findCharOnLine(final int pos, final char findChar)", "diff": ["-      _storeInCache(key, matchIndex, Math.max(pos, matchIndex));", "+      _storeInCache(key, matchIndex, Math.max(pos - 1, matchIndex));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa39ffbabedfde7e5d0307647067c7d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, Data enclosing, boolean isClass)", "signatureAfterChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName,                                            Data enclosing, boolean isClass)", "diff": ["-  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, Data enclosing, boolean isClass) {", "+  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, ", "+                                          Data enclosing, boolean isClass) {", "-    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.  Please report this bug.\");}", "+    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "+                                     \"  Please report this bug.\");}"]}], "num": 6547}
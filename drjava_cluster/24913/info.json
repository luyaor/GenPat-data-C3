{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d15a369f015d9fd528034569c1a23bcf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5756ab45790bd0ea0ccd69de980ff8fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "8919b34b2a6db18ce9f1ce08c0f6b15bbc1fac15", "commitAfterChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "methodNumberBeforeChange": 317, "methodNumberAfterChange": 317, "signatureBeforeChange": "   public static<S1, T1, A, S2, T2> T2 distribute(S1 original,                                                  Lambda<? super S1, ? extends Iterable<? extends T1>> breakS,                                                  Lambda<? super T1, ? extends Iterable<? extends A>> breakT,                                                  Lambda<? super Iterable<A>, ? extends S2> makeS,                                                  Lambda<? super Iterable<S2>, ? extends T2> makeT)", "signatureAfterChange": "   public static <T1, A, S2> Iterable<S2> distribute(Iterable<? extends T1> original,                                                     Lambda<? super T1, ? extends Iterable<? extends A>> breakT,                                                     Lambda<? super Iterable<A>, ? extends S2> makeS)", "diff": ["+   */", "+  public static <T1, A, S2> Iterable<S2> distribute(Iterable<? extends T1> original,", "+                                                    Lambda<? super T1, ? extends Iterable<? extends A>> breakT,", "+                                                    Lambda<? super Iterable<A>, ? extends S2> makeS) {", "+    // to make things concrete, assume original is a sum of products, and we want a product of sums", "+    Iterable<Iterable<? extends A>> sumOfProducts = map(original, breakT);", "+    Iterable<Iterable<A>> productOfSums = cross(sumOfProducts);", "+    return map(productOfSums, makeS);", "+  }", "-  public static<S1, T1, A, S2, T2> T2 distribute(S1 original,", "-                                                 Lambda<? super S1, ? extends Iterable<? extends T1>> breakS,", "-                                                 Lambda<? super T1, ? extends Iterable<? extends A>> breakT,", "-                                                 Lambda<? super Iterable<A>, ? extends S2> makeS,", "-                                                 Lambda<? super Iterable<S2>, ? extends T2> makeT) {", "-    // to make things concrete, assume original is a sum of products, and we want a product of sums", "-    Iterable<Iterable<? extends A>> sumOfProducts = map(breakS.value(original), breakT);", "-    Iterable<Iterable<A>> productOfSums = cross(sumOfProducts);", "-    return makeT.value(map(productOfSums, makeS));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8ad1472a449c99b825a30f3c80e4014", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "8919b34b2a6db18ce9f1ce08c0f6b15bbc1fac15", "commitAfterChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "methodNumberBeforeChange": 317, "methodNumberAfterChange": 318, "signatureBeforeChange": "   public static<S1, T1, A, S2, T2> T2 distribute(S1 original,                                                  Lambda<? super S1, ? extends Iterable<? extends T1>> breakS,                                                  Lambda<? super T1, ? extends Iterable<? extends A>> breakT,                                                  Lambda<? super Iterable<A>, ? extends S2> makeS,                                                  Lambda<? super Iterable<S2>, ? extends T2> makeT)", "signatureAfterChange": "   public static <S1, T1, A, S2, T2> T2 distribute(S1 original,                                                   Lambda<? super S1, ? extends Iterable<? extends T1>> breakS,                                                   Lambda<? super T1, ? extends Iterable<? extends A>> breakT,                                                   Lambda<? super Iterable<A>, ? extends S2> makeS,                                                   Lambda<? super Iterable<S2>, ? extends T2> makeT)", "diff": ["-  public static<S1, T1, A, S2, T2> T2 distribute(S1 original,", "-                                                 Lambda<? super S1, ? extends Iterable<? extends T1>> breakS,", "-                                                 Lambda<? super T1, ? extends Iterable<? extends A>> breakT,", "-                                                 Lambda<? super Iterable<A>, ? extends S2> makeS,", "-                                                 Lambda<? super Iterable<S2>, ? extends T2> makeT) {", "-    // to make things concrete, assume original is a sum of products, and we want a product of sums", "-    Iterable<Iterable<? extends A>> sumOfProducts = map(breakS.value(original), breakT);", "-    Iterable<Iterable<A>> productOfSums = cross(sumOfProducts);", "-    return makeT.value(map(productOfSums, makeS));", "+  public static <S1, T1, A, S2, T2> T2 distribute(S1 original,", "+                                                  Lambda<? super S1, ? extends Iterable<? extends T1>> breakS,", "+                                                  Lambda<? super T1, ? extends Iterable<? extends A>> breakT,", "+                                                  Lambda<? super Iterable<A>, ? extends S2> makeS,", "+                                                  Lambda<? super Iterable<S2>, ? extends T2> makeT) {", "+    return makeT.value(distribute(breakS.value(original), breakT, makeS));"]}], "num": 24913}
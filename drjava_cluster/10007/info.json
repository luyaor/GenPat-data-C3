{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa4a34cae69a4016560da29ac2457822", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4497daabe45b070fa64d9ab40eb1d960", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "6f37af6087e88b55d504fabdb6eee22be7ba1948", "commitAfterChange": "7fcdc5820c7f1c50a17a282e38bc904783e87e7f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void _loadSettings()", "signatureAfterChange": "   private void _loadSettings()", "diff": ["-    // TODO: This is temporary, we would like to save the defaults in the project or something", "-    //       like that", "-    if (_model.getBuildDirectory() == null) {", "+    int f = _model.getCreateJarFlags();", "+    _jarClasses.setSelected(((f & JAR_CLASSES) != 0));", "+    _jarSources.setSelected(((f & JAR_SOURCES) != 0));", "+    _makeExecutable.setSelected(((f & MAKE_EXECUTABLE) != 0));", "+    ", "+    if ((_model.getBuildDirectory() == null) || (_model.hasOutOfSyncDocuments())) {", "-      _jarClasses.setToolTipText(\"A build directory must be specified in order to jar classes\");", "-      _disableExecutable();", "-      _makeExecutable.setSelected(false);", "+      String s;", "+      if ((_model.getBuildDirectory() == null) && (_model.hasOutOfSyncDocuments())) {", "+        s = \"<html><center>A build directory must be specified in order to jar class files,<br>and the project needs to be compiled.</center></html>\";", "+      }", "+      else", "+      if (_model.getBuildDirectory() == null) {", "+        s = \"<html>A build directory must be specified in order to jar class files.</html>\";", "+      }", "+      else {", "+        s = \"<html>The project needs to be compiled.</html>\";", "+      }", "+      _cantJarClassesLabel.setText(s);", "-      _jarClasses.setSelected(true);", "-      _enableExecutable();", "-      _makeExecutable.setSelected(false);", "+      _jarClasses.setEnabled(true);", "+      _cantJarClassesLabel.setText(\" \");", "+", "+      // Main class", "+      _rootFile = _model.getBuildDirectory();", "+      try {", "+        _rootFile = _rootFile.getCanonicalFile();", "+      } catch(IOException e) { }", "+    ", "+      DirectoryChooser chooser = new DirectoryChooser(this,_rootFile);", "+      chooser.setDialogTitle(\"Select Main Class\");", "+      chooser.setTopMessage(\"Select the main class for the executable jar file:\");", "+      chooser.setApproveButtonText(\"Select\");", "+      FileFilter filter = new FileFilter() {", "+        public boolean accept(File f) {", "+          String name = f.getName();", "+          return  !f.isDirectory() && name.endsWith(\".class\");", "+        }", "+        public String getDescription() {", "+          return \"Class Files (*.class)\";", "+        }", "+      };", "+      chooser.addChoosableFileFilter(filter);", "+      chooser.addFileFilter(filter);", "+      chooser.setShowFiles(true);", "+      chooser.setFileDisplayManager(MainFrame.getFileDisplayManager20());", "+      _mainClassField.setFileChooser(chooser);", "+      ", "+      final File mc = _model.getMainClass();", "+      if (mc == null) {", "+        _mainClassField.setText(\"\");", "+      }", "+      else {", "+        try {", "+          OpenDefinitionsDocument mcDoc = _model.getDocumentForFile(mc);", "+          _mainClassField.setText(mcDoc.getQualifiedClassName());", "+        }", "+        catch(IOException ioe) {", "+          _mainClassField.setText(\"\");", "+        }", "+        catch(edu.rice.cs.drjava.model.definitions.ClassNameNotFoundException e) {", "+          _mainClassField.setText(\"\");", "+        }", "+      }", "-    _jarSources.setSelected(false);", "+    ", "+    if (_model.getCreateJarFile()!=null) {", "+      _jarFileSelector.setFileField(_model.getCreateJarFile());", "+    }", "+    ", "+    _okButton.setEnabled(_jarSources.isSelected() || _jarClasses.isSelected());", "+    _setEnableExecutable(_jarClasses.isSelected());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7fe79050077cc4bbcaebcedbb97fb93", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "60280b438c8e4415d1e3fb7cae7f2c5284f4ab7d", "commitAfterChange": "f1e49fbbed5c92cb9e03198e54bd2a4b521e7d76", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "signatureAfterChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "diff": ["-    ", "-    for (final OpenDefinitionsDocument doc: getOpenDefinitionsDocuments()) {  // getOpen... makes a copy", "-      // do not force Untitled document to be saved if projectActive() or unmodified", "-      if (doc.isUntitled() && (isProjActive || ! doc.isModifiedSinceSave())) continue;  ", "-      aboutToSaveFromSaveAll(doc);", "-      doc.saveFile(com);", "+", "+    List<OpenDefinitionsDocument> docsToWrite = getOpenDefinitionsDocuments();", "+    while(docsToWrite.size()>0) {", "+      ArrayList<OpenDefinitionsDocument> readOnlyDocs = new ArrayList<OpenDefinitionsDocument>();", "+      for (final OpenDefinitionsDocument doc: docsToWrite) {  // getOpen... makes a copy", "+        // do not force Untitled document to be saved if projectActive() or unmodified", "+        if (doc.isUntitled() && (isProjActive || ! doc.isModifiedSinceSave())) continue;", "+        try {", "+          if (doc.getFile().canWrite()) {", "+            // file is writable, save", "+            aboutToSaveFromSaveAll(doc);", "+            doc.saveFile(com);", "+          }", "+          else {", "+            // file is read-only, ask user about it", "+            readOnlyDocs.add(doc);", "+          }", "+        }", "+        catch(FileMovedException fme) {", "+          // file was moved, but we should still be able to save it", "+          aboutToSaveFromSaveAll(doc);", "+          doc.saveFile(com);", "+        }", "+      }", "+      docsToWrite.clear();", "+      if (readOnlyDocs.size()>0) {", "+        ArrayList<File> files = new ArrayList<File>();", "+        for(OpenDefinitionsDocument odd: readOnlyDocs) {", "+          try { ", "+            File roFile = odd.getFile();", "+            files.add(roFile);", "+          }", "+          catch(FileMovedException fme) { /* ignore, don't know what to do here */ }", "+        }", "+        File[] res = _notifier.filesReadOnly(com, files.toArray(new File[files.size()]));", "+        HashSet<File> rewriteFiles = new HashSet<File>(java.util.Arrays.asList(res));", "+        for(OpenDefinitionsDocument odd: readOnlyDocs) {", "+          try {", "+            File roFile = odd.getFile();", "+            if (rewriteFiles.contains(roFile)) {", "+              docsToWrite.add(odd);", "+              // try to make the file writable", "+              // strangely enough, there is a File.setReadOnly() method, but", "+              // no built-in way to make the file writable", "+              // Sun recommends deleting the read-only file (does that work?)", "+              File backup = new File(roFile.getAbsolutePath()+\"~\");", "+              boolean noBackup = true;", "+              if (backup.exists()) {", "+                try {", "+                  noBackup = backup.delete();", "+                }", "+                catch(SecurityException se) {", "+                  noBackup = false;", "+                }", "+              }", "+              if (noBackup) {", "+                try {", "+                  noBackup = roFile.renameTo(backup);", "+                  roFile.createNewFile();", "+                }", "+                catch(SecurityException se) {", "+                  noBackup = false;", "+                }", "+                catch(IOException ioe) { }", "+                try {", "+                  roFile.createNewFile();", "+                }", "+                catch(SecurityException se) { }", "+                catch(IOException ioe) { }", "+              }", "+              if (!noBackup) {", "+                try {", "+                  roFile.delete();", "+                }", "+                catch(SecurityException se) { /* can't do anything about it */ }", "+              }", "+              try {", "+                edu.rice.cs.plt.io.IOUtil.copyFile(backup, roFile);", "+              }", "+              catch(SecurityException se) {", "+                /* can't do anything about it */", "+              }", "+              catch(IOException ioe) {", "+                /* can't do anything about it */", "+              }", "+            }", "+          }", "+          catch(FileMovedException fme) { /* ignore, don't know what to do here */ }", "+        }", "+      }"]}], "num": 10007}
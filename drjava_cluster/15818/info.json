{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5437eaf46e0baa8a6c3aa43aace4b3c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5972ab74e8e5540ac25d63020f54278", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelNaming.java", "commitBeforeChange": "e656613109a12add4ad6c51f7040ce36731c0f8b", "commitAfterChange": "838397e908a24e107f724695c1466c1c498ec946", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static String getDisplayFilename(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public static String getDisplayFileName(OpenDefinitionsDocument doc)", "diff": ["-  public static String getDisplayFilename(OpenDefinitionsDocument doc) {", "+  public static String getDisplayFileName(OpenDefinitionsDocument doc) { return doc.getDisplayFileName(); }", "-    String fileName = doc.getFilename();", "-    // Remove \".java\" if at the end of name", "-    if (fileName.endsWith(\".java\")) {", "-      int extIndex = fileName.lastIndexOf(\".java\");", "-      if (extIndex > 0) {", "-        fileName = fileName.substring(0, extIndex);", "-      }", "-    }", "-", "-    // Mark if modified", "-    if (doc.isModifiedSinceSave()) {", "-      fileName = fileName + \" *\";", "-    }", "-", "-    return fileName;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6ace8989087245a5541b7d094612d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "128dfa585f73f276b6d45e70cb656b74c7a3ac52", "commitAfterChange": "75d6ee48e583e9a62b38304dae2bad1322e37e97", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     @Override public Type visit(ThisExpression node)", "signatureAfterChange": "     @Override public Type visit(ThisExpression node)", "diff": ["-      String name = node.getClassName();", "-      DJClass thisC;", "-      if (name.equals(\"\")) {", "-        thisC = context.getThis();", "-        if (thisC == null) { throw new ExecutionError(\"this.undefined\", node); }", "-      }", "-      else {", "-        thisC = context.getThis(name);", "-        if (thisC == null) {", "-          setErrorStrings(node, name);", "-          throw new ExecutionError(\"undefined.class\", node);", "-        }", "-      }", "+      DJClass thisC = resolveThis(node.getClassName(), node);"]}], "num": 15818}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dea1b317374f118e2182f1218a2414e0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ac99b1f56a6a9727f8c1e9772f5f9dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/VariableData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public boolean equals(Object obj)", "signatureAfterChange": "   public boolean equals(Object obj)", "diff": ["-//      System.err.println(\"VariableData.equals: Class equality failure\");", "+      System.err.println(\"VariableData.equals: Class equality failure\");", "-//      System.err.println(\"VariableData.equals: name equality failure\");", "+      System.err.println(\"VariableData.equals: name equality failure\");", "-//      System.err.println(\"VariableData.equals: modifiersAndVisibility equality failure\");", "+      System.err.println(\"VariableData.equals: modifiersAndVisibility equality failure\");", "-//      System.err.println(\"VariableData.equals: type equality failure\");", "+      System.err.println(\"VariableData.equals: type equality failure\");", "-//      System.err.println(\"VariableData.equals: hasBeenAssigned equality failure\");", "+      System.err.println(\"VariableData.equals: hasBeenAssigned equality failure\");", "-//      System.err.println(\"VariableData.equals: hasInitializer equality failure\");", "+      System.err.println(\"VariableData.equals: hasInitializer equality failure\");", "-//      System.err.println(\"VariableData.equals: enclosingData failure\");", "+      System.err.println(\"VariableData.equals: enclosingData failure\");", "-//      System.err.println(\"VariableData.equals: enclosingData failure\");", "+      System.err.println(\"VariableData.equals: enclosingData failure\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4616f744f072dd5de1d3fa8efbc7bcc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/PopupConsole.java", "commitBeforeChange": "f5e0f21c1557f81d0d7f0c29eb237b06db708ca4", "commitAfterChange": "0d9f1553021bdec23ece7e3cb20a25799f49e14f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   protected String silentInput()", "signatureAfterChange": "   protected String silentInput()", "diff": ["-    synchronized(commandLock) {", "-      _insertTextCommand = new Lambda<Object,String>() {", "-        public synchronized Object apply(String s) {", "-          input.append(s);", "-          return null;", "-        }", "-      };", "-      _interruptCommand = new Runnable() {", "-        public void run() {", "-          _insertTextCommand = null;", "-          _interruptCommand = null;", "-          synchronized(monitor) {", "-            monitor.notify();", "+    synchronized(monitor) {", "+      synchronized(commandLock) {", "+        _insertTextCommand = new Lambda<Object,String>() {", "+          public synchronized Object apply(String s) {", "+            input.append(s);", "+            return null;", "-        }", "-      };", "-    }", "-    synchronized (CONSOLE_READY) {", "-      CONSOLE_READY.notifyAll();", "-    }", "-    synchronized (monitor) {", "+        };", "+        ", "+        _interruptCommand = new Runnable() {", "+          public void run() {", "+            System.out.println(\"in interrupt command\");", "+            _insertTextCommand = null;", "+            _interruptCommand = null;", "+            synchronized(monitor) {", "+              System.out.println(\"notifying monitor\");", "+              monitor.notifyAll();", "+            }", "+            System.out.println(\"released lock on monitor\");", "+          }", "+        };", "+        ", "+        commandLock.notifyAll();", "+      }", "-        monitor.wait();", "+        long time = System.currentTimeMillis();", "+        System.out.println(\"waiting for monitor\");", "+        ", "+        monitor.wait(4000);", "+        ", "+        System.out.println(\"done waiting - time=\" + (System.currentTimeMillis() - time));", "+        if (System.currentTimeMillis() - time > 3999) throw new RuntimeException(\"monitor.wait() timeout\");"]}], "num": 5261}
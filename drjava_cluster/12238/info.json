{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e93a744af523d40cf1a4efff7a02c22", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8322fbbf72957586c5fe44a90eec0da3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "   public void gotoFileMatchingMask(String mask)", "signatureAfterChange": "   public void gotoFileMatchingMask(String mask)", "diff": ["-        boolean docChanged = ! pim.getCurrentItem().doc.equals(_model.getActiveDocument());", "+        final OpenDefinitionsDocument newDoc = pim.getCurrentItem().getOpenDefinitionsDocument();", "+        if (newDoc != null) {", "+          boolean docChanged = ! newDoc.equals(_model.getActiveDocument());", "-        _model.setActiveDocument(pim.getCurrentItem().doc);", "-        if (docChanged) { // defer executing this code until after active document switch is complete", "-          addToBrowserHistory();", "+          _model.setActiveDocument(newDoc);", "+          if (docChanged) { // defer executing this code until after active document switch is complete", "+            addToBrowserHistory();", "+          }", "-            boolean docChanged = !pim.getCurrentItem().doc.equals(_model.getActiveDocument());", "+            final OpenDefinitionsDocument newDoc = pim.getCurrentItem().getOpenDefinitionsDocument();", "+            if (newDoc != null) {", "+              boolean docChanged = !newDoc.equals(_model.getActiveDocument());", "-            _model.setActiveDocument(pim.getCurrentItem().doc);", "-            if (docChanged) { // defer executing this code until after active document switch is complete", "-              addToBrowserHistory();", "+              _model.setActiveDocument(newDoc);", "+              if (docChanged) { // defer executing this code until after active document switch is complete", "+                addToBrowserHistory();", "+              }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8f82be807b580cd6e6cc88778e2c988", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "aff4ca7a048d3be1e2f863c90bf8f2bfe09306fd", "commitAfterChange": "7636e2659b4b69c586b657836319e825c9bf35fa", "methodNumberBeforeChange": 615, "methodNumberAfterChange": 615, "signatureBeforeChange": "          public void interactionEnded()", "signatureAfterChange": "          public void interactionEnded()", "diff": ["-      InteractionsModel im = _model.getInteractionsModel();", "-      String lastError = im.getLastError();", "-      if (DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.DIALOG_AUTOIMPORT_ENABLED)) {", "-        if (lastError != null) {", "-          // the interaction ended and there was an error", "-          // check that this error is different than the last one (second to last may be null):", "-          if (!lastError.equals(im.getSecondToLastError())) {", "-            // this aborts the auto-importing if the same class comes up twice in a row", "-            if (lastError.startsWith(\"Static Error: Undefined class '\") && lastError.endsWith(\"'\")) {", "-              // it was an \"undefined class\" exception", "-              // show auto-import dialog", "-              String undefinedClassName = lastError.substring(lastError.indexOf('\\'')+1,", "-                                                              lastError.lastIndexOf('\\''));", "-              _showAutoImportDialog(undefinedClassName);", "-            }", "-            else if (lastError.startsWith(\"java.lang.OutOfMemoryError\")) {", "-              askToIncreaseSlaveMaxHeap();", "+      final InteractionsModel im = _model.getInteractionsModel();", "+      // a strange NullPointerException was reported in this method ([ 1938268 ])", "+      // just making sure that all references are non-null", "+      if (im != null) {", "+        final String lastError = im.getLastError();", "+        final edu.rice.cs.drjava.config.FileConfiguration config = DrJava.getConfig();", "+        if ((config != null) &&", "+            (config.getSetting(edu.rice.cs.drjava.config.OptionConstants.DIALOG_AUTOIMPORT_ENABLED))) {", "+          if (lastError != null) {", "+            // the interaction ended and there was an error", "+            // check that this error is different than the last one (second to last may be null):", "+            final String secondToLastError = im.getSecondToLastError();", "+            if ((secondToLastError!=null) &&", "+                (!lastError.equals(secondToLastError))) {", "+              // this aborts the auto-importing if the same class comes up twice in a row", "+              if (lastError.startsWith(\"Static Error: Undefined class '\") && lastError.endsWith(\"'\")) {", "+                // it was an \"undefined class\" exception", "+                // show auto-import dialog", "+                String undefinedClassName = lastError.substring(lastError.indexOf('\\'')+1,", "+                                                                lastError.lastIndexOf('\\''));", "+                _showAutoImportDialog(undefinedClassName);", "+              }", "+              else if (lastError.startsWith(\"java.lang.OutOfMemoryError\")) {", "+                askToIncreaseSlaveMaxHeap();", "+              }", "+        else {", "+          // reset the last errors, so the dialog works again if it is re-enabled", "+          im.resetLastErrors();", "+        }", "-      else {", "-        // reset the last errors, so the dialog works again if it is re-enabled", "-        im.resetLastErrors();", "-      }", "-      "]}], "num": 12238}
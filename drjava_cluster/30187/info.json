{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a2f80e9f0bfbf5d4158de7a9359064a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07c300bc89eae40275f289b451da7f4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testParenDelimsWithComment() throws BadLocationException", "signatureAfterChange": "   public void testParenDelimsWithComment() throws BadLocationException", "diff": ["-    assertTrue(\"// comment\", rule.applyRule(_doc, 23, Indenter.OTHER));", "-    assertTrue(\"/* */ comment\", rule.applyRule(_doc, 45, Indenter.OTHER));", "+    assertTrue(\"// comment\", rule.applyRule(_doc, 23, Indenter.IndentReason.OTHER));", "+    assertTrue(\"/* */ comment\", rule.applyRule(_doc, 45, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b3783932279bfbfda37d9b9963e18f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testBraceLastCharOnLine() throws BadLocationException", "signatureAfterChange": "      public void testBraceLastCharOnLine() throws BadLocationException", "diff": ["-    assertTrue(\"Brace only char on line.\", _rule.applyRule(_doc, 2, Indenter.OTHER));", "+    assertTrue(\"Brace only char on line.\", _rule.applyRule(_doc, 2, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Brace last char on line.\", _rule.applyRule(_doc, 13, Indenter.OTHER));", "+    assertTrue(\"Brace last char on line.\", _rule.applyRule(_doc, 13, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464841d987105fc291763c0d509c7c51", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineIsWingCommentTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "       public void testWingInsideBlock() throws javax.swing.text.BadLocationException", "signatureAfterChange": "       public void testWingInsideBlock() throws javax.swing.text.BadLocationException", "diff": ["-    assertFalse(\"Wing Inside BlockComment 1\", _rule.applyRule(_doc, Indenter.OTHER));", "-    assertFalse(\"Wing Inside BlockComment 2\", _rule.applyRule(_doc, 2, Indenter.OTHER));", "+    assertFalse(\"Wing Inside BlockComment 1\", _rule.applyRule(_doc, Indenter.IndentReason.OTHER));", "+    assertFalse(\"Wing Inside BlockComment 2\", _rule.applyRule(_doc, 2, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8379c20d33b04db6c11b60c343b615a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testOperatorDelim() throws BadLocationException", "signatureAfterChange": "   public void testOperatorDelim() throws BadLocationException", "diff": ["-    assertTrue(\"line after operator\", rule.applyRule(_doc, 8, Indenter.OTHER));", "-    assertTrue(\"line after comma\", !rule.applyRule(_doc, 10, Indenter.OTHER));", "+    assertTrue(\"line after operator\", rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after comma\", !rule.applyRule(_doc, 10, Indenter.IndentReason.OTHER));"]}], "num": 30187}
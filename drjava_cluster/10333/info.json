{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d918b2977480cfa21659c0d4bde1ebd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261651cb1757a9f207eaad2971e8be22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "3bb1b911d950f482b9e797d7de6104b1444684b7", "commitAfterChange": "045c3614cbae106e482ef86c608a22bd0f55ebc4", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private void _doStartup()", "signatureAfterChange": "   private void _doStartup()", "diff": ["-      boolean concJUnitLocationConfigured =", "-        DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "+      // ConcJUnit is available if (a) the built-in framework is used, or (b) the external", "+      // framework is a valid ConcJUnit jar file.", "+      boolean concJUnitAvailable =", "+        !DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) ||", "-      if (DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED) && // enabled", "+      if (DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+            equals(OptionConstants.ConcJUnitCheckChoices.ALL) && // \"lucky\" enabled", "-        DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+        DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,", "+                                      OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "-      if (concJUnitLocationConfigured && // ConcJUnit configured and enabled", "-          rtLocationConfigured && // \"lucky\" warnings configured", "-          DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED)) { // and enabled", "+      if (concJUnitAvailable && // ConcJUnit available", "+          rtLocationConfigured && // runtime configured", "+          DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+            equals(OptionConstants.ConcJUnitCheckChoices.ALL)) { // and \"lucky\" enabled", "-          DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+          DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,", "+                                        OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "-    invokeSlave(new JVMBuilder(_startupClassPath).directory(dir).jvmArguments(jvmArgs));", "+    JVMBuilder jvmb = new JVMBuilder(_startupClassPath).directory(dir).jvmArguments(jvmArgs);", "+    ", "+    // extend classpath if JUnit/ConcJUnit location specified", "+    File junitLocation = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);", "+    boolean junitLocationConfigured =", "+      (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidJUnitFile(junitLocation) ||", "+       edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(junitLocation));", "+    if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) && // enabled", "+        !junitLocationConfigured && // not valid ", "+        (junitLocation != null) && // not null", "+        (!FileOps.NULL_FILE.equals(junitLocation)) && // not NULL_FILE", "+        (junitLocation.exists())) { // but exists", "+      // invalid file, clear setting", "+      DrJava.getConfig().setSetting(OptionConstants.JUNIT_LOCATION_ENABLED, false);", "+      junitLocationConfigured = false;", "+    }", "+    ArrayList<File> extendedClassPath = new ArrayList<File>();", "+    if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "+        junitLocationConfigured) {", "+      extendedClassPath.add(junitLocation);", "+    }", "+    for(File f: jvmb.classPath()) { extendedClassPath.add(f); }", "+    jvmb = jvmb.classPath(edu.rice.cs.plt.iter.IterUtil.asSizedIterable(extendedClassPath));", "+    ", "+    // add Java properties controlling ConcJUnit", "+    java.util.Properties props = jvmb.propertiesCopy();", "+    ", "+    // settings are mutually exclusive", "+    boolean all = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.ALL);", "+    boolean noLucky = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "+    boolean onlyThreads = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.ONLY_THREADS);", "+    boolean none = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.NONE);", "+    // \"threads\" is enabled as long as the setting isn't NONE", "+    props.setProperty(\"edu.rice.cs.cunit.concJUnit.check.threads.enabled\",", "+                      new Boolean(!none).toString());", "+    // \"join\" is enabled for ALL and NO_LUCKY", "+    props.setProperty(\"edu.rice.cs.cunit.concJUnit.check.join.enabled\",", "+                      new Boolean(all || noLucky).toString());", "+    // \"lucky\" is enabled only for ALL", "+    props.setProperty(\"edu.rice.cs.cunit.concJUnit.check.lucky.enabled\",", "+                      new Boolean(all).toString());", "+    ", "+    jvmb = jvmb.properties(props);", "+    ", "+    invokeSlave(jvmb);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9236b2e6589583b35a49d6ecb6667185", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "d8743e3580123e01ed3e3df696be4659a04c6fac", "commitAfterChange": "7a9a1a584dbea988e52c91909a30a2d54f580df1", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private void _doStartup()", "signatureAfterChange": "   private void _doStartup()", "diff": ["+    ", "-    File junitLocation = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);", "-    boolean concJUnitLocationConfigured =", "-      DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "-      edu.rice.cs.drjava.model.junit.DefaultJUnitModel.isValidConcJUnitFile(junitLocation);", "-    File rtLocation = DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION);", "-    boolean rtLocationConfigured =", "-      edu.rice.cs.drjava.model.junit.DefaultJUnitModel.isValidRTConcJUnitFile(rtLocation);", "-    if (DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED) &&", "-        !rtLocationConfigured && // not valid", "-        (rtLocation != null) && // not null", "-        (!FileOps.NULL_FILE.equals(rtLocation)) && // not NULL_FILE", "-        (rtLocation.exists())) { // but exists", "-      // invalid file, clear setting", "-      DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION, FileOps.NULL_FILE);", "-      rtLocationConfigured = false;", "-    }", "-    if (concJUnitLocationConfigured &&", "-        rtLocationConfigured &&", "-        DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED)) {", "-      try {", "-        // NOTE: this is a work-around", "-        // it seems like it's impossible to pass long file names here on Windows", "-        // so we are using a clumsy method that determines the short file name", "-        File shortF = FileOps.getShortFile(rtLocation);", "-        jvmArgs.add(\"-Xbootclasspath/p:\"+shortF.getAbsolutePath().replace(File.separatorChar, '/'));", "-      }", "-      catch(IOException ioe) {", "-        // we couldn't get the short file name (on Windows), disable \"lucky\" warnings", "-        DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION, FileOps.NULL_FILE);", "+    // ------------------------------------------------------", "+    // this section here loops if the rt.concjunit.jar file is", "+    // being re-generated or the settings are changed", "+    final CompletionMonitor cm = new CompletionMonitor();", "+    boolean repeat;", "+    do {", "+      repeat = false;", "+      File junitLocation = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);", "+      boolean concJUnitLocationConfigured =", "+        DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "+        edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(junitLocation);", "+      ", "+      File rtLocation = DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION);", "+      boolean rtLocationConfigured =", "+        edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtLocation);", "+      ", "+      if (DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED) && // enabled", "+          !rtLocationConfigured && // not valid", "+          (rtLocation != null) && // not null", "+          (!FileOps.NULL_FILE.equals(rtLocation)) && // not NULL_FILE", "+          (rtLocation.exists())) { // but exists", "+        // invalid file, clear setting", "+        DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+        javax.swing.JOptionPane.showMessageDialog(null,", "+                                                  \"The selected file is invalid and was disabled:\\n\"+rtLocation,", "+                                                  \"Invalid ConcJUnit Runtime File\",", "+                                                  javax.swing.JOptionPane.ERROR_MESSAGE);", "-    }", "+      if (concJUnitLocationConfigured && // ConcJUnit configured and enabled", "+          rtLocationConfigured && // \"lucky\" warnings configured", "+          DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED)) { // and enabled", "+        try {", "+          // NOTE: this is a work-around", "+          // it seems like it's impossible to pass long file names here on Windows", "+          // so we are using a clumsy method that determines the short file name", "+          File shortF = FileOps.getShortFile(rtLocation);", "+          ", "+          // check the JavaVersion of the rt.concjunit.jar file to make sure it is compatible", "+          if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isCompatibleRTConcJUnitFile(shortF)) {", "+            // enabled, valid and compatible", "+            // add the JVM argument", "+            jvmArgs.add(\"-Xbootclasspath/p:\"+shortF.getAbsolutePath().replace(File.separatorChar, '/'));", "+          }", "+          else {", "+            // enabled, valid but incompatible", "+            // ask to regenerate", "+            repeat = true; // re-check settings", "+            cm.reset();", "+            edu.rice.cs.drjava.model.junit.ConcJUnitUtils.", "+              showIncompatibleWantToRegenerateDialog(null,", "+                                                     new Runnable() { public void run() { cm.signal(); } }, // yes", "+                                                     new Runnable() { public void run() { cm.signal(); } }); // no", "+            while(!cm.attemptEnsureSignaled()); // wait for dialog to finish", "+          }", "+        }", "+        catch(IOException ioe) {", "+          // we couldn't get the short file name (on Windows), disable \"lucky\" warnings", "+          DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+          rtLocationConfigured = false;", "+          javax.swing.JOptionPane.showMessageDialog(null,", "+                                                    \"There was a problem with the selected file, and it was disabled:\\n\"+rtLocation,", "+                                                    \"Invalid ConcJUnit Runtime File\",", "+                                                    javax.swing.JOptionPane.ERROR_MESSAGE);", "+        }", "+      }", "+    } while(repeat);", "+    // end of the section that may loop", "+    // ------------------------------------------------------"]}], "num": 10333}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "100680231251db73c14663a105f33099", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f0b690c33e56fadfbfd34c69edf9644", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public MethodDeclaration lookupFunction(String mname, Class[] params)  throws NoSuchFunctionException", "signatureAfterChange": "   public MethodDeclaration lookupFunction(String mname, Class[] params)     throws NoSuchFunctionException", "diff": ["+   */", "+  public MethodDeclaration lookupFunction(String mname, Class[] params)", "+    throws NoSuchFunctionException {", "+    Iterator<MethodDeclaration> it = functions.iterator();", "+    List<MethodDeclaration> f = new LinkedList<MethodDeclaration>();", "+    ", "+    while (it.hasNext()) {", "+      MethodDeclaration md = it.next();", "+      if (md.getName().equals(mname)) {", "+        f.add(md);", "+      }", "+    }", "+    ", "+    it = f.iterator();", "+    while (it.hasNext()) {", "+      MethodDeclaration md = it.next();", "+      List<FormalParameter> l =  md.getParameters();", "+      ", "+      if (l.size() != params.length) {", "+        continue;", "+      }", "+      ", "+      Class[] p = new Class[l.size()];", "+      Iterator<FormalParameter> it2 = l.iterator();", "+      int i = 0;", "+      while (it2.hasNext()) {", "+        p[i++] = (Class)NodeProperties.getType(it2.next());", "+      }", "+      ", "+      if (ReflectionUtilities.hasCompatibleSignatures(p, params)) {", "+        return md;", "+      }", "+    }", "+    ", "+    throw new NoSuchFunctionException(mname);", "+  }", "-     */", "-    public MethodDeclaration lookupFunction(String mname, Class[] params)", "- throws NoSuchFunctionException {", "- Iterator it = functions.iterator();", "- List f = new LinkedList();", "-", "- while (it.hasNext()) {", "-     MethodDeclaration md = (MethodDeclaration)it.next();", "-     if (md.getName().equals(mname)) {", "-  f.add(md);", "-     }", "- }", "-", "- it = f.iterator();", "- while (it.hasNext()) {", "-     MethodDeclaration md = (MethodDeclaration)it.next();", "-     List l =  md.getParameters();", "-", "-     if (l.size() != params.length) {", "-  continue;", "-     }", "-", "-     Class[] p = new Class[l.size()];", "-     Iterator it2 = l.iterator();", "-     int i = 0;", "-     while (it2.hasNext()) {", "-  p[i++] = (Class)NodeProperties.getType((Node)it2.next());", "-     }", "-     ", "-     if (ReflectionUtilities.hasCompatibleSignatures(p, params)) {", "-  return md;", "-     }", "- }", "-", "- throw new NoSuchFunctionException(mname);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df277efefcaa483e41b126719685e7b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "1ef951d20d276f3c46e1cf20ba51ab4b6ce00f53", "commitAfterChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2)", "signatureAfterChange": "   public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2, TigerUsage tu)", "diff": ["+   */", "+  public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2, TigerUsage tu) {", "+    if (a1.length == 0) {", "+      return a2.length == 0;", "+    }", "+    ", "+    if (a1.length > (a2.length + 1)) {", "+      return false;", "+    }", "+    ", "+    // Now we know that a1.length > 0;", "+    for (int i = 0; i < a1.length-1; i++) { //  a2 can have length larger than or equal to a1", "+      if (!isBoxCompatible(a1[i], a2[i], tu)) {", "+        return false;", "+      }", "+    }", "+    int lastIdx1 = a1.length - 1;", "+    Class lastElt1 = a1[lastIdx1];", "+    if(lastElt1.isArray() && (a2.length == a1.length - 1)) {", "+      tu.varArgsAreUsed();", "+      return true; // No varargs given.", "+    }", "+    else if(lastElt1.isArray() && !a2[lastIdx1].isArray()){", "+      tu.varArgsAreUsed();", "+      Class varArgsType = lastElt1.getComponentType(); // Get the element type of the array", "+      for( int i = lastIdx1; i < a2.length; i++ ){", "+        if(!isBoxCompatible(varArgsType, a2[i], tu)){", "+          return false;", "+    else { // if equal lengths, then check the last one for compatibility", "+      if (!isBoxCompatible(lastElt1, a2[lastIdx1], tu) || (a1.length != a2.length) ) {", "-   */", "-  public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2) {", "-    for (int i = 0; i < a1.length-1; i++) { //  a2 can have length larger than or equal to a1", "-      if (!isCompatible(a1[i], a2[i])) {", "-        return false;", "-      }", "-    }", "-    if(!a1[a1.length-1].isArray()){", "-      return false; ", "-      // in fact it indicates a more serious error that should be reported to DynamicJava ", "-      // developers. That's, for the time being, US!", "-    }", "-    Class VarArgsType = a1[a1.length-1].getComponentType(); // Get the element type of the array", "-    for( int i = a1.length-1; i < a2.length; i++ ){", "-      if(!isCompatible(VarArgsType, a2[i])){", "-        return false;", "-      }", "-    }", "-    return true;", "-  }"]}], "num": 12831}
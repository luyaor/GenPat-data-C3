{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f289bdb54db9eb3dfc78bf5b871c65e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea29a2aa89fbbb2ca3760a0ab5047f5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "9de352299088533a44cc17c1ffd7938654146b70", "commitAfterChange": "fb275f71eca23e6f93c695458f20ebc27e058287", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException", "signatureAfterChange": "      protected Class loadClass(String name, boolean resolve)       throws ClassNotFoundException", "diff": ["-     */", "-    protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException {", "-      //System.err.println(\"loadClass: \" + name);", "-      if (_checker.mustUseSystemLoader(name)) {", "-        return  super.loadClass(name, resolve);", "-      } ", "-      else {", "-        return  findClass(name);", "+", "+    protected Class loadClass(String name, boolean resolve)", "+      throws ClassNotFoundException", "+    {", "+      Class clazz;", "+", "+        clazz = (Class) classes.get(name);", "+        try {", "+          clazz = _stickyLoader.loadClass(name);", "+        }", "+        catch (ClassNotFoundException e) {", "+          // If it exceptions, just fall through to here to try the interpreter.", "+          // If all else fails, try loading the class through the interpreter.", "+          // That's used for classes defined in the interpreter.", "+          clazz = interpreter.loadClass(name);", "+", "+", "+        }", "+      if (resolve) {", "+        resolveClass(clazz);", "+      return clazz;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef76bdff76910c33f7ed0a56ff368ae8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "b432c2a5363ca609f111d7dec3ae5ed814c173ea", "commitAfterChange": "9d11311a2c8fe69828f38bf3b0da9037a3e51914", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Node visit(ImportDeclaration node)", "signatureAfterChange": "   public Node visit(ImportDeclaration node)", "diff": ["-    if (node.isPackage()) {", "-      context.declarePackageImport(node.getName());", "-    } else {", "-      try {", "-        context.declareClassImport(node.getName());", "-      } catch (ClassNotFoundException e) {", "-        throw new CatchedExceptionError(e, node);", "+    if(node.isStatic()){", "+      TigerUtilities.assertTigerEnabled(\"Static Import is not supported before Java 1.5\");", "+      try {  ", "+        if(node.isStaticImportClass()) ", "+          context.declareClassStaticImport(node.getName());", "+        else ", "+          context.declareMemberStaticImport(node.getName());", "+      }", "+      catch (ClassNotFoundException e) {", "+        throw new RuntimeException(\"Uncaught Class Not Found Exception\");", "+      }", "+    }", "+    else {      ", "+      if (node.isPackage()) {", "+        context.declarePackageImport(node.getName());", "+      } else {", "+        try {", "+          context.declareClassImport(node.getName());", "+        } catch (ClassNotFoundException e) {", "+          throw new CatchedExceptionError(e, node);", "+        }"]}], "num": 14922}
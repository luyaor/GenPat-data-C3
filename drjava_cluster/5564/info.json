{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60d874dc08b375015db21e2b4b70d0e4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b972e5e1bc41ed314a86008a2b242417", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 83, "signatureBeforeChange": "   public static <R> Lambda<Object, R> promote(final Thunk<? extends R> thunk)", "signatureAfterChange": "   public static <R> GeneralLambda<R> promote(final Thunk<? extends R> thunk)", "diff": ["-  /** @return A {@code Lambda} equivalent to {@code thunk} with an ignored argument */", "-  public static <R> Lambda<Object, R> promote(final Thunk<? extends R> thunk) {", "-    return new Lambda<Object, R>() {", "-      public R value(Object arg) { return thunk.value(); }", "-    };", "+  /** Create a {@code GeneralLambda} equivalent to {@code thunk} that ignores any arguments. */", "+  public static <R> GeneralLambda<R> promote(final Thunk<? extends R> thunk) {", "+    return new PromotedGeneralLambda<R>(thunk);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dac5ed9bb1ca83cce8ddab149e63ead6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public static <T> Lambda<Object, T> valueLambda(final T val)", "signatureAfterChange": "   public static <T> GeneralLambda<T> valueLambda(T val)", "diff": ["-  /** @return  A {@link Lambda} whose result is always {@code val} */", "-  public static <T> Lambda<Object, T> valueLambda(final T val) {", "-    return new Lambda<Object, T>() { public T value(Object arg) { return val; } };", "+  /** Create a lambda whose result is always {@code val}. */", "+  public static <T> GeneralLambda<T> valueLambda(T val) { return new ValueLambda<T>(val); }"]}], "num": 5564}
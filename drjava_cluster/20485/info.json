{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49df6f473bbf70c8ceaa87e84ae0aa21", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af134fbfa0369d8eb664ef42f5b72959", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public Object visit(ClassAllocation node)", "signatureAfterChange": "   public Class visit(ClassAllocation node)", "diff": ["-     */", "-    public Object visit(ClassAllocation node) {", "-\t// If the class allocation is the initializer of a field,", "-\t// it is possible that it has already been visited", "-\tif (node.hasProperty(NodeProperties.TYPE)) {", "-\t    return NodeProperties.getType(node);", "-\t} else {", "-\t    // Get the class to allocate", "-\t    Node   ctn   = node.getCreationType();", "-\t    Class   ct   = (Class)ctn.acceptVisitor(this);", "-\t    List   largs = node.getArguments();", "-\t    Class[] args = Constants.EMPTY_CLASS_ARRAY;", "-", "-\t    if (largs != null) {", "-\t\targs = new Class[largs.size()];", "-\t\tIterator it = largs.iterator();", "-\t\tint i = 0;", "-\t\twhile (it.hasNext()) {", "-\t\t    args[i++] = (Class)((Node)it.next()).acceptVisitor(this);", "-\t\t}", "-\t    }", "-\t    return context.setProperties(node, ct, args, node.getMembers());", "-\t}", "+   */", "+  public Class visit(ClassAllocation node) {", "+    // If the class allocation is the initializer of a field,", "+    // it is possible that it has already been visited", "+    if (node.hasProperty(NodeProperties.TYPE)) {", "+      return NodeProperties.getType(node);", "+    } else {", "+      // Get the class to allocate", "+      Node   ctn   = node.getCreationType();", "+      Class   ct   = (Class)ctn.acceptVisitor(this);", "+      List   largs = node.getArguments();", "+      Class[] args = Constants.EMPTY_CLASS_ARRAY;", "+      ", "+      if (largs != null) {", "+        args = new Class[largs.size()];", "+        Iterator it = largs.iterator();", "+        int i = 0;", "+        while (it.hasNext()) {", "+          args[i++] = (Class)((Node)it.next()).acceptVisitor(this);", "+      }", "+      return context.setProperties(node, ct, args, node.getMembers());", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca36efa14e86f3cecf3a0ee3d5cd7cf6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public Object visit(SimpleAllocation node)", "signatureAfterChange": "   public Class visit(SimpleAllocation node)", "diff": ["-     */", "-    public Object visit(SimpleAllocation node) {", "-        // Check the type to declare", "-        Node type = node.getCreationType();", "-        Class c  = (Class)type.acceptVisitor(this);", "-", "-        // Do the type checking of the arguments", "-        List args = node.getArguments();", "-        Class[] cargs = Constants.EMPTY_CLASS_ARRAY;", "-", "-\tif (args != null) {", "-\t    cargs = new Class[args.size()];", "-", "-\t    ListIterator it = args.listIterator();", "-\t    int i  = 0;", "-\t    while (it.hasNext()) {", "-\t\tcargs[i++] = (Class)((Node)it.next()).acceptVisitor(this);", "-\t    }", "-\t}", "-", "-\treturn context.setProperties(node, c, cargs);", "-    }", "+   */", "+  public Class visit(SimpleAllocation node) {", "+    // Check the type to declare", "+    Node type = node.getCreationType();", "+    Class c  = (Class)type.acceptVisitor(this);", "+    ", "+    // Do the type checking of the arguments", "+    List args = node.getArguments();", "+    Class[] cargs = Constants.EMPTY_CLASS_ARRAY;", "+    ", "+    if (args != null) {", "+      cargs = new Class[args.size()];", "+      ", "+      ListIterator it = args.listIterator();", "+      int i  = 0;", "+      while (it.hasNext()) {", "+        cargs[i++] = (Class)((Node)it.next()).acceptVisitor(this);", "+      }", "+    }", "+    ", "+    return context.setProperties(node, c, cargs);", "+  }"]}], "num": 20485}
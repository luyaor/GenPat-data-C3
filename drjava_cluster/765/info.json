{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96fb90e7835f888edbcbd777bbfd7d80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f9ddfee6e83112f07010774953fb92", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm,                       final FindResultsPanel panel)", "signatureAfterChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm,                       final FindResultsPanel panel)", "diff": ["-//      Utilities.show(\"Searching complete\");", "-      // Set of documents that have been reverted in the process of \"find all\"", "-//      HashSet<OpenDefinitionsDocument> reverted = new HashSet<OpenDefinitionsDocument>();", "-      ", "-//      panel.startChanging();", "-//        if (reverted.contains(fr.getDocument())) {", "-//          // skipping document because we have previously noticed that it has been modified,", "-//          // i.e. the document is in the reverted list", "-//          continue;", "-//        }", "-        ", "-//        // get the original time stamp", "-//        long origts = fr.getDocument().getTimestamp();", "-        try {", "-          final Position startPos = doc.createPosition(start);", "-          final Position endPos = doc.createPosition(end);", "-          ", "-          // lazily create excerpt string", "-          ", "-          Thunk<String> ss = new Thunk<String>() {", "-            public String value() {", "-              try {", "-                int endSel = endPos.getOffset();", "-                int startSel = startPos.getOffset();", "-                int selLength = endSel - startSel;", "-                if (selLength == 0) return \"\";  // excerpt has been deleted by prior editing", "-                assert selLength > 0;", "-               ", "-                int excerptEnd = doc._getLineEndPos(endSel);", "-                int excerptStart = doc._getLineStartPos(startSel);", "-                assert excerptStart <= startSel;", "-", "-                // the offsets within the excerpted string of the selection (figuratively in \"Red\")", "-                int startRed = startSel - excerptStart;", "-                int endRed = endSel - excerptStart;", "-                ", "-                int excerptLength = Math.min(120, excerptEnd - excerptStart);", "-                String text = doc.getText(excerptStart, excerptLength);", "-                ", "-                // Construct the matching string and compressed selection prefix and suffix strings within text", "-                String prefix = StringOps.compress(text.substring(0, startRed));", "-                String match, suffix;", "-                if (excerptLength < startRed + selLength) { // selection extends beyond excerpt", "-                  match = text.substring(startRed) + \"...\";", "-                  suffix = \"\";", "-                }", "-                else {", "-                  match = text.substring(startRed, endRed);", "-                  suffix = StringOps.compress(text.substring(endRed, excerptLength));", "-                }", "-", "-                // COMMENT: We need a global invariant concerning non-displayable characters.  ", "-                ", "-                // create the excerpt string", "-                StringBuilder sb = new StringBuilder(edu.rice.cs.plt.text.TextUtil.htmlEscape(prefix));", "-                sb.append(\"<font color=#ff0000>\");", "-//                sb.append(LEFT);", "-                sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(match));", "-                sb.append(\"</font>\");", "-//                sb.append(RIGHT);", "-                sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(suffix));", "-//                sb.append(\"</html>\");", "-//                sb.append(StringOps.getBlankString(120 - sLength));  // move getBank to StringOps", "-                return sb.toString();", "-              }", "-              catch(BadLocationException e) { return \"\";  /* Ignore the exception. */ }", "-            }", "-          };", "-          ", "-          rm.addRegion(new MovingDocumentRegion(doc, doc.getFile(), startPos, endPos, ss));", "-//          rm.addRegion(new MovingDocumentRegion(doc, doc.getFile(), startPos, endPos, s));", "-        }", "-        catch (FileMovedException fme) { throw new UnexpectedException(fme); }", "-        catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+        int lineStart = doc._getLineStartPos(start);", "+        int lineEnd = doc._getLineEndPos(end);                                          ", "+        ", "+        rm.addRegion(new MovingDocumentRegion(doc, start, end, lineStart, lineEnd));", "-//      panel.finishChanging();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "806cfc5bd0a58c7190637f8862608b0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/MovingDocumentRegion.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public MovingDocumentRegion(OpenDefinitionsDocument doc, File file, Position sp, Position ep, Thunk<String> ss)", "signatureAfterChange": "   public MovingDocumentRegion(final OpenDefinitionsDocument doc, int start, int end, int lineStart, int lineEnd)", "diff": ["-  public MovingDocumentRegion(OpenDefinitionsDocument doc, File file, Position sp, Position ep, Thunk<String> ss) {", "-    super(doc, sp, ep);", "+  public MovingDocumentRegion(final OpenDefinitionsDocument doc, int start, int end, int lineStart, int lineEnd) {", "+", "+    super(doc, start, end);", "+    try {", "+      _lineStartPos = doc.createPosition(lineStart);", "+      _lineEndPos  = doc.createPosition(lineEnd);", "+    }", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }  // should never happen", "+    ", "-    _stringSuspension = ss;", "+    _stringSuspension = new Thunk<String>() {", "+      public String value() {", "+        try {", "+          int endSel = getEndOffset();", "+          int startSel = getStartOffset();", "+          int selLength = endSel - startSel;", "+          ", "+          int excerptEnd = _lineEndPos.getOffset();", "+          int excerptStart = _lineStartPos.getOffset();", "+          int exceptLength = excerptEnd - excerptStart;", "+          ", "+          // the offsets within the excerpted string of the selection (figuratively in \"Red\")", "+          int startRed = startSel - excerptStart;", "+          int endRed = endSel - excerptStart;", "+          ", "+          int excerptLength = Math.min(120, excerptEnd - excerptStart);", "+          String text = doc.getText(excerptStart, excerptLength);", "+          ", "+          // Construct the matching string and compressed selection prefix and suffix strings within text", "+          String prefix = StringOps.compress(text.substring(0, startRed));", "+          String match, suffix;", "+          if (excerptLength < startRed + selLength) { // selection extends beyond excerpt", "+            match = text.substring(startRed) + \" ...\";", "+            suffix = \"\";", "+          }", "+          else {", "+            match = text.substring(startRed, endRed);", "+            suffix = StringOps.compress(text.substring(endRed, excerptLength));", "+          }", "+          ", "+          // COMMENT: We need a global invariant concerning non-displayable characters.  ", "+          ", "+          // create the excerpt string", "+          StringBuilder sb = new StringBuilder(edu.rice.cs.plt.text.TextUtil.htmlEscape(prefix));", "+          sb.append(\"<font color=#ff0000>\");", "+//                sb.append(LEFT);", "+          sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(match));", "+          sb.append(\"</font>\");", "+//                sb.append(RIGHT);", "+          sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(suffix));", "+//                sb.append(\"</html>\");", "+//                sb.append(StringOps.getBlankString(120 - sLength));  // move getBank to StringOps", "+          return sb.toString();", "+        }", "+        catch(BadLocationException e) { return \"\";  /* Ignore the exception. */ }", "+      }", "+    };"]}], "num": 765}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee9f7382071ae14b00af1c7d9036bc85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9660c479a3cab566e04fc1959946f824", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Void forClassDef(ClassDef that)", "signatureAfterChange": "   public Void forClassDef(ClassDef that)", "diff": ["-", "+    ", "+    boolean isTestCase = false;  // flag to support automatic importing of junit.framework.*;", "-    SymbolData sd = addSymbolData(that, className);", "-   ", "+    SymbolData sd = defineSymbolData(that, className);", "+    ", "+    if (sd != null) {", "+    ", "+      String superName = that.getSuperclass().getName();", "+      if (superName.equals(\"TestCase\") || superName.equals(\"junit.framework.TestCase\")) {", "+        isTestCase = true;", "+        if (! _importedPackages.contains(\"junit.framework\") && ! _importedFiles.contains(\"junit.framework.TestCase\")) {", "+          System.err.println(\"importing junit.framework.TestCase in file \" + that.getSourceInfo());", "+          _importedFiles.addLast(\"junit.framework.TestCase\");", "+          sd.setHasAutoGeneratedJunitImport(true);", "+        }", "+        // add to symbol table", "+        getSymbolData(\"junit.framework.TestCase\", that.getSourceInfo(), true, false, true, false); ", "+//        assert getSymbolData(\"junit.framework.TestCase\", that.getSourceInfo()) != null;", "+      }", "+    }", "+    ", "+    ", "+    // Test cases are automatically public", "+    if (isTestCase) sd.addModifier(\"public\");", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c552da03bc88b2bac797af353ccfb995", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "554902896b1f96c3839ea73c44260e0ca63ab535", "commitAfterChange": "b04ad32b6b168076ffec376c15a5d9d487d414f6", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["+    Log l = new Log(\"AbstractGlobalModel_openFolder.log\", false);", "+    l.log(String.format(\"Recursive Searching %s\", (rec ? \"Enabled\" : \"Disabled\")));", "+    ", "+", "+      //HACK: the dot needs to be removed, otherwise", "+      //IOUtils.fileExtensionPredicate() will try to match ..<ext>", "+      if (extension.startsWith(\".\")) {", "+       extension = extension.substring(1);", "+       l.log(String.format(\"Extension tweaked to %s\", extension));", "+      }", "+", "+      l.log(String.format(\"Searching %s for *%s\", dir.getAbsolutePath(), extension));", "+      ", "+", "+      //What did we find?", "+      l.log(String.format(\"Found %d file(s):\", files.size()));", "+      for (File f : files) {", "+       l.log(f.getAbsolutePath()); ", "+      }"]}], "num": 21429}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2fdc4a472dedbd19550b7c0d20b5cb9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da58179c895b70e2a8070d60eb1d93c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Object visit(StaticFieldAccess node)", "signatureAfterChange": "   public Class visit(StaticFieldAccess node)", "diff": ["-     */", "-    public Object visit(StaticFieldAccess node) {", "-        // Visit the field type", "-        Class c = (Class)node.getFieldType().acceptVisitor(this);", "-", "-        // Load the field object", "-        Field f = null;", "-        try {", "-            f = context.getField(c, node.getFieldName());", "-        } catch (Exception e) {", "-            throw new CatchedExceptionError(e, node);", "-        }", "-", "-        // Set the node properties", "-        node.setProperty(NodeProperties.FIELD, f);", "-        node.setProperty(NodeProperties.TYPE,  c = f.getType());", "-", "-\tnode.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "-\treturn c;", "-    }", "+   */", "+  public Class visit(StaticFieldAccess node) {", "+    // Visit the field type", "+    Class c = (Class)node.getFieldType().acceptVisitor(this);", "+    ", "+    // Load the field object", "+    Field f = null;", "+    try {", "+      f = context.getField(c, node.getFieldName());", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "+    }", "+    ", "+    // Set the node properties", "+    node.setProperty(NodeProperties.FIELD, f);", "+    node.setProperty(NodeProperties.TYPE,  c = f.getType());", "+    ", "+    node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "+    return c;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e33305dc9eff21580599faefbf4cd1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public Object visit(SuperFieldAccess node)", "signatureAfterChange": "   public Class visit(SuperFieldAccess node)", "diff": ["-     */", "-    public Object visit(SuperFieldAccess node) {", "-\tField f = null;", "-\ttry {", "-\t    f = context.getSuperField(node, node.getFieldName());", "-\t} catch (Exception e) {", "-\t    throw new CatchedExceptionError(e, node);", "-\t}", "-", "-\t// Set the node properties", "-\tnode.setProperty(NodeProperties.FIELD, f);", "-\tClass c;", "-\tnode.setProperty(NodeProperties.TYPE,  c = f.getType());", "-\tnode.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "-\treturn c;", "-    }", "+   */", "+  public Class visit(SuperFieldAccess node) {", "+    Field f = null;", "+    try {", "+      f = context.getSuperField(node, node.getFieldName());", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "+    }", "+    ", "+    // Set the node properties", "+    node.setProperty(NodeProperties.FIELD, f);", "+    Class c;", "+    node.setProperty(NodeProperties.TYPE,  c = f.getType());", "+    node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "+    return c;", "+  }"]}], "num": 16909}
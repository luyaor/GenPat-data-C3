{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6607370027a5eacd4438043411c24cb9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44d377effa3d3ea009948500492b2da5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "   @Override public Type visit(CharTypeName node)", "signatureAfterChange": "     @Override public Type visit(CastExpression node)", "diff": ["-   */", "-  @Override public Type visit(CharTypeName node) { return setType(node, TypeSystem.CHAR); }", "+     */", "+    @Override public Type visit(CastExpression node) {", "+      Type t = checkTypeName(node.getTargetType());", "+      Type fromT = check(node.getExpression());", "+        Expression exp = ts.cast(t, node.getExpression());", "+        node.setExpression(exp);", "+        return setType(node, ts.capture(t));", "+      catch (UnsupportedConversionException e) {", "+        setErrorStrings(node, ts.userRepresentation(fromT), ts.userRepresentation(t));", "+        throw new ExecutionError(\"cast.types\", node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8a4953ac4de324ff1fa92715c2ea906", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassMemberChecker.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Override public Void visit(FieldDeclaration node)", "signatureAfterChange": "          @Override public Void visit(FieldDeclaration node)", "diff": ["+    ", "+    @Override public Void visit(FieldDeclaration node) {", "+      checkTypeName(node.getType());", "+      return null;", "+    }", "-  ", "-  @Override public Void visit(FieldDeclaration node) {", "-    // TODO: static context", "-    Type expectedT = checkTypeName(node.getType());", "-    Expression init = node.getInitializer();", "-    if (init != null) { checkType(init, expectedT); }", "-    return null;", "-  }"]}], "num": 23902}
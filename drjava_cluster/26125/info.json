{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a350f5c681f30489a4622fee0244d2a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cdbf62d42ef477786fabf8195255cfb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "b94ae490d7487e2c6ea7efffdcd27f101f0c9e8e", "commitAfterChange": "c7a49752433e44464dd071fad0e4665a166a6ab9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "signatureAfterChange": "   private List<File>      _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                 Iterable<File> classPath, Iterable<File> bootClassPath) throws IOException", "diff": ["-  private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,", "-                                                           Iterable<File> classPath, Iterable<File> bootClassPath) {", "+  private List<File> ", "+    _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,", "+                                Iterable<File> classPath, Iterable<File> bootClassPath) throws IOException {", "-    LinkedList<File> newFiles = new LinkedList<File>();  // Used to record the LL files that must be converted", "+        if (javaFileSet.contains(javaFile)) { _showConflictingFilesMessage(javaFile); }", "-        newFiles.add(javaFile);", "-      else { javaFileSet.add(canonicalFile); }", "+      else {", "+        if (javaFileSet.contains(canonicalFile)) { // canonicalFile was already added for a corresponding .dj* file", "+          _showConflictingFilesMessage(canonicalFile); }  ", "+        javaFileSet.add(canonicalFile); ", "+      }", "-      ", "-//      // Confirm that the .java files corresponding to .dj* files exist.", "-//      for (File f: newFiles)", "-//        if (! f.exists()) Utilities.show(f + \" does not exist\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9423fb4d3394b62f3f482b72b3e8b22f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "14b45aa3b3e4e065019fffca22e1561b9b0d2698", "commitAfterChange": "8e9c94b2b0f764af306682c5d62d4c11ac6175a8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<CompilerError> errors)", "signatureAfterChange": "   private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<CompilerError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-  private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<CompilerError> errors) {", "-    // TODO: The classpath (and sourcepath, bootclasspath) should be an argument passed to Language Levels.", "-    LanguageLevelConverter llc = new LanguageLevelConverter(getActiveCompiler().version());", "+  private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<CompilerError> errors,", "+                                                           Iterable<File> classPath, Iterable<File> bootClassPath) {", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Options llOpts;", "+    if (bootClassPath == null) { llOpts = new Options(getActiveCompiler().version(), classPath); }", "+    else { llOpts = new Options(getActiveCompiler().version(), classPath, bootClassPath); }", "-      llc.convert(files.toArray(new File[0]));", "+      llc.convert(files.toArray(new File[0]), llOpts);"]}], "num": 26125}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08a303137ae6229e9b728ad3d1990877", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8de83f2356ed7cd83e675df001ce18a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "45afdf26640d7e2a166ed67c249ba6fd207b1d2b", "commitAfterChange": "e7a6b9c5a51a2cf7b9cfb5a10d90c24a3c7c3844", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String name)", "signatureAfterChange": "   protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String name)", "diff": ["-    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+        ", "+    // The following assert should be true because interfaces can't have fields!", "+    assert that.getTypeParameters().length == 0;", "+", "-    if (sd != null) {", "-      ", "+    if (sd != null) { "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea12f100431a63017e469a819cc373e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public Void forInterfaceDef(InterfaceDef that)", "signatureAfterChange": "   public Void forInterfaceDef(InterfaceDef that)", "diff": ["-    String className = that.getName().getText();", "-    that.getMav().visit(this);", "-    that.getName().visit(this);", "-    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "-    SymbolData sd = addSymbolData(that, getQualifiedClassName(className));", "+    String className = getQualifiedClassName(that.getName().getText());", "+    // The following for loop should be no-op because interfaces can't have fields!", "+    assert that.getTypeParameters().length == 0;", "+//    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+    SymbolData sd = defineSymbolData(that, className);", "-      ", "+    that.getMav().visit(this);", "+    that.getName().visit(this);", "-    _classesToBeParsed.remove(getQualifiedClassName(className));", "+    _classesToBeParsed.remove(className);", "-  }  "]}], "num": 30843}
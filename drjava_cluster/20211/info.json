{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23ea4954a86bc874ffaf974fb49b04c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8064b59e31d6cd08c7d7c07187e7ab85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "e17ce492a90f16c44e47a7ccfb4b5860ab80d4db", "commitAfterChange": "4df0ed95b0ba954b76dde43842a3396880fb20d5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testShouldBeErrors()", "signatureAfterChange": "   public void testShouldBeErrors()", "diff": ["-    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    boolean accum = true;", "+      // need to create a new LLC for every file we compile as a test", "+      // otherwise the failures from the previous file will count towards the current", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "-      assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+      boolean err = !result.getFirst().isEmpty() || !result.getSecond().isEmpty();", "+      if (!err) {", "+        System.out.println(\"Unexpectedly converted without errors: \"+testFiles[i]);", "+      }", "+      accum &= err;", "+    assertTrue(\"should be parse exceptions or visitor exceptions\", accum);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d1f5477a1861458807590ef17a28e1b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testShouldBeErrors()", "signatureAfterChange": "   public void testShouldBeErrors()", "diff": ["-", "+    ", "+    System.err.println(\"testFiles for testShouldBeErrors = \" + Arrays.toString(testFiles));", "+//    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    for (int i = 0; i < testFiles.length; i++) {", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-      for (int i = 0; i<testFiles.length; i++) {", "-        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "-        assertTrue(\"should be parse exceptions or visitor exceptions in file \" + testFiles[i].getName(), !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "-      }", "+      result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+      assertTrue(\"should be parse exceptions or visitor exceptions in file \" + testFiles[i].getName(),", "+                 !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+    }"]}], "num": 20211}
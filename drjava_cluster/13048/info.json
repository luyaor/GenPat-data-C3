{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40825f31c78a413c80c59bea3d00fa76", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e93a46aed04d167db3e6b3c2845d66", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "          public void xtestForConstructorDef()", "signatureAfterChange": "          public void xtestForConstructorDef()", "diff": ["-      _cbfjv._enclosingData = new SymbolData(\"NotRightName\");", "+      _cbfjv._enclosing = new SymbolData(\"NotRightName\");", "-      _cbfjv._enclosingData = new SymbolData(\"MyClass\");", "+      _cbfjv._enclosing = new SymbolData(\"MyClass\");", "-      MethodData constructor = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbfjv._enclosingData, ", "+      MethodData constructor = new MethodData(\"MyClass\", ", "+                                              _publicMav, ", "+                                              new TypeParameter[0], ", "+                                              _cbfjv._enclosing, ", "-                                              _cbfjv._enclosingData,", "+                                              _cbfjv._enclosing,", "-      assertEquals(\"SymbolData should have 1 method\", 1, _cbfjv._enclosingData.getMethods().size());", "-      assertTrue(\"SymbolData's constructor should be correct\", _cbfjv._enclosingData.getMethods().contains(constructor));", "+      assertEquals(\"SymbolData should have 1 method\", 1, _cbfjv._enclosing.getMethods().size());", "+      assertTrue(\"SymbolData's constructor should be correct\", _cbfjv._enclosing.getMethods().contains(constructor));", "-      FormalParameter fp = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\")), false);", "+      FormalParameter fp = ", "+        new FormalParameter(SourceInfo.NO_INFO, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                                                new Word(SourceInfo.NO_INFO, \"i\")), ", "+                            false);", "-      ConstructorDef cd2 = new ConstructorDef(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"MyClass\"), _publicMav, new FormalParameter[] {fp}, new ReferenceType[] {rt}, ", "-                                             new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ConstructorDef cd2 = ", "+        new ConstructorDef(SourceInfo.NO_INFO, ", "+                           new Word(SourceInfo.NO_INFO, \"MyClass\"), ", "+                           _publicMav, ", "+                           new FormalParameter[] {fp}, ", "+                           new ReferenceType[] {rt}, ", "+                           new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-      MethodData constructor2 = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbfjv._enclosingData, ", "+      MethodData constructor2 = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbfjv._enclosing, ", "-                                              _cbfjv._enclosingData,", "+                                              _cbfjv._enclosing,", "-      vd.setEnclosingData(_cbfjv._enclosingData.getMethods().getLast());                                        ", "+      vd.setEnclosingData(_cbfjv._enclosing.getMethods().getLast());                                        ", "-      assertEquals(\"SymbolData should have 2 methods\", 2, _cbfjv._enclosingData.getMethods().size());", "+      assertEquals(\"SymbolData should have 2 methods\", 2, _cbfjv._enclosing.getMethods().size());", "-      assertTrue(\"SymbolData should have new constructor\", _cbfjv._enclosingData.getMethods().contains(constructor2));", "+      assertTrue(\"SymbolData should have new constructor\", _cbfjv._enclosing.getMethods().contains(constructor2));", "-      _cbfjv._enclosingData.setName(\"package.MyClass2\");", "+      _cbfjv._enclosing.setName(\"package.MyClass2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99426f0a634480537cfa4b943ca77e71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "          public void testForConstructorDef()", "signatureAfterChange": "          public void testForConstructorDef()", "diff": ["-      _cbiv._classData = new SymbolData(\"NotRightName\");", "+      _cbiv._enclosing = new SymbolData(\"NotRightName\");", "-      _cbiv._classData = new SymbolData(\"MyClass\");", "+      _cbiv._enclosing = new SymbolData(\"MyClass\");", "-      MethodData constructor = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbiv._classData, ", "+      MethodData constructor = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbiv._enclosing, ", "-                                              _cbiv._classData,", "+                                              _cbiv._enclosing,", "-      assertEquals(\"SymbolData should have 1 method\", 1, _cbiv._classData.getMethods().size());", "-      assertTrue(\"SymbolData's constructor should be correct\", _cbiv._classData.getMethods().contains(constructor));", "+      assertEquals(\"SymbolData should have 1 method\", 1, _cbiv._enclosing.getMethods().size());", "+      assertTrue(\"SymbolData's constructor should be correct\", _cbiv._enclosing.getMethods().contains(constructor));", "-                                              new Word(SourceInfo.NO_INFO, \"MyClass\"), _publicMav, ", "-                                              new FormalParameter[] {fp}, new ReferenceType[] {rt}, ", "+                                              new Word(SourceInfo.NO_INFO, \"MyClass\"), ", "+                                              _publicMav, ", "+                                              new FormalParameter[] {fp}, ", "+                                              new ReferenceType[] {rt}, ", "-      VariableData vd = new VariableData(\"i\", _finalMav, SymbolData.INT_TYPE, true, null);", "-      MethodData constructor2 = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbiv._classData, ", "+      VariableData vd = new VariableData(\"i\", _finalMav, SymbolData.INT_TYPE, true, _cbiv._enclosing);", "+      MethodData constructor2 = new MethodData(\"MyClass\", ", "+                                               _publicMav, ", "+                                               new TypeParameter[0], ", "+                                               _cbiv._enclosing, ", "-                                              _cbiv._classData,", "-                                              null);", "+                                               _cbiv._enclosing,", "+                                               null);", "-      vd.setEnclosingData(_cbiv._classData.getMethods().getLast());", "+//      vd.setEnclosingData(_cbiv._enclosing.getMethods().getLast());", "-      assertEquals(\"SymbolData should have 2 methods\", 2, _cbiv._classData.getMethods().size());", "+      assertEquals(\"SymbolData should have 2 methods\", 2, _cbiv._enclosing.getMethods().size());", "-      assertTrue(\"SymbolData should have new constructor\", _cbiv._classData.getMethods().contains(constructor2));", "+      assertTrue(\"SymbolData should have new constructor\", _cbiv._enclosing.getMethods().contains(constructor2));"]}], "num": 13048}
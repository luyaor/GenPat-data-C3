{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c5c5b1a428a3061ee649ff1291aedc3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91d11c04a6c37cc67948424142e4b97f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 29, "signatureBeforeChange": "          public void testForClassDef()", "signatureAfterChange": "          public void testForClassDef()", "diff": ["-                                 new TypeParameter[0], ", "+                                  new TypeParameter[0], ", "-      ", "-      assertTrue(\"Should have resolved java.lang.Object\", symbolTable.containsKey(\"java.lang.Object\"));", "-      assertFalse(\"Should not be a continuation\", symbolTable.get(\"java.lang.Object\").isContinuation());", "-      SymbolData sd = symbolTable.get(\"myPackage.Lisa\");", "-      assertTrue(\"Lisa should be in _newSDs\", _newSDs.containsKey(sd));", "-      MethodData md2 = new MethodData(\"equals\",", "-                                   _publicMav, ", "-                                   new TypeParameter[0], ", "-                                   SymbolData.BOOLEAN_TYPE, ", "-                                     new VariableData[] { new VariableData(_iv.getSymbolData(\"Object\", _iv._makeSourceInfo(\"java.lang.Object\"))) },", "-                                   new String[0], ", "-                                   sd,", "-                                   null);", "-                                   ", "+      assertTrue(\"Should have resolved java.lang.Object\", ", "+                 LanguageLevelConverter.symbolTable.containsKey(\"java.lang.Object\"));", "+      assertFalse(\"Should not be a continuation\", ", "+                  LanguageLevelConverter.symbolTable.get(\"java.lang.Object\").isContinuation());", "+      SymbolData sd = LanguageLevelConverter.symbolTable.get(\"myPackage.Lisa\");", "+      assertTrue(\"Lisa should be in _newSDs\", LanguageLevelConverter._newSDs.containsKey(sd));", "+      MethodData md2 = ", "+        new MethodData(\"equals\",", "+                       _publicMav, ", "+                       new TypeParameter[0], ", "+                       SymbolData.BOOLEAN_TYPE, ", "+                       new VariableData[] { new VariableData(_iv.getSymbolData(\"Object\", ", "+                                                                               _iv._makeSourceInfo(\"java.lang.Object\"))) },", "+                       new String[0], ", "+                       sd,", "+                       null);", "+      ", "-                             ", "+      ", "-      assertTrue(\"Should have resolved java.lang.System\", symbolTable.containsKey(\"java.lang.System\"));", "-      assertFalse(\"Should not be a continuation\", symbolTable.get(\"java.lang.System\").isContinuation());", "-      sd = symbolTable.get(\"Bart\");", "+      assertTrue(\"Should have resolved java.lang.System\", LanguageLevelConverter.symbolTable.containsKey(\"java.lang.System\"));", "+      assertFalse(\"Should not be a continuation\", LanguageLevelConverter.symbolTable.get(\"java.lang.System\").isContinuation());", "+      sd = LanguageLevelConverter.symbolTable.get(\"Bart\");", "-", "+      ", "-", "-", "+      ", "-      symbolTable.put(\"junit.framework.TestCase\", new SymbolData(\"junit.framework.TestCase\"));", "+      LanguageLevelConverter.symbolTable.put(\"junit.framework.TestCase\", new SymbolData(\"junit.framework.TestCase\"));", "-      assertNotNull(\"Should have looked up TestSuper2\", symbolTable.get(\"TestSuper2\"));", "+      assertNotNull(\"Should have looked up TestSuper2\", LanguageLevelConverter.symbolTable.get(\"TestSuper2\"));", "-      //Check a method with void return, but name not starting with test, so it's not okay.", "+      // Check a method with void return, but name not starting with test, but it's still okay.", "-                                                    _packageMav, ", "-                                                    new TypeParameter[0], ", "-                                                    new VoidReturn(SourceInfo.NO_INFO, \"void\"), ", "-                                                    new Word(SourceInfo.NO_INFO, \"uhOh\"),", "-                                                    new FormalParameter[0],", "-                                                    new ReferenceType[0], ", "-                                                    new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-", "+                                                     _packageMav, ", "+                                                     new TypeParameter[0], ", "+                                                     new VoidReturn(SourceInfo.NO_INFO, \"void\"), ", "+                                                     new Word(SourceInfo.NO_INFO, \"uhOh\"),", "+                                                     new FormalParameter[0],", "+                                                     new ReferenceType[0], ", "+                                                     new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ", "-", "-", "-", "+      ", "+      ", "+      ", "-", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef6bff2ba62f2b380119095254e3326a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 99, "signatureBeforeChange": "          public void testGetArraySymbolData()", "signatureAfterChange": "          public void testGetArraySymbolData()", "diff": ["-                   _llv._getArraySymbolData(\"TestFile[]\", SourceInfo.NO_INFO, false, false, false, false));", "+                   testLLVisitor._getArraySymbolData(\"TestFile[]\", SourceInfo.NO_INFO, false, false, false, false));", "-      symbolTable.put(\"Iexist\", sd);", "-      _llv._getArraySymbolData(\"Iexist[]\", SourceInfo.NO_INFO, false, false, false, false).getName();", "-      assertTrue(\"Should have created an array data and add it to symbol table.\", symbolTable.containsKey(\"Iexist[]\"));", "-      SymbolData ad = symbolTable.get(\"Iexist[]\");", "+      LanguageLevelConverter.symbolTable.put(\"Iexist\", sd);", "+      testLLVisitor._getArraySymbolData(\"Iexist[]\", SourceInfo.NO_INFO, false, false, false, false).getName();", "+      assertTrue(\"Should have created an array data and add it to symbol table.\", ", "+                 LanguageLevelConverter.symbolTable.containsKey(\"Iexist[]\"));", "+      SymbolData ad = LanguageLevelConverter.symbolTable.get(\"Iexist[]\");", "-      assertEquals(\"Should have Object as super class\", symbolTable.get(\"java.lang.Object\"), ad.getSuperClass());", "+      assertEquals(\"Should have Object as super class\", ", "+                   LanguageLevelConverter.symbolTable.get(\"java.lang.Object\"), ", "+                   ad.getSuperClass());", "-                   _llv._getArraySymbolData(\"Iexist[]\", SourceInfo.NO_INFO, false, false, false, false));", "+                   testLLVisitor._getArraySymbolData(\"Iexist[]\", SourceInfo.NO_INFO, false, false, false, false));", "-      _llv._getArraySymbolData(\"Iexist[][]\", SourceInfo.NO_INFO, false, false, false, false);", "-      assertTrue(\"Should have added a multidimensional array to the table.\", symbolTable.containsKey(\"Iexist[][]\"));", "+      testLLVisitor._getArraySymbolData(\"Iexist[][]\", SourceInfo.NO_INFO, false, false, false, false);", "+      assertTrue(\"Should have added a multidimensional array to the table.\", ", "+                 LanguageLevelConverter.symbolTable.containsKey(\"Iexist[][]\"));", "-      symbolTable.put(\"String\", sd2);", "-      _llv._getArraySymbolData(\"String[][]\", SourceInfo.NO_INFO, false, false, false, false);", "-      assertTrue(\"Should have added String[] to table\", symbolTable.containsKey(\"String[]\"));", "-      assertTrue(\"Should have added String[][] to table\", symbolTable.containsKey(\"String[][]\"));", "+      LanguageLevelConverter.symbolTable.put(\"String\", sd2);", "+      testLLVisitor._getArraySymbolData(\"String[][]\", SourceInfo.NO_INFO, false, false, false, false);", "+      assertTrue(\"Should have added String[] to table\", LanguageLevelConverter.symbolTable.containsKey(\"String[]\"));", "+      assertTrue(\"Should have added String[][] to table\", LanguageLevelConverter.symbolTable.containsKey(\"String[][]\"));"]}], "num": 16339}
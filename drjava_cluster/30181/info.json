{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "289a96d070de9afe8b3d667f8208985b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d3eb6d5a5c0c6946bcfeb0a345f927c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "f5f9e35c2a806ad9979915d514415944af196bab", "commitAfterChange": "720d6a91901cb3699fb981b0c6b71471d6bbb848", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected String readFile(File file) throws IOException", "signatureAfterChange": "   protected File tempDirectory() throws IOException", "diff": ["-   */", "-  protected String readFile(File file) throws IOException {", "-    FileReader reader = new FileReader(file);", "-    StringBuffer buf = new StringBuffer();", "-", "-    while (reader.ready()) {", "-      char c = (char) reader.read();", "-      buf.append(c);", "-    }", "-", "-    return buf.toString();", "+  /** Create a new temporary directory in _tempDir. */", "+  protected File tempDirectory() throws IOException {", "+    return FileOps.createTempDirectory(\"DrJava-test\", _tempDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e7a0ba155e7e08506c30d39682b697a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "59806b59ab2c85aaa695cf1cfa11d83de247e9c7", "commitAfterChange": "a3900a56c959c375ad94466aa0351f7bc17ae0c0", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "   private JMenu _setUpFileMenu()", "signatureAfterChange": "   private JMenu _setUpFileMenu()", "diff": ["+    ", "+    // New, open", "+    // Save, Save as, Save all", "+    fileMenu.addSeparator();", "+    ", "-", "-", "+    ", "+    tmpItem = fileMenu.add(_saveAllAction);", "+    ", "+    // Close, Close all", "+    fileMenu.addSeparator();", "+    ", "-    tmpItem = fileMenu.add(_saveAllAction);", "-", "-    fileMenu.addSeparator();", "-    tmpItem = fileMenu.add(_compileAction);", "-    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0));", "-", "-    // keep track of the compile menu item", "-    _compileMenuItem = tmpItem;", "-    //_compileAction.setEnabled(false);", "-", "-    _abortInteractionAction.setEnabled(false);", "-    _abortInteractionMenuItem = fileMenu.add(_abortInteractionAction);", "-    _abortInteractionMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK));", "-", "+    // Page setup, print preview, print", "+    ", "+    // Quit"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62e88a9709d360ab41d6f63711ef1051", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ArgumentTokenizer.java", "commitBeforeChange": "e6059a690372d24d354206755ceb1326c1718997", "commitAfterChange": "30865706505ac032f7839e76656d4d5fb3416a82", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public ArrayList<String> tokenize(String arguments, boolean stringify)", "signatureAfterChange": "   public ArrayList<String> tokenize(String arguments, boolean stringify)", "diff": ["-              // Seen the close quote; finish this arg and start a new one", "-              argList.add(currArg.toString());", "-              currArg = new StringBuffer();", "-              state = NO_TOKEN_STATE;", "+              // Seen the close quote; continue this arg until whitespace is seen", "+              state = NORMAL_TOKEN_STATE;", "-              // Seen the close quote; finish this arg and start a new one", "-              argList.add(currArg.toString());", "-              currArg = new StringBuffer();", "-              state = NO_TOKEN_STATE;", "+              // Seen the close quote; continue this arg until whitespace is seen", "+              state = NORMAL_TOKEN_STATE;", "-          case NORMAL_TOKEN_STATE:", "-            if (Character.isWhitespace(c)) {", "-              // Whitespace ends the token; start a new one", "-              argList.add(currArg.toString());", "-              currArg = new StringBuffer();", "-              state = NO_TOKEN_STATE;", "-            }", "-            else if (c == '\\\\') {", "-              // Backslash in a normal token: escape the next character", "-              escaped = true;", "-            }", "-            else {", "-              currArg.append(c);", "-            }", "-            break;", "+//          case NORMAL_TOKEN_STATE:", "+//            if (Character.isWhitespace(c)) {", "+//              // Whitespace ends the token; start a new one", "+//              argList.add(currArg.toString());", "+//              currArg = new StringBuffer();", "+//              state = NO_TOKEN_STATE;", "+//            }", "+//            else if (c == '\\\\') {", "+//              // Backslash in a normal token: escape the next character", "+//              escaped = true;", "+//            }", "+//            else if (c == '\\'') {", "+//              state = SINGLE_QUOTE_STATE;", "+//            }", "+//            else if (c == '\"') {", "+//              state = DOUBLE_QUOTE_STATE;", "+//            }", "+//            else {", "+//              currArg.append(c);", "+//            }", "+//            break;", "+          case NORMAL_TOKEN_STATE:", "+                else if (state == NORMAL_TOKEN_STATE) {", "+                  // Whitespace ends the token; start a new one", "+                  argList.add(currArg.toString());", "+                  currArg = new StringBuffer();", "+                  state = NO_TOKEN_STATE;", "+                }"]}], "num": 30181}
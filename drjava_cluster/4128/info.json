{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b482e29bc6edac7833533aa4dbb091c7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63a11f39427bc5dbd05b8f2c62a8438e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 52, "signatureBeforeChange": "   final public InterfaceDeclaration unmodifiedInterfaceDeclaration(ModifierFlags mf) throws ParseException", "signatureAfterChange": "   final public InterfaceDeclaration unmodifiedInterfaceDeclaration(ModifierFlags mf) throws ParseException", "diff": ["-    t = jj_consume_token(INTERFACE);", "-    id = jj_consume_token(IDENTIFIER);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LESS:", "-      typeParameters = TypeParameters();", "-      break;", "-    default:", "-      jj_la1[44] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case EXTENDS:", "-      jj_consume_token(EXTENDS);", "-      impl = ReferenceTypeNameList();", "-      break;", "-    default:", "-      jj_la1[45] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(LBRACE);", "-    label_16:", "-    while (true) {", "+    try {", "+      t = jj_consume_token(INTERFACE);", "+      id = jj_consume_token(IDENTIFIER);", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case DOUBLE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NATIVE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case SHORT:", "-      case STATIC:", "-      case SYNCHRONIZED:", "-      case TRANSIENT:", "-      case VOID:", "-      case VOLATILE:", "-      case IDENTIFIER:", "+        typeParameters = TypeParameters();", "+        break;", "+      default:", "+        jj_la1[45] = jj_gen;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case EXTENDS:", "+        jj_consume_token(EXTENDS);", "+        impl = ReferenceTypeNameList();", "-        break label_16;", "+        ;", "-      decl = interfaceMemberDeclaration();", "+      jj_consume_token(LBRACE);", "+      label_16:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case DOUBLE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOID:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+        case LESS:", "+          ;", "+          break;", "+        default:", "+          jj_la1[47] = jj_gen;", "+          break label_16;", "+        }", "+        decl = interfaceMemberDeclaration();", "-    }", "-    e = jj_consume_token(RBRACE);", "+      }", "+      e = jj_consume_token(RBRACE);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid interface declaration\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d96ba2616f5acd47eab522370cfb45f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 43, "signatureBeforeChange": "   final public List<Node> fieldDeclaration() throws ParseException", "signatureAfterChange": "   final public List<Node> fieldDeclaration() throws ParseException", "diff": ["-    mf = modifiers();", "-    typ = type();", "-    id = jj_consume_token(IDENTIFIER);", "-    label_9:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case LBRACKET:", "-        ;", "-        break;", "-      default:", "-        jj_la1[23] = jj_gen;", "-        break label_9;", "-      }", "-      jj_consume_token(LBRACKET);", "-      jj_consume_token(RBRACKET);", "-                  dim++;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case ASSIGN:", "-      jj_consume_token(ASSIGN);", "-      exp = variableInitializer();", "-      break;", "-    default:", "-      jj_la1[24] = jj_gen;", "-      ;", "-    }", "-        list.add(createFieldDeclaration(mf, typ, id, exp, dim));", "-    label_10:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case COMMA:", "-        ;", "-        break;", "-      default:", "-        jj_la1[25] = jj_gen;", "-        break label_10;", "-      }", "-      jj_consume_token(COMMA);", "-              dim = 0; exp = null;", "+    try {", "+      mf = modifiers();", "+      typ = type();", "-      label_11:", "+      label_9:", "-          jj_la1[26] = jj_gen;", "-          break label_11;", "+          jj_la1[24] = jj_gen;", "+          break label_9;", "-                   dim++;", "+                  dim++;", "-        jj_la1[27] = jj_gen;", "+        jj_la1[25] = jj_gen;", "+        list.add(createFieldDeclaration(mf, typ, id, exp, dim));", "+      label_10:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case COMMA:", "+          ;", "+          break;", "+        default:", "+          jj_la1[26] = jj_gen;", "+          break label_10;", "+        }", "+        jj_consume_token(COMMA);", "+              dim = 0; exp = null;", "+        id = jj_consume_token(IDENTIFIER);", "+        label_11:", "+        while (true) {", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case LBRACKET:", "+            ;", "+            break;", "+          default:", "+            jj_la1[27] = jj_gen;", "+            break label_11;", "+          }", "+          jj_consume_token(LBRACKET);", "+          jj_consume_token(RBRACKET);", "+                   dim++;", "+        }", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ASSIGN:", "+          jj_consume_token(ASSIGN);", "+          exp = variableInitializer();", "+          break;", "+        default:", "+          jj_la1[28] = jj_gen;", "+          ;", "+        }", "-    }", "-    jj_consume_token(SEMICOLON);", "+      }", "+      jj_consume_token(SEMICOLON);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid Field Declaration\");", "+    }"]}], "num": 4128}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8a801a6c8d6313301ad32c60a56a0db", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "062dd412d3b142a2d0d3c85d2aabf09a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void xtestInfiniteLoop() throws Exception", "signatureAfterChange": "   public void testInfiniteLoop() throws Exception", "diff": ["-   */", "-  public void xtestInfiniteLoop() throws Exception {", "+  /** Tests that an infinite loop in a test case can be aborted by clicking the Reset button. */", "+  public void testInfiniteLoop() throws Exception {", "-        synchronized(this) {", "-          assertInterpreterReadyCount(1);", "-          junitEndCount++;", "-          notify();", "+        System.err.println(\"InterpreterReadyCount after reset = \" + interpreterReadyCount);", "+        // assertInterpreterReadyCount(1);  // not true if testing is aborted", "+        junitEndCount++;", "+        synchronized (_lock) {", "+          _junitDone = true;", "+          _lock.notify();", "-    synchronized(listener2) {", "+    ", "+    _logJUnitStart();", "+    try {", "-      listener2.assertJUnitStartCount(1);", "-      if (printMessages) System.out.println(\"waiting for test\");", "-      listener2.wait();", "+      _waitJUnitDone();", "+      fail(\"slave JVM should throw an exception because testing is interrupted by resetting interactions\");", "+    catch (UnexpectedException e) { }", "+", "+    listener2.assertJUnitStartCount(1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "758d0d21767fbf28abbc7bd3d72d6474", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public void replThrewException(String exceptionClass, String message, String stackTrace, String shortMessage)", "signatureAfterChange": "   public void replThrewException(String message)", "diff": ["-   */", "-  public void replThrewException(String exceptionClass, String message, String stackTrace, String shortMessage) {", "-    if (shortMessage != null) {", "-      if (shortMessage.endsWith(\"<EOF>\\\"\")) {", "-        interactionContinues();", "-        return;", "-      }", "+  /** Signifies that the most recent interpretation was ended due to an exception being thrown. */", "+  public void replThrewException(String message) {", "+    if (message.endsWith(\"<EOF>\\\"\")) {", "+      interactionContinues();", "-    _document.appendExceptionResult(exceptionClass, message, stackTrace, InteractionsDocument.ERROR_STYLE);", "-    _secondToLastError = _lastError;", "-    _lastError = new Pair<String,String>(exceptionClass,message);", "-    _interactionIsOver();", "+    else {", "+      _document.appendExceptionResult(message, InteractionsDocument.ERROR_STYLE);", "+      _secondToLastError = _lastError;", "+      _lastError = message;", "+      _interactionIsOver();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d66ef21d441aff4a1f96223d239dfe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testInteractionAbort()     throws BadLocationException, InterruptedException, IOException", "signatureAfterChange": "   public void testInteractionAbort()     throws BadLocationException, InterruptedException, IOException", "diff": ["-    //System.err.println(\"Entering testInteractionAbort\");", "-        //System.err.println(\"start notice\");", "-        //System.err.println(\"exit notice\");", "-          //System.err.println(\"Interrupted!\");", "+      public void interactionsResetting() {", "+        assertInteractionStartCount(1);", "+        assertInteractionsExitedCount(0);", "+        assertInteractionsResetCount(0);", "+        interactionsResettingCount++;", "+      }", "+      ", "-          //System.err.println(\"reset notice\");", "+          assertInteractionsResettingCount(1);", "+          this.notify();", "-      //System.err.println(\"about to abort\");", "-      //System.err.println(\"about to wait for abort\");", "+      listener.wait();", "-    //System.err.println(\"waiting done\");", "+    listener.assertInteractionsResettingCount(1);", "-    //System.err.println(\"after wait\");", "-    //System.err.println(\"after wait\");", "-    //System.err.println(\"after wait\");", "-    //System.err.println(\"about to check DrJavaTestFoo\");", "-    //System.err.println(\"done check DrJavaTestFoo: \" + afterAbort);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b55a36310fea0d29bb71a47a179b593d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "signatureAfterChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "diff": ["-  /** Verifies that we get a nonTestCase event */", "+  /** Verifies that we get a nonTestCase event and that opening a single test file enables testing. */", "+    ", "+//    if (printMessages) System.err.println(\"-----testJUnitAllWithNoValidTests-----\");", "+//    Utilities.show(\"First test complete\");", "+    ", "-    listener = new JUnitNonTestListener(true);", "+    JUnitCompileBeforeTestListener listener2 = new JUnitCompileBeforeTestListener();", "+    ", "+    listener2.resetCompileCounts();", "+    ", "-    _model.addListener(listener);", "+    _model.addListener(listener2);", "-    listener.assertNonTestCaseCount(1);", "-    listener.assertJUnitSuiteStartedCount(0);", "-    listener.assertJUnitTestStartedCount(0);", "-    listener.assertJUnitTestEndedCount(0);", "-    _model.removeListener(listener);", "+    listener2.assertNonTestCaseCount(0);", "+    listener2.assertJUnitSuiteStartedCount(1);", "+    listener2.assertJUnitTestStartedCount(1);", "+    listener2.assertJUnitTestEndedCount(1);", "+    _model.removeListener(listener2);"]}], "num": 20131}
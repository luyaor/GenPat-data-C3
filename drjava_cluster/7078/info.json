{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef8e695ecee77a599db94f9060edd408", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa85c3b95cd247926d4bce353e021e5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f85f20b04a845bc5f3cc15aa220d5ca52f7ac620", "commitAfterChange": "65a7277b66a8820a81606e41a75578dc0c567fde", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     private DJClass enclosingThis(Type expected)", "signatureAfterChange": "     private DJClass enclosingThis(Type expected)", "diff": ["-      DJClass candidate = context.getThis();", "-      while (candidate != null) {", "-        if (ts.isSubtype(SymbolUtil.thisType(candidate), expected)) { return candidate; }", "-        candidate = SymbolUtil.dynamicOuterClass(candidate);", "-      }", "-      return null;", "+      return expected.apply(new TypeAbstractVisitor<DJClass>() {", "+        @Override public DJClass defaultCase(Type t) { return null; }", "+        @Override public DJClass forClassType(ClassType t) {", "+          if (context.hasThis(t.ofClass()) && ts.isSubtype(SymbolUtil.thisType(t.ofClass()), t)) {", "+            return t.ofClass();", "+          }", "+          else { return null; }", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e085b2fb6dd9d8b96a3fe2bb42cb79ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "914e6ea1032a53755afef43e1e250cb1e0c1d993", "commitAfterChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 457, "signatureBeforeChange": "   public void openFolder(DirectoryChooser chooser)", "signatureAfterChange": "   public void openFolder(DirectoryChooser chooser)", "diff": ["-    String type = \"'\" + ext + \"' \";", "+    final String type = \"'\" + ext + \"' \";", "+    javax.swing.filechooser.FileFilter ff = new javax.swing.filechooser.FileFilter() {", "+      public boolean accept(File f) { return true; }", "+      public String getDescription() { return \"All \"+type+\" Files in Folder Selected\"; }", "+    };", "+    chooser.resetChoosableFileFilters();", "+    chooser.setAcceptAllFileFilterUsed(false);", "+    chooser.setFileFilter(ff);", "+    chooser.removeChoosableFileFilter(ff);"]}], "num": 7078}
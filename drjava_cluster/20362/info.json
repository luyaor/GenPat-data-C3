{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d1afc014fdaf6ccbcc82e165f0ac2fa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0697ff4b48dbfb77e01e0a75a87a4814", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   protected SymbolData getQualifiedSymbolData(String qualClassName, SourceInfo si, boolean resolve, boolean fromClassFile,                                             boolean addError)", "signatureAfterChange": "   protected SymbolData getQualifiedSymbolData(String qualClassName, SourceInfo si, boolean resolve, boolean fromClassFile,                                             boolean addError)", "diff": ["+//    System.err.println(\"***** Checking for primitive symbol \" + qualClassName);", "-    if (sd != null) { return sd; }", "+    if (sd != null) { ", "+//      System.err.println(\"***** Matched for primitive symbol \" + sd);", "+      return sd; ", "+    }", "+    ", "+    // Check for references to generic types  (only happens in FullJava code)", "+    // TODO !!! Does not handle forward references", "+    String name = getUnqualifiedClassName(qualClassName);", "+    if (_genericTypes.containsKey(name)) {", "+//      Utilities.show(\"Return type \" + name + \" is generic and value is \" + _genericTypes.get(name));", "+      return _genericTypes.get(name);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c50b6bc12d97fd14fc0dbebe1183fbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public synchronized void addInterpreter(String name, Interpreter interpreter)", "signatureAfterChange": "   public void addInterpreter(String name)", "diff": ["-   */", "-  public synchronized void addInterpreter(String name, Interpreter interpreter) {", "-    if (_interpreters.containsKey(name)) {", "-      throw new IllegalArgumentException(\"'\" + name + \"' is not a unique interpreter name\");", "-    }", "-    _interpreters.put(name, new InterpreterData(interpreter));", "-  }", "+   */", "+  public void addInterpreter(String name) {", "+    if (_interpreters.containsKey(name)) {", "+      throw new IllegalArgumentException(\"'\" + name + \"' is not a unique interpreter name\");", "+    }", "+    Interpreter i = new Interpreter(Options.DEFAULT, _classPathManager.getClassLoader());", "+    _interpreters.put(name, i);", "+  }"]}], "num": 20362}
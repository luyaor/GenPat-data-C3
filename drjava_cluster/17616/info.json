{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28af69e5e755d760a6ea74cacf4ba7c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29ec520cfb5bcf9e70e3788bd0898c99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "               public void testForEqualityExpressionOnly()", "signatureAfterChange": "               public void testForEqualityExpressionOnly()", "diff": ["-      EqualityExpression ee = new EqualsExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                                   new NullLiteral(SourceInfo.NO_INFO));", "+      EqualityExpression ee = new EqualsExpression(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-                   _etc.forEqualityExpressionOnly(ee, SymbolData.BOOLEAN_TYPE.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                                                  SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                  SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), integer.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), integer.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, integer.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, integer.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, SymbolData.BOOLEAN_TYPE.getInstanceData(), bool.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.BOOLEAN_TYPE.getInstanceData(), bool.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, bool.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, bool.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), _sd2.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), _sd2.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                  SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type int and boolean\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, \"", "+                     + \"they must either both be number types or both be boolean types.  You have specified \"", "+                     + \"expressions with type int and boolean\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type int and i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, \"", "+                     + \"they must either both be number types or both be boolean types.  You have specified \"", "+                     + \"expressions with type int and i.like.monkey\", errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type i.like.monkey and int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they \"", "+                     + \"must either both be number types or both be boolean types.  You have specified expressions \"", "+                     + \"with type i.like.monkey and int\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, _sd1, _sd2.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, _sd1, _sd2.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the left side.  Perhaps you meant to create a new instance of \" + _sd1.getName(), errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have \"", "+                     +\"referenced a type name on the left side.  Perhaps you meant to create a new instance of \" + ", "+                   _sd1.getName(), ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), _sd2));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), _sd2));", "-      assertEquals(\"Error message should be correct\", \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the right side.  Perhaps you meant to create a new instance of \" + _sd2.getName(), errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", \"The arguments to this Equality Operator(==, !=) must both \"", "+                     + \"be instances.  Instead, you have referenced a type name on the right side.  Perhaps you \"", "+                     + \"meant to create a new instance of \" + _sd2.getName(), ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9ef1c1619b061745a691eef6e7ebcd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "               public void testForComparisonExpressionOnly()", "signatureAfterChange": "          public void testForComparisonExpressionOnly()", "diff": ["-    ", "-      ComparisonExpression ce = new LessThanExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+      ComparisonExpression ce = new LessThanExpression(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                                    SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.BOOLEAN_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(),", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                                                    SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison \"", "+                     + \"Operator (<, >; <=, >=) to it\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of double\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The left side of this expression is a type, not an instance.  Perhaps you meant to create a \"", "+                     + \"new instance of double\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), _sd1.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                                    _sd1.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison \"", "+                     + \"Operator (<, >; <=, >=) to it\", ", "+                   errors.getLast().getFirst());", "-      //gives an error if right side is not an instance type", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE));", "+      // Gives an error if right side is not an instance type", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of int\", ", "+                   errors.getLast().getFirst());"]}], "num": 17616}
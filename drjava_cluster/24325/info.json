{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0de486e3a3e1b8fb21be8aa29dc59ab6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891ded7acee28cc78115f71385b7ad41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 230, "signatureBeforeChange": "     public void removeRegion(final R region)", "signatureAfterChange": "     public void removeRegion(final R region)", "diff": ["-    public void removeRegion(final R region) {", "-      _regions.remove(region);", "-", "+    public void removeRegion(final R region) {      ", "+      // if we're removing the current region, select a more recent region, if available", "+      // if a more recent region is not available, select a less recent region, if available", "+      // if a less recent region is not available either, set to null", "+      final R cur = _current; // so we can verify if _current got changed", "+      if (region==cur) {", "+        if (nextCurrentRegion().equals(cur)) {", "+          if (prevCurrentRegion().equals(cur)) {", "+            _current = null;", "+          }", "+        }", "+      }", "+      for(int i=0;i<_regions.size();++i) {", "+        if (region==_regions.get(i)) {", "+          _regions.remove(i);", "+          break;", "+        }", "+      }", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa6f4ec9733595566e400f844a852db2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public ArrayList<HighlightStatus> getHighlightStatus(int start, int end)", "signatureAfterChange": "   public ArrayList<HighlightStatus> getHighlightStatus(int start, int end)", "diff": ["-      return _getHighlightStatus(start, end); ", "-  }", "+    setCurrentLocation(start);", "+    /* Now ask reduced model for highlight status for chars till end */", "+    v = _reduced.getHighlightStatus(start, end - start);", "+    /* Go through and find any NORMAL blocks. Within them check for keywords. */", "+    for (int i = 0; i < v.size(); i++) {", "+      HighlightStatus stat = v.get(i);", "+      if (stat.getState() == HighlightStatus.NORMAL) i = _highlightKeywords(v, i);", "+    }", "+    ", "+    /* bstoler: Previously we moved back to the old location. This implementation choice severely slowed down ", "+     * rendering when scrolling because parts are rendered in order. Thus, if old location is 0, but now we've", "+     * scrolled to display 100000-100100, if we keep jumping back to 0 after getting every bit of highlight, it ", "+     * slows stuff down incredibly. */"]}], "num": 24325}
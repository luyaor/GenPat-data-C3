{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c75171bc4929e0505c77a5594edac938", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6368a27c9ea9af355578c1a4ce9345fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentFileManager.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void removeIfInList(File file)", "signatureAfterChange": "   public void removeIfInList(File file)", "diff": ["-    ", "-    public void removeIfInList(File file) {", "-      int index = _recentFiles.indexOf(file);", "-      ", "-      if (index >= 0) {", "-        _recentFiles.removeElementAt(index);", "-        JMenuItem delItem = _recentMenuItems.elementAt(index);", "-        _fileMenu.remove(delItem);", "-        _recentMenuItems.removeElementAt(index);", "-      }", "-    }", "+   */", "+  public void removeIfInList(File file) {", "+    // Use canonical path if possible", "+    File canonical = null;", "+    try {", "+      canonical = file.getCanonicalFile();", "+    }", "+    catch (IOException ioe) {", "+      // Oh well, compare against the file as is", "+    }", "+    ", "+    for (int i = 0; i < _recentFiles.size(); i++) {", "+      File currFile = _recentFiles.elementAt(i);", "+      boolean match = false;", "+      if (canonical != null) {", "+        try {", "+          match = currFile.getCanonicalFile().equals(canonical);", "+        }", "+        catch (IOException ioe) {", "+          // Oh well, compare the files themselves", "+          match = currFile.equals(file);", "+        }", "+      }", "+      else {", "+        // (couldn't find canonical for file; compare as is)", "+        match = currFile.equals(file);", "+      }", "+      ", "+      if (match) {", "+        _recentFiles.removeElementAt(i);", "+        JMenuItem menuItem = _recentMenuItems.elementAt(i);", "+        _fileMenu.remove(menuItem);", "+        _recentMenuItems.removeElementAt(i);", "+        break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a64153f329f2f75f023df90a604d71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "71879d695be61a14cdd93b2ece27fb14682043fb", "commitAfterChange": "e70766c672e058ab37ae5757bf5008b997a8ff63", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Node visit(ObjectMethodCall node)", "signatureAfterChange": "   public Node visit(ObjectMethodCall node)", "diff": ["+    if(o == null) {", "+      try {", "+        //Get fully qualified name for Object o if the methodCall is to a staticly imported method", "+        //The full class name is given as if the user gave a call using the entire fully qualified name", "+        Class[] params = new Class[args!=null? args.size() : 0];", "+        if(args != null) {", "+          for(int i = 0; i < args.size(); i++) {", "+            String toParse = args.get(i).toString();", "+            params[i]=(args.get(i).acceptVisitor(AbstractTypeChecker.makeTypeChecker(typeCheckerContext)));", "+          }", "+        }   ", "+        List<IdentifierToken> ids = context.getQualifiedName(node.getMethodName(),params);", "+        o = new ReferenceType(ids);", "+      }      ", "+      catch(Exception e){", "+        //If the class type of one of the parameters can't be found, throws an exception", "+        //Also, if no method found to have been imported, throws an exception", "+        //This will occur every time the user calls a method that has not been staticly imported", "+        //As this section is new code, this is being caught to prevent breaking old code", "+      }     ", "+    }"]}], "num": 28124}
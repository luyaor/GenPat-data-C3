{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c9a83f7b09dd5c5d89114c25ff86f37", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "536c7d35d58774a22910604d6a9c98be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassMemberChecker.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Override public Void visit(ConstructorDeclaration node)", "signatureAfterChange": "          @Override public Void visit(ConstructorDeclaration node)", "diff": ["+    ", "+    @Override public Void visit(ConstructorDeclaration node) {", "+      DJClass thisClass = _context.getThis();", "+      DJConstructor k = getConstructor(node);", "+      if (thisClass.isAnonymous() || !thisClass.declaredName().equals(node.getName())) {", "+        setErrorStrings(node, SymbolUtil.shortName(thisClass));", "+        throw new ExecutionError(\"constructor.name\");", "+      }", "+      ", "+      TypeParameter[] tparams;", "+      if (node instanceof PolymorphicConstructorDeclaration) {", "+        tparams = ((PolymorphicConstructorDeclaration) node).getTypeParameters();", "+      }", "+      else { tparams = new TypeParameter[0]; }", "+      for (TypeParameter tparam : tparams) {", "+        setTypeVariable(tparam, new VariableType(new BoundedSymbol(tparam, tparam.getRepresentation())));", "+      }", "+      ", "+      TypeContext sigContext = new FunctionSignatureContext(_context, k);", "+      ExpressionChecker sigChecker = new ExpressionChecker(sigContext, _opt);", "+      sigChecker.setTypeParameterBounds(tparams);", "+      ", "+      for (FormalParameter param : node.getParameters()) {", "+        Type t = param.getType().acceptVisitor(sigChecker);", "+        setVariable(param, new LocalVariable(param.getName(), t, param.isFinal()));", "+      }", "+      ", "+      for (TypeName tn : node.getExceptions()) { tn.acceptVisitor(sigChecker); }", "+      return null;", "+    }", "-  ", "-  @Override public Void visit(ConstructorDeclaration node) {", "-    DJClass thisClass = _context.getThis();", "-    DJConstructor k = getConstructor(node);", "-    if (thisClass.isAnonymous() || !thisClass.declaredName().equals(node.getName())) {", "-      setErrorStrings(node, SymbolUtil.shortName(thisClass));", "-      throw new ExecutionError(\"constructor.name\");", "-    TypeParameter[] tparams;", "-    if (node instanceof PolymorphicConstructorDeclaration) {", "-      tparams = ((PolymorphicConstructorDeclaration) node).getTypeParameters();", "-    }", "-    else { tparams = new TypeParameter[0]; }", "-    for (TypeParameter tparam : tparams) {", "-      setTypeVariable(tparam, new VariableType(new BoundedSymbol(tparam, tparam.getRepresentation())));", "-    TypeContext sigContext = new FunctionSignatureContext(_context, k);", "-    ExpressionChecker sigChecker = new ExpressionChecker(sigContext, _opt);", "-    sigChecker.setTypeParameterBounds(tparams);", "-    for (FormalParameter param : node.getParameters()) {", "-      Type t = param.getType().acceptVisitor(sigChecker);", "-      setVariable(param, new LocalVariable(param.getName(), t, param.isFinal()));", "-    for (TypeName tn : node.getExceptions()) { tn.acceptVisitor(sigChecker); }", "-    TypeContext bodyContext = new FunctionContext(sigContext, k);", "-    ConstructorCall call = node.getConstructorCall();", "-    if (call != null) {", "-      throw new IllegalArgumentException(\"Not yet implemented\");", "-      // TODO", "-    for (Node n : node.getStatements()) {", "-      bodyContext = n.acceptVisitor(new StatementChecker(bodyContext, _opt));", "-    return null;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75d437e7954918d3a0720492e835b4b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassMemberChecker.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Override public Void visit(MethodDeclaration node)", "signatureAfterChange": "          @Override public Void visit(MethodDeclaration node)", "diff": ["+    ", "+    @Override public Void visit(MethodDeclaration node) {", "+      DJMethod m = getMethod(node);", "+      ", "+      TypeParameter[] tparams;", "+      if (node instanceof PolymorphicMethodDeclaration) {", "+        tparams = ((PolymorphicMethodDeclaration) node).getTypeParameters();", "+      }", "+      else { tparams = new TypeParameter[0]; }", "+      for (TypeParameter tparam : tparams) {", "+        setTypeVariable(tparam, new VariableType(new BoundedSymbol(tparam, tparam.getRepresentation())));", "+      }", "+      ", "+      TypeContext sigContext = new FunctionSignatureContext(_context, m);", "+      ExpressionChecker sigChecker = new ExpressionChecker(sigContext, _opt);", "+      sigChecker.setTypeParameterBounds(tparams);", "+      ", "+      Type returnT = node.getReturnType().acceptVisitor(sigChecker);", "+      setErasedType(node, _opt.typeSystem().erasedClass(returnT));", "+      ", "+      for (FormalParameter param : node.getParameters()) {", "+        Type t = param.getType().acceptVisitor(sigChecker);", "+        setVariable(param, new LocalVariable(param.getName(), t, param.isFinal()));", "+      }", "+      ", "+      for (TypeName tn : node.getExceptions()) { tn.acceptVisitor(sigChecker); }", "+      return null;", "+    }", "-  ", "-  @Override public Void visit(MethodDeclaration node) {", "-    DJMethod m = getMethod(node);", "-    ", "-    TypeParameter[] tparams;", "-    if (node instanceof PolymorphicMethodDeclaration) {", "-      tparams = ((PolymorphicMethodDeclaration) node).getTypeParameters();", "-    }", "-    else { tparams = new TypeParameter[0]; }", "-    for (TypeParameter tparam : tparams) {", "-      setTypeVariable(tparam, new VariableType(new BoundedSymbol(tparam, tparam.getRepresentation())));", "-    TypeContext sigContext = new FunctionSignatureContext(_context, m);", "-    ExpressionChecker sigChecker = new ExpressionChecker(sigContext, _opt);", "-    sigChecker.setTypeParameterBounds(tparams);", "-    ", "-    Type returnT = node.getReturnType().acceptVisitor(sigChecker);", "-    setErasedType(node, _opt.typeSystem().erasedClass(returnT));", "-    for (FormalParameter param : node.getParameters()) {", "-      Type t = param.getType().acceptVisitor(sigChecker);", "-      setVariable(param, new LocalVariable(param.getName(), t, param.isFinal()));", "-    }", "-    for (TypeName tn : node.getExceptions()) { tn.acceptVisitor(sigChecker); }", "-    ", "-    TypeContext bodyContext = new FunctionContext(sigContext, m);", "-    node.getBody().acceptVisitor(new StatementChecker(bodyContext, _opt));", "-    return null;", "-  }"]}], "num": 631}
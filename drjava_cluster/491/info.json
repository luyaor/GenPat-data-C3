{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fa0ff8e3a15fad035a2e4d8f911b6e5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "158a079f52521636285ea12757dea57f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "commitAfterChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "methodNumberBeforeChange": 709, "methodNumberAfterChange": 709, "signatureBeforeChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile)", "signatureAfterChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile, List<OpenDefinitionsDocument> outOfSync)", "diff": ["-    public void compileBeforeJUnit(final CompilerListener testAfterCompile) {", "+    public void compileBeforeJUnit(final CompilerListener testAfterCompile, List<OpenDefinitionsDocument> outOfSync) {", "-      else { // pop up a window to ask if all open files should be compiled before testing", "-        String title = \"Must Compile All Source Files to Run Unit Tests\";", "-        String msg = \"Before you can run unit tests, you must first compile all out of sync source files.\\n\" + ", "-          \"Would you like to compile all files and run the specified test(s)?\";", "-        int rc = JOptionPane.showConfirmDialog(MainFrame.this, msg, title, JOptionPane.YES_NO_OPTION); ", "-        ", "-        switch (rc) {", "-          case JOptionPane.YES_OPTION:  // compile all open source files and test", "+      else { // pop up a window to ask if all open files should be compiled before testing        ", "+        final JButton yesButton = new JButton(new AbstractAction(\"Yes\") {", "+          public void actionPerformed(ActionEvent e) {", "+            // compile all open source files and test", "-            break;", "-          case JOptionPane.CLOSED_OPTION:", "-          case JOptionPane.NO_OPTION:  // abort unit testing", "-//            _model.getJUnitModel().nonTestCase(true);  // cleans up", "+          }", "+        });", "+        final JButton noButton = new JButton(new AbstractAction(\"No\") {", "+          public void actionPerformed(ActionEvent e) {", "+            // abort unit testing", "+            // _model.getJUnitModel().nonTestCase(true);  // cleans up", "-            break;", "-          default:", "-            throw new UnexpectedException(\"Invalid returnCode from showConfirmDialog: \" + rc);", "-        }", "+          }", "+        });", "+        ScrollableListDialog<OpenDefinitionsDocument> dialog = new ScrollableListDialog.Builder<OpenDefinitionsDocument>()", "+          .setOwner(MainFrame.this)", "+          .setTitle(\"Must Compile All Source Files to Run Unit Tests\")", "+          .setText(\"Before you can run unit tests, you must first compile all out of sync source files.\\n\"+", "+                   \"The files below are out of sync. Would you like to compile all files and\\n\"+", "+                   \"run the specified test(s)?\")", "+          .setItems(outOfSync)", "+          .setMessageType(JOptionPane.QUESTION_MESSAGE)", "+          .setFitToScreen(true)", "+          .clearButtons()", "+          .addButton(yesButton)", "+          .addButton(noButton)", "+          .build();", "+        ", "+        dialog.showDialog();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2e2f9f339662209935d10470caa19e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "3f81b37285813b52f5c285ae3a68ee4a21753a7e", "commitAfterChange": "844a54657c2f878fc1ea01131f59375a436ab7c8", "methodNumberBeforeChange": 243, "methodNumberAfterChange": 247, "signatureBeforeChange": "      public void saveAllBeforeProceeding(GlobalModelListener.SaveReason reason)", "signatureAfterChange": "      private void _saveAllBeforeProceeding(String message)", "diff": ["-    public void saveAllBeforeProceeding(GlobalModelListener.SaveReason reason) {", "-      String message;", "-      if (reason == COMPILE_REASON) {", "-        message =", "-          \"To compile, you must first save ALL modified files.\\n\" +", "-          \"Would you like to save and then compile?\";", "-      }", "-      else if (reason == JUNIT_REASON) {", "-        message =", "-          \"To run JUnit, you must first save and compile ALL modified\\n\" +", "-          \"files. Would you like to save and then compile?\";", "-      }", "-      else if (reason == JAVADOC_REASON) {", "-        message =", "-          \"To run JavaDoc, you must first save ALL modified files.\\n\" +", "-          \"Would you like to save and then run JavaDoc?\"; ", "-      }", "-      else if (reason == DEBUG_REASON) {", "-        message =", "-          \"To use debugging commands, you must first save and compile\\n\" +", "-          \"ALL modified files. Would you like to save and then compile?\";", "-      }", "-      else {", "-        throw new RuntimeException(\"Invalid reason for forcing a save.\");", "-      }", "-      int rc = JOptionPane.showConfirmDialog(MainFrame.this, message,", "-                                             \"Must save all files to continue\",", "-                                             JOptionPane.YES_NO_OPTION);", "-      switch (rc) {", "-        case JOptionPane.YES_OPTION:", "-          _saveAll();", "-          break;", "-        case JOptionPane.NO_OPTION:", "-        case JOptionPane.CANCEL_OPTION:", "-        case JOptionPane.CLOSED_OPTION:", "-          // do nothing", "-          break;", "-        default:", "-          throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+    private void _saveAllBeforeProceeding(String message) {", "+      if (_model.hasModifiedDocuments()) {", "+        int rc = JOptionPane.showConfirmDialog(MainFrame.this, message,", "+                                               \"Must save all files to continue\",", "+                                               JOptionPane.YES_NO_OPTION);", "+        switch (rc) {", "+          case JOptionPane.YES_OPTION:", "+            _saveAll();", "+            break;", "+          case JOptionPane.NO_OPTION:", "+          case JOptionPane.CANCEL_OPTION:", "+          case JOptionPane.CLOSED_OPTION:", "+            // do nothing", "+            break;", "+          default:", "+            throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+        }"]}], "num": 491}
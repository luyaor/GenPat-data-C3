{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2abe720c02cc1f291c0b212cd8ff88af", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "000d071cf95c27788ec392c27383d43c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "414911409ffccc198572e4d568622c4bb424b34e", "commitAfterChange": "a3c9edb6e3c7917ddbf94a68d784b63736e6c7b7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "   private void _updateBasedOnCurrentStateHelper     (ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private void _updateBasedOnCurrentStateHelper(TokenList.Iterator copyCursor)", "diff": ["-  private void _updateBasedOnCurrentStateHelper", "-    (ModelList<ReducedToken>.Iterator copyCursor)", "-  {", "+  private void _updateBasedOnCurrentStateHelper(TokenList.Iterator copyCursor) {", "-    ReducedModelState curState = _getStateAtCurrentHelper(copyCursor);", "+    ReducedModelState curState = copyCursor.getStateAtCurrent();", "-      if (curState == FREE) {", "-        curState = _updateFree(copyCursor);", "-      }", "-      else if (curState == INSIDE_SINGLE_QUOTE) {", "-        curState = _updateInsideSingleQuote(copyCursor);", "-      }", "-      else if (curState == INSIDE_DOUBLE_QUOTE) {", "-        curState = _updateInsideDoubleQuote(copyCursor);", "-      }", "-      else if (curState == INSIDE_BLOCK_COMMENT) {", "-        curState = _updateInsideBlockComment(copyCursor);", "-      }", "-      else if (curState == INSIDE_LINE_COMMENT) {", "-        curState = _updateInsideLineComment(copyCursor);", "-      }", "-      else { // curState == STUTTER", "-        if (copyCursor.atStart()) {", "-          copyCursor.next();", "-        }", "-        if (copyCursor.atEnd()) {", "-          return;", "-        }", "-        curState = _getStateAtCurrentHelper(copyCursor);", "-      }", "+      curState = curState.update(copyCursor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "284c35e6423f0dde705636554731963c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "414911409ffccc198572e4d568622c4bb424b34e", "commitAfterChange": "a3c9edb6e3c7917ddbf94a68d784b63736e6c7b7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "   private void _updateBasedOnCurrentStateHelper     (ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private void _updateBasedOnCurrentStateHelper(TokenList.Iterator copyCursor)", "diff": ["-  private void _updateBasedOnCurrentStateHelper", "-    (ModelList<ReducedToken>.Iterator copyCursor)", "-  {", "+  private void _updateBasedOnCurrentStateHelper(TokenList.Iterator copyCursor) {", "-    ReducedModelState curState = _getStateAtCurrentHelper(copyCursor);", "+    ReducedModelState curState = copyCursor.getStateAtCurrent();", "-      if (curState == FREE) {", "-        curState = _updateFree(copyCursor);", "-      }", "-      else if (curState == INSIDE_SINGLE_QUOTE) {", "-        curState = _updateInsideSingleQuote(copyCursor);", "-      }", "-      else if (curState == INSIDE_DOUBLE_QUOTE) {", "-        curState = _updateInsideDoubleQuote(copyCursor);", "-      }", "-      else if (curState == INSIDE_BLOCK_COMMENT) {", "-        curState = _updateInsideBlockComment(copyCursor);", "-      }", "-      else if (curState == INSIDE_LINE_COMMENT) {", "-        curState = _updateInsideLineComment(copyCursor);", "-      }", "-      else { // curState == STUTTER", "-        if (copyCursor.atStart()) {", "-          copyCursor.next();", "-        }", "-        if (copyCursor.atEnd()) {", "-          return;", "-        }", "-        curState = _getStateAtCurrentHelper(copyCursor);", "-      }", "+      curState = curState.update(copyCursor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82796c3c5afa5fb411540086e65b7660", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public static boolean promptForToolsJar(boolean needCompiler,                                           boolean needDebugger)", "signatureAfterChange": "   public static void promptForToolsJar(boolean needCompiler, boolean needDebugger)", "diff": ["+   */", "+  public static void promptForToolsJar(boolean needCompiler, boolean needDebugger) {", "+    final String[] text  = new String[] {", "+      \"DrJava cannot find a 'tools.jar' file for the version of Java \",", "+        \"that is being used to run DrJava.  Would you like to specify the \",", "+        \"location of the requisite 'tools.jar' file?   If you say 'No', \",", "+        \"DrJava might be unable to compile or debug Java programs.)\"", "+    };", "+    ", "+    int result = JOptionPane.showConfirmDialog(null, text, \"Locate 'tools.jar'?\", JOptionPane.YES_NO_OPTION);", "+", "+    if (result == JOptionPane.YES_OPTION) {", "+      JFileChooser chooser = new JFileChooser();", "+      chooser.setFileFilter(new ClassPathFilter() {", "+        public boolean accept(File f) {", "+          if (f.isDirectory()) return true;", "+          String ext = getExtension(f);", "+          return ext != null && ext.equals(\"jar\");", "+        }", "+        public String getDescription() { return \"Jar Files\"; }", "+      });", "+", "+      // Loop until we find a good tools.jar or the user gives up", "+      do {", "+        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {", "+          File jar = chooser.getSelectedFile();", "+", "+          if (jar != null) {", "+            // set the tools.jar property", "+            getConfig().setSetting(JAVAC_LOCATION, jar);", "+", "+            // Adjust if we needed a compiler", "+            if (needCompiler && classLoadersCanFind(TEST_COMPILER_CLASS)) needCompiler = false;", "+", "+            // Adjust if we need a debugger", "+            if (needDebugger && classLoadersCanFind(TEST_DEBUGGER_CLASS)) needDebugger = false;", "+          }", "+        }", "+//        Utilities.showDebug(\"need Compiler = \" + needCompiler + \"; needDebugger = \" + needDebugger);", "+      }", "+      while ((needCompiler || needDebugger) && _userWantsToPickAgain());", "+      ", "+      // Save config with good tools.jar if available", "+      if ((! needCompiler) && (! needDebugger)) _saveConfig();", "+    }", "+  }", "-   */", "-  public static boolean promptForToolsJar(boolean needCompiler,", "-                                          boolean needDebugger) {", "-    boolean restartRequired = false;", "-    final String[] text;", "-    if (needDebugger && !needCompiler) {", "-      text = new String[]{", "-        \"DrJava cannot get the necessary information from the\",", "-        \"current Java SDK's 'tools.jar' file to start the\",", "-        \"debugger. Would you like to specify the 'tools.jar'\",", "-        \"file for the version of java you are using to run\",", "-        \"DrJava at this time?\",", "-        \"(If you say 'No', DrJava might be unable to debug\",", "-        \"programs and the debug menu will not appear.)\"", "-      };", "-    }", "-    else {", "-      text = new String[]{", "-        \"DrJava cannot find the Java SDK's 'tools.jar' file. \",", "-        \"This file is necessary to compile files and use the \",", "-        \"debugger.  It is generally located in the 'lib' \",", "-        \"subdirectory of your Java installation directory. \",", "-        \"Would you like to specify its location? \",", "-        \"(If you say 'No', DrJava might be unable to compile \",", "-        \"or debug programs.)\"", "-      };", "-    }", "-", "-    int result = JOptionPane.showConfirmDialog(null, text, \"Locate 'tools.jar'?\",", "-                                               JOptionPane.YES_NO_OPTION);", "-", "-    if (result == JOptionPane.YES_OPTION) {", "-      JFileChooser chooser = new JFileChooser();", "-      chooser.setFileFilter(new ClassPathFilter() {", "-        public boolean accept(File f) {", "-          if (f.isDirectory()) {", "-            return true;", "-          }", "-          String ext = getExtension(f);", "-          return ext != null && ext.equals(\"jar\");", "-        }", "-        public String getDescription() {", "-          return \"Jar Files\";", "-        }", "-      });", "-", "-      // Loop until we find a good tools.jar or the user gives up", "-      do {", "-        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {", "-          File jar = chooser.getSelectedFile();", "-", "-          if (jar != null) {", "-            // set the tools.jar property", "-            getConfig().setSetting(JAVAC_LOCATION, jar);", "-", "-            // Adjust if we needed a compiler", "-            if (needCompiler) {", "-              // need to re-call getAvailable for it to re-check availability", "-              CompilerInterface[] compilers = CompilerRegistry.ONLY.getAvailableCompilers();", "-", "-              if (compilers[0] != NoCompilerAvailable.ONLY) {", "-                needCompiler = false;", "-                CompilerRegistry.ONLY.setActiveCompiler(compilers[0]);", "-                _saveConfig();", "-              }", "-            }", "-", "-            // Adjust if we need a debugger", "-            if (needDebugger) {", "-              if (classLoadersCanFindDebugger()) {", "-                needDebugger = false;", "-                restartRequired = true;", "-                _saveConfig();", "-              }", "-            }", "-          }", "-        }", "-      }", "-      while ((needCompiler || needDebugger) && ", "-             _userWantsToPickAgain(needDebugger && !needCompiler));", "-    }", "-", "-    return restartRequired;", "-  }"]}], "num": 17715}
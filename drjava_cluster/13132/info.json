{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77a077f6f694b38b3782b1625765e152", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b65d931be56dc779a8c54ff10b79289", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaSurveyPopup.java", "commitBeforeChange": "51e8f4cbce06d140e9a09dd38237b848b4f27d8a", "commitAfterChange": "d350dd729092f66f8ad737ae377c54d2ad394fbf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    protected void noAction()", "signatureAfterChange": "    protected void noAction()", "diff": ["+    // set the date we asked even if the user pressed no", "+    // so the user won't be bothered the next time he starts DrJava", "+    // next popup will occur in DRJAVA_SURVEY_DAYS (91) days.", "+    DrJava.getConfig().setSetting(OptionConstants.LAST_DRJAVA_SURVEY, new Date().getTime());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cdf40d55d021b4c9da10002e3f86166", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f743eab51273b837fbfd0fee9aa664f2f031c583", "commitAfterChange": "0ad47f4e9ecbbfc43121de14376bb3d222538453", "methodNumberBeforeChange": 278, "methodNumberAfterChange": 278, "signatureBeforeChange": "     private void _fileClosed(OpenDefinitionsDocument doc)", "signatureAfterChange": "     private void _fileClosed(OpenDefinitionsDocument doc)", "diff": ["+      ((DefinitionsPane)_defScrollPanes.get(doc).getViewport().getView()).close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf1bdf0b7c994cbd7254390ae5a06d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 47, "signatureBeforeChange": "   private void _attachToVM() throws DebugException", "signatureAfterChange": "   private void _attachToVM() throws DebugException", "diff": ["-  /** Handles the details of attaching to the interpreterJVM. Assume lock is already held. */", "-  private void _attachToVM() throws DebugException {", "-    // Blocks until the interpreter has registered if hasn't already.  Blocks all synchronized methods in this class.", "-    _model.waitForInterpreter();", "-", "-    // Get the connector", "-    AttachingConnector connector = _getAttachingConnector();", "-", "-    // Try to connect on our debug port", "-    Map<String, Connector.Argument> args = connector.defaultArguments();", "-    Connector.Argument port = args.get(\"port\");", "-    Connector.Argument host = args.get(\"hostname\");", "-    try {", "-      int debugPort = _model.getDebugPort();", "-      port.setValue(\"\" + debugPort);", "-      host.setValue(\"127.0.0.1\"); // necessary if hostname can't be resolved", "-      _vm = connector.attach(args);", "-      _eventManager = _vm.eventRequestManager();", "-    }", "-    catch(Exception e) { throw new DebugException(\"Could not connect to VM: \" + e); }", "-", "-    _interpreterJVM = _getInterpreterJVMRef();", "-  }", "+  /** Handles the details of attaching to the interpreterJVM. Assume lock is already held. */", "+  private void _attachToVM() throws DebugException {", "+    // Blocks until the interpreter has registered if hasn't already.  Blocks all synchronized methods in this class.", "+    _model.waitForInterpreter();", "+", "+    // Get the connector", "+    AttachingConnector connector = _getAttachingConnector();", "+", "+    // Try to connect on our debug port", "+    Map<String, Connector.Argument> args = connector.defaultArguments();", "+    Connector.Argument port = args.get(\"port\");", "+    Connector.Argument host = args.get(\"hostname\");", "+    try {", "+      int debugPort = _model.getDebugPort();", "+      port.setValue(\"\" + debugPort);", "+      host.setValue(\"127.0.0.1\"); // necessary if hostname can't be resolved", "+      _vm = connector.attach(args);", "+      _eventManager = _vm.eventRequestManager();", "+    }", "+    catch(Exception e) { throw new DebugException(\"Could not connect to VM: \" + e); }", "+", "+    _interpreterJVM = (ObjectReference) _getStaticField(_getClass(InterpreterJVM.class.getName()), \"ONLY\");", "+  }"]}], "num": 13132}
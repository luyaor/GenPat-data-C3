{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e49e34872bae623ea9accb0ca3a33d31", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c64c023bf72fe32a3fd3b6e9a53eac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7bb32c28070a4b5d5697c7c88ea0d664289c76e8", "commitAfterChange": "b2ad80c49aaa09f293a5bc1f6664d4cc5243219e", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 59, "signatureBeforeChange": "      public void fileClosed(OpenDefinitionsDocument doc)", "signatureAfterChange": "      public void fileClosed(OpenDefinitionsDocument doc)", "diff": ["-      int index = _definitionsDocs.indexOf(doc);", "-      _definitionsDocs.remove(index);", "-      _defScrollPanes.remove(index);", "+      _defScrollPanes.remove(doc);", "+      //_setDocListDividerLocation();", "+    }", "-      // Get next document", "-      int len = _definitionsDocs.size();", "-      if (len > 0) {", "-        if (_currentDocIndex >= len) {", "-          _currentDocIndex = len - 1;", "-        }", "-        _docList.setSelectedValue(_definitionsDocs.get(_currentDocIndex),", "-                                  true);", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "901e30f2fccd6a33da28da35f6280565", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "92062677ca813cb9ab44428a0d2d54f0c3309b04", "commitAfterChange": "274f7defc49003e66c942e814c9ce22958b3814c", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": "          public void caretUpdate(final CaretEvent ce )", "signatureAfterChange": "     public void caretUpdate(final CaretEvent ce)", "diff": ["-    public void caretUpdate(final CaretEvent ce ) {", "-      final OpenDefinitionsDocument doc = _model.getActiveDocument();", "-      // The following block of code does not appear to require running in the event thread", "-//      Utilities.invokeLater(new Runnable() { ", "-//        public void run() { ", "-          doc.acquireReadLock();", "-          try {", "-            doc.setCurrentLocation(ce.getDot());  ", "-            int line = doc.getCurrentLine();", "-            int col = doc.getCurrentCol();", "-            updateLocation(line, col);", "-          }", "-          finally { doc.releaseReadLock(); }", "-//        } ", "-//      });", "-    }", "+    // The following method does not need to run in the event thread", "+    public void caretUpdate(final CaretEvent ce) { updateLocation(); }"]}], "num": 6665}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc9a318e3d67bd1920aaac487bf4e3b8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "237a12474cc95cf38d9df21aa8d4a676", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "d7ad233986e68ea13b262a57ebd130ce2e9ceed5", "commitAfterChange": "d581c32ea49adc707a4c5dd3f5443e6e5e93cd47", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   void scrollToSource(LocatableEvent e)", "signatureAfterChange": "   void scrollToSource(LocatableEvent e)", "diff": ["-    ReferenceType rt = location.declaringType();", "-    String className = rt.name();", "-    String ps = System.getProperty(\"file.separator\");", "-    // replace periods with the System's file separator", "-    className = StringOps.replace(className, \".\", ps);", "+    OpenDefinitionsDocument doc = null;", "-    // crop off the $ if there is one and anything after it", "-    int indexOfDollar = className.indexOf('$');    ", "-    if (indexOfDollar > -1) {", "-      className = className.substring(0, indexOfDollar);", "+    // First see if doc is stored", "+    EventRequest request = e.request();", "+    Object docProp = request.getProperty(\"document\");", "+    if ((docProp != null) && (docProp instanceof OpenDefinitionsDocument)) {", "+      doc = (OpenDefinitionsDocument) docProp;", "-    ", "-    File[] roots = _model.getSourceRootSet();", "-    File f = null;", "-    boolean found = false;", "-    for (int i = 0; i < roots.length; i++) {", "-      String currRoot = roots[i].getAbsolutePath();", "-      DrJava.consoleOut().println(\"Trying to find \" + currRoot + ps + className + ", "-                                  \".java\");", "-      f = new File(currRoot + ps + className + \".java\");", "-      if (f.exists()) {", "-        found = true;", "-        break;", "+    else {", "+      // No stored doc, look on the source root set (later, also the sourcepath)", "+      ReferenceType rt = location.declaringType();", "+      String className = rt.name();", "+      String ps = System.getProperty(\"file.separator\");", "+      // replace periods with the System's file separator", "+      className = StringOps.replace(className, \".\", ps);", "+      ", "+      // crop off the $ if there is one and anything after it", "+      int indexOfDollar = className.indexOf('$');    ", "+      if (indexOfDollar > -1) {", "+        className = className.substring(0, indexOfDollar);", "+      }", "+      ", "+      File[] roots = _model.getSourceRootSet();", "+      File f = null;", "+      boolean foundFile = false;", "+      for (int i = 0; i < roots.length; i++) {", "+        String currRoot = roots[i].getAbsolutePath();", "+        DrJava.consoleOut().println(\"Trying to find \" + currRoot + ps + className + ", "+                                    \".java\");", "+        f = new File(currRoot + ps + className + \".java\");", "+        if (f.exists()) {", "+          foundFile = true;", "+          break;", "+        }", "+      }", "+      if (foundFile) {", "+        // Get a document for this file, forcing it to open", "+        DrJava.consoleOut().println(\"found file: \" + f.getAbsolutePath());", "+        try {", "+          doc = _model.getDocumentForFile(f);", "+        }", "+        catch (IOException ioe) {", "+          // No doc, so don't notify listener", "+          DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + ioe);", "+        }", "+        catch (OperationCanceledException oce) {", "+          // No doc, so don't notify listener", "+          DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + oce);", "+        }", "-    if (found) {", "-      DrJava.consoleOut().println(\"found file: \" + f.getAbsolutePath() + ", "-                                  \", will scroll to line: \" + location.lineNumber());", "-      _listener.scrollToLineInSource(f, ", "+    ", "+    // Open and scroll if doc was found", "+    if (doc != null) {", "+      DrJava.consoleOut().println(\"Will scroll to line: \" + location.lineNumber());", "+      _listener.scrollToLineInSource(doc, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "358d77db144e5ecc7625af588be135ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModel.java", "commitBeforeChange": "7b3e2baaa631329b7e3233840fa805eba66e7b61", "commitAfterChange": "c2f69793a9db2959df5a982198b4877236b2e5a0", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprivate void _breakComment(ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": " \tprivate void _breakComment(ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["+\t\t\telse if (copyCursor.current().isDoubleEscape())", "+\t\t\t\t{", "+\t\t\t\t\tcopyCursor.current().setType(\"\\\\\");", "+\t\t\t\t\tcopyCursor.current().setState(getStateAtCurrent());", "+\t\t\t\t\tcopyCursor.insert(Brace.MakeBrace(\"\\\\\", getStateAtCurrent()));", "+\t\t\t\t\tcopyCursor.next();", "+\t\t\t\t\t_updateBasedOnCurrentState();", "+\t\t\t\t\t//_offset = 0;", "+\t\t\t\t}", "+\t\t\telse if (copyCursor.current().isEscapedQuote())", "+\t\t\t\t{", "+\t\t\t\t\tcopyCursor.current().setType(\"\\\"\");", "+\t\t\t\t\tcopyCursor.current().setState(getStateAtCurrent());", "+\t\t\t\t\tcopyCursor.insert(Brace.MakeBrace(\"\\\\\", getStateAtCurrent()));", "+\t\t\t\t\tcopyCursor.next();", "+\t\t\t\t\t_updateBasedOnCurrentState();", "+\t\t\t\t\t//_offset = 0;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ecbd0cb52aa1282972f6fb2085f361", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandler.java", "commitBeforeChange": "f1f97edd57f558d6d34abcd1fe039afc22f7a202", "commitAfterChange": "fc098bf0e8c385557d32ed3c183745582612add6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void _handleClassPrepareEvent(ClassPrepareEvent e)", "signatureAfterChange": "      private void _handleClassPrepareEvent(ClassPrepareEvent e)", "diff": ["-    System.out.println(\"ClassPrepareEvent occured\");", "+    DrJava.consoleOut().println(\"ClassPrepareEvent occured\");", "+    DrJava.consoleOut().println(\"In \" + e.referenceType().name());", "+    try {", "+      DrJava.consoleOut().println(\"sourcename \" + e.referenceType().sourceName());", "+    }", "+    catch(AbsentInformationException aie) {", "+      DrJava.consoleOut().println(\"no info\");", "+    }", "+    try {", "+      _debugManager.getPendingRequestManager().classPrepared(e);", "+    }", "+    catch(DebugException de) {", "+      System.err.println(\"Error preparing action: \" + de);", "+    }", "+    // resumes this thread which was suspended because its ", "+    // suspend policy was SUSPEND_EVENT_THREAD", "+    e.thread().resume();", "+    DrJava.consoleOut().println(\"resumed thread\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ae10b326bfb746a3617a9b059ee303d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModel.java", "commitBeforeChange": "7b3e2baaa631329b7e3233840fa805eba66e7b61", "commitAfterChange": "c2f69793a9db2959df5a982198b4877236b2e5a0", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tprivate int _calculateOffset(int delToSizePrev, String delToTypePrev, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t int delToSizeCurr, String delToTypeCurr, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "signatureAfterChange": " \tprivate int _calculateOffset(int delToSizePrev, String delToTypePrev, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t int delToSizeCurr, String delToTypeCurr, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "diff": ["-\t\t\t\t\t\t\t", "+\t\t\telse if (delToTypePrev.equals(\"\\\\\")){", "+\t\t\t\tif(delToTypeCurr.equals(\"\\\\\\\\\") && ", "+\t\t\t\t\t _checkPrevEquals(delTo,\"\\\\\")){ //because pointer will be at *", "+\t\t\t\t\tdelTo.prev();", "+\t\t\t\t\treturn 1;", "+\t\t\t\t}", "+\t\t\t\telse if (delToTypeCurr.equals(\"\\\\\\\"\") &&", "+\t\t\t\t\t\t\t\t _checkPrevEquals(delTo,\"\\\"\")){", "+\t\t\t\t\tdelTo.prev();", "+\t\t\t\t\treturn 1;", "+\t\t\t\t}", "+\t\t\t\telse if (delToTypeCurr.equals(\"\\\\\") &&", "+\t\t\t\t\t\t\t\t delTo.current().getType().equals(\"\\\\\\\\\"))", "+\t\t\t\t\treturn 1;", "+\t\t\t\telse if (delToTypeCurr.equals(\"\\\"\") &&", "+\t\t\t\t\t\t\t\t delTo.current().getType().equals(\"\\\\\\\"\"))", "+\t\t\t\t\treturn 1;", "+\t\t\t\t", "+\t\t\t\t", "+\t\t\t}", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4f994f6eae0594955d6ea8ae25f0678", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "314c962d7f6ed2c6b00f5edc6e764b582b016016", "commitAfterChange": "3b2b8c4279d3d3c19a0254256362d4d46aeeddaf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp() throws IOException", "signatureAfterChange": "   public void setUp() throws IOException", "diff": ["-    _testFile = File.createTempFile(\"_test\", \"pjt\");", "+    _projFile = File.createTempFile(\"test\", \".pjt\");", "+    _file1 = File.createTempFile(\"test1\",\".java\");", "+    _file2 = File.createTempFile(\"test2\",\".java\");", "-    reader = new BufferedReader(new FileReader(_testFile));", "-    BufferedWriter w = new BufferedWriter(new FileWriter(_testFile));", "-    w.write(TEST_FILE_TEXT);", "+    // generate the relative path names for the files in the project file", "+    String temp = _file1.getParentFile().getCanonicalPath();", "+    _file1RelName = _file1.getCanonicalPath().substring(temp.length()+1); ", "+    temp = _file2.getParentFile().getCanonicalPath();", "+    _file2RelName = _file2.getCanonicalPath().substring(temp.length()+1);", "+    ", "+    _projFileText = ", "+      \";; DrJava project file.  Written with build: 20040623-1933\\n\" +", "+      \"(source ;; comment\\n\" +", "+      \"   (file (name \\\"\"+ _file1RelName +\"\\\")(select 32 32))\\n\" +", "+      \"   (file (name \\\"\"+ _file2RelName +\"\\\")(select 0 0)))\\n\";", "+    ", "+    reader = new BufferedReader(new FileReader(_projFile));", "+    BufferedWriter w = new BufferedWriter(new FileWriter(_projFile));", "+    w.write(_projFileText);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc50e92e755a20f3c141f2e090b52899", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "fa3227bd8ed65d422e78bb16b48f5f807a121783", "commitAfterChange": "b91661a64fee7b8cdd1ac1251ccb6b9269f4f733", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public void setBreakpoint()", "signatureAfterChange": "    public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)      throws IOException, ClassNotFoundException, DebugException", "diff": ["-  public void setBreakpoint() {", "+  public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber) ", "+    throws IOException, ClassNotFoundException, DebugException {", "+    BreakpointManager bpManager = (BreakpointManager)_session.getManager(BreakpointManager.class);", "+    if (doc.isModifiedSinceSave()) {", "+      doc.saveBeforeProceeding(GlobalModelListener.DEBUG_REASON);", "+    }", "+", "+    String className = mapClassName(doc);", "+    if (className == null) {", "+      throw new ClassNotFoundException();", "+    }", "+    ", "+    try {", "+      bpManager.createBreakpoint(className, lineNumber);", "+    }    ", "+    catch(ClassNotFoundException cnfEx) {", "+      //try {", "+      doc.startCompile();", "+      if(_model.getNumErrors() != 0) {", "+        return;", "+      }", "+      //}", "+    }", "+    catch (ResolveException re) {", "+      throw new DebugException();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd9ee042f32e63d47258dd4915899ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "   private File[] _loadProject(ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private File[] _loadProject(ProjectFileIR ir) throws IOException", "diff": ["+    // set breakpoints", "+    try { getDebugger().removeAllBreakpoints(); }", "+    catch(DebugException de) { /* ignore, just don't remove old breakpoints */ }", "+    for (DebugBreakpointData dbd: ir.getBreakpoints()) {", "+      try { getDebugger().toggleBreakpoint(getDocumentForFile(dbd.getFile()), dbd.getOffset(), dbd.getLineNumber(), dbd.isEnabled()); }", "+      catch(DebugException de) { /* ignore, just don't add breakpoint */ }", "+    }", "+    ", "+    // set watches", "+    try { getDebugger().removeAllWatches(); }", "+    catch(DebugException de) { /* ignore, just don't remove old watches */ }", "+    for (DebugWatchData dwd: ir.getWatches()) {", "+      try { getDebugger().addWatch(dwd.getName()); }", "+      catch(DebugException de) { /* ignore, just don't add watch */ }", "+    }", "+    "]}], "num": 9522}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c122d3ebd45a16d4dcbde2464ba1096", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a14055216138bf26d27546232c4be15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/Option.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 3, "signatureBeforeChange": "     T remove(DefaultOptionMap om)", "signatureAfterChange": "      void notifyListeners(Configuration config, T val)", "diff": ["-    /** the destructor for a mapping in the magic-typed hashtable. */", "-    T remove(DefaultOptionMap om) { return map.remove(om); }", "+    void notifyListeners(Configuration config, T val) {", "+\tVector<OptionListener<T>> v = listeners.get(config);", "+\tif(v==null) return; // no listeners", "+\tOptionEvent e = new OptionEvent<T>(this,val);", "+\tint size = v.size();", "+\tfor(int i = 0; i < size; i++) {", "+\t    v.elementAt(i).optionChanged(e);", "+\t}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f7b9d89636fec7a374bd1b8553b2e76", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/SingleDisplayModel.java", "commitBeforeChange": "7bb32c28070a4b5d5697c7c88ea0d664289c76e8", "commitAfterChange": "b2ad80c49aaa09f293a5bc1f6664d4cc5243219e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean closeFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean closeFile(OpenDefinitionsDocument doc)", "diff": ["-    return super.closeFile(doc);", "+    int index = _getDocumentIndex(doc);", "+    if (super.closeFile(doc)) {", "+      if (!_isClosingAllDocs) {", "+        _ensureNotEmpty();", "+", "+        // Select next document", "+        int size = getDefinitionsDocuments().getSize();", "+        if (index < 0) {", "+          index = 0;", "+        }", "+        if (index >= size) {", "+          index = size - 1;", "+        }", "+        setActiveDocument(index);", "+      }", "+      return true;", "+    }", "+    else {", "+      return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fcd9665e26c93867bce0ee4c9cd6e59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5122b57870a06ce192633fae172ea410d4b7581b", "commitAfterChange": "8cb074150c1494bfc3b263a6dfa5f3cba6209da2", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 65, "signatureBeforeChange": "      public void fileClosed(OpenDefinitionsDocument doc)", "signatureAfterChange": "      public void fileClosed(OpenDefinitionsDocument doc)", "diff": ["-      // context switch to new document, or open one", "+      int index = _definitionsDocs.indexOf(doc);", "+      _definitionsDocs.remove(index);", "+      _defScrollPanes.remove(index);", "+", "+      // Get next document", "+      int len = _definitionsDocs.size();", "+      if (len > 0) {", "+        if (_currentDocIndex >= len) {", "+          _currentDocIndex = len - 1;", "+        }", "+        _docList.setSelectedValue(_definitionsDocs.get(_currentDocIndex),", "+                                  true);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e53c00a0b03902741244fcb0a59c00", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsController.java", "commitBeforeChange": "216fad0aa8523dbc9402b5e83d2d0e4e9e0fc64e", "commitAfterChange": "4297ff328013eaae7e900c94d6d5500e0fe9b17c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "   boolean selectToPromptPosAction()", "diff": ["-  AbstractAction selectToPromptPosAction = new AbstractAction() {", "-    public void actionPerformed(ActionEvent e) {", "-      // Selects the text between the old pos and the prompt", "-      StyledText pane = _view.getTextPane();", "-      int start = _doc.getPromptPos();", "-      int end = pane.getCaretOffset();", "-      if (end < start) {", "-        int t = start;", "-        start = end;", "-        end = t;", "-      }", "-      ", "-      pane.setSelection(start, end);", "+  /** Selects all text between the caret and the prompt */", "+  boolean selectToPromptPosAction() {", "+    // Selects the text between the old pos and the prompt", "+    StyledText pane = _view.getTextPane();", "+    int start = _doc.getPromptPos();", "+    int end = pane.getCaretOffset();", "+    if (end < start) {", "+      int t = start;", "+      start = end;", "+      end = t;", "+    ", "+    pane.setSelection(start, end);", "+    return false;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b762c1983eee041dd15085a5d1d89e7b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public int replaceAll()", "signatureAfterChange": "   public int replaceAll()", "diff": ["-    */", "-    public int replaceAll() { return _state.replaceAll(); }", "+   */", "+  public int replaceAll() {", "+    if (_searchAllDocuments) {", "+      AbstractDocumentInterface startDoc = _doc;", "+      _searchAllDocuments = false;", "+      // replace all in the first document", "+      int count = _replaceAllInCurrentDoc();", "+      _doc = _docIterator.getNextDocument(_doc);", "+      int n = _docIterator.getDocumentCount();", "+      for (int i=1; i < n; i++) {", "+        // replace all in the rest of the documents", "+        count += _replaceAllInCurrentDoc();", "+        _doc = _docIterator.getNextDocument(_doc);", "+      }", "+      _searchAllDocuments = true;", "+      return count;", "+    }", "+    else return _replaceAllInCurrentDoc();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed9b4c4d4f7db316cdeb47e84f8cdfcf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerError.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public int compareTo(Object o)", "signatureAfterChange": "   public int compareTo(Object o)", "diff": ["-  /** Compare by line, then by column. */", "+   */", "+", "+    // Determine if I have a file", "+    if (_file != null) {", "+      if (other.file() == null) {", "+        // Errors with files are bigger", "+        return 1;", "+      }", "+      else {", "+        // Compare by file", "+        int fileComp = _file.compareTo(other.file());", "+        if (fileComp != 0) {", "+          return fileComp;", "+        }", "+        else {", "+          // Compare by position", "+          return compareByPosition(other);", "+        }", "+      }", "+    }", "+    else {", "+      // My file is null", "+      if (other.file() == null) {", "+        return 0;", "+      }", "+      else {", "+        // Errors without files are smaller", "+        return -1;", "+      }", "+    }", "+  }", "-    } "]}], "num": 26230}
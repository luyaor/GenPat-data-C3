{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c35f61425690ff09e55763957b60bff3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f30e69aaff2243c6d50c02f0d3fc2de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "          public void testForIncrementExpressionOnly()", "signatureAfterChange": "          public void testForIncrementExpressionOnly()", "diff": ["-      IncrementExpression ie = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "+      IncrementExpression ie = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, ", "+                                              new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forIncrementExpressionOnly(ie, SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forIncrementExpressionOnly(ie, SymbolData.INT_TYPE.getInstanceData()));", "-      //if value_result is null, return null but do not give error", "+      //if valueRes is null, return null but do not give error", "-      //if value_result is PackageData, give error and return null", "+      //if valueRes is PackageData, give error and return null", "-      //if value_result is not an instance type, give an error", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forIncrementExpressionOnly(ie, SymbolData.INT_TYPE));", "+      // if valueRes is not an instance type, give an error", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forIncrementExpressionOnly(ie, SymbolData.INT_TYPE));", "-      assertEquals(\"Error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      //if value result is not a number type, give an error", "-      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), _etc.forIncrementExpressionOnly(ie, _sd2.getInstanceData()));", "+      // if value result is not a number type, give an error", "+      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), ", "+                   _etc.forIncrementExpressionOnly(ie, _sd2.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"You cannot increment or decrement something that is not a number type.  You have specified something of type \" + _sd2.getName(), errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot increment or decrement something that is not a number type.  You have specified \"", "+                     + \"something of type \" + _sd2.getName(), ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f212924f35a27a82c7b99d699edf3ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": "               public void testForNotExpressionOnly()", "signatureAfterChange": "               public void testForNotExpressionOnly()", "diff": ["-      NotExpression ne = new NotExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO));", "+      NotExpression ne = new NotExpression(SourceInfo.NONE, NULL_LITERAL);", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forNotExpressionOnly(ne, SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forNotExpressionOnly(ne, SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forNotExpressionOnly(ne, SymbolData.BOOLEAN_TYPE));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forNotExpressionOnly(ne, SymbolData.BOOLEAN_TYPE));", "-      assertEquals(\"Error message should be correct\",\"You cannot use the not (!) operator with boolean, because it is a class name, not an instance.  Perhaps you meant to create a new instance of boolean\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\",", "+                   \"You cannot use the not (!) operator with boolean, because it is a class name, not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of boolean\", errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forNotExpressionOnly(ne, SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forNotExpressionOnly(ne, SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"You cannot use the not (!) operator with something of type int. Instead, it should be used with an expression of boolean type\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use the not (!) operator with something of type int. Instead, it should be used \"", "+                     + \"with an expression of boolean type\", errors.getLast().getFirst());"]}], "num": 3486}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1574b41f2a3ccce1b61d32748e78cac2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e6383ef3183aec2d11cf33caeda677b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "acb6486cf73ee6fa26fd3913d48fe9f46d7610e4", "commitAfterChange": "c0463418af643463955237ff1428c0079e36defe", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 56, "signatureBeforeChange": "   private boolean _saveSettings()", "signatureAfterChange": "   private boolean _saveSettings()", "diff": ["+    if (_jarAll.isSelected()) f |= JAR_ALL;", "+    if (_customManifest.isSelected()) f |= CUSTOM_MANIFEST;", "+    ", "+    ", "+    String currentManifest = _model.getCustomManifest();", "+    ", "+    if(currentManifest == null || !(currentManifest.equals(_customManifestText))){", "+      LOG.log(\"Updated Manifest on: \"+_model);", "+      _model.setCustomManifest(_customManifestText);", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "676731edaf08fd24786b42c2c763c894", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/PendingRequestManager.java", "commitBeforeChange": "37dab6b79fc3d4e6f7b2b5f0aa53a4ea9b7f7476", "commitAfterChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "signatureAfterChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "diff": ["-      int lineNumber = actions.get(i).getLineNumber();", "+      DocumentDebugAction<?> a = actions.get(i);", "+      int lineNumber = a.getLineNumber();", "-            //actions.get(i).setEnabled(false);", "+            String exactClassName = a.getExactClassName();", "+            if ((exactClassName!=null) && (exactClassName.equals(rt.name()))) {", "+              _manager.printMessage(actions.get(i).toString()+\" not on an executable line; disabled.\");", "+              actions.get(i).setEnabled(false);", "+            }", "-            //i++;", "-        // next line was in condition for if", "-        actions.get(i).createRequests(refTypes);  // This type warning will go away in JDK 1.5", "-        // actions.get(i) has raw type because type parameter in actions is the raw approximation to an existential type /**?", "-", "-//        if (!) {", "-          // if no request created, skip this action", "-          //i++;", "-//        }", "-//        else {", "-          // Experiment: try never removing the action or event request.", "-          //  This way, multiple classloads of this class will always have", "-          //  the DebugActions set properly", "-          /*", "-", "-          // if request created, remove the current action and keep i here", "-          actions.remove(i);", "-          // check if the vector is empty", "-          if (actions.size() == 0) {", "-            _pendingActions.remove(className);", "-            _manager.getEventRequestManager().deleteEventRequest(event.request());", "-          }", "-        */", "-//        }", "+        a.createRequests(refTypes);  // This type warning will go away in JDK 1.5", "-        failedActions.add(actions.get(i));", "-        //i++;", "-       // DrJava.consoleOut().println(\"Exception preparing request!! \" + e);", "+        failedActions.add(a);", "+        // DrJava.consoleOut().println(\"Exception preparing request!! \" + e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d607387e58ed28b0787c4fed2cb7a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/TypeCheckerExtension.java", "commitBeforeChange": "405bec7d97445f0020939e0560dc10393430aac1", "commitAfterChange": "070ce5905e33fc289f79bfc0035862d6493d03f5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Object visit(DivideExpression node)", "signatureAfterChange": "   public Object visit(InstanceOfExpression node)", "diff": ["+   */", "+  public Object visit(InstanceOfExpression node) {", "+    node.getReferenceType().acceptVisitor(this);", "+    ", "+    // The expression must not have a primitive type", "+    Class c = (Class) node.getExpression().acceptVisitor(this);", "+    if ((c != null) && c.isPrimitive()) {", "+      throw new ExecutionError(\"left.expression\", node);", "+    }", "+    ", "+    // Set the type property", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+    return boolean.class;", "+  }"]}], "num": 3199}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91971504edeebe4ee96167aa0bc794b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cdeca15c2772178a0c45f064d195ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-windows/edu/rice/cs/drjava/platform/WindowsPlatform.java", "commitBeforeChange": "b58fba4c05c7b2fa2ddfeee6a4be5d11082f0498", "commitAfterChange": "72391aed491e817e35fc0bc96ee05cd4de35124a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean unregisterFileExtension(String extension, String progid)", "signatureAfterChange": "   public boolean unregisterFileExtension(String extension, String progid)", "diff": ["-      handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithProgids\",", "-                                       WindowsRegistry.KEY_ALL_ACCESS);", "+      WindowsRegistry.QueryInfoResult qir;", "-        WindowsRegistry.deleteValue(handle, progid);", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithProgids\",", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        try {", "+          WindowsRegistry.deleteValue(handle, progid);", "+        }", "+        catch(WindowsRegistry.RegistryException re) { /* if it couldn't be deleted, there was nothing to do anyway */ }", "+        qir = WindowsRegistry.queryInfoKey(handle);", "+        otherProgidsLeft |= (qir.valueCount>0);", "+        otherProgidsLeft |= (qir.subkeyCount>0);", "+        WindowsRegistry.flushKey(handle);", "+        WindowsRegistry.closeKey(handle);", "+        ", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithList\",", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        try {", "+          WindowsRegistry.deleteValue(handle, progid);", "+        }", "+        catch(WindowsRegistry.RegistryException re) { /* if it couldn't be deleted, there was nothing to do anyway */ }", "+        qir = WindowsRegistry.queryInfoKey(handle);", "+        otherProgidsLeft |= (qir.valueCount>0);", "+        otherProgidsLeft |= (qir.subkeyCount>0);", "+        WindowsRegistry.flushKey(handle);", "+        WindowsRegistry.closeKey(handle);", "+        ", "+        if (!otherProgidsLeft) {", "+          WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithProgids\");", "+          WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension);", "+        }", "+        WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, progid+\"\\\\shell\\\\open\");", "+        WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, progid);", "-      catch(WindowsRegistry.RegistryException re) { /* if it couldn't be deleted, there was nothing to do anyway */ }", "-      WindowsRegistry.QueryInfoResult qir = WindowsRegistry.queryInfoKey(handle);", "-      otherProgidsLeft |= (qir.valueCount>0);", "-      otherProgidsLeft |= (qir.subkeyCount>0);", "-      WindowsRegistry.flushKey(handle);", "-      WindowsRegistry.closeKey(handle);", "-", "-      handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithList\",", "-                                       WindowsRegistry.KEY_ALL_ACCESS);", "+      catch(WindowsRegistry.RegistryException re) {", "+        /* if it couldn't be deleted, there was nothing to do anyway */", "+      }", "+      ", "+      // also need to delete from", "+      // HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.ext\\Application", "+      File drjavaFile = null;", "+      String ourCmdLine = null;", "-        WindowsRegistry.deleteValue(handle, progid);", "+        drjavaFile = getDrJavaFile();", "+        ourCmdLine = getCommandLine()+\" \\\"%1\\\" %*\";", "-      catch(WindowsRegistry.RegistryException re) { /* if it couldn't be deleted, there was nothing to do anyway */ }", "-      qir = WindowsRegistry.queryInfoKey(handle);", "-      otherProgidsLeft |= (qir.valueCount>0);", "-      otherProgidsLeft |= (qir.subkeyCount>0);", "-      WindowsRegistry.flushKey(handle);", "-      WindowsRegistry.closeKey(handle);", "+      catch(IOException ioe) { return false; }", "-      if (!otherProgidsLeft) {", "-        WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension+\"\\\\OpenWithProgids\");", "-        WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, extension);", "+      try {", "+        // LOG.log(\"[1]\");", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\FileExts\\\\\"+extension,", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        // LOG.log(\"[2]\");", "+        try {", "+          String s = WindowsRegistry.queryValue(handle, \"Application\");", "+          // LOG.log(\"Application = \"+s);", "+          if ((s!=null) && (s.equals(drjavaFile.getName()))) {", "+            // LOG.log(\"[3]\");", "+            WindowsRegistry.deleteValue(handle, progid);", "+            // LOG.log(\"[4]\");", "+          }", "+        }", "+        catch(WindowsRegistry.RegistryException re) {", "+          // LOG.log(\"[A] \"+re.toString());", "+          /* if it couldn't be deleted, there was nothing to do anyway */", "+        }", "+        ", "+        // LOG.log(\"[5]\");", "+        WindowsRegistry.flushKey(handle);", "+        // LOG.log(\"[6]\");", "+        WindowsRegistry.closeKey(handle);", "+        // LOG.log(\"[7]\");", "-      WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, progid+\"\\\\shell\\\\open\");", "-      WindowsRegistry.delKey(WindowsRegistry.HKEY_CLASSES_ROOT, progid);", "+      catch(WindowsRegistry.RegistryException re) {", "+        // LOG.log(\"[B] \"+re.toString());", "+        /* if it couldn't be deleted, there was nothing to do anyway */", "+      }", "+", "+      // HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.ext\\OpenWithProgids\\progid", "+      otherProgidsLeft = false;", "+      try {", "+        // LOG.log(\"[8]\");", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\FileExts\\\\\"+extension+\"\\\\OpenWithProgids\",", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        // LOG.log(\"[9]\");", "+        try {", "+          // LOG.log(\"[10] delete progid: \"+progid);", "+          WindowsRegistry.deleteValue(handle, progid);", "+          // LOG.log(\"[11]\");", "+        }", "+        catch(WindowsRegistry.RegistryException re) {", "+          // LOG.log(\"[B] \"+re.toString());", "+          /* if it couldn't be deleted, there was nothing to do anyway */", "+        }", "+        // LOG.log(\"[12]\");", "+        qir = WindowsRegistry.queryInfoKey(handle);", "+        // LOG.log(\"[13]\");", "+        otherProgidsLeft |= (qir.valueCount>0);", "+        otherProgidsLeft |= (qir.subkeyCount>0);", "+        // LOG.log(\"[15]\");", "+        WindowsRegistry.flushKey(handle);", "+        // LOG.log(\"[16]\");", "+        WindowsRegistry.closeKey(handle);", "+        // LOG.log(\"[17], left=\"+otherProgidsLeft);", "+", "+        if (!otherProgidsLeft) {", "+          // LOG.log(\"[18]\");", "+          WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                 \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\FileExts\\\\\"+extension+\"\\\\OpenWithProgids\");", "+          // LOG.log(\"[19]\");", "+        }", "+      }", "+      catch(WindowsRegistry.RegistryException re) {", "+        // LOG.log(\"[C] \"+re.toString());", "+        /* if it couldn't be deleted, there was nothing to do anyway */", "+      }", "+", "+      String mruList = \"\";", "+      // HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.ext\\OpenWithList\\MRUList", "+      // HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.ext\\OpenWithList\\a      ", "+      try {", "+        // LOG.log(\"[20]\");", "+        handle = WindowsRegistry.openKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\FileExts\\\\\"+extension+\"\\\\OpenWithList\",", "+                                         WindowsRegistry.KEY_ALL_ACCESS);", "+        // LOG.log(\"[21]\");", "+        try {", "+          String s = WindowsRegistry.queryValue(handle, \"MRUList\");", "+          // LOG.log(\"[22] s=\"+s);", "+          if (s!=null) mruList = s;", "+        }", "+        catch(WindowsRegistry.RegistryException re) {", "+          // LOG.log(\"[D] \"+re.toString());", "+          /* if it couldn't be read, there was nothing to do anyway */", "+        }", "+        // LOG.log(\"[23] MRUlist=\"+mruList);", "+        String newMRUList = \"\";", "+        for(int i=0; i<mruList.length(); ++i) {", "+          String letter = mruList.substring(i,i+1); ", "+          // LOG.log(\"[24] i=\"+i+\" letter=\"+letter);", "+          boolean keep = true;", "+          try {", "+            // LOG.log(\"[24]\");", "+            String value = WindowsRegistry.queryValue(handle, letter);", "+            // LOG.log(\"[25] value=\"+value);", "+            if (value!=null) {", "+              // value is something like \"drjava.exe\"", "+              // check if this is our command line", "+              // HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Applications\\<value>\\shell\\open\\command", "+              // LOG.log(\"[26]\");", "+              try {", "+                String cmdLine =", "+                  WindowsRegistry.getKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\\\\command\",\"\");", "+                // LOG.log(\"[27] cmdLine=\"+cmdLine);", "+                // LOG.log(\"ourCmdLine=\"+ourCmdLine);", "+                if ((cmdLine!=null) && (cmdLine.equals(ourCmdLine))) {", "+                  // LOG.log(\"[28]\");", "+                  // this is ours, delete it", "+                  keep = false;", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\\\\command\");", "+                  // LOG.log(\"[29]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\");", "+                  // LOG.log(\"[30]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\");", "+                  // LOG.log(\"[31]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_LOCAL_MACHINE,", "+                                         \"SOFTWARE\\\\Classes\\\\Applications\\\\\"+value);", "+                  // LOG.log(\"[32]\");", "+                }", "+              }", "+              catch(WindowsRegistry.RegistryException re) {", "+                // LOG.log(\"[E] \"+re.toString());", "+                /* if it couldn't be read, there was nothing to do anyway */", "+              }", "+              ", "+              // HKEY_CURRENT_USER\\Software\\Classes\\Applications\\<value>\\shell\\open\\command", "+              // LOG.log(\"[33]\");", "+              try {", "+                String cmdLine =", "+                  WindowsRegistry.getKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\\\\command\",\"\");", "+                // LOG.log(\"[34] cmdLine\"+cmdLine);", "+                // LOG.log(\"ourCmdLine=\"+ourCmdLine);", "+                if ((cmdLine!=null) && (cmdLine.equals(ourCmdLine))) {", "+                  // LOG.log(\"[35]\");", "+                  // this is ours, delete it", "+                  keep = false;", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\\\\command\");", "+                  // LOG.log(\"[36]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\\\\open\");", "+                  // LOG.log(\"[37]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value+\"\\\\shell\");", "+                  // LOG.log(\"[38]\");", "+                  WindowsRegistry.delKey(WindowsRegistry.HKEY_CURRENT_USER,", "+                                         \"Software\\\\Classes\\\\Applications\\\\\"+value);", "+                  // LOG.log(\"[39]\");", "+                }", "+              }", "+              catch(WindowsRegistry.RegistryException re) {", "+                // LOG.log(\"[F] \"+re.toString());", "+                /* if it couldn't be read, there was nothing to do anyway */", "+              }", "+              // LOG.log(\"[40] keep=\"+keep);", "+              if (!keep) {", "+                try {", "+                  // LOG.log(\"[41]\");", "+                  WindowsRegistry.deleteValue(handle, letter);", "+                  // LOG.log(\"[42]\");", "+                }", "+                catch(WindowsRegistry.RegistryException re) {", "+                  // LOG.log(\"[G] \"+re.toString());", "+                  /* if it couldn't be read, ignore it, we can still fix it with MRUList */", "+                }", "+              }", "+            }", "+          }", "+          catch(WindowsRegistry.RegistryException re) {", "+            // LOG.log(\"[H] \"+re.toString());", "+            /* if it couldn't be read, there was nothing to do anyway */", "+          }", "+          // LOG.log(\"[43]\");", "+          if (keep) newMRUList = newMRUList + letter;", "+          // LOG.log(\"[44] newMRUList=\"+newMRUList);", "+        }", "+        // LOG.log(\"[45] final newMRUList=\"+newMRUList);", "+        // LOG.log(\"mruList=\"+mruList);", "+        if (!mruList.equals(newMRUList)) {", "+          // LOG.log(\"[46]\");", "+          // update MRUList", "+          WindowsRegistry.setValue(handle, \"MRUList\", newMRUList);", "+          // LOG.log(\"[47]\");", "+        }", "+        // LOG.log(\"[48]\");", "+        WindowsRegistry.flushKey(handle);", "+        // LOG.log(\"[49]\");", "+        WindowsRegistry.closeKey(handle);", "+        // LOG.log(\"[50]\");", "+      }", "+      catch(WindowsRegistry.RegistryException re) {", "+        // LOG.log(\"[I] \"+re.toString());", "+        /* if it couldn't be read, there was nothing to do anyway */", "+      }      ", "+      // LOG.log(\"[Z] \"+re);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df7c9fd99e4736ea3ae131cad10d7c30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "b59ea5c5062a947f96790df7fe854009e693434a", "commitAfterChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent)", "signatureAfterChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames)", "diff": ["+    */", "+  public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames) {", "+    _columnNames = colNames;", "-    //set up list", "-    _listModel = new DefaultListModel();", "-    _list = _makeList(_listModel);", "+    //set up table", "+    _data = new Vector<T>();", "+    _tableModel = _makeTableModel();", "+    _table = new JTable(_tableModel) {", "+      {", "+        final TableCellRenderer renderer = getTableHeader().getDefaultRenderer();", "+        ", "+        for (int i=0;i<getColumnCount(); ++i) {", "+          int w = renderer.getTableCellRendererComponent(this,getModel().getColumnName(i), false, false, 0, i).getPreferredSize().width;", "+          getColumnModel().getColumn(i).setPreferredWidth(w);", "+        }", "+      }", "+      ", "+      public Component prepareRenderer(final TableCellRenderer renderer,", "+                                       final int row, final int column) {", "+        final Component prepareRenderer = super.prepareRenderer(renderer, row, column);", "+        final TableColumn tableColumn = getColumnModel().getColumn(column);", "+        ", "+        tableColumn.setPreferredWidth(Math.max(prepareRenderer.getPreferredSize().width,tableColumn.getPreferredWidth()));", "+        ", "+        return prepareRenderer;", "+      }    ", "+    };", "+    _table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "-", "-    /*", "-    Vector v = DrJava.getConfig().getSetting(_option);", "-    String[] array = new String[v.size()];", "-    v.copyInto(array);", "-    //_list.setListData(array);", "-    for (int i = 0; i < array.length; i++) {", "-      _listModel.add(array[i]);", "-    }", "-    */", "-        if (!_list.isSelectionEmpty()) {", "-          int index = _list.getSelectedIndex();", "-          _listModel.remove(index);", "-          if (index == _listModel.getSize()) { // we removed the last element", "-            if (index > 0) // and there's more than one element in the list", "-            _list.setSelectedIndex(index - 1);", "-            notifyChangeListeners();", "+        int[] rows = _table.getSelectedRows();", "+        if (rows.length>0) {", "+          // remove starting from the back so the indices don't have to be adjusted", "+          for(int i=rows.length-1; i>=0; --i) {", "+            _data.remove(rows[i]);", "+            _tableModel.fireTableRowsDeleted(rows[i],rows[i]); System.out.flush();", "+          }", "+          int last = rows[rows.length-1];", "+          if (last==_data.size()) { // we removed the last element", "+            if (last>0) { // and there's more than one element in the list", "+              _table.getSelectionModel().setSelectionInterval(last-1,last-1);", "+            }", "-            _list.setSelectedIndex(index);", "-            notifyChangeListeners();", "+            _table.getSelectionModel().setSelectionInterval(last,last);", "-        if (!_list.isSelectionEmpty()) {", "-          int index = _list.getSelectedIndex();", "-          if (index > 0) {", "-            Object o = _listModel.getElementAt(index);", "-            _listModel.remove(index);", "-            _listModel.insertElementAt(o, index - 1);", "-            _list.setSelectedIndex(index - 1);", "-            notifyChangeListeners();", "+        int[] rows = _table.getSelectedRows();", "+        if (rows.length>0) {", "+          _table.getSelectionModel().clearSelection();", "+          for(int i=0; i<rows.length; ++i) {", "+            if (rows[i]>0) {", "+              T el = _data.remove(rows[i]);", "+              _data.insertElementAt(el, rows[i]-1);", "+              _table.getSelectionModel().addSelectionInterval(rows[i]-1,rows[i]-1);", "+              _tableModel.fireTableRowsUpdated(rows[i]-1,rows[i]);", "+            }", "-        if (!_list.isSelectionEmpty()) {", "-          int index = _list.getSelectedIndex();", "-          if (index < _listModel.getSize() - 1) {", "-            Object o = _listModel.getElementAt(index);", "-            _listModel.remove(index);", "-            _listModel.insertElementAt(o, index + 1);", "-            _list.setSelectedIndex(index + 1);", "-            notifyChangeListeners();", "+        int[] rows = _table.getSelectedRows();", "+        if (rows.length>0) {", "+          _table.getSelectionModel().clearSelection();", "+          for(int i=0; i<rows.length; ++i) {", "+            if (rows[i]<_data.size()-1) {", "+              T el = _data.remove(rows[i]);", "+              _data.insertElementAt(el, rows[i]+1);", "+              _table.getSelectionModel().addSelectionInterval(rows[i]+1,rows[i]+1);", "+              _tableModel.fireTableRowsUpdated(rows[i],rows[i]+1);", "+            }", "-    ", "-    _listScrollPane = new JScrollPane(_list, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "-                                      JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "+    _tableScrollPane = new JScrollPane(_table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "+                                       JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "-    _panel.add(_listScrollPane, BorderLayout.CENTER);", "+    _panel.add(_tableScrollPane, BorderLayout.CENTER);", "-    _listScrollPane.setPreferredSize(new Dimension(0, NUM_ROWS * PIXELS_PER_ROW));", "+    _tableScrollPane.setPreferredSize(new Dimension(0, NUM_ROWS * PIXELS_PER_ROW));", "+    if (_columnNames.length==0) {", "+      _table.setTableHeader(null);", "+      _tableScrollPane.setColumnHeaderView(null);", "+    }", "+  }"]}], "num": 6618}
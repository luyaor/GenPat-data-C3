{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e2f5c93d68e52c45fbf92ba98bbad7b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae7e74ef64c87c523b6b646318e256c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 116, "signatureBeforeChange": "   public static FileFilter asFileFilter(final Predicate<? super File> p)", "signatureAfterChange": "     public boolean contains(File f)", "diff": ["-  /** Define a {@code FileFilter} in terms of a {@code Predicate} */", "-  public static FileFilter asFileFilter(final Predicate<? super File> p) {", "-    return new FileFilter() {", "-      public boolean accept(File f) { return p.value(f); }", "-    };", "+    public boolean accept(File f) { return _p.contains(f); }", "+    public boolean contains(File f) { return _p.contains(f); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2077bce0465eba3e344bd66f5a92bd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "113afd3151c2b14c9d66bb242346ae4c872989d1", "commitAfterChange": "b55243374fd344a99b71e152a523bbe523612b7b", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 85, "signatureBeforeChange": "   public static FileFilter regexpCanonicalCaseFileFilter(final String regexp)", "signatureAfterChange": "   public static Predicate<File> regexpCanonicalCaseFilePredicate(final String regexp)", "diff": ["-  public static FileFilter regexpCanonicalCaseFileFilter(final String regexp) {", "-    return new FileFilter() {", "-      public boolean accept(File f) { return canonicalCase(f).getName().matches(regexp); }", "-    };", "+   */", "+  public static Predicate<File> regexpCanonicalCaseFilePredicate(final String regexp) {", "+    return new Predicate<File>() {", "+      public Boolean value(File f) { return canonicalCase(f).getName().matches(regexp); }", "+    };", "+  }"]}], "num": 7843}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "476862a7fee0644dc4aa621f5b04e0e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "058b19663b6ef8f20a2e696fd414ce6e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "               public void testCreateMethodData()", "signatureAfterChange": "               public void testCreateMethodData()", "diff": ["-      MethodDef mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      MethodDef mdef = new ConcreteMethodDef(NO_INFO, ", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                    new PrimitiveType(NO_INFO, \"int\"), ", "+                                                    new Word(NO_INFO, \"methodName\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct.\", \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct.\", ", "+                   \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(0).getFirst());", "-      mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      mdef = new ConcreteMethodDef(NO_INFO, ", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName2\"),", "+                                                    new PrimitiveType(NO_INFO, \"int\"), ", "+                                                    new Word(NO_INFO, \"methodName2\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-", "-      mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "-                                   _abstractMav, ", "-                                   new TypeParameter[] { new TypeParameter(JExprParser.NO_SOURCE_INFO,", "-                                                                           new TypeVariable(JExprParser.NO_SOURCE_INFO, \"T\"),", "-                                                                           new TypeVariable(JExprParser.NO_SOURCE_INFO, \"U\"))},", "-                                   new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                   new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "-                                   new FormalParameter[] {", "-                                     new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                                                         new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                                                                             new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-                                                         false", "-                                                           ),", "-                                     new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                                                         new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                                                             new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-                                                         false", "-                                                           )},", "-                                   new ReferenceType[] { new TypeVariable(JExprParser.NO_SOURCE_INFO, \"X\") }", "-                                   );", "-                                   mdata = new MethodData(\"methodName\", ", "-                                                          _abstractMav, ", "-                                                          new TypeParameter[] { new TypeParameter(JExprParser.NO_SOURCE_INFO,", "-                                                                                                  new TypeVariable(JExprParser.NO_SOURCE_INFO, \"T\"),", "-                                                                                                  new TypeVariable(JExprParser.NO_SOURCE_INFO, \"U\"))}, ", "-                                                          SymbolData.VOID_TYPE, ", "-                                                          new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "-                                                            new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "-                                                          new String[] { \"X\" },", "-                                                          _sd1,", "-                                                          null);", "-                                                          ", "-                                                          mdata.getParams()[0].setEnclosingData(mdata);", "-                                                          mdata.getParams()[1].setEnclosingData(mdata);", "+      UninitializedVariableDeclarator vd1 = ", "+         new UninitializedVariableDeclarator(NO_INFO, new PrimitiveType(NO_INFO, \"double\"), new Word(NO_INFO, \"field1\"));", "+      UninitializedVariableDeclarator vd2 = ", "+         new UninitializedVariableDeclarator(NO_INFO, new PrimitiveType(NO_INFO, \"int\"), new Word(NO_INFO, \"field1\"));", "+      mdef = ", "+        new AbstractMethodDef(NO_INFO, ", "+                              _abstractMav, ", "+                              new TypeParameter[] { new TypeParameter(NO_INFO,", "+                                                                      new TypeVariable(NO_INFO, \"T\"),", "+                                                                      new TypeVariable(NO_INFO, \"U\"))},", "+                              new VoidReturn(NO_INFO, \"void\"), ", "+                              new Word(NO_INFO, \"methodName\"),", "+                              new FormalParameter[] {", "+                                new FormalParameter(NO_INFO, vd1, false),", "+                                new FormalParameter(NO_INFO, vd2, false)},", "+                              new ReferenceType[] { new TypeVariable(NO_INFO, \"X\") }", "+                              );", "+      mdata =", "+        new MethodData(\"methodName\", ", "+                       _abstractMav, ", "+                       new TypeParameter[] { new TypeParameter(NO_INFO,", "+                                                               new TypeVariable(NO_INFO, \"T\"),", "+                                                               new TypeVariable(NO_INFO, \"U\"))}, ", "+                       SymbolData.VOID_TYPE, ", "+                       new VariableData[] { ", "+                         new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "+                         new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "+                       new String[] { \"X\" },", "+                       _sd1,", "+                       null);", "+      ", "+      mdata.getParams()[0].setEnclosingData(mdata);", "+      mdata.getParams()[1].setEnclosingData(mdata);", "-", "-           MethodData expectedMethod = _av.createMethodData(mdef, _sd1);", "-           ", "-           // have to add the parameters to the vars manually", "-           mdata.getParams()[0].setEnclosingData(expectedMethod);", "-           mdata.getParams()[1].setEnclosingData(expectedMethod);", "-           mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, expectedMethod) });  ", "-           assertEquals(\"Should return the correct MethodData\", mdata, expectedMethod);", "-           assertEquals(\"There should be 2 errors.\", 2, errors.size());", "-           assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());", "+      ", "+      MethodData expectedMethod = _av.createMethodData(mdef, _sd1);", "+      ", "+      // have to add the parameters to the vars manually", "+      mdata.getParams()[0].setEnclosingData(expectedMethod);", "+      mdata.getParams()[1].setEnclosingData(expectedMethod);", "+      mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, ", "+                                                          expectedMethod) });  ", "+      assertEquals(\"Should return the correct MethodData\", mdata, expectedMethod);", "+      assertEquals(\"There should be 2 errors.\", 2, errors.size());", "+      assertEquals(\"The second error message should be correct.\", ", "+                   \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fc1f1a7c8c977669748511e789fc4be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 31, "signatureBeforeChange": "               public void testCreateMethodData()", "signatureAfterChange": "                    public void testCreateMethodData()", "diff": ["-      MethodDef mdef = new ConcreteMethodDef(SourceInfo.NO_INFO, ", "-                                                    _finalMav, ", "-                                                    new TypeParameter[0], ", "-                                                    new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                    new Word(SourceInfo.NO_INFO, \"methodName\"),", "-                                                    new FormalParameter[0],", "-                                                    new ReferenceType[0], ", "-                                                    new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      MethodDef mdef = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+                                             _privateAbstractMav, ", "+                                             new TypeParameter[0], ", "+                                             new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                             new Word(SourceInfo.NO_INFO, \"methodName\"),", "+                                             new FormalParameter[0],", "+                                             new ReferenceType[0]); ", "-      MethodData mdata = new MethodData(\"methodName\", _finalMav, new TypeParameter[0], SymbolData.INT_TYPE, ", "-                                   new VariableData[0], ", "-                                   new String[0],", "-                                   _sd1,", "-                                   null);", "+      MethodData mdata = new MethodData(\"methodName\", _privateAbstractMav, new TypeParameter[0], SymbolData.INT_TYPE, ", "+                                        new VariableData[0], ", "+                                        new String[0],", "+                                        _sd1,", "+                                        null);", "-      assertEquals(\"There should be one error.\", 1, errors.size());", "-      assertEquals(\"The error message should be correct.\", \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "+      assertEquals(\"There should be one errors.\", 1, errors.size());", "+//      assertEquals(\"The error message should be correct.\", \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "-      mdef = new AbstractMethodDef(SourceInfo.NO_INFO, ", "-                                   _abstractMav, ", "-                                   new TypeParameter[] { new TypeParameter(SourceInfo.NO_INFO,", "-                                                                           new TypeVariable(SourceInfo.NO_INFO, \"T\"),", "-                                                                           new TypeVariable(SourceInfo.NO_INFO, \"U\"))},", "-                                   new VoidReturn(SourceInfo.NO_INFO, \"void\"), ", "-                                   new Word(SourceInfo.NO_INFO, \"methodName\"),", "-                                   new FormalParameter[] {", "-                                     new FormalParameter(SourceInfo.NO_INFO, ", "-                                                         new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                             new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                                                             new Word (SourceInfo.NO_INFO, \"field1\")),", "-                                                         false", "-                                                           ),", "-                                     new FormalParameter(SourceInfo.NO_INFO, ", "-                                                         new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                             new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                                                             new Word (SourceInfo.NO_INFO, \"field1\")),", "-                                                         false", "-                                                           )},", "-                                   new ReferenceType[] { new TypeVariable(SourceInfo.NO_INFO, \"X\") }", "-                                   );", "-       mdata = new MethodData(\"methodName\", ", "+      mdef = ", "+        new AbstractMethodDef(SourceInfo.NO_INFO, ", "-                                                                      new TypeVariable(SourceInfo.NO_INFO, \"U\"))}, ", "-                              SymbolData.VOID_TYPE, ", "-                              new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "-                                new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "-                              new String[] { \"X\" },", "-                              _sd1,", "-                              null);", "-       ", "-                              ", "-       MethodData result = _iv.createMethodData(mdef, _sd1);", "-       mdata.getParams()[0].setEnclosingData(result);", "-       mdata.getParams()[1].setEnclosingData(result);", "-       // have to add the parameters to the vars manually", "-       mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, result) });                                                          ", "-       assertEquals(\"Should return the correct MethodData\", mdata, result);", "-       assertEquals(\"There should be 2 errors.\", 2, errors.size());", "-       //This is now caught in the type checker.", "-       //assertEquals(\"The second error message should be correct.\", \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", errors.get(1).getFirst());", "-       assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());", "+                                                                      new TypeVariable(SourceInfo.NO_INFO, \"U\"))},", "+                              new VoidReturn(SourceInfo.NO_INFO, \"void\"), ", "+                              new Word(SourceInfo.NO_INFO, \"methodName\"),", "+                              new FormalParameter[] {", "+                                new FormalParameter(SourceInfo.NO_INFO, ", "+                                                    new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                                        new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                                                                        new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                    false", "+                                                   ),", "+                                  new FormalParameter(SourceInfo.NO_INFO, ", "+                                                      new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                                          new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                                                                          new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                      false", "+                                                     )},", "+                              new ReferenceType[] { new TypeVariable(SourceInfo.NO_INFO, \"X\") }", "+                              );", "+      mdata = ", "+        new MethodData(\"methodName\", ", "+                       _abstractMav, ", "+                       new TypeParameter[] { new TypeParameter(SourceInfo.NO_INFO,", "+                                                               new TypeVariable(SourceInfo.NO_INFO, \"T\"),", "+                                                               new TypeVariable(SourceInfo.NO_INFO, \"U\"))}, ", "+                       SymbolData.VOID_TYPE, ", "+                       new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "+                         new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "+                       new String[] { \"X\" },", "+                       _sd1,", "+                       null);", "+      ", "+      ", "+      MethodData result = _iv.createMethodData(mdef, _sd1);", "+      mdata.getParams()[0].setEnclosingData(result);", "+      mdata.getParams()[1].setEnclosingData(result);", "+      // have to add the parameters to the vars manually", "+      mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, result) });                                                          ", "+      assertEquals(\"Should return the correct MethodData\", mdata, result);", "+      assertEquals(\"There should be 2 errors.\", 2, errors.size());", "+      //This is now caught in the type checker.", "+      //assertEquals(\"The second error message should be correct.\", \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", errors.get(1).getFirst());", "+      assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());"]}], "num": 13131}
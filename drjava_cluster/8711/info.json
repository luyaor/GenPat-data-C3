{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05c7b1cc59e1c5eb4af2aaec40e5c244", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5b49471f625ae2412a0e5da78c62455", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 58, "signatureBeforeChange": "   private void _threwException(Throwable t)", "signatureAfterChange": "   private void _threwException(Throwable t)", "diff": ["-    String shortMsg = null;", "-    if ((t instanceof ParseError) && ((ParseError) t).getParseException() != null) ", "-      shortMsg = ((ParseError) t).getMessage();  // in this case, getMessage is equivalent to getShortMessage", "-    _interactionsModel.replThrewException(t.getClass().getName(), t.getMessage(), StringOps.getStackTrace(t), shortMsg);                                    ;", "-  } ", "+    StringWriter msg = new StringWriter();", "+    t.printStackTrace(new PrintWriter(msg));", "+    _interactionsModel.replThrewException(msg.toString());", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb2216534ca259169dbb5b41ee3dfd0c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 146, "signatureBeforeChange": "   public static <T> SizedIterable<T> makeIterable(T v1, T v2, T v3, T v4)", "signatureAfterChange": "   public static <T> SizedIterable<T> shuffle(Iterable<T> iter)", "diff": ["+   */", "+  public static <T> SizedIterable<T> shuffle(Iterable<T> iter) {", "+    ArrayList<T> result = asArrayList(iter);", "+    Collections.shuffle(result);", "+    return asIterable(result);", "+  }", "-  /** Create an immutable SizedIterable containing the given values */", "-  public static <T> SizedIterable<T> makeIterable(T v1, T v2, T v3, T v4) {", "-    SizedIterable<T> result = SingletonIterable.make(v1);", "-    result = ComposedIterable.make(result, v2);", "-    result = ComposedIterable.make(result, v3);", "-    result = ComposedIterable.make(result, v4);", "-    return result;", "-  }"]}], "num": 8711}
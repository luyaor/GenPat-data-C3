{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "484f144ed8d306bcf6c513ea99868f6e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a93b2eb4e9d9efe5b157c6ab95b6b684", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static File makeRelativeTo(File abs, File base) throws IOException, SecurityException", "signatureAfterChange": "   public static File makeRelativeTo(File f, File b) throws IOException, SecurityException", "diff": ["-  public static File makeRelativeTo(File abs, File base) throws IOException, SecurityException{", "-    base = base.getCanonicalFile();", "-    abs  = abs.getCanonicalFile();", "-    if (!base.isDirectory()) base = base.getParentFile();", "+  public static File makeRelativeTo(File f, File b) throws IOException, SecurityException {", "+    File base = b.getCanonicalFile();", "+    File abs  = f.getCanonicalFile();  // If  f is relative, uses current working directory (\"user.dir\")", "+    if (! base.isDirectory()) base = base.getParentFile();", "-    if (!abs.isDirectory()) {", "+    if (! abs.isDirectory()) {", "-      last = tmp.substring(tmp.lastIndexOf(File.separator)+1);", "+      last = tmp.substring(tmp.lastIndexOf(File.separator) + 1);", "+//    System.err.println(\"makeRelativeTo called; f = \" + f + \" = \" + abs + \"; b = \" + b + \" = \" + base);", "+//    System.err.println(\"makeRelativeTo(\" + f + \", \" + b + \") = \" + result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcc86e21cdb397713604f8edcfc9d78b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Object interpret(String s)", "signatureAfterChange": "   public Object interpret(String s) throws ExceptionReturnedException", "diff": ["-  public Object interpret(String s) {", "+  public Object interpret(String s) throws ExceptionReturnedException {", "+", "+    catch (InterpreterException ie) {", "+      Throwable cause = ie.getException();", "+      if (cause instanceof ThrownException) {", "+        cause = ((ThrownException) cause).getException();", "+      }", "+", "+      throw new ExceptionReturnedException(cause);", "+    }", "-      throw iie;", "+      return JavaInterpreter.NO_RESULT;", "-      throw enae;", "+      return JavaInterpreter.NO_RESULT;", "-      System.err.print(new Date() + \": \");", "-      System.err.println(ie);", "-      ie.printStackTrace();", "-      System.err.println(\"\\n\");", "-      throw  new RuntimeException(ie.toString());", "+      //System.err.print(new Date() + \": \");", "+      //System.err.println(ie);", "+      //ie.printStackTrace();", "+      //System.err.println(\"\\n\");", "+      //throw new RuntimeException(ie.toString());", "+", "+      throw new ExceptionReturnedException(ie);"]}], "num": 3192}
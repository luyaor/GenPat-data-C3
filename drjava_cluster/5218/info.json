{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf604be3caea1dedc570659125fc58f1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "518002a369158f8ee01c59cda568ed28", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r   public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result, TypeData value_result)", "diff": ["-   */\r", "-  public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result, TypeData value_result) {\r", "-    if (name_result == null || value_result == null) {return null;}\r", "-    \r", "-    //make sure that both lhs and rhs could be resolved (not PackageDatas)\r", "-    if (!assertFound(name_result, that) || !assertFound(value_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    //make sure both are instance datas\r", "-    if (assertInstanceType(name_result, \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type \" + name_result.getName(), that) &&\r", "-        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + \" on the left hand side of a numeric assignment (-=, %=, *=, /=)\", that)) {\r", "-      \r", "-      boolean error = false;\r", "-      //make sure that both lhs and rhs are number types:\r", "-      if (!name_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-        _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", that);\r", "-        error=true;\r", "-      }\r", "-      if (!value_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-        _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", that);\r", "-        error = true;\r", "-      }\r", "-            \r", "-      //make sure the lhs is parent type of rhs  NOTE: technically, this is allowable in full java (try int i = 0; i+= 4.2), but it is inconsistent\r", "-      //with the fact that you cannot say int i = 0; i = i + 4.2;  To avoid student confusion, we will not allow it.\r", "-      if (!error && !value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), _targetVersion)) {\r", "-        _addError(\"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type \" + name_result.getName() + \" with something of type \" + value_result.getName(), that);\r", "-      }\r", "-    }  \r", "-    return name_result.getInstanceData();  \r", "-  }\r", "+   */", "+  public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result, TypeData value_result) {", "+    if (name_result == null || value_result == null) {return null;}", "+    ", "+    //make sure that both lhs and rhs could be resolved (not PackageDatas)", "+    if (!assertFound(name_result, that) || !assertFound(value_result, that)) {", "+      return null;", "+    }", "+    ", "+    //make sure both are instance datas", "+    if (assertInstanceType(name_result, \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type \" + name_result.getName(), that) &&", "+        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + \" on the left hand side of a numeric assignment (-=, %=, *=, /=)\", that)) {", "+      ", "+      boolean error = false;", "+      //make sure that both lhs and rhs are number types:", "+      if (!name_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", that);", "+        error=true;", "+      }", "+      if (!value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", that);", "+        error = true;", "+      }", "+            ", "+      //make sure the lhs is parent type of rhs  NOTE: technically, this is allowable in full java (try int i = 0; i+= 4.2), but it is inconsistent", "+      //with the fact that you cannot say int i = 0; i = i + 4.2;  To avoid student confusion, we will not allow it.", "+      if (!error && !value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type \" + name_result.getName() + \" with something of type \" + value_result.getName(), that);", "+      }", "+    }  ", "+    return name_result.getInstanceData();  ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85952cf7421d69f7d8932c78b01e0819", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r   public TypeData forEqualityExpressionOnly(EqualityExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forEqualityExpressionOnly(EqualityExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */\r", "-  public TypeData forEqualityExpressionOnly(EqualityExpression that, TypeData left_result, TypeData right_result) {\r", "-    if (left_result == null || right_result == null) {return null;}\r", "-    \r", "-    //make sure that both lhs and rhs could be resolved (not PackageDatas)\r", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {\r", "-      return null;\r", "-    }\r", "-\r", "-    \r", "-    //if either left or right are primitive, the must either be both numeric or both boolean\r", "-    if (left_result.getSymbolData().isPrimitiveType() || right_result.getSymbolData().isPrimitiveType()) {\r", "-      if (!((left_result.getSymbolData().isNumberType(_targetVersion) && right_result.getSymbolData().isNumberType(_targetVersion)) ||\r", "-            (left_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, _targetVersion) && right_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, _targetVersion)))) {\r", "-        _addError(\"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type \" + left_result.getName() + \" and \" + right_result.getName(), that);\r", "-      }\r", "-    }\r", "-    \r", "-    //otherwise, anything goes...just check for instance types\r", "-    \r", "-    assertInstanceType(left_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the left side\", that);\r", "-    assertInstanceType(right_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the right side\", that);\r", "-    \r", "-    return SymbolData.BOOLEAN_TYPE.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forEqualityExpressionOnly(EqualityExpression that, TypeData left_result, TypeData right_result) {", "+    if (left_result == null || right_result == null) {return null;}", "+    ", "+    //make sure that both lhs and rhs could be resolved (not PackageDatas)", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "+      return null;", "+    }", "+", "+    ", "+    //if either left or right are primitive, the must either be both numeric or both boolean", "+    if (left_result.getSymbolData().isPrimitiveType() || right_result.getSymbolData().isPrimitiveType()) {", "+      if (!((left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion()) &&", "+             right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+            (left_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())", "+               && right_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())))) {", "+        _addError(\"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type \" + left_result.getName() + \" and \" + right_result.getName(), that);", "+      }", "+    }", "+    ", "+    //otherwise, anything goes...just check for instance types", "+    ", "+    assertInstanceType(left_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the left side\", that);", "+    assertInstanceType(right_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the right side\", that);", "+    ", "+    return SymbolData.BOOLEAN_TYPE.getInstanceData();", "+  }"]}], "num": 5218}
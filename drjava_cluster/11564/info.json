{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd3b932da861c3ad752ef8eb58bd815a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d72c225ac27df6e79931f63ed5aa8a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public int findCharOnLine(int pos, char findChar)", "signatureAfterChange": "   public int findCharOnLine(int pos, char findChar)", "diff": ["-    int i, result;", "+    int i;", "+    int matchIndex; // absolute index of matching character ", "-    synchronized (_reduced) {", "-      int here = _currentLocation;", "-      int lineStart = this.getLineStartPos(pos);", "-      int lineEnd = this.getLineEndPos(pos);", "-      String lineText;", "-      ", "-      try { lineText = this.getText(lineStart, lineEnd - lineStart); } ", "-      catch(BadLocationException e) { throw new UnexpectedException(e); }", "-      ", "-      i = lineText.indexOf(findChar, 0);", "-      ", "-      int matchIndex = 0;  // dummy value required by javac; program behavior does not depend on this value.", "-      ", "-      while (i != -1) {", "-        /* Invariant: reduced model points to original location (here), lineText[0:i-1] does not contain valid findChar */", "-        // Move reduced model to location of ith char", "+    readLock();", "+    try {", "+      synchronized (_reduced) {", "+        int here = _currentLocation;", "+        int lineStart = getLineStartPos(pos);", "+        int lineEnd = getLineEndPos(pos);", "+        String lineText = getText(lineStart, lineEnd - lineStart);", "+        i = lineText.indexOf(findChar, 0);", "-        _reduced.move(matchIndex - here);", "-        // Check if matching char is in comment or quotes", "-        if (_reduced.getStateAtCurrent().equals(ReducedModelState.FREE)) {", "-          // Found matching char", "+        while (i != -1) { // match found", "+          /* Invariant: reduced model points to original location (here), lineText[0:i-1] does not contain valid ", "+           *            findChar, lineText[i] == findChar which may or may not be valid. */", "+          ", "+          // Move reduced model to location of ith char", "+          _reduced.move(matchIndex - here);  // move reduced model to location matchIndex", "+          ", "+          // Check if matching char is in comment or quotes", "+          if (_reduced.getStateAtCurrent().equals(ReducedModelState.FREE)) {", "+            // Found matching char", "+            _reduced.move(here - matchIndex);  // Restore reduced model", "+            break;", "+          } ", "+          ", "+          // matching character is not valid, try again", "-          break;", "-        } ", "-        ", "-        // matching character is not valid, try again", "-        _reduced.move(here - matchIndex);  // Restore reduced model", "-        i = lineText.indexOf(findChar, i+1);", "+          i = lineText.indexOf(findChar, i+1);", "+        }", "-      ", "-      result = matchIndex;", "-      if (i == -1) result = ERROR_INDEX;", "-    _storeInCache(key, new Integer(result));", "-    return result;", "+    catch (Throwable t) { throw new UnexpectedException(t); }", "+    finally { readUnlock(); }", "+    ", "+    if (i == -1) matchIndex = ERROR_INDEX;", "+    _storeInCache(key, new Integer(matchIndex));", "+    return matchIndex;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a41584c1026be51b2cc6cfdb0e8d892", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public synchronized int findCharOnLine(int pos, char findChar)", "signatureAfterChange": "   public int findCharOnLine(int pos, char findChar)", "diff": ["-  public synchronized int findCharOnLine(int pos, char findChar) {", "-    throwErrorHuh();", "+  public int findCharOnLine(int pos, char findChar) {", "+    // throwErrorHuh();", "-    int here = _currentLocation;", "-    int lineStart = this.getLineStartPos(pos);", "-    int lineEnd = this.getLineEndPos(pos);", "-    String lineText;", "+    int i, result;", "-    try {", "-      lineText = this.getText(lineStart, lineEnd - lineStart);", "-    } catch(BadLocationException e) {", "-      // Should not be here", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    int i = lineText.indexOf(findChar, 0);", "-    ", "-    // Move to start of line", "-    /*", "-     _reduced.move(lineStart - here);", "-     int reducedPos = lineStart;", "-     int prevI = 0;", "-     */", "-    ", "-    while(i != -1) {", "-      // Move reduced model to walker's location", "-      int matchIndex = i + lineStart;", "-      _reduced.move(matchIndex - here);", "-      //int dist = i - prevI;", "-      //_reduced.move(dist);", "-      //reducedPos = reducedPos + dist;", "+    synchronized (_reduced) {", "+      int here = _currentLocation;", "+      int lineStart = this.getLineStartPos(pos);", "+      int lineEnd = this.getLineEndPos(pos);", "+      String lineText;", "-      // Check if matching char is in comment or quotes", "-      if (!_reduced.getStateAtCurrent().equals(ReducedModelState.FREE)) {", "-        // Ignore matching char", "-      } else {", "-        // Return position of matching char", "-        //_reduced.move(here - reducedPos);", "-        _reduced.move(here - matchIndex);", "-        _storeInCache(key, new Integer(matchIndex));", "-        return matchIndex;", "+      try {", "+        lineText = this.getText(lineStart, lineEnd - lineStart);", "+      } catch(BadLocationException e) {", "+        // Should not be here", "+        throw new UnexpectedException(e);", "-      _reduced.move(here - matchIndex);", "-      //prevI = i;", "-      i = lineText.indexOf(findChar, i+1);", "+      i = lineText.indexOf(findChar, 0);", "+      ", "+      int matchIndex = 0;  // dummy value required by javac; program behavior does not depend on this value.", "+      ", "+      while (i != -1) {", "+        /* Invariant: reduced model points to original location (here), lineText[0:i-1] does not contain valid findChar */", "+        // Move reduced model to location of ith char", "+        matchIndex = i + lineStart;", "+        _reduced.move(matchIndex - here);", "+        ", "+        // Check if matching char is in comment or quotes", "+        if (_reduced.getStateAtCurrent().equals(ReducedModelState.FREE)) {", "+          // Found matching char", "+          _reduced.move(here - matchIndex);  // Restore reduced model", "+          break;", "+        } ", "+        ", "+        // matching character is not valid, try again", "+        _reduced.move(here - matchIndex);  // Restore reduced model", "+        i = lineText.indexOf(findChar, i+1);", "+      }", "+      ", "+      result = matchIndex;", "+      if (i == -1) result = ERROR_INDEX;", "-    ", "-    //_reduced.move(here - reducedPos);", "-    _storeInCache(key, new Integer(ERROR_INDEX));", "-    return ERROR_INDEX;", "+    _storeInCache(key, new Integer(result));", "+    return result;"]}], "num": 11564}
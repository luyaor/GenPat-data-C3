{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "952a3eb4d7e17b5e059b1b90f0b6bfda", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0aa8ec82b5df2fe4b859ae5a7ab52ed5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOption.java", "commitBeforeChange": "2de5de833fec6c0fefce3e0dfbb07764b1900707", "commitAfterChange": "fa036878036cfa9b3fdfb0b92616499d17bb99f7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Vector<T> parse(String s)", "signatureAfterChange": "   public Vector<T> parse(String s)", "diff": ["+   */", "+  public Vector<T> parse(String s) {  ", "+    int startFirstElement = header.length();", "+    int startFooter = s.length() - footer.length(); ", "+    if (startFooter < startFirstElement || ", "+        !s.startsWith(header) || ", "+        !s.endsWith(footer)) {", "+      throw new OptionParseException(name, s, ", "+                                     \"Value must start with \"+header+\" and end \"+", "+                                     \"with \"+footer+\" to be a valid vector.\");", "+    s = s.substring(startFirstElement, startFooter);", "+    String d = String.valueOf(delim);", "+    StringTokenizer st = new StringTokenizer(s,d,true);", "+    Vector<T> res = new Vector<T>();", "+    boolean sawDelim = st.hasMoreTokens();", "-     */", "-    public Vector<T> parse(String s) {  ", "-        int startFirstElement = header.length();", "-        int startFooter = s.length() - footer.length(); ", "- ", "-        if (startFooter < startFirstElement || ", "-            !s.startsWith(header) || ", "-            !s.endsWith(footer)) {", "-            throw new IllegalArgumentException(\"String argument does not match format \" +", "-                                               \"specified by this VectorOption and its \" +", "-                                               \"delimiters.\");", "-        }", "-        s = s.substring(startFirstElement, startFooter);", "-        String d = String.valueOf(delim);", "-        StringTokenizer st = new StringTokenizer(s,d,true);", "- ", "-        Vector<T> res = new Vector<T>();", "-        boolean sawDelim = st.hasMoreTokens();", "-", "-        while(st.hasMoreTokens()) {", "-            String token = st.nextToken();", "-            boolean isDelim = token.equals(d);", "-     ", "-            if(!isDelim) {", "-                res.addElement(parser.parse(token));", "-            } else if(sawDelim) { // isDelim & sawDelim (two delims in a row)", "-                throw new IllegalArgumentException(\" String argument contains delimiter with no preceding list element.\");", "-            } ", "-            sawDelim = isDelim;", "-        }", "-        if(sawDelim) {", "-            throw new IllegalArgumentException(\"String argument ends with delimiter.\");", "-        }", "-        return res;", "+    while(st.hasMoreTokens()) {", "+      String token = st.nextToken();", "+      boolean isDelim = token.equals(d);", "+      ", "+      if(!isDelim) {", "+        res.addElement(parser.parse(token));", "+      } else if(sawDelim) { // isDelim & sawDelim (two delims in a row)", "+        throw new OptionParseException(name, s,", "+                                       \"Argument contains delimiter with no preceding list element.\");", "+      } ", "+      sawDelim = isDelim;", "+    if(sawDelim) {", "+      throw new OptionParseException(name, s,", "+                                     \"Value shouldn't end with a delimiter.\");", "+    }", "+    return res;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c06903a1e39826a64a3851044e26284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOption.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Vector<T> parse(String s)", "signatureAfterChange": "     public Vector<T> parse(String s)", "diff": ["-   */", "-  public Vector<T> parse(String s)", "-  {  ", "-    // Enforced String format: \"[<element>, <element>, <element>]\"", "-      ", "-    if (s.charAt(0) != '[' || s.charAt(s.length() - 1) != ']')", "-      throw new IllegalArgumentException(\"Input must be String representation\" +", "-                                           \" of a Vector.\");", "-  ", "-    Vector<T> res = new Vector<T>();", "- ", "-    int i = 1;", "- ", "-    while (i != s.length() - 1)", "-      i = this.parseElement(s, i, res);", "-     ", "-    return res;", "-  }", "+     */", "+    public Vector<T> parse(String s) {  ", "+ int startFirstElement = header.length();", "+ int startFooter = s.length() - footer.length(); ", "+ ", "+ if (startFooter < startFirstElement || ", "+     !s.startsWith(header) || ", "+     !s.endsWith(footer)) {", "+     throw new IllegalArgumentException(\"String argument does not match format \" +", "+            \"specified by this VectorOption and its \" +", "+            \"delimiters.\");", "+ }", "+ s = s.substring(startFirstElement, startFooter);", "+ String d = String.valueOf(delim);", "+ StringTokenizer st = new StringTokenizer(s,d,true);", "+ ", "+ Vector<T> res = new Vector<T>();", "+ boolean sawDelim = st.hasMoreTokens();", "+", "+ while(st.hasMoreTokens()) {", "+     String token = st.nextToken();", "+     boolean isDelim = token.equals(d);", "+     ", "+     if(!isDelim) {", "+  res.addElement(parser.parse(token));", "+     } else if(sawDelim) { // isDelim & sawDelim (two delims in a row)", "+  throw new IllegalArgumentException(\" String argument contains delimiter with no preceding list element.\");", "+     } ", "+     sawDelim = isDelim;", "+ }", "+ if(sawDelim) {", "+     throw new IllegalArgumentException(\"String argument ends with delimiter.\");", "+ }", "+ return res;", "+    }"]}], "num": 1566}
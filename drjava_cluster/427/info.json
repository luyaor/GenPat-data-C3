{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17f1bd763efac92c4e73374b82709faa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78f0c1e30e55ed7f2823c32df907f455", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "60798300f32b2ec4f4cff0f390993b3a5984e6c1", "commitAfterChange": "6fa1e9e0526601b88fed849b111530adacda855f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public boolean setActiveInterpreter(String name)", "signatureAfterChange": "    public boolean setActiveInterpreter(String name)", "diff": ["+   */", "+   public boolean setActiveInterpreter(String name) {", "+     _activeInterpreter = getInterpreter(name);", "+     return _activeInterpreter.isInProgress();", "+   }", "-   */", "-  public boolean setActiveInterpreter(String name) {", "-    if (_debugInterpreters.containsKey(name)) {", "-      _activeInterpreter = _debugInterpreters.get(name);", "-      return _activeInterpreter.isInProgress();", "-    }", "-    else {", "-      throw new IllegalArgumentException(\"Interpreter <\" + name + \"> does not exist.\");", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eca6f7412eab7d7a270ae87fb10230d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public synchronized boolean setActiveInterpreter(String name)", "signatureAfterChange": "   public synchronized boolean setActiveInterpreter(String name)", "diff": ["-   */", "-  public synchronized boolean setActiveInterpreter(String name) {", "-    _activeInterpreter = getInterpreter(name);", "-    return _activeInterpreter.inProgress();", "-  }", "+   */", "+  public synchronized boolean setActiveInterpreter(String name) {", "+    Interpreter i = _interpreters.get(name);", "+    if (i == null) { throw new IllegalArgumentException(\"Interpreter '\" + name + \"' does not exist.\"); }", "+    _activeInterpreter = i;", "+    return _busyInterpreters.contains(i);", "+  }"]}], "num": 427}
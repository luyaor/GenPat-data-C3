{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41464bb44075ba3776eed00b4d282311", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073ef88bec6aaa33ee578f310c095090", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 249, "signatureBeforeChange": "      public ObjectMethodInvocation lookupMethod(final Expression object, String name,                                               final Iterable<? extends Type> typeArgs,                                               final Iterable<? extends Expression> args,                                              final Option<Type> expected)       throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "      public ObjectMethodInvocation lookupMethod(Expression object, String name,                                               Iterable<? extends Type> typeArgs,                                               Iterable<? extends Expression> args,                                              Option<Type> expected, Access.Module accessModule)       throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-  public ObjectMethodInvocation lookupMethod(final Expression object, String name, ", "-                                             final Iterable<? extends Type> typeArgs, ", "-                                             final Iterable<? extends Expression> args,", "-                                             final Option<Type> expected)", "+  public ObjectMethodInvocation lookupMethod(Expression object, String name, ", "+                                             Iterable<? extends Type> typeArgs, ", "+                                             Iterable<? extends Expression> args,", "+                                             Option<Type> expected, Access.Module accessModule)", "-        new MethodFinder(name, false).findSingleMethod(t, typeArgs, args, expected);", "+        new MethodFinder(name, accessModule, false).findSingleMethod(t, typeArgs, args, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a17dd0f758910dafea10fdd944576758", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 249, "methodNumberAfterChange": 250, "signatureBeforeChange": "      public StaticMethodInvocation lookupStaticMethod(Type t, String name,                                                     final Iterable<? extends Type> typeArgs,                                                     final Iterable<? extends Expression> args,                                                    final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "      public StaticMethodInvocation lookupStaticMethod(Type t, String name,                                                     Iterable<? extends Type> typeArgs,                                                     Iterable<? extends Expression> args,                                                    Option<Type> expected, Access.Module accessModule)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-                                                   final Iterable<? extends Type> typeArgs, ", "-                                                   final Iterable<? extends Expression> args,", "-                                                   final Option<Type> expected)", "+                                                   Iterable<? extends Type> typeArgs, ", "+                                                   Iterable<? extends Expression> args,", "+                                                   Option<Type> expected, Access.Module accessModule)", "-        new MethodFinder(name, true).findSingleMethod(t, typeArgs, args, expected);", "+        new MethodFinder(name, accessModule, true).findSingleMethod(t, typeArgs, args, expected);"]}], "num": 19686}
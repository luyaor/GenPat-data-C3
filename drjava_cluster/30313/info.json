{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5489cc909d616e070532e892fa9fcec", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7e204c773272897287f21fae81d1b5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 436, "methodNumberAfterChange": 436, "signatureBeforeChange": "\r \r   public void forGreaterThanExpression(GreaterThanExpression that)", "signatureAfterChange": "    public void forGreaterThanExpression(GreaterThanExpression that)", "diff": ["-\r", "-  public void forGreaterThanExpression(GreaterThanExpression that) {\r", "-    forGreaterThanExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forGreaterThanExpressionOnly(that);\r", "-  }\r", "+", "+  public void forGreaterThanExpression(GreaterThanExpression that) {", "+    forGreaterThanExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forGreaterThanExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d807f14f967598de2750df26b7d8768d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 438, "methodNumberAfterChange": 438, "signatureBeforeChange": "\r \r   public void forLeftShiftExpression(LeftShiftExpression that)", "signatureAfterChange": "    public void forLeftShiftExpression(LeftShiftExpression that)", "diff": ["-\r", "-  public void forLeftShiftExpression(LeftShiftExpression that) {\r", "-    forLeftShiftExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forLeftShiftExpressionOnly(that);\r", "-  }\r", "+", "+  public void forLeftShiftExpression(LeftShiftExpression that) {", "+    forLeftShiftExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forLeftShiftExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2e81f407a35755ab69953251615489f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 434, "methodNumberAfterChange": 434, "signatureBeforeChange": "\r \r   public void forLessThanExpression(LessThanExpression that)", "signatureAfterChange": "    public void forLessThanExpression(LessThanExpression that)", "diff": ["-\r", "-  public void forLessThanExpression(LessThanExpression that) {\r", "-    forLessThanExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forLessThanExpressionOnly(that);\r", "-  }\r", "+", "+  public void forLessThanExpression(LessThanExpression that) {", "+    forLessThanExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forLessThanExpressionOnly(that);", "+  }"]}], "num": 30313}
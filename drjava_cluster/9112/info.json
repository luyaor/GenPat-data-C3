{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67bd4b85a941ae50b964c07d5dd84053", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05e13ca239355e6727d8c575476ef6df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "1936e795bc2ab8d34c4602bb0e83d92772acfbeb", "commitAfterChange": "172a137f78cd92204a7df0201baea721bb8f9866", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "     void switchToError(DJError error)", "signatureAfterChange": "     void switchToError(DJError error)", "diff": ["-        try {", "-          java.util.List<OpenDefinitionsDocument> openDocs = model.getProjectDocuments();", "-          ", "+        try {          ", "-          for(OpenDefinitionsDocument doc : openDocs)", "-            if(doc.getFile().equals(error.file()))", "+          for(OpenDefinitionsDocument doc : model.getOpenDefinitionsDocuments()) {", "+            if(doc.getFile().equals(error.file())) {", "-          ", "-          if(!open)", "-            throw new IOException(\"Tried to switch to file not open in project.\");", "-          ", "-          OpenDefinitionsDocument doc = model.getDocumentForFile(error.file());", "-          CompilerErrorModel errorModel = getErrorModel();", "-          ", "-          Position pos = errorModel.getPosition(error); // null if error has no Position", "-//          Utilities.showDebug(\"The position of the error is: \" + pos);", "-          // switch to correct def pane and move caret to error position", "-//          Utilities.showDebug(\"active document being set to \" + doc + \" in ErrorPanel.switchToError\");", "-          ", "-          if (! prevDoc.equals(doc)) {", "-            model.setActiveDocument(doc);", "-            EventQueue.invokeLater(new Runnable() { public void run() { model.addToBrowserHistory(); } });", "-          }", "-          else model.refreshActiveDocument();", "-          ", "-//          Utilities.showDebug(\"setting active document has completed\");", "-          ", "-          DefinitionsPane defPane = _frame.getCurrentDefPane();", "-          ", "-          if (pos != null) {", "-            int errPos = pos.getOffset();", "-            if (errPos >= 0 && errPos <= doc.getLength()) {", "-              defPane.centerViewOnOffset(errPos);", "-              ", "-              /* The folowing fixes a bug where, if two consecutive errors are in the same position, the previous error", "-               * is unhighlighted and the new error is not highlighted because the CaretListener does not act because there", "-               * is no change in caret position. (This is the only place where updateHighlight was called from before) */", "-              defPane.getErrorCaretListener().updateHighlight(errPos);", "+              break;", "-            ", "-          // The following line is a brute force hack that fixed a bug plaguing the DefinitionsPane immediately after a compilation", "-          // with errors.  In some cases (which were consistently reproducible), the DefinitionsPane editing functions would break", "-          // whereby the keystrokes had their usual meaning but incorrect updates were performed in the DefinitionsPane.  For example,", "-          // the display behaved as if the editor were in \"overwrite\" mode.", "+          ", "+          if(open) {", "+            OpenDefinitionsDocument doc = model.getDocumentForFile(error.file());", "+            CompilerErrorModel errorModel = getErrorModel();", "+            ", "+            Position pos = errorModel.getPosition(error); // null if error has no Position", "+//          Utilities.showDebug(\"The position of the error is: \" + pos);", "+            // switch to correct def pane and move caret to error position", "+//          Utilities.showDebug(\"active document being set to \" + doc + \" in ErrorPanel.switchToError\");", "+            ", "+            if (! prevDoc.equals(doc)) {", "+              model.setActiveDocument(doc);", "+              EventQueue.invokeLater(new Runnable() { public void run() { model.addToBrowserHistory(); } });", "+            }", "+            else model.refreshActiveDocument();", "+            ", "+//          Utilities.showDebug(\"setting active document has completed\");", "+            ", "+            DefinitionsPane defPane = _frame.getCurrentDefPane();", "+            ", "+            if (pos != null) {", "+              int errPos = pos.getOffset();", "+              if (errPos >= 0 && errPos <= doc.getLength()) {", "+                defPane.centerViewOnOffset(errPos);", "+                ", "+                /* The folowing fixes a bug where, if two consecutive errors are in the same position, the previous error", "+                 * is unhighlighted and the new error is not highlighted because the CaretListener does not act because there", "+                 * is no change in caret position. (This is the only place where updateHighlight was called from before) */", "+                defPane.getErrorCaretListener().updateHighlight(errPos);", "+              }", "+              ", "+            }", "+            // The following line is a brute force hack that fixed a bug plaguing the DefinitionsPane immediately after a compilation", "+            // with errors.  In some cases (which were consistently reproducible), the DefinitionsPane editing functions would break", "+            // whereby the keystrokes had their usual meaning but incorrect updates were performed in the DefinitionsPane.  For example,", "+            // the display behaved as if the editor were in \"overwrite\" mode.", "-          defPane.requestFocusInWindow();", "-          defPane.getCaret().setVisible(true);", "+            defPane.requestFocusInWindow();", "+            defPane.getCaret().setVisible(true);", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a3c3aa58250eb9ab9a3b16e5d82470", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d012414100e088dfd0a2ea6e642cc05f11fbf32b", "commitAfterChange": "762f9487498790edfa8d7b58c3d83cb6592af447", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": "   private JMenu _setUpFileMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpFileMenu(int mask)", "diff": ["-    }", "-    else", "-      _addMenuItem(fileMenu, _newAction, KEY_NEW_FILE);", "-    ", "-    if (!CodeStatus.DEVELOPMENT) {", "-    else", "+    else {", "+      _addMenuItem(fileMenu, _newAction, KEY_NEW_FILE);", "+    }", "-    else", "+    else {", "+    }", "-    else", "+    else {", "-", "+    }", "-    ", "-    else", "-    _addMenuItem(fileMenu, _closeAction, KEY_CLOSE_FILE);", "+    else {", "+      _addMenuItem(fileMenu, _closeAction, KEY_CLOSE_FILE);", "+    }", "-", "-    ", "-    }", "-    else", "-      _addMenuItem(fileMenu, _printPreviewAction, KEY_PRINT_PREVIEW);", "-    ", "-    if (!CodeStatus.DEVELOPMENT) {", "-    else", "+    else {", "+      _addMenuItem(fileMenu, _printPreviewAction, KEY_PRINT_PREVIEW);", "+    }", "+      ", "-    ", "-    else", "+    else {", "+    }"]}], "num": 9112}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8096df9d9dac662e1830eb6c538565d4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a8eaac8942694ba67eb5bdb5fbbacf3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "55ffd5d461fa009444744f2527631191c6f9decc", "commitAfterChange": "0fed03351fa05790a48229380b62c5e4589b0332", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 83, "signatureBeforeChange": "   protected void renameFileForPath(File prev, TreePath tp)", "signatureAfterChange": "   protected void renameFileForPath(FileDisplay originalDisplay, TreePath tp)", "diff": ["-  protected void renameFileForPath(File prev, TreePath tp) {", "-    DefaultMutableTreeNode top = (DefaultMutableTreeNode) tp.getLastPathComponent();", "-    ", "-    File f = getFileForTreeNode(top);", "-    if (prev == null) {", "-      try {", "-        f.mkdir();", "-      }", "-      catch (SecurityException se) {", "-        top.removeFromParent(); // undo changes if not renamable", "-      }", "-    }", "-    else if (prev.equals(f)) {", "+  protected void renameFileForPath(FileDisplay originalDisplay, TreePath tp) {    ", "+    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();", "+    File newFile = getFileForTreeNode(node);", "+    if (originalDisplay == null) {", "-    else if (f.equals(prev.getParentFile())) {", "-      top.setUserObject(_fdManager.makeFileDisplay(prev)); // undo changes if not renamable", "+    else if (originalDisplay.isNew()) { // finished process of naming new folder", "+      boolean couldCreate = true;", "+      try {", "+        couldCreate = newFile.mkdir();", "+      }", "+      catch (SecurityException se) { couldCreate = false; }", "+      finally {", "+        if (couldCreate) {", "+          resortNode(node); // resort into tree ", "+          updateChildFiles(node); // propagate to children.", "+          setSelectedDirectory(newFile);", "+        }", "+        else {", "+          String[] errMsg = new String[]{ \"Could not create the new directory\\n\",", "+            \"Please make sure you have sufficient access and that\",", "+            \"a directory does not already exist with the same name\" };", "+          JOptionPane.showMessageDialog(DirectoryChooser.this, errMsg, \"Could Not Create Directory\",", "+                                    JOptionPane.WARNING_MESSAGE);", "+          getModel().removeNodeFromParent(node); // undo changes", "+        }", "+      }", "+    }", "+    else if (originalDisplay.getFile().equals(newFile)) {", "+      return;", "+    }", "+    else if (newFile.equals(originalDisplay.getParentFile())) {", "+      // Error case: this would happen if the last part of the new FileDisplay's path", "+      // was the empty string (i.e. the user entered \"\" into the editor text field).", "+      // newFile.getFile() would return 'new File(parent, \"\")' which would cause newFile ", "+      // to equal prev.getParentFile(). This case is checked and avoided in the FileTextField.", "+      // This clause is here just in case.", "+      node.setUserObject(originalDisplay); // undo changes", "+      resortNode(node); // resort into tree", "+      boolean couldRename = true;", "-        prev.renameTo(f);", "+        couldRename = originalDisplay.getFile().renameTo(newFile);", "-      catch (SecurityException se) {", "-        top.setUserObject(_fdManager.makeFileDisplay(prev)); // undo changes if not renamable", "+      catch (SecurityException se) { couldRename = false; }", "+      finally {", "+        if (couldRename) {", "+          resortNode(node); // resort into tree ", "+          updateChildFiles(node); // propagate to children.", "+          setSelectedDirectory(newFile);", "+        }", "+        else {", "+          String[] errMsg = new String[]{ \"Could not rename this directory\\n\",", "+            \"Please make sure you have sufficient access and that\\n\",", "+            \"a directory does not already exist with the same name\" };", "+          JOptionPane.showMessageDialog(DirectoryChooser.this, errMsg, \"Could Not Rename Directory\",", "+                                    JOptionPane.WARNING_MESSAGE);", "+          node.setUserObject(originalDisplay); // undo changes", "+          resortNode(node); // resort into tree ", "+          updateChildFiles(node); // propagate to children.", "+        }", "-    // resort into tree", "-    resortNode(top);", "-    ", "+            ", "-    ", "-    ", "-    // propagate to children.", "-    updateChildFiles(top);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f83e96c6b1a264fb1ba8b7ede6c43f01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "122a4aca1ff92eaf07930221c018670fe18c314a", "commitAfterChange": "ea58ebfcec38aad3c446138f5dc29fb9b0bd55b4", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 71, "signatureBeforeChange": "   public void tryToDeletePath(TreePath tp)", "signatureAfterChange": "   protected boolean tryToDeletePath(TreePath tp)", "diff": ["-  public void tryToDeletePath(TreePath tp) {", "-    if (!_treeIsGenerated) return;", "-    ", "-    File f = getFileForTreePath(tp);", "-    ", "-    String type = (f.isDirectory() ? \"directory\" : \"file\");", "-    String msg = \"Are you sure you want to delete this \"+type+\"?\";", "-    int res = JOptionPane.showConfirmDialog(DirectoryChooser.this,", "-                                            msg, \"Delete \"+type+\"?\", ", "-                                            JOptionPane.YES_NO_OPTION);", "-    if (res != JOptionPane.YES_OPTION) return;", "-    ", "-    boolean couldDelete = false;", "-    try {", "-      couldDelete = f.delete();", "-    catch (SecurityException e) { }", "-    ", "-    if (couldDelete) {", "-      DefaultMutableTreeNode node = (DefaultMutableTreeNode)tp.getLastPathComponent();", "-      TreeNode parent = node.getParent();", "-      node.removeFromParent();", "-      ((DefaultTreeModel)_tree.getModel()).nodeStructureChanged(parent);", "-    }", "-    else {", "-      String errMsg;", "-      if (f.isDirectory()) {", "-        errMsg = ", "-          \"The directory was unable to be deleted.\\n\"+", "-          \"Directories may only be deleted if they are\\n\"+", "-          \"empty and if there is sufficient access to\\n\"+", "-          \"to the directory.\";", "-      }", "-      else {", "-        errMsg = ", "-          \"The file was unable to be deleted.\\n\"+", "-          \"Make sure you have sufficient permissions.\";", "-      }", "-      JOptionPane.showMessageDialog(DirectoryChooser.this, errMsg, \"Unable to delete\",", "-                                    JOptionPane.WARNING_MESSAGE);", "-    }", "-  }", "+   */", "+  protected boolean tryToDeletePath(TreePath tp) {", "+    if (!_treeIsGenerated) return false;", "+    ", "+    File f = getFileForTreePath(tp);", "+    ", "+    String type = (f.isDirectory() ? \"directory\" : \"file\");", "+    String msg = \"Are you sure you want to delete this \"+type+\"?\";", "+    int res = JOptionPane.showConfirmDialog(DirectoryChooser.this,", "+                                            msg, \"Delete \"+type+\"?\", ", "+                                            JOptionPane.YES_NO_OPTION);", "+    if (res != JOptionPane.YES_OPTION) return false;", "+    ", "+    boolean couldDelete = false;", "+    try {", "+      couldDelete = f.delete();", "+    }", "+    catch (SecurityException e) { }", "+    ", "+    if (couldDelete) {", "+      DefaultMutableTreeNode node = (DefaultMutableTreeNode)tp.getLastPathComponent();", "+      TreeNode parent = node.getParent();", "+      node.removeFromParent();", "+      ((DefaultTreeModel)_tree.getModel()).nodeStructureChanged(parent);", "+      return true;", "+    }", "+    else {", "+      String errMsg;", "+      if (f.isDirectory()) {", "+        errMsg = ", "+          \"The directory was unable to be deleted.\\n\"+", "+          \"Directories may only be deleted if they are\\n\"+", "+          \"empty and if there is sufficient access to\\n\"+", "+          \"to the directory.\";", "+      }", "+      else {", "+        errMsg = ", "+          \"The file was unable to be deleted.\\n\"+", "+          \"Make sure you have sufficient permissions.\";", "+      }", "+      JOptionPane.showMessageDialog(DirectoryChooser.this, errMsg, \"Unable to delete\",", "+                                    JOptionPane.WARNING_MESSAGE);", "+      return false;", "+    }", "+  }"]}], "num": 17102}
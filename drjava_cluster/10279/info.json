{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f90f6714426fa4f4456ab99fc02d9bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fe4086dbc05d42659bd6508f292f419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "e4597735ed480ff103992a6b4edd98783ce62b7c", "commitAfterChange": "c918fda29945e681706734ce52051eaf13078f8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    System.err.println(\"QuestionStartAfterOpenBrace\");", "-", "-    int start = doc.getLineStartPos(doc.getCurrentLocation());", "-    BraceReduction reduced = doc.getReduced();", "-    int origin = reduced.absOffset();", "-    String text;", "-    char c, peek;", "-", "-    try", "-    {", "-\ttext = doc.getText(DefinitionsDocument.DOCSTART, start);", "+    int here = doc.getCurrentLocation();", "+    int origin = doc.getReduced().absOffset();", "+    int lineStart = doc.getLineStartPos(doc.getCurrentLocation());", "+    ", "+    // Get brace for start of line", "+    doc.getReduced().move(lineStart - origin);", "+    IndentInfo info = doc.getReduced().getIndentInformation();", "+    doc.getReduced().move(origin - lineStart);", "+    ", "+    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+        (info.distToBrace < 0)) {", "+      // Precondition not met: we should have a brace", "+      return false;", "-    catch (BadLocationException e)", "-    {", "-\t// Control flow should never reach this point.", "-\tthrow new UnexpectedException(new RuntimeException(e.getMessage()));", "+    int bracePos = lineStart - info.distToBrace;    ", "+    ", "+    // Get brace's end of line", "+    int braceEndLinePos = doc.getLineEndPos(bracePos);", "+    ", "+    // Get position of next non-WS char (not in comments)", "+    int nextNonWS = -1;", "+    try {", "+      nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "-    for (int i = start-1; i >= DefinitionsDocument.DOCSTART; i--)", "-    {", "-\t", "-      c = text.charAt(i);", "-", "-      if (c != ' ' && c != '\\t' && c != '\\n') ", "-      {", "-\t  // c is not a whitespace character.", "-", "-          reduced.move(i - origin);", "-          ReducedModelState state = reduced.getStateAtCurrent();", "-          reduced.move(origin - i);", "-", "-          if (state.equals(ReducedModelState.FREE))", "-\t  {", "-\t      peek = text.charAt(i - 1);", "-", "-\t      if (c == '/' && (peek == '/' || peek == '*'))", "-\t\t  i--;", "-\t      else if (c == '*' && peek == '/')", "-\t\t  i--;", "-\t      else", "-\t\t  return c == '{';", "-\t  }", "-      }", "+    catch (BadLocationException e) {", "+      // This shouldn't happen", "+      throw new UnexpectedException(e);", "-    return false;", "+    ", "+    if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "+      return true;", "+    }", "+    ", "+    return (nextNonWS >= lineStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a246b674cec23063da4096f93aa8cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "0de85ca2b785d7ad489463f9a174133a91014910", "commitAfterChange": "601a464d68d9614b980a0acf64c3c8928b17445c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["+    addIfFile(edu.rice.cs.util.FileOps.getDrJavaFile(), jars); // drjava.jar file itself; check if it's a combined Mint/DrJava jar", "+", "+    // Search for all compound JDK descriptors in the drjava.jar file", "+    Iterable<CompoundJDKDescriptor> descriptors = searchForCompoundJDKDescriptors(); ", "+    for(CompoundJDKDescriptor desc: descriptors) {", "+      // add the specific search directories and files", "+      for(File f: desc.getSearchDirectories()) { addIfDir(f, roots); }", "+      for(File f: desc.getSearchFiles()) { addIfFile(f, jars); }", "+      // add to the set of packages that need to be shadowed", "+      TOOLS_PACKAGES.addAll(desc.getToolsPackages());", "+    }", "+    ", "-    ", "+", "-    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "-    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/soylatte/lib/classes.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/soylatte/lib/tools.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "-    try {", "-      String mint_home = System.getenv(\"MINT_HOME\");", "-      if (mint_home!=null) {", "-        JDKToolsLibrary.msg(\"MINT_HOME environment variable set to: \"+mint_home);", "-        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/classes.jar\"), jars);", "-        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/tools.jar\"), jars);", "-      }", "-      else {", "-        JDKToolsLibrary.msg(\"MINT_HOME not set\");", "-      }", "-    }", "-    catch(Exception e) { /* ignore MINT_HOME variable */ }", "-    addIfFile(edu.rice.cs.util.FileOps.getDrJavaFile(), jars); // drjava.jar file itself; check if it's a combined Mint/DrJava jar", "+//    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "+//    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "+//    addIfFile(new File(\"/usr/local/soylatte/lib/classes.jar\"), jars);", "+//    addIfFile(new File(\"/usr/local/soylatte/lib/tools.jar\"), jars);", "+//    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "+//    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "+//    try {", "+//      String mint_home = System.getenv(\"MINT_HOME\");", "+//      if (mint_home!=null) {", "+//        JDKToolsLibrary.msg(\"MINT_HOME environment variable set to: \"+mint_home);", "+//        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/classes.jar\"), jars);", "+//        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/tools.jar\"), jars);", "+//      }", "+//      else {", "+//        JDKToolsLibrary.msg(\"MINT_HOME not set\");", "+//      }", "+//    }", "+//    catch(Exception e) { /* ignore MINT_HOME variable */ }", "-    Map<FullVersion, Iterable<JarJDKToolsLibrary>> mintResults =", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> compoundResults =", "-        if (v.vendor().equals(JavaVersion.VendorType.COMPOUND)) { mapToAddTo = mintResults; }", "+        if (v.vendor().equals(JavaVersion.VendorType.COMPOUND)) { mapToAddTo = compoundResults; }", "-    Iterable<JarJDKToolsLibrary> mintCollapsed = IterUtil.reverse(IterUtil.collapse(mintResults.values()));", "+    Iterable<JarJDKToolsLibrary> compoundCollapsed = IterUtil.reverse(IterUtil.collapse(compoundResults.values()));", "-    Map<FullVersion, Iterable<JarJDKToolsLibrary>> javaMintResults =", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> allResults =", "-    // now we have the JDK libraries in collapsed and the Mint libraries in mintCollapsed", "-    for(JarJDKToolsLibrary mintLib: mintCollapsed) {", "-      JDKToolsLibrary.msg(\"mintLib: \"+mintLib.version());", "-      JDKToolsLibrary.msg(\"\\t\"+mintLib.location());", "-      FullVersion mintVersion = mintLib.version();", "+    // now we have the JDK libraries in collapsed and the compound libraries in compoundCollapsed", "+    for(JarJDKToolsLibrary compoundLib: compoundCollapsed) {", "+      JDKToolsLibrary.msg(\"compoundLib: \"+compoundLib.version());", "+      JDKToolsLibrary.msg(\"\\t\"+compoundLib.location());", "+      FullVersion compoundVersion = compoundLib.version();", "-      // try to find a JDK in results that matches mintVersion exactly, except for vendor", "+      // try to find a JDK in results that matches compoundVersion exactly, except for vendor", "-        if ((javaVersion.majorVersion().equals(mintVersion.majorVersion())) &&", "-            (javaVersion.maintenance()==mintVersion.maintenance()) &&", "-            (javaVersion.update()==mintVersion.update()) &&", "-            (javaVersion.release()==mintVersion.release())) {", "+        if ((javaVersion.majorVersion().equals(compoundVersion.majorVersion())) &&", "+            (javaVersion.maintenance()==compoundVersion.maintenance()) &&", "+            (javaVersion.update()==compoundVersion.update()) &&", "+            (javaVersion.release()==compoundVersion.release())) {", "-          if (javaVersion.majorVersion().equals(mintVersion.majorVersion())) {", "+          if (javaVersion.majorVersion().equals(compoundVersion.majorVersion())) {", "-      // if we found a JDK, then create a new Mint library", "+      // if we found a JDK, then create a new compound library", "-        JarJDKToolsLibrary lib = makeFromFile(mintLib.location(), model, found.bootClassPath());", "+        JarJDKToolsLibrary lib = makeFromFile(compoundLib.location(), model, found.bootClassPath());", "-          if (javaMintResults.containsKey(v)) { javaMintResults.put(v, IterUtil.compose(lib, javaMintResults.get(v))); }", "-          else { javaMintResults.put(v, IterUtil.singleton(lib)); }", "+          if (allResults.containsKey(v)) { allResults.put(v, IterUtil.compose(lib, allResults.get(v))); }", "+          else { allResults.put(v, IterUtil.singleton(lib)); }", "-      compose(collapsed,IterUtil.reverse(IterUtil.collapse(javaMintResults.values())));", "+      compose(collapsed,IterUtil.reverse(IterUtil.collapse(allResults.values())));"]}], "num": 10279}
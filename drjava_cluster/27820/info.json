{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15609fa7609c4f8e78478c99284d333c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dd99335ccbb799a801cc39f50abd4fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testPackageError()", "signatureAfterChange": "   public void testPackageError()", "diff": ["-   */", "+  /** Test that if a package and a class have the same name, an error is given. */", "-    directory = new File(directory.getAbsolutePath() + \"/shouldBreak/noBreak\");", "-    File[] testFiles = directory.listFiles(new FileFilter() {", "-      public boolean accept(File pathName) {", "-        return pathName.getAbsolutePath().endsWith(\".dj2\");", "-      }});", "-      LanguageLevelConverter llc = new LanguageLevelConverter();", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-      for (int i = 0; i<testFiles.length; i++) {", "-        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "-      }", "+    _log.log(\"Running testPackageError\");", "+    String base = dir1.getAbsolutePath();", "+    dir1 = new File(base + \"/shouldBreak/noBreak\");", "+    dir2 = new File(base + \"/shouldBreak\");", "+        ", "+    File[] files1 = dir1.listFiles(dj2Filter);", "+    File[] files2 = dir2.listFiles(dj2Filter);", "-      ", "+    int len1 = files1.length;", "+    int len2 = files2.length;", "+    File[] testFiles = new File[len1 + len2];", "+    for (int i = 0; i < len1; i++) { testFiles[i] = files1[i]; }", "+    for (int i = 0; i < len2; i++) { testFiles[len1 + i] = files2[i]; }", "+", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3aabedc497b54ea75a6ad38a21a9cd7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r   public void testPackageError()", "signatureAfterChange": "   public void testPackageError()", "diff": ["-   */\r", "-  public void testPackageError() {\r", "-    directory = new File(directory.getAbsolutePath() + \"/shouldBreak/noBreak\");\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".dj2\");\r", "-      }});\r", "-      LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      for (int i = 0; i<testFiles.length; i++) {\r", "-        result = llc.convert(new File[]{testFiles[i]});\r", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());\r", "-      }\r", "-    \r", "-      \r", "-  }\r", "+   */", "+  public void testPackageError() {", "+    directory = new File(directory.getAbsolutePath() + \"/shouldBreak/noBreak\");", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".dj2\");", "+      }});", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      for (int i = 0; i<testFiles.length; i++) {", "+        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+      }", "+    ", "+      ", "+  }"]}], "num": 27820}
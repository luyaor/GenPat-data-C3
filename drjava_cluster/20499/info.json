{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1eb6b74e8cf00d7f2cb0675d6095460a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a29cabf512014b29da7e52684ff1bb4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void testStaticWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public void testStaticWatches() throws Exception", "diff": ["-  public void testStaticWatches()", "-    throws DebugException, BadLocationException, DocumentAdapterException,", "-    IOException, InterruptedException", "-  {", "+  public void testStaticWatches() throws Exception {", "-    ", "-    // Compile the class", "-    File file = new File(_tempDir, \"MonkeyStaticStuff.java\");", "-    OpenDefinitionsDocument doc = doCompile(MONKEY_STATIC_STUFF, file);", "-    ", "-    // Start debugger", "-    synchronized(_notifierLock) {", "-      _debugger.startup();", "-      _waitForNotifies(1);  // startup", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertDebuggerStartedCount(1);", "+    // Start up", "+    OpenDefinitionsDocument doc = _startupDebugger(\"MonkeyStaticStuff.java\",", "+                                                   MONKEY_STATIC_STUFF);", "+    // Set a breakpoint", "-    // Run the foo() method, hitting breakpoint", "+    // Run an inner method, hitting breakpoint", "-    ", "-//    if (printMessages) {", "-//      System.out.println(\"first step\");", "-//    }", "-//    // Step to line 14", "-//    synchronized(_notifierLock){", "-//      _asyncStep(Debugger.STEP_OVER);", "-//      _waitForNotifies(2);  // suspended, updated", "-//      _notifierLock.wait();", "-//    }", "-//    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "-//    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "-//    debugListener.assertThreadLocationUpdatedCount(2);  // fires", "-//    debugListener.assertCurrThreadSuspendedCount(2);  // fires", "-//    debugListener.assertBreakpointReachedCount(1);", "-//    debugListener.assertCurrThreadDiedCount(0);", "-    // Close doc and make sure breakpoints are removed", "-    _model.closeFile(doc);", "-    debugListener.assertBreakpointRemovedCount(1);  //fires (no waiting)", "-    ", "-    // Shutdown the debugger", "-    if (printMessages) {", "-      System.out.println(\"Shutting down...\");", "-    }", "-    InterpretListener interpretListener = new InterpretListener() {", "-       public void interpreterChanged(boolean inProgress) {", "-         // Don't notify: happens in the same thread", "-        interpreterChangedCount++;", "-       }", "-     };", "-    _model.addListener(interpretListener);", "-    synchronized(_notifierLock) {", "-      _debugger.shutdown();", "-      _waitForNotifies(2);  // interactionEnded, shutdown", "-      _notifierLock.wait();", "-    }", "-    interpretListener.assertInteractionEndCount(1);", "-    _model.removeListener(interpretListener);", "-    ", "-    debugListener.assertDebuggerShutdownCount(1);  //fires", "-    if (printMessages) {", "-      System.out.println(\"Shut down.\");", "-    }", "+    // Shut down", "+    _shutdownAndWaitForInteractionEnded();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb393af218be47449198836891d89829", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public synchronized void testMultiThreadedBreakpointsAndStep()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testMultiThreadedBreakpointsAndStep()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-     ", "+    ", "- ", "+    ", "-      _waitForNotifies(1);", "+      _waitForNotifies(1);  // startup", "-    debugListener.assertDebuggerStartedCount(1);", "-    debugListener.assertDebuggerShutdownCount(0);", "-    assertTrue(\"Debug Manager should be ready\", _debugger.isReady());", "-        ", "+    ", "+    // Set breakpoints", "-        ", "-     // Run the main() method, hitting breakpoints", "+    ", "+    // Run the main() method, hitting breakpoints", "-      _waitForNotifies(6);  // suspended, updated, breakpointReached", "+      _waitForNotifies(6);  // (suspended, updated, breakpointReached) x 2", "-     // Resumes the thread finishing it and hitting the next break point", "+    // Resumes one thread, finishing it and switching to the next break point", "-      _asynchResume();", "-      _waitForNotifies(3);  // suspended, updated, currThreadDied", "+      _asyncResume();", "+      _waitForNotifies(3);  // currThreadDied, suspended, updated", "-        ", "+    ", "-    assertTrue(\"testMultiThreadedBreakPoint thread references were equal \", !thread.getName().equals(thread2.getName()));", "-  ", "+    assertTrue(\"testMultiThreadedBreakPoint thread references should not be equal\",", "+               !thread.getName().equals(thread2.getName()));", "+    ", "-     _asynchStep(Debugger.STEP_INTO);", "+      _asyncStep(Debugger.STEP_INTO);", "-    assertTrue(\"testMultiThreadedBreakPoint thread references were not equal \", thread2.getName().equals(thread3.getName()));", "-     _debugger.addListener(debugListener);", "+    assertEquals(\"testMultiThreadedBreakPoint thread references should be equal\",", "+                 thread2.getName(), thread3.getName());", "+    ", "-     InterpretListener interpretListener = new InterpretListener();", "-     _model.addListener(interpretListener);", "-     synchronized(_notifierLock) {", "-       _asynchResume();", "-       _waitForNotifies(3);  // interactionEnded, currThreadDied, interpreterChanged", "-       _notifierLock.wait();", "-     }", "-     interpretListener.assertInteractionEndCount(1);", "-     _model.removeListener(interpretListener);", "-     ", "-    // Close doc and make sure breakpoints are removed", "+    _debugger.addListener(debugListener);", "+    InterpretListener interpretListener = new InterpretListener();", "+    _model.addListener(interpretListener);", "+    synchronized(_notifierLock) {", "+      _asyncResume();", "+      _waitForNotifies(3);  // interactionEnded, currThreadDied, interpreterChanged", "+      _notifierLock.wait();", "+    }", "+    interpretListener.assertInteractionEndCount(1);", "+    _model.removeListener(interpretListener);", "+    ", "+    // Close doc", "-", "+    ", "-", "+    "]}], "num": 20499}
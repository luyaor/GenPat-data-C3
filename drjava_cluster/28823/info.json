{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a0da21d61f1f8fe09aecbcfa2d1d025", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d9fbcbb47dafe70b569fd5392e797e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 170, "signatureBeforeChange": "     public List<OutputStream> value()", "signatureAfterChange": "   public static Tuple ensureSerializable(Tuple t)", "diff": ["-  private static final Thunk<List<OutputStream>> OUTPUT_STREAMS_TO_CLOSE = LazyThunk.make(new Thunk<List<OutputStream>>() {", "-    public List<OutputStream> value() {", "-      // On the first request, register a shutdown hook to clean up the list", "-      Runtime.getRuntime().addShutdownHook(new Thread() {", "-        public void run() {", "-          for (OutputStream out : OUTPUT_STREAMS_TO_CLOSE.value()) {", "-            try { out.close(); }", "-            catch (IOException e) { /* We've made a best effort, and must ignore the exception */ }", "-          }", "-        }", "-      });", "-      return new LinkedList<OutputStream>();", "-    }", "+   */", "+  public static Tuple ensureSerializable(Tuple t) {", "+    if (t instanceof Null) { return t; } // valid because Null is final", "+    else if (t instanceof Wrapper<?>) { return ensureSerializable((Wrapper<?>) t); }", "+    else if (t instanceof Pair<?,?>) { return ensureSerializable((Pair<?,?>) t); }", "+    else if (t instanceof Triple<?,?,?>) { return ensureSerializable((Triple<?,?,?>) t); }", "+    else if (t instanceof Quad<?,?,?,?>) { return ensureSerializable((Quad<?,?,?,?>) t); }", "+    else if (t instanceof Quint<?,?,?,?,?>) { return ensureSerializable((Quint<?,?,?,?,?>) t); }", "+    else if (t instanceof Sextet<?,?,?,?,?,?>) { return ensureSerializable((Sextet<?,?,?,?,?,?>) t); }", "+    else if (t instanceof Septet<?,?,?,?,?,?,?>) { return ensureSerializable((Septet<?,?,?,?,?,?,?>) t); }", "+    else if (t instanceof Octet<?,?,?,?,?,?,?,?>) { return ensureSerializable((Octet<?,?,?,?,?,?,?,?>) t); }", "+    else { throw new IllegalArgumentException(\"Unrecognized tuple type: \" + t.getClass().getName()); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354e817d537c178f05b9c7a8d5deebb5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 163, "signatureBeforeChange": "     public List<InputStream> value()", "signatureAfterChange": "   public static Object ensureSerializable(Object obj)", "diff": ["-  private static final Thunk<List<InputStream>> INPUT_STREAMS_TO_CLOSE = LazyThunk.make(new Thunk<List<InputStream>>() {", "-    public List<InputStream> value() {", "-      // On the first request, register a shutdown hook to clean up the list", "-      Runtime.getRuntime().addShutdownHook(new Thread() {", "-        public void run() {", "-          for (InputStream in : INPUT_STREAMS_TO_CLOSE.value()) {", "-            try { in.close(); }", "-            catch (IOException e) { /* We've made a best effort, and must ignore the exception */ }", "-          }", "-        }", "-      });", "-      return new LinkedList<InputStream>();", "-    }", "+   */", "+  public static Object ensureSerializable(Object obj) {", "+    if (obj == null) { return null; }", "+    else if (SERIALIZABLE_CLASSES.contains(obj.getClass())) { return obj; }", "+    else if (obj instanceof Object[]) { return ensureSerializable((Object[]) obj); }", "+    else if (obj instanceof Iterable<?>) { return ensureSerializable((Iterable<?>) obj); }", "+    else if (obj instanceof Throwable) { return ensureSerializable((Throwable) obj); }", "+    else if (obj instanceof Tuple) { return ensureSerializable((Tuple) obj); }", "+    else { return obj.toString(); }", "+  }"]}], "num": 28823}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7020d1d219b11170bd20cc0eb0dd5449", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf2ba47a9e1c74c2a643416c4b79231", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ToolbarOptionComponent.java", "commitBeforeChange": "aac5f34523ac0f0412292e9d65f671aa46b752f4", "commitAfterChange": "10c44767bf3d5eefd230820d6106fe1ea2534e6f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ToolbarOptionComponent(String title, Frame parent)", "signatureAfterChange": "   public ToolbarOptionComponent(String title, Frame parent)", "diff": ["+    _noneButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        notifyChangeListeners();", "+      }", "+    });", "+    _textButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        notifyChangeListeners();", "+      }", "+    });", "+    _iconsButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        notifyChangeListeners();", "+      }", "+    });", "+    _textAndIconsButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        notifyChangeListeners();", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22e20df5b1cd8acb2f6b5f599f773346", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void testReopenFile() throws BadLocationException, IOException", "signatureAfterChange": "   public void testReopenFile() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestFileIOListener(tempFile);", "+    final TestListener listener = new TestFileIOListener(tempFile);", "-    try {", "-      OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "-      listener.assertOpenCount(1);", "-      listener.assertCloseCount(1);  //  Untitled document closed when doc is opened", "-      assertModified(false, doc);", "-      assertContents(BAR_TEXT, doc);", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);  //  Untitled document closed when doc is opened", "+          assertModified(false, doc);", "+          assertContents(BAR_TEXT, doc);", "+        }", "+        catch (AlreadyOpenException aoe) {", "+          // Should not be open", "+          fail(\"File was already open!\");", "+        }", "+        catch (OperationCanceledException oce) {", "+          // Should not be canceled", "+          fail(\"Open was unexpectedly canceled!\");", "+        }", "+        catch (Exception e) {", "+          // Should not happen", "+          fail(\"Exception thrown in testReopenFile().  Traceback: \" + e);", "+        }", "+      }", "+    });", "-    try {", "-      //OpenDefinitionsDocument doc2 =", "-      _model.openFile(new FileSelector(tempFile));", "-      fail(\"file should already be open\");", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      listener.assertOpenCount(1);", "-      listener.assertCloseCount(1);  ", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          //OpenDefinitionsDocument doc2 =", "+          _model.openFile(new FileSelector(tempFile));", "+          fail(\"file should already be open\");", "+        }", "+        catch (AlreadyOpenException aoe) {", "+          // Should not be opened", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);  ", "+        }", "+        catch (OperationCanceledException oce) {", "+          // Should not be canceled", "+          fail(\"Open was unexpectedly canceled!\");", "+        }", "+        catch (Exception e) {", "+          // Should not happen", "+          fail(\"Exception thrown in testReopenFile().  Traceback: \" + e);", "+        }", "+      }", "+    });", "-    try {", "-      File parent = tempFile.getParentFile();", "-      String dotSlash = \".\" + System.getProperty(\"file.separator\");", "-      parent = new File(parent, dotSlash);", "-      File sameFile = new File(parent, tempFile.getName());", "-      //OpenDefinitionsDocument doc2 =", "-      _model.openFile(new FileSelector(sameFile));", "-      fail(\"file should already be open\");", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      listener.assertOpenCount(1);", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          File parent = tempFile.getParentFile();", "+          String dotSlash = \".\" + System.getProperty(\"file.separator\");", "+          parent = new File(parent, dotSlash);", "+          File sameFile = new File(parent, tempFile.getName());", "+          //OpenDefinitionsDocument doc2 =", "+          _model.openFile(new FileSelector(sameFile));", "+          fail(\"file should already be open\");", "+        }", "+        catch (AlreadyOpenException aoe) {", "+          // Should not be open", "+          listener.assertOpenCount(1);", "+        }", "+        catch (OperationCanceledException oce) {", "+          // Should not be canceled", "+          fail(\"Open was unexpectedly canceled!\");", "+        }", "+        catch (Exception e) {", "+          // Should not happen", "+          fail(\"Exception thrown in testReopenFile().  Traceback: \" + e);", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57994452ae77c0b1f8226ebdcd2363c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/swing/SwingWorker.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public SwingWorker()", "signatureAfterChange": "      public SwingWorker()", "diff": ["-    Thunk<T> task = new Thunk<T>() {", "-      public T value() {", "-        try { return doInBackground(); }", "-        catch (Throwable t) { throw new WrappedException(t); }", "-        finally {", "-          SwingUtilities.invokeLater(new Runnable() {", "-            public void run() { done(); }", "-          });", "-        }", "+    super();", "+    _continueMonitor = new CompletionMonitor(false);", "+    _workerThread = new Thread(\"SwingWorker\") {", "+      public void run() {", "+        started();", "+        try { finishedCleanly(doInBackground()); }", "+        catch (InterruptedException e) { stopped(); }", "+        catch (Exception e) { finishedWithTaskException(e); }", "+        catch (Throwable t) { finishedWithImplementationException(new WrappedException(t)); }", "-    _controller = ConcurrentUtil.computeInProcess(task, false);", "-    _cancelled = false;", "+    finishListeners().add(new Runnable() {", "+      public void run() {", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() { done(); }", "+        });", "+      }", "+    });", "+    // Defined as a stand-alone class in order to simplify self-references.", "+    class IntermediateListener implements Runnable1<I> {", "+      public void run(I val) {", "+        intermediateListeners().remove(this); // don't respond again until the Swing task runs", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            List<I> vals = new LinkedList<I>();", "+            // add listener before drain to ensure a concurrent write isn't missed", "+            intermediateListeners().add(IntermediateListener.this);", "+            intermediateQueue().drainTo(vals);", "+            process(vals);", "+          }", "+        });", "+      }", "+    }", "+    intermediateListeners().add(new IntermediateListener());"]}], "num": 29966}
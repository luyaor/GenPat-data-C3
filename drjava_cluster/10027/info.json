{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4745cf97fc1c3957b6a29ca39fcef71", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4102573187aec06afbadfd01dfc22fe7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "6d23d799552cf55313f22433cb12915906b19690", "commitAfterChange": "8a04e8e94a35e432777ebd444cf5fc70868fe9e4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public int findPrevDelimiter(int pos, char[] delims) throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "diff": ["-    ", "+   */", "+  public int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)", "+    throws BadLocationException", "+  {", "-", "+    ", "-          if((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-             (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) ||", "-             (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_SINGLE_QUOTE)) ||", "-             (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_DOUBLE_QUOTE))) {", "-\t    // Ignore matching char", "-\t  } else {", "-\t    // Return position of matching char", "-\t    _reduced.move(origLocation - i);", "-\t    return i;", "-\t  }", "+          ReducedModelState state = _reduced.getStateAtCurrent();", "+          if((state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+             (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) ||", "+             (state.equals(ReducedModelState.INSIDE_SINGLE_QUOTE)) ||", "+             (state.equals(ReducedModelState.INSIDE_DOUBLE_QUOTE))) {", "+               // Ignore matching char", "+             } else {", "+               // Found a matching char, check if we should ignore it", "+               if (skipParenPhrases && posInParenPhrase(i)) {", "+                 // In a paren phrase, so ignore", "+               }", "+               else {", "+                 // Return position of matching char", "+                 _reduced.move(origLocation - i);", "+                 return i;", "+               }", "+             }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b2356eae590be670f80c80ef5e83d18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "commitAfterChange": "0d293f065df295b40875d176fa985aae8404680f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public int findPrevDelimiter(int pos, char[] delims) throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(int pos, char[] delims) throws BadLocationException", "diff": ["+    final int origLocation = _reduced.absOffset();", "-    _reduced.move(pos - _currentLocation);", "+    _reduced.move(pos - origLocation);", "- if (c == delims[j]) {", "-   // Move reduced model to walker's location", "-   _reduced.move(i - pos);", "-   // Check if matching char is in comment or quotes", "-   if((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-      (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) ||", "-      (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_SINGLE_QUOTE)) ||", "-      (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_DOUBLE_QUOTE))) {", "-     // Ignore matching char", "-   } else {", "-     // Return position of matching char", "-     _reduced.move(_currentLocation - i);", "-     return i;", "-   }", "-   _reduced.move(pos - i);", "- }", "+        if (c == delims[j]) {", "+          // Move reduced model to walker's location", "+          _reduced.move(i - pos);", "+          // Check if matching char is in comment or quotes", "+          if((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+             (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) ||", "+             (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_SINGLE_QUOTE)) ||", "+             (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_DOUBLE_QUOTE))) {", "+               // Ignore matching char", "+             } else {", "+               // Return position of matching char", "+               _reduced.move(origLocation - i);", "+               return i;", "+             }", "+          _reduced.move(pos - i);", "+        }", "-    _reduced.move(_currentLocation - pos);", "+    _reduced.move(origLocation - pos);"]}], "num": 10027}
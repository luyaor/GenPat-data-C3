{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0920922fd68f0c18c8b0a6c4e0a042d1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35841a70f31622252c8e9a9f18697255", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      private void compileField(final FieldDeclaration ast)", "signatureAfterChange": "      private void compileField(final FieldDeclaration ast, boolean isInterface)", "diff": ["-  private void compileField(final FieldDeclaration ast) {", "-    final boolean isStatic = Modifier.isStatic(ast.getAccessFlags());", "+  private void compileField(final FieldDeclaration ast, boolean isInterface) {", "+    int access = ast.getAccessFlags();", "+    if (isInterface) { access = defaultToPublicAccess(access) | Modifier.STATIC | Modifier.FINAL; }", "+    final boolean isStatic = Modifier.isStatic(access);", "-    _classWriter.visitField(ast.getAccessFlags(), ast.getName(), typeDescriptor(t), typeSignature(t),", "+    _classWriter.visitField(access, ast.getName(), typeDescriptor(t), typeSignature(t),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "429d0244eb4b901c9c10ad6d8ef4ae29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      private void compileMethod(MethodDeclaration ast)", "signatureAfterChange": "      private void compileMethod(MethodDeclaration ast, boolean isInterface)", "diff": ["-  private void compileMethod(MethodDeclaration ast) {", "+  private void compileMethod(MethodDeclaration ast, boolean isInterface) {", "+    int access = ast.getAccessFlags();", "+    if (isInterface) { access = defaultToPublicAccess(access) | Modifier.ABSTRACT; }", "-    boolean isStatic = Modifier.isStatic(ast.getAccessFlags());", "+    boolean isStatic = Modifier.isStatic(access);", "-    final MethodVisitor mv = _classWriter.visitMethod(ast.getAccessFlags(), ast.getName(), methodDescriptor,", "+    final MethodVisitor mv = _classWriter.visitMethod(access, ast.getName(), methodDescriptor,", "-    if (!Modifier.isAbstract(ast.getAccessFlags())) {", "+    if (!Modifier.isAbstract(access)) {", "-        @Override public void forClassType(ClassType t) { mv.visitInsn(ARETURN); }", "+        @Override public void forReferenceType(ReferenceType t) { mv.visitInsn(ARETURN); }"]}], "num": 1145}
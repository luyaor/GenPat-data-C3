{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ac5e3383c74ad1cb3a24fcdae772569", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34480df5cf302201aca47fd3146d4a58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 65, "signatureBeforeChange": "       public V setValue(V value)", "signatureAfterChange": "   public static <K, V> SingletonMap<K, V> singletonMap(K key, V value)", "diff": ["+  /** Create an immutable singleton map. Similar to {@link Collections#singletonMap}, but produces a LambdaMap. */", "+  public static <K, V> SingletonMap<K, V> singletonMap(K key, V value) {", "+    return new SingletonMap<K, V>(key, value);", "+  }", "-      public V getValue() { return map.get(key); }", "-      public V setValue(V value) { return map.put(key, value); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a940136c8ffdace392984b38af3c4668", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "       public int hashCode()", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public static <K extends Comparable<? super K>, V> Thunk<Map<K, V>> treeMapFactory()", "diff": ["+   */", "+  @SuppressWarnings(\"unchecked\")", "+  public static <K extends Comparable<? super K>, V> Thunk<Map<K, V>> treeMapFactory() {", "+    // not sure why the weakening cast is necessary here but not elsewhere", "+    return (Thunk<Map<K, V>>) (Thunk<? extends Map<?, ?>>) DefaultTreeMapFactory.INSTANCE;", "+  }", "-      }", "-      public int hashCode() {", "-        V val = map.get(key);", "-        return (key == null ? 0 : key.hashCode()) ^ (val == null ? 0 : val.hashCode());", "-      }"]}], "num": 27493}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c37ead661d0103de598f07243d4bfcb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04238b822a7fbc22bcb5df442d2d64a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "328f627f0b6ac099c1b27f12b1572d901deb00c4", "commitAfterChange": "8907059ef43f15e7b338686159e3333fd997b238", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public int replaceAll(ContinueCommand startFromTop)", "signatureAfterChange": "      public int replaceAll()", "diff": ["-  public int replaceAll(ContinueCommand startFromTop) {", "+  public int replaceAll() {", "-    try {", "-      Position midpoint = _doc.createPosition(_current.getOffset());", "-      count += _replaceAllWithinBounds(_current, _doc.getEndPosition());", "-      if (startFromTop.shouldContinue()) {", "-        _current = _doc.getStartPosition();", "-        count += _replaceAllWithinBounds(_current, midpoint);", "-      }", "-      return count;", "-    }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "-  }", "+    int found = findNext().getFoundOffset();", "+      found = findNext().getFoundOffset();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36f0b64fdde498e8eacb260c53adbf67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/FileOptionComponent.java", "commitBeforeChange": "85538cb484722f3ee8b8f52d4f19defc02bd67d5", "commitAfterChange": "ec727abc662388138ad4bf94694974ef5e13db3c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void chooseFile()", "signatureAfterChange": "       public void chooseFile()", "diff": ["-    String workDir = DrJava.CONFIG.getSetting(WORKING_DIRECTORY).toString();", "-    if ((workDir == null) || (workDir.equals(\"\"))) {", "-      workDir = System.getProperty(\"user.dir\");", "+", "+    if (_newFile != FileOption.NULL_FILE && _newFile.getParent() != null) {", "+      _jfc.setCurrentDirectory( new File(_newFile.getParent()));", "-    JFileChooser jfc = new JFileChooser(workDir);", "-    jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);", "+    ", "+    _jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);", "-    int returnValue = jfc.showDialog(_parent,", "+    int returnValue = _jfc.showDialog(_parent,", "-      c = jfc.getSelectedFile();", "+      c = _jfc.getSelectedFile();", "-      _updateButton(_newFile);", "+      _updateTextField(_newFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c5e6ddf89337b592fe57cc80df5f67e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "diff": ["-    File file;", "-    try                           { file = doc.getFile(); } ", "-    catch(FileMovedException fme) { file = fme.getFile(); }", "-    ", "-    String path = \"\";", "-    try { path = file.getCanonicalPath(); }", "-    catch(IOException e) { throw new UnexpectedException(e); }", "+    File file = doc.getRawFile();", "+    if (file == null) return;  // Should never happen unless doc is Untitled.", "+    String path = FileOps.getCanonicalPath(file);", "-        try { ", "-          if (it.next().getCanonicalPath().equals(path)) {", "-            it.remove();", "-            setProjectChanged(true);", "-            break;", "-          }", "-        } ", "-        catch(IOException e) { /* Ignore f */ }", "-      }", "+        if (path.equals(FileOps.getCanonicalPath(it.next()))) {", "+          it.remove();", "+          setProjectChanged(true);", "+          break;", "+        }", "+      } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a4dcb76cb7cdc863e756ff7b3ee0506", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "         public void removeDoc(OpenDefinitionsDocument odd)", "signatureAfterChange": "   private synchronized void remove(DocManager toRemove)", "diff": ["-  ", "-  public void removeDoc(OpenDefinitionsDocument odd){", "-    Pair<DefinitionsDocument,DDReconstructor> pair = table.remove(odd);", "-    if(pair.getFirst() != null){", "-//      pair.getSecond().saveDocInfo(pair.getFirst());", "-      pair.getFirst().close();", "-    }", "-    synchronized(lru) {", "-      lru.remove(odd);", "-    }", "-  }", "+   */", "+  private synchronized void remove(DocManager toRemove) {", "+    _lru.remove(toRemove);", "+    if (toRemove.isFirst()) {", "+      toRemove.setOut();", "+    }", "+    if (_lru.size() > 0 )", "+      _lru.getFirst().setFirst(); // just in case the one removed was first"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab92c1cc34b32a2a62d77f881d734161", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/History.java", "commitBeforeChange": "f50373a63f9f9d9922c2e62974843c1ad9a43aac", "commitAfterChange": "e23022134509d45381ef930935988636cfbc7d79", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void writeToFile(FileSaveSelector selector) throws IOException", "signatureAfterChange": "   public void writeToFile(FileSaveSelector selector, String editedVersion) throws IOException", "diff": ["-  public void writeToFile(FileSaveSelector selector) throws IOException {", "+  public void writeToFile(FileSaveSelector selector, String editedVersion) throws IOException {", "+    ", "-      return;", "-      // don't need to do anything", "+      return; // don't need to do anything", "-      if (c.getName().indexOf('.') == -1)", "-        c = new File(c.getAbsolutePath() + \".hist\");", "-      try {", "+\tif (c.getName().indexOf('.') == -1)", "+\t    c = new File(c.getAbsolutePath() + \".\" +", "+\t\t\t InteractionsHistoryFilter.HIST_EXTENSION);", "-        String currString;", "-        for (int i = 0; i < size(); i++) {", "-          currString = _vector.elementAt(i);", "-          currString.trim();", "-          bw.write(currString, 0, currString.length());", "-          bw.newLine();", "-        }", "+\tif (editedVersion == null)", "+\t    editedVersion = getHistoryAsStringWithSemicolons();", "+ \tbw.write(HISTORY_FORMAT_VERSION_2 + editedVersion, 0, HISTORY_FORMAT_VERSION_2.length() + editedVersion.length());", "-      }", "-      catch (IOException ioe) {/*JOptionPane.showMessageDialog(null,", "-                                  \"An IOException has occured\" + \"\\n\" + ioe,", "-                                  \"IOException\",", "-                                  JOptionPane.ERROR_MESSAGE);}*/", "-        throw new IOException(\"An error occured writing the history to a file\");", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b069811204b5bdfd1679cea3b16bd475", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     @Override public Type visit(ObjectMethodCall node)", "signatureAfterChange": "     @Override public Type visit(ObjectMethodCall node)", "diff": ["-          Expression translation;", "-          if (node instanceof PolymorphicObjectMethodCall) {", "-            translation =", "-              new PolymorphicStaticMethodCall((ReferenceTypeName) resolved, node.getMethodName(), node.getArguments(),", "-                                              ((PolymorphicObjectMethodCall) node).getTypeArguments(),", "-                                              node.getSourceInfo());", "-          }", "-          else {", "-            translation = new StaticMethodCall((ReferenceTypeName) resolved, node.getMethodName(),", "-                                               node.getArguments(), node.getSourceInfo());", "-          }", "+          Expression translation = new StaticMethodCall((ReferenceTypeName) resolved, node.getTypeArgs(),", "+                                                        node.getMethodName(), node.getArguments(),", "+                                                        node.getSourceInfo());", "-      ", "-      Iterable<Type> targs = IterUtil.empty();", "-      if (node instanceof PolymorphicObjectMethodCall) {", "-        targs = checkTypeNameList(((PolymorphicObjectMethodCall) node).getTypeArguments());", "-      }", "+      Iterable<Type> targs = checkTypeNameList(node.getTypeArgs().unwrap(Collections.<TypeName>emptyList())); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b96b87c14f19a35b1e6a6acb1d0aa200", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "   public void _toggleBookmark(int pos1, int pos2)", "signatureAfterChange": "   public void _toggleBookmark(int pos1, int pos2)", "diff": ["-", "+    ", "-    try {", "-      final RegionManager<OrderedDocumentRegion> rm = getBookmarkManager();", "-      ", "-      // Check for match against existing bookmark and remove if present; find rightmost region containing selection", "-      OrderedDocumentRegion match = rm.getRegionContaining(doc, startSel, endSel);", "-      if (match != null) {", "-        rm.removeRegion(match);", "-        return;", "-      }", "-      ", "-      // No match against existing bookmark", "-      if (startSel == endSel) {  // offset only; no selection", "-        endSel = doc._getLineEndPos(startSel);", "-        startSel = doc._getLineStartPos(startSel);", "-      }", "-      final Position startPos = doc.createPosition(startSel);", "-      final Position endPos = doc.createPosition(endSel);", "-      ", "-      OrderedDocumentRegion r = new DocumentRegion(doc, startPos, endPos);", "-//      Utilities.show(\"Adding bookmark \" + r);", "-      rm.addRegion(r);", "+//    try {", "+    RegionManager<OrderedDocumentRegion> bm = _bookmarkManager;", "+    if (startSel == endSel) {  // offset only; bookmark the entire line", "+      endSel = doc._getLineEndPos(startSel);", "+      startSel = doc._getLineStartPos(startSel);", "-//    catch (FileMovedException fme) { throw new UnexpectedException(fme); }", "-    catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+    ", "+    Collection<OrderedDocumentRegion> conflictingRegions = bm.getRegionsOverlapping(doc, startSel, endSel);", "+    ", "+    if (conflictingRegions.size() > 0) {", "+      for (OrderedDocumentRegion cr: conflictingRegions) bm.removeRegion(cr);", "+    }", "+    else {", "+", "+      OrderedDocumentRegion newR = new DocumentRegion(doc, startSel, endSel);", "+      bm.addRegion(newR);", "+    }", "+//    }", "+//    catch (BadLocationException ble) { throw new UnexpectedException(ble); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc22a4697f8a649a0bee23d626b72e33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public static boolean classLoadersCanFindDebugger()", "signatureAfterChange": "   public static boolean classLoadersCanFind(String className)", "diff": ["+   */", "+  public static boolean classLoadersCanFind(String className) {", "+    // First check the specified location", "+    File jar = getConfig().getSetting(JAVAC_LOCATION);", "+    if (jar != FileOption.NULL_FILE) {", "+      try {", "+        URL[] urls = new URL[] { jar.toURL() };", "+        URLClassLoader loader = new URLClassLoader(urls);", "+        if (canLoad(loader, className)) return true;", "+      }", "+      catch(MalformedURLException e) { /* fall through */ }", "+    }", "+    return canLoad(_toolsLoader, className);", "+  }", "-   */", "-  public static boolean classLoadersCanFindDebugger() {", "-    // First check the specified location", "-    File jar = getConfig().getSetting(JAVAC_LOCATION);", "-    if (jar != FileOption.NULL_FILE) {", "-      try {", "-        URL[] urls = new URL[] { jar.toURL() };", "-        URLClassLoader loader = new URLClassLoader(urls);", "-        loader.loadClass(TEST_DEBUGGER_CLASS);", "-        return true;", "-      }", "-      catch (ClassNotFoundException e) {", "-        // no debugger in this jar file; try ToolsJarClasLoader", "-      }", "-      catch (UnsupportedClassVersionError ucve) {", "-        return false;", "-      }", "-      catch (MalformedURLException e) {", "-        // specified jar invalid; try ToolsJarClassLoader", "-      }", "-    }", "-", "-    // If not, try to guess tools.jar location", "-    ToolsJarClassLoader loader = new ToolsJarClassLoader();", "-    try {", "-      loader.loadClass(TEST_DEBUGGER_CLASS);", "-      return true;", "-    }", "-    catch (ClassNotFoundException cnfe) { return false; }", "-    catch (UnsupportedClassVersionError ucve) { return false; }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed1fd3b1c411f6cbc246291b403fb6ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "c7a49752433e44464dd071fad0e4665a166a6ab9", "commitAfterChange": "107fa8349165ba7d9ae39eaeec1028249c6a8a48", "methodNumberBeforeChange": 496, "methodNumberAfterChange": 496, "signatureBeforeChange": "   void debuggerAutomaticTrace()", "signatureAfterChange": "   void debuggerAutomaticTrace()", "diff": ["-        String rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "+        int rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "-        if(!rate.equals(\"\")) ", "-          AUTO_STEP_RATE = Integer.parseInt(rate);", "-        ", "-        _automaticTraceTimer = new Timer(AUTO_STEP_RATE, new ActionListener() {", "+        _automaticTraceTimer = new Timer(rate, new ActionListener() {", "-            try { //System.out.println(\"_automaticTraceTimer.actionPerformed \"+System.identityHashCode(a[0]));", "-              _model.getDebugger().automaticTrace(); }", "-            catch (IllegalStateException ise) {", "-              // This may happen if the user if stepping very frequently,", "-              // and is even more likely if they are using both hotkeys", "-              // and UI buttons. Ignore it in this case.", "-              // Hopefully, there are no other situations where", "-              // the user can be trying to step while there are no", "-              // suspended threads.", "-            }", "-            catch (DebugException de) {", "-              _showError(de, \"Debugger Error\",", "-                         \"Could not create a step request.\");", "+            if (_model.getDebugger().isAutomaticTraceEnabled()) {", "+              // hasn't been disabled in the meantime", "+              debuggerStep(Debugger.StepType.STEP_INTO);", "-        _automaticTraceTimer.setRepeats(false); ", "-        _model.getDebugger().automaticTrace(); ", "-        _model.getDebugger().enableAutomaticTrace();", "+        _automaticTraceTimer.setRepeats(false);", "+        _model.getDebugger().setAutomaticTraceEnabled(true);", "+        debuggerStep(Debugger.StepType.STEP_INTO);", "-      }", "-      catch (DebugException de) {", "-        _showError(de, \"Debugger Error\",", "-                   \"Could not create a step request.\");"]}], "num": 13895}
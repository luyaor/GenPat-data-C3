{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec6977cb1d10cacc6c7c56cdf7e2e8b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8acd1f078827d2cda12a0c3e584738f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/BrowserHistoryManager.java", "commitBeforeChange": "7abad9d4d237e1759bd098868c3fc80eb6e4365f", "commitAfterChange": "dcd05db97717868f3a1bba07cb5b1b9106d93c65", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier)", "signatureAfterChange": "   public void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier)", "diff": ["+    * @param r the DocumentRegion to be inserted into the manager */", "+  public void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier) { ", "+    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();", "-  ", "-  public void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier) {", "-    ", "-/* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();", "-    ", "-//    Utilities.show(\"addBrowserRegion(\" + r + \") called with regions = \" + _regions + \" and current = \" + _current);", "-    if (_current != null) {", "-      // flush the stack of regions above _current", "-//      Utilities.show(\"Flushing elements above current = \" + _current);", "-      SortedSet<BrowserDocumentRegion> tail = _regions.tailSet(_current); ", "-//      Utilities.show(\"Tail set above current is \" + tail);", "-      Iterator<BrowserDocumentRegion> it = tail.iterator();", "-      if (it.hasNext()) {", "-        BrowserDocumentRegion nr = it.next();  // skip over current", "-        assert nr == _current;", "-//        System.err.println(\"Skipped \" + nr.getDocument().getLineOfOffset(nr.getStartOffset()));", "-      }", "-      while (it.hasNext()) { ", "-        it.next(); ", "-        it.remove(); ", "-//        System.err.println(\"Removed \" + nr.getDocument().getLineOfOffset(nr.getStartOffset()));", "-      }", "+    final BrowserDocumentRegion current = getCurrentRegion();", "+    if ((current!=null) && (similarRegions(current, r))) {", "+      // the region to be added is similar to the current region", "+      // just update the current region", "+//      edu.rice.cs.drjava.ui.MainFrame.MFLOG.log(\"Updating instead of adding: \"+current+\" --> \"+r);", "+      current.update(r);", "-//    Utilities.show(\"Before adding, regions = \" + _regions);", "-    _current = r;", "-    ", "-    _regions.add(r);", "-    r.getDocument().addBrowserRegion(r);", "-    ", "-    // Notify listeners of this event", "-    Utilities.invokeLater(new Runnable() { ", "-      public void run() {", "-        _lock.startRead();", "-        try { for (RegionManagerListener<BrowserDocumentRegion> l: _listeners) { l.regionAdded(r); } } ", "-        finally { _lock.endRead(); }", "-      } ", "-    });", "-    ", "-    // remove a region if necessary", "-    shrinkManager();", "+    else {", "+      _pastRegions.push(r);", "+      r.getDocument().addBrowserRegion(r);", "+      ", "+      // Notify listeners of this event", "+      Utilities.invokeLater(new Runnable() { ", "+        public void run() {", "+          _lock.startRead();", "+          try { for (RegionManagerListener<BrowserDocumentRegion> l: _listeners) { l.regionAdded(r); } } ", "+          finally { _lock.endRead(); }", "+        } ", "+      });", "+      ", "+      // remove a region if necessary", "+      shrinkManager();", "+    }", "+    notifier.browserChanged();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "921f1dacb7b15fd3c91416cdebfc1b60", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "         protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "      private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-  ", "-  protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests){", "-    synchronized (_compilerModel) {", "-      // if a test is running, don't start another one, but make sure someone's not", "-      // trying to notify that the previous test had finished.", "-      synchronized(_notifier) {", "-        if (_isTestInProgress) return;", "+  private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests) {", "+    // if a test is running, don't start another one, but make sure someone's not", "+    // trying to notify that the previous test had finished.", "+    ", "+    synchronized(this) { if (_isTestInProgress) return; }", "+    ", "+    //reset the JUnitErrorModel, fixes bug #907211 \"Test Failures Not Cleared Properly\".", "+    _junitErrorModel = new JUnitErrorModel(new JUnitError[0], null, false);", "+    ", "+    HashMap<String,OpenDefinitionsDocument> classNamesToODDs =", "+      new HashMap<String,OpenDefinitionsDocument>();", "+    ArrayList<String> classNames = new ArrayList<String>();", "+    ArrayList<File> files = new ArrayList<File>();", "+    ", "+    // start here.", "+    File builtDir = _model.getBuildDirectory();", "+    LinkedList<File> classDirs = new LinkedList<File>();", "+    LinkedList<File> sourceFiles = new LinkedList<File>();", "+    ", "+    //Gets system classpaths from the main JVM so that junit tests can find every class file.", "+    //Given as one long String, this separates the paths into a list of strings. 3/12/05", "+    LinkedList<String> classpaths = new LinkedList<String>();", "+    String cpString = getClasspath().toString();", "+    int cpLength = cpString.length();", "+    if (cpString.indexOf(File.pathSeparatorChar) == -1 && cpLength > 0) classpaths.add(cpString);", "+    else {", "+      int cpIndex;", "+      while ((cpIndex = cpString.indexOf(File.pathSeparatorChar)) != -1 && cpLength != 1) {", "+        if (cpIndex == 0) cpString = cpString.substring(1, cpLength);", "+        else {", "+          classpaths.add(cpString.substring(0, cpIndex));", "+          cpString = cpString.substring(cpIndex, cpLength-1);", "+          cpLength = cpString.length();", "+        }", "+      }", "+    }", "+      ", "+    //First adds the default document build directory to the class directories.", "+    for (OpenDefinitionsDocument doc: lod) {", "+      try {", "+        String packageName;", "+        try { packageName = doc.getPackageName(); }", "+        catch(InvalidPackageException e) { packageName = \"\"; }", "+        packageName = packageName.replace('.', File.separatorChar);", "+        ", "+        // Keep a record of unique built directories", "+        if (builtDir == null) builtDir = doc.getSourceRoot();", "+        File temp = new File(builtDir.getCanonicalPath() + File.separator + packageName);", "+        if (!classDirs.contains(temp)) classDirs.add(temp);", "-      //reset the JUnitErrorModel, fixes bug #907211 \"Test Failures Not Cleared Properly\".", "-      _junitErrorModel = new JUnitErrorModel(new JUnitError[0], null, false);", "-      ", "-      //        _getter.getDefinitionsDocuments().iterator();", "-      HashMap<String,OpenDefinitionsDocument> classNamesToODDs =", "-        new HashMap<String,OpenDefinitionsDocument>();", "-      ArrayList<String> classNames = new ArrayList<String>();", "-      ArrayList<File> files = new ArrayList<File>();", "-      ", "-      // start here.", "-      Iterator<OpenDefinitionsDocument> it = lod.iterator();", "-      File builtDir = _model.getBuildDirectory();", "-      LinkedList<File> classDirs = new LinkedList<File>();", "-      LinkedList<File> sourceFiles = new LinkedList<File>();", "-      ", "-      //Gets system classpaths from the main JVM so that junit tests can find every class file.", "-      //Given as one long String, this separates the paths into a list of strings. 3/12/05", "-      LinkedList<String> classpaths = new LinkedList<String>();", "-      String cpString = _jvm.getClasspath().toString();", "-      int cpLength = cpString.length();", "-      if (cpString.indexOf(File.pathSeparatorChar) == -1 && cpLength > 0) {", "-        classpaths.add(cpString);", "-      }", "-      else {", "-        int cpIndex;", "-        while ((cpIndex = cpString.indexOf(File.pathSeparatorChar)) != -1 && cpLength != 1) {", "-          if (cpIndex == 0) cpString = cpString.substring(1, cpLength);", "-          else {", "-            classpaths.add(cpString.substring(0, cpIndex));", "-            cpString = cpString.substring(cpIndex, cpLength-1);", "-            cpLength = cpString.length();", "+      catch(IOException e) { /* do nothing b/c the directory doesn't exist */ }", "+      catch(InvalidPackageException e) { /* do nothing, b/c it's package is bogus */ }", "+    }", "+    ", "+    // Next, add the JVM class paths to the class directories.", "+    // Junit will look here if the default build directories don't have the desired classes.", "+    // TODO: fuse this loop with the preceding one", "+   for (OpenDefinitionsDocument doc: lod) {", "+      try {", "+        String packageName;", "+        try { packageName = doc.getPackageName(); }", "+        catch(InvalidPackageException e) { packageName = \"\";}", "+        packageName = packageName.replace('.', File.separatorChar);", "+        ", "+        //Add unique classpaths to the list of class directories that junit tests look through. 3/12/05", "+        for (String classpath: classpaths) {", "+          File temp = new File (new File(classpath).getCanonicalPath());", "+          if (temp.isDirectory()) {", "+            temp = new File(temp.getCanonicalPath() + File.separator + packageName);", "+            if (!classDirs.contains(temp)) classDirs.addLast(temp);", "+      catch(IOException e) { /* do nothing b/c the directory doesn't exist */ }", "+    }", "+    ", "+    for (File dir: classDirs){", "+      // foreach built directory", "+      File[] listing = dir.listFiles();", "-      //First adds the default document build directory to the class directories.", "-      while (it.hasNext()) {", "-        try {", "-          OpenDefinitionsDocument doc = it.next();", "-          String packageName;", "-          try{", "-            packageName = doc.getPackageName();", "-          }catch(InvalidPackageException e){", "-            packageName = \"\";", "-          }", "-          packageName = packageName.replace('.', File.separatorChar);", "-          ", "-          // keep a record of unique built directories", "-          if(builtDir == null){", "-            builtDir = doc.getSourceRoot();", "-          }", "-          File temp = new File(builtDir.getCanonicalPath() + File.separator + packageName);", "-          if(!classDirs.contains(temp)){", "-            classDirs.add(temp);", "-          }", "-        }", "-        catch(IOException e){", "-          // don't add it to the test suite b/c the directory doesn't exist", "-        }catch(InvalidPackageException e){", "-          // don't add it, b/c it's package is bogus", "-        }", "-      }", "-      ", "-      //Next adds the JVM class paths to the class directories.", "-      //Junit will look here if the default build directories don't have the desired classes.", "-      it = lod.iterator();", "-      while (it.hasNext()) {", "-        try {", "-          OpenDefinitionsDocument doc = it.next();", "-          String packageName;", "-          try{", "-            packageName = doc.getPackageName();", "-          }catch(InvalidPackageException e){", "-            packageName = \"\";", "-          }", "-          packageName = packageName.replace('.', File.separatorChar);", "-          ", "-          //Adds unique classpaths to the list of class directories that junit tests look through. 3/12/05", "-          for (String classpath: classpaths) {", "-            File temp = new File (new File(classpath).getCanonicalPath());", "-            if (temp.isDirectory()) {", "-              temp = new File(temp.getCanonicalPath() + File.separator + packageName);", "-              if (!classDirs.contains(temp)) {", "-                classDirs.addLast(temp);", "-              }", "-            }", "-          }", "-        }", "-        catch(IOException e){", "-          // don't add it to the test suite b/c the directory doesn't exist", "-        }", "-      }", "-         ", "-      for(File dir: classDirs){", "-        // foreach built directory", "-        File[] listing = dir.listFiles();", "-", "-        if(listing != null) for(File entry : listing){", "+      if (listing != null) {", "+        for (File entry : listing) {", "-          if(entry.isFile() && entry.getPath().endsWith(\".class\")){", "-            try{", "+          if (entry.isFile() && entry.getPath().endsWith(\".class\")) {", "+            try {", "-              String classname = clazz.getClassName();// get classname", "+              String classname = clazz.getClassName(); // get classname", "-              it = lod.iterator();", "-              File f;", "-              OpenDefinitionsDocument doc;", "-              while (it.hasNext()) {", "-                // for each open ODD", "-                doc = it.next();", "+              for (OpenDefinitionsDocument doc: lod) {", "-                  f = doc.getFile();", "+                  File f = doc.getFile();", "-                  // filenameFromDoc now contains the filename minus the extention", "-                  //                  System.out.println(f.getCanonicalPath() + \" == \" + filename);", "-                  if(filenameFromDoc.equals(filename) && (ext.equals(\".java\") || ext.equals(\".dj0\") || ext.equals(\".dj1\") || ext.equals(\".dj2\"))){", "+                  // filenameFromDoc now contains the filename minus the extension", "+                  ", "+                  if (filenameFromDoc.equals(filename) && ", "+                      (ext.equals(\".java\") || ext.equals(\".dj0\") || ext.equals(\".dj1\")  || ext.equals(\".dj2\"))) {", "-                }catch(InvalidPackageException e){", "-                }catch(IOException e){", "-                }catch(IllegalStateException e){", "-                  // doc is untitled", "+                catch(InvalidPackageException e) { /* do nothing */ }", "+                catch(IOException e) { /* do nothing */ }", "+                catch(IllegalStateException e) { /* do nothing; doc is untitled */ }", "-            }catch(IOException e){", "-              // can't read class file", "-            }catch(ClassFormatException e){", "-              // class file is bads", "+            catch(IOException e) { /* can't read class file */ }", "+            catch(ClassFormatException e) { /* class file is bad */ }", "-          ", "-", "-      _isTestInProgress = true;", "-      // synchronized over _notifier so that junitStarted is ensured to be ", "-      // called before the testing thread (JUnitTestManager) makes any notifications", "-      // to the notifier.  This can happen if the test fails quickly or if the test", "-      // class is not found.", "-      synchronized(_notifier) {", "+    }", "+    ", "+    _isTestInProgress = true;", "+    ", "+    // synchronized over _compilerModel to ensure that compilation and junit testing", "+    // are mutually exclusive.", "+    // synchronized over this so that junitStarted is ensured to be ", "+    // called before the testing thread (JUnitTestManager) makes any notifications", "+    // to the notifier.  This can happen if the test fails quickly or if the test", "+    // class is not found.", "+    synchronized (_compilerModel) {", "+      synchronized (this) {", "-        ArrayList<OpenDefinitionsDocument> odds =", "-          new ArrayList<OpenDefinitionsDocument>();", "-        Iterator<String> it2 = tests.iterator();", "-        while (it2.hasNext()) {", "-          odds.add(classNamesToODDs.get(it2.next()));", "-        }", "+        ArrayList<OpenDefinitionsDocument> odds = new ArrayList<OpenDefinitionsDocument>();", "+        for (String name: tests) { odds.add(classNamesToODDs.get(name)); }"]}], "num": 17706}
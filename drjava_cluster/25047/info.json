{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eaec7102832900c75a7e0bd43f3422da", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19dc1bff5d6e0fee77d525dd1893a014", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CommentTest.java", "commitBeforeChange": "ddaa83f5d7e463d396f773edc05bd85484692b8a", "commitAfterChange": "c0411b7a6f6c403c7ffb73b1d0c38cb49fd33824", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testUncommentMultipleLines() throws BadLocationException", "signatureAfterChange": "   public void testUncommentMultipleLines() throws BadLocationException", "diff": ["-      \"// // Here is some abritrary text that should be uncommented.\\n\" +", "+      \"//// Here is some abritrary text that should be uncommented.\\n\" +", "-      \"      //* things up.\\n\" +", "-      \"//                    */ \\n\" +", "-      \"//         System.out.println(\\\"Aren't comments fun? // (yeah!)\\\")\";", "+      \"//  * things up.\\n\" +", "+      \"//  */ \\n\" +", "+      \"// System.out.println(\\\"Aren't comments fun? // (yeah!)\\\")\";", "-      \"/* along with a little bit of code, just to spice\\n\" +", "-      \" * things up.\\n\" +", "-      \" */ \\n\" +", "-      \"System.out.println(\\\"Aren't comments fun? // (yeah!)\\\")\";", "+      \" /* along with a little bit of code, just to spice\\n\" +", "+      \"  * things up.\\n\" +", "+      \"  */ \\n\" +", "+      \" System.out.println(\\\"Aren't comments fun? // (yeah!)\\\")\";", "-    _assertContents(\"These lines should be indented and have at most\"+", "-                    \"one level of commenting!\", uncommented, doc);", "+    _assertContents(\"These lines should have at most one level of commenting!\", uncommented, doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e29ed7ffc29047dbe5cf52b4379bd3d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": "          public void end()", "signatureAfterChange": "          public void end()", "diff": ["-      System.out.println(\"Statements with errors: \" + sizeString(_errors));", "-      if (_verbose) { dump(_errors.secondSet()); }", "+      System.out.println(\"Common statements with errors: \" + sizeString(_commonErrors));", "+      if (_verbose) { dump(_commonErrors.secondSet()); }", "+      System.out.println(\"Left statements with errors: \" + sizeString(_leftErrors));", "+      if (_verbose) { dump(_leftErrors.secondSet()); }", "+      System.out.println(\"Right statements with errors: \" + sizeString(_rightErrors));", "+      if (_verbose) { dump(_rightErrors.secondSet()); }", "+      System.out.println(\"Polymorphic declarations: \" + sizeString(_polymorphicDeclarations));", "+      if (_verbose) { dump(_polymorphicDeclarations.secondSet()); }", "+      System.out.println(\"Simple wildcards: \" + sizeString(_simpleWildcards));", "+      if (_verbose) { dump(_simpleWildcards.secondSet()); }", "+      System.out.println(\"Upper-bounded wildcards: \" + sizeString(_extendsWildcards));", "+      if (_verbose) { dump(_extendsWildcards.secondSet()); }", "+      System.out.println(\"Lower-bounded wildcards: \" + sizeString(_superWildcards));", "+      if (_verbose) { dump(_superWildcards.secondSet()); }"]}], "num": 25047}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a00bc342ca1f33f627937dd2f995671c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "744749cfeafa4ef09c6b933ef9f05f2e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "      public void testForNormalTryCatchStatement()", "signatureAfterChange": "      public void testForNormalTryCatchStatement()", "diff": ["+                                 null, // enclosingClassName for top level traversal", "-                                 new LinkedList<String>(), ", "-                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+                                 new HashSet<String>(), ", "+                                 new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>(),", "+                                 new LinkedList<Command>());", "-      llv.continuations = new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>();", "+      llv.continuations = new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>();", "-      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "-      llv._classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();", "+//      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "+      llv._classesInThisFile = new HashSet<String>();", "-      SymbolData eb = llv.getSymbolData(\"java.util.prefs.BackingStoreException\", SourceInfo.NO_INFO, true);", "-      SymbolData re = llv.getSymbolData(\"java.lang.RuntimeException\", SourceInfo.NO_INFO, true);", "+      // preload symbolTable", "+      SymbolData throwable = llv.getQualifiedSymbolData(\"java.lang.Throwable\");", "+      SymbolData exception = llv.getQualifiedSymbolData(\"java.lang.Exception\");", "+      SymbolData string = llv.getQualifiedSymbolData(\"java.lang.String\");", "+      SymbolData eb = llv.getQualifiedSymbolData(\"java.util.prefs.BackingStoreException\");", "+      SymbolData re = llv.getQualifiedSymbolData(\"java.lang.RuntimeException\");", "+           ", "+      assert symbolTable.contains(throwable);", "+      assert symbolTable.contains(exception);", "+      assert symbolTable.contains(string);", "-      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught or declared to be thrown\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\",", "+                   \"This statement throws the exception java.util.prefs.BackingStoreException \" + ", "+                   \"which needs to be caught or declared to be thrown\", ", "+//                   \"You are attempting to throw java.util.prefs.BackingStoreException, which does not implement the \"", "+//                     + \"Throwable interface\",", "+                   errors.getLast().getFirst());", "+//                   \"You are attempting to throw java.util.prefs.BackingStoreException, which does not implement the\"", "+//                     + \" Throwable interface\",", "+      System.err.println(\"Last error is: \" + errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c757f25c50230ed37fe6928ad0350593", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "00c274c983090e9126b5a9ac7c84f4781adba195", "commitAfterChange": "f520b1b5f1b15642429d7c7844d7ac7a96f3e402", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "signatureAfterChange": "   public void testScriptLoading() throws Exception", "diff": ["-  public void testScriptLoading() throws IOException, OperationCanceledException {", "+  public void testScriptLoading() throws Exception {", "+    ", "-        return new File[] {temp};", "+        return new File[] { temp };", "-    ism.nextInteraction();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.nextInteraction(); } });", "-    Utilities.invokeAndWait(new Runnable() { public void run() { ism.executeInteraction(); } });", "-    Utilities.clearEventQueue();", "-    Utilities.clearEventQueue();", "+    model._logInteractionStart();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ism.executeInteraction(); } ", "+    });", "+    model._waitInteractionDone();", "+", "-    // pretend the call completed", "-    Utilities.invokeAndWait(new Runnable() { public void run() { model.replReturnedVoid(); } });", "-    Utilities.clearEventQueue();", "-//    System.err.println(\"Interaction is '\" + doc.getCurrentInteraction() + \"'\");", "+    System.err.println(\"Interaction is '\" + doc.getCurrentInteraction() + \"'\");", "-    assertTrue(\"Should have no previous\", ! ism.hasPrevInteraction());", "+    assertFalse(\"Should have no previous\", ism.hasPrevInteraction());", "+    System.err.println(\"Current interaction for line 428 is \" + doc.getCurrentInteraction());", "+    System.err.println(\"line1 = '\" + line1 + \"'\");", "+    model._logInteractionStart();", "-    Utilities.invokeAndWait(new Runnable() { public void run() { ism.executeInteraction(); } });", "-    Utilities.clearEventQueue();", "-    Utilities.clearEventQueue();", "-//    System.err.println(\"line1 = '\" + line1 + \"'\");", "-//    System.err.println(\"model.toEval = '\" + model.toEval + \"'\");", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.executeInteraction();  } });", "+    model._waitInteractionDone();", "+", "+    System.err.println(\"model.toEval = '\" + model.toEval + \"'\");", "-    // pretend the call completed", "-    Utilities.invokeAndWait(new Runnable() { public void run() { model.replReturnedVoid(); } });", "-    Utilities.clearEventQueue();"]}], "num": 14057}
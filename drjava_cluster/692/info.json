{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "770a2c490c51bede0f145f39dbcc1a44", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "791bd1ce6ef2b53e56d437131cd81b7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-nextgen/edu/rice/cs/drjava/model/compiler/NextGenCompiler.java", "commitBeforeChange": "e8a0105912243dc0845b7fe1aad605d049915d0a", "commitAfterChange": "f5dccb0b4004cfd3f184330e53ba101eca68857c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r   public String transformCommands(String interactionsString)", "signatureAfterChange": "   public String transformCommands(String interactionsString)", "diff": ["-    * @return command line with commands transformed */\r", "-  public String transformCommands(String interactionsString) {\r", "-    if (interactionsString.startsWith(\"applet \")) {\r", "-      throw new RuntimeException(\"Applets not supported by Nextgen.\");\r", "-    }\r", "-    if (interactionsString.startsWith(\"run \") ||\r", "-        interactionsString.startsWith(\"applet \") ||\r", "-        interactionsString.startsWith(\"nextgen \") ||\r", "-        interactionsString.startsWith(\"java \")) interactionsString = _transformNextgenCommand(interactionsString);\r", "-    return interactionsString;    \r", "-  }\r", "+    * @return command line with commands transformed */", "+  public String transformCommands(String interactionsString) {", "+    if (interactionsString.startsWith(\"applet \")) {", "+      throw new RuntimeException(\"Applets not supported by Nextgen.\");", "+    }", "+    if (interactionsString.startsWith(\"run \") ||", "+        interactionsString.startsWith(\"nextgen \") ||", "+        interactionsString.startsWith(\"java \")) interactionsString = _transformNextgenCommand(interactionsString);", "+    return interactionsString;    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d2a568acd1e45f1d05c5be6c749893d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private ExecutionError unmatchedFunctionError(String kind, UnmatchedLookupException e, Node node, Type type,                                                 String name, Iterable<? extends Type> targs,                                                 Iterable<? extends Expression> args, Option<Type> expected,                                                 boolean onlyStatic)", "signatureAfterChange": "   private ExecutionError unmatchedFunctionError(String kind, UnmatchedLookupException e, Node node, Type type,                                                 String name, Iterable<? extends Type> targs,                                                 Iterable<? extends Expression> args, Option<Type> expected,                                                 boolean onlyStatic)", "diff": ["+    final TypePrinter printer = ts.typePrinter();", "-    String typeS = (onlyStatic ? \"static \" : \"\") + ts.userRepresentation(type);", "-    String expectedS = expected.isSome() ? ts.userRepresentation(expected.unwrap()) : \"\";", "+    String typeS = (onlyStatic ? \"static \" : \"\") + printer.print(type);", "+    String expectedS = expected.isSome() ? printer.print(expected.unwrap()) : \"\";", "-     candidatesS = SIGNATURE_STRING.value(IterUtil.first(candidates));", "+     candidatesS = printer.print(IterUtil.first(candidates));", "-      candidatesS = IterUtil.toString(IterUtil.map(candidates, SIGNATURE_STRING), prefix, prefix, \"\");", "+      Lambda<Function, String> printSig = new Lambda<Function, String>() {", "+        public String value(Function f) { return printer.print(f); }", "+      };", "+      candidatesS = IterUtil.toString(IterUtil.map(candidates, printSig), prefix, prefix, \"\");", "-    setErrorStrings(node, typeS, name, ts.userRepresentation(targs), nodeTypesString(args), expectedS, candidatesS);", "+    setErrorStrings(node, typeS, name, printer.print(targs), nodeTypesString(args, printer), expectedS, candidatesS);"]}], "num": 692}
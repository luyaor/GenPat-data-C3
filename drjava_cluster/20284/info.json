{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77f469c80458349635b3165056a5f237", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c88c0971be17356d2e32e264fb7dd4d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "69317eecda3235d4815eb5d9a5b9e536b8481c4a", "commitAfterChange": "3549437d3f0aec05949cb330cf74662cd269bb15", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["+        File junitLocation = getConfig().getSetting(JUNIT_LOCATION);", "+        boolean junitLocationConfigured =", "+          (edu.rice.cs.drjava.model.junit.DefaultJUnitModel.isValidJUnitFile(junitLocation) ||", "+           edu.rice.cs.drjava.model.junit.DefaultJUnitModel.isValidConcJUnitFile(junitLocation));", "+        _log.log(\"junitLocation: \"+junitLocation);", "+        _log.log(\"junitLocationConfigured: \"+junitLocationConfigured);", "+        if (!junitLocationConfigured && // not valid ", "+            (junitLocation != null) && // not null", "+            (!FileOps.NULL_FILE.equals(junitLocation)) && // not NULL_FILE", "+            (junitLocation.exists())) { // but exists", "+          // invalid file, clear setting", "+          getConfig().setSetting(JUNIT_LOCATION, FileOps.NULL_FILE);", "+          getConfig().saveConfiguration();", "+          junitLocationConfigured = false;", "+        }", "-          || (!\"\".equals(masterMemory) && !OptionConstants.heapSizeChoices.get(0).equals(masterMemory));", "+          || (!\"\".equals(masterMemory) && !OptionConstants.heapSizeChoices.get(0).equals(masterMemory))", "+          || junitLocationConfigured;", "+        _log.log(\"restart: \"+restart);", "-            Process p = JVMBuilder.DEFAULT.jvmArguments(_jvmArgs).start(DrJavaRoot.class.getName(), classArgs);", "+            JVMBuilder jvmb = JVMBuilder.DEFAULT.jvmArguments(_jvmArgs);", "+            ", "+            // extend classpath if JUnit/ConcJUnit location specified", "+            _log.log(\"JVMBuilder: classPath = \"+jvmb.classPath());", "+            ArrayList<File> extendedClassPath = new ArrayList<File>();", "+            if (junitLocationConfigured) {", "+              extendedClassPath.add(junitLocation);", "+            }", "+            for(File f: jvmb.classPath()) { extendedClassPath.add(f); }", "+            _log.log(\"JVMBuilder: extendedClassPath = \"+extendedClassPath);", "+            jvmb = jvmb.classPath(edu.rice.cs.plt.iter.IterUtil.asSizedIterable(extendedClassPath));", "+            _log.log(\"JVMBuilder: jvmArguments = \"+jvmb.jvmArguments());", "+            _log.log(\"JVMBuilder: classPath = \"+jvmb.classPath());", "+            ", "+            // start new DrJava", "+            Process p = jvmb.start(DrJavaRoot.class.getName(), classArgs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce70da84d1516992d0178ed4e9cca4f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-eclipse/edu/rice/cs/drjava/model/compiler/EclipseCompiler.java", "commitBeforeChange": "4e52eec7688cbd5ec3584417f424923ba61a75e0", "commitAfterChange": "0d34688a453817a830dd6c41ef2406a8bf5a84d1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private Iterable<String> _getOptions(StandardJavaFileManager fileManager,                                        List<? extends File> classPath, List<? extends File> sourcePath, File destination,                                         List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "\r   \r   private Iterable<String> _getOptions(StandardJavaFileManager fileManager,\r                                        List<? extends File> classPath, List<? extends File> sourcePath, File destination, \r                                        List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-  ", "-  private Iterable<String> _getOptions(StandardJavaFileManager fileManager,", "-                                       List<? extends File> classPath, List<? extends File> sourcePath, File destination, ", "-                                       List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings) {", "-    ", "-//    System.err.println(\"classPath: \"+classPath);", "-//    System.err.println(\"sourcePath: \"+sourcePath);", "-//    System.err.println(\"destination: \"+destination);", "-//    System.err.println(\"bootClassPath: \"+bootClassPath);", "-    ", "-    if (bootClassPath == null) { bootClassPath = _defaultBootClassPath; }", "-    ", "-    List<String> options = new ArrayList<String>();", "-    for (Map.Entry<String, String> e : CompilerOptions.getOptions(showWarnings).entrySet()) {", "-      addOption(options,e.getKey());", "-      addOption(options,e.getValue());", "-    }", "-    ", "-    //Should be setable some day?", "-    addOption(options,\"-g\");", "-    ", "-    if (classPath != null) {", "-      addOption(options,\"-classpath\");", "-      addOption(options,IOUtil.pathToString(classPath));", "-      try {", "-        fileManager.setLocation(StandardLocation.CLASS_PATH, classPath);", "-      }", "-      catch(IOException ioe) { /* ignore, just don't set the path */ }", "-    }", "-    if (sourcePath != null) {", "-      addOption(options,\"-sourcepath\");", "-      addOption(options,IOUtil.pathToString(sourcePath));", "-      try {", "-        fileManager.setLocation(StandardLocation.SOURCE_PATH, sourcePath);", "-      }", "-      catch(IOException ioe) { /* ignore, just don't set the path */ }        ", "-    }", "-    if (destination != null) {", "-      addOption(options,\"-d\");", "-      addOption(options,destination.getPath());", "-      try {", "-        fileManager.setLocation(StandardLocation.CLASS_OUTPUT, IterUtil.asIterable(destination));", "-      }", "-      catch(IOException ioe) { /* ignore, just don't set the path */ }", "-    }", "-    if (bootClassPath != null) {", "-      addOption(options,\"-bootclasspath\");", "-      addOption(options,IOUtil.pathToString(bootClassPath));", "-      try {", "-        fileManager.setLocation(StandardLocation.PLATFORM_CLASS_PATH, bootClassPath);", "-      }", "-      catch(IOException ioe) { /* ignore, just don't set the path */ }", "-    }", "-    if (sourceVersion != null) {", "-      addOption(options,\"-source\");", "-      addOption(options,sourceVersion);", "-    }", "-    if (!showWarnings) {", "-      addOption(options,\"-nowarn\");", "-    }", "-    ", "-    return options;", "-  }", "+  \r", "+  private Iterable<String> _getOptions(StandardJavaFileManager fileManager,\r", "+                                       List<? extends File> classPath, List<? extends File> sourcePath, File destination, \r", "+                                       List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings) {\r", "+    \r", "+//    System.err.println(\"classPath: \"+classPath);\r", "+//    System.err.println(\"sourcePath: \"+sourcePath);\r", "+//    System.err.println(\"destination: \"+destination);\r", "+//    System.err.println(\"bootClassPath: \"+bootClassPath);\r", "+    \r", "+    if (bootClassPath == null) { bootClassPath = _defaultBootClassPath; }\r", "+    \r", "+    List<String> options = new ArrayList<String>();\r", "+//    for (Map.Entry<String, String> e : CompilerOptions.getOptions(showWarnings).entrySet()) {\r", "+//      addOption(options,e.getKey());\r", "+//      addOption(options,e.getValue());\r", "+//    }\r", "+    boolean isEnabled = DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.SHOW_UNCHECKED_WARNINGS);\r", "+    addOption(options,\"-warn:\"+(isEnabled?\"+\":\"-\")+\"unchecked\");\r", "+    addOption(options,\"-warn:\"+(isEnabled?\"+\":\"-\")+\"raw\");\r", "+    \r", "+    isEnabled = DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.SHOW_DEPRECATION_WARNINGS);\r", "+    addOption(options,\"-warn:\"+(isEnabled?\"+\":\"-\")+\"allDeprecation\");\r", "+    \r", "+    // -Xlint:path doesn't seem to exist for Eclipse compiler\r", "+//    isEnabled = DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.SHOW_PATH_WARNINGS);\r", "+//    addOption(options,\"-warn:\"+(isEnabled?\"+\":\"-\")+\"unchecked\");\r", "+    \r", "+    isEnabled = DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.SHOW_SERIAL_WARNINGS);\r", "+    addOption(options,\"-warn:\"+(isEnabled?\"+\":\"-\")+\"serial\");\r", "+    \r", "+    isEnabled = DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.SHOW_FINALLY_WARNINGS);\r", "+    addOption(options,\"-warn:\"+(isEnabled?\"+\":\"-\")+\"finally\");\r", "+    \r", "+    isEnabled = DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.SHOW_FALLTHROUGH_WARNINGS);\r", "+    addOption(options,\"-warn:\"+(isEnabled?\"+\":\"-\")+\"fallthrough\");\r", "+    \r", "+    //Should be setable some day?\r", "+    addOption(options,\"-g\");\r", "+    \r", "+    if (classPath != null) {\r", "+      addOption(options,\"-classpath\");\r", "+      addOption(options,IOUtil.pathToString(classPath));\r", "+      try {\r", "+        fileManager.setLocation(StandardLocation.CLASS_PATH, classPath);\r", "+      }\r", "+      catch(IOException ioe) { /* ignore, just don't set the path */ }\r", "+    }\r", "+    if (sourcePath != null) {\r", "+      addOption(options,\"-sourcepath\");\r", "+      addOption(options,IOUtil.pathToString(sourcePath));\r", "+      try {\r", "+        fileManager.setLocation(StandardLocation.SOURCE_PATH, sourcePath);\r", "+      }\r", "+      catch(IOException ioe) { /* ignore, just don't set the path */ }        \r", "+    }\r", "+    if (destination != null) {\r", "+      addOption(options,\"-d\");\r", "+      addOption(options,destination.getPath());\r", "+      try {\r", "+        fileManager.setLocation(StandardLocation.CLASS_OUTPUT, IterUtil.asIterable(destination));\r", "+      }\r", "+      catch(IOException ioe) { /* ignore, just don't set the path */ }\r", "+    }\r", "+    if (bootClassPath != null) {\r", "+      addOption(options,\"-bootclasspath\");\r", "+      addOption(options,IOUtil.pathToString(bootClassPath));\r", "+      try {\r", "+        fileManager.setLocation(StandardLocation.PLATFORM_CLASS_PATH, bootClassPath);\r", "+      }\r", "+      catch(IOException ioe) { /* ignore, just don't set the path */ }\r", "+    }\r", "+    if (sourceVersion != null) {\r", "+      addOption(options,\"-source\");\r", "+      addOption(options,sourceVersion);\r", "+    }\r", "+    if (!showWarnings) {\r", "+      addOption(options,\"-nowarn\");\r", "+    }\r", "+    \r", "+    return options;\r", "+  }\r"]}], "num": 20284}
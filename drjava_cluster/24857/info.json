{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "489d2e5222a988855bdb7630e8ae9bf3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fdcd0f8b15c8f4f718f8d1e18b91cc5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "015f584d4fd84a66059ace3c33a4092f1db5bd4c", "commitAfterChange": "d76a1ef24ee4d923e6ea3f06169ea8196ce68877", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 40, "signatureBeforeChange": "      public void write(OutputStream os) throws IOException", "signatureAfterChange": "   public void write(OutputStream os) throws IOException", "diff": ["+  // CHELSEA AND PATRICK WHOOOOOHOOOO!!!!!one", "-    if (!_sourceFiles.isEmpty()) {", "+    if (!_auxFiles.isEmpty()) {", "+    ", "+    xc.createNode(\"drjava/project/excluded\");", "+    if (!_excludedFiles.isEmpty()) {", "+      DocFile active = null;", "+      if (active==null) {", "+        for(DocFile df: _excludedFiles) {", "+          if(df.isActive()) {", "+            active = df;", "+            break; //Assert that there is only one active document in the project", "+          }", "+        }", "+      }", "+      for(DocFile df: _excludedFiles) {", "+        path = df.getAbsolutePath();", "+        path = replace(path, File.separator, \"/\");", "+        Pair<Integer,Integer> pSel = df.getSelection();", "+        Pair<Integer,Integer> pScr = df.getScroll();", "+        String s = MOD_DATE_FORMAT.format(new Date(df.lastModified()));", "+", "+        Node f = xc.createNode(\"drjava/project/excluded/file\", null, false);      ", "+        xc.set(\".name\", path, f, true);", "+        xc.set(\".timestamp\", s, f, true);", "+        xc.set(\".package\", df.getPackage(), f, true);", "+        xc.set(\"select.from\",   String.valueOf(pSel.first()),  f, true);", "+        xc.set(\"select.to\",     String.valueOf(pSel.second()), f, true);", "+        xc.set(\"scroll.column\", String.valueOf(pScr.first()),  f, true);", "+        xc.set(\"scroll.row\",    String.valueOf(pScr.second()), f, true);", "+        if (df==active) { xc.set(\".active\", \"true\", f, true);", "+        }", "+      }", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "920df9f196832463b38aaf240e379ee7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InsertVariableDialog.java", "commitBeforeChange": "fee21edb1b15f1499b5409a250cdb90d3f204739", "commitAfterChange": "e100da4da75b9cbdfc04df45bf52679ed811f23a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected void updatePanes()", "signatureAfterChange": "   protected void updatePanes()", "diff": ["+    edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty> sel = getSelected();", "+    String selCategory = null;", "+    if (sel!=null) {", "+      selCategory = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());", "+    }", "-    _tabbedPane.setSelectedIndex(0);", "-    String category = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());", "-    Map<String, DrJavaProperty> properties = PropertyMaps.ONLY.getProperties(category);", "-    _varTable.get(category).getSelectionModel().setSelectionInterval(0,0);", "-    String key = _varTableModel.get(category).getValueAt(_varTable.get(category).getSelectedRow(),0).toString();", "-    DrJavaProperty value = properties.get(key);", "-    _varValueField.setText(value.toString());", "-    _helpPane.setText(value.getHelp());", "-    _selected = new edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty>(key, value);", "+    if (sel!=null) {", "+      if (selCategory==null) { sel = null; } else {", "+        int i;", "+        for (i=0; i<_tabbedPane.getTabCount(); ++i) {", "+          if (_tabbedPane.getTitleAt(i).equals(selCategory)) { _tabbedPane.setSelectedIndex(i); break; }", "+        }", "+        if (i==_tabbedPane.getTabCount()) { sel = null; } else {", "+          Map<String, DrJavaProperty> properties = PropertyMaps.ONLY.getProperties(selCategory);", "+          DefaultTableModel tm = _varTableModel.get(selCategory);", "+          for (i=0; i<tm.getRowCount(); ++i) {", "+            String key = tm.getValueAt(i,0).toString();", "+            if (key.equals(sel.second().getName())) {", "+              _varTable.get(selCategory).getSelectionModel().setSelectionInterval(i,i);", "+              break;", "+            }", "+          }", "+          if (i==tm.getRowCount()) {", "+            // not found, select first", "+            _varTable.get(selCategory).getSelectionModel().setSelectionInterval(0,0);", "+          }", "+          _varValueField.setText(sel.second().toString());", "+          _helpPane.setText(sel.second().getHelp());", "+          _selected = sel;", "+        }", "+      }", "+    }", "+    if (sel==null) {", "+      _tabbedPane.setSelectedIndex(0);", "+      String category = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());", "+      Map<String, DrJavaProperty> properties = PropertyMaps.ONLY.getProperties(category);", "+      _varTable.get(category).getSelectionModel().setSelectionInterval(0,0);", "+      String key = _varTableModel.get(category).getValueAt(_varTable.get(category).getSelectedRow(),0).toString();", "+      DrJavaProperty value = properties.get(key);", "+      _varValueField.setText(value.toString());", "+      _helpPane.setText(value.getHelp());", "+      _selected = new edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty>(key, value);", "+    }"]}], "num": 24857}
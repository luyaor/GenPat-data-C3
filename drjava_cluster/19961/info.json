{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fc0fa686b7f2ac02b2e7d2bc888fc39", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210d5fe56d444b046bc08ae3c17fc02e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 310, "methodNumberAfterChange": 303, "signatureBeforeChange": "   private static <I extends FunctionInvocation, T extends FunctionInvocationCandidate<I>>       Iterable<T> bestMatches(Iterable<T> candidates)", "signatureAfterChange": "   private <F extends Function>       Iterable<FunctionInvocationCandidate<F>> bestInvocations(Iterable<F> functions,                                                                final Iterable<? extends Type> targs,                                                                final Iterable<? extends Expression> args,                                                                final Option<Type> expected)", "diff": ["-  private static <I extends FunctionInvocation, T extends FunctionInvocationCandidate<I>>", "-      Iterable<T> bestMatches(Iterable<T> candidates) {", "+  private <F extends Function>", "+      Iterable<FunctionInvocationCandidate<F>> bestInvocations(Iterable<F> functions,", "+                                                               final Iterable<? extends Type> targs,", "+                                                               final Iterable<? extends Expression> args,", "+                                                               final Option<Type> expected) {", "-    List<T> matches = new LinkedList<T>();", "-    for (T c : candidates) {", "+    Iterable<FunctionInvocationCandidate<F>> candidates = IterUtil.mapSnapshot(functions,", "+                                                                     new Lambda<F, FunctionInvocationCandidate<F>>() {", "+      public FunctionInvocationCandidate<F> value(F f) {", "+        return new FunctionInvocationCandidate<F>(f, targs, args, expected);", "+      }", "+    });", "+    List<FunctionInvocationCandidate<F>> matches = new LinkedList<FunctionInvocationCandidate<F>>();", "+    for (FunctionInvocationCandidate<F> c : candidates) {", "-      for (T c : candidates) {", "+      for (FunctionInvocationCandidate<F> c : candidates) {", "-      for (T c : candidates) {", "+      for (FunctionInvocationCandidate<F> c : candidates) {", "-    return CollectUtil.minList(matches, new Order<T>() {", "-      public boolean contains(T c1, T c2) {", "+    return CollectUtil.minList(matches, new Order<FunctionInvocationCandidate<F>>() {", "+      public boolean contains(FunctionInvocationCandidate<F> c1, FunctionInvocationCandidate<F> c2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f49d4084393d129d56ddbc102dff8cb6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 275, "methodNumberAfterChange": 322, "signatureBeforeChange": "   private <T, R> Iterable<R> findSignatureMatches(Iterable<? extends T> sigs,                                                    Lambda<? super T, ? extends SignatureChecker> makeChecker,                                                   Lambda2<? super T, ? super SignatureChecker,                                                    ? extends R> makeResult)", "signatureAfterChange": "         @Override public DJMethod forRawClassType(RawClassType dynamicContext)", "diff": ["+        @Override public DJMethod defaultCase(Type dynamicContext) { return declaredMethod; }", "+        @Override public DJMethod forRawClassType(RawClassType dynamicContext) {", "+          // TODO: raw member access warnings", "+          return new ErasedMethod(declaredMethod);", "+        }", "-   */", "-  private <T, R> Iterable<R> findSignatureMatches(Iterable<? extends T> sigs, ", "-                                                  Lambda<? super T, ? extends SignatureChecker> makeChecker,", "-                                                  Lambda2<? super T, ? super SignatureChecker, ", "-                                                  ? extends R> makeResult) {", "-    Iterable<? extends SignatureChecker> checkers = IterUtil.mapSnapshot(sigs, makeChecker);", "-    Iterable<Pair<T, SignatureChecker>> pairs = IterUtil.zip(sigs, checkers);", "-    Iterable<Pair<T, SignatureChecker>> resultPairs = IterUtil.empty();", "-    for (Pair<T, SignatureChecker> pair : pairs) {", "-      if (pair.second().matches()) { resultPairs = IterUtil.compose(resultPairs, pair); }", "-    }", "-    if (IterUtil.isEmpty(resultPairs)) {", "-      for (Pair<T, SignatureChecker> pair : pairs) {", "-        if (pair.second().matchesWithBoxing()) { resultPairs = IterUtil.compose(resultPairs, pair); }", "-      }", "-    }", "-    if (IterUtil.isEmpty(resultPairs)) {", "-      for (Pair<T, SignatureChecker> pair : pairs) {", "-        if (pair.second().matchesWithVarargs()) { resultPairs = IterUtil.compose(resultPairs, pair); }", "-      }", "-    }", "-    resultPairs = mostSpecificSignatures(resultPairs);", "-    return IterUtil.map(IterUtil.pairFirsts(resultPairs), IterUtil.pairSeconds(resultPairs),", "-                        makeResult);", "-  }"]}], "num": 19961}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00500fab1cfe6ddaaa7ad1ee1d7ac0f7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf246ffe62435de6ff43a691e151daf0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "   private static void checkEqualityStaticRules(Class lc, Class rc, Node n)", "signatureAfterChange": "   private static void checkEqualityStaticRules(Class lc, Class rc, BinaryExpression n)", "diff": ["-  private static void checkEqualityStaticRules(Class lc, Class rc, Node n) {", "+  private static void checkEqualityStaticRules(Class lc, Class rc, BinaryExpression n) {", "+    Expression leftExp = n.getLeftExpression();", "+    Expression rightExp = n.getRightExpression();", "+", "+    // Auto-unbox, if necessary", "+    /**", "+     * We have not decided what the correct semantics", "+     * for the == operator is for boxed/primitive types", "+     */", "+    if (lc != null && rc != null) {", "+      if (_isBoxingType(lc) && rc.isPrimitive()) {", "+        ObjectMethodCall methodCall = _unbox(leftExp, lc);", "+        n.setLeftExpression(methodCall);", "+        lc = (Class) methodCall.getProperty(NodeProperties.TYPE);", "+      }", "+      if (_isBoxingType(rc) && lc.isPrimitive()) {", "+        ObjectMethodCall methodCall = _unbox(rightExp, rc);", "+        n.setRightExpression(methodCall);", "+        rc = (Class) methodCall.getProperty(NodeProperties.TYPE);", "+      }", "+    }", "+", "-      if (lc == void.class    || rc == void.class     ||", "+      if (lc == void.class    || rc == void.class ||", "-      } else if ((lc == null && rc.isPrimitive()) ||", "-                 (rc == null && lc.isPrimitive())) {", "+      } ", "+      else if ((lc == null && rc.isPrimitive()) ||", "+               (rc == null && lc.isPrimitive())) {", "-      } else if (lc != null && rc != null) {", "+      } ", "+      else if (lc != null && rc != null) {", "-        } else if (!lc.isPrimitive() && !rc.isPrimitive()) {", "+        }", "+        else if (!lc.isPrimitive() && !rc.isPrimitive()) {  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7c84958ebcae1f9c274ba07b9b23e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "     public Object visit(AddAssignExpression node)", "signatureAfterChange": "   public Class visit(AddAssignExpression node)", "diff": ["+   */", "+  public Class visit(AddAssignExpression node) {", "+    // Check the types", "+    Node  ln = node.getLeftExpression();", "+    Class lc = (Class)ln.acceptVisitor(this);", "+    Class rc = (Class)node.getRightExpression().acceptVisitor(this);", "+    ", "+    if (lc != String.class) {", "+      if (lc == null || rc == null ||", "+          lc == void.class || rc == void.class ||", "+          rc == boolean.class || !rc.isPrimitive()) {", "+        throw new ExecutionError(\"addition.type\", node);", "+      }", "+    }", "+    ", "+    // The left subexpression must be a variable", "+    if (!ln.hasProperty(NodeProperties.MODIFIER)) {", "+      throw new ExecutionError(\"left.expression\", node);", "+    }", "+    ", "+    // Sets the type property of this node", "+    node.setProperty(NodeProperties.TYPE, lc);", "+    return lc;", "+  }", "-     */", "-    public Object visit(AddAssignExpression node) {", "-        // Check the types", "-\tNode  ln = node.getLeftExpression();", "-        Class lc = (Class)ln.acceptVisitor(this);", "-        Class rc = (Class)node.getRightExpression().acceptVisitor(this);", "-", "-        if (lc != String.class) {", "-            if (lc == null || rc == null ||", "-                lc == void.class || rc == void.class ||", "-                rc == boolean.class || !rc.isPrimitive()) {", "-                throw new ExecutionError(\"addition.type\", node);", "-            }", "-        }", "-        ", "-        // The left subexpression must be a variable", "-        if (!ln.hasProperty(NodeProperties.MODIFIER)) {", "-            throw new ExecutionError(\"left.expression\", node);", "-        }", "-", "-        // Sets the type property of this node", "-        node.setProperty(NodeProperties.TYPE, lc);", "-        return lc;"]}], "num": 17383}
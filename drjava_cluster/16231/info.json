{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9141ff929a6718232270d3dcfbfc27d1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79b4f02731053d2b98d4b07cd117edfa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CompilerErrorPanel.java", "commitBeforeChange": "42453ef03053968f9ca85cc1f502a43bd9378c76", "commitAfterChange": "84ce5397e59f2c9953a60bb68d966b69ec59ad8c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void _switchToError(final int idx)", "signatureAfterChange": "   private void _switchToError(final int errorNum)", "diff": ["-  /** Change all state to select a new error. */", "-  private void _switchToError(final int idx) {", "-    _highlightErrorInSource(idx);", "-    _gotoErrorSourceLocation(idx);", "-    _errorListPane.selectItem(idx);", "+   */", "+  private void _switchToError(final int errorNum) {", "+    // errorNum is an error number. Because errors without source info ", "+    // come first, check and see if this error is without source info, and", "+    // if so don't try to highlight source info!", "+    boolean errorHasLocation = (errorNum >= _errorsWithoutPositions.length);", "+", "+    if (errorHasLocation) {", "+      // Index into _errors array", "+      int idx = errorNum - _errorsWithoutPositions.length;", "+", "+      _highlightErrorInSource(idx);", "+      _gotoErrorSourceLocation(idx);", "+    }", "+    else {", "+      // Get rid of old highlight, since the error we have no has", "+      // no source location", "+      _removePreviousHighlight();", "+    }", "+", "+    // Select item wants the error number, which what we were passed", "+    _errorListPane.selectItem(errorNum);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6b10a6e610deace79e99eca3a52cae0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "42453ef03053968f9ca85cc1f502a43bd9378c76", "commitAfterChange": "84ce5397e59f2c9953a60bb68d966b69ec59ad8c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void _switchToError(final int idx)", "signatureAfterChange": "   private void _switchToError(final int errorNum)", "diff": ["-  /** Change all state to select a new error. */", "-  private void _switchToError(final int idx) {", "-    _highlightErrorInSource(idx);", "-    _gotoErrorSourceLocation(idx);", "-    _errorListPane.selectItem(idx);", "+   */", "+  private void _switchToError(final int errorNum) {", "+    // errorNum is an error number. Because errors without source info ", "+    // come first, check and see if this error is without source info, and", "+    // if so don't try to highlight source info!", "+    boolean errorHasLocation = (errorNum >= _errorsWithoutPositions.length);", "+", "+    if (errorHasLocation) {", "+      // Index into _errors array", "+      int idx = errorNum - _errorsWithoutPositions.length;", "+", "+      _highlightErrorInSource(idx);", "+      _gotoErrorSourceLocation(idx);", "+    }", "+    else {", "+      // Get rid of old highlight, since the error we have no has", "+      // no source location", "+      _removePreviousHighlight();", "+    }", "+", "+    // Select item wants the error number, which what we were passed", "+    _errorListPane.selectItem(errorNum);"]}], "num": 16231}
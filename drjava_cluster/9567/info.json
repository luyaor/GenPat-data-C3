{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db66a579c25d8a9b5ed0a06f18bda4f7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13039d7dd2817cc6e07a50593c463f0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fb61bb542bf295f9ff563d4fe1831b256b325388", "commitAfterChange": "6a5c20e1ee845b9752ac481574f6a7bee8c034e1", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 197, "signatureBeforeChange": "          public void junitRunning()", "signatureAfterChange": "        public void junitTestEnded(final OpenDefinitionsDocument doc, final String name,                                final boolean wasSuccessful, final boolean causedError)", "diff": ["-    public void junitRunning() {}", "+  ", "+    public void junitTestEnded(final OpenDefinitionsDocument doc, final String name,", "+                               final boolean wasSuccessful, final boolean causedError) {", "+      // syncUI...?", "+      SwingUtilities.invokeLater( new Runnable() {", "+        public void run() {", "+          _junitPanel.getJUnitErrorListPane().", "+            testEnded(name, wasSuccessful, causedError);", "+          _junitPanel.progressStep(wasSuccessful);", "+        }", "+      });", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fb6de1bd9e2aecee760c5dc6774dfd4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 21, "signatureBeforeChange": "       public boolean contains(Thread thread, StackTraceElement location)", "signatureAfterChange": "   public static void logThreadStatus(final Log log, final Thread thread, long... delays)", "diff": ["-    return new Predicate2<Thread, StackTraceElement>() {", "-      public boolean contains(Thread thread, StackTraceElement location) {", "-        String caller = location.getClassName() + \".\" + location.getMethodName();", "-        for (String pre : prefixes) {", "-          if (caller.startsWith(pre)) { return false; }", "-        return true;", "-      }", "+   */", "+  public static void logThreadStatus(final Log log, final Thread thread, long... delays) {", "+    // LogTask can't be a singleton because each scheduled instance has distinct state for scheduling", "+    class LogTask extends TimerTask {", "+      public void run() {", "+        log.logValues(new String[]{ \"thread\", \"state\", \"stack\" },", "+                      thread, thread.getState(), thread.getStackTrace());", "+      }", "+    }", "+    if (delays.length == 0) { new LogTask().run(); }", "+    for (final long delay : delays) {", "+      LOG_TIMER.value().schedule(new LogTask(), delay);", "+    }", "+  }"]}], "num": 9567}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edd097f86f8f835393100ada8d0ae585", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7089e58753068f8807f768d151cf6853", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public synchronized void shutdown()", "signatureAfterChange": "   public synchronized void shutdown()", "diff": ["-    if (isReady()) {", "-      try {", "-        removeAllBreakpoints();", "-        removeAllWatches();", "-        _vm.dispose();", "-      }", "-      catch (VMDisconnectedException vmde) {", "-        //VM was shutdown prematurely", "-      }", "-      finally {", "-        ((DefaultInteractionsModel)_model.getInteractionsModel()).setToDefaultInterpreter();", "-        _vm = null;", "-        _eventManager = null;", "-        _suspendedThreads = new RandomAccessStack();", "-        _deadThreads = new DeadThreadFilter();", "-        _runningThread = null;", "-      }", "+    if (!isReady()) {", "+      throw new IllegalStateException(\"Cannot shut down if debugger is not active.\");", "+    }", "+    ", "+    try {", "+      removeAllBreakpoints();", "+      removeAllWatches();", "+    }", "+    catch (DebugException de) {", "+      // Couldn't remove breakpoints/watches", "+      _log(\"Could not remove breakpoints/watches: \" + de);", "+    }", "+    ", "+    try {", "+      _vm.dispose();", "+    }", "+    catch (VMDisconnectedException vmde) {", "+      //VM was shutdown prematurely", "+    }", "+    finally {", "+      ((DefaultInteractionsModel)_model.getInteractionsModel()).setToDefaultInterpreter();", "+      _vm = null;", "+      _eventManager = null;", "+      _suspendedThreads = new RandomAccessStack();", "+      _deadThreads = new DeadThreadFilter();", "+      _runningThread = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa7d207c3e1e8e4e119749a8c1dc041c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public synchronized void shutdown()", "signatureAfterChange": "   public synchronized void shutdown()", "diff": ["-    if (!isReady()) throw new IllegalStateException(\"Cannot shut down if debugger is not active.\");", "-", "-    _model.removeListener(_watchListener);", "-", "-    try {", "-      _removeAllDebugInterpreters();", "-      removeAllBreakpoints();", "-      removeAllWatches();", "-    }", "-    catch (DebugException de) {", "-      // Couldn't remove breakpoints/watches", "-      _log(\"Could not remove breakpoints/watches: \" + de);", "-    }", "-", "-    try {", "-      _vm.dispose();", "-    }", "-    catch (VMDisconnectedException vmde) {", "-      //VM was shutdown prematurely", "-    }", "-    finally {", "-      _model.getInteractionsModel().setToDefaultInterpreter();", "-      _vm = null;", "-      _suspendedThreads = new RandomAccessStack();", "-      _eventManager = null;", "-      _runningThread = null;", "+    if (isReady()) {", "+      Runnable command = new Runnable() {", "+        public void run() {", "+          _model.removeListener(_watchListener);", "+        }", "+      };", "+      // use SwingUtilities.invokeLater rather than our own invokeLater", "+      // because this might be run from the event thread already, and we", "+      // don't want it to execute right now, just as soon as possible", "+      SwingUtilities.invokeLater(command);", "+      ", "+      try {", "+        _removeAllDebugInterpreters();", "+        // removeAllBreakpoints();", "+        removeAllWatches();", "+      }", "+      catch (DebugException de) {", "+        // Couldn't remove breakpoints/watches", "+        _log(\"Could not remove breakpoints/watches: \" + de);", "+      }", "+      ", "+      try {", "+        _vm.dispose();", "+      }", "+      catch (VMDisconnectedException vmde) {", "+        //VM was shutdown prematurely", "+      }", "+      finally {", "+        _model.getInteractionsModel().setToDefaultInterpreter();", "+        _vm = null;", "+        _suspendedThreads = new RandomAccessStack();", "+        _eventManager = null;", "+        _runningThread = null;", "+      }"]}], "num": 651}
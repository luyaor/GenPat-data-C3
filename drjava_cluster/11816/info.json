{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d90a3adff4cd86f1f4030bc80c37b797", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a5a15c8b903d901c799e60ef679e9b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "e664df55ae0a7bd09b3050ad4027139ea59836cd", "commitAfterChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 28, "signatureBeforeChange": "      private void typeCheck(Iterable<CompilationUnit> sources, Iterable<? extends File> cp) throws InterpreterException", "signatureAfterChange": "     protected abstract void step(TypeDeclaration ast, ClassChecker checker);", "diff": ["-  private void typeCheck(Iterable<CompilationUnit> sources, Iterable<? extends File> cp) throws InterpreterException {", "-    ClassLoader loader = new PathClassLoader(null, cp);", "-    Library classLib = SymbolUtil.classLibrary(loader);", "-    Library sourceLib = new TreeLibrary(sources, loader, _opt);", "-    TypeContext context = new TopLevelContext(new LibraryContext(new LibraryContext(classLib), sourceLib), loader);", "-    CompilationUnitChecker checker = new CompilationUnitChecker(context, _opt);", "-    List<InterpreterException> errors = new ArrayList<InterpreterException>();", "-    Iterable<CompilationUnitChecker.BodyChecker> bodyCheckers = IterUtil.empty();", "-    for (CompilationUnit u : sources) {", "-      debug.logValue(\"Checking source\", \"location\", u.getSourceInfo());", "-      try { bodyCheckers = IterUtil.compose(bodyCheckers, checker.check(u)); }", "-      catch (CheckerException e) { errors.add(e); }", "-    }", "-    if (!errors.isEmpty()) {", "-      for (CompilationUnitChecker.BodyChecker c : bodyCheckers) {", "-        try { c.check(); }", "-        catch (CheckerException e) { errors.add(e); }", "-    }", "-    if (!errors.isEmpty()) { throw new CompositeException(errors); }", "+    }", "+    protected abstract void step(TypeDeclaration ast, ClassChecker checker);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e50bfa90e970ae412fdcd9fde946ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/src-jsr14v2_0/edu/rice/cs/drjava/model/compiler/JSR14v20Compiler.java", "commitBeforeChange": "255639a37a492530d2834e7741b324292706782a", "commitAfterChange": "c967e58952709e4269e937aeff522c6db9ffc4fb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "    protected void initCompiler(File[] sourceRoots)", "signatureAfterChange": "    protected void initCompiler(File[] sourceRoots)", "diff": ["-    compiler = JavaCompiler.make(context);", "+    ", "+    // Using reflection to allow for JSR14v2.3 since the \"make\"", "+    // method was changed to \"instance\".", "+    Class javaCompilerClass = JavaCompiler.class;", "+    Class[] validArgs1 = {", "+      Context.class", "+    };", "+    Method m;    ", "+    if (_isJSR14v2_3()) {    ", "+      try { ", "+        m = javaCompilerClass.getMethod(\"instance\", validArgs1);", "+        compiler = (JavaCompiler)m.invoke(null, new Object[] {context});", "+      }", "+      catch (NoSuchMethodException e) {", "+        throw new UnexpectedException(e);", "+      }", "+      catch (IllegalAccessException e) {", "+        throw new UnexpectedException(e);", "+      }", "+      catch (InvocationTargetException e) {", "+        throw new UnexpectedException(e);", "+      }      ", "+    }", "+    else {", "+      try { ", "+        m = javaCompilerClass.getMethod(\"make\", validArgs1);", "+        compiler = (JavaCompiler)m.invoke(null, new Object[] {context});", "+      }", "+      catch (NoSuchMethodException e) {", "+        throw new UnexpectedException(e);", "+      }", "+      catch (IllegalAccessException e) {", "+        throw new UnexpectedException(e);", "+      }", "+      catch (InvocationTargetException e) {", "+        throw new UnexpectedException(e);", "+      }", "+//      compiler = JavaCompiler.make(context);", "+    }", "+  }"]}], "num": 11816}
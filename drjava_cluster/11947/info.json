{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb3a9112f508dc70687334d21c0de49c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19a96e72f55188f973d7de4e89e5cf6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/MintCompiler.java", "commitBeforeChange": "5a2208c5a083f8abb3c732362ff63b83a40e68a9", "commitAfterChange": "da631ae365e5ae3fe7064b60f098ede0150c39bb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    public String getName()", "signatureAfterChange": "    public String getName()", "diff": ["-  public String getName() { return \"Mint \" + _version.versionString(); }", "+  public String getName() {", "+      try {", "+          // use reflection to be compatible with older versions of Mint", "+          Class<?> c = Class.forName(\"edu.rice.cs.mint.Version\");", "+          Method m = c.getMethod(\"getRevisionNumber\");", "+          return \"Mint r\" + m.invoke(null);", "+      }", "+      catch(Exception e) {", "+          return \"Mint \" + _version.versionString();", "+      }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cdde80e5631cdea5302691fc273bf7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "e7442f280333996ea90edd62f79df8c2d40ca324", "commitAfterChange": "6572078744d5462302a5712b2d3e4dd3c67ea5fb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected Class findClass(String name) throws ClassNotFoundException", "signatureAfterChange": "     protected Class findClass(String name) throws ClassNotFoundException", "diff": ["+", "-      } catch (IOException ioe) {}", "+      }", "+      catch (Throwable t) {}", "+", "+      // Now try to just use the standard loader", "+      // Before, we didn't do this, and it resulted in getting some", "+      // class format errors (illegal constant pool) when loading.", "+      // i don't know why, but some classes seem to need to be loaded", "+      // using standard loader.", "+      ClassLoader l;", "+      if (classLoader != null) {", "+        l = classLoader;", "+      }", "+      else {", "+        l = ClassLoader.getSystemClassLoader();", "+      }", "+", "+      try {", "+        return l.loadClass(name);", "+      }", "+      catch (Throwable t) {}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3ba013c8c13223e15e0df8834d3ee8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "b6f32808055835a9481d2cee68a36bc82ce5f558", "commitAfterChange": "3b63bd62ccd1666c210054736f0739b2d5581af4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public String getText(int offset, int len)", "signatureAfterChange": "     public String getText(int offset, int len) throws BadLocationException", "diff": ["-    /* Gets the specified substring of this document; throws an exception if the specification is ill-formed. */", "-    public String getText(int offset, int len) { ", "-      String text = getText();", "+    /* Gets the specified substring of this document; throws BadLocationException if the specification is ill-formed. */", "+    public String getText(int offset, int len) throws BadLocationException { ", "+      final DefinitionsDocument doc = _doc; // create a snapshot of _doc", "+      if (doc == null) {", "+        try { return _rec.getText().substring(offset, offset + len); }", "+        catch(IndexOutOfBoundsException e) { throw new BadLocationException(e.getMessage(), offset); }  ", "+      }", "-      return text.substring(offset, offset + len);", "+      return doc.getText(offset, len); "]}], "num": 11947}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99ff2c900e7afa189a5ec42d000df61c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c22b950a70dbffe3ac36a19105f257", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandler.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void _handleThreadDeathEvent(ThreadDeathEvent e)", "signatureAfterChange": "      private void _handleThreadDeathEvent(ThreadDeathEvent e)", "diff": ["-    if (e.thread().equals(_manager.getCurrentThread())) {", "+    /** no need to check if there are suspended threads on the stack", "+     * because all that logic should be in the debugger", "+     */", "+    if(e.thread().equals(_manager.getCurrentRunningThread())) {", "+      EventRequestManager erm = _vm.eventRequestManager();", "+      List steps = erm.stepRequests();", "+      for (int i = 0; i < steps.size(); i++) {", "+        StepRequest step = (StepRequest)steps.get(i);", "+        if (step.thread().equals(e.thread())) {", "+          erm.deleteEventRequest(step);", "+          break;", "+        }", "+      }", "-      _manager.setCurrentThread(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b5db902eeb6ff9e3491816a29d4cf0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": "   public boolean closeFileWithoutPrompt(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean closeFileWithoutPrompt(final OpenDefinitionsDocument doc)", "diff": ["+        ", "+    // remove breakpoints for this file", "+    Debugger dbg = getDebugger();", "+    if (dbg.isAvailable()) {", "+      Vector<Breakpoint> bps = new Vector<Breakpoint>(doc.getBreakpoints());", "+      for (int i = 0; i < bps.size(); i++) {", "+        Breakpoint bp = bps.get(i);", "+        try { dbg.removeBreakpoint(bp); }", "+        catch(DebugException de) { /* ignore */ }", "+      }", "+    }"]}], "num": 14607}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a30f6203063efdb5006570ddef47ecd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a0b6441fa055a7bcd1b4d05aea544b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 409, "methodNumberAfterChange": 409, "signatureBeforeChange": "\r \r   public void forClassOrInterfaceType(ClassOrInterfaceType that)", "signatureAfterChange": "    public void forClassOrInterfaceType(ClassOrInterfaceType that)", "diff": ["-\r", "-  public void forClassOrInterfaceType(ClassOrInterfaceType that) {\r", "-    forClassOrInterfaceTypeDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getTypeArguments().length; i++) that.getTypeArguments()[i].visit(this);\r", "-    forClassOrInterfaceTypeOnly(that);\r", "-  }\r", "+", "+  public void forClassOrInterfaceType(ClassOrInterfaceType that) {", "+    forClassOrInterfaceTypeDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getTypeArguments().length; i++) that.getTypeArguments()[i].visit(this);", "+    forClassOrInterfaceTypeOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5df8ab6f848796909e4b12d796b0bc69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": "\r \r   public void forTypeVariable(TypeVariable that)", "signatureAfterChange": "    public void forTypeVariable(TypeVariable that)", "diff": ["-\r", "-  public void forTypeVariable(TypeVariable that) {\r", "-    forTypeVariableDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forTypeVariableOnly(that);\r", "-  }\r", "+", "+  public void forTypeVariable(TypeVariable that) {", "+    forTypeVariableDoFirst(that);", "+    if (prune(that)) return;", "+    forTypeVariableOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff1d04009762f1f336393a3e374bcd57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 411, "methodNumberAfterChange": 411, "signatureBeforeChange": "\r \r   public void forVoidReturn(VoidReturn that)", "signatureAfterChange": "    public void forVoidReturn(VoidReturn that)", "diff": ["-\r", "-  public void forVoidReturn(VoidReturn that) {\r", "-    forVoidReturnDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forVoidReturnOnly(that);\r", "-  }\r", "+", "+  public void forVoidReturn(VoidReturn that) {", "+    forVoidReturnDoFirst(that);", "+    if (prune(that)) return;", "+    forVoidReturnOnly(that);", "+  }"]}], "num": 7722}
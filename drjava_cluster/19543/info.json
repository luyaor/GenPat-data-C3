{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1444479a910a106d0f7128396146ff4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51f5b672e6fb430c6a0dbe32cc7cecef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "0a93533cf1b555344278f97d8d989cd2f113c958", "commitAfterChange": "c950bf1122c303a9137db70374c1cd2e2fc01d08", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "               protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "               protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-      ", "-      // if a test is running, don't start another one", "-      if (_isTestInProgress) {", "-        return;", "+      // if a test is running, don't start another one, but make sure someone's not", "+      // trying to notify that the previous test had finished.", "+      synchronized(_notifier) {", "+        if (_isTestInProgress) return;", "-      ", "+        ", "+      ", "-", "+        ", "+        ", "+                  ", "-          if(entry.isFile()){", "+          if(entry.isFile() && entry.getPath().endsWith(\".class\")){", "+                  ", "+                    ", "-              // class file is bad", "+              // class file is bads", "+      ", "-      ", "-      List<String> tests = _jvm.runTestSuite(classNames, files, allTests);", "-      ArrayList<OpenDefinitionsDocument> odds =", "-        new ArrayList<OpenDefinitionsDocument>();", "-      Iterator<String> it2 = tests.iterator();", "-      while (it2.hasNext()) {", "-        odds.add(classNamesToODDs.get(it2.next()));", "+      // synchronized over _notifier so that junitStarted is ensured to be ", "+      // called before the testing thread (JUnitTestManager) makes any notifications", "+      // to the notifier.  This can happen if the test fails quickly or if the test", "+      // class is not found.", "+      synchronized(_notifier) {", "+        List<String> tests = _jvm.runTestSuite(classNames, files, allTests);", "+        ArrayList<OpenDefinitionsDocument> odds =", "+          new ArrayList<OpenDefinitionsDocument>();", "+        Iterator<String> it2 = tests.iterator();", "+        while (it2.hasNext()) {", "+          odds.add(classNamesToODDs.get(it2.next()));", "+        }", "+        _notifier.junitStarted(odds);", "-      _notifier.junitStarted(odds);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f28928a8523be137c6e4f911206092fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "ea54d5918e0742266441f70659af74f35bca898d", "commitAfterChange": "e6ef9e23d624990cf9fd00ec857466a046415b6a", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 131, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFiles(File[] files)      throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument[] _openFiles(File[] files)      throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-  private OpenDefinitionsDocument _openFiles(File[] files) ", "+  private OpenDefinitionsDocument[] _openFiles(File[] files) ", "-    AlreadyOpenException storedAOE = null;", "-    OpenDefinitionsDocument retDoc = null;", "+    ArrayList<OpenDefinitionsDocument> alreadyOpenDocuments = new ArrayList<OpenDefinitionsDocument>();", "+    ArrayList<OpenDefinitionsDocument> retDocs = new ArrayList<OpenDefinitionsDocument>();", "-    final LinkedList<OpenDefinitionsDocument> filesOpened = new LinkedList<OpenDefinitionsDocument>();", "+    LinkedList<OpenDefinitionsDocument> filesOpened = new LinkedList<OpenDefinitionsDocument>();", "+        OpenDefinitionsDocument d = _rawOpenFile(FileOps.getCanonicalFile(f));", "-        retDoc = _rawOpenFile(f.getCanonicalFile());", "-//        Utilities.show(\"Processed: \" + f + \" Opened: \" + f.getCanonicalFile());", "-        filesOpened.add(retDoc);", "+        retDocs.add(d);", "+        filesOpened.add(d);", "-        retDoc = aoe.getOpenDocument();", "-        //Remember the first AOE", "-        if (storedAOE == null) storedAOE = aoe;", "-      } ", "+        OpenDefinitionsDocument d = aoe.getOpenDocument();", "+        retDocs.add(d);", "+        alreadyOpenDocuments.add(d);", "+      }", "-      addDocToNavigator(d);", "-      addDocToClassPath(d);", "-      _notifier.fileOpened(d);", "+      _completeOpenFile(d); // contains view-related calls", "-    ", "-    if (storedAOE != null) throw storedAOE;", "+    if (!alreadyOpenDocuments.isEmpty()) {", "+      for(OpenDefinitionsDocument d : alreadyOpenDocuments) {", "+        _notifier.handleAlreadyOpenDocument(d);", "+        _notifier.fileOpened(d);", "+      }", "+    }                                   ", "-    if (retDoc != null) return retDoc;", "+    if (retDocs != null) {", "+      return retDocs.toArray(new OpenDefinitionsDocument[0]);", "+    }"]}], "num": 19543}
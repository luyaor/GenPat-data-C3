{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "496fff8e61200c2e5f75bd1bb5efbda6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d27c9958c906c6dd06cb23af68c41d38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BreakpointsPanel.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public BreakpointsPanel(MainFrame frame)", "signatureAfterChange": "   public BreakpointsPanel(MainFrame frame)", "diff": ["-    ", "-    this.setLayout(new BorderLayout());", "-    ", "-    _frame = frame;", "-    _model = frame.getModel();", "-    _debugger = _model.getDebugger();", "-    ", "-    /******** Initialize the panels containing the checkboxes ********/", "-    this.removeAll(); // actually, override the behavior of TabbedPanel", "-", "-    // remake closePanel", "-    _closePanel = new JPanel(new BorderLayout());", "-    _closePanel.add(_closeButton, BorderLayout.NORTH);", "-    ", "-    _leftPane = new JPanel(new BorderLayout());", "-    _setupBreakpointTree();", "-    ", "-    this.add(_leftPane, BorderLayout.CENTER);", "-    ", "-    _buttonPanel = new JPanel(new BorderLayout());", "-    _setupButtonPanel();", "-    this.add(_buttonPanel, BorderLayout.EAST);", "-    ", "-    _debugger.addListener(new BreakpointsPanelListener());", "-    ", "-    // Setup the color listeners.", "-    _setColors(_bpTree);", "-  }", "+    _model.getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+      /** Called when a breakpoint is set in a document. Adds the breakpoint to the tree of breakpoints.", "+       *  Must be executed in event thread.", "+       *  @param bp the breakpoint", "+       */", "+      public void regionAdded(final Breakpoint bp) { addRegion(bp); }", "+      ", "+      /**", "+       * Called when a breakpoint is changed.", "+       * Removes the breakpoint from the tree of breakpoints.", "+       * @param bp the breakpoint", "+       */", "+      public void regionChanged(final Breakpoint bp) {", "+        // Only change GUI from event-dispatching thread", "+        Runnable doCommand = new Runnable() {", "+          public void run() {", "+            String name = \"\";", "+            try {", "+              name = bp.getDocument().getQualifiedClassName();", "+            }", "+            catch (ClassNameNotFoundException cnnfe) {", "+              name = bp.getDocument().toString();", "+            }", "+            ", "+            DefaultMutableTreeNode regDocNode = new DefaultMutableTreeNode(name);", "+            ", "+            // Find the document node for this region", "+            Enumeration documents = _regionRootNode.children();", "+            boolean found = false;", "+            while ((!found) && (documents.hasMoreElements())) {", "+              DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+              if (doc.getUserObject().equals(regDocNode.getUserObject())) {", "+                // Find the correct line number node for this breakpoint", "+                Enumeration lineNumbers = doc.children();", "+                while (lineNumbers.hasMoreElements()) {", "+                  DefaultMutableTreeNode lineNumber = (DefaultMutableTreeNode)lineNumbers.nextElement();", "+                  @SuppressWarnings(\"unchecked\") RegionTreeUserObj<Breakpoint> uo = (RegionTreeUserObj<Breakpoint>)lineNumber.getUserObject();", "+                  if (uo.lineNumber()==(bp.getDocument().getLineOfOffset(bp.getStartOffset())+1)) {", "+                    Breakpoint r = (Breakpoint) uo.region();", "+                    if (r instanceof Breakpoint) {", "+                      ((Breakpoint)r).setEnabled(bp.isEnabled());", "+                      ((DefaultTreeModel)_regTree.getModel()).nodeChanged(lineNumber);", "+                      found = true;", "+                      break;", "+                    }", "+                  }", "+                }", "+              }", "+            }", "+            updateButtons();", "+          }", "+        };", "+        Utilities.invokeLater(doCommand);", "+      }", "+      ", "+      /**", "+       * Called when a breakpoint is removed from a document.", "+       * Removes the breakpoint from the tree of breakpoints.", "+       * @param bp the breakpoint", "+       */", "+      public void regionRemoved(final Breakpoint bp) {", "+        removeRegion(bp);", "+    _debugger = _model.getDebugger();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecf1ee12cc529cb155b701b3b81ff36d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BreakpointsPanel.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void breakpointChanged(final Breakpoint bp)", "signatureAfterChange": "       public void regionChanged(final Breakpoint bp)", "diff": ["+       */", "+      public void regionChanged(final Breakpoint bp) {", "+        // Only change GUI from event-dispatching thread", "+        Runnable doCommand = new Runnable() {", "+          public void run() {", "+            String name = \"\";", "+            try {", "+              name = bp.getDocument().getQualifiedClassName();", "+            }", "+            catch (ClassNameNotFoundException cnnfe) {", "+              name = bp.getDocument().toString();", "+            }", "+            ", "+            DefaultMutableTreeNode regDocNode = new DefaultMutableTreeNode(name);", "+            ", "+            // Find the document node for this region", "+            Enumeration documents = _regionRootNode.children();", "+            boolean found = false;", "+            while ((!found) && (documents.hasMoreElements())) {", "+              DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+              if (doc.getUserObject().equals(regDocNode.getUserObject())) {", "+                // Find the correct line number node for this breakpoint", "+                Enumeration lineNumbers = doc.children();", "+                while (lineNumbers.hasMoreElements()) {", "+                  DefaultMutableTreeNode lineNumber = (DefaultMutableTreeNode)lineNumbers.nextElement();", "+                  @SuppressWarnings(\"unchecked\") RegionTreeUserObj<Breakpoint> uo = (RegionTreeUserObj<Breakpoint>)lineNumber.getUserObject();", "+                  if (uo.lineNumber()==(bp.getDocument().getLineOfOffset(bp.getStartOffset())+1)) {", "+                    Breakpoint r = (Breakpoint) uo.region();", "+                    if (r instanceof Breakpoint) {", "+                      ((Breakpoint)r).setEnabled(bp.isEnabled());", "+                      ((DefaultTreeModel)_regTree.getModel()).nodeChanged(lineNumber);", "+                      found = true;", "+                      break;", "+                    }", "+                  }", "+                }", "+              }", "+            }", "+            updateButtons();", "+          }", "+        };", "+        Utilities.invokeLater(doCommand);", "+      }", "-     */", "-    public void breakpointChanged(final Breakpoint bp) {", "-      // Only change GUI from event-dispatching thread", "-      Runnable doCommand = new Runnable() {", "-        public void run() {", "-          DefaultMutableTreeNode bpDocNode = new DefaultMutableTreeNode(bp.getClassName());", "-          ", "-          // Find the document node for this breakpoint", "-          Enumeration documents = _breakpointRootNode.children();", "-          boolean found = false;", "-          while ((!found) && (documents.hasMoreElements())) {", "-            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-            if (doc.getUserObject().equals(bpDocNode.getUserObject())) {", "-              // Find the correct line number node for this breakpoint", "-              Enumeration lineNumbers = doc.children();", "-              while (lineNumbers.hasMoreElements()) {", "-                DefaultMutableTreeNode lineNumber =", "-                  (DefaultMutableTreeNode)lineNumbers.nextElement();", "-                BPTreeUserObj uo = (BPTreeUserObj)lineNumber.getUserObject();", "-                if (uo.lineNumber()==bp.getLineNumber()) {", "-                  uo.setEnabled(bp.isEnabled());", "-                  ((DefaultTreeModel)_bpTree.getModel()).nodeChanged(lineNumber);", "-                  found = true;", "-                  break;", "-                }", "-              }", "-            }", "-          }", "-          _updateButtons();", "-        }", "-      };", "-      Utilities.invokeLater(doCommand);", "-    }"]}], "num": 26573}
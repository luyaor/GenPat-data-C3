{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "998f0d644d0287c5b9ecdb81a8be7924", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c2ac2abf7e7b80b0193c089696325b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/FileFinderTest.java", "commitBeforeChange": "536afaee0374767d0f8bdf572a332576e3f54467", "commitAfterChange": "222f5adcb4ec2d8c8823733053796b612dc57603", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testFindFile()", "signatureAfterChange": "      public void testFindFile()", "diff": ["-    File thisFile;", "-    File noFile;", "+", "+    assertNotFound(\"Empty1.java\");", "+    assertNotFound(\"Empty2.java\");", "+    assertNotFound(\"file.doesnotexist\");", "-    //When running the ant script for testing this is the relative path to the directory that contains this file", "-    ff.addPath(\"dynamicjava/util/\");", "+    ff.addPath(\"testFiles/someDir1/\");", "-    //Try to find a file that does exist, namely this current file", "+    assertFound(\"Empty1.java\");", "+    assertNotFound(\"Empty2.java\");", "+    assertNotFound(\"file.doesnotexist\");", "+    ", "+    ff.addPath(\"testFiles/someDir2\");", "+", "+    assertFound(\"Empty1.java\");", "+    assertFound(\"Empty2.java\");", "+    assertNotFound(\"file.doesnotexist\");", "+", "+  }", "-      thisFile = ff.findFile(\"FileFinderTest.java\");", "-      assertTrue(\"Found This File\", thisFile != null);", "-    catch(IOException ioe) {", "-    ", "-    //When running the ant script for testing this is the relative path to the directory that contains this file", "-    ff.addPath(\"dynamicjava/interpreter\");", "-    ", "-    //Try to find a file that does exist, namely this current file", "-    try {", "-      thisFile = ff.findFile(\"Interpreter.java\");", "-      assertTrue(\"Found This File\", thisFile != null);", "-    }", "-    catch(IOException ioe) {", "-      fail();", "-    }", "-    ", "-    ", "-    //Try to find a file that does not exist", "-    try {", "-      noFile = ff.findFile(\"file.doesnotexist\");", "-      fail();", "-    }", "-    catch(IOException fnf) {", "-      assertEquals(\"File Not Found\", \"File Not Found: file.doesnotexist\", fnf.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76d6fcddbb968edc90364026693114e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOpsTest.java", "commitBeforeChange": "a3b94da025d35ad7aeb4080660309a66820eaabc", "commitAfterChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testSaveFile() throws IOException", "signatureAfterChange": "   public void testSaveFile() throws IOException", "diff": ["-    } catch (IOException ioe){}//do nothing, this is expected", "+    } ", "+    catch (IOException ioe){}//do nothing, this is expected", "-    } catch(IOException ioe){} //do nothing, we expected this", "+    }", "+    catch(IOException ioe){} //do nothing, we expected this", "+    ", "+    // Make sure that the backup file no longer exists since it was ", "+    // copied over the original", "+    try {", "+      FileOps.readFileAsString(backup);", "+      fail(\"The backup file should no longer exist.\");", "+    }", "+    catch(FileNotFoundException e) {} //do nothing, we expected this", "+    ", "+    // Test that save fails if the file is write-protected.", "+    writeTo.setReadOnly();", "+    try {", "+      FileOps.saveFile(new FileOps.DefaultFileSaver(writeTo) {", "+        public boolean shouldBackup () {", "+          return true;", "+        }", "+        public void saveTo(OutputStream os) throws IOException {", "+          String output =  \"version 6\";", "+          os.write(output.getBytes());", "+        }", "+      });", "+      fail(\"The file to be saved was read-only!\");", "+    }", "+    catch(IOException ioe){} //do nothing, we expected this", "+    assertEquals(\"failed save6 w backup\", \"version 3\",", "+                 FileOps.readFileAsString(writeTo));", "+    ", "+    // Make sure that the backup file still doesn't exist since the file", "+    // was read-only.", "+    try {", "+      FileOps.readFileAsString(backup);", "+      fail(\"The backup file should no longer exist.\");", "+    }", "+    catch(FileNotFoundException e) {} //do nothing, we expected this"]}], "num": 23005}
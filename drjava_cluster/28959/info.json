{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2deaa0ffea9331bf1d0f1e2d3d8174c4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d7031edee7a0ae1db9e31b4c23624eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public Type visit(VariableDeclaration node)", "signatureAfterChange": "   public Class<?> visit(VariableDeclaration node)", "diff": ["-  public Type visit(VariableDeclaration node) {", "+  public Class<?> visit(VariableDeclaration node) {", "-    Type lc = node.getType().acceptVisitor(this);", "-    if (node.isFinal()) context.defineConstant(node.getName(), lc);", "-    else context.define(node.getName(), lc);", "-    ", "+    Class<?> lc = node.getType().acceptVisitor(this);", "+    if (node.isFinal()) {", "+      context.defineConstant(node.getName(), lc);", "+    } ", "+    else {", "+      context.define(node.getName(), lc);", "+    }", "+", "-      Type rc = init.acceptVisitor(this);", "+      Class<?> rc = init.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a19167b8c61ba6905f47044411ce5f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public Class<?> visit(VariableDeclaration node)", "signatureAfterChange": "   public Type visit(VariableDeclaration node)", "diff": ["-  public Class<?> visit(VariableDeclaration node) {", "+  public Type visit(VariableDeclaration node) {", "-    Class<?> lc = node.getType().acceptVisitor(this);", "-    if (node.isFinal()) {", "-      context.defineConstant(node.getName(), lc);", "-    } ", "-    else {", "-      context.define(node.getName(), lc);", "-    }", "-", "+    Type lc = node.getType().acceptVisitor(this);", "+    if (node.isFinal()) context.defineConstant(node.getName(), lc);", "+    else context.define(node.getName(), lc);", "+    ", "-      Class<?> rc = init.acceptVisitor(this);", "+      Type rc = init.acceptVisitor(this);"]}], "num": 28959}
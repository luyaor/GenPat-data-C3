{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a89ac81754b8d0149dfb94e26ebb4219", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e8fe7e07c596bb2e0a4111fd85a231", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DrJavaTestCaseClassLoader.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  private void readExcludedPackages()", "signatureAfterChange": "   private void readExcludedPackages()", "diff": ["-  */", "- private void readExcludedPackages() {  ", "-  fExcluded= new Vector<String>(10);", "-  for (int i= 0; i < defaultExclusions.length; i++)", "-   fExcluded.addElement(defaultExclusions[i]);", "-   ", "-  InputStream is= getClass().getResourceAsStream(EXCLUDED_FILE);", "-  if (is == null) ", "-   return;", "-  Properties p= new Properties();", "-  try {", "-   p.load(is);", "-  catch (IOException e) {", "-   return;", "-  } finally {", "-   try {", "-    is.close();", "-   } catch (IOException e) {", "-   }", "-  for (Enumeration e= p.propertyNames(); e.hasMoreElements(); ) {", "-   String key= (String)e.nextElement();", "-   if (key.startsWith(\"excluded.\")) {", "-    String path= p.getProperty(key);", "-    path= path.trim();", "-    if (path.endsWith(\"*\"))", "-     path= path.substring(0, path.length()-1);", "-    if (path.length() > 0) ", "-     fExcluded.addElement(path);    ", "-   }", "- }", "+   */", "+  private void readExcludedPackages() {  ", "+    fExcluded = new Vector<String>(10);", "+    for (String de: defaultExclusions) fExcluded.addElement(de);", "+    ", "+    InputStream is = getClass().getResourceAsStream(EXCLUDED_FILE);", "+    if (is == null) return;", "+    Properties p = new Properties();", "+    try { p.load(is); }", "+    catch (IOException e) { return; } ", "+    finally {", "+      try { is.close(); } ", "+      catch (IOException e) {", "+        /* do nothing */", "+      }", "+    }", "+    Enumeration<String> pnames = (Enumeration<String>) p.propertyNames();", "+    while (pnames.hasMoreElements()) {", "+      String key = pnames.nextElement();", "+      if (key.startsWith(\"excluded.\")) {", "+        String path = p.getProperty(key);", "+        path = path.trim();", "+        if (path.endsWith(\"*\")) path= path.substring(0, path.length()-1);", "+        if (path.length() > 0) fExcluded.addElement(path);    ", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e28dd85bc2d81b62f000f19cd5da19dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public synchronized boolean selectDocumentAt(int x, int y)", "signatureAfterChange": "   public boolean selectDocumentAt(int x, int y)", "diff": ["-  public synchronized boolean selectDocumentAt(int x, int y) {", "-    TreePath path = getPathForLocation(x, y);", "-    if (path == null) return false;", "-    else {", "-      DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();", "-      if (node instanceof LeafNode) {", "-        this.expandPath(path);", "-        this.setSelectionPath(path);", "-        this.scrollPathToVisible(path);", "-        return true;", "-      } ", "-      else if (node instanceof InnerNode) {", "-        this.expandPath(path);", "-        this.setSelectionPath(path);", "-        this.scrollPathToVisible(path);", "-        return true;", "-      } ", "-      else if (node instanceof RootNode) {", "-        this.expandPath(path);", "-        this.setSelectionPath(path);", "-        this.scrollPathToVisible(path);", "-        return true;", "-      } ", "-      else return false;", "+  public boolean selectDocumentAt(int x, int y) {", "+    synchronized (_model) {", "+      TreePath path = getPathForLocation(x, y);", "+      if (path == null) return false;", "+      else {", "+        DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();", "+        if (node instanceof LeafNode) {", "+          this.expandPath(path);", "+          this.setSelectionPath(path);", "+          this.scrollPathToVisible(path);", "+          return true;", "+        } ", "+        else if (node instanceof InnerNode) {", "+          this.expandPath(path);", "+          this.setSelectionPath(path);", "+          this.scrollPathToVisible(path);", "+          return true;", "+        } ", "+        else if (node instanceof RootNode) {", "+          this.expandPath(path);", "+          this.setSelectionPath(path);", "+          this.scrollPathToVisible(path);", "+          return true;", "+        } ", "+        else return false;", "+      }"]}], "num": 6683}
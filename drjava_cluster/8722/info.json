{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f23c260354dcf5bb2dd5429b4a3d8c58", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f6c57da450b87f83d50bde0abce0f63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 360, "methodNumberAfterChange": 357, "signatureBeforeChange": "          public void threadLocationUpdated(final OpenDefinitionsDocument doc,                                       final int lineNumber,                                       final boolean shouldHighlight)", "signatureAfterChange": "     public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,                                       final boolean shouldHighlight)", "diff": ["-    public void threadLocationUpdated(final OpenDefinitionsDocument doc,", "-                                      final int lineNumber,", "+     */", "+    public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,", "-      // Only change GUI from event-dispatching thread", "-      Runnable command = new Runnable() {", "-        public void run() {", "+//      Utilities.invokeLater(new Runnable() {", "+//        public void run() {", "-          ActionListener setSizeListener = new ActionListener() {", "-            public void actionPerformed(ActionEvent ae) {", "-              _currentDefPane.centerViewOnLine(lineNumber);", "-            }", "-          };", "-          _currentDefPane.addSetSizeListener(setSizeListener);", "+//          ActionListener setSizeListener = new ActionListener() {", "+//            public void actionPerformed(ActionEvent ae) {", "+//              Utilities.showDebug(\"custon setSizeListener called in MainFrame with event \" + ae);", "+//              _currentDefPane.centerViewOnLine(lineNumber);", "+//              _currentDefPane.requestFocusInWindow();", "+//            }", "+//          };", "+//          _currentDefPane.addSetSizeListener(setSizeListener);", "-//          if (!_model.getActiveDocument().equals(doc)) ", "-            _model.setActiveDocument(doc);", "+          if (!_model.getActiveDocument().equals(doc)) _model.setActiveDocument(doc);", "+          else _model.refreshActiveDocument();", "-            _currentDefPane.centerViewOnLine(lineNumber);", "-            _currentDefPane.requestFocusInWindow();", "+//            SwingUtilities.invokeLater(new Runnable() {  ", "+//              public void run() {", "+//                Utilities.showDebug(\"Getting ready to reset defintions pane\");", "+                _currentDefPane.centerViewOnLine(lineNumber);", "+                _currentDefPane.requestFocusInWindow();", "+//              }", "+//            });", "-          if (shouldHighlight) {", "-            _removeThreadLocationHighlight();", "-            int startOffset = doc.getOffset(lineNumber);", "-            if (startOffset > -1) {", "-              int endOffset = doc.getLineEndPos(startOffset);", "-              if (endOffset > -1) {", "-                _currentThreadLocationHighlight =", "-                  _currentDefPane.getHighlightManager().", "-                  addHighlight(startOffset, endOffset, DefinitionsPane.THREAD_PAINTER);", "+          SwingUtilities.invokeLater(new Runnable() {  ", "+          /* The execution of this block of code is deferred to fix bug #1243993.  It is not clear why this deferral", "+           * works. */", "+            public void run() {", "+              if (shouldHighlight) {", "+                _removeThreadLocationHighlight();", "+                int startOffset = doc.getOffset(lineNumber);", "+                if (startOffset > -1) {", "+                  int endOffset = doc.getLineEndPos(startOffset);", "+                  if (endOffset > -1) {", "+                    _currentThreadLocationHighlight =", "+                      _currentDefPane.getHighlightManager().", "+                      addHighlight(startOffset, endOffset, DefinitionsPane.THREAD_PAINTER);", "+                  }", "+                }", "+              ", "+              if (doc.isModifiedSinceSave() && !_currentDefPane.hasWarnedAboutModified()) {", "+                ", "+                _showDebuggingModifiedFileWarning();", "+                ", "+                //no need to update flag, because previous method call will do it", "+                //_hasWarnedAboutModified = true;", "+              }", "+              if (shouldHighlight) {", "+                // Give the interactions pane focus so we can debug", "+                _interactionsPane.requestFocusInWindow();", "+              }", "+              showTab(_interactionsPane);", "+              _updateDebugStatus();", "-          }", "-          ", "-          if (doc.isModifiedSinceSave() && !_currentDefPane.hasWarnedAboutModified()) {", "-            ", "-            _showDebuggingModifiedFileWarning();", "-            ", "-            //no need to update flag, because previous method call will do it", "-            //_hasWarnedAboutModified = true;", "-          }", "-          if (shouldHighlight) {", "-            // Give the interactions pane focus so we can debug", "-            _interactionsPane.requestFocusInWindow();", "-          }", "-          showTab(_interactionsPane);", "-          _updateDebugStatus();", "-        }", "-      };", "-      Utilities.invokeLater(command);", "+          });", "+//        }", "+//      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "632161910d6b32f390cc9606b43bb9da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 415, "methodNumberAfterChange": 433, "signatureBeforeChange": "     public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,                                       final boolean shouldHighlight)", "signatureAfterChange": "     public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight)", "diff": ["-     */", "-    public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,", "-                                      final boolean shouldHighlight) {", "-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() {", "-          // This listener is used when the document to display is", "-          // not the active document. In this case, when setActiveDocument", "-          // is called, the document won't yet have positive size and we", "-          // don't want to scroll to a line until it does, so we wait", "-          // for a call to setSize.", "-          ", "-//          ActionListener setSizeListener = new ActionListener() {", "-//            public void actionPerformed(ActionEvent ae) {", "-//              Utilities.showDebug(\"custon setSizeListener called in MainFrame with event \" + ae);", "-//              _currentDefPane.centerViewOnLine(lineNumber);", "-//              _currentDefPane.requestFocusInWindow();", "-//            }", "-//          };", "-//          _currentDefPane.addSetSizeListener(setSizeListener);", "-          ", "-          if (!_model.getActiveDocument().equals(doc)) _model.setActiveDocument(doc);", "-          else _model.refreshActiveDocument();", "-          ", "-          // this block occurs if the documents is already open and as such", "-          // has a positive size", "-          if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {", "-//            SwingUtilities.invokeLater(new Runnable() {  ", "-//              public void run() {", "-//                Utilities.showDebug(\"Getting ready to reset defintions pane\");", "-                _currentDefPane.centerViewOnLine(lineNumber);", "-                _currentDefPane.requestFocusInWindow();", "-//              }", "-//            });", "-          }", "-          ", "-          /* The execution of this block of code is deferred using SwingUtilties to fix bug #1243993.  It is not clear ", "-           * why this deferral works. */", "-          SwingUtilities.invokeLater(new Runnable() {  ", "-            public void run() {", "-              if (shouldHighlight) {", "-                _removeThreadLocationHighlight();", "-                int startOffset = doc.getOffset(lineNumber);", "-                if (startOffset > -1) {", "-                  int endOffset = doc.getLineEndPos(startOffset);", "-                  if (endOffset > -1) {", "-                    _currentThreadLocationHighlight =", "-                      _currentDefPane.getHighlightManager().", "-                      addHighlight(startOffset, endOffset, DefinitionsPane.THREAD_PAINTER);", "-                  }", "-                }", "-              }", "-              ", "-              if (doc.isModifiedSinceSave() && !_currentDefPane.hasWarnedAboutModified()) {", "-                ", "-                _showDebuggingModifiedFileWarning();", "-                ", "-                //no need to update flag, because previous method call will do it", "-                //_hasWarnedAboutModified = true;", "-              }", "-              if (shouldHighlight) {", "-                // Give the interactions pane focus so we can debug", "-                _interactionsPane.requestFocusInWindow();", "-                showTab(_interactionsPane);", "-              }", "-              _updateDebugStatus();", "-            }", "-          });", "-//        }", "-//      });", "-    }", "+     */", "+    public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) {", "+      scrollToDocumentAndLine(doc, lineNumber, shouldHighlight);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4f3fc6f52a5942fd2be81269cdb022f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "304bb61899a16b4e87269d9bb4c4a3ecbf1bc6d4", "commitAfterChange": "efc072ede22ea55faaadbf97a73c4466d939ffd3", "methodNumberBeforeChange": 427, "methodNumberAfterChange": 427, "signatureBeforeChange": "   public void scrollToDocumentAndLine(final OpenDefinitionsDocument doc, final int lineNumber, final boolean shouldHighlight)", "signatureAfterChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset, final boolean shouldHighlight)", "diff": ["-  public void scrollToDocumentAndLine(final OpenDefinitionsDocument doc, final int lineNumber, final boolean shouldHighlight) {", "-//    Utilities.invokeLater(new Runnable() {", "-//    public void run() {", "-    // This listener is used when the document to display is", "-    // not the active document. In this case, when setActiveDocument", "-    // is called, the document won't yet have positive size and we", "-    // don't want to scroll to a line until it does, so we wait", "-    // for a call to setSize.", "-    ", "-//    ActionListener setSizeListener = new ActionListener() {", "-//      public void actionPerformed(ActionEvent ae) {", "-//        Utilities.showDebug(\"custon setSizeListener called in MainFrame with event \" + ae);", "-//        _currentDefPane.centerViewOnLine(lineNumber);", "-//        _currentDefPane.requestFocusInWindow();", "-//      }", "-//    };", "-//    _currentDefPane.addSetSizeListener(setSizeListener);", "-    ", "+  public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset, final boolean shouldHighlight) {", "-    // this block occurs if the documents is already open and as such", "-    // has a positive size", "-    if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {", "-//      SwingUtilities.invokeLater(new Runnable() {  ", "-//        public void run() {", "-//          Utilities.showDebug(\"Getting ready to reset defintions pane\");", "-          _currentDefPane.centerViewOnLine(lineNumber);", "-          _currentDefPane.requestFocusInWindow();", "-//        }", "-//      });", "-    }", "-    ", "-    /* The execution of this block of code is deferred using SwingUtilties to fix bug #1243993.  It is not clear ", "-     * why this deferral works. */", "+        // get the line number after the switch of documents was made", "+        int lineNumber = doc.getLineOfOffset(offset)+1;", "+        ", "+        // this block occurs if the documents is already open and as such", "+        // has a positive size", "+        if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {      ", "+          _currentDefPane.centerViewOnOffset(offset);", "+          _currentDefPane.requestFocusInWindow();", "+        }", "+        ", "+        /* The execution of this block of code is deferred using SwingUtilties to fix bug #1243993.", "+         * It is not clear why this deferral works.", "+         * Comment by mgricken: Probably because the _currentDefPane hasn't been created yet for", "+         * a new document. That's why I had to move the code above into this Runnable. If this", "+         * method was called for a yet unseen document, the document would be switched, but the cursor", "+         * would not be positioned correctly. */", "-              _currentThreadLocationHighlight =", "-                _currentDefPane.getHighlightManager().", "+              _currentThreadLocationHighlight = _currentDefPane.getHighlightManager().", "-//      }", "-//    });"]}], "num": 8722}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "079eadd20782c982a1aeee78492f641c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "058b19663b6ef8f20a2e696fd414ce6e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "               public void testCreateMethodData()", "signatureAfterChange": "               public void testCreateMethodData()", "diff": ["-      MethodDef mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      MethodDef mdef = new ConcreteMethodDef(NO_INFO, ", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                    new PrimitiveType(NO_INFO, \"int\"), ", "+                                                    new Word(NO_INFO, \"methodName\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct.\", \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct.\", ", "+                   \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(0).getFirst());", "-      mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      mdef = new ConcreteMethodDef(NO_INFO, ", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName2\"),", "+                                                    new PrimitiveType(NO_INFO, \"int\"), ", "+                                                    new Word(NO_INFO, \"methodName2\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-", "-      mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "-                                   _abstractMav, ", "-                                   new TypeParameter[] { new TypeParameter(JExprParser.NO_SOURCE_INFO,", "-                                                                           new TypeVariable(JExprParser.NO_SOURCE_INFO, \"T\"),", "-                                                                           new TypeVariable(JExprParser.NO_SOURCE_INFO, \"U\"))},", "-                                   new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                   new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "-                                   new FormalParameter[] {", "-                                     new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                                                         new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                                                                             new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-                                                         false", "-                                                           ),", "-                                     new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                                                         new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                                                             new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-                                                         false", "-                                                           )},", "-                                   new ReferenceType[] { new TypeVariable(JExprParser.NO_SOURCE_INFO, \"X\") }", "-                                   );", "-                                   mdata = new MethodData(\"methodName\", ", "-                                                          _abstractMav, ", "-                                                          new TypeParameter[] { new TypeParameter(JExprParser.NO_SOURCE_INFO,", "-                                                                                                  new TypeVariable(JExprParser.NO_SOURCE_INFO, \"T\"),", "-                                                                                                  new TypeVariable(JExprParser.NO_SOURCE_INFO, \"U\"))}, ", "-                                                          SymbolData.VOID_TYPE, ", "-                                                          new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "-                                                            new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "-                                                          new String[] { \"X\" },", "-                                                          _sd1,", "-                                                          null);", "-                                                          ", "-                                                          mdata.getParams()[0].setEnclosingData(mdata);", "-                                                          mdata.getParams()[1].setEnclosingData(mdata);", "+      UninitializedVariableDeclarator vd1 = ", "+         new UninitializedVariableDeclarator(NO_INFO, new PrimitiveType(NO_INFO, \"double\"), new Word(NO_INFO, \"field1\"));", "+      UninitializedVariableDeclarator vd2 = ", "+         new UninitializedVariableDeclarator(NO_INFO, new PrimitiveType(NO_INFO, \"int\"), new Word(NO_INFO, \"field1\"));", "+      mdef = ", "+        new AbstractMethodDef(NO_INFO, ", "+                              _abstractMav, ", "+                              new TypeParameter[] { new TypeParameter(NO_INFO,", "+                                                                      new TypeVariable(NO_INFO, \"T\"),", "+                                                                      new TypeVariable(NO_INFO, \"U\"))},", "+                              new VoidReturn(NO_INFO, \"void\"), ", "+                              new Word(NO_INFO, \"methodName\"),", "+                              new FormalParameter[] {", "+                                new FormalParameter(NO_INFO, vd1, false),", "+                                new FormalParameter(NO_INFO, vd2, false)},", "+                              new ReferenceType[] { new TypeVariable(NO_INFO, \"X\") }", "+                              );", "+      mdata =", "+        new MethodData(\"methodName\", ", "+                       _abstractMav, ", "+                       new TypeParameter[] { new TypeParameter(NO_INFO,", "+                                                               new TypeVariable(NO_INFO, \"T\"),", "+                                                               new TypeVariable(NO_INFO, \"U\"))}, ", "+                       SymbolData.VOID_TYPE, ", "+                       new VariableData[] { ", "+                         new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "+                         new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "+                       new String[] { \"X\" },", "+                       _sd1,", "+                       null);", "+      ", "+      mdata.getParams()[0].setEnclosingData(mdata);", "+      mdata.getParams()[1].setEnclosingData(mdata);", "-", "-           MethodData expectedMethod = _av.createMethodData(mdef, _sd1);", "-           ", "-           // have to add the parameters to the vars manually", "-           mdata.getParams()[0].setEnclosingData(expectedMethod);", "-           mdata.getParams()[1].setEnclosingData(expectedMethod);", "-           mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, expectedMethod) });  ", "-           assertEquals(\"Should return the correct MethodData\", mdata, expectedMethod);", "-           assertEquals(\"There should be 2 errors.\", 2, errors.size());", "-           assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());", "+      ", "+      MethodData expectedMethod = _av.createMethodData(mdef, _sd1);", "+      ", "+      // have to add the parameters to the vars manually", "+      mdata.getParams()[0].setEnclosingData(expectedMethod);", "+      mdata.getParams()[1].setEnclosingData(expectedMethod);", "+      mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, ", "+                                                          expectedMethod) });  ", "+      assertEquals(\"Should return the correct MethodData\", mdata, expectedMethod);", "+      assertEquals(\"There should be 2 errors.\", 2, errors.size());", "+      assertEquals(\"The second error message should be correct.\", ", "+                   \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ab5935037198e30a482e2f12e462296", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "          public void testForClassDef()", "signatureAfterChange": "          public void testForClassDef()", "diff": ["-      ClassDef cd0 = new ClassDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Lisa\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"Object\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0])); ", "+      ClassDef cd0 =", "+        new ClassDef(NO_INFO, _packageMav, ", "+                     new Word(NO_INFO, \"Lisa\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NO_INFO, \"Object\", new Type[0]),", "+                     new ReferenceType[0], ", "+                     new BracedBody(NO_INFO, new BodyItemI[0])); ", "-      ClassDef cd1 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"Bart\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"System\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd1 = ", "+        new ClassDef(NO_INFO, _abstractMav, ", "+                     new Word(NO_INFO, \"Bart\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NO_INFO, \"System\", new Type[0]), ", "+                     new ReferenceType[0], ", "+                     new BracedBody(NO_INFO, new BodyItemI[0]));", "-      ConcreteMethodDef cmd = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      ConcreteMethodDef cmd = new ConcreteMethodDef(NO_INFO, ", "-                                                    new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"testMethodName\"),", "+                                                    new VoidReturn(NO_INFO, \"void\"), ", "+                                                    new Word(NO_INFO, \"testMethodName\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-      ClassDef cd3 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"TestSuper2\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"TestCase\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {cmd}));", "+      ClassDef cd3 = new ClassDef(NO_INFO, _abstractMav,", "+                                  new Word(NO_INFO, \"TestSuper2\"),", "+                                  new TypeParameter[0], ", "+                                  new ClassOrInterfaceType(NO_INFO, \"TestCase\", new Type[0]), new ReferenceType[0], ", "+                                  new BracedBody(NO_INFO, new BodyItemI[] {cmd}));", "-      ConcreteMethodDef cmd2 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      ConcreteMethodDef cmd2 = new ConcreteMethodDef(NO_INFO, ", "-                                                    new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"uhOh\"),", "+                                                    new VoidReturn(NO_INFO, \"void\"), ", "+                                                    new Word(NO_INFO, \"uhOh\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-      ClassDef cd4 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"TestVoidNoTestMethod\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"junit.framework.TestCase\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {cmd2}));", "-", "-", "-", "+      ClassDef cd4 =", "+        new ClassDef(NO_INFO, _abstractMav, ", "+                     new Word(NO_INFO, \"TestVoidNoTestMethod\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NO_INFO, \"junit.framework.TestCase\", new Type[0]), new ReferenceType[0], ", "+                     new BracedBody(NO_INFO, new BodyItemI[] {cmd2}));", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41815b87881bed757cfb2eea58c95536", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryVisitor.java", "commitBeforeChange": "5e7a16013fcb5945eddc036e2d2d0ce3e14ba2d0", "commitAfterChange": "e1389ddb9dcb8a7d3a230cc1be322481e1c8fd6a", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "               public void testForClassDef()", "signatureAfterChange": "               public void testForClassDef()", "diff": ["-      ClassDef cd0 = new ClassDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Lisa\"),", "-                                  new TypeParameter[0], JExprParser.NO_TYPE, new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd0 = new ClassDef(_noSourceInfo, _packageMav, new Word(_noSourceInfo, \"Lisa\"),", "+                                  new TypeParameter[0], _noType, new ReferenceType[0], ", "+                                  new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-", "+      ", "+      VariableData vd1 = new VariableData(_bv.getSymbolData(\"Object\", _bv._makeSourceInfo(\"java.lang.Object\"), true));", "-                                   _publicMav, ", "-                                   new TypeParameter[0], ", "-                                   SymbolData.BOOLEAN_TYPE, ", "-                                     new VariableData[] { new VariableData(_bv.getSymbolData(\"Object\", _bv._makeSourceInfo(\"java.lang.Object\"), true)) },", "-                                   new String[0], ", "-                                   sd,", "-                                   null);", "+                                      _publicMav, ", "+                                      new TypeParameter[0], ", "+                                      SymbolData.BOOLEAN_TYPE, ", "+                                      new VariableData[] {vd1},", "+                                      new String[0], ", "+                                      sd,", "+                                      null);", "-      ClassDef cd1 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"Bart\"),", "-                                  new TypeParameter[0], JExprParser.NO_TYPE, new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd1 = new ClassDef(_noSourceInfo, _abstractMav, new Word(_noSourceInfo, \"Bart\"),", "+                                  new TypeParameter[0], _noType, new ReferenceType[0], ", "+                                  new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      ConcreteMethodDef cmd = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      ConcreteMethodDef cmd = new ConcreteMethodDef(_noSourceInfo, ", "-                                                     new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                                     new Word(JExprParser.NO_SOURCE_INFO, \"testMethodName\"),", "+                                                     new VoidReturn(_noSourceInfo, \"void\"), ", "+                                                     new Word(_noSourceInfo, \"testMethodName\"),", "-                                                     new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                     new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      ClassDef cd3 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"TestSuper2\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"TestCase\", new Type[0]), ", "+      ClassDef cd3 = new ClassDef(_noSourceInfo, _abstractMav, new Word(_noSourceInfo, \"TestSuper2\"),", "+                                  new TypeParameter[0], new ClassOrInterfaceType(_noSourceInfo, \"TestCase\", new Type[0]), ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {cmd}));", "+                                  new BracedBody(_noSourceInfo, new BodyItemI[] {cmd}));", "-      ConcreteMethodDef cmd2 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      ConcreteMethodDef cmd2 = new ConcreteMethodDef(_noSourceInfo, ", "-                                                    new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"testMethodName\"),", "+                                                    new VoidReturn(_noSourceInfo, \"void\"), ", "+                                                    new Word(_noSourceInfo, \"testMethodName\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      ClassDef cd4 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"TestSuper3\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"TestCase\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {cmd2}));", "+      ClassDef cd4 = ", "+        new ClassDef(_noSourceInfo, _abstractMav, new Word(_noSourceInfo, \"TestSuper3\"), new TypeParameter[0], ", "+                     new ClassOrInterfaceType(_noSourceInfo, \"TestCase\", new Type[0]), new ReferenceType[0], ", "+                     new BracedBody(_noSourceInfo, new BodyItemI[] {cmd2}));", "-      ConcreteMethodDef cmd3 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      ConcreteMethodDef cmd3 = new ConcreteMethodDef(_noSourceInfo, ", "-                                                    new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"uhOh\"),", "+                                                    new VoidReturn(_noSourceInfo, \"void\"), ", "+                                                    new Word(_noSourceInfo, \"uhOh\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      ClassDef cd5 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"TestVoidNoTestMethod\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"TestCase\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {cmd3}));", "+      ClassDef cd5 = new ClassDef(_noSourceInfo, _abstractMav, new Word(_noSourceInfo, \"TestVoidNoTestMethod\"),", "+                                  new TypeParameter[0], ", "+                                  new ClassOrInterfaceType(_noSourceInfo, \"TestCase\", new Type[0]), new ReferenceType[0], ", "+                                  new BracedBody(_noSourceInfo, new BodyItemI[] {cmd3}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b4760c435a98c8ce35b3a05f7ddb355", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryVisitor.java", "commitBeforeChange": "5e7a16013fcb5945eddc036e2d2d0ce3e14ba2d0", "commitAfterChange": "e1389ddb9dcb8a7d3a230cc1be322481e1c8fd6a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "          public void testForClassDefDoFirst()", "signatureAfterChange": "          public void testForClassDefDoFirst()", "diff": ["-      ClassDef cd1 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                  new Word(JExprParser.NO_SOURCE_INFO, \"Test\"), new TypeParameter[0],", "-                                  JExprParser.NO_TYPE, ", "-                                  new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd1 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"Test\"), new TypeParameter[0],", "+                                  _noType, new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      ClassDef cd0 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"Lisa\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd0 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"Lisa\"),", "+                                  new TypeParameter[0], ", "+                                  new ClassOrInterfaceType(_noSourceInfo, \"java.lang.Object\", new Type[0]), ", "+                                  new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-       ClassDef cd2 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                   new Word(JExprParser.NO_SOURCE_INFO, \"Test\"), new TypeParameter[0],", "-                                   JExprParser.NO_TYPE, ", "-                                   new ReferenceType[] {new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0])}, ", "-                                   new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+       ClassDef cd2 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"Test\"), new TypeParameter[0],", "+                                   _noType, ", "+                                   new ReferenceType[] { new ClassOrInterfaceType(_noSourceInfo, ", "+                                                                                  \"java.lang.Object\", new Type[0]) }, ", "+                                   new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      ClassDef cd3 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                  new Word(JExprParser.NO_SOURCE_INFO, \"String\"), new TypeParameter[0],", "-                                  JExprParser.NO_TYPE, ", "-                                  new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd3 = new ClassDef(_noSourceInfo, _publicMav,  new Word(_noSourceInfo, \"String\"), new TypeParameter[0],", "+                                  _noType, new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"You cannot define a class with the name String at the Elementary Level, because that class name is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot define a class with the name String at the Elementary Level, because that class name \" +", "+                   \"is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "-      ClassDef cd4 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                  new Word(JExprParser.NO_SOURCE_INFO, \"Integer\"), new TypeParameter[0],", "-                                  JExprParser.NO_TYPE, ", "-                                  new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd4 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"Integer\"), new TypeParameter[0],", "+                                  _noType, new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"You cannot define a class with the name Integer at the Elementary Level, because that class name is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot define a class with the name Integer at the Elementary Level, because that class name \" +", "+                   \"is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "-      ClassDef cd5 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                  new Word(JExprParser.NO_SOURCE_INFO, \"TestCase\"), new TypeParameter[0],", "-                                  JExprParser.NO_TYPE, ", "-                                  new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd5 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"TestCase\"), new TypeParameter[0],", "+                                  _noType, new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"You cannot define a class with the name TestCase at the Elementary Level, because that class name is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot define a class with the name TestCase at the Elementary Level, because that class name \" +", "+                   \"is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a8eb308c83e90886e75b5d002479ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "          public void testForTryCatchStatement()", "signatureAfterChange": "          public void testForTryCatchStatement()", "diff": ["-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      Block b = new Block(JExprParser.NO_SOURCE_INFO, emptyBody);", "+      BracedBody emptyBody = new BracedBody(NO_INFO, new BodyItemI[0]);", "+      Block b = new Block(NO_INFO, emptyBody);", "-      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0]);", "-      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0], b);", "+      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(NO_INFO, b, new CatchBlock[0]);", "+      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(NO_INFO, b, new CatchBlock[0], b);", "-      assertEquals(\"After visiting both NormalTryCatchStatement and TryCatchFinallyStatement, there should be no errors\", 0, errors.size());", "+      assertEquals(\"After visiting both NormalTryCatchStatement and TryCatchFinallyStatement, \" + ", "+                   \"there should be no errors\", 0, errors.size());", "-      BracedBody errorBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new BitwiseOrExpression(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 1), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 2)))});", "-      Block errorBlock = new Block(JExprParser.NO_SOURCE_INFO, errorBody);", "+      BracedBody errorBody = new BracedBody(NO_INFO, new BodyItemI[] {", "+        new ExpressionStatement(NO_INFO, ", "+                                new BitwiseOrExpression(NO_INFO, new IntegerLiteral(NO_INFO, 1), ", "+                                                        new IntegerLiteral(NO_INFO, 2)))});", "+      Block errorBlock = new Block(NO_INFO, errorBody);", "-      ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, errorBlock, new CatchBlock[0]);", "+      ntcs = new NormalTryCatchStatement(NO_INFO, errorBlock, new CatchBlock[0]);", "-      assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.\" + ", "+                   \"  Perhaps you meant to compare two values using regular or (||)\", ", "+                   errors.get(0).getFirst());", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "-      FormalParameter fp = new FormalParameter(JExprParser.NO_SOURCE_INFO, uvd, false);", "+      UninitializedVariableDeclarator uvd = ", "+        new UninitializedVariableDeclarator(NO_INFO, new PrimitiveType(NO_INFO, \"int\"), new Word(NO_INFO, \"i\"));", "+      FormalParameter fp = new FormalParameter(NO_INFO, uvd, false);", "-      tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[] {", "-        new CatchBlock(JExprParser.NO_SOURCE_INFO, fp, errorBlock)}, b);", "+      tcfs = new TryCatchFinallyStatement(NO_INFO, b, new CatchBlock[] {", "+        new CatchBlock(NO_INFO, fp, errorBlock)}, b);", "-     assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.get(1).getFirst());", "+     assertEquals(\"Error message should be correct\", ", "+                  \"Bitwise or expressions cannot be used at any language level.  \" + ", "+                  \"Perhaps you meant to compare two values using regular or (||)\", ", "+                  errors.get(1).getFirst());"]}], "num": 3250}
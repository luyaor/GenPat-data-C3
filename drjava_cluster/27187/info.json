{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0e0b1a4c2dc06f6b8e086d9d1712fc0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "441a0825ad5ccb89ece9b2a0d9639dbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   @Override public TypeContext visit(TryStatement node)", "signatureAfterChange": "   @Override public TypeContext visit(TryStatement node)", "diff": ["-    node.getTryBlock().acceptVisitor(this);", "-    for (CatchStatement c : node.getCatchStatements()) { c.acceptVisitor(this); }", "-    if (node.getFinallyBlock() != null) { node.getFinallyBlock().acceptVisitor(this); }", "-    return context;", "-  }", "+    List<Type> caughtTypes = new LinkedList<Type>();", "+    for (CatchStatement c : node.getCatchStatements()) {", "+      FormalParameter p = c.getException();", "+      Type caughtT = checkTypeName(p.getType());", "+      if (!ts.isAssignable(TypeSystem.THROWABLE, caughtT)) {", "+        setErrorStrings(c, ts.userRepresentation(caughtT));", "+        throw new ExecutionError(\"catch.type\", c);", "+      }", "+      if (!ts.isReifiable(caughtT)) {", "+        throw new ExecutionError(\"reifiable.type\", c);", "+      }", "+      setVariable(p, new LocalVariable(p.getName(), caughtT, p.isFinal()));", "+      setErasedType(c, ts.erasedClass(caughtT));", "+      caughtTypes.add(caughtT);", "+    TypeContext tryContext = new TryBlockContext(context, caughtTypes);", "+    node.getTryBlock().acceptVisitor(new StatementChecker(tryContext, opt));", "+    ", "+    for (CatchStatement c : node.getCatchStatements()) {", "+      TypeContext catchContext = new LocalContext(context, getVariable(c.getException()));", "+      c.getBlock().acceptVisitor(new StatementChecker(catchContext, opt));", "+    }", "+    ", "+    if (node.getFinallyBlock() != null) { node.getFinallyBlock().acceptVisitor(this); }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bb29dffb9abe5eab90b739ab4d885c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Symboltable.java", "commitBeforeChange": "9e497bdeba5d2ec8cfd80ebdb938cf6935007939", "commitAfterChange": "8015cc1e53ce6d8dc00c5faf652f2b4ef39fe4e9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r   public SymbolData put (String name, SymbolData sd)", "signatureAfterChange": "   public SymbolData put (String name, SymbolData sd)", "diff": ["-   * */\r", "-  public SymbolData put (String name, SymbolData sd) {\r", "-    SymbolData inTable = (SymbolData) this.get(sd.getName());\r", "-    if (inTable != null) {\r", "-      /**Replace all its fields with those of sd.*/\r", "-      inTable.setIsContinuation(sd.isContinuation());\r", "-      inTable.setTypeParameters(sd.getTypeParameters());\r", "-      inTable.setMethods(sd.getMethods());\r", "-      inTable.setSuperClass(sd.getSuperClass());\r", "-      inTable.setInterfaces(sd.getInterfaces());\r", "-      inTable.setOuterData(sd.getOuterData());\r", "-      inTable.setInnerClasses(sd.getInnerClasses());\r", "-    }\r", "-    else {\r", "-      super.put(sd.getName(), sd);\r", "-    }\r", "-    \r", "-    return sd;\r", "-  }\r", "+   * */", "+  public SymbolData put (String name, SymbolData sd) {", "+    SymbolData inTable = this.get(sd.getName());", "+    if (inTable != null) {", "+      /**Replace all its fields with those of sd.*/", "+      inTable.setIsContinuation(sd.isContinuation());", "+      inTable.setTypeParameters(sd.getTypeParameters());", "+      inTable.setMethods(sd.getMethods());", "+      inTable.setSuperClass(sd.getSuperClass());", "+      inTable.setInterfaces(sd.getInterfaces());", "+      inTable.setOuterData(sd.getOuterData());", "+      inTable.setInnerClasses(sd.getInnerClasses());", "+    }", "+    else {", "+      super.put(sd.getName(), sd);", "+    }", "+    ", "+    return sd;", "+  }"]}], "num": 27187}
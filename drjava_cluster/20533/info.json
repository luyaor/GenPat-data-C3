{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19e16307a38977a3423cad9177264875", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ac42cd6598560b8b157de6e69d4eac3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "762f9487498790edfa8d7b58c3d83cb6592af447", "commitAfterChange": "1ea7874872b93b44444c8711a298524cf05a221e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void _setupKeyBindingsPanel( ConfigPanel panel)", "signatureAfterChange": "   private void _setupKeyBindingsPanel( ConfigPanel panel)", "diff": ["-  private void _setupKeyBindingsPanel( ConfigPanel panel) {", "-     ", "+  private void _setupKeyBindingsPanel( ConfigPanel panel) {     ", "+    TreeSet _comps = new TreeSet();", "+", "+    ", "+    KeyStrokeData tmpKsd;", "+    KeyStrokeOptionComponent tmpKsoc;", "+    ", "+    Enumeration e = KeyBindingManager.Singleton.getKeyStrokeData();", "+    while (e.hasMoreElements()) {", "+      tmpKsd = (KeyStrokeData) e.nextElement();", "+      if (tmpKsd.getOption() != null) {", "+        tmpKsoc = new KeyStrokeOptionComponent((KeyStrokeOption)tmpKsd.getOption(),", "+                                               tmpKsd.getName(), this);", "+        if (tmpKsoc != null) { ", "+          _comps.add(tmpKsoc);", "+        }", "+      }", "+    }", "+    ((KeyStrokeConfigPanel)panel).setKeyStrokeComponents(_comps);", "+", "+    ", "+    Iterator iter = _comps.iterator();", "+    while (iter.hasNext()) {", "+      KeyStrokeOptionComponent x = (KeyStrokeOptionComponent) iter.next();", "+      panel.addComponent(x);", "+    }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7e777370b2a9d29252c5cfcf2988cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "2524a2a1b5a7cc778c8b061339118272829309f0", "commitAfterChange": "ef639a33b339d361cf9175d5e5faf5683af2dec0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "          public R getRegionContaining(OpenDefinitionsDocument odd, int startOffset, int endOffset)", "signatureAfterChange": "   public R getRegionContaining(OpenDefinitionsDocument odd, int startOffset, int endOffset)", "diff": ["+    */", "+  public R getRegionContaining(OpenDefinitionsDocument odd, int startOffset, int endOffset) {", "+    /* First try finding the rightmost region on the same line containing the selection. Unnecessary in Java 6.0. */", "+    int lineStart = odd.getLineStartPos(startOffset);", "+    SortedSet<R> tail = getTailSet((R) newDocumentRegion(odd, lineStart, endOffset));", "+    // tail is sorted by <startOffset, endOffset>; tail may be empty", "+    R match = null;", "+    for (R r: tail) {", "+      if (r.getStartOffset() <= startOffset) {", "+        if (r.getEndOffset() >= endOffset) match = r;", "+      }", "+      else break;  // for all remaining r : R (r.getStartOffset() > offset)", "+    }", "+    if (match != null) return match;", "+    /* No match found starting on same line; look for best match starting on preceding lines. */", "+    SortedSet<R> revHead = reverse(getHeadSet((R) newDocumentRegion(odd, lineStart, lineStart))); // linear cost! Ugh!", "+    ", "+    /* Find first match in revHead */", "+    Iterator<R> it = revHead.iterator();  // In Java 6.0, it is computable in constant time from headSet using reverseIterator", "+    ", "+    while (it.hasNext()) {", "+      match = it.next();", "+      if (match.getEndOffset() >= endOffset) break;", "+    if (match == null) return null; // no match found", "+   ", "+    /* Try to improve the match by narrowing endOffset. */", "+    R next;", "+    while (it.hasNext()) { ", "+      next = it.next();", "+      if (next.getStartOffset() < match.getStartOffset()) return match;  // no more improvement possible", "+      assert next.getStartOffset() == match.getStartOffset();", "+      if (next.getEndOffset() >= endOffset) match = next;  // improvement because next precedes match in getRegions(odd)", "-    ", "-    public R getRegionContaining(OpenDefinitionsDocument odd, int startOffset, int endOffset) {", "-      ", "-      int lineStart = odd.getLineStartPos(startOffset);", "-      ", "-      @SuppressWarnings(\"unchecked\")", "-      SortedSet<R> tail = getTailSet((R) newDocumentRegion(odd, lineStart, endOffset));", "-      // tail is sorted by <startOffset, endOffset>; tail may be empty", "-      R match = null;", "-      for (R r: tail) {", "-        if (r.getStartOffset() <= startOffset) {", "-          if (r.getEndOffset() >= endOffset) match = r;", "-        }", "-        else break;  // for all remaining r : R (r.getStartOffset() > offset)", "-      }", "-      return match;  // match is rightmost region in R containing offset", "+    return match;  // last region in revHead was the best match", "+  }"]}], "num": 20533}
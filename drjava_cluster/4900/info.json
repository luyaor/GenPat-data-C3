{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5b7187a255e327b06b8c3f6a7530117", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "384bdd74403a05153416043cc040df14", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 139, "signatureBeforeChange": "   public static <R> Thunk<R> asThunk(final Command c, final R result)", "signatureAfterChange": "   public static <R> Thunk<R> asThunk(final Runnable r, final R result)", "diff": ["-  /** @return  A thunk that executes the given command, then returns {@code result} */", "-  public static <R> Thunk<R> asThunk(final Command c, final R result) {", "-    return new Thunk<R>() { public R value() { c.run(); return result; } };", "+  /** @return  A thunk that executes the given runnable, then returns {@code result} */", "+  public static <R> Thunk<R> asThunk(final Runnable r, final R result) {", "+    return new Thunk<R>() { public R value() { r.run(); return result; } };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6af035edc10309758da5bf28aca6b582", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 284, "signatureBeforeChange": "   public static <R> Thunk<R> asThunk(final Runnable r, final R result)", "signatureAfterChange": "   public static <R> Thunk<R> asThunk(Runnable r, R result)", "diff": ["-  /** @return  A thunk that executes the given runnable, then returns {@code result} */", "-  public static <R> Thunk<R> asThunk(final Runnable r, final R result) {", "-    return new Thunk<R>() { public R value() { r.run(); return result; } };", "-  }", "+  /** Create a thunk that executes the given runnable, then returns {@code result}. */", "+  public static <R> Thunk<R> asThunk(Runnable r, R result) { return new RunnableThunk<R>(r, result); }"]}], "num": 4900}
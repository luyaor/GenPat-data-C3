{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "055c644d3169857b850c103d13f18cd2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78b947920dae7073f40a4fbef28b5199", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/ScrollableListDialog.java", "commitBeforeChange": "60280b438c8e4415d1e3fb7cae7f2c5284f4ab7d", "commitAfterChange": "f1e49fbbed5c92cb9e03198e54bd2a4b521e7d76", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private ScrollableListDialog(Frame owner, String dialogTitle, String leaderText, Collection<?> listItems, int messageType, int width, int height, Icon icon, boolean fitToScreen)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   private ScrollableListDialog(Frame owner,                                 String dialogTitle,                                String leaderText,                                java.util.List<T> listItems,                                java.util.List<T> selItems,                                int messageType,                                int width,                                int height,                                Icon icon,                                boolean fitToScreen,                                java.util.List<JButton> buttons,                                boolean selectable)", "diff": ["-  private ScrollableListDialog(Frame owner, String dialogTitle, String leaderText, Collection<?> listItems, int messageType, int width, int height, Icon icon, boolean fitToScreen) {", "+  @SuppressWarnings(\"unchecked\")", "+  private ScrollableListDialog(Frame owner, ", "+                               String dialogTitle,", "+                               String leaderText,", "+                               java.util.List<T> listItems,", "+                               java.util.List<T> selItems,", "+                               int messageType,", "+                               int width,", "+                               int height,", "+                               Icon icon,", "+                               boolean fitToScreen,", "+                               java.util.List<JButton> buttons,", "+                               boolean selectable) {", "+    this.listItems = listItems;", "-    for (Object obj : listItems) {", "+    for (T obj : listItems) {", "-    list = new JList(dataAsStrings);", "-    //since we are not using the selection, limit it to one item", "-    list.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);", "+    if (selectable) {", "+      final Vector<String> selAsStrings = new Vector<String>(selItems.size());", "+      for (T obj : selItems) {", "+        if (obj != null) {", "+          final String objAsString = obj.toString();", "+          selAsStrings.add(objAsString);", "+        }", "+      }", "+      list = new CheckBoxJList(dataAsStrings, selAsStrings);", "+      //let the user select several", "+      list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);", "+    }", "+    else {", "+      list = new JList(dataAsStrings);", "+      //let the user select several", "+      list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "+    }", "-    _addButtons(buttonPanel);", "+    _addButtons(buttonPanel, buttons);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc50e92e755a20f3c141f2e090b52899", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "fa3227bd8ed65d422e78bb16b48f5f807a121783", "commitAfterChange": "b91661a64fee7b8cdd1ac1251ccb6b9269f4f733", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public void setBreakpoint()", "signatureAfterChange": "    public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)      throws IOException, ClassNotFoundException, DebugException", "diff": ["-  public void setBreakpoint() {", "+  public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber) ", "+    throws IOException, ClassNotFoundException, DebugException {", "+    BreakpointManager bpManager = (BreakpointManager)_session.getManager(BreakpointManager.class);", "+    if (doc.isModifiedSinceSave()) {", "+      doc.saveBeforeProceeding(GlobalModelListener.DEBUG_REASON);", "+    }", "+", "+    String className = mapClassName(doc);", "+    if (className == null) {", "+      throw new ClassNotFoundException();", "+    }", "+    ", "+    try {", "+      bpManager.createBreakpoint(className, lineNumber);", "+    }    ", "+    catch(ClassNotFoundException cnfEx) {", "+      //try {", "+      doc.startCompile();", "+      if(_model.getNumErrors() != 0) {", "+        return;", "+      }", "+      //}", "+    }", "+    catch (ResolveException re) {", "+      throw new DebugException();", "+    }"]}], "num": 4551}
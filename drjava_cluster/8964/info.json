{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02b500c55ea99dc28bd300f10e71131b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5bc47d29201972237b010392ccf09c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testFindPrevDelimiter() throws BadLocationException", "signatureAfterChange": "   public void testFindPrevDelimiter() throws BadLocationException", "diff": ["-    assertEquals(\"Check that delimiters in multi-line \" +", "-                 \"comments are ignored\",", "+    assertEquals(\"Check that delimiters in multi-line comments are ignored\",", "-    assertEquals(\"Check that delimiters in single-line \" +", "-                 \"comments are ignored\",", "+    assertEquals(\"Check that delimiters in single-line comments are ignored\",", "-    assertEquals(\"Check that delimiters in single-quotes \" +", "-                 \"are ignored\",", "+    assertEquals(\"Check that delimiters in single-quotes are ignored\",", "-    assertEquals(\"Check that delimiters in double-quotes \" +", "-                 \"are ignored\",", "+    assertEquals(\"Check that delimiters in double-quotes are ignored\",", "-    assertEquals(\"Check that delimiters in paren phrases \" +", "-                 \"are usually ignored\",", "+    assertEquals(\"Check that delimiters in paren phrases are usually ignored\",", "-    assertEquals(\"Check that delimiter is not found if \" + ", "-                 \"it is at cursor's position\",", "+    assertEquals(\"Check that delimiter is not found if it is at cursor's position\",", "-    _setDocText(\"foo *\\n\" +", "-                \"// comment\\n\" +", "-                \"bar\\n\");", "-    assertEquals(\"Check that findprevDelimiter ignores comments even\" +", "-                 \"when delimiters include * and / (1)\",", "+    _setDocText(\"foo *\\n\" + \"// comment\\n\" + \"bar\\n\");", "+    assertEquals(\"Check that findprevDelimiter ignores comments even when delimiters include * and / (1)\",", "-    _setDocText(\"foo /\\n\" +", "-                \"/* comment */\\n\" +", "-                \"bar\\n\");", "-    assertEquals(\"Check that findprevDelimiter ignores comments even\" +", "-                 \"when delimiters include * and / (2)\",", "+    _setDocText(\"foo /\\n\" + \"/* comment */\\n\" + \"bar\\n\");", "+    assertEquals(\"Check that findprevDelimiter ignores comments even when delimiters include * and / (2)\",", "-    assertEquals(\"Check that position in reduced model is unaffected \" +", "-                 \"after call to findPrevDelimiter\",", "+    assertEquals(\"Check that position in reduced model is unaffected after call to findPrevDelimiter\",", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c951410c1e5e01d6054d0d7951c2220c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/HistoryTest.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testLiveUpdateOfHistoryMaxSize()", "signatureAfterChange": "      public void testLiveUpdateOfHistoryMaxSize()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      int maxLength = 20;", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(20));", "-      ", "-      for (int i = 0; i < maxLength; i++) {", "-        _history.add(\"testing \" + i);", "-      }", "-      ", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(10));", "-      ", "-      assertEquals(\"History size should be 10\",", "-                   10, _history.size());", "-      ", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(100));", "-      ", "-      assertEquals(\"History size should still be 10\",", "-                   10,", "-                   _history.size());", "-      ", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(0));", "-      ", "-      assertEquals(\"History size should be 0\",", "-                   0,", "-                   _history.size());", "-      ", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(-1));", "-      ", "-      assertEquals(\"History size should still be 0\",", "-                   0,", "-                   _history.size());", "+    int maxLength = 20;", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(20));", "+    ", "+    for (int i = 0; i < maxLength; i++) {", "+      _history.add(\"testing \" + i);", "+    ", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(10));", "+    ", "+    assertEquals(\"History size should be 10\",", "+                 10, _history.size());", "+    ", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(100));", "+    ", "+    assertEquals(\"History size should still be 10\",", "+                 10,", "+                 _history.size());", "+    ", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(0));", "+    ", "+    assertEquals(\"History size should be 0\",", "+                 0,", "+                 _history.size());", "+    ", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(-1));", "+    ", "+    assertEquals(\"History size should still be 0\",", "+                 0,", "+                 _history.size());"]}], "num": 8964}
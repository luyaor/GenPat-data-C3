{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6161685dd32f1bb0d12414c0232b3e57", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "319c4df42d4004003fa0c2e0d479dfdf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["-    */", "-    public FindResult findNext() { return _state.findNext(); }", "+   */", "+  public FindResult findNext() {", "+//    Utilities.showDebug(\"DEBUG: findNext() in FindAnyOccurrenceState called\");", "+    ", "+    // If the user just found and toggled the \"Search Backwards\"", "+    // option, we should skip the first find.", "+    if (_skipOneFind) {", "+//      Utilities.showDebug(\"DEBUG: We should skip one\");", "+      int wordLength = _lastFindWord.length();", "+      if (!_searchBackwards) setPosition(getCurrentOffset() + wordLength);", "+      else setPosition(getCurrentOffset() - wordLength);", "+      positionChanged();", "+    }", "+    if (!_searchBackwards) return _findNext(_current.getOffset(), _doc.getLength()-_current.getOffset());", "+    return _findNext(0, _current.getOffset());", "+  }        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "832dd4f2879898fc812c495476b43124", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOption.java", "commitBeforeChange": "fe00431171da3d65b1c1aa9aecc4d485691511fe", "commitAfterChange": "08f174fa59972b118ad07b366735f774758ec0e6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public KeyStroke parse(String s)", "signatureAfterChange": "   public KeyStroke parse(String s)", "diff": ["-      if (s.equals(\"<none>\"))", "+      if (s.equals(\"<none>\")) {", "+      }", "+      ", "+      // Replace \"command\" with \"meta\"", "+      int cIndex = s.indexOf(\"command\");", "+      if (cIndex > -1) {", "+        StringBuffer sb = new StringBuffer(s.substring(0, cIndex));", "+        sb.append(\"meta\");", "+        sb.append(s.substring(\"command\".length(), s.length()));", "+        s = sb.toString();", "+      }", "+      ", "-      if (ks == null)", "-        throw new IllegalArgumentException(\"Input \"+s+\" must be a string that is a valid \" +", "-                                           \"representation of a Keystroke\");", "+      if (ks == null) {", "+        throw new OptionParseException(name, s,", "+                                     \"Must be a valid string representation of a Keystroke.\");", "+      }"]}], "num": 13176}
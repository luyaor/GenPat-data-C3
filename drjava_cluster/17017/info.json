{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdc552f8b0a7eaed79d748a0dc9cce48", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b5a59c348519fd5c0c1b8546700fcc1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForVariableDeclarationOnly()", "signatureAfterChange": "          public void testForVariableDeclarationOnly()", "diff": ["-      VariableDeclaration vdecl = new VariableDeclaration(SourceInfo.NO_INFO,", "+      VariableDeclaration vdecl = new VariableDeclaration(SourceInfo.NONE,", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                            new Word (SourceInfo.NO_INFO, \"field1\")),", "-          new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                              new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "-                                              new Word (SourceInfo.NO_INFO, \"field2\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                            new Word (SourceInfo.NONE, \"field1\")),", "+          new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                              new PrimitiveType(SourceInfo.NONE, \"boolean\"), ", "+                                              new Word (SourceInfo.NONE, \"field2\"))});", "-      VariableDeclaration vdecl2 = new VariableDeclaration(SourceInfo.NO_INFO,", "+      VariableDeclaration vdecl2 = new VariableDeclaration(SourceInfo.NONE,", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                            new Word (SourceInfo.NO_INFO, \"field3\")),", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                            new Word (SourceInfo.NO_INFO, \"field3\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                            new Word (SourceInfo.NONE, \"field3\")),", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new PrimitiveType(SourceInfo.NONE, \"int\"), ", "+                                            new Word (SourceInfo.NONE, \"field3\"))});", "-      //Check a static field that has not been assigned (won't work)", "-      VariableDeclaration vdecl3 = new VariableDeclaration(SourceInfo.NO_INFO,", "+      //Check a static field that has not been assigned is an error", "+      VariableDeclaration vdecl3 = new VariableDeclaration(SourceInfo.NONE,", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                            new Word (SourceInfo.NO_INFO, \"field4\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                            new Word (SourceInfo.NONE, \"field4\"))});", "-//      System.err.println(\"vd4 = \" + vd4);", "-      assertEquals(\"There should still be one error\", 1, errors.size());", "-//      assertEquals(\"The error message should be correct\", \"All static fields must be initialized\", ", "-//                   errors.get(1).getFirst());", "+//      System.err.println(\"vd4 = \" + vd4);;", "+//      assertEquals(\"There should still be one error\", 1, errors.size());", "+      assertEquals(\"The error message should be correct\", \"All static fields must be initialized\", ", "+                   errors.get(1).getFirst());", "-      VariableDeclaration vdecl5 = new VariableDeclaration(SourceInfo.NO_INFO,", "+      VariableDeclaration vdecl5 = new VariableDeclaration(SourceInfo.NONE,", "-        new InitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                            new Word (SourceInfo.NO_INFO, \"field5\"), ", "-                                          new DoubleLiteral(SourceInfo.NO_INFO, 2.4))});", "+        new InitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                            new Word (SourceInfo.NONE, \"field5\"), ", "+                                          new DoubleLiteral(SourceInfo.NONE, 2.4))});", "-      //check one that overrides the super class's field", "-      VariableDeclaration vdecl6 = new VariableDeclaration(SourceInfo.NO_INFO,", "+      // Check one that overrides the super class's field", "+      VariableDeclaration vdecl6 = new VariableDeclaration(SourceInfo.NONE,", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                            new Word (SourceInfo.NO_INFO, \"field6\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                            new Word (SourceInfo.NONE, \"field6\"))});", "-      assertEquals(\"There should be two errors.\", 2, errors.size());", "+      assertEquals(\"There should be three errors.\", 3, errors.size());", "-                   errors.get(1).getFirst());", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9033171941c2f93f09b8f81345f310a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "          public void testCheckDuplicateExceptions()", "signatureAfterChange": "          public void testCheckDuplicateExceptions()", "diff": ["-      BracedBody emptyBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "-      Block b = new Block(SourceInfo.NO_INFO, emptyBody);", "+      BracedBody emptyBody = new BracedBody(SourceInfo.NONE, new BodyItemI[0]);", "+      Block b = new Block(SourceInfo.NONE, emptyBody);", "-      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[0]);", "-      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(SourceInfo.NO_INFO, b, new CatchBlock[0], b);", "+      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(SourceInfo.NONE, b, new CatchBlock[0]);", "+      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(SourceInfo.NONE, b, new CatchBlock[0], b);", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Exception\", new Type[0]), ", "-                                            new Word(SourceInfo.NO_INFO, \"e\"));", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new ClassOrInterfaceType(SourceInfo.NONE, \"java.lang.Exception\", new Type[0]), ", "+                                            new Word(SourceInfo.NONE, \"e\"));", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"RuntimeException\", new Type[0]), ", "-                                            new Word(SourceInfo.NO_INFO, \"e\"));", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new ClassOrInterfaceType(SourceInfo.NONE, \"RuntimeException\", new Type[0]), ", "+                                            new Word(SourceInfo.NONE, \"e\"));", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"IOException\", new Type[0]), ", "-                                            new Word(SourceInfo.NO_INFO, \"e\"));", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new ClassOrInterfaceType(SourceInfo.NONE, \"IOException\", new Type[0]), ", "+                                            new Word(SourceInfo.NONE, \"e\"));", "-      FormalParameter fp1 = new FormalParameter(SourceInfo.NO_INFO, uvd1, false);", "-      FormalParameter fp2 = new FormalParameter(SourceInfo.NO_INFO, uvd2, false);", "-      FormalParameter fp3 = new FormalParameter(SourceInfo.NO_INFO, uvd3, false);", "+      FormalParameter fp1 = new FormalParameter(SourceInfo.NONE, uvd1, false);", "+      FormalParameter fp2 = new FormalParameter(SourceInfo.NONE, uvd2, false);", "+      FormalParameter fp3 = new FormalParameter(SourceInfo.NONE, uvd3, false);", "-      SymbolData e = llv.getQualifiedSymbolData(\"java.lang.Exception\", SourceInfo.NO_INFO);", "-      SymbolData re = llv.getQualifiedSymbolData(\"java.lang.RuntimeException\", SourceInfo.NO_INFO);", "-      SymbolData ioe = llv.getQualifiedSymbolData(\"java.io.IOException\", SourceInfo.NO_INFO);", "+      SymbolData e = llv.getQualifiedSymbolData(\"java.lang.Exception\", SourceInfo.NONE);", "+      SymbolData re = llv.getQualifiedSymbolData(\"java.lang.RuntimeException\", SourceInfo.NONE);", "+      SymbolData ioe = llv.getQualifiedSymbolData(\"java.io.IOException\", SourceInfo.NONE);", "-      CatchBlock c1 = new CatchBlock(SourceInfo.NO_INFO, fp1, b);", "-      CatchBlock c2 = new CatchBlock(SourceInfo.NO_INFO, fp2, b);", "-      CatchBlock c3 = new CatchBlock(SourceInfo.NO_INFO, fp3, b);", "+      CatchBlock c1 = new CatchBlock(SourceInfo.NONE, fp1, b);", "+      CatchBlock c2 = new CatchBlock(SourceInfo.NONE, fp2, b);", "+      CatchBlock c3 = new CatchBlock(SourceInfo.NONE, fp3, b);", "-      ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[] {c1});", "+      ntcs = new NormalTryCatchStatement(SourceInfo.NONE, b, new CatchBlock[] {c1});", "-      ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[]{c1, c2});", "+      ntcs = new NormalTryCatchStatement(SourceInfo.NONE, b, new CatchBlock[]{c1, c2});", "-      ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[]{c2, c3});", "+      ntcs = new NormalTryCatchStatement(SourceInfo.NONE, b, new CatchBlock[]{c2, c3});", "-      ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[]{c1, c2, c3});", "+      ntcs = new NormalTryCatchStatement(SourceInfo.NONE, b, new CatchBlock[]{c1, c2, c3});", "-      ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[]{c2, c1});", "+      ntcs = new NormalTryCatchStatement(SourceInfo.NONE, b, new CatchBlock[]{c2, c1});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5987981210b3c3645f27988f0d06973", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "          public void testForSimpleInitializedArrayInstantiation()", "signatureAfterChange": "          public void testForSimpleInitializedArrayInstantiation()", "diff": ["-      IntegerLiteral e1 = new IntegerLiteral(SourceInfo.NO_INFO, 5);", "-      IntegerLiteral e2 = new IntegerLiteral(SourceInfo.NO_INFO, 7);", "-      SimpleNameReference e3 = new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"));", "-      BooleanLiteral e4 = new BooleanLiteral(SourceInfo.NO_INFO, true);", "-      DoubleLiteral e5 = new DoubleLiteral(SourceInfo.NO_INFO, 4.2);", "-      CharLiteral e6 = new CharLiteral(SourceInfo.NO_INFO, 'e');", "-      SimpleNameReference e7 = new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"));", "+      IntegerLiteral e1 = new IntegerLiteral(SourceInfo.NONE, 5);", "+      IntegerLiteral e2 = new IntegerLiteral(SourceInfo.NONE, 7);", "+      SimpleNameReference e3 = new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\"));", "+      BooleanLiteral e4 = new BooleanLiteral(SourceInfo.NONE, true);", "+      DoubleLiteral e5 = new DoubleLiteral(SourceInfo.NONE, 4.2);", "+      CharLiteral e6 = new CharLiteral(SourceInfo.NONE, 'e');", "+      SimpleNameReference e7 = new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\"));", "-      ArrayType intArrayType = new ArrayType(SourceInfo.NO_INFO, \"int[]\", new PrimitiveType(SourceInfo.NO_INFO, \"int\"));", "+      ArrayType intArrayType = new ArrayType(SourceInfo.NONE, \"int[]\", new PrimitiveType(SourceInfo.NONE, \"int\"));", "-      ArrayData intArray = new ArrayData(SymbolData.INT_TYPE, llv, SourceInfo.NO_INFO);", "+      ArrayData intArray = new ArrayData(SymbolData.INT_TYPE, llv, SourceInfo.NONE);", "-      InitializedArrayInstantiation good = new SimpleInitializedArrayInstantiation(SourceInfo.NO_INFO, intArrayType, new ArrayInitializer(SourceInfo.NO_INFO, new VariableInitializerI[] {e1, e2}));", "+      InitializedArrayInstantiation good = new SimpleInitializedArrayInstantiation(SourceInfo.NONE, intArrayType, new ArrayInitializer(SourceInfo.NONE, new VariableInitializerI[] {e1, e2}));", "-      good = new SimpleInitializedArrayInstantiation(SourceInfo.NO_INFO, intArrayType, new ArrayInitializer(SourceInfo.NO_INFO, new VariableInitializerI[] {e1, e2, e6}));", "+      good = new SimpleInitializedArrayInstantiation(SourceInfo.NONE, intArrayType, new ArrayInitializer(SourceInfo.NONE, new VariableInitializerI[] {e1, e2, e6}));", "-      InitializedArrayInstantiation bad = new SimpleInitializedArrayInstantiation(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new ArrayInitializer(SourceInfo.NO_INFO, new VariableInitializerI[] {e1, e2}));", "+      InitializedArrayInstantiation bad = new SimpleInitializedArrayInstantiation(SourceInfo.NONE, new PrimitiveType(SourceInfo.NONE, \"int\"), new ArrayInitializer(SourceInfo.NONE, new VariableInitializerI[] {e1, e2}));", "-      bad = new SimpleInitializedArrayInstantiation(SourceInfo.NO_INFO, intArrayType, new ArrayInitializer(SourceInfo.NO_INFO, new VariableInitializerI[] {e1, e4, e2, e6}));", "+      bad = new SimpleInitializedArrayInstantiation(SourceInfo.NONE, intArrayType, new ArrayInitializer(SourceInfo.NONE, new VariableInitializerI[] {e1, e4, e2, e6}));", "-      bad = new SimpleInitializedArrayInstantiation(SourceInfo.NO_INFO, intArrayType, new ArrayInitializer(SourceInfo.NO_INFO, new VariableInitializerI[] {e1, e5, e2, e6}));", "+      bad = new SimpleInitializedArrayInstantiation(SourceInfo.NONE, intArrayType, new ArrayInitializer(SourceInfo.NONE, new VariableInitializerI[] {e1, e5, e2, e6}));", "-      bad = new SimpleInitializedArrayInstantiation(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"ej\"), new ArrayInitializer(SourceInfo.NO_INFO, new VariableInitializerI[] {e1, e2}));", "+      bad = new SimpleInitializedArrayInstantiation(SourceInfo.NONE, new PrimitiveType(SourceInfo.NONE, \"ej\"), new ArrayInitializer(SourceInfo.NONE, new VariableInitializerI[] {e1, e2}));", "-      bad = new SimpleInitializedArrayInstantiation(SourceInfo.NO_INFO, intArrayType, new ArrayInitializer(SourceInfo.NO_INFO, new VariableInitializerI[] {e1, e7}));", "+      bad = new SimpleInitializedArrayInstantiation(SourceInfo.NONE, intArrayType, new ArrayInitializer(SourceInfo.NONE, new VariableInitializerI[] {e1, e7}));"]}], "num": 17017}
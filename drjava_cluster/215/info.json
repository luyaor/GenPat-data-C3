{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5fb3c879b5ac2911a14eeeeb18e5208", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b3de07bc84f698b7a5d61791af876c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "79727931e016d65bd6dc6c61b777e0998bf7636b", "commitAfterChange": "b0cd47f114771356118cb3166386257fa0295851", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static File[] getToolsJarFiles(File toolsJar)", "signatureAfterChange": "   public static File[] getToolsJarFiles(File toolsJar)", "diff": ["-    File javaHome = FileOps.getCanonicalFile(new File(System.getProperty(\"java.home\")));", "+    File javaHome = IOUtil.attemptCanonicalFile(new File(System.getProperty(\"java.home\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(javaHome, \"..\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(javaHome, \"../..\")));", "+    javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(javaHome, \"..\")));", "+    javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(javaHome, \"../..\")));", "-        javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms, \"Java\")));", "-        javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms)));", "+        javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(winPrograms, \"Java\")));", "+        javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(winPrograms)));", "-        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "-        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "+        javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "+        javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/C:/Program Files/\")));", "-        javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem, \"Java\")));", "-        javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem)));", "+        javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(winSystem, \"Java\")));", "+        javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(winSystem)));", "-        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "-        javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "+        javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/C:/Java/\")));", "+        javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/C:/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/java/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/j2se/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/local/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/local/java/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/local/j2se/\")));", "+    javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/usr/\")));", "+    javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/usr/java/\")));", "+    javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/usr/j2se/\")));", "+    javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/usr/local/\")));", "+    javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/usr/local/java/\")));", "+    javaHomeParents.add(IOUtil.attemptCanonicalFile(new File(\"/usr/local/j2se/\")));", "-    try { if (toolsJar.isFile()) result.add(FileOps.getCanonicalFile(toolsJar)); }", "+    try { if (toolsJar.isFile()) result.add(IOUtil.attemptCanonicalFile(toolsJar)); }", "-        if (tools.isFile()) { result.add(FileOps.getCanonicalFile(tools)); }", "+        if (tools.isFile()) { result.add(IOUtil.attemptCanonicalFile(tools)); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be350151b3a3c92e40470a366672a05d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "           public void testMethodInvocationHelper()", "signatureAfterChange": "           public void testMethodInvocationHelper()", "diff": ["-      MethodInvocation noArgs = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0]));", "-      MethodInvocation typeArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"int\"))}));", "-      MethodInvocation oneIntArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5)}));", "-      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new DoubleLiteral(JExprParser.NO_SOURCE_INFO, 4.2)}));", "+      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation typeArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))}));", "+      MethodInvocation oneIntArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], _sd2, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd2, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd2, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));"]}], "num": 215}
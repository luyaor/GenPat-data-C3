{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef7f8246390e11c38743f9b8203a8d0e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243813a6a9a866fe3ab36eb85341a197", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public CommandLineTest(String name)", "signatureAfterChange": "   public CommandLineTest(String name)", "diff": ["+      f4 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f4.deleteOnExit();", "+      f4_name = f4.getAbsolutePath();", "+      f4_contents = \"abcde\";", "+      FileWriter fw4 = new FileWriter(f4);", "+      fw4.write(f4_contents,0,f4_contents.length());", "+      fw4.close();", "+      f5 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f5.deleteOnExit();", "+      f5_name = f5.getAbsolutePath();", "+      f5_contents = \"fghijklm\";", "+      FileWriter fw5 = new FileWriter(f5);", "+      fw5.write(f5_contents,0,f5_contents.length());", "+      fw5.close();", "+      f6 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f6.deleteOnExit();", "+      f6_name = f6.getAbsolutePath();", "+      f6_contents = \"nopqrstuvwxyz\";", "+      FileWriter fw6 = new FileWriter(f6);", "+      fw6.write(f6_contents,0,f6_contents.length());", "+      fw6.close();", "+      f7 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f7.deleteOnExit();", "+      f7_name = f7.getAbsolutePath();", "+      f7_contents = \"abcde\";", "+      FileWriter fw7 = new FileWriter(f7);", "+      fw7.write(f7_contents,0,f7_contents.length());", "+      fw7.close();", "+      f8 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f8.deleteOnExit();", "+      f8_name = f8.getAbsolutePath();", "+      f8_contents = \"fghijklm\";", "+      FileWriter fw8 = new FileWriter(f8);", "+      fw8.write(f8_contents,0,f8_contents.length());", "+      fw8.close();", "+      nof4 = File.createTempFile(\"DrJava-test\", \".java\");", "+      nof4_name = nof4.getAbsolutePath();", "+      nof4.delete();", "+      nof5 = File.createTempFile(\"DrJava-test\", \".java\");", "+      nof5_name = nof5.getAbsolutePath();", "+      nof5.delete();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a818901e94ffca51d3ece6ebe01a5b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/BalancingStreamTokenizer.java", "commitBeforeChange": "6b690d7e50bc9f782260d6c38aaf261dfe0715e0", "commitAfterChange": "8b2531509cebe19f9248dfcfb27c6842d311bd33", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public String getNextToken() throws IOException", "signatureAfterChange": "   public String getNextToken() throws IOException", "diff": ["+            _token = Token.NORMAL;", "+            _token = Token.NORMAL;", "+          _token = Token.QUOTED;", "+            _token = Token.NORMAL;", "+          _token = Token.KEYWORD;", "+        }", "+        else {", "+          // there was an escape", "+          // see if whitespace or escape is coming up", "+          // System.err.println(\"There was an escape\");", "+          int cnext = nextToken();", "+          if ((cnext!=(int)_escape) && (!_state.whitespace.contains(cnext))) {", "+            // System.err.println(\"But it's not an escape or whitespace\");", "+            // see if a quote might be coming up", "+            String temp = findMatch(cnext, _state.quotes, new Lambda<String,String>() {", "+              public String apply(String in) { ", "+                // push the tokens back", "+                for(int i=in.length()-1; i>0; --i) {", "+                  pushToken(in.charAt(i));", "+                }", "+                return null;", "+              }", "+            });", "+            if (temp!=null) {", "+              // push the tokens back", "+              for(int i=temp.length()-1; i>0; --i) {", "+                pushToken(temp.charAt(i));", "+              }", "+              // System.err.println(\"It looks like a quote\");", "+            }", "+            else {", "+              // System.err.println(\"But it's not a quote\");", "+              // it wasn't a quote, see if it could be a keyword", "+              temp = findMatch(cnext, _state.keywords, new Lambda<String,String>() {", "+                public String apply(String in) {", "+                  // push the tokens back", "+                  for(int i=in.length()-1; i>0; --i) {", "+                    pushToken(in.charAt(i));", "+                  }", "+                  return null;", "+                }", "+              });", "+              if (temp!=null) {", "+                // push the tokens back", "+                for(int i=temp.length()-1; i>0; --i) {", "+                  pushToken(temp.charAt(i));", "+                }", "+                // System.err.println(\"It looks like a keyword\");", "+              }", "+              else {", "+                // System.err.println(\"But it's not a keyword ==> lone escape\");", "+                // neither a quote nor a keyword coming up", "+                // lone escape", "+                buf.append(String.valueOf(_escape));", "+                _isEscape = _wasEscape = false;", "+              }", "+            }", "+          }", "+          pushToken(cnext);", "+      _token = Token.NORMAL;", "+    _token = Token.END;"]}], "num": 23629}
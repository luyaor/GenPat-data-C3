{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33a5e8a6272dd12ab9225524a9c905e7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e4384c066b24a17c4a7cd871db3c2a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "     public Object visit(OrExpression node)", "signatureAfterChange": "   public Class visit(OrExpression node)", "diff": ["+   */", "+  public Class visit(OrExpression node) {", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    Class lc = (Class)ln.acceptVisitor(this);", "+    Class rc = (Class)rn.acceptVisitor(this);", "+    ", "+    // Check the types of the operands", "+    if (lc != boolean.class || rc != boolean.class) {", "+      throw new ExecutionError(\"or.type\", node);", "+    }", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         (((Boolean)ln.getProperty(NodeProperties.VALUE)).booleanValue() ||", "+          ((Boolean)rn.getProperty(NodeProperties.VALUE)).booleanValue())", "+           ? Boolean.TRUE : Boolean.FALSE);", "+    }", "+    ", "+    // Set the type property", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+    return boolean.class;", "+  }", "-     */", "-    public Object visit(OrExpression node) {", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-        Class lc = (Class)ln.acceptVisitor(this);", "-        Class rc = (Class)rn.acceptVisitor(this);", "-", "-        // Check the types of the operands", "-        if (lc != boolean.class || rc != boolean.class) {", "-            throw new ExecutionError(\"or.type\", node);", "-        }", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 (((Boolean)ln.getProperty(NodeProperties.VALUE)).booleanValue() ||", "-                  ((Boolean)rn.getProperty(NodeProperties.VALUE)).booleanValue())", "-                 ? Boolean.TRUE : Boolean.FALSE);", "-\t}", "-", "-        // Set the type property", "-        node.setProperty(NodeProperties.TYPE, boolean.class);", "-        return boolean.class;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce868de1bcaffb12bce5f8ca8884ac96", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "     public Object visit(AndExpression node)", "signatureAfterChange": "   public Class visit(AndExpression node)", "diff": ["+   */", "+  public Class visit(AndExpression node) {", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    Class lc = (Class)ln.acceptVisitor(this);", "+    Class rc = (Class)rn.acceptVisitor(this);", "+    ", "+    // Check the types of the operands", "+    if (lc != boolean.class || rc != boolean.class) {", "+      throw new ExecutionError(\"and.type\", node);", "+    }", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         (((Boolean)ln.getProperty(NodeProperties.VALUE)).booleanValue() &&", "+          ((Boolean)rn.getProperty(NodeProperties.VALUE)).booleanValue())", "+           ? Boolean.TRUE : Boolean.FALSE);", "+    }", "+    ", "+    // Set the type property", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+    return boolean.class;", "+  }", "-     */", "-    public Object visit(AndExpression node) {", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-        Class lc = (Class)ln.acceptVisitor(this);", "-        Class rc = (Class)rn.acceptVisitor(this);", "-", "-        // Check the types of the operands", "-        if (lc != boolean.class || rc != boolean.class) {", "-            throw new ExecutionError(\"and.type\", node);", "-        }", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 (((Boolean)ln.getProperty(NodeProperties.VALUE)).booleanValue() &&", "-                  ((Boolean)rn.getProperty(NodeProperties.VALUE)).booleanValue())", "-                 ? Boolean.TRUE : Boolean.FALSE);", "-\t}", "-", "-        // Set the type property", "-        node.setProperty(NodeProperties.TYPE, boolean.class);", "-        return boolean.class;", "-    }"]}], "num": 20110}
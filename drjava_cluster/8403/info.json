{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac9a9c32e2c1eb57b826080ffa42fa2b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "152ef862779d9669b8bef467aee5142c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 87, "signatureBeforeChange": "   final public TryStatement tryStatement() throws ParseException", "signatureAfterChange": "   final public TryStatement tryStatement() throws ParseException", "diff": ["-    t = jj_consume_token(TRY);", "-    tryBlock = block();", "-    label_27:", "-    while (true) {", "+    try {", "+      t = jj_consume_token(TRY);", "+      tryBlock = block();", "+      label_27:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case CATCH:", "+          ;", "+          break;", "+        default:", "+          jj_la1[82] = jj_gen;", "+          break label_27;", "+        }", "+        u = jj_consume_token(CATCH);", "+        jj_consume_token(LPAREN);", "+        formal = formalParameter();", "+        jj_consume_token(RPAREN);", "+        catchBlock = block();", "+        el = catchBlock.getEndLine();", "+        ec = catchBlock.getEndColumn();", "+        catches.add(new CatchStatement(formal, catchBlock,", "+                                       filename,", "+                                       u.beginLine, u.beginColumn,", "+                                       el, ec));", "+      }", "-      case CATCH:", "-        ;", "+      case FINALLY:", "+        jj_consume_token(FINALLY);", "+        finallyBlock = block();", "+        el = finallyBlock.getEndLine();", "+        ec = finallyBlock.getEndColumn();", "-        jj_la1[81] = jj_gen;", "-        break label_27;", "+        jj_la1[83] = jj_gen;", "+        ;", "-      u = jj_consume_token(CATCH);", "-      jj_consume_token(LPAREN);", "-      formal = formalParameter();", "-      jj_consume_token(RPAREN);", "-      catchBlock = block();", "-      el = catchBlock.getEndLine();", "-      ec = catchBlock.getEndColumn();", "-      catches.add(new CatchStatement(formal, catchBlock,", "-                                     filename,", "-                                     u.beginLine, u.beginColumn,", "-                                     el, ec));", "+           if (finallyBlock == null && catches.size() == 0) {", "+             {if (true) throw new ParseError(reader.getMessage(\"try.without.catch\", null),", "+                                  filename,", "+                                  t.beginLine, t.beginColumn);}", "+           }", "+           {if (true) return new TryStatement(tryBlock, catches, finallyBlock,", "+                                   filename,", "+                                   t.beginLine, t.beginColumn,", "+                                   el, ec);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid try statement\");", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case FINALLY:", "-      jj_consume_token(FINALLY);", "-      finallyBlock = block();", "-      el = finallyBlock.getEndLine();", "-      ec = finallyBlock.getEndColumn();", "-      break;", "-    default:", "-      jj_la1[82] = jj_gen;", "-      ;", "-    }", "-         if (finallyBlock == null && catches.size() == 0) {", "-           {if (true) throw new ParseError(reader.getMessage(\"try.without.catch\", null),", "-                                filename,", "-                                t.beginLine, t.beginColumn);}", "-         }", "-         {if (true) return new TryStatement(tryBlock, catches, finallyBlock,", "-                                 filename,", "-                                 t.beginLine, t.beginColumn,", "-                                 el, ec);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b23b3fcc79b8c0e10e27c3c94c7c4524", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 69, "signatureBeforeChange": "   final public BlockStatement block() throws ParseException", "signatureAfterChange": "   final public BlockStatement block() throws ParseException", "diff": ["-    p1 = jj_consume_token(LBRACE);", "-    label_20:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case ENUM:", "-      case FALSE:", "-      case FINAL:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case RETURN:", "-      case SHORT:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "-        ;", "-        break;", "-      default:", "-        jj_la1[59] = jj_gen;", "-        break label_20;", "+    try {", "+      p1 = jj_consume_token(LBRACE);", "+      label_20:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case RETURN:", "+        case SHORT:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case INCREMENT:", "+        case DECREMENT:", "+          ;", "+          break;", "+        default:", "+          jj_la1[60] = jj_gen;", "+          break label_20;", "+        }", "+        nodes = blockStatement();", "+        list.addAll(nodes);", "-      nodes = blockStatement();", "-           list.addAll(nodes);", "+      p2 = jj_consume_token(RBRACE);", "+        {if (true) return new BlockStatement(list,", "+                                  filename,", "+                                  p1.beginLine, p1.beginColumn,", "+                                  p2.endLine,   p2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid block statement\");", "-    p2 = jj_consume_token(RBRACE);", "-      {if (true) return new BlockStatement(list,", "-                                filename,", "-                                p1.beginLine, p1.beginColumn,", "-                                p2.endLine,   p2.endColumn);}"]}], "num": 8403}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5205f867b39ecd149692b55ae0a06cf5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1517b452a8c82805ed895df358794f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionExistsCharInStmt.java", "commitBeforeChange": "ea961a8ccca5c43941de581940e257522d7033d4", "commitAfterChange": "61e5b2f858911ea73a13dba9fbe943d7030fb9fb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    if(endCharPos == DefinitionsDocument.ERROR_INDEX) {", "-      // Should not happen, endChar must exist on the current line", "-      throw new UnexpectedException(new", "-        IllegalArgumentException(\"Argument endChar to \" + ", "-                                 \"QuestionExistsCharInStmt must be a char \" +", "-                                 \"that exists on the current line.\"));", "-    }", "-    ", "-    char[] findCharDelims = {_findChar, ';', '{', '}'};", "-    int prevFindChar;", "-    ", "-    // Find the position of the previous occurence findChar from the ", "-    // position of endChar (looking in paren phrases as well)", "-    try {", "-      prevFindChar = doc.findPrevDelimiter(endCharPos, findCharDelims, false);", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    if ((prevFindChar == DefinitionsDocument.ERROR_INDEX) ||", "-        (prevFindChar < 0)) {", "-      // Couldn't find a previous occurence findChar", "-      return false;", "-    }", "-    ", "-    // Determine if prevFindChar was _findChar, rather than end", "-    //  of statement delimiter", "-    boolean found = false;", "-    try {", "-      String foundString = doc.getText(prevFindChar, 1);", "-      char foundChar = foundString.charAt(0);", "-      found = (foundChar == _findChar);", "-    }", "-    catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    return found;", "+    return doc.findCharInStmtBeforePos(_findChar, endCharPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2a7fb3ca31df4dfc1cb3ee46f5c726", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public boolean findCharInStmtBeforePos(char findChar, int position)", "signatureAfterChange": "   public boolean findCharInStmtBeforePos(char findChar, int position)", "diff": ["-  public boolean findCharInStmtBeforePos(char findChar, int position){", "-    // throwErrorHuh();", "+  public boolean findCharInStmtBeforePos(char findChar, int position) {", "-      String mesg = \"Argument endChar to QuestionExistsCharInStmt must be a char \" +", "-        \"that exists on the current line.\";", "-      // Should not happen", "+      String mesg = ", "+        \"Argument endChar to QuestionExistsCharInStmt must be a char that exists on the current line.\";", "-    // Find the position of the previous occurence findChar from the", "-    // position of endChar (looking in paren phrases as well)", "+    // Find the position of the preceding occurrence findChar position (looking in paren phrases as well)", "+    boolean found;", "+    ", "+    readLock();", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    if ((prevFindChar == DefinitionsDocument.ERROR_INDEX) ||", "-        (prevFindChar < 0)) {", "-      // Couldn't find a previous occurence findChar", "-      return false;", "-    }", "-    ", "-    // Determine if prevFindChar was findChar, rather than end", "-    //  of statement delimiter", "-    boolean found;", "-    try {", "+      ", "+      if ((prevFindChar == DefinitionsDocument.ERROR_INDEX) || (prevFindChar < 0)) return false; // no such char", "+      ", "+      // Determine if prevFindChar is findChar or the end of statement delimiter", "-    catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "+    catch (Throwable t) { throw new UnexpectedException(t); }", "+    finally { readUnlock(); }"]}], "num": 25172}
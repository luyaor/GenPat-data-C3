{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d1c88c2c15ed731d56705658b9f2103", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910a92416f05d8b55805ca5a14bfee79", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   private boolean _isAnonymousInnerClass(int newPos, int openSquigglyPos) throws BadLocationException", "signatureAfterChange": "   private boolean _isAnonymousInnerClass(int newPos, int openSquigglyPos) throws BadLocationException", "diff": ["-          final int origLocation = _currentLocation;", "-          _reduced.move(parenStart+1 - origLocation);  // reduced model points to pos == parenStart+1", "-          int parenEnd = balanceForward();", "-          _reduced.move(origLocation - (parenStart+1));    // Restore the state of the reduced model;", "-          if (parenEnd > -1) {", "-            parenEnd = parenEnd + parenStart+1;", "-            // System.out.println(\"\\tafter closing paren = \"+parenEnd);", "-            int afterParen = getFirstNonWSCharPos(parenEnd);", "-            // System.out.println(\"\\tfirst non-whitespace after paren = \"+parenStart+\" `\"+text.charAt(afterParen)+\"`\");", "-            cached = (afterParen==openSquigglyPos);          ", "+          synchronized(_reduced) {", "+            final int origLocation = _currentLocation;", "+            _reduced.move(parenStart+1 - origLocation);  // reduced model points to pos == parenStart+1", "+            int parenEnd = balanceForward();", "+            _reduced.move(origLocation - (parenStart+1));    // Restore the state of the reduced model;", "+            if (parenEnd > -1) {", "+              parenEnd = parenEnd + parenStart+1;", "+              // System.out.println(\"\\tafter closing paren = \"+parenEnd);", "+              int afterParen = getFirstNonWSCharPos(parenEnd);", "+              // System.out.println(\"\\tfirst non-whitespace after paren = \"+parenStart+\" `\"+text.charAt(afterParen)+\"`\");", "+              cached = (afterParen==openSquigglyPos);          ", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6f12cb23aadc4f02cb4b9b8938c6fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public String getEnclosingClassName(int pos, boolean fullyQualified) throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   public String getEnclosingClassName(int pos, boolean qual) throws BadLocationException, ClassNameNotFoundException", "diff": ["-  public String getEnclosingClassName(int pos, boolean fullyQualified) throws BadLocationException, ClassNameNotFoundException {    ", "+  public String getEnclosingClassName(int pos, boolean qual) throws BadLocationException, ClassNameNotFoundException {    ", "-    keyBuf.append(\":\").append(fullyQualified);", "+    keyBuf.append(\":\").append(qual);", "-//      if (oldLog) System.out.println(\"curPos=\"+curPos+\" `\"+text.substring(Math.max(0,curPos-10), Math.min(text.length(), curPos+1))+\"`\");", "+//      if (oldLog) System.out.println(\"curPos=\" + curPos + \" `\" +", "+//        text.substring(Math.max(0,curPos-10), Math.min(text.length(), curPos+1)) + \"`\");", "-//        if (oldLog) System.out.println(\"\\tclass=\"+classPos+\", inter=\"+interPos+\", other=\"+otherPos+\" `\"+text.substring(Math.max(0,otherPos-10),otherPos+1)+\"`\");", "+//        if (oldLog) System.out.println(\"\\tclass=\"+classPos+\", inter=\"+interPos+\", other=\"+otherPos+\" `\" +", "+//          text.substring(Math.max(0,otherPos-10),otherPos+1)+\"`\");", "-//            if (closeParenPos!=ERROR_INDEX) if (oldLog) System.out.println(\"nonWS before curPos = \"+closeParenPos+\" `\"+text.charAt(closeParenPos)+\"`\");", "+//            if (closeParenPos!=ERROR_INDEX) if (oldLog) System.out.println(\"nonWS before curPos = \" + closeParenPos + ", "+//              \" `\"+text.charAt(closeParenPos)+\"`\");", "-//                if (oldLog) System.out.println(\"\\tnew found at \"+newPos+\", openSquigglyPos=\"+curPos);", "+//                if (oldLog) System.out.println(\"\\tnew found at \" + newPos + \", openSquigglyPos=\" + curPos);", "-//            if (oldLog) System.out.println(\"curPos=\"+curPos+\" `\"+text.substring(Math.max(0,curPos-10),curPos+1)+\"`\");", "-//            if (oldLog) System.out.println(\"\\tclass=\"+classPos+\", inter=\"+interPos+\", other=\"+otherPos+\" `\"+text.substring(Math.max(0,otherPos-10),otherPos+1)+\"`\");", "+//            if (oldLog) System.out.println(\"curPos=\" +curPos+\" `\"+text.substring(Math.max(0,curPos-10),curPos+1)+\"`\");", "+//            if (oldLog) System.out.println(\"\\tclass=\"+classPos+\", inter=\"+interPos+\", other=\"+otherPos+\" `\"+", "+//              text.substring(Math.max(0,otherPos-10),otherPos+1)+\"`\");", "-      } while(fullyQualified);", "+      } while(qual);", "-    if (fullyQualified) {", "+    if (qual) {"]}], "num": 2002}
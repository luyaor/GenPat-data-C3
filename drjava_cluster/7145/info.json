{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddb9e2f28a345e5288e09624a6d5d5ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "556443cbf76edd38f3c654ab1efe00d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public Object visit(VariableDeclaration node)", "signatureAfterChange": "   public Node visit(VariableDeclaration node)", "diff": ["+   */", "+  public Node visit(VariableDeclaration node) {", "+    // Define the variable", "+    String s = node.getName();", "+    if (context.isDefinedVariable(s)) {", "+      node.setProperty(NodeProperties.ERROR_STRINGS,", "+                       new String[] { s });", "+      throw new ExecutionError(\"variable.redefinition\", node);", "+    }", "+    ", "+    if (node.isFinal()) {", "+      context.defineConstant(s, null);", "+    } else {", "+      context.define(s, null);", "+    }", "+    ", "+    // Visit the initializer", "+    Node n = node.getInitializer();", "+    if (n != null) {", "+      Node o = n.acceptVisitor(this);", "+      if (o != null) {", "+        rejectReferenceType(o,n);", "+        node.setInitializer((Expression)o);", "+      }", "+    } ", "+    return null;", "+  }", "-     */", "-    public Object visit(VariableDeclaration node) {", "-\t// Define the variable", "-\tString s = node.getName();", "-        if (context.isDefinedVariable(s)) {", "-\t    node.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t     new String[] { s });", "-            throw new ExecutionError(\"variable.redefinition\", node);", "-        }", "-", "-        if (node.isFinal()) {", "-            context.defineConstant(s, null);", "-        } else {", "-            context.define(s, null);", "-        }", "-", "-\t// Visit the initializer", "-\tNode n = node.getInitializer();", "-        if (n != null) {", "-            Object o = n.acceptVisitor(this);", "-            if (o != null) {", "-\t\tif (o instanceof ReferenceType) {", "-                    throw new ExecutionError(\"malformed.expression\", n);", "-\t\t}", "-\t\tnode.setInitializer((Expression)o);", "-            }", "-\t}\t", "-\treturn null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d963388a61bed4bb0588e647a069ddf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public Object visit(IfThenElseStatement node)", "signatureAfterChange": "   public Node visit(IfThenElseStatement node)", "diff": ["+   */", "+  public Node visit(IfThenElseStatement node) {", "+    // Visits the components of this node", "+    Node n = node.getCondition();", "+    Node o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setCondition((Expression)o);", "+    }", "+    ", "+    n = node.getThenStatement();", "+    o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setThenStatement(o);", "+    }", "+    ", "+    n = node.getElseStatement();", "+    o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setElseStatement(o);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(IfThenElseStatement node) {", "-        // Visits the components of this node", "-\tNode   n = node.getCondition();", "-        Object o = n.acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setCondition((Expression)o);", "-        }", "-\t", "-\tn = node.getThenStatement();", "-        o = n.acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setThenStatement((Node)o);", "-        }", "-\t", "-\tn = node.getElseStatement();", "-        o = n.acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setElseStatement((Node)o);", "-        }", "-        return null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f75551a708810cf320e3c0cd528108c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "   public Object visit(ArrayAllocation node)", "diff": ["+   */", "+  public Object visit(ArrayAllocation node) {", "+    // Visits the initializer if one", "+    if (node.getInitialization() != null) {", "+      return node.getInitialization().acceptVisitor(this);", "+    ", "+    // Evaluate the size expressions", "+    int[]    dims = new int[node.getSizes().size()];", "+    Iterator<Expression> it = node.getSizes().iterator();", "+    int i  = 0;", "+    while (it.hasNext()) {", "+      Number n = (Number)it.next().acceptVisitor(this);", "+      dims[i++] = n.intValue();", "-     */", "-    public Object visit(ArrayAllocation node) {", "-\t// Visits the initializer if one", "-\tif (node.getInitialization() != null) {", "-\t    return node.getInitialization().acceptVisitor(this);", "-\t}", "-", "-\t// Evaluate the size expressions", "-\tint[]    dims = new int[node.getSizes().size()];", "-\tIterator it = node.getSizes().iterator();", "-\tint      i  = 0;", "-\twhile (it.hasNext()) {", "-\t    Number n = (Number)((Expression)it.next()).acceptVisitor(this);", "-\t    dims[i++] = n.intValue();", "-\t}", "-", "-\t// Create the array", "-\tif (node.getDimension() != dims.length) {", "-\t    Class c = NodeProperties.getComponentType(node);", "-\t    c = Array.newInstance(c, 0).getClass();", "-\t    return Array.newInstance(c, dims);", "-\t} else {", "-\t    return Array.newInstance(NodeProperties.getComponentType(node), dims);", "-\t}", "+    ", "+    // Create the array", "+    if (node.getDimension() != dims.length) {", "+      Class c = NodeProperties.getComponentType(node);", "+      c = Array.newInstance(c, 0).getClass();", "+      return Array.newInstance(c, dims);", "+    } else {", "+      return Array.newInstance(NodeProperties.getComponentType(node), dims);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd53a51b4d72d58ee141ba78bd5d0c91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     protected ArrayInitializer createClassArrayInitializer()", "signatureAfterChange": "   protected ArrayInitializer createClassArrayInitializer()", "diff": ["+   */", "+  protected ArrayInitializer createClassArrayInitializer() {", "+    List<Expression> cells = new LinkedList<Expression>();", "+    ArrayInitializer cell;", "+    ", "+    Type tp = new ReferenceType(Object.class.getName());", "+    Map m = getConstants();", "+    Iterator it = m.keySet().iterator();", "+    while (it.hasNext()) {", "+      String s = (String)it.next();", "+      List<Expression> pair = new LinkedList<Expression>();", "+      pair.add(new StringLiteral('\\\"' + s + '\\\"'));", "+      Class c = (Class)m.get(s);", "+      pair.add(new TypeExpression(TreeUtilities.classToType(c)));", "+      ", "+      cell = new ArrayInitializer(pair);", "+      cell.setElementType(tp);", "+      cells.add(cell);", "+    }", "+    tp = new ArrayType(tp, 1);", "+    ArrayInitializer ai = new ArrayInitializer(cells);", "+    ai.setElementType(tp);", "+    return ai;", "+  }", "-     */", "-    protected ArrayInitializer createClassArrayInitializer() {", "-        List cells = new LinkedList();", "- ArrayInitializer cell;", "-", "- Type tp = new ReferenceType(Object.class.getName());", "- Map m = getConstants();", "- Iterator it = m.keySet().iterator();", "- while (it.hasNext()) {", "-            String s = (String)it.next();", "-            List pair = new LinkedList();", "-     pair.add(new StringLiteral('\\\"' + s + '\\\"'));", "-            Class c = (Class)m.get(s);", "-            pair.add(new TypeExpression(TreeUtilities.classToType(c)));", "-     ", "-     cell = new ArrayInitializer(pair);", "-     cell.setElementType(tp);", "-     cells.add(cell);", "- }", "-        tp = new ArrayType(tp, 1);", "-        ArrayInitializer ai = new ArrayInitializer(cells);", "-        ai.setElementType(tp);", "-        return ai;", "-    }"]}], "num": 7145}
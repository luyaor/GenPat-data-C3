{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30b8553867b84ff1a08cbdddf2d62ad3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e0bb9e46a53be2d9b59f6cf93d61ee3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public void gotoLine(int line)", "signatureAfterChange": "   public void gotoLine(int line)", "diff": ["-//    acquireReadLock();", "+    acquireReadLock();", "-//    try {", "-//    synchronized(_reduced) {", "-      _setCurrentLocation(0);", "-      for (int i = 1; (i < line) && (_currentLocation < len); i++) {", "-        dist = _reduced.getDistToNextNewline();", "-        if (_currentLocation + dist < len) dist++;", "-        actualLine++;", "-        _move(dist);  // updates _currentLocation", "+    try {", "+      synchronized(_reduced) {", "+        _setCurrentLocation(0);", "+        for (int i = 1; (i < line) && (_currentLocation < len); i++) {", "+          dist = _reduced.getDistToNextNewline();", "+          if (_currentLocation + dist < len) dist++;", "+          actualLine++;", "+          _move(dist);  // updates _currentLocation", "+        }", "+        _cachedLineNum = actualLine;", "+        _cachedLocation = _currentLocation;", "+        _cachedPrevLineLoc = _getLineStartPos(_currentLocation);", "+        _cachedNextLineLoc = _getLineEndPos(_currentLocation);", "-      _cachedLineNum = actualLine;", "-      _cachedLocation = _currentLocation;", "-      _cachedPrevLineLoc = _getLineStartPos(_currentLocation);", "-      _cachedNextLineLoc = _getLineEndPos(_currentLocation);", "-//    }", "-//    }", "-//    finally { releaseReadLock(); }", "+    }", "+    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c557c41eca03be2404dbadb29443a4e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "e6ef9e23d624990cf9fd00ec857466a046415b6a", "commitAfterChange": "d4847683d7bd4063ee7f58ba5aee2d1ddf1d04be", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "signatureAfterChange": "   public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "diff": ["-    int i = pos;", "-    int endPos = getLength();", "+    int result = ERROR_INDEX;  // variable used to hold result to be returned", "-    // Get text from pos to end of document", "-    String text = getText(pos, endPos - pos);", "-    ", "-    final int origLocation = _currentLocation;", "-    // Move reduced model to location pos", "-    _reduced.move(pos - origLocation);", "-    int reducedPos = pos;", "-    ", "-    //int iter = 0;", "-    ", "-    // Walk forward from specificed position", "-    while (i < endPos) {", "+    readLock();", "+    try {", "-      // Check if character is whitespace", "-      if (match(text.charAt(i-pos), whitespace)) {", "-        i++;", "-        continue;", "+      int i = pos;", "+      int endPos = getLength();", "+      ", "+      // Get text from pos to end of document", "+      String text = getText(pos, endPos - pos);", "+", "+      final int origLocation = _currentLocation;", "+      // Move reduced model to location pos", "+      synchronized(_reduced) {", "+        _reduced.move(pos - origLocation);", "+        int reducedPos = pos;", "+        ", "+        //int iter = 0;", "+        ", "+        // Walk forward from specificed position", "+        while (i < endPos) {", "+          ", "+          // Check if character is whitespace", "+          if (match(text.charAt(i-pos), whitespace)) {", "+            i++;", "+            continue;", "+          }", "+          // Found a non whitespace character", "+          // Move reduced model to walker's location", "+          _reduced.move(i - reducedPos);  // reduced model points to location i", "+          reducedPos = i;                 // reduced mdoel points to location reducedPos", "+          ", "+          // Check if non-ws char is within comment and if we want to ignore them.", "+          if (! acceptComments &&", "+              ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+               (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)))) {", "+            i++;", "+            continue;", "+          }", "+          ", "+          // Check if non-ws char is part of comment opening market and if we want to ignore them", "+          if (! acceptComments && _isStartOfComment(text, i - pos)) {", "+            // ith char is first char in comment open market; skip past this marker", "+            // and continue searching", "+            i = i + 2;", "+            continue;", "+          }", "+      ", "+          // Return position of matching char", "+          break;", "+        }", "+        _reduced.move(origLocation - reducedPos);", "+        ", "+        result = reducedPos;", "+        if (i == endPos) result = ERROR_INDEX;", "-      // Found a non whitespace character", "-      // Move reduced model to walker's location", "-      _reduced.move(i - reducedPos);  // reduced model points to location i", "-      reducedPos = i;                 // reduced mdoel points to location reducedPos", "-      ", "-      // Check if non-ws char is within comment and if we want to ignore them.", "-      if (! acceptComments &&", "-          ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-           (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)))) {", "-        i++;", "-        continue;", "-      }", "-      ", "-      // Check if non-ws char is part of comment opening market and if we want to ignore them", "-      if (! acceptComments && _isStartOfComment(text, i - pos)) {", "-        // ith char is first char in comment open market; skip past this marker", "-        // and continue searching", "-        i = i + 2;", "-        continue;", "-      }", "-      ", "-      // Return position of matching char", "-      break;", "-    _reduced.move(origLocation - reducedPos);", "-    ", "-    int result = reducedPos;", "-    if (i == endPos) result = ERROR_INDEX;", "+    finally { readUnlock(); }"]}], "num": 13282}
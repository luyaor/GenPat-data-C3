{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c562ce6dc7ddde1f948a0ad235e384cf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b17643b3aad2b6f77820df90bbed2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-        //      System.out.println(\"Keystroke was null\");", "+//        System.out.println(\"Keystroke was null\");", "-          if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "-            endCompoundEdit();", "-          }", "+          if (e.getKeyCode() == KeyEvent.VK_ENTER) endCompoundEdit();", "-          ", "-             CompoundUndoManager undoMan = _doc.getUndoManager();", "-          //int key = undoMan.startCompoundEdit();", "-          //        System.out.println(\"supering 1 \" + isAltF4);", "+          CompoundUndoManager undoMan = _doc.getUndoManager();", "+//          int key = undoMan.startCompoundEdit();", "+//          System.out.println(\"supering 1 \" + isAltF4);", "-             super.processKeyEvent(e);", "-          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes (see the definition of _undoListener).", "+          super.processKeyEvent(e);", "+          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes ", "+          // (see the definition of _undoListener).", "-          //        e.consume();", "+//          e.consume();", "-", "-          ", "-          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down", "-          // and fixes bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when", "-          // the alt key is down.", "-          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit actually happened.", "-          if ((((e.getModifiers() & InputEvent.META_MASK) != 0)) // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) //fixed for frenchkeyboard support", "+          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down and fixes", "+          // bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when the alt key is down.", "+          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit ", "+          // actually happened.", "+          if ((e.getModifiers() & InputEvent.META_MASK) != 0 ", "+                // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) // omitted for frenchkeyboard support", "-            //            //          System.out.println(\"not supering 1 \" + isAltF4);", "+//            System.out.println(\"not supering 1 \" + isAltF4);", "-          ", "-                    ", "+                        ", "-          /* If the KeyEvent is not a pressed event, process it before we do", "-           * granular undo or _inCompoundEdit may get set incorrectly.", "-           * This code breaks Alt-F4, and may break other system keybindings", "-           * since the event is consumed by us.  For now, just check Alt-F4. */", "+          /* If the KeyEvent is not a pressed event, process it before we do granular undo or _inCompoundEdit may ", "+           * get set incorrectly. This code breaks Alt-F4, and may break other system keybindings since the event ", "+           * is consumed by us. */", "-          ", "-          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edbac51b9da95c50120e36624842f2a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "ff27298276d0b205036fe4b017017ca3896e9890", "commitAfterChange": "4ddb555fbb20c498ee5f44bc087ce9c848b2e79c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-      // The following conditional fixes bug 676586 by ignoring typed events when the meta key is down", "-      if (((e.getModifiers() & InputEvent.META_MASK) != 0) && e.getKeyCode() == KeyEvent.VK_UNDEFINED) {", "-        return;", "+      // Allows one step undoing of the keystrokes defined on the keymap (e.g. enter, tab, '{', '}', ':').", "+      Keymap km = getKeymap();", "+      if (km.isLocallyDefined(ks) || km.isLocallyDefined(KeyStroke.getKeyStroke(ks.getKeyChar()))) {  ", "+        CompoundUndoManager undoMan = _doc.getDocument().getUndoManager();", "+        int key = undoMan.startCompoundEdit();        ", "+        super.processKeyEvent(e);", "+        undoMan.endCompoundEdit(key);", "+        e.consume();", "-      ", "-      // The following conditional fixes ease of use issue 693253 by checking if a typed event is", "-      // shift-delete or shift-backspace and then performing a delete or backspace operation,", "-      // respectively", "-      if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {", "-        int newModifiers = e.getModifiers() & ~(InputEvent.SHIFT_MASK);", "-        ", "-        KeyStroke newKs = KeyStroke.getKeyStroke(ks.getKeyCode(), newModifiers, ks.isOnKeyRelease());", "-        String name = KeyBindingManager.Singleton.getName(newKs);", "-        ", "-        if (name != null && (name.equals(\"Delete Previous\") || name.equals(\"Delete Next\"))) {", "-          // We are unsure about the third and fourth arguments (e and e.getSource()); we simply", "-            // reuse the original values", "-          SwingUtilities.notifyAction(KeyBindingManager.Singleton.get(newKs), newKs, e, e.getSource(), newModifiers);", "-          e.consume();", "+      else {", "+        // The following conditional fixes bug 676586 by ignoring typed events when the meta key is down", "+        if (((e.getModifiers() & InputEvent.META_MASK) != 0) && e.getKeyCode() == KeyEvent.VK_UNDEFINED) {", "-      }", "-      ", "-      // backspace deletes twice without this check, overrides other keystrokes", "-      // that use the mask modifier", "-      if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\010') {", "-        super.processKeyEvent(e);", "-      }", "-    }    ", "+        ", "+        // The following conditional fixes ease of use issue 693253 by checking if a typed event is", "+        // shift-delete or shift-backspace and then performing a delete or backspace operation,", "+        // respectively", "+        if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {", "+          int newModifiers = e.getModifiers() & ~(InputEvent.SHIFT_MASK);", "+          ", "+          KeyStroke newKs = KeyStroke.getKeyStroke(ks.getKeyCode(), newModifiers, ks.isOnKeyRelease());", "+          String name = KeyBindingManager.Singleton.getName(newKs);", "+          ", "+          if (name != null && (name.equals(\"Delete Previous\") || name.equals(\"Delete Next\"))) {", "+            // We are unsure about the third and fourth arguments (e and e.getSource()); we simply", "+            // reuse the original values", "+            SwingUtilities.notifyAction(KeyBindingManager.Singleton.get(newKs), newKs, e, e.getSource(), newModifiers);", "+            e.consume();", "+            return;", "+          }", "+        }", "+        ", "+        // backspace deletes twice without this check, overrides other keystrokes", "+        // that use the mask modifier", "+        if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\010') {", "+          super.processKeyEvent(e);", "+        }", "+      }    ", "+    }"]}], "num": 26051}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d64b03d7aaa23058f81de8d713a0851d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2159de05fe9494508bd2cc57f9e9c126", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public FindReplacePanel(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplacePanel(MainFrame frame, SingleDisplayModel model)", "diff": ["+    boolean ignoreTestCasesSelected = DrJava.getConfig().getSetting(OptionConstants.FIND_NO_TEST_CASES);", "+    _ignoreTestCases = new JCheckBox(\"No Test Cases\", ignoreTestCasesSelected);", "+    _ignoreTestCases.addItemListener(new ItemListener() {", "+      public void itemStateChanged(ItemEvent e) {", "+        boolean isSelected = (e.getStateChange() == ItemEvent.SELECTED);", "+        DrJava.getConfig().setSetting(OptionConstants.FIND_NO_TEST_CASES, isSelected);", "+        _findField.requestFocusInWindow();", "+      }", "+    });", "+", "+", "+    JPanel _ignoreTestCasesPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    _ignoreTestCasesPanel.add(_ignoreTestCases);", "+    _ignoreTestCasesPanel.setMaximumSize(new Dimension(200, 40));", "+    optionsPanel.add(_ignoreTestCasesPanel);", "+    gbLayout.setConstraints(_ignoreTestCasesPanel, c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3056d3abcfe7d1c6975b748c664f6914", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "6572078744d5462302a5712b2d3e4dd3c67ea5fb", "commitAfterChange": "123a2bf7d0ed947a362f9d9fd67ccb6733aff62d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public CompilerErrorPanel(DefinitionsPane defPane)", "signatureAfterChange": "   public CompilerErrorPanel(DefinitionsPane defPane, GlobalModel model)", "diff": ["-  public CompilerErrorPanel(DefinitionsPane defPane) {", "-    setLayout(new BorderLayout());", "-        ", "+  public CompilerErrorPanel(DefinitionsPane defPane, GlobalModel model) {", "+    _model = model;", "+", "+    _listener = new DefinitionsCaretListener();", "+    // Limitation: Only compiler choices are those that were available", "+    // at the time this box was created.", "+    // Also: The UI will go out of sync with reality if the active compiler", "+    // is later changed somewhere else. This is because there is no way", "+    // to listen on the active compiler.", "+    _compilerChoiceBox = new JComboBox(_model.getAvailableCompilers());", "+    _compilerChoiceBox.setEditable(false);", "+    _compilerChoiceBox.setSelectedItem(_model.getActiveCompiler());", "+    _compilerChoiceBox.addItemListener(new ItemListener() {", "+      public void itemStateChanged(ItemEvent e) {", "+        _model.setActiveCompiler((CompilerInterface)", "+                                 _compilerChoiceBox.getSelectedItem());", "+      }", "+    });", "+", "+    setLayout(new BorderLayout());", "+", "+    Box uiBox = Box.createVerticalBox();", "+    uiBox.add(new JLabel(\"Compiler\", SwingConstants.CENTER));", "+    uiBox.add(_compilerChoiceBox);", "+    uiBox.add(Box.createVerticalGlue());", "+", "+    add(uiBox, BorderLayout.EAST);", "+  }"]}], "num": 29190}
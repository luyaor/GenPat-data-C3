{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fd489d3277ff0cc2a8f8a44e5f99b07", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "754e5861478a161bc01341d1c5a80f10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 377, "signatureBeforeChange": "   public String getDisplayFileName(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public List<OpenDefinitionsDocument> getNonProjectDocuments()", "diff": ["-   */", "-  public String getDisplayFileName(OpenDefinitionsDocument doc) { return doc.getDisplayFileName(); }", "+  /** Returns the OpenDefinitionsDocuments that are NOT identified as project source files. */", "+    List<OpenDefinitionsDocument> selectedDocs = new LinkedList<OpenDefinitionsDocument>();", "+    for (OpenDefinitionsDocument d : allDocs) {", "+      if (! d.isInProjectPath() && ! d.isAuxiliaryFile()) selectedDocs.add(d);", "+    return selectedDocs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8972c1875f89553d300cefb865e0115f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 195, "methodNumberAfterChange": 378, "signatureBeforeChange": "   public String getDisplayFullPath(int index)", "signatureAfterChange": "   public List<OpenDefinitionsDocument> getAuxiliaryDocuments()", "diff": ["-  /** Return the absolute path of the file with the given index, or \"(untitled)\" if no file exists. */", "-  public String getDisplayFullPath(int index) {", "-    OpenDefinitionsDocument doc = getOpenDefinitionsDocuments().get(index);", "-    if (doc == null) throw new RuntimeException( \"Document not found with index \" + index);", "-    return doc.getDisplayFullPath();", "-  }", "+   /** Returns the OpenDefinitionsDocuments that are identified as auxiliary project source files. */", "+  public List<OpenDefinitionsDocument> getAuxiliaryDocuments() {", "+    List<OpenDefinitionsDocument> allDocs = getOpenDefinitionsDocuments();", "+    List<OpenDefinitionsDocument> selectedDocs = new LinkedList<OpenDefinitionsDocument>();", "+    for (OpenDefinitionsDocument d : allDocs)", "+      if (d.isAuxiliaryFile()) selectedDocs.add(d);", "+    return selectedDocs;", "+  }"]}], "num": 26257}
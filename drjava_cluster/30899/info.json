{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "173ab5da91566b1a51888d26e0091610", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d91c96b699a03240beca1755845378c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "6d55d86705248616cac5b324a7c528485ceb6104", "commitAfterChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public synchronized void setWrappedPositionOffsets(WeakHashMap<WrappedPosition, Integer> whm) throws BadLocationException", "signatureAfterChange": "   public void setWrappedPositionOffsets(WeakHashMap<WrappedPosition, Integer> whm) throws BadLocationException", "diff": ["-   */", "-  public synchronized void setWrappedPositionOffsets(WeakHashMap<WrappedPosition, Integer> whm) throws BadLocationException {", "-    if (_wrappedPosList==null) { _wrappedPosList = new LinkedList<WeakReference<WrappedPosition>>(); }", "-    _wrappedPosList.clear();", "-    ", "-    for(Map.Entry<WrappedPosition, Integer> entry: whm.entrySet()) {", "-      if (entry.getKey()!=null) {", "-        // hasn't been garbage-collected yet", "-        WrappedPosition wp = entry.getKey();", "-        wp.setWrapped(super.createPosition(entry.getValue()));", "-        _wrappedPosList.add(new WeakReference<WrappedPosition>(wp));", "+    */", "+  public void setWrappedPositionOffsets(WeakHashMap<WrappedPosition, Integer> whm) throws BadLocationException {", "+    synchronized(_wrappedPosListLock) {", "+      if (_wrappedPosList == null) { _wrappedPosList = new LinkedList<WeakReference<WrappedPosition>>(); }", "+      _wrappedPosList.clear();", "+      ", "+      for(Map.Entry<WrappedPosition, Integer> entry: whm.entrySet()) {", "+        if (entry.getKey() != null) {", "+          // hasn't been garbage-collected yet", "+          WrappedPosition wp = entry.getKey();", "+          wp.setWrapped(createPosition(entry.getValue()));", "+          _wrappedPosList.add(new WeakReference<WrappedPosition>(wp));", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6976f41ab7f07a8e5441c68592973763", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public synchronized Pair<Boolean, Boolean> setToDefaultInterpreter()", "signatureAfterChange": "   public Pair<Boolean, Boolean> setToDefaultInterpreter()", "diff": ["-  public synchronized Pair<Boolean, Boolean> setToDefaultInterpreter() {", "-    boolean changed = (_defaultInterpreter != _activeInterpreter.second());", "-    _activeInterpreter = Pair.make(\"\", _defaultInterpreter);", "-    return Pair.make(changed, _busyInterpreters.contains(_defaultInterpreter));", "+  public Pair<Boolean, Boolean> setToDefaultInterpreter() {", "+    synchronized(_stateLock) {", "+      boolean changed = (_defaultInterpreter != _activeInterpreter.second());", "+      _activeInterpreter = Pair.make(\"\", _defaultInterpreter);", "+      return Pair.make(changed, isBusyInterpreter(_defaultInterpreter));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7451b59d3515201425fef36e3444890e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void setActiveDoc(INavigatorItem doc)", "signatureAfterChange": "   public void setActiveDoc(INavigatorItem doc)", "diff": ["-  public void setActiveDoc(INavigatorItem doc){", "-    if(this.contains(doc)){", "-        this.setSelectedValue(doc, true);", "+  public void setActiveDoc(INavigatorItem doc) {", "+    synchronized(_model) {", "+      if(_model.contains(doc)) {", "+        setSelectedValue(doc, true);", "+        // current = doc;  // already done by ListSelectionEvent listener created in init()", "+      }"]}], "num": 30899}
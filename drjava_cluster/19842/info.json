{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ef5aab58908043d61140a210bfe4fed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47be3dea695da7ced581a9c44728070e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "     @Override public Type visit(SuperMethodCall node)", "signatureAfterChange": "     @Override public Type visit(SuperMethodCall node)", "diff": ["-        setErrorStrings(node, ts.userRepresentation(t), node.getMethodName(), nodeTypesString(args));", "-        if (e.matches() > 1) { throw new ExecutionError(\"ambiguous.method\", node); }", "-        else { throw new ExecutionError(\"no.such.method\", node); }", "+        throw unmatchedFunctionError(\"method\", e, node, t, node.getMethodName(), targs, args, expected, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f24243f63b1cc5721207c58153967db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "     @Override public Type visit(StaticMethodCall node)", "signatureAfterChange": "     @Override public Type visit(StaticMethodCall node)", "diff": ["-        setErrorStrings(node, ts.userRepresentation(t), node.getMethodName(), nodeTypesString(args));", "-        if (e.matches() > 1) { throw new ExecutionError(\"ambiguous.method\", node); }", "-        else { throw new ExecutionError(\"no.such.method\", node); }", "+        throw unmatchedFunctionError(\"method\", e, node, t, node.getMethodName(), targs, args, expected, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4be9c419592032403dbc6d612cadf1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": "     @Override public Type visit(ObjectMethodCall node)", "signatureAfterChange": "     @Override public Type visit(ObjectMethodCall node)", "diff": ["-        setErrorStrings(node, ts.userRepresentation(receiverT), node.getMethodName(), nodeTypesString(args));", "-        if (e.matches() > 1) { throw new ExecutionError(\"ambiguous.method\", node); }", "-        else { throw new ExecutionError(\"no.such.method\", node); }", "+        throw unmatchedFunctionError(\"method\", e, node, receiverT, node.getMethodName(), targs, args, expected, false);"]}], "num": 19842}
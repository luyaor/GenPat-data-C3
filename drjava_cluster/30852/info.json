{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "957299ed7c5235f8f767a6c30a0eacd6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f80c6e2129209c4793888c75c6295bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeClassLoader.java", "commitBeforeChange": "a0233fef3427e8ddd7241be47fe79cd3cd5d54bc", "commitAfterChange": "bdbf83f4446e0652c53f385c6b6636ed4fa2affd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private static ClassLoader makeParent(ClassLoader p)", "signatureAfterChange": "      private static ClassLoader makeParent(ClassLoader p)", "diff": ["+    Iterable<String> includes =", "+      IterUtil.make(Object.class.getName(),", "+                    String.class.getName(),", "+                    RuntimeBindings.class.getName(),", "+                    TreeClassLoader.class.getName(),", "+                    TreeCompiler.EvaluationAdapter.class.getName(),", "+                    TreeCompiler.BindingsFactory.class.getName());", "+    // For maximum flexibility, we let p load bootstrap classes", "+    // (except those listed above)", "-                               Object.class.getName(),", "-                               String.class.getName(),", "-                               RuntimeBindings.class.getName(),", "-                               TreeClassLoader.class.getName(),", "-                               TreeCompiler.EvaluationAdapter.class.getName(),", "-                               TreeCompiler.BindingsFactory.class.getName());", "+                               includes, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da45180dad3010dae03d164f1b4ff674", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "b29182d94c1064d5f838746a211b47a58b37d210", "commitAfterChange": "794ab3843272bc249648b9e2c1b10b791437e615", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": "   final public Expression allocationExpression() throws ParseException", "signatureAfterChange": "   final public Expression allocationExpression() throws ParseException", "diff": ["+    List<Type> typeArgs = null;", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LESS:", "+          typeArgs = TypeArguments();", "+          break;", "+        default:", "+          jj_la1[104] = jj_gen;", "+          ;", "+        }", "-       pt = new ReferenceType(ls,", "-                              filename,", "-                              f.beginLine(), f.beginColumn(),", "-                              l.endLine(),   l.endColumn());", "+       if( typeArgs == null ){", "+         pt = new ReferenceType(ls,", "+                                filename,", "+                                f.beginLine(), f.beginColumn(),", "+                                l.endLine(),   l.endColumn());", "+       } else {", "+         pt = new GenericReferenceType(ls,", "+                                       filename,", "+                                       f.beginLine(), f.beginColumn(),", "+                                       l.endLine(), l.endColumn(),", "+                                       typeArgs);", "+       }", "-            jj_la1[100] = jj_gen;", "+            jj_la1[105] = jj_gen;", "-          jj_la1[101] = jj_gen;", "+          jj_la1[106] = jj_gen;", "-        jj_la1[102] = jj_gen;", "+        jj_la1[107] = jj_gen;"]}], "num": 30852}
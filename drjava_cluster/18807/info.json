{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf7592079f2d11303280fb18fdcb48cc", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e167804581740f5b47cb625c89ca034", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 40, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-      if (tempSd != null) {", "-        interfaces.addLast(tempSd);  ", "-      }", "-      ", "-      else if (qualifiedClassName.indexOf(\"$\") != -1) {", "-        //check to see if this is an inner class referencing an inner interface", "+      if (tempSd != null) interfaces.addLast(tempSd);  ", "+      else if (qualifiedClassName.indexOf(\"$\") != -1) { // class is inner", "+        // check to see if this is an inner class referencing an inner interface", "-        ", "-      ", "-      else if (tempSd == null) {", "-        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "-        // Couldn't resolve the interface.", "-        return null;", "+      else if (tempSd == null) {  // class is not inner; ith superinterface not yet defined", "+//        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "+//        // Couldn't resolve the interface.", "+        _log.log(\"CREATING continuation \" + rts[i].getName() + \" with SourceInfo \" + rts[i].getSourceInfo());", "+        continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));    ", "-      superClass = getSymbolData(superClassName, rt.getSourceInfo(), false); //TODO: change this back to true?", "+      SourceInfo si = rt.getSourceInfo();", "+      superClass = getSymbolData(superClassName, si, false); //TODO: change this back to true?", "-        superClass = getSymbolData(\"java.lang.Object\", typeDefBase.getSourceInfo(), false);", "+        superClass = new SymbolData(superClassName);", "+        symbolTable.put(superClassName, sd);", "+        continuations.put(superClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "+    _log.log(\"REMOVING continuation \" + sd.getName());", "-    if (!sd.isInterface()) {_newSDs.put(sd, this); }", "+    if (! sd.isInterface()) {_newSDs.put(sd, this); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3dcca9ca9e92d00db6f93ad9caf5e62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-    for (int i = 0; i < rts.length; i++) {", "-      tempSd = getSymbolData(rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+    for (ReferenceType rt: rts) {", "+      tempSd = getSymbolData(rt.getName(), rt.getSourceInfo(), false, false, false);", "-      else if (qualifiedClassName.indexOf(\"$\") != -1) { // class is inner", "-        // check to see if this is an inner class referencing an inner interface", "-        String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-        tempSd = getSymbolData(qualifyingPart + \"$\" + rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+      else if (qualifiedClassName.indexOf(\".\") != -1) { // class is inner", "+        // Check to see if this is an inner class referencing an inner interface", "+        String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\".\"));", "+        tempSd = getSymbolData(qualifyingPart + \".\" + rt.getName(), rt.getSourceInfo(), false, false, false);", "-          tempSd = new SymbolData(qualifyingPart + \"$\" + rts[i].getName());", "+          String tempName = qualifyingPart + \".\" + rt.getName();", "+          tempSd = new SymbolData(tempName);", "-          continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));          ", "+//          System.err.println(\"Creating continuation for \" + tempName  + \" at LLV: 1144\");", "+          continuations.put(tempName, new Pair<SourceInfo, LanguageLevelVisitor>(rt.getSourceInfo(), this));          ", "-//        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "-//        // Couldn't resolve the interface.", "-        _log.log(\"CREATING continuation \" + rts[i].getName() + \" with SourceInfo \" + rts[i].getSourceInfo());", "-        continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));    ", "+        String tempName = rt.getName();", "+        _log.log(\"CREATING continuation \" + tempName + \" with SourceInfo \" + rt.getSourceInfo());", "+//        System.err.println(\"CREATING continuation for \" + tempName + \" at LLV: 1154\");", "+        tempSd = new SymbolData(tempName);", "+        tempSd.setInterface(true);", "+        continuations.put(tempName, new Pair<SourceInfo, LanguageLevelVisitor>(rt.getSourceInfo(), this));    ", "-        superClass = new SymbolData(superClassName);", "-        symbolTable.put(superClassName, sd);", "-        continuations.put(superClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "+        superClass = addSymbolData(si, superClassName);"]}], "num": 18807}
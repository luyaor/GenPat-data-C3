{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edb5d8a5005426824f65217ce5b68b7c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c64ac8a56c2f67fc9de1534b855bb00", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": "          public void testForPlusAssignmentExpression()", "signatureAfterChange": "          public void testForPlusAssignmentExpression()", "diff": ["-      //Plus Assignment with numbers:", "+      // Plus Assignment with numbers:", "-      //if variable does not have value, cannot be plus assigned", "+      // if variable does not have value, cannot be plus assigned", "-      assertEquals(\"Error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\",", "+                   errors.get(0).getFirst());", "-      //if variable is final, with a value cannot be reassigned", "+      // if variable is final, with a value cannot be reassigned", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "+                   errors.get(1).getFirst());", "-      assertEquals(\"There should be 2 errors\", 2, errors.size());", "+      assertEquals(\"There should still be 2 errors\", 2, errors.size());", "-      assertEquals(\"There should be 4 errors\", 4, errors.size());", "-      assertEquals(\"The first error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\", errors.get(2).getFirst());", "-      assertEquals(\"The second error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\", errors.getLast().getFirst());", "-", "-      ", "-      ", "+      assertEquals(\"There should still be 2 errors\", 2, errors.size());  // Generated two duplicate messages.", "+      assertEquals(\"The first error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\", ", "+                   errors.get(0).getFirst());", "-      PlusAssignmentExpression pa3 = new PlusAssignmentExpression(SourceInfo.NO_INFO, sRef, new BooleanLiteral(SourceInfo.NO_INFO, true));", "+      PlusAssignmentExpression pa3 = ", "+        new PlusAssignmentExpression(SourceInfo.NO_INFO, sRef, new BooleanLiteral(SourceInfo.NO_INFO, true));", "-      assertEquals(\"string concatenation with string at the front.  Should return String type\", stringSD.getInstanceData(), pa3.visit(_etc));", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "+      assertEquals(\"string concatenation with string at the front.  Should return String type\", ", "+                   stringSD.getInstanceData(), ", "+                   pa3.visit(_etc));", "+      assertEquals(\"Should still be 2 errors\", 2, errors.size());", "-      //when both sides are strings", "-      PlusAssignmentExpression pa4 = new PlusAssignmentExpression(SourceInfo.NO_INFO, sRef, new StringLiteral(SourceInfo.NO_INFO, \"cat\"));", "-      assertEquals(\"string concatenation with string on both sides.  Should return String type\", stringSD.getInstanceData(), pa4.visit(_etc));", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "+      // when both sides are strings", "+      PlusAssignmentExpression pa4 = ", "+        new PlusAssignmentExpression(SourceInfo.NO_INFO, sRef, new StringLiteral(SourceInfo.NO_INFO, \"cat\"));", "+      assertEquals(\"string concatenation with string on both sides.  Should return String type\", ", "+                   stringSD.getInstanceData(), pa4.visit(_etc));", "+      assertEquals(\"Should still be 2 errors\", 2, errors.size());", "-      //when string is second", "+      // when string is second", "-      PlusAssignmentExpression pa5 = new PlusAssignmentExpression(SourceInfo.NO_INFO, nf, new StringLiteral(SourceInfo.NO_INFO, \"house \"));", "-      assertEquals(\"string + concatenation with string at back.  Should give error\", stringSD.getInstanceData(), pa5.visit(_etc));", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String or both be numbers.  You have specified arguments of type int and java.lang.String\", errors.getLast().getFirst());", "-      ", "-", "-      ", "+      PlusAssignmentExpression pa5 = ", "+        new PlusAssignmentExpression(SourceInfo.NO_INFO, nf, new StringLiteral(SourceInfo.NO_INFO, \"house \"));", "+      assertEquals(\"string + concatenation with string at back.  Should give error\", ", "+                   stringSD.getInstanceData(), ", "+                   pa5.visit(_etc));", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String \" + ", "+                   \"or both be numbers.  You have specified arguments of type int and java.lang.String\", ", "+                   errors.get(2).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90a34507dec3b1d76701c1f8732271e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": "               public void testForSimpleAssignment()", "signatureAfterChange": "               public void testForSimpleAssignment()", "diff": ["-      ComplexNameReference nf = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Ned\")), new Word(SourceInfo.NO_INFO, \"Flanders\"));", "-      SimpleAssignmentExpression sa = new SimpleAssignmentExpression(SourceInfo.NO_INFO, nf, new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      ", "+      ComplexNameReference nf =", "+        new ComplexNameReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"Ned\")), ", "+                                 new Word(SourceInfo.NONE, \"Flanders\"));", "+      SimpleAssignmentExpression sa = ", "+        new SimpleAssignmentExpression(SourceInfo.NONE, nf, new IntegerLiteral(SourceInfo.NONE, 5));", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a value to Flanders because it is immutable and has already been given a value\",", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a value to Flanders because it is immutable and has already been given a value\",", "-      SimpleAssignmentExpression sa2 = new SimpleAssignmentExpression(SourceInfo.NO_INFO, nf, nf);", "+      SimpleAssignmentExpression sa2 = new SimpleAssignmentExpression(SourceInfo.NONE, nf, nf);", "-      assertEquals(\"The error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\", ", "+                   errors.getLast().getFirst());", "-      //Test that a value cannot be assigned to a type", "-      SimpleAssignmentExpression sa3 = new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")), new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      // Test that a value cannot be assigned to a type", "+      SimpleAssignmentExpression sa3 = ", "+        new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                       new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")), ", "+                                       new IntegerLiteral(SourceInfo.NONE, 5));", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a value to the type int.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a value to the type int.  Perhaps you meant to create a new instance of int\", ", "+                   errors.getLast().getFirst());", "-      SimpleAssignmentExpression sa4 = new SimpleAssignmentExpression(SourceInfo.NO_INFO, nf, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")));", "+      SimpleAssignmentExpression sa4 = ", "+        new SimpleAssignmentExpression(SourceInfo.NONE, nf, ", "+                                       new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "-      assertEquals(\"Error message should be correct\", \"You cannot use the type name int on the right hand side of an assignment.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use the type name int on the right hand side of an assignment.  Perhaps you meant to \"", "+                     + \"create a new instance of int\", ", "+                   errors.getLast().getFirst());", "-      ArrayData boolArray = new ArrayData(SymbolData.BOOLEAN_TYPE, llv, SourceInfo.NO_INFO);", "+      ArrayData boolArray = new ArrayData(SymbolData.BOOLEAN_TYPE, llv, SourceInfo.NONE);", "-      SimpleAssignmentExpression sa5 = new SimpleAssignmentExpression(SourceInfo.NO_INFO, new ArrayAccess(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myArray\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)), new BooleanLiteral(SourceInfo.NO_INFO, true));", "+      SimpleNameReference snr = new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myArray\"));", "+      SimpleAssignmentExpression sa5 = ", "+        new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                       new ArrayAccess(SourceInfo.NONE, snr, new IntegerLiteral(SourceInfo.NONE, 5)), ", "+                                       new BooleanLiteral(SourceInfo.NONE, true));"]}], "num": 28609}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e175d918530d6a20bd7cedad0a2b29d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c0792bf080569551b1dd6ce1a8446d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "73f217e0c6b0ae75f2fc2cd1e1de44ad543f3ec0", "commitAfterChange": "0dc7e614bba000cf5b59051fc409d9851d24e995", "methodNumberBeforeChange": 515, "methodNumberAfterChange": 515, "signatureBeforeChange": "   void debuggerAutomaticTrace()", "signatureAfterChange": "   void debuggerAutomaticTrace()", "diff": ["+    _log.log(\"debuggerAutomaticTrace(): isDebuggerReady() = \"+isDebuggerReady()); ", "-        try {", "-          int rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "-          ", "-          _automaticTraceTimer = new Timer(rate, new ActionListener() {", "-            public void actionPerformed(ActionEvent e) {", "-              _debugStepTimer.stop();", "-              if (_model.getDebugger().isAutomaticTraceEnabled()) {", "-                // hasn't been disabled in the meantime", "-                debuggerStep(Debugger.StepType.STEP_INTO);", "-//                _debugStepTimer.restart();  // _debugStepTimer prints \"Stepping...\" when timer expires", "-              }", "-            }", "-          });", "-          _automaticTraceTimer.setRepeats(false);", "-          _model.getDebugger().setAutomaticTraceEnabled(true);", "-          _debugPanel.setAutomaticTraceButtonText();", "-          debuggerStep(Debugger.StepType.STEP_INTO);", "-          _debugStepTimer.stop();", "-        }", "-        catch (IllegalStateException ise) {", "-          /* This may happen if the user if stepping very frequently, and is even more likely if they are using both ", "-           * hotkeys and UI buttons. Ignore it in this case. Hopefully, there are no other situations where the user ", "-           * can be trying to step while there are no suspended threads. */", "-        }        ", "+        enableAutomaticTrace();", "-        _model.getDebugger().setAutomaticTraceEnabled(false);", "-        _debugPanel.setAutomaticTraceButtonText();", "-        if (_automaticTraceTimer != null) _automaticTraceTimer.stop();", "+        disableAutomaticTrace();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "914cce9c6c40e9ece710ccc7f8c1bb69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testDebugSourcepath()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public void testDebugSourcepath() throws Exception", "diff": ["-  public void testDebugSourcepath()", "-    throws DebugException, BadLocationException, DocumentAdapterException,", "-    IOException, InterruptedException", "-  {", "+  public void testDebugSourcepath() throws Exception {", "-    ", "-    // Compile the class", "-    File file2 = new File(_tempDir, \"DrJavaDebugClass.java\");", "-    OpenDefinitionsDocument doc = doCompile(DEBUG_CLASS, file2);", "-    Vector<File> path = new Vector<File>();", "-    path.addElement(_tempDir);", "-    ", "-    // Start debugger and add breakpoint", "-    synchronized(_notifierLock) {", "-      _debugger.startup();", "-      _waitForNotifies(1);  // startup", "-      _notifierLock.wait();", "-    }", "+    // Start up", "+    OpenDefinitionsDocument doc = _startupDebugger(\"DrJavaDebugClass.java\",", "+                                                   DEBUG_CLASS);", "+    Vector<File> path = new Vector<File>();", "+    path.addElement(_tempDir);  // directory where doc's file is saved", "+    ", "+    // Add a breakpoint", "-    // Shutdown the debugger and listen for the interpret call to end", "-    if (printMessages) System.out.println(\"Shutting down...\");", "-    InterpretListener interpretListener = new InterpretListener() {", "-       public void interpreterChanged(boolean inProgress) {", "-         // Don't notify: happens in the same thread", "-        interpreterChangedCount++;", "-       }", "-     };", "-    _model.addListener(interpretListener);", "-    synchronized(_notifierLock) {", "-      _debugger.shutdown();", "-      _waitForNotifies(2);  // interactionEnded, shutdown", "-      _notifierLock.wait();", "-    }", "-    interpretListener.assertInteractionEndCount(1);  // fires", "-    interpretListener.assertInterpreterChangedCount(1);  // fires (don't wait)", "-    _model.removeListener(interpretListener);", "-    ", "-    debugListener.assertDebuggerShutdownCount(1);  // fires", "-    if (printMessages) System.out.println(\"Shut down.\");", "+    // Shut down", "+    _shutdownAndWaitForInteractionEnded();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51e6e2298d9a99f7dd38708aa4815db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public synchronized void testStepOut()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testStepOut() throws Exception", "diff": ["-  public synchronized void testStepOut()", "-    throws DebugException, BadLocationException, DocumentAdapterException,", "-    IOException, InterruptedException", "-  {", "+  public synchronized void testStepOut() throws Exception {", "-    ", "-    // Compile the class", "-    File file2 = new File(_tempDir, \"DrJavaDebugClass.java\");", "-    OpenDefinitionsDocument doc = doCompile(DEBUG_CLASS, file2);", "-    // Start debugger and add breakpoint", "-    synchronized(_notifierLock) {", "-      _debugger.startup();", "-      _waitForNotifies(1);  // startup", "-      _notifierLock.wait();", "-    }", "+    ", "+    // Start up", "+    OpenDefinitionsDocument doc = _startupDebugger(\"DrJavaDebugClass.java\",", "+                                                   DEBUG_CLASS);", "-    // Shutdown the debugger and listen for the interpret call to end", "-    if (printMessages) System.out.println(\"Shutting down...\");", "-    InterpretListener interpretListener = new InterpretListener() {", "-       public void interpreterChanged(boolean inProgress) {", "-         // Don't notify: happens in the same thread", "-        interpreterChangedCount++;", "-       }", "-     };", "-    _model.addListener(interpretListener);", "-    synchronized(_notifierLock) {", "-      _debugger.shutdown();", "-      _waitForNotifies(2);  // interactionEnded, shutdown", "-      _notifierLock.wait();", "-    }", "-    interpretListener.assertInteractionEndCount(1);", "-    _model.removeListener(interpretListener);", "-", "-    debugListener.assertBreakpointRemovedCount(1);  // fires (don't wait)", "-    debugListener.assertDebuggerShutdownCount(1);  // fires", "-    if (printMessages) System.out.println(\"Shut down.\");", "+    // Shut down", "+    _shutdownAndWaitForInteractionEnded();"]}], "num": 2640}
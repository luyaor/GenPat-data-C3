{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9381e1c07f54de2d73657119895cd688", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a40ccdeed25633e6bbb7aefdb0386cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected synchronized void handleSlaveQuit(int status)", "signatureAfterChange": "      protected void handleSlaveQuit(int status)", "diff": ["-    protected synchronized void handleSlaveQuit(int status) {", "+    protected void handleSlaveQuit(int status) {", "-      assertTrue(\"startup not in progress\", !isStartupInProgress());", "+      assertTrue(\"startup not in progress\", ! isStartupInProgress());", "-      notify();", "-      _justQuit = true;", "+      synchronized(_testLock) {", "+        _testLock.notify();", "+        _justQuit = true;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c7525514456a0e5909db90c01ace32c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "commitAfterChange": "fa5a46f3cc65ec85b9fa37599dc6542e75cee25e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void close()", "signatureAfterChange": "     public void close()", "diff": ["-      remove(this);", "-      closingKickOut();", "+      synchronized(_cacheLock) {", "+        _residentQueue.remove(this);", "+        closingKickOut();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdf88e14d1ae699eeaa67e34404b1620", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public synchronized void runImmediateQuitTest() throws Exception", "signatureAfterChange": "     public void runImmediateQuitTest() throws Exception", "diff": ["-    public synchronized void runImmediateQuitTest() throws Exception {", "-      _currentTest = \"runImmediateQuitTest\";", "-      _justQuit = false;", "-", "-      // this needs to be reset because the slave is going to check it!", "-      _letter = 'a';", "-", "-      invokeSlave(new String[]{\"-Djava.system.class.loader=edu.rice.cs.util.newjvm.CustomSystemClassLoader\"}, FileOption.NULL_FILE);", "-//      invokeSlave();", "+    public void runImmediateQuitTest() throws Exception {", "-      // we don't wait for it to start before calling quit.", "-      // This should not throw an exception! It should quickly return,", "-      // queueing up a quit to be processes ASAP.", "-      quitSlave();", "-", "-      // now we just wait for the quit to process", "-      while (! _justQuit) {", "-        wait();", "+//      Utilities.show(\"ImmediateQuitTest started\");", "+      ", "+      _currentTest = \"runImmediateQuitTest\";", "+      synchronized (_testLock) { ", "+        _justQuit = false; ", "+        _connected = false;", "+        _letter = 'a';  // this needs to be reset because the slave is going to check it!", "-      // If we get here, it worked as expected.", "+      invokeSlave(new String[]{\"-Djava.system.class.loader=edu.rice.cs.util.newjvm.CustomSystemClassLoader\"}, FileOption.NULL_FILE);", "+", "+//      Utilities.show(\"slave invoked\");", "+      ", "+      // Immediately call quit, which should not throw an exception. It should return without waiting.", "+      quitSlave();", "+                     ", "+//      Utilities.show(\"slave quit\");     ", "+", "+      // now we just wait for the quit to process", "+      synchronized(_testLock) { ", "+        while (! _justQuit) _testLock.wait(); ", "+        _currentTest = \"\";  // If we get here, it worked as expected.", "+      }", "+                     ", "+//      Utilities.show(\"ImmediateQuitTest finished\");", "+      ", "-      _currentTest = \"\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3428bfba98a605bd6084f27a94069da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      protected synchronized void handleSlaveConnected()", "signatureAfterChange": "      protected synchronized void handleSlaveConnected()", "diff": ["-      assertTrue(\"startup not in progress\", !isStartupInProgress());", "+      assertTrue(\"startup not in progress\", ! isStartupInProgress());", "-      notify();", "+      synchronized(_testLock) { ", "+        _connected = true;", "+        _testLock.notify(); ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dab7e186867008ebf0b6ef5f0d9d74bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 77, "signatureBeforeChange": "      public void interactionEnded()", "signatureAfterChange": "      public void interactionEnded()", "diff": ["-      fail(\"interactionEnded fired unexpectedly\");", "+      listenerFail(\"interactionEnded fired unexpectedly\");"]}], "num": 9827}
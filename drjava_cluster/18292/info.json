{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dafa65da4869d04bc5a134b634093dea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25624e7b763c7f013d2da525ae01d8e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Void forInnerClassDef(InnerClassDef that)", "signatureAfterChange": "   public Void forInnerClassDef(InnerClassDef that)", "diff": ["-  /** Process a local inner class definition */", "+  /** Process a local class definition */", "-    handleInnerClassDef(that, _bodyData, getQualifiedClassName(_bodyData.getSymbolData().getName()) + \".\"", "-                          + _bodyData.getSymbolData().preincrementLocalClassNum() + that.getName().getText());", "+    SymbolData enclosingClass = _bodyData.getSymbolData();", "+    assert _enclosingClassName.equals(getQualifiedClassName(enclosingClass.getName()));", "+    ", "+    String relName = that.getName().getText();", "+    String fullName = _enclosingClassName + '.' + enclosingClass.preincrementLocalClassNum() + relName;", "+    System.err.println(\"***ALARM*** Processing local class '\" + relName + \"' in class \" + _enclosingClassName", "+                         + \" with flattened class name \" + fullName);", "+    handleInnerClassDef(that, _bodyData, relName, fullName);", "+    // How do we know that generated number is correct?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "446ce9f10388bb8e369b7872c9f46550", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public Void forInnerClassDef(InnerClassDef that)", "signatureAfterChange": "   public Void forInnerClassDef(InnerClassDef that)", "diff": ["-//    System.err.println(\"BBIV.forInnerClassDef called on \" + that.getName());", "-    handleInnerClassDef(that, _bodyData, getQualifiedClassName(_bodyData.getSymbolData().getName()) + \".\" + ", "-                        _bodyData.getSymbolData().preincrementLocalClassNum() + that.getName().getText());", "+    // TODO: is this necessarily local?", "+    SymbolData enclosingClass = _bodyData.getSymbolData();", "+    assert _enclosingClassName != null;", "+    assert enclosingClass != null;", "+    assert _enclosingClassName.equals(getQualifiedClassName(enclosingClass.getName()));", "+    ", "+    String relName = that.getName().getText();", "+    String fullName = _enclosingClassName + '.' + enclosingClass.preincrementLocalClassNum() + relName;", "+    System.err.println(\"***ALARM*** Processing local class '\" + relName + \"' in class \" + _enclosingClassName", "+                         + \" with flattened class name \" + fullName);", "+    handleInnerClassDef(that, _bodyData, relName, fullName);", "+    // How do we know that generated number is correct?"]}], "num": 18292}
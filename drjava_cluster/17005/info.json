{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "799f5f1fc6208a58e9484d45ba1f49b3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0801c92b015859b08c4e42d8e6b77fcc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "85d3a69d147c6c1ce63751f75aec1113945356f7", "commitAfterChange": "0a93533cf1b555344278f97d8d989cd2f113c958", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 42, "signatureBeforeChange": "     public InputBox()", "signatureAfterChange": "          public InputBox()", "diff": ["+    ", "-", "-      InputMap im = getInputMap(WHEN_FOCUSED);", "-      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), INPUT_ENTERED_NAME);", "-      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,Event.SHIFT_MASK), INSERT_NEWLINE_NAME);", "-      ActionMap am = getActionMap();", "-      am.put(INPUT_ENTERED_NAME, _inputEnteredAction);", "-      am.put(INSERT_NEWLINE_NAME, _insertNewlineAction);", "-", "+      ", "+      DrJava.getConfig().addOptionListener(OptionConstants.TEXT_ANTIALIAS,", "+                                           new OptionListener<Boolean>() {", "+        public void optionChanged(OptionEvent<Boolean> oce) {", "+          _antiAliasText = oce.value.booleanValue();", "+          InputBox.this.repaint();", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e08d63cf6e1be3c1d20f2a2cedbb613", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "7d7d651695cc4a26c75cdfb50217f79acc4c45a4", "commitAfterChange": "641e8d72a9e70ecaee90e1431ba7ab971af51ca9", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 61, "signatureBeforeChange": "     void setInputCompletionCommand(final Runnable command)", "signatureAfterChange": "     void setInputCompletionCommand(final Runnable command)", "diff": ["-    /** Specifies what to do when the <Enter> key is hit. */", "+    /** Specifies what to do when the <Enter> or <Ctrl+D> keys are hit. */", "+      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_D,java.awt.Event.CTRL_MASK), INSERT_END_OF_STREAM);", "-        public void actionPerformed(ActionEvent e) { command.run(); }", "+        public void actionPerformed(ActionEvent e) {", "+          append(\"\\n\"); // append newline at the end", "+          command.run();", "+        }", "+      });", "+", "+      // Add the input listener for <Ctrl+D>", "+      am.put(INSERT_END_OF_STREAM, new AbstractAction() {", "+        public void actionPerformed(ActionEvent e) {", "+          if (getText().length()==0) { _endOfStream = true; }", "+          // do not append newline at the end", "+          command.run();", "+        }"]}], "num": 17005}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74c847f9abbfadd19514780636f56aaa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0970379a36f37be6e14fe1ab1fc3454c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 110, "signatureBeforeChange": "          public void testAddSymbolData()", "signatureAfterChange": "          public void testAddSymbolData()", "diff": ["-      SymbolData obj = new SymbolData(\"java.lang.Object\");", "-      obj.setIsContinuation(false);", "-      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "+      SymbolData obj = LanguageLevelConverter.symbolTable.get(\"java.lang.Object\");", "+//      obj.setIsContinuation(false);", "+//      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "-        new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Awesome\"),", "+        new ClassDef(SourceInfo.NO_INFO, PUBLIC_MAV, new Word(SourceInfo.NO_INFO, \"Awesome\"),", "-      /**Hierarchy should be empty at the end.*/", "-      assertEquals(\"hierarchy should be empty\", 0, _hierarchy.size());", "+//      /**Hierarchy should be empty at the end.*/", "+//      assertEquals(\"hierarchy should be empty\", 0, _hierarchy.size());", "-      assertEquals(\"hierarchy should be empty.\", 0, _hierarchy.size());", "+//      assertEquals(\"hierarchy should be empty.\", 0, _hierarchy.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c136a3e2056dfe4332e4d45ac4f9e25e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 101, "signatureBeforeChange": "          public void testGetSymbolDataForClassFile()", "signatureAfterChange": "          public void testGetSymbolDataForClassFile()", "diff": ["-                  testLLVisitor.getSymbolDataForClassFile(\"java.lang.String\", SourceInfo.NO_INFO).isContinuation());", "+                  LanguageLevelConverter.getSymbolDataForClassFile(\"java.lang.String\", null).isContinuation());", "-      assertEquals(\"Should return null with a user class that can't be found\",", "-                   null,", "-                   testLLVisitor.getSymbolDataForClassFile(\"Marge\", SourceInfo.NO_INFO));", "-      assertEquals(\"There should be one error\", 1, errors.size());", "-      assertEquals(\"The error message should be correct\", ", "-                   \"Class Marge not found.\", ", "-                   errors.get(0).getFirst());", "+      assertNull(\"Should return null with a user class that can't be found\",", "+                 LanguageLevelConverter.getSymbolDataForClassFile(\"Marge\", null));", "+//      assertEquals(\"There should be one error\", 1, errors.size());", "+//      assertEquals(\"The error message should be correct\", \"Class Marge not found.\", errors.get(0).getFirst());"]}], "num": 25448}
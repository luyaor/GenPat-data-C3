{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2664235ee0492f9146ee813120aaa9ef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fbc8bfed7effc29a5762ceef6eb004e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/ParserTest.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "        public void testClassDeclaration() throws ParseException", "signatureAfterChange": "        public void testClassDeclaration() throws ParseException", "diff": ["-    int accessFlags = 0;", "-    accessFlags |= java.lang.reflect.Modifier.PUBLIC;", "-    accessFlags |= java.lang.reflect.Modifier.ABSTRACT;", "+    ModifierSet mods = ModifierSet.make(PUBLIC, ABSTRACT);", "-    expectedAST.add(new ClassDeclaration(accessFlags, \"Foo\", new ReferenceTypeName(\"Bar\"), null, body, SourceInfo.NONE));", "+    expectedAST.add(new ClassDeclaration(mods, \"Foo\", new ReferenceTypeName(\"Bar\"), null, body, SourceInfo.NONE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b01928e71d1b6487e588ecee3753f84e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/ParserTest.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void testMethodDeclaration() throws ParseException", "signatureAfterChange": "      public void testMethodDeclaration() throws ParseException", "diff": ["-    int accessFlags = 0;", "-    accessFlags |= java.lang.reflect.Modifier.STATIC;", "-    accessFlags |= java.lang.reflect.Modifier.PUBLIC;", "+    ModifierSet mods = ModifierSet.make(STRICT, PUBLIC);", "-    expectedAST.add(new MethodDeclaration(accessFlags, new IntTypeName(), \"getCount\", params, excepts, body));", "+    expectedAST.add(new MethodDeclaration(mods, new IntTypeName(), \"getCount\", params, excepts, body));", "-    verifyOutput(\"static public int getCount(){ return 1; }\", expectedAST);", "+    verifyOutput(\"strictfp public int getCount(){ return 1; }\", expectedAST);"]}], "num": 26852}
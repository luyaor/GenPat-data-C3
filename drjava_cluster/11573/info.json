{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a1d7551a987ad3b55c2fab8ec26ffaf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "609715cff08ab6173a10ff2f02225b64", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 57, "signatureBeforeChange": "   private String _getValue(Value value)", "signatureAfterChange": "   private String _getValue(Value value) throws DebugException", "diff": ["-  private String _getValue(Value value) {", "+  private String _getValue(Value value) throws DebugException {", "-    /*try {", "-      thread = object.owningThread();", "-    }", "-    catch (IncompatibleThreadStateException itse) {", "-      DrJava.consoleOut().println(\"thread is not suspended\");", "-      return DebugWatchUndefinedValue.ONLY.toString();", "-    }*/", "-    Value stringValue = null;", "-      stringValue = object.invokeMethod(thread, method, new LinkedList(), ObjectReference.INVOKE_SINGLE_THREADED);", "+      Value stringValue = object.invokeMethod(thread, method, new LinkedList(),", "+                                              ObjectReference.INVOKE_SINGLE_THREADED);", "+      return stringValue.toString();", "+      throw new UnexpectedException(ite);", "+      throw new UnexpectedException(cnle);", "-      DrJava.consoleOut().println(\"thread is not suspended\");", "-      return DebugWatchUndefinedValue.ONLY.toString();", "+      throw new DebugException(\"Cannot determine value from thread: \" + itse);", "-      DrJava.consoleOut().println(\"invocation exception\");", "-      return DebugWatchUndefinedValue.ONLY.toString();", "+      throw new DebugException(\"Could not invoke toString: \" + ie);", "-    return stringValue.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb94758ecf786d765a3dccc1f14aabdb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "      private void _attachToVM() throws DebugException", "diff": ["+  ", "+  private void _attachToVM() throws DebugException {", "+    VirtualMachineManager vmm = Bootstrap.virtualMachineManager();", "+    List connectors = vmm.attachingConnectors();", "+    AttachingConnector connector = null;", "+    Iterator iter = connectors.iterator();", "+    while (iter.hasNext()) {", "+      AttachingConnector conn = (AttachingConnector)iter.next();", "+      if (conn.name().equals(\"com.sun.jdi.SocketAttach\")) {", "+        connector = conn;", "+      }", "+    }", "+    if (connector == null) {", "+      throw new DebugException(\"Could not find an AttachingConnector!\");", "+    }", "+    ", "+    // Try to connect", "+    Map args = connector.defaultArguments();", "+    Connector.Argument port = (Connector.Argument) args.get(\"port\");", "+    try {", "+      int debugPort = _model.getDebugPort();", "+      port.setValue(\"\" + debugPort);", "+      _vm = connector.attach(args);", "+      _eventManager = _vm.eventRequestManager();", "+    }", "+    catch (IOException ioe) {", "+      throw new DebugException(\"Could not connect to VM: \" + ioe);", "+    }", "+    catch (IllegalConnectorArgumentsException icae) {", "+      throw new DebugException(\"Could not connect to VM: \" + icae);", "+    }", "+  }"]}], "num": 11573}
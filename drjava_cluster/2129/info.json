{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f07c808e24623e61d343ce28afcfdaa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6888587e90e6a0f9d3f1492b09e28c25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "7f334b2431ad2a57c508d4ce8fe5d18ce3fccebf", "commitAfterChange": "43a2124ad4386a02628eedfc537948ebb05ea232", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 69, "signatureBeforeChange": "   public void testStaticMethodCall() throws InterpreterException", "signatureAfterChange": "   public void testStaticMethodCall() throws InterpreterException", "diff": ["-    /**", "-     * This code was commented out because the static method call relies on the", "-     * name visitor to recognize that the preceding expression is a class name", "-     * and convert it from an object method call to a static method call.  This ", "-     * would require some extra initialization that I have not done yet.", "-     * - Jonathan Lugo 5/19/2004", "-     */", "-//    List<Node> list = _parseCode(text);", "-//    System.out.println(list);", "-//    MethodCall exp = (MethodCall)list.get(0);", "-//    Class type = exp.acceptVisitor(_typeChecker);", "-//    Method m = (Method)exp.getProperty(NodeProperties.METHOD);", "-//    assertEquals(\"the method's parameter type should have been int\", int.class, m.getParameterTypes()[0]);", "+", "+    List<Node> list = _parseCode(text);", "+    NameVisitor nv = new NameVisitor(_globalNameContext);", "+    Node exp = (MethodCall)list.get(0);", "+    exp = exp.acceptVisitor(nv);", "+    Class type = exp.acceptVisitor(_typeChecker);", "+    Method m = (Method)exp.getProperty(NodeProperties.METHOD);", "+    assertEquals(\"the method's parameter type should have been int\", int.class, m.getParameterTypes()[0]);", "-    System.out.println(res instanceof String);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcb37e158609f47973e578201f9e514b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/Configuration.java", "commitBeforeChange": "c302d1db72cb508e0cec30d24e39d48cce8fd663", "commitAfterChange": "68d14b52468e7fad6eb9d5f26ee2e88ac93b395f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public String toString()", "signatureAfterChange": "   public String toString()", "diff": ["-  public String toString() { return map.toString(); }", "+  public String toString() {", "+    StringWriter sw = new StringWriter();", "+    PrintWriter w = new PrintWriter(sw);", "+", "+    // Write each option", "+    for (OptionParser<?> key : map.keys()) {", "+      if (!key.getDefault().equals(map.getOption(key))) {", "+        String tmpString = map.getString(key);", "+        ", "+        // This replaces all backslashes with two backslashes for windows", "+        tmpString = tmpString.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");", "+        ", "+        w.println(key.getName()+\" = \"+tmpString);", "+      }", "+    }", "+    w.close();", "+    ", "+    return sw.toString();", "+  }"]}], "num": 2129}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "455b40978df1a33f634fb7898370fb4c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0731ac8afe9d0617bfb63533864fee2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/sexp/SExpParserTest.java", "commitBeforeChange": "3219755a46ca8592e404ccf1c194784de66c102a", "commitAfterChange": "314c962d7f6ed2c6b00f5edc6e764b582b016016", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      public void testInvalidLowerLevel()", "signatureAfterChange": "      public void testInvalidLowerLevel()", "diff": ["+    ", "+    text = \"(;)\";  // <-- last ) is commented out", "+    try {", "+      SExp exp = SExpParser.parse(text).get(0);", "+      fail(\"Didn't throw a parse exception\");", "+    }catch(SExpParseException e) {", "+      assertEquals(\"Incorrect exception message\", ", "+                   \"Unexpected <EOF> at line 1\",", "+                   e.getMessage());", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085336e50d3ddeb68bd3be6e77ac27b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "37dab6b79fc3d4e6f7b2b5f0aa53a4ea9b7f7476", "commitAfterChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean enabled)      throws DebugException", "signatureAfterChange": "   public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean enabled)      throws DebugException", "diff": ["-    if (breakpoint == null)  setBreakpoint(new Breakpoint (doc, offset, lineNum, enabled, this));", "+    if (breakpoint == null) {", "+      if (doc.getLineStartPos(offset) == doc.getLineEndPos(offset)) {", "+        printMessage(\"Cannot set a breakpoint on an empty line.\");", "+      }", "+      else {", "+        try {", "+          setBreakpoint(new Breakpoint (doc, offset, lineNum, enabled, this));", "+        }", "+        catch(LineNotExecutableException lnee) {", "+          printMessage(lnee.getMessage());", "+        }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c4198493beabd42bd89f1d238eef04f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "4cdb9838755e53512e5d72bc594953caa513c0c0", "commitAfterChange": "46bed49fcf3d9c586e517d4177d242598f271a4d", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": "     public Icon getIcon(File f)", "signatureAfterChange": "     public Icon getIcon(File f)", "diff": ["-      if (ret == null)", "-        return super.getIcon(f);", "-      else", "-        return ret;", "+      if (ret == null) {", "+        ret = super.getIcon(f);", "+        if (ret.getIconHeight() < _java.getIconHeight()) {", "+          ret = new CenteredIcon(ret, _java.getIconWidth(), _java.getIconHeight());", "+        }", "+      }", "+      return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e5edf687ca8910d642c0fcb04565c1d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 39, "signatureBeforeChange": "          protected R getValue() throws Exception", "signatureAfterChange": "          protected R getValue() throws Exception", "diff": ["+        // The process has started; in the event of any exception, we must destroy the process", "+          _process.value().destroy();", "-          else { _exception = e; }", "+          else { _exception = e; _process.value().destroy(); }", "-        catch (IOException e) { _exception = e; }", "+        catch (IOException e) { _exception = e; _process.value().destroy(); }", "+        catch (RuntimeException e) { _process.value().destroy(); throw e; }", "+        catch (Error e) { _process.value().destroy(); throw e; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93440ec369f3cba2e906c44302cb3744", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "3c18a1d03b53a699adfbc2df00845e9d60f9d1f5", "commitAfterChange": "4ec6eda5e5d4bd8e2b6e61afae08eb8548f8c4b5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void junitProject()", "signatureAfterChange": "   public void junitProject()", "diff": ["-//      File d = getProjectFile();", "-//      if(d == null) return;", "-//      d = d.getParentFile();", "-//      File[] files = FileOps.getFilesInDir(d, true);", "-//      for(File f: files){", "-//        try{", "-//          if(_getter.isAlreadyOpen(f)){", "-//            _getter.getDocumentForFile(f);", "-//          }else{", "-//            // assume the ", "-//          }", "-//        }catch(IOException e){", "-//          // error opening the file, so don't inlcude it in testing", "-//        }", "-//      }", "-      ", "-          if (!doc.isUntitled()) {", "+          if (doc.isProjectFile()) {", "-            files.add(f);", "+            if(f.getCanonicalPath().startsWith(_model.getProjectFile().getParentFile().getCanonicalPath())){", "+              files.add(f);", "+            }", "+        }catch(IOException e){", "+          // don't add it to the test"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af93403442d6a1e0638c6b2ee945cc8d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 37, "signatureBeforeChange": "          protected void doStart()", "signatureAfterChange": "          protected void doStart()", "diff": ["+        // The process has started; in the event of any exception, we must destroy the process", "+        catch (RuntimeException e) { _process.value().destroy(); throw e; }", "+        catch (Error e) { _process.value().destroy(); throw e; }"]}], "num": 3896}
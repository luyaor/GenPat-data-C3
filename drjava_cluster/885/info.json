{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8d2fbc4ce8a141cc50d9567597b498b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dd9651e2c4a72cdb932bcfd5794b2c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "signatureAfterChange": "   public synchronized void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "diff": ["-  public void registerInterpreterJVM(InterpreterJVMRemoteI remote)", "+  public synchronized void registerInterpreterJVM(InterpreterJVMRemoteI remote)", "-    synchronized(this) {", "-      if (_interpreterJVM != null) { ", "-        try {", "-          //DrJava.consoleOut().println(\"killing jvm! \" + i);", "-          remote.exitJVM();", "-        }", "-        catch (RemoteException re) {", "-        }", "-        return;", "+    if (_interpreterJVM != null) { ", "+      try {", "+        //DrJava.consoleOut().println(\"killing jvm! \" + i);", "+        remote.exitJVM();", "-      _timerThread.disable();", "-      _interpreterJVM = remote;", "-      // _model may be null if we're running a test on this", "-      if (_model != null) {", "-        _model.interactionsReady();", "+      catch (RemoteException re) {", "-      _startupInProgress = false;", "-      // wake up anyone waiting for an interpreter!", "-      notify();", "+      return;", "+    _timerThread.disable();", "+    _interpreterJVM = remote;", "+    // _model may be null if we're running a test on this", "+    if (_model != null) {", "+      _model.interactionsReady();", "+    }", "+    _startupInProgress = false;", "+    // wake up anyone waiting for an interpreter!", "+    notify();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad3a5cb0fb4fd663f1297dacb35d2355", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "signatureAfterChange": "   public void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "diff": ["-      //System.out.println(\"interpreter jvm registered: \" + remote);", "-      _interpreterJVM = remote;", "-      //_startupInProgress = false;", "+      if (_interpreterJVM != null) { ", "+        try {", "+          //DrJava.consoleOut().println(\"killing jvm! \" + i);", "+          remote.exitJVM();", "+        }", "+        catch (RemoteException re) {", "+        }", "+        return;", "+      }", "+      _timerThread.disable();", "+      _interpreterJVM = remote;    ", "+      // _model may be null if we're running a test on this", "+      if (_model != null) {", "+        _model.interactionsReady();", "+      }", "+      _startupInProgress = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d15690f0c3544dc583be764e02432e85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public synchronized void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "signatureAfterChange": "   private InterpreterJVMRemoteI _interpreterJVM()", "diff": ["-   */", "-  public synchronized void registerInterpreterJVM(InterpreterJVMRemoteI remote)", "-    throws RemoteException", "-  {", "-    if (_interpreterJVM != null) { ", "-      try {", "-        //DrJava.consoleOut().println(\"killing jvm! \" + i);", "-        remote.exitJVM();", "-      }", "-      catch (RemoteException re) {", "-      }", "-      return;", "-    }", "-    _timerThread.disable();", "-    _interpreterJVM = remote;", "-    // _model may be null if we're running a test on this", "-    if (_model != null) {", "-      _model.interactionsReady();", "-    }", "-    _startupInProgress = false;", "-    // wake up anyone waiting for an interpreter!", "-    notify();", "-  }", "+   */", "+  private InterpreterJVMRemoteI _interpreterJVM() {", "+    return (InterpreterJVMRemoteI) getSlave();", "+  }"]}], "num": 885}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96a1c9014d299c0d0752d65a222dbd77", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b66abbec938de4deb1b364fd9432270", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetupTest.java", "commitBeforeChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "commitAfterChange": "8d145adf36cd29029ae2516bc62fa87e62c87636", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testFile() throws CloneNotSupportedException, IOException", "signatureAfterChange": "      public void testFile() throws CloneNotSupportedException, IOException", "diff": ["+    assertTrue(p.getCurrent(pm).startsWith(\"(file.isdir Error\"));    ", "-    File fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest.txt\", TEST_STRING);", "+    File fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.isfile Error\"));    ", "-    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest.txt\", TEST_STRING);", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.exists Error\"));    ", "-    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest.txt\", TEST_STRING);", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.parent Error\"));    ", "+    dir = FileOps.createTempDirectory(\"DrJavaPropertySetupTest\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    assertEquals(dir.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(fil.getAbsolutePath()));", "+    assertEquals(fil.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+    ", "+    notFound = new File(System.getProperty(\"java.io.tmpdir\"),\"DrJavaPropertySetupTest.\" + System.currentTimeMillis() + \"-\" + (_r.nextInt() & 0xffff) + \".tmp\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(notFound.getAbsolutePath()));", "+    assertEquals(new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath())+File.pathSeparator+", "+                          StringOps.escapeFileName(fil.getAbsolutePath())+File.pathSeparator+", "+                          StringOps.escapeFileName(notFound.getAbsolutePath()));", "+    assertEquals(dir.getParentFile().getAbsolutePath()+File.pathSeparator+", "+                 fil.getParentFile().getAbsolutePath()+File.pathSeparator+", "+                 new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.abs Error\"));    ", "+    dir = FileOps.createTempDirectory(\"DrJavaPropertySetupTest\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getName()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.abs Error\"));", "+    p.resetAttributes();", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir.getParentFile().getAbsolutePath()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.abs Error\"));", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getName()));", "+    assertEquals(dir.getAbsolutePath(), p.getCurrent(pm));", "+", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\", \".txt\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(fil.getName()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(fil.getParentFile().getAbsolutePath()));", "+    assertEquals(fil.getAbsolutePath(), p.getCurrent(pm));", "+    ", "+    notFound = new File(System.getProperty(\"java.io.tmpdir\"),\"DrJavaPropertySetupTest.\" + System.currentTimeMillis() + \"-\" + (_r.nextInt() & 0xffff) + \".tmp\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(notFound.getName()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(notFound.getParentFile().getAbsolutePath()));", "+    assertEquals(notFound.getAbsolutePath(), p.getCurrent(pm));", "+", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getName())+File.pathSeparator+", "+                          StringOps.escapeFileName(fil.getName())+File.pathSeparator+", "+                          StringOps.escapeFileName(notFound.getName()));", "+    assertEquals(dir.getAbsolutePath()+File.pathSeparator+", "+                 fil.getAbsolutePath()+File.pathSeparator+", "+                 notFound.getAbsolutePath(), p.getCurrent(pm));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rel Error\"));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.mkdir Error\"));    ", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rm Error\"));    ", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.mv Error\"));    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8744726432364dace9ac90c00522bc26", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetupTest.java", "commitBeforeChange": "df4d53f84d17cf3ec7ad461e0706b30f84e9362b", "commitAfterChange": "c5aac5c6295f0f62821cacd426fa94832d9a11b1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testFile() throws CloneNotSupportedException, IOException", "signatureAfterChange": "      public void testFile() throws CloneNotSupportedException, IOException", "diff": ["-    assertTrue(s.startsWith(System.getProperty(\"java.io.tmpdir\")+File.separator+\"DrJava-Execute-\"));", "+    assertTrue(s.startsWith(TMPDIR+\"DrJava-Execute-\"));", "-    assertTrue(s2.startsWith(System.getProperty(\"java.io.tmpdir\")+File.separator+\"DrJava-Execute-\"));", "+    assertTrue(s2.startsWith(TMPDIR+\"DrJava-Execute-\"));", "-    assertEquals(System.getProperty(\"java.io.tmpdir\")+File.separator+\"foo\", s);", "+    assertEquals(TMPDIR+\"foo\", s);", "-    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "-    assertEquals(dir.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir .getAbsolutePath()));", "+    assertEquals(dir.getParentFile().getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(fil.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(fil.getParentFile().getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(),", "+                 StringOps.unescapeFileName(p.getCurrent(pm)));", "-                 new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+                 new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(),", "+                 StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(dir.getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(dir.getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(fil.getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(fil.getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(notFound.getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(notFound.getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-                 notFound.getAbsolutePath(), p.getCurrent(pm));", "+                 notFound.getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    ", "+    dir = FileOps.createTempDirectory(\"DrJavaPropertySetupTest\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rel Error\"));", "+    p.resetAttributes();", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rel Error\"));", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    assertEquals(\".\", StringOps.unescapeFileName(p.getCurrent(pm)));", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir.getParentFile().getAbsolutePath()));", "+    assertEquals(dir.getName(), StringOps.unescapeFileName(p.getCurrent(pm)));", "+    dir = edu.rice.cs.plt.io.IOUtil.createAndMarkTempDirectory(\"DrJavaPropertySetupTest\",\"\");", "+    File dir1 = edu.rice.cs.plt.io.IOUtil.createAndMarkTempDirectory(\"DrJavaPropertySetupTest\",\"\",dir);", "+    File dir2 = edu.rice.cs.plt.io.IOUtil.createAndMarkTempDirectory(\"DrJavaPropertySetupTest\",\"\",dir);", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\",\".txt\",dir1);", "+    p.setAttribute(\"file\",StringOps.escapeFileName(fil.getAbsolutePath()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir2.getAbsolutePath()));", "+    assertEquals(\"..\"+FS+dir1.getName()+FS+fil.getName(), StringOps.unescapeFileName(p.getCurrent(pm)));    ", "+        "]}], "num": 27363}
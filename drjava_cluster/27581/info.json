{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f79bb88a6d31e3d25207d7621a8e790", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "befb5d255e28375dacdc3b1b3aa32bf2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r     \r     public void testForAbstractMethodDef()", "signatureAfterChange": "          public void testForAbstractMethodDef()", "diff": ["-    \r", "-    public void testForAbstractMethodDef() {\r", "-      // Test one that works but needs to be augmented with public.\r", "-      MethodDef mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                             _abstractMav, \r", "-                                             new TypeParameter[0], \r", "-                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), \r", "-                                             new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),\r", "-                                             new FormalParameter[0],\r", "-                                             new ReferenceType[0]);\r", "-      _cbiv._symbolData.setMav(_abstractMav);\r", "-\r", "-      mdef.visit(_cbiv);\r", "-      assertEquals(\"There should not be any errors\", 0, errors.size());\r", "-      assertEquals(\"_sd1 should contain 1 methods\", 1, _sd1.getMethods().size());\r", "-      assertTrue(\"The method should be public\", _sd1.getMethods().getFirst().hasModifier(\"public\"));\r", "-\r", "-      \r", "-      \r", "-      \r", "-      // Test one that doesn't work.\r", "-      mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                             _abstractMav, \r", "-                                             new TypeParameter[0], \r", "-                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), \r", "-                                             new Word(JExprParser.NO_SOURCE_INFO, \"monkey\"),\r", "-                                             new FormalParameter[0],\r", "-                                             new ReferenceType[0]);\r", "-      mdef.visit(_cbiv);\r", "-      assertEquals(\"There should be one error.\", 1, errors.size());\r", "-      assertEquals(\"The error message should be correct.\", \r", "-                   \"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",\r", "-                   errors.get(0).getFirst());\r", "-    }\r", "+    ", "+    public void testForAbstractMethodDef() {", "+      // Test one that works but needs to be augmented with public.", "+      MethodDef mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                             _abstractMav, ", "+                                             new TypeParameter[0], ", "+                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "+                                             new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                             new FormalParameter[0],", "+                                             new ReferenceType[0]);", "+      _cbiv._classData.setMav(_abstractMav);", "+", "+      mdef.visit(_cbiv);", "+      assertEquals(\"There should not be any errors\", 0, errors.size());", "+      assertEquals(\"_sd1 should contain 1 methods\", 1, _sd1.getMethods().size());", "+      assertTrue(\"The method should be default public\", _sd1.getMethods().getFirst().hasModifier(\"public\"));", "+", "+      ", "+      ", "+      ", "+      // Test one that doesn't work.", "+      mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                             _abstractMav, ", "+                                             new TypeParameter[0], ", "+                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "+                                             new Word(JExprParser.NO_SOURCE_INFO, \"monkey\"),", "+                                             new FormalParameter[0],", "+                                             new ReferenceType[0]);", "+      mdef.visit(_cbiv);", "+      assertEquals(\"There should be one error.\", 1, errors.size());", "+      assertEquals(\"The error message should be correct.\", ", "+                   \"Only constructors can have the same name as the class they appear in, \" +", "+                   \"and constructors do not have an explicit return type\",", "+                   errors.get(0).getFirst());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb22c52919ba3f6c5ee6f50d659ec9b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r     \r \r     \r \r     \r     public void testForConcreteMethodDef()", "signatureAfterChange": "                      public void testForConcreteMethodDef()", "diff": ["-    \r", "-    public void testForConcreteMethodDef() {\r", "-      // Test one that works.\r", "-      MethodDef mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                             _privateMav, \r", "-                                             new TypeParameter[0], \r", "-                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), \r", "-                                             new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),\r", "-                                             new FormalParameter[0],\r", "-                                             new ReferenceType[0], \r", "-                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));\r", "-      mdef.visit(_cbiv);\r", "-      assertEquals(\"There should not be any errors.\", 0, errors.size());\r", "-\r", "-      \r", "-      //Check one that works but needs to be augmented with public\r", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO,\r", "-                                                    _packageMav,\r", "-                                                    new TypeParameter[0],\r", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),\r", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"noMavMethod\"),\r", "-                                                    new FormalParameter[0],\r", "-                                                    new ReferenceType[0],\r", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));\r", "-      \r", "-      cmd1.visit(_cbiv);\r", "-      assertEquals(\"There should not be any errors\", 0, errors.size());\r", "-      assertEquals(\"_sd1 should contain 2 methods\", 2, _sd1.getMethods().size());\r", "-      assertTrue(\"The second method should be public\", _sd1.getMethods().get(1).hasModifier(\"public\"));\r", "-\r", "-      \r", "-      \r", "-      // Test one that doesn't work.\r", "-      mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                             _packageMav, \r", "-                                             new TypeParameter[0], \r", "-                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), \r", "-                                             new Word(JExprParser.NO_SOURCE_INFO, \"monkey\"),\r", "-                                             new FormalParameter[0],\r", "-                                             new ReferenceType[0], \r", "-                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));\r", "-      mdef.visit(_cbiv);\r", "-      assertEquals(\"There should be one error.\", 1, errors.size());\r", "-      assertEquals(\"The error message should be correct.\", \r", "-                   \"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",\r", "-                   errors.get(0).getFirst());\r", "-    }\r", "+    ", "+    public void testForConcreteMethodDef() {", "+      // Test one that works.", "+      MethodDef mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                             _privateMav, ", "+                                             new TypeParameter[0], ", "+                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "+                                             new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                             new FormalParameter[0],", "+                                             new ReferenceType[0], ", "+                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      mdef.visit(_cbiv);", "+      assertEquals(\"There should not be any errors.\", 0, errors.size());", "+", "+      ", "+      //Check one that works but needs to be augmented with public", "+      ConcreteMethodDef cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO,", "+                                                    _packageMav,", "+                                                    new TypeParameter[0],", "+                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "+                                                    new Word(JExprParser.NO_SOURCE_INFO, \"noMavMethod\"),", "+                                                    new FormalParameter[0],", "+                                                    new ReferenceType[0],", "+                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ", "+      cmd1.visit(_cbiv);", "+      assertEquals(\"There should not be any errors\", 0, errors.size());", "+      assertEquals(\"_sd1 should contain 2 methods\", 2, _sd1.getMethods().size());", "+      assertTrue(\"The second method should be default public\", _sd1.getMethods().get(1).hasModifier(\"public\"));", "+", "+      ", "+      ", "+      // Test one that doesn't work.", "+      mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                             _packageMav, ", "+                                             new TypeParameter[0], ", "+                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "+                                             new Word(JExprParser.NO_SOURCE_INFO, \"monkey\"),", "+                                             new FormalParameter[0],", "+                                             new ReferenceType[0], ", "+                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      mdef.visit(_cbiv);", "+      assertEquals(\"There should be one error.\", 1, errors.size());", "+      assertEquals(\"The error message should be correct.\", ", "+                   \"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+                   errors.get(0).getFirst());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d090bddde3218c6d3cc1cc967d4f8d50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r     \r     public void testForAbstractMethodDefDoFirst()", "signatureAfterChange": "          public void testForAbstractMethodDefDoFirst()", "diff": ["-    \r", "-    public void testForAbstractMethodDefDoFirst() {\r", "-      // Check one that doesn't work\r", "-      AbstractMethodDef amd = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                                    _abstractMav, \r", "-                                                    new TypeParameter[0], \r", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), \r", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),\r", "-                                                    new FormalParameter[0],\r", "-                                                    new ReferenceType[0]);\r", "-      amd.visit(_cbiv);\r", "-      assertEquals(\"There should be one error.\", 1, errors.size());\r", "-      assertEquals(\"The error message should be correct.\", \"Abstract methods can only be declared in abstract classes\", errors.get(0).getFirst());\r", "-      \r", "-      // Check one that works\r", "-      _cbiv._symbolData.setMav(_abstractMav);\r", "-      AbstractMethodDef amd2 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                                     _abstractMav, \r", "-                                                     new TypeParameter[0], \r", "-                                                     new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), \r", "-                                                     new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),\r", "-                                                     new FormalParameter[0],\r", "-                                                     new ReferenceType[0]);\r", "-      amd2.visit(_cbiv);\r", "-      assertEquals(\"There should still be one error\", 1, errors.size());\r", "-      \r", "-      // Check one that doesn't work because it is static\r", "-      AbstractMethodDef amd3 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                                     _abstractStaticMav, \r", "-                                                     new TypeParameter[0], \r", "-                                                     new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), \r", "-                                                     new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),\r", "-                                                     new FormalParameter[0],\r", "-                                                     new ReferenceType[0]);\r", "-      amd3.visit(_cbiv);\r", "-      assertEquals(\"There should be two errors\", 2, errors.size());\r", "-      assertEquals(\"The error message should be correct\", \"Static methods cannot be used at the Intermediate level\", errors.get(1).getFirst());\r", "-    }\r", "+    ", "+    public void testForAbstractMethodDefDoFirst() {", "+      // Check one that doesn't work", "+      AbstractMethodDef amd = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                                    _abstractMav, ", "+                                                    new TypeParameter[0], ", "+                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "+                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                    new FormalParameter[0],", "+                                                    new ReferenceType[0]);", "+      amd.visit(_cbiv);", "+      assertEquals(\"There should be one error.\", 1, errors.size());", "+      assertEquals(\"The error message should be correct.\", \"Abstract methods can only be declared in abstract classes\", ", "+                   errors.get(0).getFirst());", "+      ", "+      // Check one that works", "+      _cbiv._classData.setMav(_abstractMav);", "+      AbstractMethodDef amd2 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                                     _abstractMav, ", "+                                                     new TypeParameter[0], ", "+                                                     new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "+                                                     new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                     new FormalParameter[0],", "+                                                     new ReferenceType[0]);", "+      amd2.visit(_cbiv);", "+      assertEquals(\"There should still be one error\", 1, errors.size());", "+      ", "+      // Check one that doesn't work because it is static", "+      AbstractMethodDef amd3 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                                     _abstractStaticMav, ", "+                                                     new TypeParameter[0], ", "+                                                     new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "+                                                     new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                     new FormalParameter[0],", "+                                                     new ReferenceType[0]);", "+      amd3.visit(_cbiv);", "+      assertEquals(\"There should be two errors\", 2, errors.size());", "+      assertEquals(\"The error message should be correct\", \"Static methods cannot be used at the Intermediate level\", errors.get(1).getFirst());", "+    }"]}], "num": 27581}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f5116117b2e40e6d1f0a15bb8a1894e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c50912e2623483131176592786f662ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "diff": ["-      ", "-      Iterable<Type> classTargs = IterUtil.empty();", "-      if (node.getClassTypeArguments() != null) {", "-        classTargs = checkTypeNameList(node.getClassTypeArguments());", "-      }", "+      Iterable<Type> classTargs = checkTypeNameList(node.getClassTypeArgs().unwrap(Collections.<TypeName>emptyList())); ", "-        ", "-        Iterable<Type> targs = IterUtil.empty();", "-        if (node instanceof PolymorphicAnonymousInnerAllocation) {", "-          targs = checkTypeNameList(((PolymorphicAnonymousInnerAllocation) node).getTypeArguments());", "-        }", "+        Iterable<Type> targs = checkTypeNameList(node.getTypeArgs().unwrap(Collections.<TypeName>emptyList())); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6c6d28fd45f0f451ef053000743944a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     @Override public Type visit(InnerAllocation node)", "signatureAfterChange": "     @Override public Type visit(InnerAllocation node)", "diff": ["-      ", "-      Iterable<Type> classTargs = IterUtil.empty();", "-      if (node.getClassTypeArguments() != null) {", "-        classTargs = checkTypeNameList(node.getClassTypeArguments());", "-      }", "+      Iterable<Type> classTargs = checkTypeNameList(node.getClassTypeArgs().unwrap(Collections.<TypeName>emptyList())); ", "-        ", "-        Iterable<Type> targs = IterUtil.empty();", "-        if (node instanceof PolymorphicInnerAllocation) {", "-          targs = checkTypeNameList(((PolymorphicInnerAllocation) node).getTypeArguments());", "-        }", "+        Iterable<Type> targs = checkTypeNameList(node.getTypeArgs().unwrap(Collections.<TypeName>emptyList())); "]}], "num": 5078}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "463dfe2a9c3ad35f7b0162b6e86ac971", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "762e5fa270aa1ded6d7ae443b03039cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 216, "signatureBeforeChange": "   public static <T> Predicate<T> negate(final Predicate<? super T> pred)", "signatureAfterChange": "   public static <T> Predicate<T> negate(final Predicate<? super T> pred)", "diff": ["-  /** @return  The negation ({@code !}) of {@code pred} */", "+  /** Produce the negation ({@code !}) of {@code pred}. */", "-    return new Predicate<T>() { public Boolean value(T arg) { return !pred.value(arg); } };", "+    return new NegationPredicate<T>(pred);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "772c04a232bb19bd5a36bec60868389b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 303, "signatureBeforeChange": "   public static <T> Predicate<T> asPredicate(final Lambda<? super T, ? extends Boolean> lambda)", "signatureAfterChange": "   public static <T> Predicate<T> asPredicate(Lambda<? super T, ? extends Boolean> lambda)", "diff": ["-  /** @return  A predicate based on an input that acts as a predicate but is not typed as one */", "-  public static <T> Predicate<T> asPredicate(final Lambda<? super T, ? extends Boolean> lambda) {", "-    return new Predicate<T>() { public Boolean value(T arg) { return lambda.value(arg); } };", "-  }", "+  /** Create a predicate based on an input that acts as a predicate but is not typed as one. */", "+  public static <T> Predicate<T> asPredicate(Lambda<? super T, ? extends Boolean> lambda) {", "+    return new LambdaPredicate<T>(lambda);", "+  }"]}], "num": 7197}
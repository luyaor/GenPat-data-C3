{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bce2eaed15c4a5bcaf635c9ea1b5c29d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6a3bb62ebfcd7f9be44e30beac312fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 37, "signatureBeforeChange": "   protected void _storeInCache(String key, Object result)", "signatureAfterChange": "   protected void _storeInCache(String key, Object result)", "diff": ["-    throwErrorHuh();", "-    _cacheInUse = true;", "-    ", "-    // Prevent going over max size", "-    if (_helperCache.size() >= MAX_CACHE_SIZE) {", "-      if (_helperCacheHistory.size() > 0) {", "-        _helperCache.remove( _helperCacheHistory.get(0) );", "-        _helperCacheHistory.remove(0);", "+    // throwErrorHuh();", "+    synchronized (_helperCache) {", "+      ", "+      _cacheInUse = true;", "+      ", "+      // Prevent going over max size", "+      if (_helperCache.size() >= MAX_CACHE_SIZE) {", "+        if (_helperCacheHistory.size() > 0) {", "+          _helperCache.remove( _helperCacheHistory.get(0) );", "+          _helperCacheHistory.remove(0);", "+        }", "+        else {", "+          // Shouldn't happen", "+          throw new RuntimeException(\"Cache larger than cache history!\");", "+        }", "-      else {", "-        // Shouldn't happen", "-        throw new RuntimeException(\"Cache larger than cache history!\");", "+      Object prev = _helperCache.put(key, result);", "+      // Add to history if the insert increased the size of the table", "+      if (prev == null) {", "+        _helperCacheHistory.add(key);", "-    Object prev = _helperCache.put(key, result);", "-    // Add to history if the insert increased the size of the table", "-    if (prev == null) {", "-      _helperCacheHistory.add(key);", "-    }", "-    ", "-    /*", "-     long end = System.currentTimeMillis();", "-     Long start = (Long)_helperCache.get(key+\"|time\");", "-     if (start != null) {", "-     _helperCache.remove(key+\"|time\");", "-     long delay = end - start.longValue();", "-     if (delay > maxHelpDelay) {", "-     maxHelpDelay = delay;", "-     maxKey = key;", "-     //DrJava.consoleOut().println(\"   Longest: \" + maxHelpDelay + \"ms from \" + maxKey +", "-     //                            \", line \" + getCurrentLine());", "-     }", "-     }", "-     else {", "-     DrJava.consoleOut().println(\"  CACHE MISS: \" + key);", "-     }", "-     */", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6bc6cccb8573ed064e7e87e3a9696be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void removeInterpreter(String name)", "signatureAfterChange": "   public void removeInterpreter(String name)", "diff": ["+  // This method must be public because it is part of a declared interface", "+  public void removeInterpreter(String name) {", "+    synchronized(_interpreters) { _interpreters.remove(name); }", "+  }", "-  /** Removes the interpreter with the given name, if it exists. */", "-  public void removeInterpreter(String name) {", "-    _interpreters.remove(name);", "-    _environments.remove(name);", "-  }"]}], "num": 18484}
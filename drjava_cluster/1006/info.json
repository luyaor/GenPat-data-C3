{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f01baa48af2b7cbd71d1ba19aac213f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10ec193e7183ad68dcf3b4a66141bcaf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void testStepInto()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testStepInto()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["+   */", "+  public void testStepInto() ", "+    throws DebugException, BadLocationException, IOException, InterruptedException", "+  {", "+    if (printMessages) System.out.println(\"----testStepInto----\");", "+    StepTestListener debugListener = new StepTestListener();", "+    ", "+    // Compile the class", "+    OpenDefinitionsDocument doc = _doCompile(DEBUG_CLASS, tempFile());", "+   ", "+    _debugManager.addListener(debugListener); ", "+    // Start debugger", "+    synchronized(_notifierLock) {", "+      _debugManager.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(1);", "+    ", "+    // Add a breakpoint", "+    _debugManager.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"bar();\"),4);", "+    debugListener.assertBreakpointSetCount(1);", "+    ", "+    // Run the foo() method, hitting breakpoint", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"new DrJavaDebugClass().foo()\");", "+      _waitForNotifies(3);  // suspended, updated, breakpointReached", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+      ", "+    // Ensure breakpoint is hit", "+    debugListener.assertBreakpointReachedCount(1);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(1);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(1);  //fires", "+    debugListener.assertCurrThreadResumedCount(0);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertInteractionsContains(\"Foo Line 1\");", "+    assertInteractionsDoesNotContain(\"Bar Line 1\");", "+", "+    // Step into bar() method", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_INTO);", "+      _waitForNotifies(1);  // suspended", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "+    //NOTE: LocationUpdatedCount is still 1 because the manager could not find the", "+    //file on the sourcepath so the count was not updated.", "+    debugListener.assertThreadLocationUpdatedCount(1);", "+    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertInteractionsDoesNotContain(\"Bar Line 1\");", "+    ", "+    // Step to next line", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_OVER);", "+      _waitForNotifies(1);  // suspended", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) System.out.println(\"****\"+getInteractionsText());", "+    debugListener.assertStepRequestedCount(2);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(2); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(1);  ", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(3);  //fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    assertInteractionsContains(\"Bar Line 1\");", "+    assertInteractionsDoesNotContain(\"Bar Line 2\");", "+    ", "+    // Step to next line", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_OVER);", "+      _waitForNotifies(1);  // suspended", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(3);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(3); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(4);  //fires", "+    debugListener.assertBreakpointReachedCount(1);        ", "+    assertInteractionsContains(\"Bar Line 2\");", "+    assertInteractionsDoesNotContain(\"Foo Line 3\");", "+    ", "+    // Step twice to print last line in Foo", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_OVER);", "+      _waitForNotifies(1);  // suspended", "+      _notifierLock.wait();", "+    }", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_OVER);", "+      _waitForNotifies(1);  // suspended", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(5);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(5); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(6);  //fires", "+    debugListener.assertBreakpointReachedCount(1);      ", "+    assertInteractionsContains(\"Foo Line 3\");", "+    ", "+    ", "+    // Step again to finish", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_OVER);", "+      _waitForNotifies(1);  // threadDied", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(6);  // fires (don't wait)", "+    debugListener.assertCurrThreadDiedCount(1);", "+", "+      // Remove listener at end", "+    if (printMessages) System.out.println(\"Shutting down...\");", "+    synchronized(_notifierLock) {", "+      _debugManager.shutdown();", "+      _waitForNotifies(1);  // shutdown", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertBreakpointRemovedCount(1);  //fires once (no waiting)", "+    debugListener.assertDebuggerShutdownCount(1);  //fires", "+    if (printMessages) System.out.println(\"Shut down.\");", "+    _debugManager.removeListener(debugListener);", "+  }", "-   */", "-  public void testStepInto() ", "-    throws DebugException, BadLocationException, IOException, InterruptedException", "-  {", "-    if (printMessages) System.out.println(\"----testStepInto----\");", "-    DebugTestListener debugListener = new DebugTestListener() {", "-      public void breakpointSet(Breakpoint bp) {", "-        breakpointSetCount++;", "-      }", "-      public void breakpointReached(Breakpoint bp) {", "-        synchronized(_notifierLock) {", "-          breakpointReachedCount++;", "-          if (printEvents) System.out.println(\"breakpointReached \" + breakpointReachedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void breakpointRemoved(Breakpoint bp) {", "-        //synchronized(_notifierLock) {", "-          breakpointRemovedCount++;", "-          if (printEvents) System.out.println(\"breakpointRemoved \" + breakpointRemovedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void stepRequested() {", "-        //synchronized(_notifierLock) {", "-          stepRequestedCount++;", "-          if (printEvents) System.out.println(\"stepRequested \" + stepRequestedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadSuspended() {", "-        synchronized(_notifierLock) {", "-          currThreadSuspendedCount++;", "-          if (printEvents) System.out.println(\"threadSuspended \" + currThreadSuspendedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void currThreadResumed() {", "-        //synchronized(_notifierLock) {", "-          currThreadResumedCount++;", "-          if (printEvents) System.out.println(\"threadResumed \" + currThreadResumedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadDied() {", "-        synchronized(_notifierLock) {", "-          currThreadDiedCount++;", "-          if (printEvents) System.out.println(\"threadDied \" + currThreadDiedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber){", "-        synchronized(_notifierLock) {", "-          threadLocationUpdatedCount++;", "-          if (printEvents) System.out.println(\"threadUpdated \" + threadLocationUpdatedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerShutdown() {", "-        synchronized(_notifierLock) {", "-          debuggerShutdownCount++;", "-          if (printEvents) System.out.println(\"debuggerShutdown \" + debuggerShutdownCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerStarted() {", "-        synchronized(_notifierLock) {", "-          debuggerStartedCount++;", "-          if (printEvents) System.out.println(\"debuggerStarted \" + debuggerStartedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-    };", "-    ", "-    // Compile the class", "-    OpenDefinitionsDocument doc = _doCompile(DEBUG_CLASS, tempFile());", "-   ", "-    _debugManager.addListener(debugListener); ", "-    // Start debugger", "-    synchronized(_notifierLock) {", "-      _startup();  //_debugManager.startup();", "-      _waitForNotifies(1);  // startup", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertDebuggerStartedCount(1);", "-    ", "-    // Add a breakpoint", "-    _debugManager.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"bar();\"),4);", "-    debugListener.assertBreakpointSetCount(1);", "-    ", "-    // Run the foo() method, hitting breakpoint", "-    synchronized(_notifierLock) {", "-      interpretIgnoreResult(\"new DrJavaDebugClass().foo()\");", "-      _waitForNotifies(3);  // suspended, updated, breakpointReached", "-      _notifierLock.wait();", "-    }", "-    ", "-    if (printMessages) System.out.println(\"----After breakpoint:\\n\" + _getInteractionsText());", "-      ", "-    // Ensure breakpoint is hit", "-    debugListener.assertBreakpointReachedCount(1);  //fires", "-    debugListener.assertThreadLocationUpdatedCount(1);  //fires", "-    debugListener.assertCurrThreadSuspendedCount(1);  //fires", "-    debugListener.assertCurrThreadResumedCount(0);", "-    debugListener.assertCurrThreadDiedCount(0);", "-    assertInteractionsContains(\"Foo Line 1\");", "-    assertInteractionsDoesNotContain(\"Bar Line 1\");", "-", "-    // Step into bar() method", "-    synchronized(_notifierLock){", "-      _debugManager.step(DebugManager.STEP_INTO);", "-      _waitForNotifies(1);  // suspended", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "-    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "-    //NOTE: LocationUpdatedCount is still 1 because the manager could not find the", "-    //file on the sourcepath so the count was not updated.", "-    debugListener.assertThreadLocationUpdatedCount(1);", "-    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "-    debugListener.assertBreakpointReachedCount(1);", "-    debugListener.assertCurrThreadDiedCount(0);", "-    assertInteractionsDoesNotContain(\"Bar Line 1\");", "-    ", "-    // Step to next line", "-    synchronized(_notifierLock){", "-      _debugManager.step(DebugManager.STEP_OVER);", "-      _waitForNotifies(1);  // suspended", "-      _notifierLock.wait();", "-    }", "-    ", "-    if (printMessages) System.out.println(\"****\"+_getInteractionsText());", "-    debugListener.assertStepRequestedCount(2);  // fires (don't wait)", "-    debugListener.assertCurrThreadResumedCount(2); // fires (don't wait)", "-    debugListener.assertThreadLocationUpdatedCount(1);  ", "-    debugListener.assertCurrThreadDiedCount(0);", "-    debugListener.assertCurrThreadSuspendedCount(3);  //fires", "-    debugListener.assertBreakpointReachedCount(1);", "-    assertInteractionsContains(\"Bar Line 1\");", "-    assertInteractionsDoesNotContain(\"Bar Line 2\");", "-    ", "-", "-    // Step to next line", "-    synchronized(_notifierLock){", "-      _debugManager.step(DebugManager.STEP_OVER);", "-      _waitForNotifies(1);  // suspended", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertStepRequestedCount(3);  // fires (don't wait)", "-    debugListener.assertCurrThreadResumedCount(3); // fires (don't wait)", "-    debugListener.assertThreadLocationUpdatedCount(1);", "-    debugListener.assertCurrThreadDiedCount(0);", "-    debugListener.assertCurrThreadSuspendedCount(4);  //fires", "-    debugListener.assertBreakpointReachedCount(1);        ", "-    assertInteractionsContains(\"Bar Line 2\");", "-    assertInteractionsDoesNotContain(\"Foo Line 3\");", "-    ", "-    // Step twice to print last line in Foo", "-    synchronized(_notifierLock){", "-      _debugManager.step(DebugManager.STEP_OVER);", "-      _waitForNotifies(1);  // suspended", "-      _notifierLock.wait();", "-    }", "-", "-    synchronized(_notifierLock){", "-      _debugManager.step(DebugManager.STEP_OVER);", "-      _waitForNotifies(1);  // suspended", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertStepRequestedCount(5);  // fires (don't wait)", "-    debugListener.assertCurrThreadResumedCount(5); // fires (don't wait)", "-    debugListener.assertThreadLocationUpdatedCount(1);", "-    debugListener.assertCurrThreadDiedCount(0);", "-    debugListener.assertCurrThreadSuspendedCount(6);  //fires", "-    debugListener.assertBreakpointReachedCount(1);      ", "-    assertInteractionsContains(\"Foo Line 3\");", "-    ", "-    ", "-    // Step again to finish", "-    synchronized(_notifierLock){", "-      _debugManager.step(DebugManager.STEP_OVER);", "-      _waitForNotifies(1);  // threadDied", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertStepRequestedCount(6);  // fires (don't wait)", "-    debugListener.assertCurrThreadDiedCount(1);", "-", "-      // Remove listener at end", "-    if (printMessages) System.out.println(\"Shutting down...\");", "-    synchronized(_notifierLock) {", "-      _debugManager.shutdown();", "-      _waitForNotifies(1);  // shutdown", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertBreakpointRemovedCount(1);  //fires once (no waiting)", "-    debugListener.assertDebuggerShutdownCount(1);  //fires", "-    if (printMessages) System.out.println(\"Shut down.\");", "-    _debugManager.removeListener(debugListener);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "846ab97e144a3e7790e3d1b7730d58f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testDebugSourcepath()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testDebugSourcepath()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-    DebugTestListener debugListener = new DebugTestListener() {", "-      public void breakpointSet(Breakpoint bp) {", "-        breakpointSetCount++;", "-      }", "-      public void breakpointReached(Breakpoint bp) {", "-        synchronized(_notifierLock) {", "-          breakpointReachedCount++;", "-          if (printEvents) System.out.println(\"breakpointReached \" + breakpointReachedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void breakpointRemoved(Breakpoint bp) {", "-        //synchronized(_notifierLock) {", "-        breakpointRemovedCount++;", "-        if (printEvents) System.out.println(\"breakpointRemoved \" + breakpointRemovedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void stepRequested() {", "-        //synchronized(_notifierLock) {", "-          stepRequestedCount++;", "-          if (printEvents) System.out.println(\"stepRequested \" + stepRequestedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadSuspended() {", "-        synchronized(_notifierLock) {", "-          currThreadSuspendedCount++;", "-          if (printEvents) System.out.println(\"threadSuspended \" + currThreadSuspendedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void currThreadResumed() {", "-        //synchronized(_notifierLock) {", "-        currThreadResumedCount++;", "-        if (printEvents) System.out.println(\"threadResumed \" + currThreadResumedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadDied() {", "-        synchronized(_notifierLock) {", "-          currThreadDiedCount++;", "-          if (printEvents) System.out.println(\"threadDied \" + currThreadDiedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber){", "-        synchronized(_notifierLock) {", "-          threadLocationUpdatedCount++;", "-          if (printEvents) System.out.println(\"threadUpdated \" + threadLocationUpdatedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerShutdown() {", "-        synchronized(_notifierLock) {", "-          debuggerShutdownCount++;", "-          if (printEvents) System.out.println(\"debuggerShutdown \" + debuggerShutdownCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerStarted() {", "-        synchronized(_notifierLock) {", "-          debuggerStartedCount++;", "-          if (printEvents) System.out.println(\"debuggerStarted \" + debuggerStartedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-    };", "+    StepTestListener debugListener = new StepTestListener();", "-      _startup();  //_debugManager.startup();", "+      _debugManager.startup();", "-    // Source is highlighted because doc is on breakpoint object", "+    // Source is highlighted because document is stored in breakpoint", "-    // Source is highlighted because file is on sourcepath", "+    // Source is highlighted because file is now on sourcepath"]}], "num": 1006}
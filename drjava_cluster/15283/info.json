{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02a468b1ac6bd815d9151fa801864371", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "570b2c4bd536dd4348dfa5067433a175", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DocumentRegionTest.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testRegionManager() throws BadLocationException", "signatureAfterChange": "   public void testRegionManager() throws BadLocationException", "diff": ["-    assertNull(rm.getRegionContaining(_doc, 5, 5));", "-    assertNull(rm.getRegionContaining(_doc, 4, 6));", "-    assertNull(rm.getRegionContaining(_doc, 3, 7));", "-    assertNull(rm.getRegionContaining(_doc, 2, 8));", "-    assertNull(rm.getRegionContaining(_doc, 2, 5));", "-    assertNull(rm.getRegionContaining(_doc, 5, 8));", "+    ", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 5, 5).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 4, 6).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 3, 7).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 2, 8).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 2, 5).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 5, 8).size() == 0);", "-    assertTrue(r1==rm.getRegionAt(_doc, 5));", "-    assertTrue(r1==rm.getRegionAt(_doc, 3));", "-    assertTrue(r1==rm.getRegionAt(_doc, 7));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 5));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 3));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 4));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 6));", "+    ", "+    assertNull(rm.getRegionAt(_doc, 7));", "-    assertTrue(r1==rm.getRegionContaining(_doc, 5, 5));", "-    assertTrue(r1==rm.getRegionContaining(_doc, 4, 6));", "-    assertTrue(r1==rm.getRegionContaining(_doc, 3, 7));", "-    assertNull(rm.getRegionContaining(_doc, 2, 8));", "-    assertNull(rm.getRegionContaining(_doc, 2, 5));", "-    assertNull(rm.getRegionContaining(_doc, 5, 8));", "+    ", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 5, 6).contains(r1));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 4, 6).contains(r1));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 3, 7).contains(r1));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 2, 3).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 5, 5).size() == 0);", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 5, 8).contains(r1));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 15, 18).size() == 0);", "-    assertNull(rm.getRegionContaining(_doc, 15, 15));", "-    assertNull(rm.getRegionContaining(_doc, 14, 16));", "-    assertNull(rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18));", "+", "-    assertTrue(r2==rm.getRegionAt(_doc, 15));", "-    assertTrue(r2==rm.getRegionAt(_doc, 13));", "-    assertTrue(r2==rm.getRegionAt(_doc, 17));", "+    assertTrue(r2 == rm.getRegionAt(_doc, 15));", "+    assertTrue(r2 == rm.getRegionAt(_doc, 13));", "+    assertNull(rm.getRegionAt(_doc, 17));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 15, 15));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 14, 16));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18)); ", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 15, 15).size() == 0);", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 0, 14).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 14, 16).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 10, 17).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 10, 20).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 16, 17).contains(r2));", "+", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 17, 18).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 10, 13).size() == 0); ", "-    // r2 and r3 are the same region, so the region will be reused", "-    // and we get r2 back", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 6, 14).contains(r1)); ", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 6, 14).contains(r2));", "+    ", "+//    // r2 and r3 are the same region, so the region will be reused", "+//    // and we get r2 back", "-    rm.addRegion(r3);", "-    assertTrue(r2==rm.getRegionAt(_doc, 15));", "-    assertTrue(r2==rm.getRegionAt(_doc, 13));", "-    assertTrue(r2==rm.getRegionAt(_doc, 17));", "-    assertNull(rm.getRegionAt(_doc, 12));", "-    assertNull(rm.getRegionAt(_doc, 18));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 15, 15));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 14, 16));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18)); ", "+//    rm.addRegion(r3);", "+//    assertTrue(r2==rm.getRegionAt(_doc, 15));", "+//    assertTrue(r2==rm.getRegionAt(_doc, 13));", "+//    assertTrue(r2==rm.getRegionAt(_doc, 17));", "+//    assertNull(rm.getRegionAt(_doc, 12));", "+//    assertNull(rm.getRegionAt(_doc, 18));", "+//    assertTrue(r2==rm.getRegionsOverlapping(_doc, 15, 15));", "+//    assertTrue(r2==rm.getRegionsOverlapping(_doc, 14, 16));", "+//    assertTrue(r2==rm.getRegionsOverlapping(_doc, 13, 17));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 18));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 15));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 15, 18)); ", "-    assertNull(rm.getRegionContaining(_doc, 15, 15));", "-    assertNull(rm.getRegionContaining(_doc, 14, 16));", "-    assertNull(rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18)); ", "-", "-    assertNull(rm.getRegionAt(_doc, 15));", "-    assertNull(rm.getRegionAt(_doc, 13));", "-    assertNull(rm.getRegionAt(_doc, 17));", "-    assertNull(rm.getRegionAt(_doc, 12));", "-    assertNull(rm.getRegionAt(_doc, 18));", "-    assertNull(rm.getRegionContaining(_doc, 15, 15));", "-    assertNull(rm.getRegionContaining(_doc, 14, 16));", "-    assertNull(rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 13, 15).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 14, 16).size() == 0);", "+//    assertNull(rm.getRegionsOverlapping(_doc, 13, 17));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 18));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 15));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 15, 18)); ", "-    assertNull(rm.getRegionContaining(_doc, 5, 5));", "-    assertNull(rm.getRegionContaining(_doc, 4, 6));", "-    assertNull(rm.getRegionContaining(_doc, 3, 7));", "-    assertNull(rm.getRegionContaining(_doc, 2, 8));", "-    assertNull(rm.getRegionContaining(_doc, 2, 5));", "-    assertNull(rm.getRegionContaining(_doc, 5, 8));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 5, 5).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 4, 6).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 3, 7).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 2, 8).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 2, 5).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 5, 8).size() == 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "591eb0233a0aa99419f3c977907b4012", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["-    _mainframe = frame;", "-", "-    int i = WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;", "-    InputMap fim = _findField.getInputMap(i);", "-    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), \"Close\");", "-    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), \"Find Next\");", "-    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus Forward\");", "-    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK), \"Switch Focus Back\");", "-    ", "-    ActionMap fam = _findField.getActionMap();", "-    fam.put(\"Find Next\", _findNextAction);", "-    fam.put(\"Close\", new AbstractAction(\"Close\") {", "-      public void actionPerformed(ActionEvent ae) {", "-        _frame.getCurrentDefPane().requestFocusInWindow();", "-        _close();", "-      }", "-    });", "-    fam.put(\"Switch Focus Forward\", new AbstractAction(\"Switch Focus Forward\") {", "-      public void actionPerformed(ActionEvent ae) { _findField.getNextFocusableComponent().requestFocusInWindow(); }", "-    });", "-    fam.put(\"Switch Focus Back\", new AbstractAction(\"Switch Focus Back\") {", "-      public void actionPerformed(ActionEvent ae) { _closeButton.requestFocusInWindow(); }", "-    });", "-    InputMap rim = _replaceField.getInputMap(i);", "-    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus Forward\");", "-    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK), \"Switch Focus Back\");", "-    ", "-    ActionMap ram = _replaceField.getActionMap();", "-    ram.put(\"Switch Focus\", new AbstractAction(\"Switch Focus\") {", "-      public void actionPerformed(ActionEvent ae) { _replaceField.getNextFocusableComponent().requestFocusInWindow(); }", "-    });", "-    ram.put(\"Switch Focus Back\", new AbstractAction(\"Switch Focus Back\") {", "-      public void actionPerformed(ActionEvent ae) { _findField.requestFocusInWindow(); }", "-    });", "-    ", "-    ", "-    // Setup color listeners.", "-    new ForegroundColorListener(_findField);", "-    new BackgroundColorListener(_findField);", "-    new ForegroundColorListener(_replaceField);", "-    new BackgroundColorListener(_replaceField);", "-    ", "-    /********* Lower Button Panel Initialization ********/", "+    /********* Button Initialization ********/", "-    _message = new JLabel(\"\"); // JL", "-    // set up the layout", "-    /******** Text Field Initializations ********/", "-    // Sets font for the \"Find\" field", "-    Font font = DrJava.getConfig().getSetting(FONT_MAIN);", "+    /********* Find/Replace Field Initialization **********/", "+    _findField = new JTextPane(new DefaultStyledDocument());", "+    _replaceField = new JTextPane(new SwingDocument());", "+    ", "+    // Ignore special treatment of 'tab' in text panes", "+    int tabForward = KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS;", "+    int tabBackward = KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS;", "+    _findField.setFocusTraversalKeys(tabForward, null);", "+    _replaceField.setFocusTraversalKeys(tabForward, null);", "+    _findField.setFocusTraversalKeys(tabBackward, null);", "+    _replaceField.setFocusTraversalKeys(tabBackward, null);", "+    ", "+    // Define custom key bindings for 'enter' and 'tab'", "+    KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);", "+    KeyStroke ctrlEnter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, Event.CTRL_MASK);", "+    KeyStroke ctrlTab = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.CTRL_MASK);", "+    InputMap findIM = _findField.getInputMap();", "+    InputMap replaceIM = _replaceField.getInputMap();", "+    findIM.put(enter, \"Do Find\");", "+    findIM.put(ctrlEnter, \"Insert Newline\");", "+    findIM.put(ctrlTab, \"Insert Tab\");", "+    replaceIM.put(enter, \"Insert Newline\");", "+    replaceIM.put(ctrlEnter, \"Insert Newline\");", "+    replaceIM.put(ctrlTab, \"Insert Tab\");", "+    ", "+    Action insertTabAction = new DefaultEditorKit.InsertTabAction();", "+    ActionMap findAM = _findField.getActionMap();", "+    ActionMap replaceAM = _replaceField.getActionMap();", "+    findAM.put(\"Do Find\", _doFindAction);", "+    findAM.put(\"Insert Newline\", _standardNewlineAction);", "+    findAM.put(\"Insert Tab\", insertTabAction);", "+    replaceAM.put(\"Insert Newline\", _standardNewlineAction);", "+    replaceAM.put(\"Insert Tab\", insertTabAction);", "+    ", "+    // Setup color listeners.", "+    new ForegroundColorListener(_findField);", "+    new BackgroundColorListener(_findField);", "+    new ForegroundColorListener(_replaceField);", "+    new BackgroundColorListener(_replaceField);", "+    Font font = DrJava.getConfig().getSetting(OptionConstants.FONT_MAIN);", "-", "+    ", "+    ", "+    /******** Label Initializations ********/", "-    _replaceLabelTop = new JLabel(\"Replace\", SwingConstants.RIGHT);", "-    _replaceLabelBot = new JLabel(\"With\", SwingConstants.RIGHT);", "+    JLabel _replaceLabelTop = new JLabel(\"Replace\", SwingConstants.RIGHT);", "+    JLabel _replaceLabelBot = new JLabel(\"With\", SwingConstants.RIGHT);", "-    _findLabelTop = new JLabel(\"Find\", SwingConstants.RIGHT);", "+    JLabel _findLabelTop = new JLabel(\"Find\", SwingConstants.RIGHT);", "-    findLabelPanel.add(findLabelPanelBot);                     ", "+    findLabelPanel.add(findLabelPanelBot);", "-    ", "-//    // need separate label and field panels so that the find and", "-//    // replace textfields line up", "-//    _labelPanel = new JPanel(new GridLayout(2,1));", "-//    _labelPanel.add(_findLabel);", "-//    _labelPanel.add(_replaceLabel);", "-//    _labelPanel.setBorder(new EmptyBorder(0,5,0,5)); // 5 pix on sides", "-//    _labelPanel.setFocusable(false);", "-    MatchCaseListener mcl = new MatchCaseListener();", "-    _matchCase = new JCheckBox(\"Match Case\", DrJava.getConfig().getSetting(OptionConstants.FIND_MATCH_CASE));", "-    _machine.setMatchCase(DrJava.getConfig().getSetting(OptionConstants.FIND_MATCH_CASE));", "-    _matchCase.addItemListener(mcl);", "-", "-    _machine.setSearchBackwards(DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "+    boolean matchCaseSelected = DrJava.getConfig().getSetting(OptionConstants.FIND_MATCH_CASE);", "+    _matchCase = new JCheckBox(\"Match Case\", matchCaseSelected);", "+    _machine.setMatchCase(matchCaseSelected);", "+    _matchCase.addItemListener(new ItemListener() {", "+      public void itemStateChanged(ItemEvent e) {", "+        boolean selected = (e.getStateChange() == ItemEvent.SELECTED);", "+        _machine.setMatchCase(selected);", "+        DrJava.getConfig().setSetting(OptionConstants.FIND_MATCH_CASE, selected);", "+        _findField.requestFocusInWindow();", "+      }", "+    });", "-    SearchAllDocumentsListener sadl= new SearchAllDocumentsListener();", "-    _searchAllDocuments = new JCheckBox(\"Search All Documents\", DrJava.getConfig().getSetting(OptionConstants.FIND_ALL_DOCUMENTS));", "-    _machine.setSearchAllDocuments(DrJava.getConfig().getSetting(OptionConstants.FIND_ALL_DOCUMENTS));", "-    _searchAllDocuments.addItemListener(sadl);", "-", "-    MatchWholeWordListener mwwl = new MatchWholeWordListener();", "-    _matchWholeWord = new JCheckBox(\"Whole Word\", DrJava.getConfig().getSetting(OptionConstants.FIND_WHOLE_WORD));// new JRadioButton(\"Whole Word\"); // JL", "-    if (DrJava.getConfig().getSetting(OptionConstants.FIND_WHOLE_WORD)) _machine.setMatchWholeWord();", "-    else  _machine.setFindAnyOccurrence();", "-    _matchWholeWord.addItemListener(mwwl);", "-    _matchCase.setPreferredSize(_matchWholeWord.getPreferredSize());", "-     ", "-    IgnoreCommentsAndStringsListener icasl = new IgnoreCommentsAndStringsListener();", "-    _ignoreCommentsAndStrings = new JCheckBox(\"No Comments/Strings\", DrJava.getConfig().getSetting(OptionConstants.FIND_NO_COMMENTS_STRINGS));", "-    _machine.setIgnoreCommentsAndStrings(DrJava.getConfig().getSetting(OptionConstants.FIND_NO_COMMENTS_STRINGS));", "-    _ignoreCommentsAndStrings.addItemListener(icasl);", "-", "-    this.removeAll(); // actually, override the behavior of TabbedPanel", "-", "+    boolean searchAllSelected = DrJava.getConfig().getSetting(OptionConstants.FIND_ALL_DOCUMENTS);", "+    _searchAllDocuments = new JCheckBox(\"Search All Documents\", searchAllSelected);", "+    _machine.setSearchAllDocuments(searchAllSelected);", "+    _searchAllDocuments.addItemListener(new ItemListener() {", "+      public void itemStateChanged(ItemEvent e) {", "+        boolean selected = (e.getStateChange() == ItemEvent.SELECTED);", "+        _machine.setSearchAllDocuments(selected);", "+        DrJava.getConfig().setSetting(OptionConstants.FIND_ALL_DOCUMENTS, selected);", "+        _findField.requestFocusInWindow();", "+      }", "+    });", "+    ", "+    boolean matchWordSelected = DrJava.getConfig().getSetting(OptionConstants.FIND_WHOLE_WORD);", "+    _matchWholeWord = new JCheckBox(\"Whole Word\", matchWordSelected);", "+    if (matchWordSelected) { _machine.setMatchWholeWord(); }", "+    else { _machine.setFindAnyOccurrence(); }", "+    _matchWholeWord.addItemListener(new ItemListener() {", "+      public void itemStateChanged(ItemEvent e) {", "+        boolean selected = (e.getStateChange() == ItemEvent.SELECTED);", "+        if (selected) { _machine.setMatchWholeWord(); }", "+        else { _machine.setFindAnyOccurrence(); }", "+        DrJava.getConfig().setSetting(OptionConstants.FIND_WHOLE_WORD, selected);", "+        _findField.requestFocusInWindow();", "+      }", "+    });", "+    ", "+    boolean ignoreCommentsSelected = DrJava.getConfig().getSetting(OptionConstants.FIND_NO_COMMENTS_STRINGS);", "+    _ignoreCommentsAndStrings = new JCheckBox(\"No Comments/Strings\", ignoreCommentsSelected);", "+    _machine.setIgnoreCommentsAndStrings(ignoreCommentsSelected);", "+    _ignoreCommentsAndStrings.addItemListener(new ItemListener() {", "+      public void itemStateChanged(ItemEvent e) {", "+        boolean selected = (e.getStateChange() == ItemEvent.SELECTED);", "+        _machine.setIgnoreCommentsAndStrings(selected);", "+        DrJava.getConfig().setSetting(OptionConstants.FIND_NO_COMMENTS_STRINGS, selected);", "+        _findField.requestFocusInWindow();", "+      }", "+    });", "+    ", "+    // We choose not to preserve backwards searching between sessions", "+    //_machine.setSearchBackwards(DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "+    ", "+    this.removeAll(); // actually, override the behavior of TabbedPanel", "+", "-    _lowerCheckPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    JPanel _lowerCheckPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "-    _matchCaseAndAllDocsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    JPanel _matchCaseAndAllDocsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    _matchCase.setPreferredSize(_matchWholeWord.getPreferredSize());", "-    _searchAllDocuments.setSelected(false);", "-", "+    BorderlessScrollPane _findPane = new BorderlessScrollPane(_findField);", "+    BorderlessScrollPane _replacePane = new BorderlessScrollPane(_replaceField);", "-    /******** Set upt the Panel containing the two above main panels ********/", "+    /******** Set up the Panel containing the two above main panels ********/", "-    /******** Set upt the Panel containing the midPanel and the closePanel ********/", "-    _rightPanel = new JPanel(new BorderLayout(5, 5));", "+    /******** Set up the Panel containing the midPanel and the closePanel ********/", "+     JPanel _rightPanel = new JPanel(new BorderLayout(5, 5));", "-", "-    /******* Put all the main panels onto the Find/Replace tab ********/", "-//    hookComponents(this, _rightPanel, new JPanel(), buttons);", "-    ", "-", "-    /******** Set the Tab order ********/", "-    _findField.setNextFocusableComponent(_replaceField);", "-    _replaceField.setNextFocusableComponent(_matchCase);", "-    _matchCase.setNextFocusableComponent(_searchAllDocuments);", "-    _searchAllDocuments.setNextFocusableComponent(_matchWholeWord); // JL (edited)", "-    _matchWholeWord.setNextFocusableComponent(_ignoreCommentsAndStrings); // JL (edited)", "-    _ignoreCommentsAndStrings.setNextFocusableComponent(_findNextButton);", "-    _findNextButton.setNextFocusableComponent(_findPreviousButton);", "-    _findPreviousButton.setNextFocusableComponent(_replaceFindNextButton);", "-    _replaceFindNextButton.setNextFocusableComponent(_replaceFindPreviousButton);", "-    _replaceFindPreviousButton.setNextFocusableComponent(_replaceButton);", "-    _replaceButton.setNextFocusableComponent(_replaceAllButton);", "-    _replaceAllButton.setNextFocusableComponent(_closeButton);", "-    _closeButton.setNextFocusableComponent(_findField);", "-    ", "-    ", "-    /************** Change behavior of findField ****************/", "-     ", "-    Keymap km = _findField.addKeymap(\"Find Field Bindings\", _findField.getKeymap());", "-      ", "-    KeyStroke findKey = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);", "-    km.addActionForKeyStroke(findKey, _findEnterAction); ", "-    ", "-    KeyStroke switchFocusForwardKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0);", "-    km.addActionForKeyStroke(switchFocusForwardKey, _findFieldSwitchFocusForwardAction); ", "-    ", "-    KeyStroke switchFocusBackKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK);", "-    km.addActionForKeyStroke(switchFocusBackKey, _findFieldSwitchFocusBackAction); ", "-    ", "-    Action findNewLineAction = new TextAction(\"NewLine Action\") {", "-      public void actionPerformed(ActionEvent e) {", "-        String text = _findField.getText();", "-        int caretPos = _findField.getCaretPosition();", "-        String textBeforeCaret = text.substring(0, caretPos);", "-        String textAfterCaret = text.substring(caretPos);", "-        _findField.setText(textBeforeCaret.concat(\"\\n\").concat(textAfterCaret));", "-        _findField.setCaretPosition(caretPos+1);", "-      }", "-    };    ", "-//    Action newLineAction = new DefaultEditorKit.InsertBreakAction();", "-    ", "-    KeyStroke newLineKey = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, Event.CTRL_MASK);", "-    km.addActionForKeyStroke(newLineKey, findNewLineAction); ", "-    ", "-    Action tabAction = new DefaultEditorKit.InsertTabAction();", "-    KeyStroke tabKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.CTRL_MASK);", "-    km.addActionForKeyStroke(tabKey, tabAction); ", "-    _findField.setKeymap(km);", "-", "-    ", "-    /************** Change behavior of replaceField ****************/", "-  ", "-    Keymap rkm = _replaceField.addKeymap(\"Replace Field Bindings\", _replaceField.getKeymap());", "-    ", "-    Action replaceNewLineAction = new TextAction(\"NewLine Action\") {", "-      public void actionPerformed(ActionEvent e) {", "-        String text = _replaceField.getText();", "-        int caretPos = _replaceField.getCaretPosition();", "-        String textBeforeCaret = text.substring(0, caretPos);", "-        String textAfterCaret = text.substring(caretPos);", "-        _replaceField.setText(textBeforeCaret.concat(\"\\n\").concat(textAfterCaret));", "-        _replaceField.setCaretPosition(caretPos+1);", "-      }", "-    };    ", "-    ", "-    rkm.addActionForKeyStroke(newLineKey, replaceNewLineAction);", "-    rkm.addActionForKeyStroke(switchFocusForwardKey, _replaceFieldSwitchFocusForwardAction); ", "-    rkm.addActionForKeyStroke(switchFocusBackKey, _replaceFieldSwitchFocusBackAction);", "-    rkm.addActionForKeyStroke(tabKey, tabAction); ", "-    _replaceField.setKeymap(rkm);"]}], "num": 15283}
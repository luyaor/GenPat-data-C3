{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1503c261470d74cb49efb8f4449378b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44aafef5fce51f3f4561822b6534e047", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 366, "methodNumberAfterChange": 366, "signatureBeforeChange": "\r \r   public void forCompoundWord(CompoundWord that)", "signatureAfterChange": "    public void forCompoundWord(CompoundWord that)", "diff": ["-\r", "-  public void forCompoundWord(CompoundWord that) {\r", "-    forCompoundWordDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getWords().length; i++) that.getWords()[i].visit(this);\r", "-    forCompoundWordOnly(that);\r", "-  }\r", "+", "+  public void forCompoundWord(CompoundWord that) {", "+    forCompoundWordDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getWords().length; i++) that.getWords()[i].visit(this);", "+    forCompoundWordOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eed834f8442c2f31363f26eec5cf79d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 405, "methodNumberAfterChange": 405, "signatureBeforeChange": "\r \r   public void forArrayInitializer(ArrayInitializer that)", "signatureAfterChange": "    public void forArrayInitializer(ArrayInitializer that)", "diff": ["-\r", "-  public void forArrayInitializer(ArrayInitializer that) {\r", "-    forArrayInitializerDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getItems().length; i++) that.getItems()[i].visit(this);\r", "-    forArrayInitializerOnly(that);\r", "-  }\r", "+", "+  public void forArrayInitializer(ArrayInitializer that) {", "+    forArrayInitializerDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getItems().length; i++) that.getItems()[i].visit(this);", "+    forArrayInitializerOnly(that);", "+  }"]}], "num": 15218}
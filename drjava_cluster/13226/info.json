{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4820f5226fb4c5f6d4c68923487e50be", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "237a12474cc95cf38d9df21aa8d4a676", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "d7ad233986e68ea13b262a57ebd130ce2e9ceed5", "commitAfterChange": "d581c32ea49adc707a4c5dd3f5443e6e5e93cd47", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   void scrollToSource(LocatableEvent e)", "signatureAfterChange": "   void scrollToSource(LocatableEvent e)", "diff": ["-    ReferenceType rt = location.declaringType();", "-    String className = rt.name();", "-    String ps = System.getProperty(\"file.separator\");", "-    // replace periods with the System's file separator", "-    className = StringOps.replace(className, \".\", ps);", "+    OpenDefinitionsDocument doc = null;", "-    // crop off the $ if there is one and anything after it", "-    int indexOfDollar = className.indexOf('$');    ", "-    if (indexOfDollar > -1) {", "-      className = className.substring(0, indexOfDollar);", "+    // First see if doc is stored", "+    EventRequest request = e.request();", "+    Object docProp = request.getProperty(\"document\");", "+    if ((docProp != null) && (docProp instanceof OpenDefinitionsDocument)) {", "+      doc = (OpenDefinitionsDocument) docProp;", "-    ", "-    File[] roots = _model.getSourceRootSet();", "-    File f = null;", "-    boolean found = false;", "-    for (int i = 0; i < roots.length; i++) {", "-      String currRoot = roots[i].getAbsolutePath();", "-      DrJava.consoleOut().println(\"Trying to find \" + currRoot + ps + className + ", "-                                  \".java\");", "-      f = new File(currRoot + ps + className + \".java\");", "-      if (f.exists()) {", "-        found = true;", "-        break;", "+    else {", "+      // No stored doc, look on the source root set (later, also the sourcepath)", "+      ReferenceType rt = location.declaringType();", "+      String className = rt.name();", "+      String ps = System.getProperty(\"file.separator\");", "+      // replace periods with the System's file separator", "+      className = StringOps.replace(className, \".\", ps);", "+      ", "+      // crop off the $ if there is one and anything after it", "+      int indexOfDollar = className.indexOf('$');    ", "+      if (indexOfDollar > -1) {", "+        className = className.substring(0, indexOfDollar);", "+      }", "+      ", "+      File[] roots = _model.getSourceRootSet();", "+      File f = null;", "+      boolean foundFile = false;", "+      for (int i = 0; i < roots.length; i++) {", "+        String currRoot = roots[i].getAbsolutePath();", "+        DrJava.consoleOut().println(\"Trying to find \" + currRoot + ps + className + ", "+                                    \".java\");", "+        f = new File(currRoot + ps + className + \".java\");", "+        if (f.exists()) {", "+          foundFile = true;", "+          break;", "+        }", "+      }", "+      if (foundFile) {", "+        // Get a document for this file, forcing it to open", "+        DrJava.consoleOut().println(\"found file: \" + f.getAbsolutePath());", "+        try {", "+          doc = _model.getDocumentForFile(f);", "+        }", "+        catch (IOException ioe) {", "+          // No doc, so don't notify listener", "+          DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + ioe);", "+        }", "+        catch (OperationCanceledException oce) {", "+          // No doc, so don't notify listener", "+          DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + oce);", "+        }", "-    if (found) {", "-      DrJava.consoleOut().println(\"found file: \" + f.getAbsolutePath() + ", "-                                  \", will scroll to line: \" + location.lineNumber());", "-      _listener.scrollToLineInSource(f, ", "+    ", "+    // Open and scroll if doc was found", "+    if (doc != null) {", "+      DrJava.consoleOut().println(\"Will scroll to line: \" + location.lineNumber());", "+      _listener.scrollToLineInSource(doc, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4f994f6eae0594955d6ea8ae25f0678", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "314c962d7f6ed2c6b00f5edc6e764b582b016016", "commitAfterChange": "3b2b8c4279d3d3c19a0254256362d4d46aeeddaf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp() throws IOException", "signatureAfterChange": "   public void setUp() throws IOException", "diff": ["-    _testFile = File.createTempFile(\"_test\", \"pjt\");", "+    _projFile = File.createTempFile(\"test\", \".pjt\");", "+    _file1 = File.createTempFile(\"test1\",\".java\");", "+    _file2 = File.createTempFile(\"test2\",\".java\");", "-    reader = new BufferedReader(new FileReader(_testFile));", "-    BufferedWriter w = new BufferedWriter(new FileWriter(_testFile));", "-    w.write(TEST_FILE_TEXT);", "+    // generate the relative path names for the files in the project file", "+    String temp = _file1.getParentFile().getCanonicalPath();", "+    _file1RelName = _file1.getCanonicalPath().substring(temp.length()+1); ", "+    temp = _file2.getParentFile().getCanonicalPath();", "+    _file2RelName = _file2.getCanonicalPath().substring(temp.length()+1);", "+    ", "+    _projFileText = ", "+      \";; DrJava project file.  Written with build: 20040623-1933\\n\" +", "+      \"(source ;; comment\\n\" +", "+      \"   (file (name \\\"\"+ _file1RelName +\"\\\")(select 32 32))\\n\" +", "+      \"   (file (name \\\"\"+ _file2RelName +\"\\\")(select 0 0)))\\n\";", "+    ", "+    reader = new BufferedReader(new FileReader(_projFile));", "+    BufferedWriter w = new BufferedWriter(new FileWriter(_projFile));", "+    w.write(_projFileText);"]}], "num": 13226}
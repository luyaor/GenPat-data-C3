{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3006b01c7dc083f838d293563a10fc32", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0006a348cffa91a81dfab0ab0ed98b05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "b29182d94c1064d5f838746a211b47a58b37d210", "commitAfterChange": "794ab3843272bc249648b9e2c1b10b791437e615", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "signatureAfterChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "diff": ["+    TypeParameter[]   typeParameters = null;", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LESS:", "+      typeParameters = TypeParameters();", "+      break;", "+    default:", "+      jj_la1[24] = jj_gen;", "+      ;", "+    }", "-        jj_la1[23] = jj_gen;", "+        jj_la1[25] = jj_gen;", "-      jj_la1[24] = jj_gen;", "+      jj_la1[26] = jj_gen;", "-      jj_la1[25] = jj_gen;", "+      jj_la1[27] = jj_gen;", "-        {if (true) return new MethodDeclaration(flags, typ, id.image, params,", "-                                     exceptions,", "-                                     (body instanceof BlockStatement) ?", "-                                       (BlockStatement)body : null,", "-                                     filename,", "-                                     bl, bc, body.getEndLine(), body.getEndColumn());}", "+        if (typeParameters == null){", "+          {if (true) return new MethodDeclaration(flags, typ, id.image, params,", "+                                       exceptions,", "+                                       (body instanceof BlockStatement) ?", "+                                         (BlockStatement)body : null,", "+                                       filename,", "+                                       bl, bc, body.getEndLine(), body.getEndColumn());}", "+        } else {", "+          GenericTypesEnv = GenericTypesEnv.getRest(); // pop added type params", "+          {if (true) return new PolymorphicMethodDeclaration(flags, typ, id.image, params,", "+                                                  exceptions,", "+                                                  (body instanceof BlockStatement) ?", "+                                                    (BlockStatement)body : null,", "+                                                  filename,", "+                                                  bl, bc, body.getEndLine(), body.getEndColumn(),", "+                                                  typeParameters);}", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1986ea25f1a7d4e0b3f9e14788319607", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "b29182d94c1064d5f838746a211b47a58b37d210", "commitAfterChange": "794ab3843272bc249648b9e2c1b10b791437e615", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 47, "signatureBeforeChange": "   final public InterfaceDeclaration unmodifiedInterfaceDeclaration(ModifierFlags mf) throws ParseException", "signatureAfterChange": "   final public InterfaceDeclaration unmodifiedInterfaceDeclaration(ModifierFlags mf) throws ParseException", "diff": ["+    TypeParameter[] typeParameters = null;", "+    case LESS:", "+      typeParameters = TypeParameters();", "+      break;", "+    default:", "+      jj_la1[38] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      jj_la1[36] = jj_gen;", "+      jj_la1[39] = jj_gen;", "+      case LESS:", "-        jj_la1[37] = jj_gen;", "+        jj_la1[40] = jj_gen;", "-      {if (true) return new InterfaceDeclaration(m, id.image, impl, list,", "-                                      filename,", "-                                      t.beginLine, t.beginColumn,", "-                                      e.endLine,   e.endColumn);}", "+      if (typeParameters == null){", "+        {if (true) return new InterfaceDeclaration(m, id.image, impl, list,", "+                                        filename,", "+                                        t.beginLine, t.beginColumn,", "+                                        e.endLine,   e.endColumn);}", "+      } else {", "+        GenericTypesEnv = GenericTypesEnv.getRest(); // pop added type params", "+        {if (true) return new GenericInterfaceDeclaration(m, id.image, impl, list,", "+                                               filename,", "+                                               t.beginLine, t.beginColumn,", "+                                               e.endLine, e.endColumn,", "+                                               typeParameters);}", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45183348d420c7259a20125477121c5c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "b29182d94c1064d5f838746a211b47a58b37d210", "commitAfterChange": "794ab3843272bc249648b9e2c1b10b791437e615", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "   final public ClassDeclaration unmodifiedClassDeclaration(ModifierFlags mf) throws ParseException", "signatureAfterChange": "   final public ClassDeclaration unmodifiedClassDeclaration(ModifierFlags mf) throws ParseException", "diff": ["+    TypeParameter[] typeParameters = null;", "+    case LESS:", "+      typeParameters = TypeParameters();", "+      break;", "+    default:", "+      jj_la1[14] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      jj_la1[14] = jj_gen;", "+      jj_la1[15] = jj_gen;", "-      jj_la1[15] = jj_gen;", "+      jj_la1[16] = jj_gen;", "-      if (mf == null) {", "-        {if (true) return new ClassDeclaration(0, id.image, ext, impl, body.list,", "-                                    filename,", "-                                    t.beginLine,  t.beginColumn,", "-                                    body.endLine, body.endColumn);}", "-      } else {", "-        {if (true) return new ClassDeclaration(mf.accessFlags, id.image, ext, impl, body.list,", "-                                    filename,", "-                                    mf.beginLine, mf.beginColumn,", "-                                    body.endLine, body.endColumn);}", "+      if (typeParameters != null){", "+        GenericTypesEnv = GenericTypesEnv.getRest(); // pop added type params", "+        if (mf == null) {", "+          {if (true) return new GenericClassDeclaration(0, id.image, ext, impl, body.list,", "+                                             filename,", "+                                             t.beginLine,  t.beginColumn,", "+                                             body.endLine, body.endColumn, typeParameters);}", "+        } else {", "+          {if (true) return new GenericClassDeclaration(mf.accessFlags, id.image, ext, impl, body.list,", "+                                             filename,", "+                                             mf.beginLine, mf.beginColumn,", "+                                             body.endLine, body.endColumn, typeParameters);}", "+        }", "+      }", "+      else {", "+        if (mf == null) {", "+          {if (true) return new ClassDeclaration(0, id.image, ext, impl, body.list,", "+                                      filename,", "+                                      t.beginLine,  t.beginColumn,", "+                                      body.endLine, body.endColumn);}", "+        } else {", "+          {if (true) return new ClassDeclaration(mf.accessFlags, id.image, ext, impl, body.list,", "+                                      filename,", "+                                      mf.beginLine, mf.beginColumn,", "+                                      body.endLine, body.endColumn);}", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90e6eca6be805363a5fe5b1ffa8bb0e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "480277542c22ee726328704403a3f512c72cbc44", "commitAfterChange": "a7174554906b671f62d483cb1503079ad4cf43ea", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   final public ConstructorDeclaration constructorDeclaration() throws ParseException", "signatureAfterChange": "   final public ConstructorDeclaration constructorDeclaration() throws ParseException", "diff": ["+    TypeParameter[]   typeParameters = null;", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LESS:", "+      typeParameters = TypeParameters();", "+      break;", "+    default:", "+      jj_la1[37] = jj_gen;", "+      ;", "+    }", "-      jj_la1[37] = jj_gen;", "+      jj_la1[38] = jj_gen;", "-        jj_la1[38] = jj_gen;", "+        jj_la1[39] = jj_gen;", "-       {if (true) return new ConstructorDeclaration(flag, id.image, params, exceptions, ci, stmts, lastFormalParameterIsVarArgs,", "-                                         filename,", "-                                         bl, bc,", "-                                         e.endLine, e.endColumn);}", "+       if (typeParameters == null){", "+         {if (true) return new ConstructorDeclaration(flag, id.image, params, exceptions, ci, stmts,", "+                                           filename, bl, bc, e.endLine, e.endColumn);}", "+       } else {", "+         GenericTypesEnv = GenericTypesEnv.getRest(); // pop added type params", "+         {if (true) return new PolymorphicConstructorDeclaration(flag, id.image, params,", "+                                                      exceptions, ci, stmts,", "+                                                      filename, bl, bc, e.endLine, e.endColumn, typeParameters);}", "+       }"]}], "num": 25299}
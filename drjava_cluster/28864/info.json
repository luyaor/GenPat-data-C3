{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df265a4ab23544664f4ee06fbd997b7d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e97aee32ea6272094d8a2ab008609b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "b4cb953a15f76465c4fdfdd0a3efe47737f78efc", "commitAfterChange": "da8b20243b85298aada190df10fa721e07aae787", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 156, "signatureBeforeChange": "              public void dumpBounds(Runnable1<Type> dumpType)", "signatureAfterChange": "              public void dumpBounds()", "diff": ["-      public void dumpBounds(Runnable1<Type> dumpType) {", "+      public void dumpBounds() {", "-            if (printedFirst) { result.append(\"; \"); }", "+            if (printedFirst) { _result.append(\"; \"); }", "-            result.append(_names.get(v));", "-            result.append(\" <: \");", "-            dumpType.run(upper); // may increase the size of _vars", "+            _result.append(_names.get(v));", "+            _result.append(\" <: \");", "+            TypeWriter.this.run(upper); // may increase the size of _vars", "-            if (printUpper) { result.append(\", \"); }", "-            result.append(_names.get(v));", "-            result.append(\" :> \");", "-            dumpType.run(lower); // may increase the size of _vars", "+            if (printUpper) { _result.append(\", \"); }", "+            _result.append(_names.get(v));", "+            _result.append(\" :> \");", "+            TypeWriter.this.run(lower); // may increase the size of _vars"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76eb6907ae415ba9d631c585b493e28d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 255, "signatureBeforeChange": "      public void appendConstraints()", "signatureAfterChange": "              private String nameForVariable(VariableType t)", "diff": ["-", "-    public void appendConstraints() {", "-      if (!_variableHandler.isEmpty()) {", "-        _result.append(\" [\");", "-        _variableHandler.dumpBounds();", "-        _result.append(\"]\");", "-      }", "-    }", "+      ", "+      private String nameForVariable(VariableType t) {", "+        String name = _names.get(t);", "+        if (name == null) {", "+          if (t.symbol().generated()) { _captureVars++; name = \"?T\" + _captureVars; }", "+          else { name = t.symbol().name(); }", "+          _names.put(t, name);", "+          // check to see if bounds need to be printed", "+          Type upper = t.symbol().upperBound();", "+          Type lower = t.symbol().lowerBound();", "+          boolean printUpper = !isEqual(upper, OBJECT) /*&& !isEqual(upper, TOP)*/;", "+          boolean printLower = !isEqual(lower, NULL) /*&& !isEqual(lower, BOTTOM)*/;", "+          if (printUpper || printLower) _boundedVars.add(t);", "+        }", "+        return name;", "+      }"]}], "num": 28864}
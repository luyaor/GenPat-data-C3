{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d8f4ae1ab0055dfa67c9eeab5c7912d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c28e32e66050f3caf0d8d7fbd853056", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "a2b28a9213fa3cc634db7fda88e14ebb0a103974", "commitAfterChange": "56df485f00337d373f1f0b94fc58f7c7b8b714d4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "     public FindResult findNext()", "diff": ["-   */", "-  public FindResult findNext() {", "-    try {", "-      FindResult tempFr = new FindResult(_doc, -1, false);", "-      // If the user just found and toggled the \"Search Backwards\"", "-      // option, we should skip the first find.", "-      if (_skipOneFind) {", "-        int wordLength = _lastFindWord.length();", "-        if (!_searchBackwards) {", "-          setPosition(getCurrentOffset() + wordLength);", "-        }", "-        else {", "-          setPosition(getCurrentOffset() - wordLength);", "-        }", "-        positionChanged();", "-      }", "-      int start, len;", "-      String findWord = this._findWord;", "-      // get the search space in the document", "-      String findSpace;", "-      if(!_searchBackwards){", "-        start = _current.getOffset();", "-        len = _doc.getLength() - start;", "-      } else {", "-        start = 0;", "-        len = _current.getOffset();", "-      }", "-      findSpace = _doc.getText(start, len);", "-      if (!_matchCase){", "-        findSpace = findSpace.toLowerCase();", "-        findWord = findWord.toLowerCase();", "-      }", "-", "-      // find the first occurrence of findWord", "-      int foundOffset;", "-      foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-                                      : findSpace.lastIndexOf(findWord);", "-      // if we've found it", "-      if (foundOffset >= 0) {", "-        _found = true;", "-        foundOffset += start;", "-        if (!_searchBackwards){", "-           foundOffset += findWord.length();", "-        }", "-        _current = _doc.createPosition(foundOffset);", "-      }", "-      else {", "-        // if we haven't found it", "-        if (_searchAllDocuments) {", "-          tempFr = _findNextInAllDocs(!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "-                                        _docIterator.getPrevDocument(_doc));", "-          foundOffset = tempFr.getFoundOffset();", "-        }", "-        // we still haven't found it", "-        if (foundOffset == -1) {", "-          _wrapped = true;", "-          //When we wrap, we need to include some text that was already searched before wrapping.", "-          //Otherwise, we won't find an only match that has the caret in it already.", "-          if(!_searchBackwards){", "-            start = 0;", "-            len = _current.getOffset() + (_findWord.length() - 1);", "-            if(len > _doc.getLength()){", "-              len = _doc.getLength();", "-            }", "-          } ", "-          else {", "-            start = _current.getOffset() - (_findWord.length() - 1);", "-            if (start < 0){", "-              start = 0;", "-            }", "-            len = _doc.getLength() - start;", "-          }", "-          findSpace = _doc.getText(start, len);", "-          ", "-          if (!_matchCase) {", "-            findSpace = findSpace.toLowerCase();", "-          }", "-          foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-            : findSpace.lastIndexOf(findWord);", "-          ", "-          if (foundOffset >= 0) {", "-            foundOffset += start;", "-            if (!_searchBackwards) {", "-              foundOffset += findWord.length();", "-            }", "-            _current = _doc.createPosition(foundOffset);", "-          }", "-        }", "-      }", "-      // flag the return value so that they can tell that we had to wrap", "-      // the file to determine the info.", "-", "-      //This means we have found the word before, just not in this call", "-//      if(foundOffset == -1 && _found) {", "-//        _current = _start;", "-//        _found = false;", "-//        return findNext();", "-//      }", "-//      else {", "-      FindResult fr = new FindResult(tempFr.getDocument(), foundOffset, _wrapped);", "-      _wrapped = false;", "-      return fr;", "-//      }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-  }", "+    */", "+    public FindResult findNext() {", "+        return _state.findNext();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab5af50ccc3fe241d217abb69713d163", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindAnyOccurrenceState.java", "commitBeforeChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "commitAfterChange": "d61b8181e3991377c3e72e5da1d438e3d26d3479", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["+   */", "+  public FindResult findNext() {", "+    try {", "+      FindResult tempFr = new FindResult(_doc, -1, false);", "+      // If the user just found and toggled the \"Search Backwards\"", "+      // option, we should skip the first find.", "+      if (_skipOneFind) {", "+        int wordLength = _lastFindWord.length();", "+        if (!_searchBackwards) {", "+          setPosition(getCurrentOffset() + wordLength);", "+        }", "+        else {", "+          setPosition(getCurrentOffset() - wordLength);", "+        }", "+        positionChanged();", "+      }", "+      int start, len;", "+      String findWord = _findWord;", "+      // get the search space in the document", "+      String findSpace;", "+      if (!_searchBackwards) {", "+        start = _current.getOffset();", "+        len = _doc.getLength() - start;", "+      }", "+      else {", "+        start = 0;", "+        len = _current.getOffset();", "+      }", "+      findSpace = _doc.getText(start, len);", "+      if (!_matchCase) {", "+        findSpace = findSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+", "+      // find the first occurrence of findWord", "+      int foundOffset;", "+      foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                    : findSpace.lastIndexOf(findWord);", "+      // if we've found it", "+      if (foundOffset >= 0) {", "+        _found = true;", "+        foundOffset += start;", "+        if (!_searchBackwards) {", "+          foundOffset += findWord.length();", "+        }", "+        _current = _doc.createPosition(foundOffset);", "+      }", "+      else {", "+        // if we haven't found it", "+        if (_searchAllDocuments) {", "+          tempFr = _findNextInAllDocs(!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "+                                      _docIterator.getPrevDocument(_doc));", "+          foundOffset = tempFr.getFoundOffset();", "+        }", "+        // we still haven't found it", "+        if (foundOffset == -1) {", "+          _wrapped = true;", "+          //When we wrap, we need to include some text that was already searched before wrapping.", "+          //Otherwise, we won't find an only match that has the caret in it already.", "+          if (!_searchBackwards) {", "+            start = 0;", "+            len = _current.getOffset() + (_findWord.length() - 1);", "+            if (len > _doc.getLength()) {", "+              len = _doc.getLength();", "+            }", "+          }", "+          else {", "+            start = _current.getOffset() - (_findWord.length() - 1);", "+            if (start < 0) {", "+              start = 0;", "+            }", "+            len = _doc.getLength() - start;", "+          }", "+          findSpace = _doc.getText(start, len);", "+", "+          if (!_matchCase) {", "+            findSpace = findSpace.toLowerCase();", "+          }", "+          foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                        : findSpace.lastIndexOf(findWord);", "+", "+          if (foundOffset >= 0) {", "+            foundOffset += start;", "+            if (!_searchBackwards) {", "+              foundOffset += findWord.length();", "+            }", "+            _current = _doc.createPosition(foundOffset);", "+          }", "+        }", "+      }", "+      // flag the return value so that they can tell that we had to wrap", "+      // the file to determine the info.", "+", "+      //This means we have found the word before, just not in this call", "+      //      if(foundOffset == -1 && _found) {", "+      //        _current = _start;", "+      //        _found = false;", "+      //        return findNext();", "+      //      }", "+      //      else {", "+      FindResult fr = new FindResult(tempFr.getDocument(), foundOffset, _wrapped);", "+      _wrapped = false;", "+      return fr;", "+      //      }", "-     */", "-    public FindResult findNext() {", "-\ttry {", "-\t    FindResult tempFr = new FindResult(_doc, -1, false);", "-\t    // If the user just found and toggled the \"Search Backwards\"", "-\t    // option, we should skip the first find.", "-\t    if (_skipOneFind) {", "-\t\tint wordLength = _lastFindWord.length();", "-\t\tif (!_searchBackwards) {", "-\t\t    setPosition(getCurrentOffset() + wordLength);", "-\t\t}", "-\t\telse {", "-\t\t    setPosition(getCurrentOffset() - wordLength);", "-\t\t}", "-\t\tpositionChanged();", "-\t    }", "-\t    int start, len;", "-\t    String findWord = this._findWord;", "-\t    // get the search space in the document", "-\t    String findSpace;", "-\t    if(!_searchBackwards){", "-\t\tstart = _current.getOffset();", "-\t\tlen = _doc.getLength() - start;", "-\t    } else {", "-\t\tstart = 0;", "-\t\tlen = _current.getOffset();", "-\t    }", "-\t    findSpace = _doc.getText(start, len);", "-\t    if (!_matchCase){", "-\t\tfindSpace = findSpace.toLowerCase();", "-\t\tfindWord = findWord.toLowerCase();", "-\t    }", "-", "-\t    // find the first occurrence of findWord", "-\t    int foundOffset;", "-\t    foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-\t\t: findSpace.lastIndexOf(findWord);", "-\t    // if we've found it", "-\t    if (foundOffset >= 0) {", "-\t\t_found = true;", "-\t\tfoundOffset += start;", "-\t\tif (!_searchBackwards){", "-\t\t    foundOffset += findWord.length();", "-\t\t}", "-\t\t_current = _doc.createPosition(foundOffset);", "-\t    }", "-\t    else {", "-\t\t// if we haven't found it", "-\t\tif (_searchAllDocuments) {", "-\t\t    tempFr = _findNextInAllDocs(!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "-\t\t\t    _docIterator.getPrevDocument(_doc));", "-\t\t    foundOffset = tempFr.getFoundOffset();", "-\t\t}", "-\t\t// we still haven't found it", "-\t\tif (foundOffset == -1) {", "-\t\t    _wrapped = true;", "-\t\t    //When we wrap, we need to include some text that was already searched before wrapping.", "-\t\t    //Otherwise, we won't find an only match that has the caret in it already.", "-\t\t    if(!_searchBackwards){", "-\t\t\tstart = 0;", "-\t\t\tlen = _current.getOffset() + (_findWord.length() - 1);", "-\t\t\tif(len > _doc.getLength()){", "-\t\t\t    len = _doc.getLength();", "-\t\t\t}", "-\t\t    }", "-\t\t    else {", "-\t\t\tstart = _current.getOffset() - (_findWord.length() - 1);", "-\t\t\tif (start < 0){", "-\t\t\t    start = 0;", "-\t\t\t}", "-\t\t\tlen = _doc.getLength() - start;", "-\t\t    }", "-\t\t    findSpace = _doc.getText(start, len);", "-", "-\t\t    if (!_matchCase) {", "-\t\t\tfindSpace = findSpace.toLowerCase();", "-\t\t    }", "-\t\t    foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-\t\t\t: findSpace.lastIndexOf(findWord);", "-", "-\t\t    if (foundOffset >= 0) {", "-\t\t\tfoundOffset += start;", "-\t\t\tif (!_searchBackwards) {", "-\t\t\t    foundOffset += findWord.length();", "-\t\t\t}", "-\t\t\t_current = _doc.createPosition(foundOffset);", "-\t\t    }", "-\t\t}", "-\t    }", "-\t    // flag the return value so that they can tell that we had to wrap", "-\t    // the file to determine the info.", "-", "-\t    //This means we have found the word before, just not in this call", "-\t    //      if(foundOffset == -1 && _found) {", "-\t    //        _current = _start;", "-\t    //        _found = false;", "-\t    //        return findNext();", "-\t    //      }", "-\t    //      else {", "-\t    FindResult fr = new FindResult(tempFr.getDocument(), foundOffset, _wrapped);", "-\t    _wrapped = false;", "-\t    return fr;", "-\t    //      }", "-\t}", "-\tcatch (BadLocationException e) {", "-\t    throw new UnexpectedException(e);", "-\t}", "+    catch (BadLocationException e) {", "+      throw new UnexpectedException(e);", "+  }"]}], "num": 12974}
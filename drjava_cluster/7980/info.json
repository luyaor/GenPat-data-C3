{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1df75bbdd5367f27f7de939dc750bdb6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e111b9b18fabce94883c2e9bdb22261", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectTest.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    public void testWriteFile() throws IOException, MalformedProjectFileException", "signatureAfterChange": "    public void testWriteFile() throws IOException, MalformedProjectFileException", "diff": ["-    assertEquals(\"first source filename\", new File(parent,\"/dir1/testfile1.java\").getPath(), ", "-                 pfir.getSourceFiles()[0].getPath());", "-    assertEquals(\"last source filename\", new File(parent,\"/dir3/testfile5.java\").getPath(), ", "-                 pfir.getSourceFiles()[4].getPath());", "+//    assertEquals(\"first source filename\", new File(parent,\"/dir1/testfile1.java\").getPath(), ", "+//                 pfir.getSourceFiles()[0].getPath());", "+//    assertEquals(\"last source filename\", new File(parent,\"/dir3/testfile5.java\").getPath(), ", "+//                 pfir.getSourceFiles()[4].getPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9430949273485c233881470cc36e444e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOpsTest.java", "commitBeforeChange": "ea54d5918e0742266441f70659af74f35bca898d", "commitAfterChange": "e6ef9e23d624990cf9fd00ec857466a046415b6a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void testGetFiles() throws IOException", "signatureAfterChange": "   public void testGetFiles() throws IOException", "diff": ["-    assertEquals(\"non-recursive FilesInDir test\", res1, FileOps.getFilesInDir(dir1, false, ff));", "-    assertEquals(\"recursive FileInDir test\", res2, FileOps.getFilesInDir(dir1, true, ff));", "+    List<File> nrfiles = new ArrayList<File>();", "+    for(File f : FileOps.getFilesInDir(dir1, false, ff)) {", "+      nrfiles.add(f.getCanonicalFile());", "+    }", "+", "+    List<File> rfiles = new ArrayList<File>();", "+    for(File f : FileOps.getFilesInDir(dir1, true, ff)) {", "+      rfiles.add(f.getCanonicalFile());", "+    }", "+        ", "+    assertEquals(\"non-recursive FilesInDir test\", res1, nrfiles);", "+    assertEquals(\"recursive FileInDir test\", res2, rfiles);"]}], "num": 7980}
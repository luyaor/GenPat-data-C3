{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7282babb8318921e6640dd96f05be57", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3c0c6b354610b541cd79b41db79dd2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/TigerTest.java", "commitBeforeChange": "2956623adadc4e9d463894cafecdb1725bf77715", "commitAfterChange": "74ef9fbe03efcd82eb19c1e26298c6b9ada091d1", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "        public void testParseEnumDeclaration1()", "signatureAfterChange": "    public void testParseEnumDeclaration1()", "diff": ["-    ", "+", "-    ", "+", "-    ", "-    List<Expression> args1 = new LinkedList<Expression>();", "-    args1.add(new StringLiteral(\"\\\"CLUBS\\\"\"));", "-    args1.add(new IntegerLiteral(\"0\"));", "-    Allocation constantInit1 = new SimpleAllocation(enumType, args1);", "-    ", "-    List<Expression> args2 = new LinkedList<Expression>();", "-    args2.add(new StringLiteral(\"\\\"DIAMONDS\\\"\"));", "-    args2.add(new IntegerLiteral(\"1\"));", "-    Allocation constantInit2 = new SimpleAllocation(enumType, args2);", "-    ", "-    List<Expression> args3 = new LinkedList<Expression>();", "-    args3.add(new StringLiteral(\"\\\"HEARTS\\\"\"));", "-    args3.add(new IntegerLiteral(\"2\"));", "-    Allocation constantInit3 = new SimpleAllocation(enumType, args3);", "-    ", "-    List<Expression> args4 = new LinkedList<Expression>();", "-    args4.add(new StringLiteral(\"\\\"SPADES\\\"\"));", "-    args4.add(new IntegerLiteral(\"3\"));", "-    Allocation constantInit4 = new SimpleAllocation(enumType, args4);", "-    int fieldAccessFlags = java.lang.reflect.Modifier.PUBLIC | java.lang.reflect.Modifier.STATIC | java.lang.reflect.Modifier.FINAL;", "-    List<Node> body = new LinkedList<Node> ();", "-    ", "-    body.add(new FieldDeclaration(fieldAccessFlags, enumType, \"CLUBS\",    constantInit1));", "-    body.add(new FieldDeclaration(fieldAccessFlags, enumType, \"DIAMONDS\", constantInit2));", "-    body.add(new FieldDeclaration(fieldAccessFlags, enumType, \"HEARTS\",   constantInit3));", "-    body.add(new FieldDeclaration(fieldAccessFlags, enumType, \"SPADES\",   constantInit4));", "-    ", "-    EnumDeclaration ed = new EnumDeclaration(accessFlags, \"Suit\", null, body);", "+", "+    List<EnumDeclaration.EnumConstant> consts = new LinkedList<EnumDeclaration.EnumConstant>();", "+    consts.add(new EnumDeclaration.EnumConstant(\"CLUBS\", null, null));", "+    consts.add(new EnumDeclaration.EnumConstant(\"DIAMONDS\", null, null));", "+    consts.add(new EnumDeclaration.EnumConstant(\"HEARTS\", null, null));", "+    consts.add(new EnumDeclaration.EnumConstant(\"SPADES\", null, null));", "+", "+    List<Node> decl = new LinkedList<Node> ();", "+", "+    EnumDeclaration ed = new EnumDeclaration(accessFlags, \"Suit\", null, new EnumDeclaration.EnumBody(consts, decl));", "-  }    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f45d1648813f73bcb96cfd79db771b37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void startInterpreterJVM()", "diff": ["+  /** Starts the interpreter if it's not running already. */", "+  public void startInterpreterJVM() {", "+    debug.logStart();", "+", "+    boolean alreadyStarted;", "+    synchronized (_startupLock) {", "+      alreadyStarted = (_interpreterJVM.value() != null || !_startupComplete.isSignaled());", "+      if (!alreadyStarted) {", "+        _startupComplete.reset();", "+        _startupAttempts = 1;", "+      }", "+    }", "+    if (alreadyStarted) { debug.log(\"Already started\"); }", "+    else { _doStartup(); }", "+    debug.logEnd();", "+  }", "-  /** Starts the interpreter if it's not running already. */", "-  public void startInterpreterJVM() {", "-    _log.log(this + \".startInterpreterJVM() called\");", "-//    synchronized(_masterJVMLock) {  // synch is unnecessary", "-    if (isStartupInProgress() || isInterpreterRunning())  return;  // These predicates simply check volatile boolean flags", "-//    }", "-    // Pass assertion and debug port information as JVM arguments", "-    ArrayList<String> jvmArgs = new ArrayList<String>();", "-    if (allowAssertions())  jvmArgs.add(\"-ea\");", "-    int debugPort = getDebugPort();", "-    _log.log(\"Main JVM starting with debug port: \" + debugPort);", "-    // Cannot do the following line because it causes an error on Macs in the Eclipse plug-in.", "-    // By instantiating the config, somehow the Apple JVM tries to start up AWT, which seems", "-    // to be prohibited by Eclipse.  Badness ensues.", "-    //    String optionArgString = DrJava.getConfig().getSetting(OptionConstants.JVM_ARGS);", "-    //    List<String> optionArgs = ArgumentTokenizer.tokenize(optionArgString);", "-    jvmArgs.addAll(_optionArgs);", "-    String[] jvmArgsArray = new String[jvmArgs.size()];", "-    for (int i = 0; i < jvmArgs.size(); i++) { jvmArgsArray[i] = jvmArgs.get(i); }", "-    ", "-    // Create and invoke the Interpreter JVM", "-    _numAttempts = 0;", "-    try {", "-      // _startupClasspath is sent in as the interactions classpath", "-//      Utilities.show(\"Calling invokeSlave(\" + jvmArgs + \", \" + _startupClassPath + \", \" +  _workDir +\")\");", "-      invokeSlave(jvmArgsArray, IOUtil.pathToString(_startupClassPath), _workDir);", "-      _slaveJVMUsed = false;", "-    catch (RemoteException re) { _threwException(re); }", "-    catch (IOException ioe) { _threwException(ioe); }", "-  }"]}], "num": 25512}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d876f31bb19271aa7c2ac10c134bb1a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02fb9fc0937cba66c80d9f17fc32bf98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 104, "signatureBeforeChange": "     public void startJUnit() throws ClassNotFoundException, IOException", "signatureAfterChange": "     public void startJUnit() throws ClassNotFoundException, IOException", "diff": ["-    public void startJUnit() throws ClassNotFoundException, IOException{", "+    public void startJUnit() throws ClassNotFoundException, IOException {", "-        if (_docBeingTested != null) {", "+//        if (_docBeingTested != null) {", "+        if (_isTestInProgress) {", "-          _notifier.notifyListeners(new EventNotifier.Notifier() {", "-            public void notifyListener(GlobalModelListener l) {", "-              l.junitStarted(DefinitionsDocumentHandler.this);", "-            }", "-          });", "+          ArrayList<OpenDefinitionsDocument> thisList = new ArrayList<OpenDefinitionsDocument>();", "+          thisList.add(this);", "+          _notifier.junitStarted(thisList);", "-            nonTestCase();", "+            nonTestCase(false);", "-            nonTestCase();", "+            nonTestCase(false);", "-            nonTestCase();", "+            nonTestCase(false);", "-          _interpreterControl.runTestSuite(testFilename,", "-                                           testFile.getAbsolutePath());", "+          ArrayList<String> classNames = new ArrayList<String>();", "+          classNames.add(testFilename);", "+          ArrayList<File> files = new ArrayList<File>();", "+          files.add(testFile);", "+          _interpreterControl.runTestSuite(classNames, files, false);", "-          _docBeingTested = this;", "-          ", "+//          _docBeingTested = this;", "+          _isTestInProgress = true;", "-          nonTestCase();", "+          nonTestCase(false);", "-          _docBeingTested = null;", "-          _notifier.notifyListeners(new EventNotifier.Notifier() {", "-            public void notifyListener(GlobalModelListener l) {", "-              l.junitEnded();", "-            }", "-          });", "+//          _docBeingTested = null;", "+          _isTestInProgress = false;", "+          _notifier.junitEnded();", "-          _docBeingTested = null;", "-          _notifier.notifyListeners(new EventNotifier.Notifier() {", "-            public void notifyListener(GlobalModelListener l) {", "-              l.junitEnded();", "-            }", "-          });", "+//          _docBeingTested = null;", "+          _isTestInProgress = false;", "+          _notifier.junitEnded();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3daba28aefa9ada4702c3a3a1a88a6e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "c34979036dca11c3afc06b42fcb087eaf85bc790", "commitAfterChange": "65d5646e82c85892c2ff64d6a2d537b4dc36c473", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   public Object visit(FunctionCall node)", "signatureAfterChange": "   public Object visit(FunctionCall node)", "diff": ["+    List<Expression> larg = node.getArguments();", "+    ", "+    //If the invoked method is a varargs method the parameters must be packaged in an array", "+    if(md.isVarArgs())", "+    {", "+      if(larg == null) //A varargs function was called with no parameters", "+      {", "+        ArrayInitializer array = new ArrayInitializer(new LinkedList<Expression>());", "+        List<Expression> le = new LinkedList<Expression>();", "+        List<FormalParameter> lfp = md.getParameters();", "+        Iterator<FormalParameter> itfp = lfp.iterator();", "+        if(!itfp.hasNext())", "+          throw new IllegalStateException(\"Variable Arguments function does not have a formal parameter list\");", "+        array.setElementType(itfp.next().getType());", "+        ", "+        le.add(array);", "+        node.setArguments(le);", "+      }", "+      else //A varargs function was called with parameters", "+      {", "+        Iterator<FormalParameter> params = md.getParameters().iterator();", "+        Iterator<Expression> args = larg.iterator();", "+        LinkedList<Expression> le = new LinkedList<Expression>();", "+        FormalParameter fp = null;", "+        while(params.hasNext())", "+        {", "+         fp = params.next();", "+         if(params.hasNext())", "+           le.add(args.next());", "+        }", "+        ", "+        LinkedList<Expression> cells = new LinkedList<Expression>();", "+        while(args.hasNext())", "+        {", "+          cells.add(args.next());", "+        }", "+        ", "+        ArrayInitializer array = new ArrayInitializer(cells);", "+        koala.dynamicjava.tree.Type t = fp.getType();", "+        if(!(t instanceof ArrayType))", "+          throw new IllegalStateException(\"Varargs method does not have an array type for its final parameter\");", "+        array.setElementType(((ArrayType)t).getElementType());", "+        le.add(array);", "+        node.setArguments(le);", "+      } ", "+    }", "+", "-", "+    ", "+    List<FormalParameter> params = md.getParameters();", "+    Iterator<FormalParameter> itParam = params.iterator();", "+    Class<?>[] typs = new Class<?>[params.size()];", "+    ", "+    //Get the types of parameters that this function accepts", "+    int i = 0;", "+    while(itParam.hasNext()){", "+      typs[i++] = (Class<?>)itParam.next().getProperty(NodeProperties.TYPE);", "+    }", "+    ", "+      "]}], "num": 9020}
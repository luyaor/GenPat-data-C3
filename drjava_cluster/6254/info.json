{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b422f5070002623d6cd31af7e3f531fa", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "103413be58a6d98851dc5434231de763", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "signatureAfterChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "diff": ["+      boolean inTestCase = (_doc.getFileName().endsWith(\"Test.java\"));", "+      if (!_ignoreTestCases || !inTestCase) {", "-      ", "+        ", "-      ", "-      ", "-      // find next match in _doc", "-      _doc.acquireReadLock();", "-      FindResult fr;", "-      try { fr = _findNextInDocSegment(_doc, 0, _doc.getLength(), false, allWrapped); } ", "-      finally { _doc.releaseReadLock(); }", "-      ", "-      if (fr.getFoundOffset() >= 0) return fr;", "-      ", "+        ", "+        ", "+        // find next match in _doc", "+        _doc.acquireReadLock();", "+        FindResult fr;", "+        try { fr = _findNextInDocSegment(_doc, 0, _doc.getLength(), false, allWrapped); } ", "+        finally { _doc.releaseReadLock(); }", "+        ", "+        if (fr.getFoundOffset() >= 0) return fr;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6566a1d6c3f5f427c0c2c06f8ee93e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": "   private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, final int start, int len,                                             final boolean wrapped, final boolean allWrapped)", "signatureAfterChange": "   private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, final int start, int len,                                             final boolean wrapped, final boolean allWrapped)", "diff": ["+    boolean inTestCase = (_doc.getFileName().endsWith(\"Test.java\"));", "-    final int docLen = doc.getLength();;     // The length of the segment to be searched", "-    final int wordLen = _findWord.length();   // length of search key (word being searched for)", "-    ", "-    assert (start >= 0 && start <= docLen) && (len >= 0 && len <= docLen);", "-    ", "-    if (len == 0 || docLen == 0) return new FindResult(doc, -1, wrapped, allWrapped);", "-    ", "-    if (start + len > docLen) len = docLen - start;", "-    ", "+    if (!_ignoreTestCases || !inTestCase) {", "+      final int docLen = doc.getLength();;     // The length of the segment to be searched", "+      final int wordLen = _findWord.length();   // length of search key (word being searched for)", "+      ", "+      assert (start >= 0 && start <= docLen) && (len >= 0 && len <= docLen);", "+      ", "+      if (len == 0 || docLen == 0) return new FindResult(doc, -1, wrapped, allWrapped);", "+      ", "+      if (start + len > docLen) len = docLen - start;", "+      ", "-    ", "-    String text;             // The text segment to be searched", "-    final String findWord;   // copy of word being searched (so it can converted to lower case if necessary", "-    ", "-    try { ", "+      String text;             // The text segment to be searched", "+      final String findWord;   // copy of word being searched (so it can converted to lower case if necessary", "+      ", "+      try { ", "+        ", "-      //doc.acquireReadLock(); ", "-      text = doc.getText(start, len);", "-      //finally { doc.releaseReadLock(); }", "-      ", "-      if (! _matchCase) {", "-        text = text.toLowerCase();", "-        findWord = _findWord.toLowerCase();  // does not affect wordLen", "-      }", "-      else findWord = _findWord;", "-//       if (wrapped && allWrapped) Utilities.show(\"Executing loop with findWord = \" + findWord + \"; text = \" + text + \"; len = \" + len);     ", "-      ", "-      // loop to find first valid (not ignored) occurrence of findWord", "-      // loop carried variables are rem, foundOffset; ", "-      // loop invariant variables are _doc, docLen, _isForward, findWord, wordLen, start, len.", "-      // Invariant:  on forwardsearch, foundOffset + rem == len; on backward search foundOffset == rem.", "-      // loop exits by returning match (as FindResult) or by falling through with no match.", "-      // if match is returned, _current has been updated to match location", "-      int foundOffset = _isForward? 0 : len;", "-      int rem = len;", "-//      _log.log(\"Starting search loop; text = '\" + text + \"' findWord = '\" + findWord + \"' forward? = \" + _isForward + \" rem = \" + rem + \" foundOffset = \" + foundOffset);", "-      while (rem >= wordLen) {", "+        //doc.acquireReadLock(); ", "+        text = doc.getText(start, len);", "+        //finally { doc.releaseReadLock(); }", "-        // Find next match in text", "-        foundOffset = _isForward ? text.indexOf(findWord, foundOffset) : text.lastIndexOf(findWord, foundOffset);", "-//        _log.log(\"foundOffset = \" + foundOffset);", "-        if (foundOffset < 0) break;  // no valid match in this document", "-        int foundLocation = start + foundOffset;", "-        int matchLocation;", "-        ", "-        if (_isForward) {", "-          foundOffset += wordLen;                          // skip over matched word", "-//          text = text.substring(adjustedOffset, len);    // len is length of text before update", "-          rem = len - foundOffset;                         // len is updated to length of remaining text to search", "-          matchLocation = foundLocation + wordLen;         // matchLocation is index in _doc of right edge of match", "-//            _current = docToSearch.createPosition(start);          // put caret at beginning of found word", "+        if (! _matchCase) {", "+          text = text.toLowerCase();", "+          findWord = _findWord.toLowerCase();  // does not affect wordLen", "-        else { ", "+        else findWord = _findWord;", "+//       if (wrapped && allWrapped) Utilities.show(\"Executing loop with findWord = \" + findWord + \"; text = \" + text + \"; len = \" + len);     ", "+        ", "+        // loop to find first valid (not ignored) occurrence of findWord", "+        // loop carried variables are rem, foundOffset; ", "+        // loop invariant variables are _doc, docLen, _isForward, findWord, wordLen, start, len.", "+        // Invariant:  on forwardsearch, foundOffset + rem == len; on backward search foundOffset == rem.", "+        // loop exits by returning match (as FindResult) or by falling through with no match.", "+        // if match is returned, _current has been updated to match location", "+        int foundOffset = _isForward? 0 : len;", "+        int rem = len;", "+//      _log.log(\"Starting search loop; text = '\" + text + \"' findWord = '\" + findWord + \"' forward? = \" + _isForward + \" rem = \" + rem + \" foundOffset = \" + foundOffset);", "+        while (rem >= wordLen) {", "-          foundOffset -= wordLen;                        // skip over matched word        ", "-          rem = foundOffset;                             // rem is adjusted to match foundOffset", "-          matchLocation = foundLocation;                 // matchLocation is index in _doc of left edge of match", "+          // Find next match in text", "+          foundOffset = _isForward ? text.indexOf(findWord, foundOffset) : text.lastIndexOf(findWord, foundOffset);", "+//        _log.log(\"foundOffset = \" + foundOffset);", "+          if (foundOffset < 0) break;  // no valid match in this document", "+          int foundLocation = start + foundOffset;", "+          int matchLocation;", "+          ", "+          if (_isForward) {", "+            foundOffset += wordLen;                          // skip over matched word", "+//          text = text.substring(adjustedOffset, len);    // len is length of text before update", "+            rem = len - foundOffset;                         // len is updated to length of remaining text to search", "+            matchLocation = foundLocation + wordLen;         // matchLocation is index in _doc of right edge of match", "+//            _current = docToSearch.createPosition(start);          // put caret at beginning of found word", "+          }", "+          else { ", "+            ", "+            foundOffset -= wordLen;                        // skip over matched word        ", "+            rem = foundOffset;                             // rem is adjusted to match foundOffset", "+            matchLocation = foundLocation;                 // matchLocation is index in _doc of left edge of match", "-        }", "+          }", "-        ", "+          ", "-        assert foundLocation > -1;", "-        if (_shouldIgnore(foundLocation, doc)) continue;", "-        ", "-        //_current = doc.createPosition(matchLocation);   // formerly doc.createPosition(...)", "-        setPosition(matchLocation);", "-        ", "+          assert foundLocation > -1;", "+          if (_shouldIgnore(foundLocation, doc)) continue;", "+          ", "+          //_current = doc.createPosition(matchLocation);   // formerly doc.createPosition(...)", "+          setPosition(matchLocation);", "+          ", "-        ", "-        return new FindResult(doc, matchLocation, wrapped, allWrapped);  // return valid match", "+          ", "+          return new FindResult(doc, matchLocation, wrapped, allWrapped);  // return valid match", "+        }", "-    }", "-    catch (BadLocationException e) { throw new UnexpectedException(e); }", "-    ", "+      catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    }      "]}], "num": 6254}
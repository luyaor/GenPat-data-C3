{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "beba6c0b8be25abd104ac52e4b0a0c0f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06690e24bfae31cc5749cfde6d3348a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public Class visit(ArrayAllocation node)", "signatureAfterChange": "   public Class visit(ArrayAllocation node)", "diff": ["-    Iterator it = node.getSizes().iterator();", "+    ListIterator<Expression> it = node.getSizes().listIterator();", "+    ", "-      Class c = ((Node)it.next()).acceptVisitor(this);", "+      Expression exp = it.next();", "+      Class c = exp.acceptVisitor(this);", "+      ", "-      if (c != byte.class && c != short.class && c != int.class) {", "+      if (c != char.class      && c != byte.class && c != short.class && c != int.class &&", "+          c != Character.class && c != Byte.class && c != Short.class && c != Integer.class) {", "+      }", "+      ", "+      // un-box the size of the array, if necessary", "+      if (_isBoxingType(c)) {", "+        it.set(_unbox(exp, c));", "+    // Type-check the type of the array", "-    Class  ac = Array.newInstance(c, new int[node.getDimension()]).getClass();", "-", "+    Class ac = Array.newInstance(c, new int[node.getDimension()]).getClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "543e25623d362313cf70cbfc1731dcbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public Class visit(ArrayAccess node)", "signatureAfterChange": "   public Class visit(ArrayAccess node)", "diff": ["+    // Make sure this is an array", "-    Class result;", "-    node.setProperty(NodeProperties.TYPE, result = c.getComponentType());", "+    Class result = c.getComponentType();", "+    node.setProperty(NodeProperties.TYPE, result);", "-    if (c != char.class && c != byte.class && c != short.class && c != int.class) {", "+    if (c != char.class      && c != byte.class && c != short.class && c != int.class &&", "+        c != Character.class && c != Byte.class && c != Short.class && c != Integer.class) {", "+    ", "+    // un-box the index into the array, if necessary", "+    if (_isBoxingType(c)) {", "+      node.setCellNumber(_unbox(node.getCellNumber(), c));", "+    }", "+    "]}], "num": 21151}
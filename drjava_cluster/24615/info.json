{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6dbedfd997f98b7fa005c61621e1c212", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6854b1f7c6f783ddf5a5f712bd722c67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 358, "methodNumberAfterChange": 320, "signatureBeforeChange": "           public boolean contains(DJClass c)", "signatureAfterChange": "   private DJMethod instantiateMethod(final DJMethod declaredMethod, Type declaringType)", "diff": ["+   */", "+  private DJMethod instantiateMethod(final DJMethod declaredMethod, Type declaringType) {", "+    Type dynamicContext;", "+    if (declaredMethod.isStatic()) {", "+      if (declaringType instanceof ClassType) {", "+        dynamicContext = SymbolUtil.dynamicOuterClassType((ClassType) declaringType);", "+      }", "+      else { dynamicContext = null; }", "+    }", "+    else { dynamicContext = declaringType; }", "+    if (dynamicContext == null) { return declaredMethod; }", "+    else {", "+      return dynamicContext.apply(new TypeAbstractVisitor<DJMethod>() {", "+        @Override public DJMethod defaultCase(Type dynamicContext) { return declaredMethod; }", "+        @Override public DJMethod forRawClassType(RawClassType dynamicContext) {", "+          // TODO: raw member access warnings", "+          return new ErasedMethod(declaredMethod);", "+        }", "+        @Override public DJMethod forParameterizedClassType(ParameterizedClassType dynamicContext) {", "+          ParameterizedClassType dynamicContextCap = capture(dynamicContext);", "+          Iterable<VariableType> tparams = SymbolUtil.allTypeParameters(dynamicContextCap.ofClass());", "+          return new InstantiatedMethod(declaredMethod, tparams, dynamicContextCap.typeArguments());", "+        }", "+      });", "+    }", "+  }", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              if (includePrivate) { return c.isStatic(); }", "-              else { return c.isStatic() && !c.accessibility().equals(Access.PRIVATE); }", "-            }", "-            else { return false; }", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b6d5e7efbf71958ece6917f05ae17cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "dac1911c42074b029b90bbb69267d350628d7300", "commitAfterChange": "6ac6b30c03b8f321199592a97e544cb4056701f0", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 258, "signatureBeforeChange": "      private Type fieldType(final DJField f, Type declaringType)", "signatureAfterChange": "      private Type fieldType(final DJField f, Type declaringType)", "diff": ["-    return declaringType.apply(new TypeAbstractVisitor<Type>() {", "-      @Override public Type defaultCase(Type declaringType) { return f.type(); }", "-      @Override public Type forRawClassType(RawClassType declaringType) { return erase(f.type()); }", "-      @Override public Type forParameterizedClassType(ParameterizedClassType declaringType) {", "-        ParameterizedClassType cap = capture(declaringType);", "-        return substitute(f.type(), SymbolUtil.allTypeParameters(cap.ofClass()), cap.typeArguments());", "+    Type dynamicContext;", "+    if (f.isStatic()) {", "+      if (declaringType instanceof ClassType) {", "+        dynamicContext = SymbolUtil.dynamicOuterClassType((ClassType) declaringType);", "-    });", "+      else { dynamicContext = null; }", "+    }", "+    else { dynamicContext = declaringType; }", "+    if (dynamicContext == null) { return f.type(); }", "+    else {", "+      return dynamicContext.apply(new TypeAbstractVisitor<Type>() {", "+        @Override public Type defaultCase(Type dynamicContext) { return f.type(); }", "+        @Override public Type forRawClassType(RawClassType dynamicContext) {", "+          // TODO: raw member access warnings", "+          return erase(f.type());", "+        }", "+        @Override public Type forParameterizedClassType(ParameterizedClassType dynamicContext) {", "+          ParameterizedClassType dynamicContextCap = capture(dynamicContext);", "+          Iterable<VariableType> tparams = SymbolUtil.allTypeParameters(dynamicContextCap.ofClass());", "+          return substitute(f.type(), tparams, dynamicContextCap.typeArguments());", "+        }", "+      });", "+    }"]}], "num": 24615}
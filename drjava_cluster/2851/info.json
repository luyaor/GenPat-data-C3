{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0407180e1daa85f1f52774efffe7e39", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc25f7998344f618529bf530d009c78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TreeClass.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "   private static Access extractAccessibility(int mods)", "signatureAfterChange": "   private static Access extractAccessibility(ModifierSet mods)", "diff": ["-  private static Access extractAccessibility(int mods) {", "-    if (Modifier.isPublic(mods)) { return Access.PUBLIC; }", "-    else if (Modifier.isProtected(mods)) { return Access.PROTECTED; }", "-    else if (Modifier.isPrivate(mods)) { return Access.PRIVATE; }", "+  private static Access extractAccessibility(ModifierSet mods) {", "+    if (mods.isPublic()) { return Access.PUBLIC; }", "+    else if (mods.isProtected()) { return Access.PROTECTED; }", "+    else if (mods.isPrivate()) { return Access.PRIVATE; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81b38016e24428d83d84ff0f66d20910", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static boolean isFixed(Iterable<?> iter)", "signatureAfterChange": "   public static boolean hasFixedSize(Iterable<?> iter)", "diff": ["-  public static boolean isFixed(Iterable<?> iter) {", "-    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).isFixed(); }", "-    else if (iter instanceof Collection<?>) { return isFixedCollection((Collection<?>) iter); }", "+  public static boolean hasFixedSize(Iterable<?> iter) {", "+    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).hasFixedSize(); }", "+    else if (iter instanceof Collection<?>) { return isFixedSizeCollection((Collection<?>) iter); }"]}], "num": 2851}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f32abaa55a0c2032c46a209929d9bdbc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f62ab5a51b986a4e86228c14bf9efd4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public Object visit(ForStatement node)", "signatureAfterChange": "   public Class visit(ForStatement node)", "diff": ["+   */", "+  public Class visit(ForStatement node) {", "+    // Enter a new scope", "+    context.enterScope();", "+    ", "+    List l;", "+    // Check the statements", "+    if ((l = node.getInitialization()) != null) {", "+      checkList(l);", "+    }", "+    ", "+    Node cond = node.getCondition();", "+    if (cond != null) {", "+      // Check the condition", "+      if (cond.acceptVisitor(this) != boolean.class) {", "+        throw new ExecutionError(\"condition.type\", node);", "+      }", "+    }", "+    ", "+    if ((l = node.getUpdate()) != null) {", "+      checkList(l);", "+    }", "+    ", "+    node.getBody().acceptVisitor(this);", "+    ", "+    // Leave the current scope and store the defined variables", "+    // (a map of String-Class mappings) in the \"variables\" property", "+    node.setProperty(NodeProperties.VARIABLES, context.leaveScope());", "+    return null;", "+  }", "-     */", "-    public Object visit(ForStatement node) {", "-        // Enter a new scope", "-        context.enterScope();", "-", "-        List l;", "-        // Check the statements", "-        if ((l = node.getInitialization()) != null) {", "-            checkList(l);", "-        }", "-", "-\tNode cond = node.getCondition();", "-        if (cond != null) {", "-            // Check the condition", "-            if (cond.acceptVisitor(this) != boolean.class) {", "-                throw new ExecutionError(\"condition.type\", node);", "-            }", "-        }", "-", "-        if ((l = node.getUpdate()) != null) {", "-            checkList(l);", "-        }", "-", "-        node.getBody().acceptVisitor(this);", "-", "-        // Leave the current scope and store the defined variables", "-        // (a map of String-Class mappings) in the \"variables\" property", "-        node.setProperty(NodeProperties.VARIABLES, context.leaveScope());", "-        return null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5cb528a203a86f4efe381587013ec6c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Object visit(ForStatement node)", "signatureAfterChange": "   public Node visit(ForStatement node)", "diff": ["+   */", "+  public Node visit(ForStatement node) {", "+    // Enter a new scope", "+    context.enterScope();", "+    ", "+    List<Node> init = node.getInitialization();", "+    // Check the statements", "+    if (init != null) visitList(init);", "+    ", "+    Node n = node.getCondition();", "+    if (n != null) {", "+      Node o = n.acceptVisitor(this);", "+      if (o != null) {", "+        rejectReferenceType(o,n);", "+        node.setCondition((Expression)o);", "+      }", "+    }", "+    ", "+    List<Node> updt = node.getUpdate();", "+    if (updt != null) visitList(updt);", "+    ", "+    n = node.getBody();", "+    Node o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setBody(o);  ", "+    }", "+    // Leave the current scope", "+    context.leaveScope();", "+    return null;", "+  }", "-     */", "-    public Object visit(ForStatement node) {", "-        // Enter a new scope", "-        context.enterScope();", "-", "-        List l;", "-        // Check the statements", "-        if ((l = node.getInitialization()) != null) {", "-            visitList(l);", "-        }", "-", "-\tNode n;", "-        if ((n = node.getCondition()) != null) {", "-            Object o = n.acceptVisitor(this);", "-\t    if (o != null) {", "-\t\tif (o instanceof ReferenceType) {", "-\t\t    throw new ExecutionError(\"malformed.expression\", n);", "-\t\t}", "-\t\tnode.setCondition((Expression)o);", "-\t    }", "-        }", "-", "-        if ((l = node.getUpdate()) != null) {", "-            visitList(l);", "-        }", "-", "-\tn = node.getBody();", "-        Object o = n.acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setBody((Node)o);", "-        }", "-", "-        // Leave the current scope", "-        context.leaveScope();", "-        return null;", "-    }"]}], "num": 13715}
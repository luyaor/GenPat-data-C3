{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f4e955bd1348984f766089a258097c4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "018fee97b429e8b1a8da7d90b168cdf8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace) throws      BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace)", "diff": ["-  public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace) throws ", "-    BadLocationException {", "+  public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace)  {", "+//    Utilities.show(\"getIdentOfCurrentStmt(\" + pos + \", \" + Arrays.toString(delims) + \", \" + Arrays.toString(whitespace) + \")\");", "-        // Find the previous delimiter that closes a statement", "+        // Find the previous delimiter (typically an enclosing brace or closing symbol) skipping over balanced braces", "+        // that are not delims", "-        int prevDelim = lineStart;", "-        boolean ignoreParens = posInParenPhrase(prevDelim);", "+        int prevDelim = findPrevDelimiter(lineStart, delims, /* skipBracePhrases */ true);", "+    ", "+        if (prevDelim == -1) reachedStart = true; // no delimiter found", "-        do {", "-          prevDelim = findPrevDelimiter(prevDelim, delims, ignoreParens);", "-          if (prevDelim > 0 && prevDelim < getLength() && getText(prevDelim,1).charAt(0) == '{') break;", "-          if (prevDelim == -1) { // no delimiter found", "-            reachedStart = true;", "-            break;", "-          }", "-          ignoreParens = posInParenPhrase(prevDelim);", "-        } while (ignoreParens);  ", "-        ", "-        // From the previous delimiter, find the next non-whitespace character", "+        // From the previous delimiter or start, find the next non-whitespace character (why?)", "-        else nextNonWSChar = getFirstNonWSCharPos(prevDelim+1, whitespace, false);", "+        else nextNonWSChar = getFirstNonWSCharPos(prevDelim + 1, whitespace, false);", "+        ", "+        // The following statement looks right; otherwise, the indenting of the current line depends on how it is indented", "+//        if (nextNonWSChar >= lineStart) nextNonWSChar = prevDelim;  ", "-        lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt); ", "+        lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt);", "-    ", "+//    Utilities.show(\"getIdentCurrStmt(...) call completed\");    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e22cb0df93ad6d613097c2536f471e28", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JSR14Compiler.java", "commitBeforeChange": "8af81c4ac2b5fdee08d0909db34923047e4b5620", "commitAfterChange": "b1a58702f65a80a9143f66e5aa5d25b7a5e79ac6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "    protected void initCompiler(File sourceRoot)", "signatureAfterChange": "        protected void initCompiler(File sourceRoot)", "diff": ["-", "-  protected void initCompiler(File sourceRoot) {", "-    super.initCompiler(sourceRoot);", "-    String ccp = DrJava.CONFIG.getSetting(JSR14_COLLECTIONSPATH);", "-    if (ccp != null || ccp.length() == 0) {", "-                                           System.getProperty(\"path.separator\")+", "-                                           compiler.syms.reader.bootClassPath;", "+    ", "+  protected void initCompiler(File sourceRoot) {", "+    super.initCompiler(sourceRoot);", "+    updateBootClassPath();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea22d3ca27c599479a25a15aee4c60bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "14ecd0c683c3a654631edbe7cd556951ec682439", "commitAfterChange": "b4e48852da60211c31b0141438d3f04d6c627263", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 114, "signatureBeforeChange": "   private void _addMenuItem(JMenu menu, Action a, Option<KeyStroke> opt)", "signatureAfterChange": "   private void _addMenuItem(JMenu menu, Action a, Option<KeyStroke> opt)", "diff": ["-    JMenuItem tmpItem;", "-    tmpItem = menu.add(a);", "-    ", "+    JMenuItem item;", "+    item = menu.add(a);", "+    _setMenuShortcut(item, a, opt);", "+  }", "-    KeyBindingManager.Singleton.put(opt, a, tmpItem, tmpItem.getText());", "-      tmpItem.setAccelerator(ks);", "-      //KeyBindingManager.Singleton.addListener(opt, tmpItem);"]}], "num": 25662}
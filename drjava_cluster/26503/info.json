{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b201508380e66b8245de833cd4dc96a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b11b359edfdbc19432bccff33d0ebe2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ReflectUtilTest.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testCast()", "signatureAfterChange": "         public void testBox()", "diff": ["-  public void testCast() {", "-    Object o3 = LambdaUtil.nullThunk();", "-    assertEquals(\"x\", cast(String.class, o1));", "-    assertEquals((Integer) 23, cast(Integer.class, o2));", "-    assertEquals(null, t.value());", "+  ", "+  public void testBox() {", "+    assertSame(Boolean.class, box(boolean.class));", "+    assertSame(Character.class, box(char.class));", "+    assertSame(Byte.class, box(byte.class));", "+    assertSame(Short.class, box(short.class));", "+    assertSame(Integer.class, box(int.class));", "+    assertSame(Long.class, box(long.class));", "+    assertSame(Float.class, box(float.class));", "+    assertSame(Double.class, box(double.class));", "+    assertSame(Void.class, box(void.class));", "+    assertSame(Integer.class, box(Integer.class));", "+    assertSame(String.class, box(String.class));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485e0e1316b209e8bd91c72febf136e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOption.java", "commitBeforeChange": "1fded97fdeda420f1a00832b34fbad92ca8d6567", "commitAfterChange": "91eaa89d34afca6f9535645fe8bc2e7298ec779c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public String format(KeyStroke k)", "signatureAfterChange": "   public String format(KeyStroke k)", "diff": ["-    if (k == NULL_KEYSTROKE)", "+    if (k == NULL_KEYSTROKE) {", "-    String s = KeyEvent.getKeyModifiersText(k.getModifiers()).toLowerCase();", "-    s = s.replace('+', ' ');", "-    if (!s.equals(\"\"))", "-      s += \" \";", "+    }", "+", "+    //String s = KeyEvent.getKeyModifiersText(k.getModifiers()).toLowerCase();", "+    //s = s.replace('+', ' ');", "+    //if (!s.equals(\"\"))", "+    //  s += \" \";", "+", "+    // Generate modifiers text on our own, since getKeyStroke can't parse", "+    //  locale-specific modifiers.", "+    int modifiers = k.getModifiers();", "+    boolean isMac = _isMacPlatform();", "+    StringBuffer buf = new StringBuffer();", "+    if ((modifiers & Event.META_MASK) > 0) {", "+      String meta = (!isMac) ? \"meta \" : \"command \";", "+      buf.append(meta);", "+    }", "+    if ((modifiers & Event.CTRL_MASK) > 0) {", "+      buf.append(\"ctrl \");", "+    }", "+    if ((modifiers & Event.ALT_MASK) > 0) {", "+      String alt = (!isMac) ? \"alt \" : \"option \";", "+      buf.append(alt);", "+    }", "+    if ((modifiers & Event.SHIFT_MASK) > 0) {", "+      buf.append(\"shift \");", "+    }", "+", "-      s += \"typed \";", "-      s += k.getKeyChar();", "+      buf.append(\"typed \");", "+      buf.append(k.getKeyChar());", "-      if (k.isOnKeyRelease())", "-        s += \"released \";", "+      if (k.isOnKeyRelease()) {", "+        buf.append(\"released \");", "+      }", "-      if (key == null)", "+      if (key == null) {", "+      }", "-          key.equals(\"SHIFT\") || key.equals(\"ALT_GRAPH\"))", "-        return s;", "-      s += key;", "-      return s;", "+          key.equals(\"SHIFT\") || key.equals(\"ALT_GRAPH\")) {", "+        return buf.toString();", "+      }", "+      else {", "+        buf.append(key);", "+        return buf.toString();", "+      }", "-    return s; ", "+    return buf.toString();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55d52c9a9a753ca4bc486d5b35bc95ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-hj/edu/rice/cs/drjava/model/compiler/HjCompiler.java", "commitBeforeChange": "0d34688a453817a830dd6c41ef2406a8bf5a84d1", "commitAfterChange": "5a2208c5a083f8abb3c732362ff63b83a40e68a9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,                                                    java.util.List<? extends File> classPath,                                                     java.util.List<? extends File> sourcePath,                                                    File destination,                                                     java.util.List<? extends File> bootClassPath,                                                    String sourceVersion,                                                    boolean showWarnings)", "signatureAfterChange": "   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,                                                    java.util.List<? extends File> classPath,                                                     java.util.List<? extends File> sourcePath,                                                    File destination,                                                     java.util.List<? extends File> bootClassPath,                                                    String sourceVersion,                                                    boolean showWarnings)", "diff": ["-    String [] testCommand = new String[11];    ", "-    testCommand[0] = \"-hj\";", "-    testCommand[1] = \"-info\";", "-    testCommand[2] = \"-sp\";", "-    testCommand[4] = \"-cp\";", "-    testCommand[5] = s;", "-    testCommand[6] = \"-d\";", "-    testCommand[8] = \"-w\";", "-    testCommand[9] = \"-pp\";    ", "+//    System.out.println(\"-------------------------------------\");", "+//    System.out.println(\"-------------------------------------\");", "+//    System.out.println(\"files = \"+files);", "+//    System.out.println(\"sourcePath = \"+sourcePath);", "+//    System.out.println(\"-------------------------------------\");", "+    ArrayList<String> testCommand = new ArrayList<String>();", "+    testCommand.add(\"-hj\");", "+    testCommand.add(\"-info\");", "+    testCommand.add(\"-sp\");", "+    int spIndex = testCommand.size();", "+    testCommand.add(\"<sp filled in here>\");", "+    testCommand.add(\"-cp\");", "+    testCommand.add(s);", "+    testCommand.add(\"-d\");", "+    int destIndex = testCommand.size();", "+    if (destination != null) {", "+      testCommand.add(destination.getAbsolutePath());", "+    }", "+    else {", "+      testCommand.add(\"<dest dir filled in here>\");", "+    }", "+    testCommand.add(\"-w\");", "+    testCommand.add(\"-pp\");", "+    int sourceFileIndex = testCommand.size();", "+    testCommand.add(\"<source file filled in here>\");", "-      testCommand[3] = next.getParentFile().getAbsolutePath();", "-      testCommand[7] = next.getParentFile().getAbsolutePath();", "-      testCommand[10] = next.getName();", "+      testCommand.set(spIndex, next.getParentFile().getAbsolutePath());", "+      if (destination == null) {", "+        testCommand.set(destIndex, next.getParentFile().getAbsolutePath());", "+      }", "+      testCommand.set(sourceFileIndex, next.getName());", "-      // for(String cmd: testCommand) System.out.print(\" \"+cmd);", "-      // System.out.println();", "+//      for(String cmd: testCommand) System.out.print(\" \"+cmd);", "+//      System.out.println();", "-        soot.Main.mainEntry(testCommand); ", "+        soot.Main.mainEntry(testCommand.toArray(new String[testCommand.size()])); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb6bb1b5da6a0e59ae95233966d277a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 226, "signatureBeforeChange": "     public void addRegion(final R region)", "signatureAfterChange": "     public void addRegion(final R region)", "diff": ["-      boolean added = false;", "-      for (int i=0; i< _regions.size();i++) {", "-        DocumentRegion r = _regions.get(i);", "-        int oldStart = r.getStartOffset();", "-        int newStart = region.getStartOffset ();", "-        ", "-        if ( newStart < oldStart) {", "-          // Starts before, add here", "-          _regions.add(i, region);", "-          added = true;", "-          break;", "+      int index = getIndexOf(_current);", "+      // only add if current, previous, and next are not already the region; prevents trivial duplicates", "+      if (!region.equals(_current) && ", "+          ((index==_regions.size()-1) || (!region.equals(_regions.get(index+1)))) &&", "+          ((index<=0) || (!region.equals(_regions.get(index-1))))) {", "+        if ((_current!=null) && (index>=0)) {", "+          _regions.add(index+1, region);", "-        if ( newStart == oldStart) {", "-          // Starts at the same place", "-          int oldEnd = r.getEndOffset();", "-          int newEnd = region.getEndOffset();", "-          ", "-          if ( newEnd < oldEnd) {", "-            // Ends before, add here", "-            _regions.add(i, region);", "-            added = true;", "-            break;", "+        else {", "+          _regions.add(region);", "+        }", "+        ", "+        _current = region;", "+        final int regionIndex = getIndexOf(region);", "+        final String stackTrace = StringOps.getStackTrace();", "+        ", "+        // notify", "+        Utilities.invokeLater(new Runnable() { public void run() {", "+          _lock.startRead();", "+          try {", "+            for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region, regionIndex); }", "+          } finally { _lock.endRead(); }", "+        } });", "+        ", "+        // remove region if necessary", "+        shrinkManager();", "+      }", "+      else {", "+        // if next was the region to be added, make that the current region", "+        if ((index<_regions.size()-1) && (region.equals(_regions.get(index+1)))) {", "+          nextCurrentRegion();", "+        }", "+        // if previous was the region to be added, make that the current region", "+        else if ((index>0) && (region.equals(_regions.get(index-1)))) {", "+          prevCurrentRegion();", "+        }", "+      }", "+    }", "-      if (!added) { _regions.add(region); }", "-          ", "-      // notify", "-      Utilities.invokeLater (new Runnable() { public void run() {", "-        _lock.startRead();", "-        try {", "-          for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region); }", "-        } finally { _lock.endRead(); }", "-      } });"]}], "num": 26503}
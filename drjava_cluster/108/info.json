{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc716a486377ed9a9aa47e3336b12878", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02764897d50fe547a459d83cce07034f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public static void beginProgram(final String[] args)", "signatureAfterChange": "   public static void beginProgram(final String[] args)", "diff": ["+   */", "-      ", "-      _setupCompilerIfNeeded();", "-      ", "-      // The MainFrame *must* be constructed after the compiler setup process has", "-      // occurred; otherwise, the list of compilers in the UI will be wrong.", "-      // At some point this should be fixed, which would involve making the", "-      // CompilerRegistry notify listeners when there is a change in the list of", "-      // available compilers.", "-      final MainFrame mf = new MainFrame();", "-      edu.rice.cs.drjava.ui.AWTExceptionHandler.setFrame(mf);", "-      System.setProperty(\"sun.awt.exception.handler\", ", "-                         \"edu.rice.cs.drjava.ui.AWTExceptionHandler\");", "-      ", "-      // This enabling of the security manager must happen *after* the mainframe", "-      // is constructed. See bug #518509.", "-      // enableSecurityManager();", "-      openCommandLineFiles(mf, args);", "-      mf.show();", "-      ", "-      ", "-      // redirect stdout", "-      System.setOut(new PrintStream(new OutputStreamRedirector() {", "-        public void print(String s) {", "-          mf.getModel().systemOutPrint(s);", "+", "+      if (handleCommandLineArgs(args)) {", "+        ", "+        try {", "+          initConfig();", "-      }));", "-      ", "-      // redirect stderr", "-      System.setErr(new PrintStream(new OutputStreamRedirector() {", "-        public void print(String s) {", "-          mf.getModel().systemErrPrint(s);", "+        catch (IllegalStateException ise) {", "+          // Shouldn't happen: _config shouldn't be assigned yet", "+          throw new UnexpectedException(ise);", "-      }));", "+        setupCompilerIfNeeded();", "+      ", "+        // The MainFrame *must* be constructed after the compiler setup process has", "+        // occurred; otherwise, the list of compilers in the UI will be wrong.", "+        // At some point this should be fixed, which would involve making the", "+        // CompilerRegistry notify listeners when there is a change in the list of", "+        // available compilers.", "+        final MainFrame mf = new MainFrame();", "+        edu.rice.cs.drjava.ui.AWTExceptionHandler.setFrame(mf);", "+        System.setProperty(\"sun.awt.exception.handler\", ", "+                           \"edu.rice.cs.drjava.ui.AWTExceptionHandler\");", "+        ", "+        // This enabling of the security manager must happen *after* the mainframe", "+        // is constructed. See bug #518509.", "+        enableSecurityManager();", "+        ", "+        openCommandLineFiles(mf, _filesToOpen);", "+        mf.show();", "+        ", "+        ", "+        // redirect stdout", "+        System.setOut(new PrintStream(new OutputStreamRedirector() {", "+          public void print(String s) {", "+            mf.getModel().systemOutPrint(s);", "+          }", "+        }));", "+        ", "+        // redirect stderr", "+        System.setErr(new PrintStream(new OutputStreamRedirector() {", "+          public void print(String s) {", "+            mf.getModel().systemErrPrint(s);", "+          }", "+        }));", "+        ", "+      }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf1d0e36f6b9d063a19961b8067131c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d884ae55e9471d604870827048329b58394dd950", "commitAfterChange": "28bca5adabaaf178bdf954808155389f93ed51fa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 153, "signatureBeforeChange": "   public void toggleBookmark(int pos1, int pos2)", "signatureAfterChange": "   public void toggleBookmark(int pos1, int pos2)", "diff": ["-    * @param pos2 second selection position */", "-  public void toggleBookmark(int pos1, int pos2) {", "-    final OpenDefinitionsDocument doc = getActiveDocument();", "-    ", "-    int startSel = Math.min(pos1,pos2);", "-    int endSel = Math.max(pos1,pos2);", "-    doc.acquireReadLock();  // Must follow readers/writers protocol even in event thread", "-    try {", "-      if (startSel == endSel) {", "-        // nothing selected", "-        endSel = doc.getLineEndPos(startSel);", "-        startSel = doc.getLineStartPos(startSel);", "-      }", "-      final Position startPos = doc.createPosition(startSel);", "-      final Position endPos = doc.createPosition(endSel);", "-      final RegionManager<OrderedDocumentRegion> rm = getBookmarkManager();", "-      ", "-      OrderedDocumentRegion existingRegion = rm.getRegionAt(doc, pos1, pos2);", "-      if (existingRegion==null) { ", "-        rm.addRegion(new DocumentRegion(doc, startPos, endPos));", "-//        Utilities.show(\"BookmarkManager added region \" + r);", "-      }", "-      else {", "-        rm.removeRegion(existingRegion); // bookmark is toggled", "-//        Utilities.show(\"BookmarkManager removed region \" + r);", "-      }", "-    }", "-//    catch (FileMovedException fme) { throw new UnexpectedException(fme); }", "-    catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "-    finally { doc.releaseReadLock(); }", "-  }", "+    * @param pos2 second selection position */", "+  public void toggleBookmark(int pos1, int pos2) {", "+//    Utilities.show(\"AGM.toggleBookmark called\");", "+    final OpenDefinitionsDocument doc = getActiveDocument();", "+    ", "+    int startSel = Math.min(pos1,pos2);", "+    int endSel = Math.max(pos1,pos2);", "+    doc.acquireReadLock();  // Must follow readers/writers protocol even in event thread", "+    try {", "+      final RegionManager<OrderedDocumentRegion> rm = getBookmarkManager();", "+      ", "+      // Check for match against existing bookmark and remove if present; find rightmost region containing selection", "+      OrderedDocumentRegion match = rm.getRegionContaining(doc, startSel, endSel);", "+      if (match != null) {", "+        rm.removeRegion(match);", "+        return;", "+      }", "+      ", "+      // No match against existing bookmark", "+      if (startSel == endSel) {  // offset only; no selection", "+        endSel = doc.getLineEndPos(startSel);", "+        startSel = doc.getLineStartPos(startSel);", "+      }", "+      final Position startPos = doc.createPosition(startSel);", "+      final Position endPos = doc.createPosition(endSel);", "+      ", "+      OrderedDocumentRegion r = new DocumentRegion(doc, startPos, endPos);", "+//      Utilities.show(\"Adding bookmark \" + r);", "+      rm.addRegion(r);", "+    }", "+//    catch (FileMovedException fme) { throw new UnexpectedException(fme); }", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+    finally { doc.releaseReadLock(); }", "+  }"]}], "num": 108}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe598e5f0d7ec38ab68d65ffc247e3db", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2e42bc5a1beaa64ecf7aefa50cd772", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected static Map<FullVersion, Iterable<JarJDKToolsLibrary>>     getCompletedCompoundResults(GlobalModel model,                                 Iterable<JarJDKToolsLibrary> collapsed,                                 Iterable<JarJDKToolsLibrary> compoundCollapsed)", "signatureAfterChange": "   protected static Map<FullVersion, Iterable<JarJDKToolsLibrary>>     getCompletedCompoundResults(GlobalModel model,                                 Iterable<JarJDKToolsLibrary> collapsed,                                 Iterable<JarJDKToolsLibrary> compoundCollapsed)", "diff": ["+    JDKToolsLibrary.msg(\"---- Getting Completed Compound Results ----\");", "+    ", "-      JDKToolsLibrary.msg(\"compoundLib: \"+compoundLib.version());", "-      JDKToolsLibrary.msg(\"\\t\"+compoundLib.location());", "+      JDKToolsLibrary.msg(\"compoundLib: \"+compoundLib);", "+      JDKToolsLibrary.msg(\"    \"+compoundLib.location());", "-        JDKToolsLibrary.msg(\"\\texact? \"+javaLib.version());", "+        if (!javaLib.jdkDescriptor().isBaseForCompound()) continue; // javaLib not suitable as base", "+        JDKToolsLibrary.msg(\"    exact? \"+javaLib);", "-          JDKToolsLibrary.msg(\"\\t\\tfound\");", "+          JDKToolsLibrary.msg(\"        found\");", "-          JDKToolsLibrary.msg(\"\\tmajor? \"+javaLib.version());", "+          if (!javaLib.jdkDescriptor().isBaseForCompound()) continue; // javaLib not suitable as base", "+          JDKToolsLibrary.msg(\"    major? \"+javaLib);", "-            JDKToolsLibrary.msg(\"\\t\\tfound\");", "+            JDKToolsLibrary.msg(\"        found\");", "-          JDKToolsLibrary.msg(\"\\t==> \"+lib.version());", "+          JDKToolsLibrary.msg(\"    ==> \"+lib.version());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e2dab1fc26f7724785a6a1d7af40b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   protected static void collectValidResults(GlobalModel model,                                             LinkedHashMap<File,Set<JDKDescriptor>> jars,                                             Map<FullVersion, Iterable<JarJDKToolsLibrary>> results,                                             Map<FullVersion, Iterable<JarJDKToolsLibrary>> compoundResults)", "signatureAfterChange": "   protected static void collectValidResults(GlobalModel model,                                             LinkedHashMap<File,Set<JDKDescriptor>> jars,                                             Map<FullVersion, Iterable<JarJDKToolsLibrary>> results,                                             Map<FullVersion, Iterable<JarJDKToolsLibrary>> compoundResults)", "diff": ["+    JDKToolsLibrary.msg(\"---- Collecting Valid Results ----\");", "-        if (desc!=null) {", "-          boolean containsCompiler = desc.containsCompiler(jar.getKey());", "-          JDKToolsLibrary.msg(\"Checking file \"+jar.getKey()+\" for \"+desc);", "-          JDKToolsLibrary.msg(\"\\t\"+containsCompiler);", "-          if (!containsCompiler) continue;", "-        }", "+        assert desc != null;", "+", "+        boolean containsCompiler = desc.containsCompiler(jar.getKey());", "+        JDKToolsLibrary.msg(\"Checking file \"+jar.getKey()+\" for \"+desc);", "+        JDKToolsLibrary.msg(\"    \"+containsCompiler);", "+        if (!containsCompiler) continue;", "+", "-          if ((desc!=null)&&(desc.isCompound())) { mapToAddTo = compoundResults; }", "+          if (desc.isCompound()) { mapToAddTo = compoundResults; }", "-          JDKToolsLibrary.msg(\"\\tlibrary is not valid: compiler=\"+lib.compiler().isAvailable()+", "+          JDKToolsLibrary.msg(\"    library is not valid: compiler=\"+lib.compiler().isAvailable()+"]}], "num": 13166}
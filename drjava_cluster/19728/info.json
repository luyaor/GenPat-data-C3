{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f822b439d9c0705b5dff6fe3457f243b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0032c9685111b4e967876f1a828f22c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 321, "methodNumberAfterChange": 324, "signatureBeforeChange": "     public void optionChanged (OptionEvent<Vector<File>> oce)", "signatureAfterChange": "     public void optionChanged (OptionEvent<Vector<File>> oce)", "diff": ["-   private class ExtraClasspathOptionListener implements OptionListener<Vector<File>> {", "+  private class ExtraClasspathOptionListener implements OptionListener<Vector<File>> {", "-      if(cp!=null) {", "-        Enumeration<File> en = cp.elements();", "-        while(en.hasMoreElements()) {", "-        // this forwards directly to InterpreterJVM.addClassPath(String)", "-          try{", "-            _interactionsModel.addExtraClassPath(en.nextElement().toURL());", "-          }catch(MalformedURLException murle){", "-            // dont' add it", "+      if (cp != null) {", "+        for (File f: cp) {", "+          // this forwards directly to InterpreterJVM.addClassPath(String)", "+          try {", "+            _interactionsModel.addExtraClassPath(f.toURL());", "+          catch(MalformedURLException murle) { /* dont' add it */  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942059ba7aa73e98903f0d6517d2fe40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void clearRegions()", "signatureAfterChange": "   public void clearRegions()", "diff": ["-    final ArrayList<R> regions = getRegions();", "-//    System.err.println(\"ConcreteRegionManager.clearRegions() called with regions = \" + regions);", "-    // Notify all listeners for this manager that all regions are being removed; listener access _regions and _documents", "-    _notifyRegionsRemoved(regions);  // fails to close the associated panel because _documents not yet cleared.", "-    // Remove all regions in this manager", "-    _regions.clear();", "-    _documents.clear();", "+    for (R r: getRegions()) removeRegion(r);", "+//    final ArrayList<R> regions = getRegions();", "+////    System.err.println(\"ConcreteRegionManager.clearRegions() called with regions = \" + regions);", "+//    // Notify all listeners for this manager that all regions are being removed; listener access _regions and _documents", "+//    _notifyRegionsRemoved(regions);  // fails to close the associated panel because _documents not yet cleared.", "+//    // Remove all regions in this manager", "+//    _regions.clear();", "+//    _documents.clear();"]}], "num": 19728}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a15fadc83b749684f3333c033856ddad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e41c3b362043c73def996f1be4b6e3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 77, "signatureBeforeChange": "   public static <T1, T2> Runnable3<T1, T2, Object> promote(final Runnable2<? super T1, ? super T2> r)", "signatureAfterChange": "   public static <T1, T2> Runnable3<T1, T2, Object> promote(Runnable2<? super T1, ? super T2> r)", "diff": ["-  /** @return A {@code Runnable3} equivalent to {@code r} with an additional, ignored argument */", "-  public static <T1, T2> Runnable3<T1, T2, Object> promote(final Runnable2<? super T1, ? super T2> r) {", "-    return new Runnable3<T1, T2, Object>() {", "-      public void run(T1 arg1, T2 arg2, Object arg3) { r.run(arg1, arg2); }", "-    };", "+  /** Create a {@code Runnable3} equivalent to {@code r} with an additional, ignored argument. */", "+  public static <T1, T2> Runnable3<T1, T2, Object> promote(Runnable2<? super T1, ? super T2> r) {", "+    return new PromotedRunnable3<T1, T2>(r);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb3dadda7cdcc2cbbcf299a16d8132ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 277, "signatureBeforeChange": "   public static <T1, T2, T3> Runnable3<T1, T2, T3>      asRunnable(final Lambda3<? super T1, ? super T2, ? super T3, ?> lambda)", "signatureAfterChange": "   public static <T1, T2, T3>      Runnable3<T1, T2, T3> asRunnable(Lambda3<? super T1, ? super T2, ? super T3, ?> lambda)", "diff": ["-  /** @return  A runnable that executes the given lambda (ignoring the result) */", "-  public static <T1, T2, T3> Runnable3<T1, T2, T3> ", "-    asRunnable(final Lambda3<? super T1, ? super T2, ? super T3, ?> lambda) {", "-    return new Runnable3<T1, T2, T3>() { ", "-      public void run(T1 arg1, T2 arg2, T3 arg3) { lambda.value(arg1, arg2, arg3); }", "-    };", "-  }", "+  /** Create a runnable that executes the given lambda (ignoring the result). */", "+  public static <T1, T2, T3> ", "+    Runnable3<T1, T2, T3> asRunnable(Lambda3<? super T1, ? super T2, ? super T3, ?> lambda) {", "+    return new LambdaRunnable3<T1, T2, T3>(lambda);", "+  }"]}], "num": 24797}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3390c0254d8309ff23915689773a960b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ad5dbde615aed8c2b2bedd29f001a3b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "fc51b2245942e6d87f48245a9b8cdb4aedbcacc2", "commitAfterChange": "973271a114877f62b3cb122ffc9ab5f28c91b43a", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "   public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws      BadLocationException", "signatureAfterChange": "   public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws      BadLocationException", "diff": ["-      final int endPos = getLength();", "+      final int docLen = getLength();", "+      final int endPos = getLineEndPos(pos);", "-        ", "-        String text = getText(pos, endPos - pos);   // Get text from pos to end of document", "+        String line = getText(pos, endPos - pos);   // Get text from pos to end of line", "-        ", "-        int i = pos;", "-        int reducedPos = pos;", "-        // Walk forward from specificed position", "-        while (i < endPos) {", "-          ", "-          // Check if character is whitespace", "-          if (match(text.charAt(i-pos), whitespace)) {", "-            i++;", "-            continue;", "-          }", "-          // Found a non whitespace character", "-          // Move reduced model to walker's location for subsequent processing", "-          _setCurrentLocation(i);  // reduced model points to location i", "-          reducedPos = i;", "-          ", "-          // Check if non-ws char is within comment and if we want to ignore them.", "-          if (! acceptComments &&", "-              ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "-               (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT)))) {", "-            i++;  // TODO: increment i to skip over entire comment", "-            continue;", "+        try {", "+          int i = pos;", "+          int reducedPos = pos;", "+          // Walk forward from specificed position", "+          while (i < endPos) {", "+            ", "+            // Check if character is whitespace", "+            if (match(line.charAt(i-pos), whitespace)) {", "+              i++;", "+              continue;", "+            }", "+            // Found a non whitespace character", "+            // Move reduced model to walker's location for subsequent processing", "+            _setCurrentLocation(i);  // reduced model points to location i", "+            reducedPos = i;", "+            ", "+            // Check if non-ws char is within comment and if we want to ignore them.", "+            if (! acceptComments &&", "+                ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "+                 (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT)))) {", "+              i++;  // TODO: increment i to skip over entire comment", "+              continue;", "+            }", "+            ", "+            // Check if non-ws char is part of comment opening bracket and if we want to ignore them", "+            if (! acceptComments && _isStartOfComment(line, i - pos)) {", "+              // ith char is first char in comment open market; skip past this marker and continue searching", "+              i = i + 2;  // TODO: increment i to skip over entire comment", "+              continue;", "+            }", "+            ", "+            // Return position of matching char", "+            _storeInCache(key, reducedPos, reducedPos);  // Cached answer depends only on text(0:reducedPos]", "+//          _setCurrentLocation(origPos);", "+            return reducedPos;", "-          // Check if non-ws char is part of comment opening bracket and if we want to ignore them", "-          if (! acceptComments && _isStartOfComment(text, i - pos)) {", "-            // ith char is first char in comment open market; skip past this marker and continue searching", "-            i = i + 2;  // TODO: increment i to skip over entire comment", "-            continue;", "+          // No matching char found on this line", "+          if (endPos + 1 >= docLen) { // No matching char found in doc", "+            _storeInCache(key, -1, Integer.MAX_VALUE);  // Any change to the document invalidates this result!", "+//          _setCurrentLocation(origPos);", "+            return -1;", "-          ", "-          // Return position of matching char", "-          _storeInCache(key, reducedPos, reducedPos);  // Cached answer depends only on text(0:reducedPos)", "-          _setCurrentLocation(origPos);", "-          return reducedPos;", "+        finally { _setCurrentLocation(origPos); }  // restore _currentLocation", "-        // No matching char found", "-        _storeInCache(key, -1, Integer.MAX_VALUE);  // Any change to the document invalidates this result!", "-        _setCurrentLocation(origPos);", "-        return -1;", "-      }", "+      }  // end sync", "+      // Search through remaining lines of document; recursion depth is bounded by number of blank lines following pos", "+      return getFirstNonWSCharPos(endPos + 1, whitespace, acceptComments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "847c648b680a079931eb388e74a30914", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-eclipse/edu/rice/cs/drjava/model/compiler/EclipseCompiler.java", "commitBeforeChange": "f6644ed8bacb691af161dd2a81bf7ef2eb6ae97e", "commitAfterChange": "8b39e36f223ab70cac21c18457bdd21f1978e8e2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public String getName()", "signatureAfterChange": "\r   \r   public String getName()", "diff": ["-  ", "-  public String getName() {", "-    try {", "-      ResourceBundle bundle = ResourceBundle.getBundle(\"org.eclipse.jdt.internal.compiler.batch.messages\");", "-      return bundle.getString(\"compiler.name\")+\" \"+bundle.getString(\"compiler.version\");", "-    }", "-    catch(Throwable t) {", "-      return \"Eclipse Compiler for Java \" + _version.versionString();", "-    }", "-  }", "+  \r", "+  public String getName() {\r", "+    try {\r", "+      ResourceBundle bundle = ResourceBundle.getBundle(\"org.eclipse.jdt.internal.compiler.batch.messages\");\r", "+      String ecjVersion = bundle.getString(\"compiler.version\");\r", "+      int commaPos = ecjVersion.indexOf(',');\r", "+      if (commaPos>=0) { ecjVersion = ecjVersion.substring(0, commaPos); }\r", "+      return \"Eclipse Compiler \"+ecjVersion;\r", "+    }\r", "+    catch(Throwable t) {\r", "+      return \"Eclipse Compiler \" + _version.versionString();\r", "+    }\r", "+  }\r"]}], "num": 26375}
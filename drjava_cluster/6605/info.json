{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e020aac9847c308be40c502d211ee74", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "273e94e7104e1bb2b73bad35a20e768a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartStmtOfBracePlusTest.java", "commitBeforeChange": "70db0284b961b782fbf10e4ee909c772468f8240", "commitAfterChange": "fa8797d559c4407e7439087045a904fdcd0edde8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testSingleLineContract() throws BadLocationException", "signatureAfterChange": "   public void testSingleLineContract() throws BadLocationException", "diff": ["-    /**", "-    rule1.indentRule(_doc, 20);", "+    rule1.indentLine(_doc, 20);", "-    rule2.indentRule(_doc, 20);", "+    rule2.indentLine(_doc, 20);", "-    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc6cedcbb7cc8b6b725ad2575de36d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "df472bcb2bf0d8ba296911d59ac250fe6e447811", "commitAfterChange": "896d23e2fc31ecf410625227cad5c5d61f4d6309", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public static Test suite()", "signatureAfterChange": "    public void testRunMainMethod() throws Exception", "diff": ["-   */", "-  public static Test suite() {", "-    return new TestSuite(GlobalModelOtherTest.class);", "-  }", "+", "+  public void testRunMainMethod() throws Exception {", "+    File dir = new File(_tempDir, \"bar\");", "+    dir.mkdir();", "+    File file = new File(dir, \"Foo.java\");", "+    OpenDefinitionsDocument doc = doCompile(FOO_CLASS, file);", "+    doc.runMain();", "+    assertInteractionsContains(\"Foo\");", "+    DefinitionsDocument defDoc = doc.getDocument();", "+    defDoc.insertString(defDoc.getLength(), \" \", null);", "+    doc.runMain();", "+    assertInteractionsContains(DefaultGlobalModel.DOCUMENT_OUT_OF_SYNC_MSG);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5707b1eae20996207ded4ce56d7689c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 104, "signatureBeforeChange": "          public void testGetSymbolData_FromCurrFile()", "signatureAfterChange": "     public void testGetSymbolDataFromFileSystem()", "diff": ["-    ", "-    public void testGetSymbolData_FromCurrFile() {", "+    /** Tests _getSymbolDataFromFileSystem and one case of getQualifiedSymbolData. */", "+    public void testGetSymbolDataFromFileSystem() {", "-      // Test if it's already in the symbol table and doesn't need to be resolved", "-      // not stopping when it should.  get error b/c not in classes to be parsed ", "-      // assertEquals(\"symbol data is not a continuation, so should just be returned.\", _sd6, ", "-      //   _llv._getSymbolData_FromCurrFile(\"cebu\", SourceInfo.NO_INFO, true));", "+      // Test if it's already in the symbol table and doesn't need to be resolved not stopping when it should.  ", "+      // get error b/c not in classes to be parsed ", "+      assertEquals(\"symbol data is a not a continuation, but resolve is false so should just be returned\", _sd6, ", "+         testLLVisitor._getSymbolDataFromFileSystem(\"cebu\", SourceInfo.NO_INFO, false, true));", "-                   testLLVisitor._getSymbolData_FromCurrFile(\"u.like.emu\", SourceInfo.NO_INFO, false));", "+                   testLLVisitor._getSymbolDataFromFileSystem(\"u.like.emu\", SourceInfo.NO_INFO, false, true));", "-      //test if it needs to be resolved:", "+      // Lookup a name not in the file system with resolve equal to false, to confirm that null is returned.", "+      ", "+      assertEquals(\"Should return SymbolData.NOT_FOUND\", SymbolData.NOT_FOUND, ", "+                   testLLVisitor._getSymbolDataFromFileSystem(\"Corky\", SourceInfo.NO_INFO, false, true));", "+        // TODO: fix this test             ", "+//      SymbolData matchCorky = testLLVisitor._getSymbolDataFromFileSystem(\"Corky\", SourceInfo.NO_INFO, true);", "+//      assertFalse(\"Should return a non-continuation\", matchCorky.isContinuation());", "+      ", "+      // Test if it needs to be resolved:", "-        new ClassDef(SourceInfo.NO_INFO, _publicMav, ", "+        new ClassDef(SourceInfo.NO_INFO, PUBLIC_MAV, ", "-                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "+                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), ", "-      testLLVisitor. _classesToBeParsed.put(\"Lisa\", new Pair<TypeDefBase, LanguageLevelVisitor>(cd, bv));", "-      assertFalse(\"Should return a non-continuation\", ", "-                  testLLVisitor._getSymbolData_FromCurrFile(\"Lisa\", SourceInfo.NO_INFO, true).isContinuation());", "+      testLLVisitor._classesInThisFile.add(\"Lisa\" /*, new Pair<TypeDefBase, LanguageLevelVisitor>(cd, bv)*/);", "+      assert testLLVisitor._classesInThisFile.contains(\"Lisa\");", "+      SymbolData matchLisa = ", "+        testLLVisitor.getQualifiedSymbolData(\"Lisa\", SourceInfo.NO_INFO, true);", "+      assertTrue(\"Should return a continuation\", matchLisa.isContinuation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0083844bf9fbeb6557aecfb151241b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "efaccf437175951cd0b6645fd51acf615d54103d", "commitAfterChange": "eba3fba4afbda1a0953798485a71c0bfbe1bb5cf", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public void testUndoAndRedoAfterHittingEnter() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["-  public void testUndoAndRedoAfterHittingEnter() throws BadLocationException {", "-    String text = \"public class foo {\";", "-    ", "-    String afterEnter =", "+  public void testCompoundUndoManager() throws BadLocationException {", "+    String text =", "-      \"  \";", "-", "+      \"int bar;\\n\" +", "+      \"}\";", "+    ", "+    String indented =", "+      \"public class foo {\\n\" +", "+      \"  int bar;\\n\" +", "+      \"}\";", "+    ", "-    DrJava.getConfig().setSetting(OptionConstants.INDENT_LEVEL, new Integer(2));", "-    _defModel.insertString(0, text, null);", "-    assertEquals(\"Should have inserted correctly.\", text, ", "-                 _defModel.getText(0, _defModel.getLength()));", "+    DrJava.getConfig().setSetting(OptionConstants.INDENT_LEVEL,new Integer(2));", "-    _defModel.insertString(18, \"\\n\", null);", "-/*", "-    assertEquals(\"Should have entered the newline correctly.\", afterEnter, ", "-                 _defModel.getText(0,_defModel.getLength()));", "+    // Start a compound edit and verify the returned key", "+    int key = _defModel.getUndoManager().startCompoundEdit();", "+    assertEquals(\"Should have returned the correct key.\", 0, key);", "+    ", "+    // Insert a test string into the document", "+    _defModel.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // End the outer compound edit and verify that both get undone", "+    _defModel.getUndoManager().endCompoundEdit(key);", "-    assertEquals(\"undo commenting\",text, _defModel.getText(0,_defModel.getLength()));", "-    _defModel.getUndoManager().redo();", "-    assertEquals(\"redo commenting\",commented, _defModel.getText(0,_defModel.getLength()));", "-*/    ", "+    assertEquals(\"Should have undone correctly.\", \"\", ", "+                 _defModel.getText(0, _defModel.getLength()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b424f91708e11dfd68f785cc630edf1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentTest.java", "commitBeforeChange": "aa7f147d71330aa12463dfbc7a233e3ed25560e6", "commitAfterChange": "cfaac02e8e33f506b730c3f8ce96676d16b8f705", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void interpretCurrentInteraction()", "signatureAfterChange": "   public void testRecallFromHistory() throws DocumentAdapterException", "diff": ["-    }", "-    public void interpretCurrentInteraction() {", "-      fail(\"interpretCurrentInteraction called unexpectedly\");", "-    }", "+  public void testRecallFromHistory() throws DocumentAdapterException {", "+    String origText = _doc.getDocText(0, _doc.getDocLength());", "+    _doc.addToHistory(\"command\");", "+    assertEquals(\"Contents before recall prev\", ", "+                 origText, _doc.getDocText(0, _doc.getDocLength()));", "+    ", "+    _doc.recallPreviousInteractionInHistory();", "+    assertEquals(\"Contents after recall prev\", ", "+                 origText + \"command\", _doc.getDocText(0, _doc.getDocLength()));", "+    ", "+    _doc.recallNextInteractionInHistory();", "+    assertEquals(\"Contents after recall next\", ", "+                 origText, _doc.getDocText(0, _doc.getDocLength()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddd8b15f6e4ef641e464d34070c74783", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentTest.java", "commitBeforeChange": "aa7f147d71330aa12463dfbc7a233e3ed25560e6", "commitAfterChange": "cfaac02e8e33f506b730c3f8ce96676d16b8f705", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testReset() throws DocumentAdapterException", "signatureAfterChange": "   public void testContentsAndReset() throws DocumentAdapterException", "diff": ["-  public void testReset() throws DocumentAdapterException {", "-    int origLength = _doc.getDocLength();", "-    _doc.insertText(origLength, \"text\", InteractionsDocument.DEFAULT_STYLE);", "+  public void testContentsAndReset() throws DocumentAdapterException {", "+    String origText = _doc.getBanner() + _doc.getPrompt();", "+    assertEquals(\"Contents before insert\", ", "+                 origText, _doc.getDocText(0, _doc.getDocLength()));", "+    ", "+    // Insert some text", "+    _doc.insertText(_doc.getDocLength(), \"text\", InteractionsDocument.DEFAULT_STYLE);", "+    assertEquals(\"Contents before reset\", ", "+                 _doc.getBanner() + \"before\" + _doc.getPrompt() + \"text\",", "+                 _doc.getDocText(0, _doc.getDocLength()));", "+    ", "+    // Reset should clear", "-    assertEquals(\"Length after reset\", origLength, _doc.getDocLength());", "+    assertEquals(\"Contents after reset\", ", "+                 origText, _doc.getDocText(0, _doc.getDocLength()));"]}], "num": 6605}
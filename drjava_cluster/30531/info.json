{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4efd110731fff25dfe856c7bc05ead99", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc4f9ac26d4d4c7d0804a94067721ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static <T> LinkedList<T> asLinkedList(Iterable<T> iter)", "signatureAfterChange": "   public static boolean isStatic(Iterable<?> iter)", "diff": ["+   */", "+  public static boolean isStatic(Iterable<?> iter) {", "+    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).isStatic(); }", "+    else if (iter instanceof Collection<?>) { return isStaticCollection((Collection<?>) iter); }", "+    else { return false; }", "+  }", "-   */", "-  public static <T> LinkedList<T> asLinkedList(Iterable<T> iter) {", "-    if (iter instanceof LinkedList<?>) { return (LinkedList<T>) iter; }", "-    else if (iter instanceof Collection<?>) { return new LinkedList<T>((Collection<T>) iter); }", "-    else {", "-      LinkedList<T> result = new LinkedList<T>();", "-      for (T e : iter) { result.add(e); }", "-      return result;", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "117ca1ca7ce17fcd863517ef8f009846", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 66, "signatureBeforeChange": "      public static <T> Set<T> asSet(Iterable<T> iter)", "signatureAfterChange": "   public static <T> Set<T> asSet(Iterable<T> iter)", "diff": ["+   */", "+  public static <T> Set<T> asSet(Iterable<T> iter) {", "+    if (iter instanceof Set<?>) { return (Set<T>) iter; }", "+    else { return new IterableSet<T>(iter); }", "+  }", "-  ", "-  public static <T> Set<T> asSet(Iterable<T> iter) {", "-    if (iter instanceof Set<?>) { return (Set<T>) iter; }", "-    else if (iter instanceof Collection<?>) { return new HashSet<T>((Collection<T>) iter); }", "-    else if (iter instanceof SizedIterable<?>) {", "-      SizedIterable<T> si = (SizedIterable<T>) iter;", "-      Set<T> result = new HashSet<T>(si.size());", "-      for (T elt : si) { result.add(elt); }", "-      return result;", "-    else {", "-      Set<T> result = new HashSet<T>();", "-      for (T elt : iter) { result.add(elt); }", "-      return result;", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58eec5e8cbb31538f92f48210988e6ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 139, "signatureBeforeChange": "   public static <T> ConsList<T> asConsList(Iterable<T> iter)", "signatureAfterChange": "   public static <T> ConsList<T> asConsList(Iterable<T> iter)", "diff": ["-   */", "-  public static <T> ConsList<T> asConsList(Iterable<T> iter) {", "-    if (iter instanceof ConsList<?>) { return (ConsList<T>) iter; }", "-    else {", "-      ConsList<T> result = ConsList.empty();", "-      for (T elt : ReverseIterable.make(iter)) {", "-        result = ConsList.cons(elt, result);", "-      }", "-      return result;", "-    }", "-  }", "+   */", "+  public static <T> ConsList<T> asConsList(Iterable<T> iter) {", "+    if (iter instanceof ConsList<?>) { return (ConsList<T>) iter; }", "+    else {", "+      ConsList<T> result = ConsList.empty();", "+      for (T elt : reverse(iter)) { result = ConsList.cons(elt, result); }", "+      return result;", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81b38016e24428d83d84ff0f66d20910", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static boolean isFixed(Iterable<?> iter)", "signatureAfterChange": "   public static boolean hasFixedSize(Iterable<?> iter)", "diff": ["-  public static boolean isFixed(Iterable<?> iter) {", "-    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).isFixed(); }", "-    else if (iter instanceof Collection<?>) { return isFixedCollection((Collection<?>) iter); }", "+  public static boolean hasFixedSize(Iterable<?> iter) {", "+    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).hasFixedSize(); }", "+    else if (iter instanceof Collection<?>) { return isFixedSizeCollection((Collection<?>) iter); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a8c9958d08c84c43a0fd53ef73b7db7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static int sizeOf(Iterable<?> iter, int bound)", "signatureAfterChange": "   public static int sizeOf(Iterable<?> iter, int bound)", "diff": ["-    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).size(); }", "-    else if (iter instanceof Collection<?>) { return ((Collection<?>) iter).size(); }", "+    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).size(bound); }", "+    else if (iter instanceof Collection<?>) {", "+      int result = ((Collection<?>) iter).size();", "+      return result <= bound ? result : bound;", "+    }", "-      for (Object o : iter) {", "-        result++;", "-        if (result >= bound) { return bound; }", "-      }", "+      for (Object o : iter) { result++; if (result == bound) break; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e64d8dae03596fdc8910e928621eee6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "18d23bc33a9e21a21fbea8669d376abbec4474d5", "commitAfterChange": "d43aa0dddfca5bd508283f6af1dfc42f0f92a186", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": "   public static <T> T last(Iterable<? extends T> iter)", "signatureAfterChange": "   public static <T> T last(Iterable<? extends T> iter)", "diff": ["-      return ((OptimizedLastIterable<? extends T>) iter).last();", "+      // javac 6 doesn't like this -- OptimizedLastIterable<? extends T> </: Iterable<capture extends T>", "+      @SuppressWarnings(\"unchecked\") OptimizedLastIterable<? extends T> o = (OptimizedLastIterable<? extends T>) iter;", "+      return o.last();", "-      List<? extends T> l = (List<? extends T>) iter;", "+      // javac 6 doesn't like this -- List<? extends T> </: Iterable<capture extends T>", "+      @SuppressWarnings(\"unchecked\") List<? extends T> l = (List<? extends T>) iter;", "-      SortedSet<? extends T> s = (SortedSet<? extends T>) iter;", "+      // javac 6 doesn't like this -- SortedSet<? extends T> </: Iterable<capture extends T>", "+      @SuppressWarnings(\"unchecked\") SortedSet<? extends T> s = (SortedSet<? extends T>) iter;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d2d2cb7acef48a02136b48ae1a19e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "0e1d09dde6936169177bd564168991351deb65d8", "commitAfterChange": "a4e2145de592013fb29da195ee7f505ebce1be18", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public static <T> Set<? extends T> asSet(Iterable<? extends T> iter)", "signatureAfterChange": "      public static <T> Set<T> asSet(Iterable<T> iter)", "diff": ["-  public static <T> Set<? extends T> asSet(Iterable<? extends T> iter) {", "-    if (iter instanceof Set<?>) {", "-      @SuppressWarnings(\"unchecked\") Set<? extends T> set = (Set<? extends T>) iter;", "-      return set;", "-    }", "-    else if (iter instanceof Collection<?>) {", "-      @SuppressWarnings(\"unchecked\") Collection<? extends T> coll = (Collection<? extends T>) iter;", "-      return new HashSet<T>(coll);", "-    }", "+  public static <T> Set<T> asSet(Iterable<T> iter) {", "+    if (iter instanceof Set<?>) { return (Set<T>) iter; }", "+    else if (iter instanceof Collection<?>) { return new HashSet<T>((Collection<T>) iter); }", "-      @SuppressWarnings(\"unchecked\") SizedIterable<? extends T> si = (SizedIterable<? extends T>) iter;", "+      SizedIterable<T> si = (SizedIterable<T>) iter;"]}], "num": 30531}
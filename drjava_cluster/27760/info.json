{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3442ec6f02c98e1dbd21325f4c2faae4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e934c89eb0e68f52a93831855f1fe8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void delete( int count )", "signatureAfterChange": "   public void delete( int count)", "diff": ["+  */", "+  public void delete( int count) {", "+    if (count == 0) {", "+      return;", "+    }", "+    ModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "+    // from = the _cursor", "+    // to = _cursor.copy()", "+    _offset = _delete(count, _offset, _cursor, copyCursor);", "+    copyCursor.dispose();", "+    return;", "+  }", "-  public void delete( int count )", "-\t\t{", "-\t\t\tif (count == 0)", "-\t\t\t\treturn;", "-\t\t\tModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "-\t\t\t// from = the _cursor", "-\t\t\t// to = _cursor.copy()", "-\t\t\t_offset = _delete(count, _offset, _cursor, copyCursor);", "-\t\t\tcopyCursor.dispose();", "-\t\t\treturn;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03447f93091f382273d4b217c9cd20ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "7e9ff3bb619e0dc2b4141d09cbd325f980ff3ee5", "commitAfterChange": "8004e8339d9ea14156f225b11f26f546f17ae259", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void put(Option<KeyStroke> kso, Action a, JMenuItem jmi, String name)", "signatureAfterChange": "      public void put(Option<KeyStroke> kso, Action a, JMenuItem jmi, String name)", "diff": ["-    if (kso != null) // check for shift-actions", "+    // check for shift-actions", "+    if (kso != null) {", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "043ff894cbca26e6837e15d389ec2f11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPane.java", "commitBeforeChange": "d187ef0ae751d72da55c4bc4f82be93731c1e46f", "commitAfterChange": "d8ed07c181201a238142caf2537f1e0f6da8bb42", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void highlightError( int offset, int length )", "signatureAfterChange": "   public void highlightError(int offset, int length)", "diff": ["-  ", "-  public void highlightError( int offset, int length ){", "-    if( _highlightManager == null ) _initializeHighlightManager();", "-    _highlightManager.addHighlight( offset, offset+length, ERROR_PAINTER );", "+   */", "+  public void highlightError(int offset, int length) {", "+    if(_highlightManager == null) {", "+      _initializeHighlightManager();", "+    }", "+    _highlightManager.addHighlight(offset, offset+length, ERROR_PAINTER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05757ca396a62fddd5339644e6dc9f9b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t\tpublic void next()", "signatureAfterChange": "     public void next()", "diff": ["-\t\t */", "-\t\tpublic void next()", "-\t\t\t{", "-\t\t\t\tif (atEnd())", "-\t\t\t\t\tthrow new RuntimeException(\"Can't cross list boundary.\");", "-\t\t\t\t_point = _point.succ;", "-\t\t\t\t_pos++;", "-\t\t\t}", "+     */", "+    public void next() {", "+      if (atEnd()) {", "+        throw new RuntimeException(\"Can't cross list boundary.\");", "+      }", "+      _point = _point.succ;", "+      _pos++;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d2facf8907cf6eb297f0a41e70c559", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 580, "methodNumberAfterChange": 586, "signatureBeforeChange": "     public boolean shouldRevertFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "     public boolean shouldRevertFile(OpenDefinitionsDocument doc)", "diff": ["-      if (! _model.getActiveDocument().equals(doc)) _model.setActiveDocument(doc);", "+      if (! _model.getActiveDocument().equals(doc)) {", "+        _model.setActiveDocument(doc);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08c23c715e33bf5a473e5aab14fe7d7b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/BooleanOptionComponent.java", "commitBeforeChange": "aac5f34523ac0f0412292e9d65f671aa46b752f4", "commitAfterChange": "10c44767bf3d5eefd230820d6106fe1ea2534e6f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public boolean updateConfig()", "signatureAfterChange": "   public boolean updateConfig()", "diff": ["-    if (!oldValue.equals(newValue)) DrJava.getConfig().setSetting(_option, newValue);", "+    if (!oldValue.equals(newValue)) {", "+      DrJava.getConfig().setSetting(_option, newValue);      ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08e376848084c8e39fa554e996ebf22c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "4c20648756c871d7891d04fa6baa315408a26469", "commitAfterChange": "e325016b29b8dde8e3ba0908ae34d55edb22c64f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void gotoLine(int line)", "signatureAfterChange": "    public void gotoLine(int line)", "diff": ["-\tpublic void gotoLine(int line)", "-\t\t{", "-\t\t\tint dist;", "-\t\t\tif (line < 0)", "-\t\t\t\treturn;", "-\t\t\tsetCurrentLocation(0);", "-", "-\t\t\tfor (int i = 1; (i < line) && (_currentLocation < getLength()); i++){", "-\t\t\t\tdist = _reduced.getDistToNextNewline();", "-\t\t\t\tif (_currentLocation + dist < getLength()){", "-\t\t\t\t\tdist++;", "-\t\t\t\t}", "-\t\t\t\tmove(dist);", "-\t\t\t}", "-\t\t}", "+  public void gotoLine(int line) {", "+    int dist;", "+    if (line < 0) {", "+     return;", "+    }", "+    setCurrentLocation(0);", "+    for (int i = 1; (i < line) && (_currentLocation < getLength()); i++) {", "+      dist = _reduced.getDistToNextNewline();", "+      if (_currentLocation + dist < getLength()) {", "+        dist++;", "+      }", "+      move(dist);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a93faea193c6ca0ad82239231ef2a12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t\tpublic T nextItem()", "signatureAfterChange": "     public T nextItem()", "diff": ["-\t\t */", "-\t\tpublic T nextItem()", "-\t\t\t{", "-\t\t\t\tif (atLastItem() || atEnd() || ModelList.this.isEmpty())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tthrow new RuntimeException(\"No more following items.\");", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\treturn _point.succ.getItem();", "-\t\t\t}", "+     */", "+    public T nextItem() {", "+      if (atLastItem() || atEnd() || ModelList.this.isEmpty()) {", "+        throw new RuntimeException(\"No more following items.\");", "+      }", "+      else {", "+        return _point.succ.getItem();", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f5509c26316ae0dca1b53b795215220", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public int getRowCount()", "signatureAfterChange": "     public int getRowCount()", "diff": ["-      if (_threads == null)", "-      return _threads.size(); }", "+    }", "+    public int getRowCount() { ", "+      if (_threads == null) {", "+        return 0;", "+      }", "+      return _threads.size();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1432619490226790265b06ff2f8db2c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tint absOffset()", "signatureAfterChange": "   int absOffset()", "diff": ["+  */", "+  int absOffset() {", "+    int off = _offset;", "+    ModelList<ReducedToken>.Iterator it = _cursor.copy();", "+    ", "+    if (!it.atStart()) {", "+      it.prev();", "-\t */", "-\tint absOffset()", "-\t\t{", "-\t\t\tint off = _offset;", "-\t\t\tModelList<ReducedToken>.Iterator it = _cursor.copy();", "-", "-\t\t\tif (!it.atStart())", "-\t\t\t\tit.prev();", "-\t\t\t", "-\t\t\twhile (!it.atStart())", "-\t\t\t\t{", "-\t\t\t\t\toff += it.current().getSize();", "-\t\t\t\t\tit.prev();", "-\t\t\t\t}", "-\t\t\tit.dispose();", "-\t\t\treturn off;", "-\t\t}", "+    while (!it.atStart()) {", "+      off += it.current().getSize();", "+      it.prev();", "+    }", "+    it.dispose();", "+    return off;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1828be1b3b2c3c68aaa33f217bde3ab0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d012414100e088dfd0a2ea6e642cc05f11fbf32b", "commitAfterChange": "762f9487498790edfa8d7b58c3d83cb6592af447", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": "      public void compileStarted()", "signatureAfterChange": "      public void compileStarted()", "diff": ["-      if (!_errorPanel.isDisplayed())", "+      if (!_errorPanel.isDisplayed()) {", "-      //_tabbedPane.setSelectedIndex(COMPILE_TAB);", "+      }", "-      //_compileAction.setEnabled(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b6ff9c9c105412691e31cfb02aff9fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "c54f895c64c338869d4732b7d104266f2463eff5", "commitAfterChange": "ba40eae5dba31b91fc6bc51ee1deb14f2cfcacbf", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 214, "signatureBeforeChange": "   private DocumentInfoGetter _makeInfoGetter(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   private DocumentInfoGetter _makeInfoGetter(final OpenDefinitionsDocument doc)", "diff": ["-    if (s == null) s = _createDefScrollPane(doc);", "+    if (s == null) {", "+      s = _createDefScrollPane(doc);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f97184208e0046a76b1f54c480e2e9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void insertSlash()", "signatureAfterChange": "   public void insertSlash()", "diff": ["-   */", "-  public void insertSlash()", "-\t\t{", "-\t\t\t//check if empty", "-\t\t\tif (_braces.isEmpty())", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewBrace(\"/\",_cursor);//now pointing to tail.", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t//check if at start", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t_cursor.next();", "-\t\t\t//not empty, not at start, if at end check the previous brace", "-\t\t\tif (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertSlash(_cursor);", "-\t\t\t\t}\t\t\t", "-\t\t\t//if inside a double character brace, break it.", "-\t\t\telse if ((_offset > 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t_splitCurrentIfCommentBlock(true,true,_cursor);", "-          //leaving us at the start", "-\t\t\t\t\t_cursor.next(); //leaving us after first char", "-\t\t\t\t\t//System.out.println(this.simpleString());", "-\t\t\t\t\t_insertNewBrace(\"/\",_cursor); //leaves us after /", "-\t\t\t\t\t//_cursor.prev();", "-\t\t\t\t\t//_cursor.prev(); //puts us back on first char in double comment", "-\t\t\t\t\tmove(-2);", "-\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t//if (!_cursor.current().isMultipleCharBrace())", "-\t\t\t\t\t//_cursor.next();", "-\t\t\t\t\t//_cursor.next();", "-\t\t\t\t\tmove(2);", "-\t\t\t\t}", "-", "-\t\t\telse if ((_offset > 0) && (_cursor.current().isGap()))", "-\t\t\t\t{", "-\t\t\t\t\t_insertBraceToGap(\"/\", _cursor);", "-\t\t\t\t}", "-\t\t\t", "-\t\t\t//if at start of double character brace, break it.", "-\t\t\telse if ((_offset == 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t//if we're free there won't be a block comment close so if there", "-\t\t\t\t\t//is then we don't want to break it.", "-\t\t\t\t\t_splitCurrentIfCommentBlock(false,false,_cursor); //leaving us at start", "-\t\t\t\t\t_checkPreviousInsertSlash(_cursor);", "-\t\t\t\t}", "-\t\t\telse", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertSlash(_cursor);", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void insertSlash() {", "+    // Check if empty.", "+    if (_braces.isEmpty()) {", "+      _insertNewBrace(\"/\",_cursor);//now pointing to tail.", "+      return;", "+    }", "+    // Check if at start.", "+    if (_cursor.atStart()) {", "+      _cursor.next();", "+    }", "+    // Not empty, not at start, if at end check the previous brace", "+    if (_cursor.atEnd()) {", "+      _checkPreviousInsertSlash(_cursor);", "+    }      ", "+    // If inside a double character brace, break it.", "+    else if ((_offset > 0) && _cursor.current().isMultipleCharBrace()) {", "+      _splitCurrentIfCommentBlock(true,true,_cursor);", "+      //leaving us at the start", "+      _cursor.next(); //leaving us after first char", "+      //System.out.println(this.simpleString());", "+      _insertNewBrace(\"/\",_cursor); //leaves us after /", "+      //_cursor.prev();", "+      //_cursor.prev(); //puts us back on first char in double comment", "+      move(-2);", "+      _updateBasedOnCurrentState();", "+      //if (!_cursor.current().isMultipleCharBrace())", "+      //_cursor.next();", "+      //_cursor.next();", "+      move(2);", "+    }", "+    ", "+    else if ((_offset > 0) && (_cursor.current().isGap())) {", "+      _insertBraceToGap(\"/\", _cursor);", "+    }", "+    ", "+    //if at start of double character brace, break it.", "+    else if ((_offset == 0) && _cursor.current().isMultipleCharBrace()) {", "+      //if we're free there won't be a block comment close so if there", "+      //is then we don't want to break it.", "+      _splitCurrentIfCommentBlock(false,false,_cursor); //leaving us at start", "+      _checkPreviousInsertSlash(_cursor);", "+    }", "+    else {", "+      _checkPreviousInsertSlash(_cursor);", "+    }", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24b4b6bfd5e170afb77d6de07c9e2cd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelBrace.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate int _moveLeft(int count, \t\t\t\t\t\t\t\t\t\t\t\tModelList<ReducedToken>.Iterator copyCursor, \t\t\t\t\t\t\t\t\t\t\t\tint currentOffset)", "signatureAfterChange": "   private int _moveLeft(int count,                         ModelList<ReducedToken>.Iterator copyCursor,                         int currentOffset)", "diff": ["-\t */", "-\tprivate int _moveLeft(int count,", "-\t\t\t\t\t\t\t\t\t\t\t\tModelList<ReducedToken>.Iterator copyCursor,", "-\t\t\t\t\t\t\t\t\t\t\t\tint currentOffset)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd()){", "-\t\t\t\tcopyCursor.prev();", "-\t\t\t\tif (!copyCursor.atStart()) //make sure list not empty", "-\t\t\t\t\tcurrentOffset = copyCursor.current().getSize();", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (copyCursor.atStart())", "-\t\t\t\tthrow new IllegalArgumentException(\"At Start\");", "-\t\t", "-\t\t\twhile (count > currentOffset){", "-\t\t\t\tcount = count - currentOffset;", "-\t\t\t\tcopyCursor.prev();", "-\t\t\t\t", "-\t\t\t\tif (copyCursor.atStart()){", "-\t\t\t\t\tif (count > 0)", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"At Start\");", "-\t\t\t\t\telse {", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\tcurrentOffset = 0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\tcurrentOffset = copyCursor.current().getSize();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn currentOffset - count;", "-\t\t}\t\t ", "+   */", "+  private int _moveLeft(int count,", "+                        ModelList<ReducedToken>.Iterator copyCursor,", "+                        int currentOffset)", "+  {", "+    if (copyCursor.atEnd()) {", "+      copyCursor.prev();", "+      if (!copyCursor.atStart()) //make sure list not empty", "+        currentOffset = copyCursor.current().getSize();", "+    }", "+    ", "+    if (copyCursor.atStart()) {", "+      throw new IllegalArgumentException(\"At Start\");", "+    }", "+    while (count > currentOffset) {", "+      count = count - currentOffset;", "+      copyCursor.prev();", "+      ", "+      if (copyCursor.atStart()) {", "+        if (count > 0)", "+          throw new IllegalArgumentException(\"At Start\");", "+        else {", "+          copyCursor.next();", "+          currentOffset = 0;", "+        }", "+      }", "+      else {", "+        currentOffset = copyCursor.current().getSize();", "+      }", "+    }", "+    return currentOffset - count;", "+  } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25059db841c068495d6d8c6ce695fc13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t\tpublic T current()", "signatureAfterChange": "     public T current()", "diff": ["-\t\t */", "-\t\tpublic T current()", "-\t\t\t{", "-\t\t\t\tif (atStart())", "-\t\t\t\t\t{\t\t\t\t\t\t", "-\t\t\t\t\t\tthrow new RuntimeException(\"Attempt to call current on an \" +", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \"iterator in the initial position\");", "-\t\t\t\t\t}", "-\t\t\t\telse if (atEnd())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tthrow new RuntimeException(\"Attempt to call current on an \" +", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \"iterator in the final position\");", "-\t\t\t\t\t}", "-\t\t\t\telse\t\t\t\t\t\t", "-\t\t\t\t\treturn _point.getItem();", "-\t\t\t}", "+     */", "+    public T current() {", "+      if (atStart()) {", "+        throw new RuntimeException(\"Attempt to call current on an \" +", "+                                   \"iterator in the initial position\");", "+      }", "+      else if (atEnd()) {", "+        throw new RuntimeException(\"Attempt to call current on an \" +", "+                                   \"iterator in the final position\");", "+      }", "+      else {", "+        return _point.getItem();", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26bd452fb562c11b330e8becbddf4b4c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t\tpublic void insert(T item)", "signatureAfterChange": "     public void insert(T item)", "diff": ["-\t\t */", "-\t\tpublic void insert(T item)", "-\t\t\t{", "-\t\t\t\t//so as not to insert at head", "-\t\t\t\tif ( this.atStart() )", "-\t\t\t\t\tnext();", "-\t\t\t\tModelList.this.insert(_point, item);", "-\t\t\t\t_point = _point.pred; //puts pointer on inserted item\t\t\t\t", "-\t\t\t\tnotifyOfInsert(_pos);", "-\t\t\t\t//because notifyOfInsert will change the position of this iterator", "-\t\t\t\t//we must change it back.", "-\t\t\t\t_pos -= 1;", "-\t\t\t}", "+     */", "+    public void insert(T item) {", "+      //so as not to insert at head", "+      if (this.atStart()) {", "+        next();", "+      }", "+      ModelList.this.insert(_point, item);", "+      _point = _point.pred; //puts pointer on inserted item", "+      notifyOfInsert(_pos);", "+      ", "+      //because notifyOfInsert will change the position of this iterator", "+      //we must change it back.", "+      _pos -= 1;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a41dab6c89b5f996a7bba6573fbeb27", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public int getRowCount()", "signatureAfterChange": "     public int getRowCount()", "diff": ["-    public int getRowCount() { return _watchpoints.size(); }", "+    public int getRowCount() { return _watches.size() + 1; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f12f620906149dc5259bb81016e7ae0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "signatureAfterChange": "   private void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator                                          copyCursor)", "diff": ["-\t */", "-\tprivate void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "-\t\t{", "-\t\t\tif ( !copyCursor.atStart()\t&& !copyCursor.atFirstItem())", "-\t\t\t\t{", "-\t\t\t\t\tif (copyCursor.prevItem().getType().equals(\"/\") &&", "-\t\t\t\t\t\t\t(copyCursor.prevItem().getState() == ReducedToken.FREE))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setType(\"//\");", "-\t\t\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t// if we're after a star, ", "-\t\t\t\t\telse if ((getStateAtCurrent() == ReducedToken.INSIDE_BLOCK_COMMENT)", "-\t\t\t\t\t\t\t\t\t && copyCursor.prevItem().getType().equals(\"*\"))", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t//here we know the / unites with nothing behind it.", "-\t\t\t_insertNewBrace(\"/\",copyCursor); //leaving us after the brace.", "-\t\t\tcopyCursor.prev();", "-\t\t\t_updateBasedOnCurrentState();", "-\t\t\tif (copyCursor.current().getSize() == 2)", "-\t\t\t\t_offset = 1;", "-\t\t\telse", "-\t\t\t\tcopyCursor.next();", "-\t\t}", "+  */", "+  private void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator", "+                                         copyCursor)", "+  {", "+    if (!copyCursor.atStart()  && !copyCursor.atFirstItem()) {", "+      if (copyCursor.prevItem().getType().equals(\"/\") &&", "+          (copyCursor.prevItem().getState() == ReducedToken.FREE))", "+      {", "+        copyCursor.prevItem().setType(\"//\");", "+        _updateBasedOnCurrentState();", "+        return;", "+      }", "+      // if we're after a star, ", "+      else if ((getStateAtCurrent() == ReducedToken.INSIDE_BLOCK_COMMENT)", "+               && copyCursor.prevItem().getType().equals(\"*\"))", "+                 ", "+      {", "+        copyCursor.prevItem().setType(\"*/\");", "+        copyCursor.prevItem().setState(ReducedToken.FREE);", "+        _updateBasedOnCurrentState();", "+        return;", "+      }", "+    }", "+    //here we know the / unites with nothing behind it.", "+    _insertNewBrace(\"/\",copyCursor); //leaving us after the brace.", "+    copyCursor.prev();", "+    _updateBasedOnCurrentState();", "+    if (copyCursor.current().getSize() == 2)", "+      _offset = 1;", "+    else {", "+      copyCursor.next();", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30c8f0b1afd42dea5ae4f86ea7719912", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t\tpublic void next()", "signatureAfterChange": "     public void next()", "diff": ["-\t\t */", "-\t\tpublic void next()", "-\t\t\t{", "-\t\t\t\tif (atEnd())", "-\t\t\t\t\tthrow new RuntimeException(\"Can't cross list boundary.\");", "-\t\t\t\t_point = _point.succ;", "-\t\t\t\t_pos++;", "-\t\t\t}", "+     */", "+    public void next() {", "+      if (atEnd()) {", "+        throw new RuntimeException(\"Can't cross list boundary.\");", "+      }", "+      _point = _point.succ;", "+      _pos++;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3606e0480547040a50ece77031fa0851", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   private int _updateInsideQuote(ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private int _updateInsideQuote(ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private int _updateInsideQuote(ModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\treturn -1;", "-", "-\t\t\t_splitCurrentIfCommentBlock(true,false, copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "-\t\t\t\tString type = copyCursor.current().getType();", "-", "-\t\t\t\tif (type.equals(\"\\n\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse if (type.equals(\"\\\"\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// make sure this is a CLOSE quote", "-\t\t\t\t\t\tif (copyCursor.current().isOpen())", "-\t\t\t\t\t\t\tcopyCursor.current().flip();", "-", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.INSIDE_QUOTE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_QUOTE;", "-\t\t\t\t\t\t//_updateInsideQuote(copyCursor);", "-\t\t\t\t\t}", "-\t\t}", "+  private int _updateInsideQuote(ModelList<ReducedToken>.Iterator copyCursor) {", "+    if (copyCursor.atEnd()) {", "+      return -1;", "+    }", "+    _splitCurrentIfCommentBlock(true,false, copyCursor);", "+    _combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "+    String type = copyCursor.current().getType();", "+    ", "+    if (type.equals(\"\\n\")) {", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+    else if (type.equals(\"\\\"\")) {", "+      // make sure this is a CLOSE quote", "+      if (copyCursor.current().isOpen())", "+        copyCursor.current().flip();", "+      ", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+    else {", "+      copyCursor.current().setState(Brace.INSIDE_QUOTE);", "+      copyCursor.next();", "+      return Brace.INSIDE_QUOTE;", "+      //_updateInsideQuote(copyCursor);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3929acc7f75b528ef16bea92da68fc4d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   private int _updateInsideLineComment( \t\tModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private int _updateInsideLineComment     (ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-   */", "-  private int _updateInsideLineComment(", "-\t\tModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\treturn -1;", "-", "-\t\t\t_splitCurrentIfCommentBlock(true, false,copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "-", "-\t\t\t\tString type = copyCursor.current().getType();", "-", "-\t\t\t\tif (type.equals(\"\\n\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.INSIDE_LINE_COMMENT);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_LINE_COMMENT;", "-\t\t\t\t\t\t//_updateInsideLineComment(copyCursor);", "-\t\t\t\t\t}", "-\t\t}", "+  */", "+  private int _updateInsideLineComment", "+    (ModelList<ReducedToken>.Iterator copyCursor)", "+  {", "+    if (copyCursor.atEnd()) {", "+      return -1;", "+    }", "+    _splitCurrentIfCommentBlock(true, false,copyCursor);", "+    _combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "+    ", "+    String type = copyCursor.current().getType();", "+    ", "+    if (type.equals(\"\\n\")) {", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+    else {", "+      copyCursor.current().setState(Brace.INSIDE_LINE_COMMENT);", "+      copyCursor.next();", "+      return Brace.INSIDE_LINE_COMMENT;", "+      //_updateInsideLineComment(copyCursor);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e525f85e3d85828673e5b47271754b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelControl.java", "commitBeforeChange": "0fc2bd43202dc44ec1898220476c0c1829fb08a2", "commitAfterChange": "847a8a14da81b32fde69840fb03b98064ba862eb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "    String getType()", "signatureAfterChange": "    String getType()", "diff": ["-      ReducedToken rmcToken = rmc.current();", "-      if (!rmcToken.isGap())", "-        return rmcToken.getType();", "-", "-      ReducedToken rmbToken = rmb.current();", "-      if (!rmbToken.isGap())", "-        return rmbToken.getType();", "-", "-      return \"\"; //a gap", "+    ReducedToken rmcToken = rmc.current();", "+    if (!rmcToken.isGap())", "+      return rmcToken.getType();", "+    ", "+    ReducedToken rmbToken = rmb.current();", "+    if (!rmbToken.isGap()) {", "+      return rmbToken.getType();", "+    return \"\"; //a gap", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e65fc5626e6d212c5adbfe7e8c20a4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic int getDistToPreviousNewline(int relLoc)", "signatureAfterChange": "   public int getDistToPreviousNewline(int relLoc)", "diff": ["+  */", "+  public int getDistToPreviousNewline(int relLoc) {", "+    ModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "+    int copyOffset = _move(-relLoc,copyCursor, _offset);", "+    copyCursor.dispose();", "+    ", "+    int dist = _getDistToPreviousNewline(copyCursor, copyOffset);", "+    if(dist == -1) {", "+      return -1;", "+    }", "+    return dist + relLoc;", "+  }", "-\t */", "-\tpublic int getDistToPreviousNewline(int relLoc)", "-\t\t{", "-\t\t\tModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "-\t\t\tint copyOffset = _move(-relLoc,copyCursor, _offset);", "-\t\t\tcopyCursor.dispose();", "-", "-\t\t\tint dist = _getDistToPreviousNewline(copyCursor, copyOffset);", "-\t\t\tif(dist == -1)", "-\t\t\t\treturn -1;", "-\t\t\treturn dist + relLoc;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eaf357d1d830eefea7c6b79cec66bfa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   private int _updateInsideBlockComment( \t\tModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private int _updateInsideBlockComment     (ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private int _updateInsideBlockComment(", "-\t\tModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\treturn -1;", "-", "-\t\t\t_combineCurrentAndNextIfFind(\"*\", \"/\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"*\",\"//\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"*\",\"/*\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "-\t\t\t", "-\t\t\t\t_splitCurrentIfCommentBlock(false, false,copyCursor);", "-", "-\t\t\t\tString type = copyCursor.current().getType();", "-\t\t\t\tif (type.equals(\"*/\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t", "-\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.INSIDE_BLOCK_COMMENT);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_BLOCK_COMMENT;", "-\t\t\t\t\t\t//_updateInsideBlockComment(copyCursor);", "-\t\t\t\t\t}", "-\t\t}", "+  private int _updateInsideBlockComment", "+    (ModelList<ReducedToken>.Iterator copyCursor)", "+  {", "+    if (copyCursor.atEnd()) {", "+      return -1;", "+    }", "+    _combineCurrentAndNextIfFind(\"*\", \"/\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"*\",\"//\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"*\",\"/*\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "+    ", "+    _splitCurrentIfCommentBlock(false, false,copyCursor);", "+    ", "+    String type = copyCursor.current().getType();", "+    if (type.equals(\"*/\")) {", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+    ", "+    else {", "+      copyCursor.current().setState(Brace.INSIDE_BLOCK_COMMENT);", "+      copyCursor.next();", "+      return Brace.INSIDE_BLOCK_COMMENT;", "+      //_updateInsideBlockComment(copyCursor);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45818d337489fc6aa7b896f1fd5da0ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 289, "methodNumberAfterChange": 293, "signatureBeforeChange": "   boolean _closeProject(boolean quitting)", "signatureAfterChange": "   boolean _closeProject(boolean quitting)", "diff": ["-      if (_model.getDocumentCount() == 1) _model.setActiveFirstDocument();", "+      if (_model.getDocumentCount() == 1) {", "+        _model.setActiveFirstDocument();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e4309a9264d504f92274f969c560d30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelControl.java", "commitBeforeChange": "0fc2bd43202dc44ec1898220476c0c1829fb08a2", "commitAfterChange": "847a8a14da81b32fde69840fb03b98064ba862eb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "    String getType()", "signatureAfterChange": "    String getType()", "diff": ["-      ReducedToken rmcToken = rmc.current();", "-      if (!rmcToken.isGap())", "-        return rmcToken.getType();", "-", "-      ReducedToken rmbToken = rmb.current();", "-      if (!rmbToken.isGap())", "-        return rmbToken.getType();", "-", "-      return \"\"; //a gap", "+    ReducedToken rmcToken = rmc.current();", "+    if (!rmcToken.isGap())", "+      return rmcToken.getType();", "+    ", "+    ReducedToken rmbToken = rmb.current();", "+    if (!rmbToken.isGap()) {", "+      return rmbToken.getType();", "+    return \"\"; //a gap", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff9e3027799ea587563ea1b4d19380c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "ae4333c8dd1b54b8a781008188f09b6786d95ae2", "commitAfterChange": "a42a1005ad3faca50638e0131df3bc7c45ba82de", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "   protected synchronized void _resumeHelper(boolean shouldCopyBack)     throws DebugException", "signatureAfterChange": "   protected synchronized void _resumeHelper(boolean shouldCopyBack)     throws DebugException", "diff": ["-      if( printMessages ) System.out.println(\"In resumeThread()\");", "+      if (printMessages) { ", "+        System.out.println(\"In resumeThread()\");", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51a331345d92fab36879ccd1aa2f3efe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "signatureAfterChange": "   private void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator                                          copyCursor)", "diff": ["-\t */", "-\tprivate void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "-\t\t{", "-\t\t\tif ( !copyCursor.atStart()\t&& !copyCursor.atFirstItem())", "-\t\t\t\t{", "-\t\t\t\t\tif (copyCursor.prevItem().getType().equals(\"/\") &&", "-\t\t\t\t\t\t\t(copyCursor.prevItem().getState() == ReducedToken.FREE))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setType(\"//\");", "-\t\t\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t// if we're after a star, ", "-\t\t\t\t\telse if ((getStateAtCurrent() == ReducedToken.INSIDE_BLOCK_COMMENT)", "-\t\t\t\t\t\t\t\t\t && copyCursor.prevItem().getType().equals(\"*\"))", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t//here we know the / unites with nothing behind it.", "-\t\t\t_insertNewBrace(\"/\",copyCursor); //leaving us after the brace.", "-\t\t\tcopyCursor.prev();", "-\t\t\t_updateBasedOnCurrentState();", "-\t\t\tif (copyCursor.current().getSize() == 2)", "-\t\t\t\t_offset = 1;", "-\t\t\telse", "-\t\t\t\tcopyCursor.next();", "-\t\t}", "+  */", "+  private void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator", "+                                         copyCursor)", "+  {", "+    if (!copyCursor.atStart()  && !copyCursor.atFirstItem()) {", "+      if (copyCursor.prevItem().getType().equals(\"/\") &&", "+          (copyCursor.prevItem().getState() == ReducedToken.FREE))", "+      {", "+        copyCursor.prevItem().setType(\"//\");", "+        _updateBasedOnCurrentState();", "+        return;", "+      }", "+      // if we're after a star, ", "+      else if ((getStateAtCurrent() == ReducedToken.INSIDE_BLOCK_COMMENT)", "+               && copyCursor.prevItem().getType().equals(\"*\"))", "+                 ", "+      {", "+        copyCursor.prevItem().setType(\"*/\");", "+        copyCursor.prevItem().setState(ReducedToken.FREE);", "+        _updateBasedOnCurrentState();", "+        return;", "+      }", "+    }", "+    //here we know the / unites with nothing behind it.", "+    _insertNewBrace(\"/\",copyCursor); //leaving us after the brace.", "+    copyCursor.prev();", "+    _updateBasedOnCurrentState();", "+    if (copyCursor.current().getSize() == 2)", "+      _offset = 1;", "+    else {", "+      copyCursor.next();", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54b051b2f85d8b125bd45e8f67b3d980", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 169, "signatureBeforeChange": "   public boolean hasOutOfSyncDocuments()", "signatureAfterChange": "   public boolean hasOutOfSyncDocuments()", "diff": ["-        if (doc.isSourceFile() && ! doc.checkIfClassFileInSync()) return true; ", "+        if (doc.isSourceFile() && ! doc.checkIfClassFileInSync()) {", "+//          Utilities.show(\"Out of sync document is: \" + doc);", "+          return true; ", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58fd99aa7c12f7ec84acab77f7ce79a2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic int getDistToPreviousNewline(int relLoc)", "signatureAfterChange": "   public int getDistToPreviousNewline(int relLoc)", "diff": ["+  */", "+  public int getDistToPreviousNewline(int relLoc) {", "+    ModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "+    int copyOffset = _move(-relLoc,copyCursor, _offset);", "+    copyCursor.dispose();", "+    ", "+    int dist = _getDistToPreviousNewline(copyCursor, copyOffset);", "+    if(dist == -1) {", "+      return -1;", "+    }", "+    return dist + relLoc;", "+  }", "-\t */", "-\tpublic int getDistToPreviousNewline(int relLoc)", "-\t\t{", "-\t\t\tModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "-\t\t\tint copyOffset = _move(-relLoc,copyCursor, _offset);", "-\t\t\tcopyCursor.dispose();", "-", "-\t\t\tint dist = _getDistToPreviousNewline(copyCursor, copyOffset);", "-\t\t\tif(dist == -1)", "-\t\t\t\treturn -1;", "-\t\t\treturn dist + relLoc;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "673ca0581ca63ee22d4fc46a9b5d34d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DefinitionsDocument.java", "commitBeforeChange": "4c20648756c871d7891d04fa6baa315408a26469", "commitAfterChange": "e325016b29b8dde8e3ba0908ae34d55edb22c64f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void gotoLine(int line)", "signatureAfterChange": "    public void gotoLine(int line)", "diff": ["-\tpublic void gotoLine(int line)", "-\t\t{", "-\t\t\tint dist;", "-\t\t\tif (line < 0)", "-\t\t\t\treturn;", "-\t\t\tsetCurrentLocation(0);", "-", "-\t\t\tfor (int i = 1; (i < line) && (_currentLocation < getLength()); i++){", "-\t\t\t\tdist = _reduced.getDistToNextNewline();", "-\t\t\t\tif (_currentLocation + dist < getLength()){", "-\t\t\t\t\tdist++;", "-\t\t\t\t}", "-\t\t\t\tmove(dist);", "-\t\t\t}", "-\t\t}", "+  public void gotoLine(int line) {", "+    int dist;", "+    if (line < 0) {", "+     return;", "+    }", "+    setCurrentLocation(0);", "+    for (int i = 1; (i < line) && (_currentLocation < getLength()); i++) {", "+      dist = _reduced.getDistToNextNewline();", "+      if (_currentLocation + dist < getLength()) {", "+        dist++;", "+      }", "+      move(dist);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0dd7e8b7fc799f7c8803510e96955d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t\tpublic void prev()", "signatureAfterChange": "     public void prev()", "diff": ["-\t\t */", "-\t\tpublic void prev()", "-\t\t\t{", "-\t\t\t\tif (atStart())", "-\t\t\t\t\tthrow new RuntimeException(\"Can't cross list boundary.\");", "-\t\t\t\t_point = _point.pred;", "-\t\t\t\t_pos--;", "-\t\t\t}", "+     */", "+    public void prev() {", "+      if (atStart()) {", "+        throw new RuntimeException(\"Can't cross list boundary.\");", "+      }", "+      _point = _point.pred;", "+      _pos--;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77a6e5af8f898346d17d5082ee6d350a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 163, "signatureBeforeChange": "   public void aboutToSaveFromSaveAll(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void aboutToSaveFromSaveAll(OpenDefinitionsDocument doc)", "diff": ["-    if ( doc.isUntitled()) setActiveDocument(doc);", "+    if ( doc.isUntitled()) {", "+      setActiveDocument(doc);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac1f2ab5793076048544cea0a1ac5ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private boolean\t_combineCurrentAndNextIfFind(String first, String second, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private boolean  _combineCurrentAndNextIfFind     (String first,       String second,       ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private boolean\t_combineCurrentAndNextIfFind(String first, String second,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-", "-\t\t\tif (copyCursor.atStart() ||", "-\t\t\t\t\tcopyCursor.atEnd() ||", "-\t\t\t\t\tcopyCursor.atLastItem() ||", "-\t\t\t\t\t!copyCursor.current().getType().equals(first))", "-\t\t\t\treturn false;", "-", "-\t\t\tcopyCursor.next(); // move to second one to check if we can combine", "-", "-\t\t\t// The second one is eligible to combine if it exists (atLast is false),", "-\t\t\t// if it has the right brace type, and if it has no gap.", "-\t\t\tif (copyCursor.current().getType().equals(second))        ", "-\t\t\t\t{", "-\t\t\t\t\tif ((copyCursor.current().getType().equals(\"//\"))&&", "-\t\t\t\t\t\t\t(copyCursor.prevItem().getType().equals(\"*\")))", "-\t\t\t\t\t\t{//now pointing to //", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"/\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"/*\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"*\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"/*\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"/\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"//\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"//\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"/\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"/\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"//\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// delete first Gap and augment the second", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tint growth = copyCursor.current().getSize();", "-\t\t\t\t\t\t\tcopyCursor.remove();", "-\t\t\t\t\t\t\tcopyCursor.current().grow(growth);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t// the backslash examples.", "-\t\t\t\t\t// \\-\\\\", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} // \\-\\\"", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\"\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-// delete the first Brace and augment the second", "-\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\tcopyCursor.remove();", "-\t\t\t\t\tcopyCursor.current().setType(first + second);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-", "-\t\t\t// we couldn't combine, so move back and return", "-\t\t\tcopyCursor.prev();", "-\t\t\treturn false;", "-\t\t}", "+  private boolean  _combineCurrentAndNextIfFind", "+    (String first, ", "+     String second, ", "+     ModelList<ReducedToken>.Iterator copyCursor)", "+  {", "+    if (copyCursor.atStart() ||", "+        copyCursor.atEnd() ||", "+        copyCursor.atLastItem() ||", "+        !copyCursor.current().getType().equals(first))", "+    {", "+      return false;", "+    }", "+    copyCursor.next(); // move to second one to check if we can combine", "+    ", "+    // The second one is eligible to combine if it exists (atLast is false),", "+    // if it has the right brace type, and if it has no gap.", "+    if (copyCursor.current().getType().equals(second)) {", "+      if ((copyCursor.current().getType().equals(\"//\"))&&", "+          (copyCursor.prevItem().getType().equals(\"*\")))", "+      { // now pointing to", "+        copyCursor.current().setType(\"/\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "+               (copyCursor.prevItem().getType().equals(\"*\")))", "+      {", "+        copyCursor.current().setType(\"*\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "+               (copyCursor.prevItem().getType().equals(\"/\")))", "+      {", "+        copyCursor.current().setType(\"*\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"//\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"//\")) &&", "+               (copyCursor.prevItem().getType().equals(\"/\")))", "+      {", "+        copyCursor.current().setType(\"/\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"//\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\")))", "+     {", "+       // delete first Gap and augment the second", "+       copyCursor.prev();", "+       int growth = copyCursor.current().getSize();", "+       copyCursor.remove();", "+       copyCursor.current().grow(growth);", "+       return true;", "+     }", "+      // the backslash examples.", "+      // \\-\\\\", "+      else if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "+      {", "+        copyCursor.current().setType(\"\\\\\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"\\\\\\\\\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      } // \\-\\\"", "+      else if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "+      {", "+        copyCursor.current().setType(\"\\\"\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"\\\\\\\\\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      // delete the first Brace and augment the second", "+      copyCursor.prev();", "+      copyCursor.remove();", "+      copyCursor.current().setType(first + second);", "+      return true;", "+    }", "+    ", "+    // we couldn't combine, so move back and return", "+    copyCursor.prev();", "+    return false;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ed399fd77697b5f84cbc0a809234f71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5c83f089e25fccbca0e9bbad3fc54a6c66548714", "commitAfterChange": "5a2afd347f47a6bc08b7f21fb8ab49faa2b374ae", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": "      public void setAutomaticTraceMenuItemStatus()", "signatureAfterChange": "      public void setAutomaticTraceMenuItemStatus()", "diff": ["-    if (_automaticTraceMenuItem != null)", "+    if (_automaticTraceMenuItem != null) {", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f8b9154356c6e63c5fecc04d7a4e14e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "6bdcaa1031d63e5f58edf8d0e2313eac60ac2bdc", "commitAfterChange": "c6ab4cad3515b44035f93fe56438ef0ad4e6d24d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, InterruptedException", "signatureAfterChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,      InterruptedException", "diff": ["-  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, InterruptedException {", "-    ", "+  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, ", "+    InterruptedException {", "-    catch (DocumentAdapterException e) { throw new UnexpectedException(e); }", "+    catch (DocumentAdapterException e) {", "+      throw new UnexpectedException(e);", "+    }", "-      if (_model.getCompilerModel().getNumErrors() > 0) fail(\"compile failed: \" + getCompilerErrorString());", "+      if (_model.getCompilerModel().getNumErrors() > 0) {", "+        fail(\"compile failed: \" + getCompilerErrorString());", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ffea31b5c0400c8e1032ed13269ff8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tprivate void _clipLeft(int offset, ModelList<ReducedToken>.Iterator \t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "signatureAfterChange": "   private void _clipLeft(int offset,                           ModelList<ReducedToken>.Iterator                          copyCursor)", "diff": ["+  */", "+  private void _clipLeft(int offset, ", "+                         ModelList<ReducedToken>.Iterator", "+                         copyCursor)", "+  {", "+    if (copyCursor.atStart()) {", "+      return;", "+    }", "+    else if (offset == 0) {", "+      copyCursor.remove();", "+    }", "+    else if (copyCursor.current().isGap()) {", "+      int size = copyCursor.current().getSize();", "+      copyCursor.current().shrink(size-offset);", "+    }", "+    else if (copyCursor.current().isMultipleCharBrace()) {", "+      if (offset != 1) {", "+        throw new IllegalArgumentException(\"Offset incorrect\");", "+      }", "+      else {", "+        String type = copyCursor.current().getType();", "+        String first = type.substring(0,1);", "+        copyCursor.current().setType(first);", "+      }", "+    }", "+    else {", "+      throw new IllegalArgumentException(\"Cannot clip left.\");", "+    }", "+  }", "-\tprivate void _clipLeft(int offset, ModelList<ReducedToken>.Iterator", "-\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atStart()){", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\telse if (offset == 0){", "-\t\t\t\tcopyCursor.remove();", "-\t\t\t}", "-\t\t\telse if (copyCursor.current().isGap()){", "-\t\t\t\tint size = copyCursor.current().getSize();", "-\t\t\t\tcopyCursor.current().shrink(size-offset);", "-\t\t\t}", "-\t\t\telse if (copyCursor.current().isMultipleCharBrace()){", "-\t\t\t\tif (offset != 1)", "-\t\t\t\t\tthrow new IllegalArgumentException(\"Offset incorrect\");", "-\t\t\t\telse{", "-\t\t\t\t\tString type = copyCursor.current().getType();", "-\t\t\t\t\tString first = type.substring(0,1);", "-\t\t\t\t\tcopyCursor.current().setType(first);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tthrow new IllegalArgumentException(\"Cannot clip left.\");", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81c390b47449a4b84fb65cd58f656438", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "dc012dd7d972609a38d1836c72ebe86b07df0e53", "commitAfterChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "methodNumberBeforeChange": 319, "methodNumberAfterChange": 319, "signatureBeforeChange": "   void _switchDefScrollPane()", "signatureAfterChange": "   void _switchDefScrollPane()", "diff": ["-", "+    ", "+//    Utilities.showDebug(\"Right before getting the scrollPane\");", "-    if (scroll == null) scroll = _createDefScrollPane(_model.getActiveDocument());", "+   ", "+    if (scroll == null) {", "+      scroll = _createDefScrollPane(_model.getActiveDocument());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "825023f4d2d1441508e5bbadc78d03b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "5faad565deecfb82b97073634322d0015dfa1839", "commitAfterChange": "da5a0dd68bcb282274a520304e64e7f255ef6c4e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   protected void _waitForNotifies(int n)     throws InterruptedException", "signatureAfterChange": "   protected void _waitForNotifies(int n) throws InterruptedException", "diff": ["-  protected void _waitForNotifies(int n)", "-    throws InterruptedException", "-  {", "+  protected void _waitForNotifies(int n) throws InterruptedException {", "-      if (printMessages) System.out.println(\"waiting for \" + n + \" notifications...\");", "+      if (printMessages) {", "+        System.out.println(\"waiting for \" + n + \" notifications...\");", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84f91ce26e9a14c371e44b6f48ce5667", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void insertStar()", "signatureAfterChange": "   public void insertStar()", "diff": ["-   */", "-  public void insertStar()", "-\t\t{", "-\t\t\t//check if empty", "-\t\t\tif (_braces.isEmpty())", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewBrace(\"*\",_cursor);//now pointing to tail.", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t//check if at start", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t_cursor.next();", "-\t\t\t//not empty, not at start, if at end check the previous brace", "-\t\t\tif (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertStar(_cursor);", "-\t\t\t\t}\t\t ", "-\t\t\t//if inside a double character brace, break it.", "-\t\t\telse if ((_offset > 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-", "-\t\t\t\t    ", "-\t\t\t\t\t_splitCurrentIfCommentBlock(true,true,_cursor);", "-          //leaving us at the start", "-\t\t\t\t\t_cursor.next(); //leaving us after first char", "-\t\t\t\t\t_insertNewBrace(\"*\",_cursor); //leaves us after *", "-\t\t\t\t\t", "-\t\t\t\t\t//this code was changed to make the cursor move", "-\t\t\t\t\t//back two spaces instead of prev twice.", "-\t\t\t\t\t//gaurenteeing that we end in the correct ", "-\t\t\t\t\t//location.", "-\t\t\t\t\t//_cursor.prev();", "-\t\t\t\t\t//_cursor.prev(); //puts us back on first char in double comment", "-\t\t\t\t\tmove(-2);", "-\t\t\t\t\t_updateBasedOnCurrentState();", "-", "-\t\t\t\t\t//if (!_cursor.current().isMultipleCharBrace())", "-\t\t\t\t\t//\t_cursor.next();", "-\t\t\t\t\t//_cursor.next();", "-\t\t\t\t\tmove(2);", "-\t\t\t\t}", "-\t\t\t//if a gap", "-\t\t\telse if ((_offset > 0) && (_cursor.current().isGap()))", "-\t\t\t\t{", "-\t\t\t\t\t_insertBraceToGap(\"*\", _cursor);", "-\t\t\t\t}", "-\t\t\t//if at start of double character brace, break it.", "-\t\t\telse if ((_offset == 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t//if we're free there won't be a block comment close so if there", "-\t\t\t\t\t//is then we don't want to break it.", "-\t\t\t\t\t_splitCurrentIfCommentBlock(false,false,_cursor);", "-          //leaving us at start", "-\t\t\t\t\t_checkPreviousInsertStar(_cursor);", "-\t\t\t\t}", "-\t\t\telse", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertStar(_cursor);", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void insertStar() {", "+    //check if empty", "+    if (_braces.isEmpty()) {", "+      _insertNewBrace(\"*\",_cursor);//now pointing to tail.", "+      return;", "+    }", "+    //check if at start", "+    if (_cursor.atStart()) {", "+      _cursor.next();", "+    }", "+    //not empty, not at start, if at end check the previous brace", "+    if (_cursor.atEnd()) {", "+      _checkPreviousInsertStar(_cursor);", "+    }     ", "+    //if inside a double character brace, break it.", "+    else if ((_offset > 0) && _cursor.current().isMultipleCharBrace()) {", "+      _splitCurrentIfCommentBlock(true,true,_cursor);", "+      ", "+      //leaving us at the start", "+      _cursor.next(); //leaving us after first char", "+      _insertNewBrace(\"*\",_cursor); //leaves us after *", "+      ", "+      // Move the cursor back two spaces, putting it on the first char ", "+      // in the double comment.", "+      move(-2);", "+      _updateBasedOnCurrentState();", "+      ", "+      move(2);", "+    }", "+    //if a gap", "+    else if ((_offset > 0) && (_cursor.current().isGap())) {", "+      _insertBraceToGap(\"*\", _cursor);", "+    }", "+    //if at start of double character brace, break it.", "+    else if ((_offset == 0) && _cursor.current().isMultipleCharBrace()) {", "+      //if we're free there won't be a block comment close so if there", "+      //is then we don't want to break it.", "+      _splitCurrentIfCommentBlock(false,false,_cursor);", "+      //leaving us at start", "+      _checkPreviousInsertStar(_cursor);", "+    }", "+    else {", "+      _checkPreviousInsertStar(_cursor);", "+    }", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "882e311de3e708abbea9084d49ce602b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "21836dcccd81c2207652ee85b319b723ac9ff10b", "commitAfterChange": "18f7005907576031115bfb0859e7ff6d53506e5e", "methodNumberBeforeChange": 663, "methodNumberAfterChange": 664, "signatureBeforeChange": "   private void initExecuteExternalProcessDialog()", "signatureAfterChange": "   private void initExecuteExternalProcessDialog()", "diff": ["-    if (DrJava.getConfig().getSetting(DIALOG_EXTERNALPROCESS_STORE_POSITION).booleanValue())", "-      _executeExternalDialog.setFrameState(DrJava.getConfig().getSetting(DIALOG_EXTERNALPROCESS_STATE));  ", "+    if (DrJava.getConfig().getSetting(DIALOG_EXTERNALPROCESS_STORE_POSITION).booleanValue()) {", "+      _executeExternalDialog.setFrameState(DrJava.getConfig().getSetting(DIALOG_EXTERNALPROCESS_STATE));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a430e2a86886e1c05caf34651466b87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelBrace.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void delete( int count )", "signatureAfterChange": "   public void delete( int count )", "diff": ["-  public void delete( int count )", "-\t\t{", "-\t\t\tif (count == 0)", "-\t\t\t\treturn;", "-\t\t\tModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "-\t\t\t// from = the _cursor", "-\t\t\t// to = _cursor.copy()", "-\t\t\t_offset = _delete(count, _offset, _cursor, copyCursor);", "-\t\t\tcopyCursor.dispose();", "-\t\t\treturn;", "-\t\t}", "+  public void delete( int count ) {", "+    if (count == 0) {", "+      return;", "+    }", "+    ModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "+    // from = the _cursor", "+    // to = _cursor.copy()", "+    _offset = _delete(count, _offset, _cursor, copyCursor);", "+    copyCursor.dispose();", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8f0ec25f1283e1b3e468003cf10d31", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/Brace.java", "commitBeforeChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "commitAfterChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean isMatch(ReducedToken other)", "signatureAfterChange": "   public boolean isMatch(ReducedToken other)", "diff": ["-    if (this.getType().equals(\"\"))", "-      return  false;", "+    if (this.getType().equals(\"\")) {", "+      return false;", "+    }", "-    return  (braces[_type + off].equals(other.getType()));", "+    return (braces[_type + off].equals(other.getType()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95b69118e6a6925e582646f303353864", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/TokenList.java", "commitBeforeChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "commitAfterChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private int _moveLeft(int count, int currentOffset)", "signatureAfterChange": "     private int _moveLeft(int count, int currentOffset)", "diff": ["-    */", "-    private int _moveLeft(int count, int currentOffset)", "-    {", "+     */", "+    private int _moveLeft(int count, int currentOffset) {", "+        {", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986debb502c8b3ee31f7423a37e4c24c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tprivate boolean _checkPrevEquals(ModelList<ReducedToken>.Iterator delTo, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t String match)", "signatureAfterChange": "   private boolean _checkPrevEquals(ModelList<ReducedToken>.Iterator delTo,                                    String match)", "diff": ["+  */", "+  private boolean _checkPrevEquals(ModelList<ReducedToken>.Iterator delTo,", "+                                   String match)", "+  {", "+    if (delTo.atFirstItem() || delTo.atStart()) {", "+      return false;", "+    }", "+    return delTo.prevItem().getType().equals(match);", "+  }", "-\t */", "-\tprivate boolean _checkPrevEquals(ModelList<ReducedToken>.Iterator delTo,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t String match)", "-\t\t{", "-\t\t\tif (delTo.atFirstItem() || delTo.atStart())", "-\t\t\t\treturn false;", "-", "-\t\t\treturn delTo.prevItem().getType().equals(match);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5e8f3689abd3589b8cb71ddf2851f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "5faad565deecfb82b97073634322d0015dfa1839", "commitAfterChange": "da5a0dd68bcb282274a520304e64e7f255ef6c4e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void removeInterpreter(String name)", "signatureAfterChange": "   public void removeInterpreter(String name)", "diff": ["-    if (! _enabled) return;", "+    if (!_enabled) {", "+      return;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ae56b837cf3116e2e7905839efb80c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 257, "methodNumberAfterChange": 257, "signatureBeforeChange": "    public MainFrame()", "signatureAfterChange": "    public MainFrame()", "diff": ["-    ", "-    ", "-    ", "+        ", "-    ", "-    // check for new version if desired by user", "-    if (DrJava.getConfig().getSetting(DIALOG_DRJAVA_SURVEY_ENABLED) && !edu.rice.cs.util.swing.Utilities.TEST_MODE) {", "-      int days = DrJava.getConfig().getSetting(DRJAVA_SURVEY_DAYS);", "-      java.util.Date nextCheck = ", "-        new java.util.Date(DrJava.getConfig().getSetting(OptionConstants.LAST_DRJAVA_SURVEY)", "-                             + days * 24L * 60 * 60 * 1000); // x days after last check; 24L ensures long accumulation", "-      if (new java.util.Date().after(nextCheck)) {", "-        SwingUtilities.invokeLater(new Runnable() {", "-          public void run() {", "-            DrJavaSurveyPopup popup = new DrJavaSurveyPopup(MainFrame.this);", "-            popup.setVisible(true);", "-          }", "-        });", "+    else {", "+      // check for new version if desired by user", "+      // but only if we haven't just asked if the user wants to download a new version", "+      // two dialogs on program start is too much clutter", "+      if (DrJava.getConfig().getSetting(DIALOG_DRJAVA_SURVEY_ENABLED) && !edu.rice.cs.util.swing.Utilities.TEST_MODE) {", "+        int days = DrJava.getConfig().getSetting(DRJAVA_SURVEY_DAYS);", "+        java.util.Date nextCheck = ", "+          new java.util.Date(DrJava.getConfig().getSetting(OptionConstants.LAST_DRJAVA_SURVEY)", "+                               + days * 24L * 60 * 60 * 1000); // x days after last check; 24L ensures long accumulation", "+        if (new java.util.Date().after(nextCheck)) {", "+          SwingUtilities.invokeLater(new Runnable() {", "+            public void run() {", "+              DrJavaSurveyPopup popup = new DrJavaSurveyPopup(MainFrame.this);", "+              popup.setVisible(true);", "+            }", "+          });", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb2a6fd9b4ff371dac22f5138639c32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void delete( int count )", "signatureAfterChange": "   public void delete( int count )", "diff": ["-  public void delete( int count )", "-\t\t{", "-\t\t\tif (count == 0)", "-\t\t\t\treturn;", "-\t\t\tModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "-\t\t\t// from = the _cursor", "-\t\t\t// to = _cursor.copy()", "-\t\t\t_offset = _delete(count, _offset, _cursor, copyCursor);", "-\t\t\tcopyCursor.dispose();", "-\t\t\treturn;", "-\t\t}", "+  public void delete( int count ) {", "+    if (count == 0) {", "+      return;", "+    }", "+    ModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "+    // from = the _cursor", "+    // to = _cursor.copy()", "+    _offset = _delete(count, _offset, _cursor, copyCursor);", "+    copyCursor.dispose();", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cc59ac9d8e60eff431316d049bc0898", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private boolean\t_combineCurrentAndNextIfFind(String first, String second, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private boolean  _combineCurrentAndNextIfFind     (String first,       String second,       ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private boolean\t_combineCurrentAndNextIfFind(String first, String second,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-", "-\t\t\tif (copyCursor.atStart() ||", "-\t\t\t\t\tcopyCursor.atEnd() ||", "-\t\t\t\t\tcopyCursor.atLastItem() ||", "-\t\t\t\t\t!copyCursor.current().getType().equals(first))", "-\t\t\t\treturn false;", "-", "-\t\t\tcopyCursor.next(); // move to second one to check if we can combine", "-", "-\t\t\t// The second one is eligible to combine if it exists (atLast is false),", "-\t\t\t// if it has the right brace type, and if it has no gap.", "-\t\t\tif (copyCursor.current().getType().equals(second))        ", "-\t\t\t\t{", "-\t\t\t\t\tif ((copyCursor.current().getType().equals(\"//\"))&&", "-\t\t\t\t\t\t\t(copyCursor.prevItem().getType().equals(\"*\")))", "-\t\t\t\t\t\t{//now pointing to //", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"/\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"/*\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"*\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"/*\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"/\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"//\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"//\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"/\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"/\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"//\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// delete first Gap and augment the second", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tint growth = copyCursor.current().getSize();", "-\t\t\t\t\t\t\tcopyCursor.remove();", "-\t\t\t\t\t\t\tcopyCursor.current().grow(growth);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t// the backslash examples.", "-\t\t\t\t\t// \\-\\\\", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} // \\-\\\"", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\"\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-// delete the first Brace and augment the second", "-\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\tcopyCursor.remove();", "-\t\t\t\t\tcopyCursor.current().setType(first + second);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-", "-\t\t\t// we couldn't combine, so move back and return", "-\t\t\tcopyCursor.prev();", "-\t\t\treturn false;", "-\t\t}", "+  private boolean  _combineCurrentAndNextIfFind", "+    (String first, ", "+     String second, ", "+     ModelList<ReducedToken>.Iterator copyCursor)", "+  {", "+    if (copyCursor.atStart() ||", "+        copyCursor.atEnd() ||", "+        copyCursor.atLastItem() ||", "+        !copyCursor.current().getType().equals(first))", "+    {", "+      return false;", "+    }", "+    copyCursor.next(); // move to second one to check if we can combine", "+    ", "+    // The second one is eligible to combine if it exists (atLast is false),", "+    // if it has the right brace type, and if it has no gap.", "+    if (copyCursor.current().getType().equals(second)) {", "+      if ((copyCursor.current().getType().equals(\"//\"))&&", "+          (copyCursor.prevItem().getType().equals(\"*\")))", "+      { // now pointing to", "+        copyCursor.current().setType(\"/\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "+               (copyCursor.prevItem().getType().equals(\"*\")))", "+      {", "+        copyCursor.current().setType(\"*\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "+               (copyCursor.prevItem().getType().equals(\"/\")))", "+      {", "+        copyCursor.current().setType(\"*\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"//\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"//\")) &&", "+               (copyCursor.prevItem().getType().equals(\"/\")))", "+      {", "+        copyCursor.current().setType(\"/\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"//\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\")))", "+     {", "+       // delete first Gap and augment the second", "+       copyCursor.prev();", "+       int growth = copyCursor.current().getSize();", "+       copyCursor.remove();", "+       copyCursor.current().grow(growth);", "+       return true;", "+     }", "+      // the backslash examples.", "+      // \\-\\\\", "+      else if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "+      {", "+        copyCursor.current().setType(\"\\\\\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"\\\\\\\\\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      } // \\-\\\"", "+      else if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "+      {", "+        copyCursor.current().setType(\"\\\"\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"\\\\\\\\\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      // delete the first Brace and augment the second", "+      copyCursor.prev();", "+      copyCursor.remove();", "+      copyCursor.current().setType(first + second);", "+      return true;", "+    }", "+    ", "+    // we couldn't combine, so move back and return", "+    copyCursor.prev();", "+    return false;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff465f292267b06abd7297980328721", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Object visit(WhileStatement node)", "signatureAfterChange": "   public Object visit(WhileStatement node)", "diff": ["-        } ", "-        catch (ContinueException e) {", "+        } catch (ContinueException e) {", "-          if (e.isLabeled() && !node.hasLabel(e.getLabel())) throw e;", "+          if (e.isLabeled() && !node.hasLabel(e.getLabel())) {", "+            throw e;", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a38c412a7ea0e3f80af1f7e49fd6b240", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate int _moveLeft(int count, \t\t\t\t\t\t\t\t\t\t\t\tModelList<ReducedToken>.Iterator copyCursor, \t\t\t\t\t\t\t\t\t\t\t\tint currentOffset)", "signatureAfterChange": "   private int _moveLeft(int count,                         ModelList<ReducedToken>.Iterator copyCursor,                         int currentOffset)", "diff": ["-\t */", "-\tprivate int _moveLeft(int count,", "-\t\t\t\t\t\t\t\t\t\t\t\tModelList<ReducedToken>.Iterator copyCursor,", "-\t\t\t\t\t\t\t\t\t\t\t\tint currentOffset)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd()){", "-\t\t\t\tcopyCursor.prev();", "-\t\t\t\tif (!copyCursor.atStart()) //make sure list not empty", "-\t\t\t\t\tcurrentOffset = copyCursor.current().getSize();", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (copyCursor.atStart())", "-\t\t\t\tthrow new IllegalArgumentException(\"At Start\");", "-\t\t", "-\t\t\twhile (count > currentOffset){", "-\t\t\t\tcount = count - currentOffset;", "-\t\t\t\tcopyCursor.prev();", "-\t\t\t\t", "-\t\t\t\tif (copyCursor.atStart()){", "-\t\t\t\t\tif (count > 0)", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"At Start\");", "-\t\t\t\t\telse {", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\tcurrentOffset = 0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\tcurrentOffset = copyCursor.current().getSize();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn currentOffset - count;", "-\t\t}\t\t ", "+   */", "+  private int _moveLeft(int count,", "+                        ModelList<ReducedToken>.Iterator copyCursor,", "+                        int currentOffset)", "+  {", "+    if (copyCursor.atEnd()) {", "+      copyCursor.prev();", "+      if (!copyCursor.atStart()) //make sure list not empty", "+        currentOffset = copyCursor.current().getSize();", "+    }", "+    ", "+    if (copyCursor.atStart()) {", "+      throw new IllegalArgumentException(\"At Start\");", "+    }", "+    while (count > currentOffset) {", "+      count = count - currentOffset;", "+      copyCursor.prev();", "+      ", "+      if (copyCursor.atStart()) {", "+        if (count > 0)", "+          throw new IllegalArgumentException(\"At Start\");", "+        else {", "+          copyCursor.next();", "+          currentOffset = 0;", "+        }", "+      }", "+      else {", "+        currentOffset = copyCursor.current().getSize();", "+      }", "+    }", "+    return currentOffset - count;", "+  } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3fa2b962518f358c558effbe28ccbeb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t\tpublic T prevItem()", "signatureAfterChange": "     public T prevItem()", "diff": ["-\t\t */", "-\t\tpublic T prevItem()", "-\t\t\t{", "-\t\t\t\tif (atFirstItem() || atStart() || ModelList.this.isEmpty())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tthrow new RuntimeException(\"No more previous items.\");", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\treturn _point.pred.getItem();", "-\t\t\t}", "+     */", "+    public T prevItem() {", "+      if (atFirstItem() || atStart() || ModelList.this.isEmpty()) {", "+        throw new RuntimeException(\"No more previous items.\");", "+      }", "+      else {", "+        return _point.pred.getItem();", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a477fd4df5b3ad297d6ca7589200e941", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   private int _updateInsideLineComment( \t\tModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private int _updateInsideLineComment     (ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-   */", "-  private int _updateInsideLineComment(", "-\t\tModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\treturn -1;", "-", "-\t\t\t_splitCurrentIfCommentBlock(true, false,copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "-", "-\t\t\t\tString type = copyCursor.current().getType();", "-", "-\t\t\t\tif (type.equals(\"\\n\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.INSIDE_LINE_COMMENT);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_LINE_COMMENT;", "-\t\t\t\t\t\t//_updateInsideLineComment(copyCursor);", "-\t\t\t\t\t}", "-\t\t}", "+  */", "+  private int _updateInsideLineComment", "+    (ModelList<ReducedToken>.Iterator copyCursor)", "+  {", "+    if (copyCursor.atEnd()) {", "+      return -1;", "+    }", "+    _splitCurrentIfCommentBlock(true, false,copyCursor);", "+    _combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "+    ", "+    String type = copyCursor.current().getType();", "+    ", "+    if (type.equals(\"\\n\")) {", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+    else {", "+      copyCursor.current().setState(Brace.INSIDE_LINE_COMMENT);", "+      copyCursor.next();", "+      return Brace.INSIDE_LINE_COMMENT;", "+      //_updateInsideLineComment(copyCursor);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9593b649d1381a9d742c567762dc686", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "aaf929e2f10e21e12d70415a67e84135593a5810", "commitAfterChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public File getMasterWorkingDirectory()", "signatureAfterChange": "   public File getMasterWorkingDirectory()", "diff": ["-    if (workDir != null && workDir != FileOption.NULL_FILE) return workDir;", "+//    Utilities.show(\"In getMasterWorkingDirectory, workDir = \" + workDir);", "+    if (workDir != null && workDir != FileOption.NULL_FILE) {", "+//      Utilities.show(\"Returning '\" + workDir + \"' as master working directory\");", "+      return workDir;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa3d15c7337ee7e69c35e31a43a7fa3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void _insertGap( int length )", "signatureAfterChange": "   public void _insertGap(int length)", "diff": ["-   */", "-  public void _insertGap( int length )", "-\t\t{", "-\t\t\t//0 - a", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t{", "-\t\t\t\t\tif (_gapToRight())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_cursor.next();", "-\t\t\t\t\t\t\t_augmentCurrentGap(length); //increases gap and moves offset", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_insertNewGap(length);//inserts gap and goes to next item", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t//0 - b", "-\t\t\telse if (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\tif (_gapToLeft())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_augmentGapToLeft(length);", "-              //increases the gap to the left and", "-\t\t\t\t\t\t\t//cursor to next item in list leaving offset 0\t\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_insertNewGap(length); //inserts gap and moves to next item", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t//5", "-\t\t\t//offset should never be greater than 1 here because JAVA only has 2", "-\t\t\t//char comments", "-\t\t\telse if (_cursor.current().isMultipleCharBrace() && (_offset > 0))", "-\t\t\t\t{", "-\t\t\t\t\tif (_offset > 1)", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"OFFSET TOO BIG:  \"+", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _offset);", "-\t\t\t\t\t", "-\t\t\t\t\t_breakComment(_cursor); //leaves us inside comment", "-\t\t\t\t\t_insertNewGap(length); //inserts gap and goes to next item", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t", "-\t\t\t//1", "-\t\t\telse if (_cursor.current().isGap())", "-\t\t\t\t{", "-\t\t\t\t\t_cursor.current().grow(length);", "-\t\t\t\t\t_offset += length;", "-\t\t\t\t}", "-\t\t\t//2", "-\t\t\telse if (!_cursor.atFirstItem() &&", "-\t\t\t\t\t\t\t _cursor.prevItem().isGap())", "-\t\t\t\t{", "-\t\t\t\t\t//already pointing to next item", "-\t\t\t\t\t_cursor.prevItem().grow(length);", "-\t\t\t\t}", "-\t\t\t//4", "-\t\t\telse //between two braces", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewGap(length); //inserts a gap and goes to the next item", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void _insertGap(int length) {", "+    //0 - a", "+    if (_cursor.atStart()) {", "+      if (_gapToRight()) {", "+        _cursor.next();", "+        _augmentCurrentGap(length); //increases gap and moves offset", "+      }", "+      else {", "+        _insertNewGap(length);//inserts gap and goes to next item", "+      }", "+    }", "+    //0 - b", "+    else if (_cursor.atEnd()) {", "+      if (_gapToLeft()) {", "+        _augmentGapToLeft(length);", "+        //increases the gap to the left and", "+        //cursor to next item in list leaving offset 0              ", "+      }", "+      else {", "+        _insertNewGap(length); //inserts gap and moves to next item", "+      }", "+    }", "+    ", "+    //5", "+    //offset should never be greater than 1 here because JAVA only has 2", "+    //char comments", "+    else if (_cursor.current().isMultipleCharBrace() && (_offset > 0)) {", "+      if (_offset > 1) {", "+        throw new IllegalArgumentException(\"OFFSET TOO BIG:  \" +", "+                                           _offset);", "+      }", "+      _breakComment(_cursor); //leaves us inside comment", "+      _insertNewGap(length); //inserts gap and goes to next item", "+      return;", "+    }", "+    ", "+    //1", "+    else if (_cursor.current().isGap()) {", "+      _cursor.current().grow(length);", "+      _offset += length;", "+    }", "+    //2", "+    else if (!_cursor.atFirstItem() &&", "+             _cursor.prevItem().isGap())", "+    {", "+      //already pointing to next item", "+      _cursor.prevItem().grow(length);", "+    }", "+    //4", "+    else { //between two braces", "+      _insertNewGap(length); //inserts a gap and goes to the next item", "+    }", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad61cc0c300efeecdde000f1dd3800ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ReverseHighlighter.java", "commitBeforeChange": "60b20a1ad15337681cf7920fb503055e2d9e4f51", "commitAfterChange": "12434dc2dab84dfe1024e2e2b39fd8f27da62bbd", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public synchronized void damageRange(Position pos0, Position pos1)", "signatureAfterChange": "     public synchronized void damageRange(Position pos0, Position pos1)", "diff": ["-      if (addToQueue) SwingUtilities.invokeLater(this);", "+      if (addToQueue) {", "+        SwingUtilities.invokeLater(this);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af947748d150bb2f0f70066ab7da8d21", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tprivate void _clipRight(int offset, ModelList<ReducedToken>.Iterator \t\t\t\t\t\t\t\t\t\t\t\t\tcopyCursor)", "signatureAfterChange": "   private void _clipRight(int offset, ModelList<ReducedToken>.Iterator                           copyCursor)", "diff": ["+  */", "+  private void _clipRight(int offset, ModelList<ReducedToken>.Iterator", "+                          copyCursor)", "+  {", "+    if (copyCursor.atEnd()) {", "+      return;", "+    }", "+    else if (offset == 0) {", "+      return;", "+    }", "+    else if (offset == copyCursor.current().getSize()) {", "+      copyCursor.remove();", "+    }", "+    else if (copyCursor.current().isGap()) {", "+      copyCursor.current().shrink(offset);", "+    }", "+    else if (copyCursor.current().isMultipleCharBrace()) {", "+      if (offset != 1) {", "+        throw new IllegalArgumentException(\"Offset incorrect\");", "+      }", "+      else {", "+        String type = copyCursor.current().getType();", "+        String second = type.substring(1,2);", "+        copyCursor.current().setType(second);", "+      }", "+    }", "+    else {", "+      throw new IllegalArgumentException(\"Cannot clip left.\");", "+    }", "+  }", "-   */", "-\tprivate void _clipRight(int offset, ModelList<ReducedToken>.Iterator", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcopyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd()){", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\telse if (offset == 0) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\telse if (offset == copyCursor.current().getSize()){", "-\t\t\t\tcopyCursor.remove();", "-\t\t\t}", "-\t\t\telse if (copyCursor.current().isGap()){", "-\t\t\t\tcopyCursor.current().shrink(offset);", "-\t\t\t}", "-\t\t\telse if (copyCursor.current().isMultipleCharBrace()){", "-\t\t\t\tif (offset != 1)", "-\t\t\t\t\tthrow new IllegalArgumentException(\"Offset incorrect\");", "-\t\t\t\telse{", "-\t\t\t\t\tString type = copyCursor.current().getType();", "-\t\t\t\t\tString second = type.substring(1,2);", "-\t\t\t\t\tcopyCursor.current().setType(second);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tthrow new IllegalArgumentException(\"Cannot clip left.\");", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5b4f65ee5663c6fd7ec22e59e4b7834", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public int getRowCount()", "signatureAfterChange": "     public int getRowCount()", "diff": ["-    }", "-    public int getRowCount() { ", "-      if (_frames == null)", "-        return 0;", "-      return _frames.size(); }", "+      if (_stackFrames == null) {", "+      }", "+      return _stackFrames.size();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5f52ec49ce84d8d03f65bacbb576aa4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void _insertGap( int length )", "signatureAfterChange": "   public void _insertGap(int length)", "diff": ["-   */", "-  public void _insertGap( int length )", "-\t\t{", "-\t\t\t//0 - a", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t{", "-\t\t\t\t\tif (_gapToRight())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_cursor.next();", "-\t\t\t\t\t\t\t_augmentCurrentGap(length); //increases gap and moves offset", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_insertNewGap(length);//inserts gap and goes to next item", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t//0 - b", "-\t\t\telse if (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\tif (_gapToLeft())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_augmentGapToLeft(length);", "-              //increases the gap to the left and", "-\t\t\t\t\t\t\t//cursor to next item in list leaving offset 0\t\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_insertNewGap(length); //inserts gap and moves to next item", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t//5", "-\t\t\t//offset should never be greater than 1 here because JAVA only has 2", "-\t\t\t//char comments", "-\t\t\telse if (_cursor.current().isMultipleCharBrace() && (_offset > 0))", "-\t\t\t\t{", "-\t\t\t\t\tif (_offset > 1)", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"OFFSET TOO BIG:  \"+", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _offset);", "-\t\t\t\t\t", "-\t\t\t\t\t_breakComment(_cursor); //leaves us inside comment", "-\t\t\t\t\t_insertNewGap(length); //inserts gap and goes to next item", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t", "-\t\t\t//1", "-\t\t\telse if (_cursor.current().isGap())", "-\t\t\t\t{", "-\t\t\t\t\t_cursor.current().grow(length);", "-\t\t\t\t\t_offset += length;", "-\t\t\t\t}", "-\t\t\t//2", "-\t\t\telse if (!_cursor.atFirstItem() &&", "-\t\t\t\t\t\t\t _cursor.prevItem().isGap())", "-\t\t\t\t{", "-\t\t\t\t\t//already pointing to next item", "-\t\t\t\t\t_cursor.prevItem().grow(length);", "-\t\t\t\t}", "-\t\t\t//4", "-\t\t\telse //between two braces", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewGap(length); //inserts a gap and goes to the next item", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void _insertGap(int length) {", "+    //0 - a", "+    if (_cursor.atStart()) {", "+      if (_gapToRight()) {", "+        _cursor.next();", "+        _augmentCurrentGap(length); //increases gap and moves offset", "+      }", "+      else {", "+        _insertNewGap(length);//inserts gap and goes to next item", "+      }", "+    }", "+    //0 - b", "+    else if (_cursor.atEnd()) {", "+      if (_gapToLeft()) {", "+        _augmentGapToLeft(length);", "+        //increases the gap to the left and", "+        //cursor to next item in list leaving offset 0              ", "+      }", "+      else {", "+        _insertNewGap(length); //inserts gap and moves to next item", "+      }", "+    }", "+    ", "+    //5", "+    //offset should never be greater than 1 here because JAVA only has 2", "+    //char comments", "+    else if (_cursor.current().isMultipleCharBrace() && (_offset > 0)) {", "+      if (_offset > 1) {", "+        throw new IllegalArgumentException(\"OFFSET TOO BIG:  \" +", "+                                           _offset);", "+      }", "+      _breakComment(_cursor); //leaves us inside comment", "+      _insertNewGap(length); //inserts gap and goes to next item", "+      return;", "+    }", "+    ", "+    //1", "+    else if (_cursor.current().isGap()) {", "+      _cursor.current().grow(length);", "+      _offset += length;", "+    }", "+    //2", "+    else if (!_cursor.atFirstItem() &&", "+             _cursor.prevItem().isGap())", "+    {", "+      //already pointing to next item", "+      _cursor.prevItem().grow(length);", "+    }", "+    //4", "+    else { //between two braces", "+      _insertNewGap(length); //inserts a gap and goes to the next item", "+    }", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b63aab4a83ddd33b9b6e33cf49084678", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "37dab6b79fc3d4e6f7b2b5f0aa53a4ea9b7f7476", "commitAfterChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "methodNumberBeforeChange": 393, "methodNumberAfterChange": 397, "signatureBeforeChange": "   private void _updateDebugStatus()", "signatureAfterChange": "   private void _updateDebugStatus()", "diff": ["-      if (_debugPanel.getStatusText().equals(\"\")) _debugPanel.setStatusText(DEBUGGER_OUT_OF_SYNC);", "+      if (_debugPanel.getStatusText().equals(\"\")) {", "+        _debugPanel.setStatusText(DEBUGGER_OUT_OF_SYNC);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9182d3ae9623fb7c4371f6310f321a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   private int _updateInsideQuote(ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private int _updateInsideQuote(ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private int _updateInsideQuote(ModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\treturn -1;", "-", "-\t\t\t_splitCurrentIfCommentBlock(true,false, copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "-\t\t\t\tString type = copyCursor.current().getType();", "-", "-\t\t\t\tif (type.equals(\"\\n\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse if (type.equals(\"\\\"\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// make sure this is a CLOSE quote", "-\t\t\t\t\t\tif (copyCursor.current().isOpen())", "-\t\t\t\t\t\t\tcopyCursor.current().flip();", "-", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.INSIDE_QUOTE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_QUOTE;", "-\t\t\t\t\t\t//_updateInsideQuote(copyCursor);", "-\t\t\t\t\t}", "-\t\t}", "+  private int _updateInsideQuote(ModelList<ReducedToken>.Iterator copyCursor) {", "+    if (copyCursor.atEnd()) {", "+      return -1;", "+    }", "+    _splitCurrentIfCommentBlock(true,false, copyCursor);", "+    _combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "+    String type = copyCursor.current().getType();", "+    ", "+    if (type.equals(\"\\n\")) {", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+    else if (type.equals(\"\\\"\")) {", "+      // make sure this is a CLOSE quote", "+      if (copyCursor.current().isOpen())", "+        copyCursor.current().flip();", "+      ", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+    else {", "+      copyCursor.current().setState(Brace.INSIDE_QUOTE);", "+      copyCursor.next();", "+      return Brace.INSIDE_QUOTE;", "+      //_updateInsideQuote(copyCursor);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb9d0296552cd7c7b4a68dec2cde3255", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tprivate boolean _checkPrevEquals(ModelList<ReducedToken>.Iterator delTo, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t String match)", "signatureAfterChange": "   private boolean _checkPrevEquals(ModelList<ReducedToken>.Iterator delTo,                                    String match)", "diff": ["+  */", "+  private boolean _checkPrevEquals(ModelList<ReducedToken>.Iterator delTo,", "+                                   String match)", "+  {", "+    if (delTo.atFirstItem() || delTo.atStart()) {", "+      return false;", "+    }", "+    return delTo.prevItem().getType().equals(match);", "+  }", "-\t */", "-\tprivate boolean _checkPrevEquals(ModelList<ReducedToken>.Iterator delTo,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t String match)", "-\t\t{", "-\t\t\tif (delTo.atFirstItem() || delTo.atStart())", "-\t\t\t\treturn false;", "-", "-\t\t\treturn delTo.prevItem().getType().equals(match);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c02800a7c30d1ace4c84e21fbe0bcc62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void delete( int count )", "signatureAfterChange": "   public void delete( int count)", "diff": ["+  */", "+  public void delete( int count) {", "+    if (count == 0) {", "+      return;", "+    }", "+    ModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "+    // from = the _cursor", "+    // to = _cursor.copy()", "+    _offset = _delete(count, _offset, _cursor, copyCursor);", "+    copyCursor.dispose();", "+    return;", "+  }", "-  public void delete( int count )", "-\t\t{", "-\t\t\tif (count == 0)", "-\t\t\t\treturn;", "-\t\t\tModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "-\t\t\t// from = the _cursor", "-\t\t\t// to = _cursor.copy()", "-\t\t\t_offset = _delete(count, _offset, _cursor, copyCursor);", "-\t\t\tcopyCursor.dispose();", "-\t\t\treturn;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2bb04e86469cd767cd39a771a88dfa7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate int _moveRight(int count, \t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor, \t\t\t\t\t\t\t\t\t\t\t\t int currentOffset)", "signatureAfterChange": "   private int _moveRight(int count,                          ModelList<ReducedToken>.Iterator copyCursor,                          int currentOffset)", "diff": ["-\t */", "-\tprivate int _moveRight(int count,", "-\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor,", "-\t\t\t\t\t\t\t\t\t\t\t\t int currentOffset)", "-\t\t{", "-\t\t\tif (copyCursor.atStart()) {", "-\t\t\t\tcurrentOffset = 0;", "-\t\t\t\tcopyCursor.next();", "-\t\t\t}", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\tthrow new IllegalArgumentException(\"At end\");", "-\t\t\t", "-\t\t\twhile (count >= copyCursor.current().getSize() - currentOffset){", "-\t\t\t\tcount = count - copyCursor.current().getSize()+currentOffset;", "-\t\t\t\tcopyCursor.next();", "-\t\t\t\tcurrentOffset = 0;", "-\t\t\t\tif (copyCursor.atEnd()){", "-\t\t\t\t\tif (count == 0)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\telse {throw new IllegalArgumentException(\"Moved into tail\");}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn count+currentOffset; //returns the offset", "-\t\t}", "+   */", "+  private int _moveRight(int count,", "+                         ModelList<ReducedToken>.Iterator copyCursor,", "+                         int currentOffset)", "+  {", "+    if (copyCursor.atStart()) {", "+      currentOffset = 0;", "+      copyCursor.next();", "+    }", "+    if (copyCursor.atEnd()) {", "+      throw new IllegalArgumentException(\"At end\");", "+    }", "+    while (count >= copyCursor.current().getSize() - currentOffset){", "+      count = count - copyCursor.current().getSize()+currentOffset;", "+      copyCursor.next();", "+      currentOffset = 0;", "+      if (copyCursor.atEnd()){", "+        if (count == 0)", "+          break;", "+        else {throw new IllegalArgumentException(\"Moved into tail\");}", "+      }", "+    }", "+    return count+currentOffset; //returns the offset", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c59e1d7092d8407f463fb7cf43d3c82a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "5faad565deecfb82b97073634322d0015dfa1839", "commitAfterChange": "da5a0dd68bcb282274a520304e64e7f255ef6c4e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public boolean setActiveInterpreter(String name)", "signatureAfterChange": "   public boolean setActiveInterpreter(String name)", "diff": ["-    if (! _enabled) return false;", "+    if (!_enabled) {", "+      return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c64c4123e91198006bdfb0fd0a06b5d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "7e9ff3bb619e0dc2b4141d09cbd325f980ff3ee5", "commitAfterChange": "8004e8339d9ea14156f225b11f26f546f17ae259", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public Action get(KeyStroke ks)", "signatureAfterChange": "   public Action get(KeyStroke ks)", "diff": ["-    KeyStrokeData ksd = (KeyStrokeData)_keyToDataMap.get(ks);", "-    if (ksd == null)", "-      return null;    ", "+    KeyStrokeData ksd = (KeyStrokeData) _keyToDataMap.get(ks);", "+    if (ksd == null) {", "+      return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c815b1db0c46c6a125b34778adcc6a67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t\tpublic T current()", "signatureAfterChange": "     public T current()", "diff": ["-\t\t */", "-\t\tpublic T current()", "-\t\t\t{", "-\t\t\t\tif (atStart())", "-\t\t\t\t\t{\t\t\t\t\t\t", "-\t\t\t\t\t\tthrow new RuntimeException(\"Attempt to call current on an \" +", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \"iterator in the initial position\");", "-\t\t\t\t\t}", "-\t\t\t\telse if (atEnd())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tthrow new RuntimeException(\"Attempt to call current on an \" +", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \"iterator in the final position\");", "-\t\t\t\t\t}", "-\t\t\t\telse\t\t\t\t\t\t", "-\t\t\t\t\treturn _point.getItem();", "-\t\t\t}", "+     */", "+    public T current() {", "+      if (atStart()) {", "+        throw new RuntimeException(\"Attempt to call current on an \" +", "+                                   \"iterator in the initial position\");", "+      }", "+      else if (atEnd()) {", "+        throw new RuntimeException(\"Attempt to call current on an \" +", "+                                   \"iterator in the final position\");", "+      }", "+      else {", "+        return _point.getItem();", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb4b31f734d3dc6ab407ddf2e3f1f0e4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "     void switchToError(CompilerError error)", "signatureAfterChange": "     void switchToError(CompilerError error)", "diff": ["-      if (error == null) return;", "+      if (error == null) { ", "+        return;", "+      }", "-", "-          } else {", "+          }", "+          else {", "-        } catch (IOException ioe) {", "+        }", "+        catch (IOException ioe) {", "-      } else {", "+      }", "+      else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf392080e226235dc903493c05403fc9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tprivate void _clipLeft(int offset, ModelList<ReducedToken>.Iterator \t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "signatureAfterChange": "   private void _clipLeft(int offset,                           ModelList<ReducedToken>.Iterator                          copyCursor)", "diff": ["+  */", "+  private void _clipLeft(int offset, ", "+                         ModelList<ReducedToken>.Iterator", "+                         copyCursor)", "+  {", "+    if (copyCursor.atStart()) {", "+      return;", "+    }", "+    else if (offset == 0) {", "+      copyCursor.remove();", "+    }", "+    else if (copyCursor.current().isGap()) {", "+      int size = copyCursor.current().getSize();", "+      copyCursor.current().shrink(size-offset);", "+    }", "+    else if (copyCursor.current().isMultipleCharBrace()) {", "+      if (offset != 1) {", "+        throw new IllegalArgumentException(\"Offset incorrect\");", "+      }", "+      else {", "+        String type = copyCursor.current().getType();", "+        String first = type.substring(0,1);", "+        copyCursor.current().setType(first);", "+      }", "+    }", "+    else {", "+      throw new IllegalArgumentException(\"Cannot clip left.\");", "+    }", "+  }", "-\tprivate void _clipLeft(int offset, ModelList<ReducedToken>.Iterator", "-\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atStart()){", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\telse if (offset == 0){", "-\t\t\t\tcopyCursor.remove();", "-\t\t\t}", "-\t\t\telse if (copyCursor.current().isGap()){", "-\t\t\t\tint size = copyCursor.current().getSize();", "-\t\t\t\tcopyCursor.current().shrink(size-offset);", "-\t\t\t}", "-\t\t\telse if (copyCursor.current().isMultipleCharBrace()){", "-\t\t\t\tif (offset != 1)", "-\t\t\t\t\tthrow new IllegalArgumentException(\"Offset incorrect\");", "-\t\t\t\telse{", "-\t\t\t\t\tString type = copyCursor.current().getType();", "-\t\t\t\t\tString first = type.substring(0,1);", "-\t\t\t\t\tcopyCursor.current().setType(first);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tthrow new IllegalArgumentException(\"Cannot clip left.\");", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cff52fe25171e2e931b72dab9c9d37b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   private int _updateInsideBlockComment( \t\tModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private int _updateInsideBlockComment     (ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private int _updateInsideBlockComment(", "-\t\tModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\treturn -1;", "-", "-\t\t\t_combineCurrentAndNextIfFind(\"*\", \"/\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"*\",\"//\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"*\",\"/*\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "-\t\t\t", "-\t\t\t\t_splitCurrentIfCommentBlock(false, false,copyCursor);", "-", "-\t\t\t\tString type = copyCursor.current().getType();", "-\t\t\t\tif (type.equals(\"*/\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t", "-\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.INSIDE_BLOCK_COMMENT);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_BLOCK_COMMENT;", "-\t\t\t\t\t\t//_updateInsideBlockComment(copyCursor);", "-\t\t\t\t\t}", "-\t\t}", "+  private int _updateInsideBlockComment", "+    (ModelList<ReducedToken>.Iterator copyCursor)", "+  {", "+    if (copyCursor.atEnd()) {", "+      return -1;", "+    }", "+    _combineCurrentAndNextIfFind(\"*\", \"/\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"*\",\"//\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"*\",\"/*\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "+    ", "+    _splitCurrentIfCommentBlock(false, false,copyCursor);", "+    ", "+    String type = copyCursor.current().getType();", "+    if (type.equals(\"*/\")) {", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+    ", "+    else {", "+      copyCursor.current().setState(Brace.INSIDE_BLOCK_COMMENT);", "+      copyCursor.next();", "+      return Brace.INSIDE_BLOCK_COMMENT;", "+      //_updateInsideBlockComment(copyCursor);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d05bbc1d5bf73a98a4dc13c9a160722e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelBrace.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate int _moveRight(int count, \t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor, \t\t\t\t\t\t\t\t\t\t\t\t int currentOffset)", "signatureAfterChange": "   private int _moveRight(int count,                          ModelList<ReducedToken>.Iterator copyCursor,                          int currentOffset)", "diff": ["-\t */", "-\tprivate int _moveRight(int count,", "-\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor,", "-\t\t\t\t\t\t\t\t\t\t\t\t int currentOffset)", "-\t\t{", "-\t\t\tif (copyCursor.atStart()) {", "-\t\t\t\tcurrentOffset = 0;", "-\t\t\t\tcopyCursor.next();", "-\t\t\t}", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\tthrow new IllegalArgumentException(\"At end\");", "-\t\t\t", "-\t\t\twhile (count >= copyCursor.current().getSize() - currentOffset){", "-\t\t\t\tcount = count - copyCursor.current().getSize()+currentOffset;", "-\t\t\t\tcopyCursor.next();", "-\t\t\t\tcurrentOffset = 0;", "-\t\t\t\tif (copyCursor.atEnd()){", "-\t\t\t\t\tif (count == 0)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\telse {throw new IllegalArgumentException(\"Moved into tail\");}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn count+currentOffset; //returns the offset", "-\t\t}", "+   */", "+  private int _moveRight(int count,", "+                         ModelList<ReducedToken>.Iterator copyCursor,", "+                         int currentOffset)", "+  {", "+    if (copyCursor.atStart()) {", "+      currentOffset = 0;", "+      copyCursor.next();", "+    }", "+    if (copyCursor.atEnd()) {", "+      throw new IllegalArgumentException(\"At end\");", "+    }", "+    while (count >= copyCursor.current().getSize() - currentOffset){", "+      count = count - copyCursor.current().getSize()+currentOffset;", "+      copyCursor.next();", "+      currentOffset = 0;", "+      if (copyCursor.atEnd()){", "+        if (count == 0)", "+          break;", "+        else {throw new IllegalArgumentException(\"Moved into tail\");}", "+      }", "+    }", "+    return count+currentOffset; //returns the offset", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d52e7527ce6b21801f833a1029504a5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 453, "methodNumberAfterChange": 457, "signatureBeforeChange": "      private boolean showCleanWarning()", "signatureAfterChange": "      private boolean showCleanWarning()", "diff": ["-      try { buildDirTxt = _model.getBuildDirectory().getCanonicalPath(); }", "-      catch (Exception e) { buildDirTxt = _model.getBuildDirectory().getPath(); }", "+      try {", "+        buildDirTxt = _model.getBuildDirectory().getCanonicalPath();", "+      }", "+      catch (Exception e) {", "+        buildDirTxt = _model.getBuildDirectory().getPath();", "+      }", "-          if (dialog.getCheckBoxValue()) DrJava.getConfig().setSetting(PROMPT_BEFORE_CLEAN, Boolean.FALSE);", "+          if (dialog.getCheckBoxValue()) {", "+            DrJava.getConfig().setSetting(PROMPT_BEFORE_CLEAN, Boolean.FALSE);", "+          }", "-        case JOptionPane.NO_OPTION:      return false;", "-        case JOptionPane.CANCEL_OPTION:  return false;", "-        case JOptionPane.CLOSED_OPTION:  return false;", "-        default:  throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+        case JOptionPane.NO_OPTION:", "+          return false;", "+        case JOptionPane.CANCEL_OPTION:", "+          return false;", "+        case JOptionPane.CLOSED_OPTION:", "+          return false;", "+        default:", "+          throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d575815426e563ee0063d106f0bd1846", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelControl.java", "commitBeforeChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "commitAfterChange": "0fc2bd43202dc44ec1898220476c0c1829fb08a2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic ReducedToken currentToken()", "signatureAfterChange": "    public ReducedToken currentToken()", "diff": ["-\tpublic ReducedToken currentToken()", "-\t\t{", "-\t\t\tReducedToken rmcToken = rmc.current();", "-\t\t\tif (!rmcToken.isGap())", "-\t\t\t\treturn rmcToken;", "-\t\t\tReducedToken rmbToken = rmb.current();", "-\t\t\tif (!rmbToken.isGap()){", "-\t\t\t\trmbToken.setState(rmc.getStateAtCurrent());", "-\t\t\t\treturn rmbToken;", "-\t\t\t}", "-\t\t\t", "-\t\t\tint size = getSize(rmbToken,rmcToken);", "-\t\t\treturn new Gap(size, rmc.getStateAtCurrent());", "-\t\t}", "+  public ReducedToken currentToken() {", "+    ", "+    ReducedToken rmcToken = rmc.current();", "+    ", "+    if (!rmcToken.isGap()) {", "+        return rmcToken;", "+    }", "+      ReducedToken rmbToken = rmb.current();", "+    ", "+      if (!rmbToken.isGap()) {", "+        rmbToken.setState(rmc.getStateAtCurrent());", "+        return rmbToken;", "+      }", "+      ", "+      int size = getSize(rmbToken,rmcToken);", "+      return new Gap(size, rmc.getStateAtCurrent());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9a737e15a6f251fb8b7df48c645dc4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "          ProjectFileGroupingState(File pr, File main, File bd, File wd, File project, File[] srcFiles, File[] auxFiles,                               File[] excludedFiles, Iterable<File> cp, File cjf, int cjflags, boolean refreshStatus)", "signatureAfterChange": "          ProjectFileGroupingState(File pr, File main, File bd, File wd, File project, File[] srcFiles, File[] auxFiles,                               File[] excludedFiles, Iterable<File> cp, File cjf, int cjflags, boolean refreshStatus)", "diff": ["-      if (_projectFiles != null) try {  for (File file : _projectFiles) { _projFilePaths.add( file.getCanonicalPath()); } }", "-      catch(IOException e) { /*do nothing */ }", "+      if (_projectFiles != null) {", "+        try { for (File file : _projectFiles) { _projFilePaths.add(file.getCanonicalPath()); } }", "+        catch(IOException e) { /*do nothing */ }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daa166f6e318949106e27632ded877ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic int getDistToNextNewline()", "signatureAfterChange": "   public int getDistToNextNewline()", "diff": ["-\t */", "-\tpublic int getDistToNextNewline()", "-\t\t{", "-\t\t\tModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "-\t\t\tif(copyCursor.atStart())", "-\t\t\t\tcopyCursor.next();", "-\t\t\tif(copyCursor.atEnd() || copyCursor.current().getType().equals(\"\\n\")){", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\tint walkcount = copyCursor.current().getSize() - _offset;", "-\t\t\tcopyCursor.next();", "-\t\t\t", "-\t\t\twhile ((!copyCursor.atEnd()) &&", "-\t\t\t\t\t\t (!(copyCursor.current().getType().equals(\"\\n\")))){", "-\t\t\t\t//copyCursor.current().getState() == ReducedToken.FREE))){", "-\t\t\t\twalkcount += copyCursor.current().getSize();", "-\t\t\t\tcopyCursor.next();", "-\t\t\t}", "-\t\t\treturn walkcount;", "-\t\t}", "+  */", "+  public int getDistToNextNewline() {", "+    ModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "+    if(copyCursor.atStart()) {", "+      copyCursor.next();", "+    }", "+    if(copyCursor.atEnd() || copyCursor.current().getType().equals(\"\\n\")) {", "+      return 0;", "+    }", "+    int walkcount = copyCursor.current().getSize() - _offset;", "+    copyCursor.next();", "+    ", "+    while ((!copyCursor.atEnd()) &&", "+           (!(copyCursor.current().getType().equals(\"\\n\")))) ", "+    {", "+      //copyCursor.current().getState() == ReducedToken.FREE))){", "+      walkcount += copyCursor.current().getSize();", "+      copyCursor.next();", "+    }", "+    return walkcount;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7785c2a3e8c5c5d8ccb4052d1403d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t\tpublic T nextItem()", "signatureAfterChange": "     public T nextItem()", "diff": ["-\t\t */", "-\t\tpublic T nextItem()", "-\t\t\t{", "-\t\t\t\tif (atLastItem() || atEnd() || ModelList.this.isEmpty())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tthrow new RuntimeException(\"No more following items.\");", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\treturn _point.succ.getItem();", "-\t\t\t}", "+     */", "+    public T nextItem() {", "+      if (atLastItem() || atEnd() || ModelList.this.isEmpty()) {", "+        throw new RuntimeException(\"No more following items.\");", "+      }", "+      else {", "+        return _point.succ.getItem();", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db8de53d71fb11efce36843436f60756", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t\tpublic T prevItem()", "signatureAfterChange": "     public T prevItem()", "diff": ["-\t\t */", "-\t\tpublic T prevItem()", "-\t\t\t{", "-\t\t\t\tif (atFirstItem() || atStart() || ModelList.this.isEmpty())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tthrow new RuntimeException(\"No more previous items.\");", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\treturn _point.pred.getItem();", "-\t\t\t}", "+     */", "+    public T prevItem() {", "+      if (atFirstItem() || atStart() || ModelList.this.isEmpty()) {", "+        throw new RuntimeException(\"No more previous items.\");", "+      }", "+      else {", "+        return _point.pred.getItem();", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddf7d24a124b762b1fb65dc01ea635be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b5f59af8481ed1aa24e82d114a52e3948d4e83f5", "commitAfterChange": "4a90aa5d0c3f437e0c1cdaccfb311a2852121f92", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)     throws BadLocationException", "diff": ["+//    System.err.println(\"findPrevDelimiter(\" + pos + \", \" + Arrays.toString(delims) + \", \" + skipParenPhrases);", "-    if (cached != null) return cached.intValue();", "-    ", "+    if (cached != null) {", "+//      System.err.println(cached.intValue() + \" found in cache\");", "+      return cached.intValue();", "+    }", "-      ", "+//      System.err.println(\"Returning \" + reducedPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03226113b7fe0c02c7125dd5e757f24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   protected VariableData[] _variableDeclaration2VariableData(VariableDeclaration vd, Data enclosing)", "signatureAfterChange": "   protected VariableData[] _variableDeclaration2VariableData(VariableDeclaration vd, Data enclosing)", "diff": ["-   ", "-      ", "-      else _addAndIgnoreError(\"Class or Interface \" + name + \" not found\", type);", "+      else {", "+//        System.err.println(\"handleDeclarator(\" + type + \", \" + name + \", \" + enclosing + \") returned null\");", "+        _addAndIgnoreError(\"Class or Interface \" + name + \" not found\", type);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e060af6d47ce21340f28d86fc131ec90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void insertSlash()", "signatureAfterChange": "   public void insertSlash()", "diff": ["-   */", "-  public void insertSlash()", "-\t\t{", "-\t\t\t//check if empty", "-\t\t\tif (_braces.isEmpty())", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewBrace(\"/\",_cursor);//now pointing to tail.", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t//check if at start", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t_cursor.next();", "-\t\t\t//not empty, not at start, if at end check the previous brace", "-\t\t\tif (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertSlash(_cursor);", "-\t\t\t\t}\t\t\t", "-\t\t\t//if inside a double character brace, break it.", "-\t\t\telse if ((_offset > 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t_splitCurrentIfCommentBlock(true,true,_cursor);", "-          //leaving us at the start", "-\t\t\t\t\t_cursor.next(); //leaving us after first char", "-\t\t\t\t\t//System.out.println(this.simpleString());", "-\t\t\t\t\t_insertNewBrace(\"/\",_cursor); //leaves us after /", "-\t\t\t\t\t//_cursor.prev();", "-\t\t\t\t\t//_cursor.prev(); //puts us back on first char in double comment", "-\t\t\t\t\tmove(-2);", "-\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t//if (!_cursor.current().isMultipleCharBrace())", "-\t\t\t\t\t//_cursor.next();", "-\t\t\t\t\t//_cursor.next();", "-\t\t\t\t\tmove(2);", "-\t\t\t\t}", "-", "-\t\t\telse if ((_offset > 0) && (_cursor.current().isGap()))", "-\t\t\t\t{", "-\t\t\t\t\t_insertBraceToGap(\"/\", _cursor);", "-\t\t\t\t}", "-\t\t\t", "-\t\t\t//if at start of double character brace, break it.", "-\t\t\telse if ((_offset == 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t//if we're free there won't be a block comment close so if there", "-\t\t\t\t\t//is then we don't want to break it.", "-\t\t\t\t\t_splitCurrentIfCommentBlock(false,false,_cursor); //leaving us at start", "-\t\t\t\t\t_checkPreviousInsertSlash(_cursor);", "-\t\t\t\t}", "-\t\t\telse", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertSlash(_cursor);", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void insertSlash() {", "+    // Check if empty.", "+    if (_braces.isEmpty()) {", "+      _insertNewBrace(\"/\",_cursor);//now pointing to tail.", "+      return;", "+    }", "+    // Check if at start.", "+    if (_cursor.atStart()) {", "+      _cursor.next();", "+    }", "+    // Not empty, not at start, if at end check the previous brace", "+    if (_cursor.atEnd()) {", "+      _checkPreviousInsertSlash(_cursor);", "+    }      ", "+    // If inside a double character brace, break it.", "+    else if ((_offset > 0) && _cursor.current().isMultipleCharBrace()) {", "+      _splitCurrentIfCommentBlock(true,true,_cursor);", "+      //leaving us at the start", "+      _cursor.next(); //leaving us after first char", "+      //System.out.println(this.simpleString());", "+      _insertNewBrace(\"/\",_cursor); //leaves us after /", "+      //_cursor.prev();", "+      //_cursor.prev(); //puts us back on first char in double comment", "+      move(-2);", "+      _updateBasedOnCurrentState();", "+      //if (!_cursor.current().isMultipleCharBrace())", "+      //_cursor.next();", "+      //_cursor.next();", "+      move(2);", "+    }", "+    ", "+    else if ((_offset > 0) && (_cursor.current().isGap())) {", "+      _insertBraceToGap(\"/\", _cursor);", "+    }", "+    ", "+    //if at start of double character brace, break it.", "+    else if ((_offset == 0) && _cursor.current().isMultipleCharBrace()) {", "+      //if we're free there won't be a block comment close so if there", "+      //is then we don't want to break it.", "+      _splitCurrentIfCommentBlock(false,false,_cursor); //leaving us at start", "+      _checkPreviousInsertSlash(_cursor);", "+    }", "+    else {", "+      _checkPreviousInsertSlash(_cursor);", "+    }", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2652034759dc0bcc1fb59c0c3451336", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelControl.java", "commitBeforeChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "commitAfterChange": "0fc2bd43202dc44ec1898220476c0c1829fb08a2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic ReducedToken currentToken()", "signatureAfterChange": "    public ReducedToken currentToken()", "diff": ["-\tpublic ReducedToken currentToken()", "-\t\t{", "-\t\t\tReducedToken rmcToken = rmc.current();", "-\t\t\tif (!rmcToken.isGap())", "-\t\t\t\treturn rmcToken;", "-\t\t\tReducedToken rmbToken = rmb.current();", "-\t\t\tif (!rmbToken.isGap()){", "-\t\t\t\trmbToken.setState(rmc.getStateAtCurrent());", "-\t\t\t\treturn rmbToken;", "-\t\t\t}", "-\t\t\t", "-\t\t\tint size = getSize(rmbToken,rmcToken);", "-\t\t\treturn new Gap(size, rmc.getStateAtCurrent());", "-\t\t}", "+  public ReducedToken currentToken() {", "+    ", "+    ReducedToken rmcToken = rmc.current();", "+    ", "+    if (!rmcToken.isGap()) {", "+        return rmcToken;", "+    }", "+      ReducedToken rmbToken = rmb.current();", "+    ", "+      if (!rmbToken.isGap()) {", "+        rmbToken.setState(rmc.getStateAtCurrent());", "+        return rmbToken;", "+      }", "+      ", "+      int size = getSize(rmbToken,rmcToken);", "+      return new Gap(size, rmc.getStateAtCurrent());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27f4004dd9a230799b5e158d93f44b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t\tpublic void insert(T item)", "signatureAfterChange": "     public void insert(T item)", "diff": ["-\t\t */", "-\t\tpublic void insert(T item)", "-\t\t\t{", "-\t\t\t\t//so as not to insert at head", "-\t\t\t\tif ( this.atStart() )", "-\t\t\t\t\tnext();", "-\t\t\t\tModelList.this.insert(_point, item);", "-\t\t\t\t_point = _point.pred; //puts pointer on inserted item\t\t\t\t", "-\t\t\t\tnotifyOfInsert(_pos);", "-\t\t\t\t//because notifyOfInsert will change the position of this iterator", "-\t\t\t\t//we must change it back.", "-\t\t\t\t_pos -= 1;", "-\t\t\t}", "+     */", "+    public void insert(T item) {", "+      //so as not to insert at head", "+      if (this.atStart()) {", "+        next();", "+      }", "+      ModelList.this.insert(_point, item);", "+      _point = _point.pred; //puts pointer on inserted item", "+      notifyOfInsert(_pos);", "+      ", "+      //because notifyOfInsert will change the position of this iterator", "+      //we must change it back.", "+      _pos -= 1;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e38d2fe3821f8b790cae93d3c6ed1499", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t\tpublic void prev()", "signatureAfterChange": "     public void prev()", "diff": ["-\t\t */", "-\t\tpublic void prev()", "-\t\t\t{", "-\t\t\t\tif (atStart())", "-\t\t\t\t\tthrow new RuntimeException(\"Can't cross list boundary.\");", "-\t\t\t\t_point = _point.pred;", "-\t\t\t\t_pos--;", "-\t\t\t}", "+     */", "+    public void prev() {", "+      if (atStart()) {", "+        throw new RuntimeException(\"Can't cross list boundary.\");", "+      }", "+      _point = _point.pred;", "+      _pos--;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7b17b0067cd7cd27b6d6c2183206d3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tprivate void _clipRight(int offset, ModelList<ReducedToken>.Iterator \t\t\t\t\t\t\t\t\t\t\t\t\tcopyCursor)", "signatureAfterChange": "   private void _clipRight(int offset, ModelList<ReducedToken>.Iterator                           copyCursor)", "diff": ["+  */", "+  private void _clipRight(int offset, ModelList<ReducedToken>.Iterator", "+                          copyCursor)", "+  {", "+    if (copyCursor.atEnd()) {", "+      return;", "+    }", "+    else if (offset == 0) {", "+      return;", "+    }", "+    else if (offset == copyCursor.current().getSize()) {", "+      copyCursor.remove();", "+    }", "+    else if (copyCursor.current().isGap()) {", "+      copyCursor.current().shrink(offset);", "+    }", "+    else if (copyCursor.current().isMultipleCharBrace()) {", "+      if (offset != 1) {", "+        throw new IllegalArgumentException(\"Offset incorrect\");", "+      }", "+      else {", "+        String type = copyCursor.current().getType();", "+        String second = type.substring(1,2);", "+        copyCursor.current().setType(second);", "+      }", "+    }", "+    else {", "+      throw new IllegalArgumentException(\"Cannot clip left.\");", "+    }", "+  }", "-   */", "-\tprivate void _clipRight(int offset, ModelList<ReducedToken>.Iterator", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcopyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd()){", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\telse if (offset == 0) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\telse if (offset == copyCursor.current().getSize()){", "-\t\t\t\tcopyCursor.remove();", "-\t\t\t}", "-\t\t\telse if (copyCursor.current().isGap()){", "-\t\t\t\tcopyCursor.current().shrink(offset);", "-\t\t\t}", "-\t\t\telse if (copyCursor.current().isMultipleCharBrace()){", "-\t\t\t\tif (offset != 1)", "-\t\t\t\t\tthrow new IllegalArgumentException(\"Offset incorrect\");", "-\t\t\t\telse{", "-\t\t\t\t\tString type = copyCursor.current().getType();", "-\t\t\t\t\tString second = type.substring(1,2);", "-\t\t\t\t\tcopyCursor.current().setType(second);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tthrow new IllegalArgumentException(\"Cannot clip left.\");", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e83a1d5566acf9b2ab0f8eb819b1cfba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "ae4333c8dd1b54b8a781008188f09b6786d95ae2", "commitAfterChange": "a42a1005ad3faca50638e0131df3bc7c45ba82de", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "   private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)     throws DebugException", "signatureAfterChange": "   private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)     throws DebugException", "diff": ["-    if (printMessages) System.out.println(\"Getting suspendCount = \" + suspendCount);", "+    if (printMessages) {", "+      System.out.println(\"Getting suspendCount = \" + suspendCount);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed1349614fc23eacdba1e52b03587cec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tint absOffset()", "signatureAfterChange": "   int absOffset()", "diff": ["+  */", "+  int absOffset() {", "+    int off = _offset;", "+    ModelList<ReducedToken>.Iterator it = _cursor.copy();", "+    ", "+    if (!it.atStart()) {", "+      it.prev();", "-\t */", "-\tint absOffset()", "-\t\t{", "-\t\t\tint off = _offset;", "-\t\t\tModelList<ReducedToken>.Iterator it = _cursor.copy();", "-", "-\t\t\tif (!it.atStart())", "-\t\t\t\tit.prev();", "-\t\t\t", "-\t\t\twhile (!it.atStart())", "-\t\t\t\t{", "-\t\t\t\t\toff += it.current().getSize();", "-\t\t\t\t\tit.prev();", "-\t\t\t\t}", "-\t\t\tit.dispose();", "-\t\t\treturn off;", "-\t\t}", "+    while (!it.atStart()) {", "+      off += it.current().getSize();", "+      it.prev();", "+    }", "+    it.dispose();", "+    return off;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efe104e0365dd1c682dacec933d90c77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/StringOptionComponent.java", "commitBeforeChange": "6815df02bf2c6da2982073900e33dbad7bfa8424", "commitAfterChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public boolean updateConfig()", "signatureAfterChange": "   public boolean updateConfig()", "diff": ["-    if (!oldValue.equals(newValue)) DrJava.getConfig().setSetting(_option, newValue);   ", "+    if (!oldValue.equals(newValue)) {", "+      DrJava.getConfig().setSetting(_option, newValue);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f359c151677b1f6e862642ebaa45641e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "e75c44dca53d5633e70ed3badd03d3667a23d4c8", "commitAfterChange": "c11896795d0041b0e5728ede27aa1fce3454d97c", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void setInputListener(InputListener listener)", "signatureAfterChange": "   public void setInputListener(InputListener listener)", "diff": ["-   */", "+    */", "-    if (_inputListener == NoInputListener.ONLY) _inputListener = listener;", "-    else  throw new IllegalStateException(\"Cannot change the input listener until it is released.\");", "+    if (_inputListener == NoInputListener.ONLY) { _inputListener = listener; }", "+    else throw new IllegalStateException(\"Cannot change the input listener until it is released.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb14d1788a5c133e7cfc7531b33a960a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/InsideSingleQuote.java", "commitBeforeChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "commitAfterChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "signatureAfterChange": "   ReducedModelState update(TokenList.Iterator copyCursor)", "diff": ["-    copyCursor._splitCurrentIfCommentBlock(true,false);", "-    _combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "+    copyCursor._splitCurrentIfCommentBlock(true, false);", "+    _combineCurrentAndNextIfFind(\"\", \"\", copyCursor);", "-    ", "+", "-    ", "+", "-      if (copyCursor.current().isOpen())", "+      if (copyCursor.current().isOpen()) {", "-      ", "+      }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb626b16a373f94e61790a6892cef8cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic int getDistToNextNewline()", "signatureAfterChange": "   public int getDistToNextNewline()", "diff": ["-\t */", "-\tpublic int getDistToNextNewline()", "-\t\t{", "-\t\t\tModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "-\t\t\tif(copyCursor.atStart())", "-\t\t\t\tcopyCursor.next();", "-\t\t\tif(copyCursor.atEnd() || copyCursor.current().getType().equals(\"\\n\")){", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\tint walkcount = copyCursor.current().getSize() - _offset;", "-\t\t\tcopyCursor.next();", "-\t\t\t", "-\t\t\twhile ((!copyCursor.atEnd()) &&", "-\t\t\t\t\t\t (!(copyCursor.current().getType().equals(\"\\n\")))){", "-\t\t\t\t//copyCursor.current().getState() == ReducedToken.FREE))){", "-\t\t\t\twalkcount += copyCursor.current().getSize();", "-\t\t\t\tcopyCursor.next();", "-\t\t\t}", "-\t\t\treturn walkcount;", "-\t\t}", "+  */", "+  public int getDistToNextNewline() {", "+    ModelList<ReducedToken>.Iterator copyCursor = _cursor.copy();", "+    if(copyCursor.atStart()) {", "+      copyCursor.next();", "+    }", "+    if(copyCursor.atEnd() || copyCursor.current().getType().equals(\"\\n\")) {", "+      return 0;", "+    }", "+    int walkcount = copyCursor.current().getSize() - _offset;", "+    copyCursor.next();", "+    ", "+    while ((!copyCursor.atEnd()) &&", "+           (!(copyCursor.current().getType().equals(\"\\n\")))) ", "+    {", "+      //copyCursor.current().getState() == ReducedToken.FREE))){", "+      walkcount += copyCursor.current().getSize();", "+      copyCursor.next();", "+    }", "+    return walkcount;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcc01f7cdf5fc2c68dd2453600e5cb76", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/PopupConsole.java", "commitBeforeChange": "2c34025e391dacdd1583e970162f80f851d08a1d", "commitAfterChange": "cfcaff0f9d58c64a1efe5903c22285891a763f19", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void insertConsoleText(String txt)", "signatureAfterChange": "   public void insertConsoleText(String txt)", "diff": ["-      else throw new IllegalStateException(\"Console not ready for text insertion\");", "+      else {", "+        throw new IllegalStateException(\"Console not ready for text insertion\");", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe8dce021e170c7a2fc6287234b107de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void insertStar()", "signatureAfterChange": "   public void insertStar()", "diff": ["-   */", "-  public void insertStar()", "-\t\t{", "-\t\t\t//check if empty", "-\t\t\tif (_braces.isEmpty())", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewBrace(\"*\",_cursor);//now pointing to tail.", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t//check if at start", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t_cursor.next();", "-\t\t\t//not empty, not at start, if at end check the previous brace", "-\t\t\tif (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertStar(_cursor);", "-\t\t\t\t}\t\t ", "-\t\t\t//if inside a double character brace, break it.", "-\t\t\telse if ((_offset > 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-", "-\t\t\t\t    ", "-\t\t\t\t\t_splitCurrentIfCommentBlock(true,true,_cursor);", "-          //leaving us at the start", "-\t\t\t\t\t_cursor.next(); //leaving us after first char", "-\t\t\t\t\t_insertNewBrace(\"*\",_cursor); //leaves us after *", "-\t\t\t\t\t", "-\t\t\t\t\t//this code was changed to make the cursor move", "-\t\t\t\t\t//back two spaces instead of prev twice.", "-\t\t\t\t\t//gaurenteeing that we end in the correct ", "-\t\t\t\t\t//location.", "-\t\t\t\t\t//_cursor.prev();", "-\t\t\t\t\t//_cursor.prev(); //puts us back on first char in double comment", "-\t\t\t\t\tmove(-2);", "-\t\t\t\t\t_updateBasedOnCurrentState();", "-", "-\t\t\t\t\t//if (!_cursor.current().isMultipleCharBrace())", "-\t\t\t\t\t//\t_cursor.next();", "-\t\t\t\t\t//_cursor.next();", "-\t\t\t\t\tmove(2);", "-\t\t\t\t}", "-\t\t\t//if a gap", "-\t\t\telse if ((_offset > 0) && (_cursor.current().isGap()))", "-\t\t\t\t{", "-\t\t\t\t\t_insertBraceToGap(\"*\", _cursor);", "-\t\t\t\t}", "-\t\t\t//if at start of double character brace, break it.", "-\t\t\telse if ((_offset == 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t//if we're free there won't be a block comment close so if there", "-\t\t\t\t\t//is then we don't want to break it.", "-\t\t\t\t\t_splitCurrentIfCommentBlock(false,false,_cursor);", "-          //leaving us at start", "-\t\t\t\t\t_checkPreviousInsertStar(_cursor);", "-\t\t\t\t}", "-\t\t\telse", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertStar(_cursor);", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void insertStar() {", "+    //check if empty", "+    if (_braces.isEmpty()) {", "+      _insertNewBrace(\"*\",_cursor);//now pointing to tail.", "+      return;", "+    }", "+    //check if at start", "+    if (_cursor.atStart()) {", "+      _cursor.next();", "+    }", "+    //not empty, not at start, if at end check the previous brace", "+    if (_cursor.atEnd()) {", "+      _checkPreviousInsertStar(_cursor);", "+    }     ", "+    //if inside a double character brace, break it.", "+    else if ((_offset > 0) && _cursor.current().isMultipleCharBrace()) {", "+      _splitCurrentIfCommentBlock(true,true,_cursor);", "+      ", "+      //leaving us at the start", "+      _cursor.next(); //leaving us after first char", "+      _insertNewBrace(\"*\",_cursor); //leaves us after *", "+      ", "+      // Move the cursor back two spaces, putting it on the first char ", "+      // in the double comment.", "+      move(-2);", "+      _updateBasedOnCurrentState();", "+      ", "+      move(2);", "+    }", "+    //if a gap", "+    else if ((_offset > 0) && (_cursor.current().isGap())) {", "+      _insertBraceToGap(\"*\", _cursor);", "+    }", "+    //if at start of double character brace, break it.", "+    else if ((_offset == 0) && _cursor.current().isMultipleCharBrace()) {", "+      //if we're free there won't be a block comment close so if there", "+      //is then we don't want to break it.", "+      _splitCurrentIfCommentBlock(false,false,_cursor);", "+      //leaving us at start", "+      _checkPreviousInsertStar(_cursor);", "+    }", "+    else {", "+      _checkPreviousInsertStar(_cursor);", "+    }", "+    return;", "+  }"]}], "num": 27760}
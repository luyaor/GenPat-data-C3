{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acae8aa4a2443c210791cc8f4bff40ce", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f766d332493245b90a3674f35b2f857", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PathClassLoaderTest.java", "commitBeforeChange": "c600519b6859da4af01c52410f91013b1bbd745a", "commitAfterChange": "7f9f9a0527fe13a3dbec8283aa5b08139cfc594b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testNestedLoaders() throws Exception", "signatureAfterChange": "      public void testNestedLoaders() throws Exception", "diff": ["-    assertLoadsClassAsLoader(l, \"IntBox\");", "-    assertDoesNotLoadClass(l, \"A\");", "-    assertDoesNotLoadClass(l, \"B\");", "-    assertDoesNotLoadClass(l, \"C\");", "+    assertLoadsClassAsLoader(l, \"pkg.IntBox\");", "+    assertDoesNotLoadClass(l, \"pkg.A\");", "+    assertDoesNotLoadClass(l, \"bpkg.B\");", "+    assertDoesNotLoadClass(l, \"pkg.C\");", "-    assertLoadsSameClass(l, lA, \"IntBox\");", "-    assertLoadsClassAsLoader(lA, \"A\");", "-    assertDoesNotLoadClass(lA, \"B\");", "-    assertDoesNotLoadClass(lA, \"C\");", "+    assertLoadsSameClass(l, lA, \"pkg.IntBox\");", "+    assertLoadsClassAsLoader(lA, \"pkg.A\");", "+    assertDoesNotLoadClass(lA, \"bpkg.B\");", "+    assertDoesNotLoadClass(lA, \"pkg.C\");", "-    assertLoadsSameClass(l, lB, \"IntBox\");", "-    assertLoadsSameClass(lA, lB, \"A\");", "-    assertLoadsClassAsLoader(lB, \"B\");", "-    assertDoesNotLoadClass(lB, \"C\");", "+    assertLoadsSameClass(l, lB, \"pkg.IntBox\");", "+    assertLoadsSameClass(lA, lB, \"pkg.A\");", "+    assertLoadsClassAsLoader(lB, \"bpkg.B\");", "+    assertDoesNotLoadClass(lB, \"pkg.C\");", "-    assertLoadsSameClass(l, lC, \"IntBox\");", "-    assertLoadsSameClass(lA, lC, \"A\");", "-    assertLoadsSameClass(lB, lC, \"B\");", "-    assertLoadsClassAsLoader(lC, \"C\");", "+    assertLoadsSameClass(l, lC, \"pkg.IntBox\");", "+    assertLoadsSameClass(lA, lC, \"pkg.A\");", "+    assertLoadsSameClass(lB, lC, \"bpkg.B\");", "+    assertLoadsClassAsLoader(lC, \"pkg.C\");", "-    assertLoadsSameClass(l, lD, \"IntBox\");", "-    assertLoadsSameClass(lA, lD, \"A\");", "-    assertLoadsSameClass(lB, lD, \"B\");", "-    assertLoadsSameClass(lC, lD, \"C\");", "+    assertLoadsSameClass(l, lD, \"pkg.IntBox\");", "+    assertLoadsSameClass(lA, lD, \"pkg.A\");", "+    assertLoadsSameClass(lB, lD, \"bpkg.B\");", "+    assertLoadsSameClass(lC, lD, \"pkg.C\");", "-    assertCanGet(lD, \"A\", 1);", "+    assertCanGet(lD, \"pkg.A\", 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39024a7dca8bf9f876ed2013bc4611a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ShadowingClassLoaderTest.java", "commitBeforeChange": "24a4bd9b5af47fdf2b927852ef0f4a564c73861b", "commitAfterChange": "a0233fef3427e8ddd7241be47fe79cd3cd5d54bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testShadowedClassLoading() throws ClassNotFoundException", "signatureAfterChange": "      public void testShadowedClassLoading() throws ClassNotFoundException", "diff": ["-    ShadowingClassLoader l = new ShadowingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.reflect\");", "+    // simple black list", "+    ShadowingClassLoader l = ShadowingClassLoader.blackList(BASE_LOADER, \"edu.rice.cs.plt.reflect\");", "-    ShadowingClassLoader l2 = new ShadowingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.refl\");", "+    // prefix containing partial word shouldn't work", "+    ShadowingClassLoader l2 = ShadowingClassLoader.blackList(BASE_LOADER, \"edu.rice.cs.plt.refl\");", "-    ShadowingClassLoader l3 = new ShadowingClassLoader(BASE_LOADER, false, \"edu.rice.cs.plt.reflect\");", "+    // simple white list", "+    ShadowingClassLoader l3 = ShadowingClassLoader.whiteList(BASE_LOADER, \"edu.rice.cs.plt.reflect\");", "+    ", "+    // default black list doesn't block bootstrap classes", "+    ShadowingClassLoader l4 = ShadowingClassLoader.blackList(BASE_LOADER, \"javax\", \"edu\");", "+    assertLoadsSameClass(BASE_LOADER, l4, \"java.lang.Number\");", "+    assertLoadsSameClass(BASE_LOADER, l4, \"javax.swing.JFrame\");", "+    assertLoadsClass(BASE_LOADER, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertDoesNotLoadClass(l4, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    ", "+    // default white list doesn't block bootstrap classes", "+    ShadowingClassLoader l5 = ShadowingClassLoader.whiteList(BASE_LOADER, \"javax\", \"edu.rice.cs.plt.reflect\");", "+    assertLoadsSameClass(BASE_LOADER, l5, \"javax.swing.JFrame\");", "+    assertLoadsSameClass(BASE_LOADER, l5, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertLoadsClass(BASE_LOADER, \"edu.rice.cs.plt.iter.IterUtil\");", "+    assertDoesNotLoadClass(l5, \"edu.rice.cs.plt.iter.IterUtil\");", "+    ", "+    // can filter boostrap classes with filterBootClasses parameter", "+    ShadowingClassLoader l6 =", "+    new ShadowingClassLoader(BASE_LOADER, true, IterUtil.make(\"javax\", \"edu\"), true);", "+    assertLoadsSameClass(BASE_LOADER, l6, \"java.lang.Number\");", "+    assertLoadsClass(BASE_LOADER, \"javax.swing.JFrame\");", "+    assertDoesNotLoadClass(l6, \"javax.swing.JFrame\");", "+    assertLoadsClass(BASE_LOADER, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertDoesNotLoadClass(l4, \"edu.rice.cs.plt.reflect.ReflectUtil\");"]}], "num": 10338}
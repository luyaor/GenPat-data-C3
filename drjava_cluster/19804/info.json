{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ee6f46770511799f03b472c3b0c9eca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "045bc626ac4f20445381e91cf9e755b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "4e55340834f8e6032cf1387752575fd19cb935fe", "commitAfterChange": "de413eda4232899a577fad80816630301e25a4de", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private void _remove()", "signatureAfterChange": "   private void _remove()", "diff": ["+", "-    int row = (rows.length > 0) ? rows[0] : 0;", "+//    System.err.println(\"_remove() called with rows \" + Arrays.toString(rows));", "+    int len = rows.length;", "+    int row = (len > 0) ? rows[len - 1] + 1 : 0;", "+//    _regTree.setSelectionRow(row);", "-    if (_regionManager.getDocuments().size() == 0) { _close(); }", "+    if (_regionManager.getDocuments().size() == 0) { ", "+      _close();", "+      return;", "+    }", "-    _regTree.setSelectionRow(row);", "+//    _regTree.setSelectionRow(row);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cb3d07ca9e17f7d83a89b503748d161", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "611afcaf59528294d37f92105e692c81ac320af5", "commitAfterChange": "8714a43a313a1a0d2ca9cc83816dab7a08ff011b", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public synchronized int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public synchronized int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "diff": ["+    int reducedPos = pos;", "-          _reduced.move(i - pos);", "+          _reduced.move(i - reducedPos);", "+          reducedPos = i;", "+          ", "-          _reduced.move(pos - i);", "+          //_reduced.move(pos - i);", "-    _reduced.move(origLocation - pos);", "+    _reduced.move(origLocation - reducedPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6364779711d9d11a2628e3d2ee849580", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "a0233fef3427e8ddd7241be47fe79cd3cd5d54bc", "commitAfterChange": "bdbf83f4446e0652c53f385c6b6636ed4fa2affd", "methodNumberBeforeChange": 548, "methodNumberAfterChange": 548, "signatureBeforeChange": "   private ClassType lookupClass(Type t, Lambda<? super Boolean, ? extends Predicate<? super DJClass>> makePred,                                 Iterable<? extends Type> typeArgs, String name)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "   private ClassType lookupClass(Type t, Lambda<? super Boolean, ? extends Predicate<? super DJClass>> makePred,                                 Iterable<? extends Type> typeArgs, String name)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-    if (IterUtil.isEmpty(results)) { throw new UnmatchedLookupException(); }", "-    else if (IterUtil.sizeOf(results) > 1) { throw new UnmatchedLookupException(); }", "+    int matches = IterUtil.sizeOf(results);", "+    if (matches != 1) { throw new UnmatchedLookupException(matches); }"]}], "num": 19804}
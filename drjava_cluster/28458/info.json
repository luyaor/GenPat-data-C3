{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c60dbcd9e226c453483a25b774384e9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adaf60e329fef57f94038de902c13459", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "1a21d93c6026fc975d9f1a1bda2fbd55942a0154", "commitAfterChange": "7cbabe0b7b5f77b58eac69afdca15c16ef2f6a9b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<String,String,Boolean>() {", "+                                                                new Lambda2<String,String,Boolean>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                        new edu.rice.cs.util.Lambda<Double,String>() {", "-      public Double apply(String s) { return ((double)s.length()); }", "+                                                        new Lambda<String,Double>() {", "+      public Double value(String s) { return ((double)s.length()); }", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<String,String,Double>() {", "+                                                               new Lambda2<String,String,Double>() {", "-                                                                             new edu.rice.cs.plt.lambda.Lambda4<String,Double,Double,String,String>() {", "+                                                                             new Lambda4<String,Double,Double,String,String>() {", "-                                                                      new edu.rice.cs.plt.lambda.Lambda3<String,String,String,String>() {", "+                                                                      new Lambda3<String,String,String,String>() {", "-      public void setAttributes(HashMap<String,String> attrs, edu.rice.cs.util.Lambda<String,String> replaceLambda) {", "-        String value;", "+      public void setAttributes(HashMap<String,String> attrs, Lambda<String,String> replaceLambda) {", "+        String val;", "-          value = attrs.get(key);", "+          val = attrs.get(key);", "-            setAttribute(key, value);", "+            setAttribute(key, val);", "-            setAttribute(key, replaceLambda.apply(value));", "+            setAttribute(key, replaceLambda.value(val));", "-      public void setAttributes(HashMap<String,String> attrs, edu.rice.cs.util.Lambda<String,String> replaceLambda) {", "+      public void setAttributes(HashMap<String,String> attrs, Lambda<String,String> replaceLambda) {", "-            setAttribute(key, replaceLambda.apply(value));", "+            setAttribute(key, replaceLambda.value(value));", "-    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"drjava.file\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"drjava.file\", new Thunk<File>() {", "+      public File value() {", "-    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"java.file\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"java.file\", new Thunk<File>() {", "+      public File value() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2215db2f8ddc976c7b628ba74e97f78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "527b327a81252940ede7723bc28a80b1911fdddb", "commitAfterChange": "60cd84614ab1a6d35590df8d34b30b47cae7364d", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 136, "signatureBeforeChange": "   void initCompleteWordDialog()", "signatureAfterChange": "   void initCompleteWordDialog()", "diff": ["+      // checkbox whether Java API classes should be completed as well", "+      _completeJavaAPICheckbox.addActionListener(new ActionListener() {", "+        public void actionPerformed(ActionEvent e) {", "+          GoToFileListEntry curItem = _completeWordDialog.getItem();", "+          if (_completeJavaAPICheckbox.isSelected()) {", "+            // selected, add Java API classes to list", "+            generateJavaAPIList();", "+            if (_javaAPIList==null) {", "+              _completeJavaAPICheckbox.setSelected(false);", "+              _completeJavaAPICheckbox.setEnabled(false);", "+            }", "+            else {", "+              List<GoToFileListEntry> l = _completeWordDialog.getList();", "+              for(JavaAPIListEntry entry: _javaAPIList) {", "+                String fn = entry.getFullString();", "+                int pos = fn.lastIndexOf('.');", "+                String pn = \"\";", "+                if (pos>=0) {", "+                  pn = fn.substring(0,pos+1);", "+                  fn = fn.substring(pos+1);", "+                }", "+                l.add(new NoDocumentFileListEntry(pn,fn));", "+              }", "+              _completeWordDialog.setItems(true,l);", "+            }", "+          }", "+          else {", "+            // unselected, remove Java API classes from list", "+            List<GoToFileListEntry> l = _completeWordDialog.getList();", "+            List<GoToFileListEntry> n = new ArrayList<GoToFileListEntry>();", "+            for(GoToFileListEntry entry: l) {", "+              if (!(entry instanceof NoDocumentFileListEntry)) { n.add(entry); }", "+            }", "+            _completeWordDialog.setItems(true,n);", "+          }", "+          if (curItem!=null) {", "+            _completeWordDialog.setCurrentItem(curItem);", "+          }", "+          _completeWordDialog.resetFocus();", "+        }", "+      });", "+      _completeJavaAPICheckbox.setMnemonic('j');", "+      PredictiveInputFrame.InfoSupplier<JavaAPIListEntry> info = ", "+        new PredictiveInputFrame.InfoSupplier<JavaAPIListEntry>() {", "+        public String apply(JavaAPIListEntry entry) {", "+          // show full class name as information", "+          return entry.getFullString();", "+        }", "+      };", "+        public String getName() { return \"OK\"; }", "+        public KeyStroke getKeyStroke() { return KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0); }", "+      PredictiveInputFrame.CloseAction<GoToFileListEntry> fullAction = new PredictiveInputFrame.CloseAction<GoToFileListEntry>() {", "+        public String getName() { return \"Fully Qualified\"; }", "+        public KeyStroke getKeyStroke() { return KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0); }", "+        public Object apply(PredictiveInputFrame<GoToFileListEntry> p) {", "+          if (p.getItem() != null) {", "+            OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "+            try {", "+              String mask = \"\";", "+              int loc = getCurrentDefPane().getCaretPosition();", "+              String s = odd.getText(0, loc);", "+              ", "+              // check that we're at the end of a word", "+              if ((loc<s.length()) && (!Character.isWhitespace(s.charAt(loc))) &&", "+                  (\"()[]{}<>.,:;/*+-!~&|%\".indexOf(s.charAt(loc)) == -1)) return null;", "+              ", "+              // find start", "+              int start = loc;", "+              while(start>0) {", "+                if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "+                --start;", "+              }", "+              while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start < loc)) {", "+                ++start;", "+              }", "+              ", "+              if (!s.substring(start, loc).equals(p.getItem().toString())) {", "+                odd.remove(start, loc-start);", "+                StringBuilder sb = new StringBuilder();", "+                sb.append(p.getItem().getFullPackage());", "+                sb.append(p.getItem().toString());", "+                odd.insertString(start, sb.toString(), null);", "+              }", "+            }", "+            catch(BadLocationException ble) { /* ignore, just don't auto-complete */ }", "+            finally { odd.releaseWriteLock(); }", "+          }", "+          hourglassOff();", "+          return null;", "+        }", "+      };", "+        public String getName() { return \"Cancel\"; }", "+        public KeyStroke getKeyStroke() { return KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0); }", "+      List<PredictiveInputFrame.CloseAction<GoToFileListEntry>> actions", "+        = new ArrayList<PredictiveInputFrame.CloseAction<GoToFileListEntry>>();", "+      actions.add(okAction);", "+      actions.add(fullAction);", "+      actions.add(cancelAction);", "-                                                    okAction,", "-                                                    cancelAction,", "+                                                    actions,", "+        }", "+        protected JComponent[] makeOptions() {", "+          return new JComponent[] { _completeJavaAPICheckbox };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e34c6dc3fbc7d95f37c168305fb18d64", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 106, "signatureBeforeChange": "   final public Expression literal() throws ParseException", "signatureAfterChange": "   final public Expression literal() throws ParseException", "diff": ["-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case INTEGER_LITERAL:", "-      t = jj_consume_token(INTEGER_LITERAL);", "-      {if (true) return new IntegerLiteral(t.image,", "-                                filename,", "-                                t.beginLine, t.beginColumn,", "-                                t.endLine,   t.endColumn);}", "-      break;", "-    case LONG_LITERAL:", "-      t = jj_consume_token(LONG_LITERAL);", "-      {if (true) return new LongLiteral(t.image,", "-                             filename,", "-                             t.beginLine, t.beginColumn,", "-                             t.endLine,   t.endColumn);}", "-      break;", "-    case FLOAT_LITERAL:", "-      t = jj_consume_token(FLOAT_LITERAL);", "-      {if (true) return new FloatLiteral(t.image,", "-                              filename,", "-                              t.beginLine, t.beginColumn,", "-                              t.endLine,   t.endColumn);}", "-      break;", "-    case DOUBLE_LITERAL:", "-      t = jj_consume_token(DOUBLE_LITERAL);", "-      {if (true) return new DoubleLiteral(t.image,", "-                               filename,", "-                               t.beginLine, t.beginColumn,", "-                               t.endLine,   t.endColumn);}", "-      break;", "-    case CHARACTER_LITERAL:", "-      t = jj_consume_token(CHARACTER_LITERAL);", "-      {if (true) return new CharacterLiteral(t.image,", "+    try {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case INTEGER_LITERAL:", "+        t = jj_consume_token(INTEGER_LITERAL);", "+        {if (true) return new IntegerLiteral(t.image,", "-      break;", "-    case STRING_LITERAL:", "-      t = jj_consume_token(STRING_LITERAL);", "-      {if (true) return new StringLiteral(t.image,", "+        break;", "+      case LONG_LITERAL:", "+        t = jj_consume_token(LONG_LITERAL);", "+        {if (true) return new LongLiteral(t.image,", "-      break;", "-    case TRUE:", "-      t = jj_consume_token(TRUE);", "-      {if (true) return new BooleanLiteral(true,", "+        break;", "+      case FLOAT_LITERAL:", "+        t = jj_consume_token(FLOAT_LITERAL);", "+        {if (true) return new FloatLiteral(t.image,", "-      break;", "-    case FALSE:", "-      t = jj_consume_token(FALSE);", "-      {if (true) return new BooleanLiteral(false,", "-                                filename,", "-                                t.beginLine, t.beginColumn,", "-                                t.endLine,   t.endColumn);}", "-      break;", "-    case NULL:", "-      t = jj_consume_token(NULL);", "-      {if (true) return new NullLiteral(filename,", "-                             t.beginLine, t.beginColumn,", "-                             t.endLine,   t.endColumn);}", "-      break;", "-    default:", "-      jj_la1[109] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "+        break;", "+      case DOUBLE_LITERAL:", "+        t = jj_consume_token(DOUBLE_LITERAL);", "+        {if (true) return new DoubleLiteral(t.image,", "+                                 filename,", "+                                 t.beginLine, t.beginColumn,", "+                                 t.endLine,   t.endColumn);}", "+        break;", "+      case CHARACTER_LITERAL:", "+        t = jj_consume_token(CHARACTER_LITERAL);", "+        {if (true) return new CharacterLiteral(t.image,", "+                                    filename,", "+                                    t.beginLine, t.beginColumn,", "+                                    t.endLine,   t.endColumn);}", "+        break;", "+      case STRING_LITERAL:", "+        t = jj_consume_token(STRING_LITERAL);", "+        {if (true) return new StringLiteral(t.image,", "+                                 filename,", "+                                 t.beginLine, t.beginColumn,", "+                                 t.endLine,   t.endColumn);}", "+        break;", "+      case TRUE:", "+        t = jj_consume_token(TRUE);", "+        {if (true) return new BooleanLiteral(true,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  t.endLine,   t.endColumn);}", "+        break;", "+      case FALSE:", "+        t = jj_consume_token(FALSE);", "+        {if (true) return new BooleanLiteral(false,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  t.endLine,   t.endColumn);}", "+        break;", "+      case NULL:", "+        t = jj_consume_token(NULL);", "+        {if (true) return new NullLiteral(filename,", "+                               t.beginLine, t.beginColumn,", "+                               t.endLine,   t.endColumn);}", "+        break;", "+      default:", "+        jj_la1[110] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"This is an illegal literal!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb61bc317126a795d7c100226a30aa88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fee21edb1b15f1499b5409a250cdb90d3f204739", "commitAfterChange": "e100da4da75b9cbdfc04df45bf52679ed811f23a", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 275, "signatureBeforeChange": "   public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.line\", ", "+                                                              \"Returns the current line in the Definitions Pane.\") {", "+      public void update() {", "+        _value = String.valueOf(_posListener.lastLine());", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.col\", ", "+                                                              \"Returns the current column in the Definitions Pane.\") {", "+      public void update() {", "+//        int line = _currentDefPane.getCurrentLine();", "+//        int lineOffset = _currentDefPane.getLineStartOffset(line);", "+//        int caretPos = _currentDefPane.getCaretPosition();", "+        _value = String.valueOf(_posListener.lastCol());", "+      }", "+    });", "+    ", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.save.all\", \"(Save All...)\",", "+                                                                     \"Execute a \\\"Save All\\\" action.\") {", "+      public void update() {", "+        _saveAll();", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.compile.all\", \"(Compile All...)\",", "+                                                                     \"Execute a \\\"Compile All\\\" action.\") {", "+      public void update() {", "+        _compileAll();", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.clean\", \"(Clean Build Directory...)\",", "+                                                                     \"Execute a \\\"Clean Build Directory\\\" action.\") {", "+      public void update() {", "+        // could not use _clean(), since ProjectFileGroupingState.cleanBuildDirectory()", "+        // is implemented as an asynchronous task, and DrJava would not wait for its completion", "+        edu.rice.cs.plt.io.IOUtil.deleteRecursively(_model.getBuildDirectory());", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.open.file\", \"(Open File...)\",", "+                                                                     \"Execute an \\\"Open File\\\" action.\\n\"+", "+                                                                     \"Required attributes:\\n\"+", "+                                                                     \"\\tfile=\\\"<file to open>\\\"\\n\"+", "+                                                                     \"Optional attributes:\\n\"+", "+                                                                     \"\\tline=\\\"<line number to display>\") {", "+      public void update() {", "+        if (_attributes.get(\"file\")!=null) {", "+          final String dir = StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(DEF_DIR,", "+                                                                                          PropertyMaps.ONLY,", "+                                                                                          PropertyMaps.GET_CURRENT));", "+          final String fil = StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(_attributes.get(\"file\"),", "+                                                                                          PropertyMaps.ONLY,", "+                                                                                          PropertyMaps.GET_CURRENT));", "+          FileOpenSelector fs = new FileOpenSelector() {", "+            public File[] getFiles() {", "+              if (fil.startsWith(\"/\")) { return new File[] { new File(fil) }; }", "+              else { return new File[] { new File(dir, fil) }; }", "+            }", "+          };", "+          open(fs);", "+          int lineNo = -1;", "+          if (_attributes.get(\"line\")!=null) {", "+            try {", "+              lineNo = new Integer(_attributes.get(\"line\"));", "+            }", "+            catch(NumberFormatException nfe) {", "+              lineNo = -1;", "+            }", "+          }", "+          if (lineNo>=0) {", "+            final int l = lineNo;", "+            edu.rice.cs.util.swing.Utilities.invokeLater(new Runnable() { ", "+              public void run() { _jumpToLine(l); }", "+            });", "+          }", "+        }", "+      }", "+      /** Reset the attributes. */", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"file\", null);", "+        _attributes.put(\"line\", null);", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.auto.refresh\", \"(Auto-Refresh...)\",", "+                                                                     \"Execute an \\\"Auto-Refresh Project\\\" action.\") {", "+      public void update() {", "+        _model.autoRefreshProject();", "+      }", "+    });"]}], "num": 28458}
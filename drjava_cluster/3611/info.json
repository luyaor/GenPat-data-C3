{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc5cbade20f6369974c4817b0efb7550", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5b9bc3602f5aea0aa6bf0e131297244", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public Node visit(SimpleAllocation node)", "signatureAfterChange": "     public Object visit(SimpleAllocation node)", "diff": ["-    public Node visit(SimpleAllocation node) {", "+    public Object visit(SimpleAllocation node) {", "-      LinkedList<Expression> arguments = null; // Add parameterization <Expresion>.", "+      LinkedList arguments = null; // Add parameterization <Expresion>.", "-        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "-        Iterator<Expression> it = node.getArguments().iterator();", "+        arguments = new LinkedList(); // Add parameterization <Expression>.", "+        Iterator it = node.getArguments().iterator();", "-          arguments.add((Expression)it.next().acceptVisitor(this));", "+          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8561a1855e3943b9d5c945d4b8509dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "     public Node visit(InnerAllocation node)", "signatureAfterChange": "     public Object visit(InnerAllocation node)", "diff": ["-    public Node visit(InnerAllocation node) {", "+    public Object visit(InnerAllocation node) {", "-      LinkedList<Expression> arguments = null; // Add parameterization <Expression>.", "+      LinkedList arguments = null; // Add parameterization <Expression>.", "-        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "-        Iterator<Expression> it = node.getArguments().iterator();", "+        arguments = new LinkedList(); // Add parameterization <Expression>.", "+        Iterator it = node.getArguments().iterator();", "-          arguments.add((Expression)it.next().acceptVisitor(this));", "+          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));"]}], "num": 3611}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce61388e8bbed4f2ee5c98c1d24298ac", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5651a1fdadccd37f4963881bdbe5a787", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public void testOrEquals()", "signatureAfterChange": "   public void testOrEquals() throws ExceptionReturnedException", "diff": ["-  public void testOrEquals() {", "-    Node exp = _parseCode(\"x |= new Integer(2);\").get(0);", "+  public void testOrEquals() throws ExceptionReturnedException {", "+    // Tests or-equals with a primitive left-hand side", "+    String text = \"x |= new Integer(2);\";", "+    String expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: x)\";", "+    String expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+", "+    // Tests or-equals with a reference-type left-hand side", "+    text = \"X |= new Integer(2);\";", "+    expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: X)\";", "+    expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "+    ", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eec5ca58ea4de975d7f491aba0d1947e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void testXorEquals()", "signatureAfterChange": "   public void testXorEquals() throws ExceptionReturnedException", "diff": ["-  public void testXorEquals() {", "-    Node exp = _parseCode(\"x ^= new Integer(2);\").get(0);", "+  public void testXorEquals() throws ExceptionReturnedException {", "+    // Tests xor-equals with a primitive left-hand side", "+    String text = \"x ^= new Integer(2);\";", "+    String expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: x)\";", "+    String expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+", "+    // Tests xor-equals with a reference-type left-hand side", "+    text = \"X ^= new Integer(2);\";", "+    expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: X)\";", "+    expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "+    ", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}], "num": 16240}
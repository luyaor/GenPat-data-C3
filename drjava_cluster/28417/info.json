{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a488e59b8aba7f16b2b39bd873c9394", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f00c26b787f11c0864524305c1cf0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public abstract Pair<Expression, Expression> join(Expression e1, Expression e2)     throws UnsupportedConversionException;", "signatureAfterChange": "   public abstract Type join(Iterable<? extends Type> ts);", "diff": ["+  /** Compute a common supertype of the given list of types. */", "+  public abstract Type join(Iterable<? extends Type> ts);", "-  public abstract Pair<Expression, Expression> join(Expression e1, Expression e2)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "675a383d2970c2733e9721a1dad5c14a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public abstract Type join(Type t1, Type t2);", "signatureAfterChange": "   public abstract Type join(Iterable<? extends Type> ts);", "diff": ["-  /** Compute a common supertype of {@code t1} and {@code t2}. */", "-  public abstract Type join(Type t1, Type t2);", "+  /** Compute a common supertype of the given list of types. */", "+  public abstract Type join(Iterable<? extends Type> ts);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aa7d56931e903d50249e746c8a56bf6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TypeSystem.java", "commitBeforeChange": "4b21424812450d42c0dde2aef3c483c11b298e24", "commitAfterChange": "ede26ceaad5c407d940ac773a5e7f457dc1f5187", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public abstract boolean isCastable(Type target, Type expT);", "signatureAfterChange": "   public abstract boolean isDisjoint(Type t1, Type t2);", "diff": ["-  /** Determine if {@link #cast} would succeed given an expression of the given type */", "-  public abstract boolean isCastable(Type target, Type expT);", "+  /** Whether two types are known to be disjoint.  */", "+  public abstract boolean isDisjoint(Type t1, Type t2);"]}], "num": 28417}
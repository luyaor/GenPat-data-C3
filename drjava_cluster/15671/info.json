{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ec7299358b80744b305c15db3fea3ae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c557c41eca03be2404dbadb29443a4e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "e6ef9e23d624990cf9fd00ec857466a046415b6a", "commitAfterChange": "d4847683d7bd4063ee7f58ba5aee2d1ddf1d04be", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "signatureAfterChange": "   public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "diff": ["-    int i = pos;", "-    int endPos = getLength();", "+    int result = ERROR_INDEX;  // variable used to hold result to be returned", "-    // Get text from pos to end of document", "-    String text = getText(pos, endPos - pos);", "-    ", "-    final int origLocation = _currentLocation;", "-    // Move reduced model to location pos", "-    _reduced.move(pos - origLocation);", "-    int reducedPos = pos;", "-    ", "-    //int iter = 0;", "-    ", "-    // Walk forward from specificed position", "-    while (i < endPos) {", "+    readLock();", "+    try {", "-      // Check if character is whitespace", "-      if (match(text.charAt(i-pos), whitespace)) {", "-        i++;", "-        continue;", "+      int i = pos;", "+      int endPos = getLength();", "+      ", "+      // Get text from pos to end of document", "+      String text = getText(pos, endPos - pos);", "+", "+      final int origLocation = _currentLocation;", "+      // Move reduced model to location pos", "+      synchronized(_reduced) {", "+        _reduced.move(pos - origLocation);", "+        int reducedPos = pos;", "+        ", "+        //int iter = 0;", "+        ", "+        // Walk forward from specificed position", "+        while (i < endPos) {", "+          ", "+          // Check if character is whitespace", "+          if (match(text.charAt(i-pos), whitespace)) {", "+            i++;", "+            continue;", "+          }", "+          // Found a non whitespace character", "+          // Move reduced model to walker's location", "+          _reduced.move(i - reducedPos);  // reduced model points to location i", "+          reducedPos = i;                 // reduced mdoel points to location reducedPos", "+          ", "+          // Check if non-ws char is within comment and if we want to ignore them.", "+          if (! acceptComments &&", "+              ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+               (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)))) {", "+            i++;", "+            continue;", "+          }", "+          ", "+          // Check if non-ws char is part of comment opening market and if we want to ignore them", "+          if (! acceptComments && _isStartOfComment(text, i - pos)) {", "+            // ith char is first char in comment open market; skip past this marker", "+            // and continue searching", "+            i = i + 2;", "+            continue;", "+          }", "+      ", "+          // Return position of matching char", "+          break;", "+        }", "+        _reduced.move(origLocation - reducedPos);", "+        ", "+        result = reducedPos;", "+        if (i == endPos) result = ERROR_INDEX;", "-      // Found a non whitespace character", "-      // Move reduced model to walker's location", "-      _reduced.move(i - reducedPos);  // reduced model points to location i", "-      reducedPos = i;                 // reduced mdoel points to location reducedPos", "-      ", "-      // Check if non-ws char is within comment and if we want to ignore them.", "-      if (! acceptComments &&", "-          ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-           (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)))) {", "-        i++;", "-        continue;", "-      }", "-      ", "-      // Check if non-ws char is part of comment opening market and if we want to ignore them", "-      if (! acceptComments && _isStartOfComment(text, i - pos)) {", "-        // ith char is first char in comment open market; skip past this marker", "-        // and continue searching", "-        i = i + 2;", "-        continue;", "-      }", "-      ", "-      // Return position of matching char", "-      break;", "-    _reduced.move(origLocation - reducedPos);", "-    ", "-    int result = reducedPos;", "-    if (i == endPos) result = ERROR_INDEX;", "+    finally { readUnlock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eba987f026caa7b2e0f0bd9b6e91866f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public synchronized int getFirstNonWSCharPos     (int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "signatureAfterChange": "   public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments)      throws BadLocationException", "diff": ["-  public synchronized int getFirstNonWSCharPos", "-    (int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "-  {", "-    throwErrorHuh();", "+  public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments) ", "+    throws BadLocationException {", "+    // throwErrorHuh();", "-    for (int i=0; i < whitespace.length; i++) {", "-      key += \":\" + whitespace[i];", "-    }", "+    for (int i = 0; i < whitespace.length; i++) { key += \":\" + whitespace[i]; }", "-    if (cached != null) {", "-      return cached.intValue();", "-    }", "+    if (cached != null)  return cached.intValue();", "-    int j, i;", "-    char c;", "+    int i = pos;", "-    for (i = pos; i != endPos; i++) {", "-      //iter++;", "-      boolean isWhitespace = false;", "-      c = text.charAt(i - pos);", "+    while (i < endPos) {", "+      ", "-      for (j = 0; j < whitespace.length && !isWhitespace; j++) {", "-        if (c == whitespace[j]) {", "-          isWhitespace = true;", "-        }", "+      if (match(text.charAt(i-pos), whitespace)) {", "+        i++;", "+        continue;", "-      if (!isWhitespace) {", "-        // Move reduced model to walker's location", "-        _reduced.move(i - reducedPos);", "-        reducedPos = i;", "-        ", "-        // Check if non-ws char is in comment, and we want to ignore them.", "-        if (!acceptComments &&", "-            ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-             (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))))", "-        {", "-          // Ignore non-ws char", "-          ", "-          // Move to next token?  (requires making getBlockOffset public)", "-          //  doesn't work yet", "-          //          int tokenSize = _reduced.currentToken().getSize();", "-          //          int offset = _reduced.getBlockOffset();", "-          //          //DrJava.consoleOut().println(\"     token len: \" + tokenSize +", "-          //          //                            \", offset: \" + offset);", "-          //          //DrJava.consoleOut().println(\"     token before: \" + _reduced.currentToken().getState());", "-          //          _reduced.move(tokenSize - offset);", "-          //          i += tokenSize - offset;", "-          //          //DrJava.consoleOut().println(\"     token after: \" + _reduced.currentToken().getState());", "-          ", "-        }", "-        else {", "-          if(!acceptComments && _isStartOfComment(text, i - pos)) {", "-            // Move i past the start of comment characters", "-            // and continue searching", "-            i = i + 1;", "-            _reduced.move(1);", "-            reducedPos = i;", "-          }", "-          else {", "-            // Return position of matching char", "-            _reduced.move(origLocation - i);", "-            _storeInCache(key, new Integer(i));", "-            return i;", "-          }", "-        }", "+      // Found a non whitespace character", "+      // Move reduced model to walker's location", "+      _reduced.move(i - reducedPos);  // reduced model points to location i", "+      reducedPos = i;                 // reduced mdoel points to location reducedPos", "+      ", "+      // Check if non-ws char is within comment and if we want to ignore them.", "+      if (!acceptComments &&", "+          ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+           (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)))) {", "+        i++;", "+        continue;", "+      ", "+      // Check if non-ws char is part of comment opening market and if we want to ignore them", "+      if (!acceptComments && _isStartOfComment(text, i - pos)) {", "+        // ith char is first char in comment open market; skip past this marker", "+        // and continue searching", "+        i = i + 2;", "+        continue;", "+      }", "+      ", "+      // Return position of matching char", "+      break;", "-    //DrJava.consoleOut().println(\"getFirstNonWS iterations: \" + iter);", "-    ", "-    _storeInCache(key, new Integer(ERROR_INDEX));", "-    return ERROR_INDEX;", "+    ", "+    int result = reducedPos;", "+    if (i == endPos) result = ERROR_INDEX;", "+    ", "+    _storeInCache(key, new Integer(result));", "+    return result;"]}], "num": 15671}
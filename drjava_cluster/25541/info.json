{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "052bdf00b5bc56417fb5bb22cfbe0b18", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46a6b1e0b3a64f5565e6b6488f995577", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "commitAfterChange": "608d05e2a10d21cbc190b09334cd60b3c39fbc37", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": "   public String userRepresentation(Type t)", "signatureAfterChange": "      public String userRepresentation(Type t)", "diff": ["-   */", "-  public String userRepresentation(Type t) {", "+  public String userRepresentation(Type t) { return userRepresentation(IterUtil.singleton(t)) ;}", "-    dumpType.run(t);", "-      result.append(\" (\");", "-      result.append(\")\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ea2459acba2d023ec7fe6a6feaec74a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "b4cb953a15f76465c4fdfdd0a3efe47737f78efc", "commitAfterChange": "da8b20243b85298aada190df10fa721e07aae787", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": "      public String userRepresentation(Iterable<? extends Type> ts)", "signatureAfterChange": "      public String userRepresentation(Iterable<? extends Type> ts)", "diff": ["-    final StringBuilder result = new StringBuilder();", "+    TypeWriter w = new TypeWriter();", "+    w.runOnList(ts);", "+    w.appendConstraints();", "+    return w.result();", "+  }", "-    class VariableHandler {", "-      public void dumpBounds(Runnable1<Type> dumpType) {", "-            if (printedFirst) { result.append(\"; \"); }", "-            result.append(_names.get(v));", "-            result.append(\" <: \");", "-            dumpType.run(upper); // may increase the size of _vars", "-            if (printUpper) { result.append(\", \"); }", "-            result.append(_names.get(v));", "-            result.append(\" :> \");", "-            dumpType.run(lower); // may increase the size of _vars", "-    ", "-    final VariableHandler variableHandler = new VariableHandler();", "-    ", "-    class DumpType implements TypeVisitor_void, Runnable1<Type> {", "-      ", "-      final RecursionStack<Type> _stack = new RecursionStack<Type>();", "-      ", "-      /**", "-       * Running is preferred over applying the visitor, as invoking this will put the", "-       * value being processed on the stack, and avoid unnecessary repetition", "-       */", "-      public void run(final Type t) {", "-//        String prefix = \"\"; for (int i = 0; i < _stack.size(); i++) { prefix += \"  \"; }", "-//        System.out.println(prefix + \"Running on id \" + System.identityHashCode(t) + \": \" + t);", "-        Runnable recur = new Runnable() { public void run() { t.apply(DumpType.this); } };", "-        Runnable dontRecur = new Runnable() { public void run() { result.append(\"...\"); } };", "-        //Threshold of 2 causes the loop to be printed twice", "-        _stack.run(recur, dontRecur, t/*, 2*/); ", "-      }", "-      ", "-      public void forBooleanType(BooleanType t) { result.append(\"boolean\"); }", "-      public void forCharType(CharType t) { result.append(\"char\"); }", "-      public void forByteType(ByteType t) { result.append(\"byte\"); }", "-      public void forShortType(ShortType t) { result.append(\"short\"); }", "-      public void forIntType(IntType t) { result.append(\"int\"); }", "-      public void forLongType(LongType t) { result.append(\"long\"); }", "-      public void forFloatType(FloatType t) { result.append(\"float\"); }", "-      public void forDoubleType(DoubleType t) { result.append(\"double\"); }", "-      public void forNullType(NullType t) { result.append(\"(null)\"); }", "-      public void forVoidType(VoidType t) { result.append(\"void\"); }", "-      public void forTopType(TopType t) { result.append(\"(top)\"); }", "-      public void forBottomType(BottomType t) { result.append(\"(bottom)\"); }", "-      ", "-      public void forSimpleArrayType(SimpleArrayType t) {", "-        run(t.ofType());", "-        result.append(\"[]\");", "-      }", "-      ", "-      public void forVarargArrayType(VarargArrayType t) {", "-        run(t.ofType());", "-        result.append(\"[]\");", "-      }", "-      ", "-      public void forSimpleClassType(SimpleClassType t) {", "-        result.append(SymbolUtil.shortName(t.ofClass()));", "-      }", "-      ", "-      public void forRawClassType(RawClassType t) {", "-        result.append(\"raw \");", "-        result.append(SymbolUtil.shortName(t.ofClass()));", "-      }", "-      ", "-      public void forParameterizedClassType(ParameterizedClassType t) {", "-        Iterator<DJClass> classes = SymbolUtil.outerClassChain(t.ofClass()).iterator();", "-        Iterator<? extends Type> targs = t.typeArguments().iterator();", "-        DJClass c = classes.next();", "-        result.append(SymbolUtil.shortName(c));", "-        DJClass inner;", "-        while (c != null) {", "-          inner = classes.hasNext() ? classes.next() : null; // next in the chain, or null if c is last", "-          if (inner == null || !inner.isStatic()) {", "-            Iterable<VariableType> params = c.declaredTypeParameters();", "-            if (!IterUtil.isEmpty(params)) {", "-              result.append(\"<\");", "-              boolean firstParam = true;", "-              for (VariableType param : params) { // param is ignored -- it's just a counter", "-                if (!firstParam) { result.append(\", \"); }", "-                firstParam = false;", "-                run(targs.next());", "-              }", "-              result.append(\">\");", "-            }", "-          }", "-          if (inner != null) { result.append(\".\"); result.append(c.declaredName()); }", "-          c = inner;", "-        }", "-      }", "-      ", "-      public void forVariableType(VariableType t) {", "-        String name = variableHandler.registerVariable(t);", "-        result.append(name);", "-      }", "-      ", "-      public void forIntersectionType(IntersectionType t) {", "-        int size = IterUtil.sizeOf(t.ofTypes());", "-        if (size == 0) { result.append(\"(empty intersect)\"); }", "-        else if (size == 1) {", "-          result.append(\"(intersect \");", "-          run(IterUtil.first(t.ofTypes()));", "-          result.append(\")\");", "-        }", "-        else {", "-          boolean first = true;", "-          for (Type componentT : t.ofTypes()) {", "-            if (first) { first = false; }", "-            else { result.append(\" & \"); }", "-            run(componentT);", "-          }", "-        }", "-      }", "-      ", "-      public void forUnionType(UnionType t) {", "-        int size = IterUtil.sizeOf(t.ofTypes());", "-        if (size == 0) { result.append(\"(empty union)\"); }", "-        else if (size == 1) {", "-          result.append(\"(union \");", "-          run(IterUtil.first(t.ofTypes()));", "-          result.append(\")\");", "-        }", "-        else {", "-          boolean first = true;", "-          for (Type componentT : t.ofTypes()) {", "-            if (first) { first = false; }", "-            else { result.append(\" | \"); }", "-            run(componentT);", "-          }", "-        }", "-      }", "-      ", "-      public void forWildcard(Wildcard t) {", "-        result.append(\"?\");", "-        if (!isEqual(t.symbol().upperBound(), OBJECT)) {", "-          result.append(\" extends \");", "-          run(t.symbol().upperBound());", "-        }", "-        if (!isEqual(t.symbol().lowerBound(), NULL)) {", "-          result.append(\" super \");", "-          run(t.symbol().lowerBound());", "-        }", "-      }", "-      ", "-    };", "-    ", "-    Runnable1<Type> dumpType = new DumpType();", "-    boolean first = true;", "-    for (Type t : ts) {", "-      if (first) { first = false; }", "-      else { result.append(\", \"); }", "-      dumpType.run(t);", "-    }", "-    if (!variableHandler.isEmpty()) {", "-      result.append(\" [\");", "-      variableHandler.dumpBounds(dumpType);", "-      result.append(\"]\");", "-    }", "-    return result.toString();"]}], "num": 25541}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ed6bc4088bf28697cc1804a71fa3dfe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f138194fa2af0de6921981f1ef5e83", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public static <T> ComposedIterable<T> compose(T first, Iterable<? extends T> rest)", "signatureAfterChange": "   public static <T> ComposedIterable<T> compose(T first, Iterable<? extends T> rest)", "diff": ["+  /** Create a {@link ComposedIterable} with the given arguments */", "+  public static <T> ComposedIterable<T> compose(T first, Iterable<? extends T> rest) {", "+    return new ComposedIterable<T>(first, rest);", "+  }", "-  /** Create a {@link ComposedIterable} with the given arguments */", "-  public static <T> ComposedIterable<T> compose(T first, Iterable<? extends T> rest) {", "-    return ComposedIterable.make(first, rest);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ab902aad2343a2267160dbaf9996dd4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 162, "signatureBeforeChange": "   public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source,                                                  Lambda<? super S, ? extends T> map)", "signatureAfterChange": "   public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source, Lambda<? super S, ? extends T> map)", "diff": ["+  /** Create a {@code MappedIterable} with the given arguments */", "+  public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source, Lambda<? super S, ? extends T> map) {", "+    return new MappedIterable<S, T>(source, map);", "+  }", "-  /** Create a {@link MappedIterable} with the given arguments */", "-  public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source, ", "-                                                Lambda<? super S, ? extends T> map) {", "-    return MappedIterable.make(source, map);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1c1aa69ee7497e64b5f44ee4fa0bef9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public static <T> ComposedIterable<T> compose(Iterable<? extends T> i1, Iterable<? extends T> i2)", "signatureAfterChange": "   public static <T> ComposedIterable<T> compose(Iterable<? extends T> i1, Iterable<? extends T> i2)", "diff": ["+  /** Create a {@link ComposedIterable} with the given arguments */", "+  public static <T> ComposedIterable<T> compose(Iterable<? extends T> i1, Iterable<? extends T> i2) {", "+    return new ComposedIterable<T>(i1, i2);", "+  }", "-  /** Create a {@link ComposedIterable} with the given arguments */", "-  public static <T> ComposedIterable<T> compose(Iterable<? extends T> i1, Iterable<? extends T> i2) {", "-    return ComposedIterable.make(i1, i2);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff99149e635298aa5dc82d3ac33595be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public static <T> ComposedIterable<T> compose(Iterable<? extends T> rest, T last)", "signatureAfterChange": "   public static <T> ComposedIterable<T> compose(Iterable<? extends T> rest, T last)", "diff": ["+  /** Create a {@link ComposedIterable} with the given arguments */", "+  public static <T> ComposedIterable<T> compose(Iterable<? extends T> rest, T last) {", "+    return new ComposedIterable<T>(rest, last);", "+  }", "-  /** Create a {@link ComposedIterable} with the given arguments */", "-  public static <T> ComposedIterable<T> compose(Iterable<? extends T> rest, T last) {", "-    return ComposedIterable.make(rest, last);", "-  }"]}], "num": 25890}
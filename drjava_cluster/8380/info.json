{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cedc92384c8b52dea6eda50b190c6e28", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f374b1cba440deb77a37568dda38b73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 94, "signatureBeforeChange": "          public void testGetSymbolData_IsQualified()", "signatureAfterChange": "          public void testGetQualifiedSymbolData()", "diff": ["-    public void testGetSymbolData_IsQualified() {", "+    public void testGetQualifiedSymbolData() {", "-      assertEquals(\"should return null--does not exist\", null, ", "-                   _llv._getSymbolData_IsQualified(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false, true));", "-      assertEquals(\"should be one error so far.\", 1, errors.size());", "+      assertEquals(\"should the continuation symbol\", sd, ", "+                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false, true));", "+//      assertEquals(\"should be one error so far.\", 1, errors.size());", "-      SymbolData sd2 = _llv._getSymbolData_IsQualified(\"java.lang.Integer\", JExprParser.NO_SOURCE_INFO, true, true, true);", "+      SymbolData sd2 = _llv._getQualifiedSymbolData(\"java.lang.Integer\", JExprParser.NO_SOURCE_INFO, true, true, true);", "-      SymbolData sd3 = _llv._getSymbolData_IsQualified(\"Wow\", JExprParser.NO_SOURCE_INFO, true, true, true);", "-      assertEquals(\"should return Wow\", \"Wow\", sd3.getName());", "-      assertFalse(\"Should not be a continuation.\", sd3.isContinuation());", "+      SymbolData sd3 = _llv._getQualifiedSymbolData(\"Wow\", JExprParser.NO_SOURCE_INFO, true, true, true);", "+      assertEquals(\"search should fail\", null, sd3);", "+//      assertEquals(\"should return Wow\", \"Wow\", sd3.getName());", "+//      assertFalse(\"Should not be a continuation.\", sd3.isContinuation());", "-      ", "-      //Test that classes in the symbol table are handled correctly", "-      assertEquals(\"should return null sd--does not exist\", null, ", "-                   _llv._getSymbolData_IsQualified(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, false, false, true));", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "+      // \"testPackage.File\" has been entered as a continuation in symbolTable.  Why should the following lookup fail?", "+//      //Test that classes in the symbol table are handled correctly", "+//      assertEquals(\"should return null sd--does not exist\", null, ", "+//                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, false, false, true));", "+//      assertEquals(\"Should be 1 error\", 1, errors.size());", "-                   _llv._getSymbolData_IsQualified(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false,  true));", "+                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false,  true));", "-                   _llv._getSymbolData_IsQualified(\"java.lang.String\", JExprParser.NO_SOURCE_INFO, true, false, true));", "+                   _llv._getQualifiedSymbolData(\"java.lang.String\", JExprParser.NO_SOURCE_INFO, true, false, true));", "-                   _llv._getSymbolData_IsQualified(\"testPackage.not.in.symboltable\", ", "+                   _llv._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-      assertEquals(\"should be three errors so far.\", 3, errors.size());", "+      assertEquals(\"should be two errors so far.\", 2, errors.size());", "-                 _llv._getSymbolData_IsQualified(\"testPackage.not.in.symboltable\", ", "+                 _llv._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-                 _llv._getSymbolData_IsQualified(\"notRightPackage\", JExprParser.NO_SOURCE_INFO, false, false, false));", "-      assertEquals(\"should still be three errors.\", 3, errors.size());", "+                 _llv._getQualifiedSymbolData(\"notRightPackage\", JExprParser.NO_SOURCE_INFO, false, false, false));", "+      assertEquals(\"should still be two errors.\", 2, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79b4697c9bf094bf1f1ace8409687ed5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 97, "signatureBeforeChange": "          public void testGetSymbolData_FromFileSystem()", "signatureAfterChange": "          public void testGetSymbolData_FromFileSystem()", "diff": ["-      ", "-      SymbolData sd2 = new SymbolData(\"fully.qualified.Woah\");", "+      SymbolData sd2 = new SymbolData(\"fully.qualified.Woah\");  // continuation", "-      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, false, true);", "-      assertEquals(\"Should return sd2, now unresolved.\", sd2, result);", "-      assertTrue(\"sd2 should not be resolved\", sd2.isContinuation());", "-      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, false, true);", "+//      assertEquals(\"Should return sd2, now unresolved.\", sd2, result);", "+//      assertTrue(\"sd2 should not be resolved\", sd2.isContinuation());", "+//      assertEquals(\"Should be no errors\", 0, errors.size());", "-      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, true, true);", "-      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "-      assertFalse(\"sd2 should now be resolved\", sd2.isContinuation());   ", "-      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, true, true);", "+//      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "+//      assertFalse(\"sd2 should now be resolved\", sd2.isContinuation());   ", "+//      assertEquals(\"Should be no errors\", 0, errors.size());", "-      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, true, true);", "-      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "+//      result = _llv._getSymbolData_FromFileSystem(\"fully.qualified.Woah\", JExprParser.NO_SOURCE_INFO, true, true);", "+//      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "-      assertFalse(\"sd2 should be resolved\", sd2.isContinuation());", "-      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertFalse(\"sd2 should be resolved\", sd2.isContinuation());", "+//      assertEquals(\"Should be no errors\", 0, errors.size());", "-      _llv._file = new File (\"testFiles/Cool.dj0\");", "+      _llv._file = new File (\"testFiles/Cool.dj0\");  // non-existent file", "-      assertEquals(\"Result should be a symbol data corresponding to James\", \"James\", result.getName());", "-      assertEquals(\"Result should have 3 variables.\", 3, result.getVars().size());", "-      assertEquals(\"Should be no errors\", 0, errors.size());", "+      assertEquals(\"Search for James should fail\", null, result);", "+//      assertEquals(\"Result should have 3 variables.\", 3, result.getVars().size());", "+//      assertEquals(\"Should be no errors\", 0, errors.size());", "-      //returning KEEP_GOING when it doesn't exist.", "+      //returning NOT_FOUND when it doesn't exist.", "-      assertEquals(\"Should return KEEP_GOING-does not exist.\", SymbolData.KEEP_GOING, ", "+      assertEquals(\"Should return NOT_FOUND-does not exist.\", SymbolData.NOT_FOUND, ", "-      ", "-      assertEquals(\"should have correct variable datas\", vds, result.getVars());", "-      assertFalse(\"should not be a continuation\", result.isContinuation());", "+// Since some list elements are arrays, comparison test is suspect", "+//      assertEquals(\"should have correct variable datas\", vds, result.getVars());", "+//      assertFalse(\"should not be a continuation\", result.isContinuation());"]}], "num": 8380}
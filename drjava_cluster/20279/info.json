{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3cfdc1989e75c25723573bdeeeccd32", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a166a7f411d027aa922c5dbc58bf3f94", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "65fb8db1fb3e7570ae4fa352a26deb0e151b48ac", "commitAfterChange": "d933be24919e2ab110f61a795910708e74f868c4", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   protected SymbolData defineSymbolData(final TypeDefBase typeDefBase, final String qualifiedTypeName,                                         final String enclosingClassName)", "signatureAfterChange": "   protected SymbolData defineSymbolData(final TypeDefBase typeDefBase, final String qualifiedTypeName,                                         final String enclosingClassName)", "diff": ["-    // Get or create SymbolDatas (continuations) for the interfaces", "+    // Get or create SymbolDatas for the interfaces", "-    for (final ReferenceType rt: rts) {", "-      SymbolData sD = _lookupTypeFromWithinClass(rt, enclosingClassName);", "-      if (sD != null && ! sD.isInterface()) {", "-        sD.setInterface(true);", "-//        System.err.println(\"Interface type = \" + sD);", "-//        assert false;", "+    for (int i = 0; i < rts.length; i++) {", "+      final ReferenceType rt = rts[i];", "+      final String rtName = rt.getName();", "+      boolean forwardRef = false;", "+      SymbolData iD = _lookupTypeFromWithinClass(rt, enclosingClassName);", "+      if (iD != null && ! iD.isContinuation() && ! iD.isInterface()) {", "+        _addError(\"The symbol \" + rtName + \" is not an interface\", typeDefBase);", "-      interfaces.add(sD);                     // Note: confirm that null can be added to an ArrayList", "-      if (sD == null) { ", "-        // create a fixup for this interface reference", "+      if (iD == null || iD.isContinuation())  { // create a dummy symbol pending fixUp TODO: is this necessary?", "+        iD = new SymbolData(rtName);", "+        forwardRef = true;", "+      }", "+      ", "+      interfaces.add(iD);                     ", "+      if (forwardRef) { ", "+        // create a fixup for this interface slot", "+        final int j = i;", "-            SymbolData newSD = _lookupTypeFromWithinClass(rt, enclosingClassName);", "-            assert newSD != null && newSD.isInterface();  // EXPAND", "-            int lastIndex = interfaces.size() - 1;", "-            interfaces.set(lastIndex, newSD);", "+            SymbolData newID = _lookupTypeFromWithinClass(rt, enclosingClassName);", "+            if (newID == null) _addError(\"The symbol \" + rtName + \" is not defined\", typeDefBase);", "+            else if (! newID.isInterface()) ", "+              _addError(\"The symbol \" + rtName + \" is not an interface\", typeDefBase);", "+            interfaces.set(j, newID);", "+            sd.addEnclosingData(newID);", "+      ", "+    // Set the inferfaces; fixups will be done on the elements of the interface ArrayList, but this does not", "+    // add the found interface to the enclosing data of sd.", "+    sd.setInterfaces(interfaces);", "-      superSD = getSymbolData(\"java.lang.Object\", typeDefBase.getSourceInfo(), false);", "+      SymbolData objectSD = getSymbolData(\"java.lang.Object\", typeDefBase.getSourceInfo(), false);", "-      sd.setSuperClass(superSD);", "+      sd.setSuperClass(objectSD);", "+      sd.setInterface(false);", "-      superSD = _lookupTypeFromWithinClass(rt, enclosingClassName);", "-//      if (superSD == null && rt.getName().equals(\"Object\"))  {", "-//        System.err.println(\"ALARM: _lookupTypeFromWithinClass for 'Object' returned null\");", "-//      }", "-      sd.setInterface(false);", "+      superSD = _lookupTypeFromWithinClass(rt, enclosingClassName);    ", "-//            System.err.println(\"***** In a FIXUP, looking up type \" + rt + \" from within \" + enclosingClassName);", "-//              newSuperSD = getSymbolData(\"java.lang.Object\", typeDefBase.getSourceInfo(), false);", "-              _addAndIgnoreError(\"The class \" + sd + \" has an undefined superclass \" + rt, typeDefBase);", "-            else", "+              _addError(\"The class \" + sd + \" has an undefined superclass \" + rt, typeDefBase);", "+            else  // TODO: Does not check that newSuperSD is not an interace  ", "-    ", "-    // Set the inferfaces; fixups will be done on the elements of the interface ArrayList", "-    sd.setInterfaces(interfaces);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae163a89b401e06004eed3f17a4ae49b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "   private void _updateWatches() throws DebugException", "signatureAfterChange": "   private void _updateWatches() throws DebugException", "diff": ["-      throw new IllegalStateException(\"Cannot update watches if there \" +", "-                                      \"are no suspended threads.\");", "+      // Not suspended, so all watches are blank", "+      for (int i = 0; i < _watches.size(); i++) {", "+        DebugWatchData currWatch = _watches.elementAt(i);", "+        currWatch.hideValueAndType();", "+      }", "+      return;", "+      // note: obj is null if we're in a static context", "+      ", "+      // Get the name to determine how many $'s there are", "+      String rtName = rt.name();", "+      int numDollars = 0;", "+      int dollarIndex = rtName.indexOf(\"$\", 0);", "+      while (dollarIndex != -1) {", "+        numDollars++;", "+        dollarIndex = rtName.indexOf(\"$\", dollarIndex+1);", "+      }", "-            currWatch.setType(obj.type());", "+            currWatch.setType(String.valueOf(obj.type()));", "-            currWatch.setValue(DebugWatchUndefinedValue.ONLY);", "-            currWatch.setType(null);", "+            // \"this\" is not defined in a static context", "+            currWatch.setNoValue();", "+            currWatch.setNoType();", "-        //List frames = null;", "+        ", "+        // Look for a variable with this name", "-        ", "-        ReferenceType outerRt = rt;", "-        ObjectReference outer = obj;", "-        // if the variable being watched is not a local variable, check if it's a field", "-        if (localVar == null) {", "+", "+        if (localVar != null) {", "+          currWatch.setValue(_getValue(currFrame.getValue(localVar)));", "+          try {", "+            currWatch.setType(String.valueOf(localVar.type()));", "+          }", "+          catch (ClassNotLoadedException cnle) {", "+            currWatch.setNoType();", "+          }", "+        }", "+        // if the variable being watched is not a local variable,", "+        //  check if it's a field", "+        else {", "+          ReferenceType outerRt = rt;", "+          ObjectReference outer = obj;  // (null if static context)", "-          ", "-          // if the variable is not a field either, it's not defined in this", "-          // ReferenceType's scope, keep going further out in scope.", "-          Field outerThis = outerRt.fieldByName(\"this$0\");", "-          ", "+", "+          // If we don't find it here, loop through any enclosing classes", "+          //  Start at this$N, where N is the number of dollar signs in", "+          //  the reference type's name, minus one.", "+          int outerIndex = numDollars - 1;", "+          Field outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "-            //outer = (ObjectReference)outer.getValue(outerThis);//currFrame.getValue(var);", "-              outerThis = outerRt.fieldByName(\"this$0\");", "+              outerIndex--;", "+              outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "-          if (field != null) {", "-            currWatch.setValue(_getValue(outer.getValue(field)));", "+          // Try to set the value and type of the field.", "+          //  If the field is not static and we are in a static context", "+          //  (outer==null), we have to setNoValue.", "+          if ((field != null) &&", "+              (field.isStatic() || (outer != null))) {", "+            Value v = (field.isStatic()) ?", "+              outerRt.getValue(field) :", "+              outer.getValue(field);", "+            currWatch.setValue(_getValue(v));", "-              currWatch.setType(field.type());", "+              currWatch.setType(String.valueOf(field.type()));", "-              currWatch.setType(null);", "+              currWatch.setNoType();", "-          /*", "-            ", "-            // crop off the $ if there is one and anything after it", "-            int indexOfDollar = className.lastIndexOf('$');", "-            if (indexOfDollar > -1) {", "-              className = className.substring(0, indexOfDollar);", "-            }", "-            else {", "-              // There is no $ in the className, we're at the outermost class and the", "-              // field still was not found", "-              break;", "-            }", "-            outerRt = (ReferenceType)_vm.classesByName(className).get(0);", "-            if (outerRt == null) {", "-              break;", "-            }", "-            field = outerRt.fieldByName(currName);", "-          }", "-          if (field != null) {", "-            // check if the field is static", "-            if (field.isStatic()) {", "-              currWatch.setValue(_getValue(outerRt.getValue(field)));", "-              try {", "-                currWatch.setType(field.type());", "-              }", "-              catch (ClassNotLoadedException cnle) {", "-                currWatch.setType(null);", "-              }", "-            }", "-            else {", "-              LocalVariable var;", "-              ObjectReference outer;", "-              do {", "-                // get the object reference for outer classes", "-                var = currFrame.visibleVariableByName(\"this$0\");", "-                outer = (ObjectReference)currFrame.getValue(var);", "-              }", "-              while (!outer.referenceType().equals(outerRt));", "-                 ", "-              */", "-          ", "-              /*", "-              StackFrame outerFrame = currFrame;", "-              // the field is not static", "-              // Check if the frame represents a native or static method and", "-              // keep going down the stack frame looking for the frame that", "-              // has the same ReferenceType that we found the Field in.", "-              // This is a hack, remove it to slightly improve performance but", "-              // at the loss of ever being able to watch outer instance", "-              // fields. If unremoved, this will work sometimes, but not always.", "-              while (outerFrame.thisObject() != null &&", "-                     !outerFrame.thisObject().referenceType().equals(outerRt) &&", "-                     stackIndex < frames.size()) {", "-                outerFrame = (StackFrame) frames.get(stackIndex);", "-                stackIndex++;", "-              }", "-              if (stackIndex < frames.size() && outerFrame.thisObject() != null) {", "-                // then we found the right stack frame", "-                currWatch.setValue(_getValue(outerFrame.thisObject().getValue(field)));", "-                try {", "-                  currWatch.setType(field.type());", "-                }", "-                catch (ClassNotLoadedException cnle) {", "-                  currWatch.setType(null);", "-                }", "-              }", "-              else {", "-                currWatch.setValue(DebugWatchUndefinedValue.ONLY);", "-                currWatch.setType(null);", "-              }", "-              ", "-            }*/", "-            currWatch.setValue(DebugWatchUndefinedValue.ONLY);", "-            currWatch.setType(null);", "+            currWatch.setNoValue();", "+            currWatch.setNoType();", "-        else {", "-          currWatch.setValue(_getValue(currFrame.getValue(localVar)));", "-          try {", "-            currWatch.setType(localVar.type());", "-          }", "-          catch (ClassNotLoadedException cnle) {", "-            currWatch.setType(null);", "-          }", "-        }", "+        "]}], "num": 20279}
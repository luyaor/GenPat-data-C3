{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "162d788ae51075fd01bfa933c506dced", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a1510272b74513e25c4590ecea7ab29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 463, "methodNumberAfterChange": 463, "signatureBeforeChange": "   protected OpenDefinitionsDocument _getOpenDocument(File file)", "signatureAfterChange": "   protected OpenDefinitionsDocument _getOpenDocument(File file)", "diff": ["-    ", "-//    System.err.println(\"_getOpenDocument(\" + file + \") called\");", "-    ", "-    for (OpenDefinitionsDocument doc: getOpenDefinitionsDocuments()) {", "-      try {", "-        File thisFile = null;", "-        try { thisFile = doc.getFile(); }", "-        catch (FileMovedException fme) { thisFile = fme.getFile(); } // File is invalid, but compare anyway", "-        finally {", "-          // Always do the comparison", "-          if (thisFile != null) {", "-            try {", "-              // Compare canonical paths if possible", "-              if (thisFile.getCanonicalFile().equals(file.getCanonicalFile())) return doc;", "-            }", "-            catch (IOException ioe) {", "-              // Can be thrown from getCanonicalFile. If so, compare the files themselves", "-              if (thisFile.equals(file)) return doc;", "-            }", "-          }", "-        }", "-      }", "-      catch (IllegalStateException ise) { /* No file in doc; fail silently */ }", "-    }", "-    return null;", "+    synchronized(_documentsRepos) { return _documentsRepos.get(file); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c2ac2abf7e7b80b0193c089696325b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/FileFinderTest.java", "commitBeforeChange": "536afaee0374767d0f8bdf572a332576e3f54467", "commitAfterChange": "222f5adcb4ec2d8c8823733053796b612dc57603", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testFindFile()", "signatureAfterChange": "      public void testFindFile()", "diff": ["-    File thisFile;", "-    File noFile;", "+", "+    assertNotFound(\"Empty1.java\");", "+    assertNotFound(\"Empty2.java\");", "+    assertNotFound(\"file.doesnotexist\");", "-    //When running the ant script for testing this is the relative path to the directory that contains this file", "-    ff.addPath(\"dynamicjava/util/\");", "+    ff.addPath(\"testFiles/someDir1/\");", "-    //Try to find a file that does exist, namely this current file", "+    assertFound(\"Empty1.java\");", "+    assertNotFound(\"Empty2.java\");", "+    assertNotFound(\"file.doesnotexist\");", "+    ", "+    ff.addPath(\"testFiles/someDir2\");", "+", "+    assertFound(\"Empty1.java\");", "+    assertFound(\"Empty2.java\");", "+    assertNotFound(\"file.doesnotexist\");", "+", "+  }", "-      thisFile = ff.findFile(\"FileFinderTest.java\");", "-      assertTrue(\"Found This File\", thisFile != null);", "-    catch(IOException ioe) {", "-    ", "-    //When running the ant script for testing this is the relative path to the directory that contains this file", "-    ff.addPath(\"dynamicjava/interpreter\");", "-    ", "-    //Try to find a file that does exist, namely this current file", "-    try {", "-      thisFile = ff.findFile(\"Interpreter.java\");", "-      assertTrue(\"Found This File\", thisFile != null);", "-    }", "-    catch(IOException ioe) {", "-      fail();", "-    }", "-    ", "-    ", "-    //Try to find a file that does not exist", "-    try {", "-      noFile = ff.findFile(\"file.doesnotexist\");", "-      fail();", "-    }", "-    catch(IOException fnf) {", "-      assertEquals(\"File Not Found\", \"File Not Found: file.doesnotexist\", fnf.getMessage());"]}], "num": 16309}
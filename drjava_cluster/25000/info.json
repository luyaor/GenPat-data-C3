{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5755ba1ee9a6e9a8f4a575873b74295", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc36ddd377b34b1f7423970a6a37989", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "c12f68e3bc37fa5484d2cfb01f6ad9fc1d626551", "commitAfterChange": "69d4590eff40914052a36cc82d8a74c43211028e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "               protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "         protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-  ", "-        ", "-", "+      ", "-//        _getter.getDefinitionsDocuments().iterator();", "+      //        _getter.getDefinitionsDocuments().iterator();", "+      //Gets system classpaths from the main JVM so that junit tests can find every class file.", "+      //Given as one long String, this separates the paths into a list of strings. 3/12/05", "+      LinkedList<String> classpaths = new LinkedList<String>();", "+      String cpString = _jvm.getClasspathString();", "+      int cpLength = cpString.length();", "+      if (cpString.indexOf(File.pathSeparatorChar) == -1 && cpLength > 0) {", "+        classpaths.add(cpString);", "+      }", "+      else {", "+        int cpIndex;", "+        while ((cpIndex = cpString.indexOf(File.pathSeparatorChar)) != -1 && cpLength != 1) {", "+          if (cpIndex == 0) cpString = cpString.substring(1, cpLength);", "+          else {", "+            classpaths.add(cpString.substring(0, cpIndex));", "+            cpString = cpString.substring(cpIndex, cpLength-1);", "+            cpLength = cpString.length();", "+          }", "+        }", "+      }", "+      ", "+      //First adds the default document build directory to the class directories.", "-          // kep a record of unique built direcotries", "+          ", "+          // keep a record of unique built directories", "-//          String cn = doc.getQualifiedClassName();", "-//          classNames.add(cn);", "-//          files.add(f);", "-//          classNamesToODDs.put(cn, doc);", "+      //Next adds the JVM class paths to the class directories.", "+      //Junit will look here if the default build directories don't have the desired classes.", "+      it = lod.iterator();", "+      while (it.hasNext()) {", "+        try {", "+          OpenDefinitionsDocument doc = it.next();", "+          String packageName;", "+          try{", "+            packageName = doc.getPackageName();", "+          }catch(InvalidPackageException e){", "+            packageName = \"\";", "+          }", "+          packageName = packageName.replace('.', File.separatorChar);", "+          ", "+          //Adds unique classpaths to the list of class directories that junit tests look through. 3/12/05", "+          for (String classpath: classpaths) {", "+            File temp = new File (new File(classpath).getCanonicalPath());", "+            if (temp.isDirectory()) {", "+              temp = new File(temp.getCanonicalPath() + File.separator + packageName);", "+              if (!classDirs.contains(temp)) {", "+                classDirs.addLast(temp);", "+              }", "+            }", "+          }", "+        }", "+        catch(IOException e){", "+          // don't add it to the test suite b/c the directory doesn't exist", "+        }", "+      }", "+         ", "-        ", "-        ", "+", "-                  ", "-//              System.out.println(\"looking for file for: \" + classname);", "+              //              System.out.println(\"looking for file for: \" + classname);", "-//                  System.out.println(f.getCanonicalPath() + \" == \" + filename);", "+                  //                  System.out.println(f.getCanonicalPath() + \" == \" + filename);", "-  //                    System.out.println(\"testing: \" + classname + \" from \" + f.getCanonicalPath());", "-//                    Method methods[] = clazz.getMethods();", "-//                    for(Method d : methods){", "-//                      System.out.println(\" method: \" + d);", "-//                    }", "+                    //                    System.out.println(\"testing: \" + classname + \" from \" + f.getCanonicalPath());", "+                    //                    Method methods[] = clazz.getMethods();", "+                    //                    for(Method d : methods){", "+                    //                      System.out.println(\" method: \" + d);", "+                    //                    }", "-                    ", "+                    break;", "-      ", "+          ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b646bf1273683ab95cd46d71986c9991", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "commitAfterChange": "2526c65e608c685b2ba6cdb8c1784ca704d1153b", "methodNumberBeforeChange": 652, "methodNumberAfterChange": 652, "signatureBeforeChange": "   void _showAutoImportDialog(String s)", "signatureAfterChange": "   void _showAutoImportDialog(String s)", "diff": ["+    List<JavaAPIListEntry> autoImportList = new ArrayList<JavaAPIListEntry>(_javaAPIList);", "+    if ((DrJava.getConfig().getSetting(DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue()) &&", "+        (_autoImportClassList.size()>0)) {", "+      autoImportList.addAll(_autoImportClassList);", "+    }", "+    else {", "+      File projectRoot = _model.getProjectRoot();", "+      List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+      if (docs != null) {", "+        for(OpenDefinitionsDocument d: docs) {", "+          if (d.isUntitled()) continue;", "+          try {", "+            File rel = FileOps.makeRelativeTo(d.getRawFile(), projectRoot);", "+            String full = rel.toString().replace(java.io.File.separatorChar, '.');", "+            for (String ext: edu.rice.cs.drjava.model.compiler.CompilerModel.EXTENSIONS) {", "+              if (full.endsWith(ext)) {", "+                full = full.substring(0, full.lastIndexOf(ext));", "+                break;", "+              }", "+            }", "+            String simple = full;", "+            if (simple.lastIndexOf('.')>=0) {", "+              simple = simple.substring(simple.lastIndexOf('.')+1);", "+            }", "+            JavaAPIListEntry entry = new JavaAPIListEntry(simple, full, null);", "+            if (!autoImportList.contains(entry)) { autoImportList.add(entry); }", "+          }", "+          catch(IOException ioe) { /* ignore, just don't add this one */ }", "+          catch(SecurityException se) { /* ignore, just don't add this one */ }", "+        }", "+      }", "+    }", "-                                                 _javaAPIList);", "+                                                 autoImportList);"]}], "num": 25000}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23a311021a376985e43e185e78a260a2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5af25e5b2fb7f3fb144b1c9d593ffec3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["+    // TODO: change 120 to a defined constand (must search for 119 as well as 120 in code)", "-      final StringBuilder sb = new StringBuilder();", "-        sb.append(lineNumber());", "-        try {", "-          sb.append(\": \");", "-          int length = Math.min(120, _region.getEndOffset()-_region.getStartOffset());", "-          sb.append(_region.getDocument().getText(_region.getStartOffset(), length).trim());", "-        } catch(BadLocationException bpe) { /* ignore, just don't display line */ }        ", "+      final StringBuilder sb = new StringBuilder(120);", "+      sb.append(\"<html>\");", "+      sb.append(lineNumber());", "+      sb.append(\": \");", "+      String text = _region.getString(); // limited to 124 chars (120 chars of text + \" ...\")  ", "+      int len = text.length();", "+      if (text.lastIndexOf('\\n') != len - 1) sb.append(StringOps.flatten(text));  // multiline label", "+      else sb.append(text);  ", "+      sb.append(\"</html>\");", "+//      System.err.println(\"Returning node label: \" + sb.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "833821fe312fe86ae789fd25b8926928", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testMultEquals()", "signatureAfterChange": "   public void testMultEquals() throws ExceptionReturnedException", "diff": ["-  public void testMultEquals() {", "-    Node exp = _parseCode(\"x *= new Integer(2);\").get(0);", "+  public void testMultEquals() throws ExceptionReturnedException {", "+    // Tests times-equals with a primitive left-hand side", "+    String text = \"x *= new Integer(2);\";", "+    String expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: x)\";", "+    String expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+", "+    // Tests times-equals with a reference-type left-hand side", "+    text = \"X *= new Integer(2);\";", "+    expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: X)\";", "+    expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "+    ", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}], "num": 30916}
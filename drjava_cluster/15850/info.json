{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c181a579b8300091cf3c1d9d2a2df886", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ebb95d9f50aa5f4b2fd4fd1900c8cf8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 228, "methodNumberAfterChange": 225, "signatureBeforeChange": "      protected Type immediateSupertype(ParameterizedClassType t)", "signatureAfterChange": "      protected Type immediateSupertype(ParameterizedClassType t)", "diff": ["-    SubstitutionMap sigma = ", "-      new SubstitutionMap(SymbolUtil.allTypeParameters(tCap.ofClass()), tCap.typeArguments());", "-    Type result = null;", "-    for (Type sup : t.ofClass().declaredSupertypes()) {", "-      Type instantiatedSup = substitute(sup, sigma);", "-      result = (result == null) ? instantiatedSup : meet(result, instantiatedSup);", "-    }", "-    if (result == null) result = OBJECT;", "-    return result;", "+    DJClass c = tCap.ofClass();", "+    Iterable<? extends Type> sups =", "+      substitute(c.declaredSupertypes(), SymbolUtil.allTypeParameters(c), tCap.typeArguments());", "+    return meet(IterUtil.compose(OBJECT, sups));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5483748e094db9ac6cda3e3d97695ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 223, "signatureBeforeChange": "      protected Type immediateSupertype(RawClassType t)", "signatureAfterChange": "      protected Type immediateSupertype(RawClassType t)", "diff": ["-    Type result = null;", "-    for (Type sup : t.ofClass().declaredSupertypes()) {", "-      Type erasedSup = erase(sup);", "-      result = (result == null) ? erasedSup : meet(result, erasedSup);", "-    }", "-    if (result == null) result = OBJECT;", "-    return result;", "+    Iterable<Type> erasedSups = IterUtil.map(t.ofClass().declaredSupertypes(), new Lambda<Type, Type>() {", "+      public Type value(Type t) { return t.apply(ERASE); }", "+    });", "+    return meet(IterUtil.compose(OBJECT, erasedSups));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eead18a5e0ef01b143b9a60adfd2e535", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 226, "methodNumberAfterChange": 222, "signatureBeforeChange": "      protected Type immediateSupertype(SimpleClassType t)", "signatureAfterChange": "      protected Type immediateSupertype(SimpleClassType t)", "diff": ["-    else {", "-      Type result = null;", "-      for (Type sup : t.ofClass().declaredSupertypes()) {", "-        result = (result == null) ? sup : meet(result, sup);", "-      }", "-      if (result == null) result = OBJECT;", "-      return result;", "-    }", "+    else { return meet(IterUtil.compose(OBJECT, t.ofClass().declaredSupertypes())); }"]}], "num": 15850}
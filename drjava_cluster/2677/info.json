{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "276b34b57e42e90f9855324050b6e17e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e54eb243191ff324e0993be335811a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "commitAfterChange": "530cb3b64455d081e962324602750973729aa1fb", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": "      public void interactionEnded()", "signatureAfterChange": "      public void interactionEnded()", "diff": ["-      if (inDebugMode()) {", "-        _disableStepTimer();", "-        // Only change GUI from event-dispatching thread", "-        Runnable doCommand = new Runnable() {", "-          public void run() {", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          if (inDebugMode()) {", "+            _disableStepTimer();", "-        };", "-        SwingUtilities.invokeLater(doCommand);", "-      }", "-      //_abortInteractionAction.setEnabled(false);", "-      _interactionsPane.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));", "-      _interactionsPane.setEditable(true);", "-      int pos = _interactionsPane.getDocument().getLength();", "-      _interactionsPane.setCaretPosition(pos);", "-    }", "+          ", "+          _interactionsPane.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));", "+          _interactionsPane.setEditable(true);", "+          int pos = _interactionsPane.getDocument().getLength();", "+          _interactionsPane.setCaretPosition(pos);", "+          //_interactionsPane.getCaret().setVisible(true);", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bdc1f0376dc1d832b92210aafc6a5d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "66e5a8936ddc9a6a54b90689df97ecc4178fb4cc", "commitAfterChange": "937476ee8896348910d6d75752ebec9108601607", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "diff": ["-    ", "-    ", "+", "-    ArrayList<String> classNames = new ArrayList<String>();", "+    final ArrayList<String> classNames = new ArrayList<String>();", "-    ArrayList<File> files = new ArrayList<File>();", "+    final ArrayList<File> files = new ArrayList<File>();", "-    // synchronized over _compilerModel to ensure that compilation and junit testing are mutually exclusive.", "-    // TODO: should we disable compile commands while testing?  Should we use protected flag instead of lock?", "-//    Utilities.show(\"Preparing to synchronize\");", "-    synchronized(_compilerModel.getCompilerLock()) {", "-      /** Set up junit test suite on slave JVM; get TestCase classes forming that suite */", "-      List<String> tests = _jvm.findTestClasses(classNames, files).unwrap(null);", "-      if (tests == null || tests.isEmpty()) {", "-        nonTestCase(allTests);", "-        return;", "-      }", "-      ", "-      /** Run the junit test suite that has already been set up on the slave JVM */", "-      _testInProgress = true;", "-//        System.err.println(\"Spawning test thread\");", "-      new Thread(new Runnable() {", "-        public void run() { ", "-          try {", "-//              Utilities.show(\"Starting JUnit\");", "-            _notifyJUnitStarted(); ", "-            boolean testsPresent = _jvm.runTestSuite();  // The false return value could be changed to an exception.", "-            if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "-          }", "-          catch(RemoteException e) { // Unit testing aborted; cleanup; hourglassOff already called in junitStarted", "-            _notifyJUnitEnded();  // balances junitStarted()", "-            _testInProgress = false;", "+    /** Run the junit test suite that has already been set up on the slave JVM */", "+    _testInProgress = true;", "+    // System.err.println(\"Spawning test thread\");", "+    new Thread(new Runnable() {", "+      public void run() { ", "+        // TODO: should we disable compile commands while testing?  Should we use protected flag instead of lock?", "+        // Utilities.show(\"Preparing to synchronize\");", "+        ", "+        // The call to findTestClasses had to be moved out of the event thread (bug 2722310)", "+        // The event thread is still blocked in findTestClasses when JUnit needs to", "+        // have a class prepared. This invokes EventHandlerThread._handleClassPrepareEvent, which puts a call to", "+        // _debugger.getPendingRequestManager().classPrepared(e); (which presumably", "+        // deals with preparing the class) on the event thread using invokeLater.", "+        // This, however, doesn't get executed because the event thread is still blocking --> deadlock.", "+        synchronized(_compilerModel.getCompilerLock()) {", "+          // synchronized over _compilerModel to ensure that compilation and junit testing are mutually exclusive.", "+          /** Set up junit test suite on slave JVM; get TestCase classes forming that suite */", "+          List<String> tests = _jvm.findTestClasses(classNames, files).unwrap(null);", "+          if (tests == null || tests.isEmpty()) {", "+            nonTestCase(allTests);", "+            return;", "-      }).start();", "-    }", "+        ", "+        try {", "+          // Utilities.show(\"Starting JUnit\");", "+          ", "+          _notifyJUnitStarted(); ", "+          boolean testsPresent = _jvm.runTestSuite();  // The false return value could be changed to an exception.", "+          if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "+        }", "+        catch(RemoteException e) { // Unit testing aborted; cleanup; hourglassOff already called in junitStarted", "+          _notifyJUnitEnded();  // balances junitStarted()", "+          _testInProgress = false;", "+        }", "+      }", "+    }).start();"]}], "num": 2677}
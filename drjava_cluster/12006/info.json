{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "368626e38d0d37bf3592fd5c1183ffa4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "726707bc94d3b1df11a435cf9bb0c079", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 123, "signatureBeforeChange": "   public static Runnable compose(final Runnable r1, final Runnable r2)", "signatureAfterChange": "   public static Runnable compose(Runnable... runnables)", "diff": ["-  /** @return  A runnable that executes {@code r1} followed by {@code r2} */", "-  public static Runnable compose(final Runnable r1, final Runnable r2) { ", "-    return new Runnable() {", "-      public void run() { r1.run(); r2.run(); }", "-    };", "+  /** Create a runnable that executes the given runnables in sequence. */", "+  public static Runnable compose(Runnable... runnables) {", "+    return new ComposedRunnable(IterUtil.asIterable(runnables));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a040b661d87aa50c599d0a2708c161", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 67, "signatureBeforeChange": "   public static Runnable1<Object> promote(final Runnable r)", "signatureAfterChange": "   public static GeneralRunnable promote(Runnable r)", "diff": ["-  /** @return A {@code Runnable1} equivalent to {@code r} with an ignored argument */", "-  public static Runnable1<Object> promote(final Runnable r) {", "-    return new Runnable1<Object>() {", "-      public void run(Object arg) { r.run(); }", "-    };", "+  /** Create a {@code GeneralRunnable} equivalent to {@code r} that ignores any arguments. */", "+  public static GeneralRunnable promote(Runnable r) { return new PromotedGeneralRunnable(r); }"]}], "num": 12006}
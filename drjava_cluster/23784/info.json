{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ba32bcd19d191aac99678068634fe16", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8de163db1b9a82cbc13688f6f42c12b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/TypeCheckerExtension.java", "commitBeforeChange": "623dbae8bf369adeb4e3b2a78ab2b5a3f4b29e9b", "commitAfterChange": "d0501f87d274a5806c24d0d105495acde5ccbe13", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public Object visit(MethodDeclaration node)", "signatureAfterChange": "   public Object visit(DivideExpression node)", "diff": ["-  ", "-  public Object visit(MethodDeclaration node) {", "-    super.visit(node);", "-    Class c = (Class)node.getProperty(NodeProperties.TYPE);", "-    BlockStatement bs = node.getBody();", "-    List l = bs.getStatements();", "-    Iterator iter = l.iterator();", "-    boolean foundCorrectType = false;", "-    while(iter.hasNext()) {", "-      Statement s = (Statement)iter.next();", "-      if (s instanceof ReturnStatement) {", "-        Class returnExpClass;", "-        Expression expression = ((ReturnStatement)s).getExpression();", "-        if (expression == null) {", "-          returnExpClass = null;", "-        }", "-        else {", "-          returnExpClass = (Class)expression.acceptVisitor(this);", "-        }", "-        // will void return type mean c is null?", "-        if (c == null) {", "-          if (returnExpClass != null) {", "-            // returning a value in a void method", "-            throw new ExecutionError(\"assignment.types\", node);", "-          }", "-        }", "-        else if (returnExpClass == null) {", "-          // returning nothing in a non-void method", "-          throw new ExecutionError(\"assignment.types\", node);    ", "-        }", "-        else if (!c.isAssignableFrom(returnExpClass)) {", "-          // returning an unassignable type", "-          throw new ExecutionError(\"assignment.types\", node);", "-        }", "-        else {", "-          // returning an assignable type", "-          foundCorrectType = true;", "-        }", "-      }", "-    }", "-    if (c != null) {", "-      if (!foundCorrectType) {", "-        // we were supposed to return a type, but did not", "-        throw new ExecutionError(\"assignment.types\", node);", "-      }", "-    }", "-    return null;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4d87e23ecd3125926e1772cc5fa6628", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "d41b5de79662496f09ec590840d7e35134702a41", "commitAfterChange": "fd26cc12b714205eb66ef1427d78a124c29d57fc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "signatureAfterChange": "   public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "diff": ["-  public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "+  public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "-    String packageName = \"\";", "-    try {", "-      doc.getDocument().getPackageName();", "-    }", "-    catch (InvalidPackageException e) {", "-      // Couldn't find package, pretend there's none", "-    }", "-    String className = packageName + doc.getClassName();", "-    //System.out.println(\"Setting breakpoint in class: \" + className + ", "-    //                   \", line: \" + lineNumber);", "+", "+    Breakpoint breakpoint = new Breakpoint (doc, lineNumber, _vm);", "+", "+    System.out.println(breakpoint);", "-    // Get all classes that match this name", "-    List classes = _vm.classesByName(className);", "-    //System.out.println(\"Num of classes found: \" + classes.size());", "-    ReferenceType rt = null;", "-    Iterator it = classes.iterator();", "-    // Assume first one is correct, for now", "-    if (it.hasNext()) {", "-      rt = (ReferenceType) it.next();", "-    }", "-    if (rt == null) {", "-      //System.out.println(\"No reference type found\");", "-      return false;", "-    }", "-    ", "-    // Get locations for the line number, use the first", "-    try {", "-      List lines = rt.locationsOfLine(lineNumber);", "-      if (lines.size() == 0) {", "-        // Can't find a location on this line", "-        //System.out.println(\"No locations found.\");", "-        return false;", "-      }", "-      Location loc = (Location) lines.get(0);", "-      BreakpointRequest req = _eventManager.createBreakpointRequest(loc);", "-      req.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);", "-      req.enable();", "-      //System.out.println(\"Breakpoint: \" + req);", "-      return true;", "-    }", "-    catch (AbsentInformationException aie) {", "-      throw new DebugException(\"Could not find line number: \" + aie);", "-    }", "-    ", "-    /**", "-    BreakpointManager bpManager = (BreakpointManager)_session.getManager(BreakpointManager.class);", "-    try {", "-      bpManager.createBreakpoint(className, lineNumber);", "-    } catch (ResolveException re) {", "-      throw new DebugException(re.toString());", "-    } catch (ClassNotFoundException cnfe) {", "-      throw new DebugException(cnfe.toString());", "-    }", "-    writeToLog(\"Breakpoint added: \" + className + \":\" + lineNumber + \"\\n\");", "-    */", "+    _breakpoints.put(breakpoint.getRequest(), breakpoint);", "+    doc.addBreakpoint(breakpoint);"]}], "num": 23784}
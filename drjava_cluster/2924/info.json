{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6abb801036f6425e29c8f9bfd81bffaa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25529f79c1acbdfe09e88243ce6f797b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-      while(failCount<2) {", "+      while(failCount < 2) {", "+        String masterMemory = getConfig().getSetting(MASTER_JVM_XMX).trim();", "-          || ((!(\"\".equals(DrJava.getConfig().getSetting(MASTER_JVM_XMX).trim()))) &&", "-              (!(edu.rice.cs.drjava.config.OptionConstants.heapSizeChoices.get(0).equals(DrJava.getConfig().getSetting(MASTER_JVM_XMX).trim()))));", "+          || (!\"\".equals(masterMemory) && !OptionConstants.heapSizeChoices.get(0).equals(masterMemory));", "-        LinkedList<String> classArgsList = new LinkedList<String>();", "-        classArgsList.addAll(_filesToOpen);", "+        LinkedList<String> classArgs = new LinkedList<String>();", "+        classArgs.addAll(_filesToOpen);", "-        if (_showDebugConsole) { classArgsList.addFirst(\"-debugConsole\"); }", "+        if (_showDebugConsole) { classArgs.addFirst(\"-debugConsole\"); }", "-          classArgsList.addFirst(_propertiesFile.getAbsolutePath());", "-          classArgsList.addFirst(\"-config\");", "+          classArgs.addFirst(_propertiesFile.getAbsolutePath());", "+          classArgs.addFirst(\"-config\");", "-        String[] classArgs = classArgsList.toArray(new String[0]);", "-        ", "-          String classPath = System.getProperty(\"java.class.path\");", "-//          Utilities.showDebug(\"Starting DrJavaRoot with classArgs = \" + Arrays.toString(classArgs) + \"; classPath = \" + classPath + ", "-//                             \"; jvmArgs = \" + _jvmArgs + \"; workDir = \" + workDir);", "-            Process p = ExecJVM.runJVM(\"edu.rice.cs.drjava.DrJavaRoot\", classArgs, classPath, _jvmArgs.toArray(new String[0]), null);", "-            final Thread mainThread = Thread.currentThread();", "-            // this thread waits some time for something to go wrong in the spawned JVM (p)", "-            // then it interrupts the main thread, which is waiting for the JVM to end", "-            Thread sleepThread = new Thread(new Runnable() {", "-              public void run() {", "-                try {", "-                  Thread.sleep(WAIT_BEFORE_DECLARING_SUCCESS); // wait 5 seconds for something to go wrong.", "-                  mainThread.interrupt();", "-                }", "-                catch(InterruptedException e) { /* just check if something has gone wrong now, even if it's not 5 seconds later */ }", "-              }", "-            });", "-            sleepThread.setDaemon(true);", "-            sleepThread.start(); // this will wait 5 seconds and then interrupt the main thread waiting for the other JVM to quit", "-            // let the main threat wait for the JVM to end", "+            boolean failed = false;", "+            Process p = JVMBuilder.DEFAULT.jvmArguments(_jvmArgs).start(DrJavaRoot.class.getName(), classArgs);", "+            DelayedInterrupter timeout = new DelayedInterrupter(WAIT_BEFORE_DECLARING_SUCCESS);", "-              p.waitFor();", "-              sleepThread.interrupt();", "+              int exitValue = p.waitFor();", "+              timeout.abort();", "+              failed = (exitValue != 0);", "-            catch(InterruptedException e) { /* we got interrupted by the sleepThread */ }", "-            try {", "-              // check how the JVM ended", "-              if (p.exitValue()!=0) {", "-                // ended in failure", "-                if (failCount>0) {", "-                  // 2nd time that spawning has failed, give up", "-                  JOptionPane.showMessageDialog(null,", "-                                                \"DrJava was unable to start, and resetting your configuration\\n\"+", "-                                                \"did not help. Please file a support request at\\n\"+", "-                                                \"https://sourceforge.net/projects/drjava/\",", "-                                                \"Could Not Start DrJava\",", "-                                                JOptionPane.ERROR_MESSAGE);", "-                  System.exit(0);", "-                }", "-                else {", "-                  // 1st time that spawning has failred, offer to reset configuration", "-                  int result = JOptionPane.showConfirmDialog(null,", "-                                                             \"DrJava was unable to start. Your configuration file (.drjava)\\n\"+", "-                                                             \"might be corrupt. Do you want to reset your configuration?\",", "-                                                             \"Could Not Start DrJava\",", "-                                                             JOptionPane.YES_NO_OPTION);", "-                  if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "-                  // reset configuration, save, and reload it", "-                  getConfig().resetToDefaults();", "-                  getConfig().saveConfiguration();", "-                  if (!handleCommandLineArgs(args)) { System.exit(0); }", "-                  ++failCount;", "-                  continue;", "-                }", "+            catch(InterruptedException e) { /* timeout was reached */ }", "+            if (failed) {", "+              if (failCount > 0) {", "+                // 2nd time that spawning has failed, give up", "+                JOptionPane.showMessageDialog(null,", "+                                              \"DrJava was unable to start, and resetting your configuration\\n\"+", "+                                              \"did not help. Please file a support request at\\n\"+", "+                                              \"https://sourceforge.net/projects/drjava/\",", "+                                              \"Could Not Start DrJava\",", "+                                              JOptionPane.ERROR_MESSAGE);", "+                System.exit(0);", "-            }", "-            catch(IllegalThreadStateException e) {", "-              // the other JVM hasn't finished yet, assume it's running well", "+              else {", "+                // 1st time that spawning has failed, offer to reset configuration", "+                int result = JOptionPane.showConfirmDialog(null,", "+                                                           \"DrJava was unable to start. Your configuration file (.drjava)\\n\"+", "+                                                           \"might be corrupt. Do you want to reset your configuration?\",", "+                                                           \"Could Not Start DrJava\",", "+                                                           JOptionPane.YES_NO_OPTION);", "+                if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "+                // reset configuration, save, and reload it", "+                getConfig().resetToDefaults();", "+                getConfig().saveConfiguration();", "+                if (!handleCommandLineArgs(args)) { System.exit(0); }", "+                ++failCount;", "+                continue;", "+              }", "-          DrJavaRoot.main(classArgs);", "+          DrJavaRoot.main(classArgs.toArray(new String[0]));", "-      new DrJavaErrorHandler().handle(t);", "+      DrJavaErrorHandler.record(t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f7a4c94b093ab454ae9ca8f66d09a42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public static Iterable<JDKDescriptor> searchForJDKDescriptors()", "signatureAfterChange": "   private static Iterable<JDKDescriptor> searchForJDKDescriptors()", "diff": ["-  public static Iterable<JDKDescriptor> searchForJDKDescriptors() {", "+  /** Search for JDK descriptors. */", "+  private static Iterable<JDKDescriptor> searchForJDKDescriptors() {", "-      JarFile jf = new JarFile(f);", "-      JDKToolsLibrary.msg(\"jar file: \"+jf);", "-      Enumeration<JarEntry> entries = jf.entries();", "-      while(entries.hasMoreElements()) {", "-        JarEntry je = entries.nextElement();", "-        String name = je.getName();", "-        if (name.startsWith(\"edu/rice/cs/drjava/model/compiler/descriptors/\") &&", "-            name.endsWith(\".class\") &&", "-            !name.equals(\"edu/rice/cs/drjava/model/compiler/descriptors/JDKDescriptor.class\") &&", "-            (name.indexOf('$')<0)) {", "-          int dotPos = name.indexOf(\".class\");", "-          String className = name.substring(0, dotPos).replace('/','.');", "-          try {", "-            JDKToolsLibrary.msg(\"\\tclass name: \"+className);", "-            Class<?> clazz = Class.forName(className);", "-            Class<? extends JDKDescriptor> descClass = clazz.asSubclass(JDKDescriptor.class);", "-            JDKDescriptor desc = descClass.newInstance();", "-            JDKToolsLibrary.msg(\"\\t\\tloaded!\");", "-            descriptors = IterUtil.compose(descriptors, desc);", "+      if (f.isFile()) {", "+        JarFile jf = new JarFile(f);", "+        JDKToolsLibrary.msg(\"jar file: \"+jf);", "+        Enumeration<JarEntry> entries = jf.entries();", "+        while(entries.hasMoreElements()) {", "+          JarEntry je = entries.nextElement();", "+          String name = je.getName();", "+          if (name.startsWith(\"edu/rice/cs/drjava/model/compiler/descriptors/\") &&", "+              name.endsWith(\".class\") &&", "+              (name.indexOf('$')<0)) {", "+            descriptors = attemptToLoadDescriptor(descriptors, name);", "-          catch(LinkageError le) { JDKToolsLibrary.msg(\"LinkageError: \"+le); /* ignore */ } ", "-          catch(ClassNotFoundException cnfe) { JDKToolsLibrary.msg(\"ClassNotFoundException: \"+cnfe); /* ignore */ }", "-          catch(ClassCastException cce) { JDKToolsLibrary.msg(\"ClassCastException: \"+cce); /* ignore */ }", "-          catch(IllegalAccessException iae) { JDKToolsLibrary.msg(\"IllegalAccessException: \"+iae); /* ignore */ }", "-          catch(InstantiationException ie) { JDKToolsLibrary.msg(\"InstantiationException: \"+ie); /* ignore */ }", "-     }", "+      }", "+      else {", "+        final String DESC_PATH = \"edu/rice/cs/drjava/model/compiler/descriptors\";", "+        File dir = new File(f, DESC_PATH);", "+        JDKToolsLibrary.msg(\"directory, enumerating files in \"+dir);", "+        Iterable<File> files = IOUtil.listFilesRecursively(dir, new Predicate<File>() {", "+          public boolean contains(File arg) {", "+            return (arg.isFile()) && arg.getName().endsWith(\".class\") && (arg.getName().indexOf('$')<0);", "+          }", "+        });", "+        for(File je: files) {", "+          String name = DESC_PATH+\"/\"+je.getName();", "+          descriptors = attemptToLoadDescriptor(descriptors, name);", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c7eef769eb3011d6870712c47b463ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "24e790b85d3a1a29de15955ca1ba9200a6865f83", "commitAfterChange": "4ceb386773fd5eb837ddcd34820c563b6c3c20cb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private void _calculatePositions()", "signatureAfterChange": "   private void _calculatePositions()", "diff": ["-    _positions = new Position[_errors.length];", "-      int numProcessed = 0;", "-", "-      //first skip errors with no file", "-      while(numProcessed < _errors.length && _errors[numProcessed].file() == null){", "-        _positions[numProcessed] = null;", "-        numProcessed++;", "-      }", "-", "-      while ((numProcessed < _errors.length)) {", "-        //skip errors with no position", "-        while(numProcessed < _errors.length && _errors[numProcessed].hasNoLocation()){", "-          _positions[numProcessed] = null;", "-          numProcessed++;", "-        }", "-        if (numProcessed >= _errors.length){", "+      int curError = 0;", "+      ", "+      // for(; numProcessed < _numErrors; numProcessed++) {", "+      while ((curError < _numErrors)) {", "+        ", "+        // find the next error with a line number (skipping others)", "+        curError = nextErrorWithLine(curError);", "+        if (curError >= _numErrors){", "-        File file = _errors[numProcessed].file();", "+        File file = _errors[curError].file();", "-        } catch (IOException e) {", "-          //skip positions for these errors if the document couldn't be loaded", "-         do {", "-            _positions[numProcessed] = null;", "-            numProcessed++;", "-          } while(numProcessed < _errors.length && _errors[numProcessed].file().equals(file));", "-        } catch (OperationCanceledException e) {", "-          //skip positions for these errors if the document couldn't be loaded", "-         do {", "-            _positions[numProcessed] = null;", "-            numProcessed++;", "-          } while(numProcessed < _errors.length && _errors[numProcessed].file().equals(file));", "+        } ", "+        catch (Exception e) {", "+          // This is intended to catch IOException or OperationCanceledException", "+          if ((e instanceof IOException) || (e instanceof OperationCanceledException)) {", "+            // skip positions for these errors if the document couldn't be loaded", "+            do {", "+              curError++;", "+            } while ((curError < _numErrors) && (_errors[curError].file().equals(file)));", "+            ", "+            //If the document couldn't be loaded, start the loop over at the top", "+            continue;", "+          }", "+          else {", "+            throw new UnexpectedException(e);", "+          }", "-        if (numProcessed >= _errors.length){", "+        if (curError >= _numErrors){", "-        //If the document couldn't be loaded, start the loop over at the top", "-        if (document == null){", "-          continue;", "-        }", "-", "-        int fileStartIndex = numProcessed;", "-        String defsText = document.getText(0, document.getLength());", "+        // curError is the first error in a file, and its document is open.", "+        final int fileStartIndex = curError;", "+        final int defsLength = document.getLength();", "+        final String defsText = document.getText(0, defsLength);", "-        // at the top of the loop", "-        while(numProcessed < _errors.length &&", "-          file.equals(_errors[numProcessed].file()) &&", "-          (offset <= defsText.length())) {", "+        // at the top of this loop", "+        while ((curError < _numErrors) && // we still have errors to find", "+               file.equals(_errors[curError].file()) &&  // the next error is in this file", "+               (offset <= defsLength)) { // we haven't gone past the end of the file", "-          // first figure out if we need to create any new positions on this line", "-          for (int i = numProcessed;", "-               (i < _errors.length) && (_errors[i].lineNumber() == curLine);", "-               i++){", "-            _positions[i] = document.createPosition(offset +  _errors[i].startColumn());", "-            numProcessed++;", "+          // create new positions for all errors on this line", "+          while ((curError < _numErrors)", "+                 && (_errors[curError].lineNumber() == curLine))", "+          {", "+            _positions[curError] =", "+              document.createPosition(offset +  _errors[curError].startColumn());", "+            curError++;", "-          int nextNewline = defsText.indexOf('\\n', offset);", "-          if (nextNewline == -1) {", "-            break;", "-          }", "-          else {", "-            curLine++;", "-            offset = nextNewline + 1;", "+          // At this point, offset is the starting index of the previous error's line.", "+          // Update offset to be appropriate for the current error.", "+          // ... but don't bother looking if it isn't in this file.", "+          // ... or if we're done with all errors already.", "+          if (curError < _numErrors) {", "+            int curErrorLine = _errors[curError].lineNumber();", "+            int nextNewline = 0;", "+            while ((curLine != curErrorLine) ", "+                     && (nextNewline != -1)", "+                     && (file.equals(_errors[curError].file()))) {", "+              nextNewline = defsText.indexOf('\\n', offset);", "+              if (nextNewline != -1) {", "+                curLine++;", "+                offset = nextNewline + 1;", "+              }", "+            }", "-        int fileEndIndex = numProcessed;", "+        int fileEndIndex = curError;"]}], "num": 2924}
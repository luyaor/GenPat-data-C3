{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "023c700ad381278f33824644a54303d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02fbb05b134afc725fa5257c5d4a3321", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "7a303c2457f60ceae3b286a0d52733d97d66ab81", "commitAfterChange": "9108351d513a4731c267552ef465d97c8fa5e468", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "signatureAfterChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "diff": ["-            _log.log(\"Not augmenting \" + f + \" no mediator\");", "+\t    // _log.log(\"Not augmenting \" + f + \" no mediator\");", "-            _log.log(\"Augmenting the source file \" + sf);", "+            // _log.log(\"Augmenting the source file \" + sf);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c35d05daee1669007f0650e102c17809", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testFindPrevDelimiter() throws BadLocationException", "signatureAfterChange": "   public void testFindPrevDelimiter() throws BadLocationException", "diff": ["-    _setDocText(\"foo();\\nfor(;;)\\n\");", "-    assertEquals(\"Check that delimiters in paren phrases \" +", "-                 \"can be detected\",", "-                 12,", "-                 _doc.findPrevDelimiter(14, delimiters1, false));", "+// Commented out because this behavior is undesirable!  Preceding chars enclosed in parens should not be visible!    ", "+//    _setDocText(\"foo();\\nfor(;;)\\n\");", "+//    assertEquals(\"Check that delimiters in paren phrases \" +", "+//                 \"can be detected\",", "+//                 12,", "+//                 _doc.findPrevDelimiter(14, delimiters1, false));"]}], "num": 9643}
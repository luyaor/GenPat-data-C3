{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b29b582bc90ed94de3b2499e29983fba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d562246671855048af5cb9cfef2889", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "0d6a1751a06319b8d446186ea0aafba68239ee0c", "commitAfterChange": "50d54a2cc075d489d4814ce780949e6748ba1350", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "    private void _updateWatches()", "signatureAfterChange": "    private void _updateWatches()", "diff": ["+    if (!isReady() || (_thread == null)) return;", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a173277b28fcb89e9a86c49c634d7e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "   public TypeData forStringLiteralOnly(StringLiteral that)", "signatureAfterChange": "   public TypeData forStringLiteralOnly(StringLiteral that)", "diff": ["+    assert symbolTable.get(\"java.lang.String\") != null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e46147b86be333276e5b91248f791788", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "1a00210ae1e41be9246fee06894f37a248cf99ce", "commitAfterChange": "ab8f72f86c6d8f3288d1ca14d0e3a244649e4202", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void setUp() throws Exception", "signatureAfterChange": "   public void setUp() throws Exception", "diff": ["+    debug.logStart();", "+    _log.log(\"Setting up \" + this);", "+    _model = new TestGlobalModel();", "-        try {", "-          debug.logStart();", "-          _log.log(\"Setting up \" + this);", "-          _model = new TestGlobalModel();", "-          // ensure that the JVM is ready to run; the GlobalModelJUnitTest test cases sometimes received a", "-          // late _junitModel.junitJVMReady() notification after the unit tests had already been started, and", "-          // that was interpreted as trying to start JUnit tests while tests were already running.", "-          _model.ensureJVMStarterFinished();", "-          // create an interactions pane which is essential to the function of the interactions model; ", "-          _interactionsController =  // InteractionsController constructor creates an interactions pane", "-            new InteractionsController(_model.getInteractionsModel(), _model.getSwingInteractionsDocument(),", "-                                       new Runnable() { public void run() { } });", "-          _log.log(\"Global model created for \" + this);", "-          DrJava.getConfig().resetToDefaults();", "-          String user = System.getProperty(\"user.name\");", "-          ", "-          _tempDir = /* IOUtil.createAndMarkTempDirectory */ FileOps.createTempDirectory(\"DrJava-test-\" + user /*, \"\"*/);", "-//          System.err.println(\"Temp Directory is \" + _tempDir.getAbsolutePath());", "-          ", "-          _model.setResetAfterCompile(false);", "-          _log.log(\"Completed (GlobalModelTestCase) set up of \" + this);", "-          debug.logEnd();", "-          ", "-//          _model.getOpenDefinitionsDocuments().get(0).saveFile(new FileSelector(new File(_tempDir, \"blank document\")));", "-        }", "+        // ensure that the JVM is ready to run; the GlobalModelJUnitTest test cases sometimes received a", "+        // late _junitModel.junitJVMReady() notification after the unit tests had already been started, and", "+        // that was interpreted as trying to start JUnit tests while tests were already running.", "+        _model.ensureJVMStarterFinished();", "+        // create an interactions pane which is essential to the function of the interactions model; ", "+        _interactionsController =  // InteractionsController constructor creates an interactions pane", "+          new InteractionsController(_model.getInteractionsModel(),", "+                                     _model.getSwingInteractionsDocument(),", "+                                     new Runnable() { public void run() { } });", "+        _log.log(\"Global model created for \" + this);", "+        DrJava.getConfig().resetToDefaults();", "+        String user = System.getProperty(\"user.name\");", "+        try { _tempDir = FileOps.createTempDirectory(\"DrJava-test-\" + user /*, \"\"*/); }", "+        ", "+    Utilities.clearEventQueue(); // Let some pending event queue operations complete", "+    _model.setResetAfterCompile(false);", "+    ", "+    _log.log(\"Completed (GlobalModelTestCase) set up of \" + this);", "+    debug.logEnd();"]}], "num": 14173}
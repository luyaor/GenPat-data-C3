{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dab7cedad3ce09806a4c7891dd88f238", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e514e12537f50e34560d3921950cb85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "          @Override public Void visit(FieldDeclaration node)", "signatureAfterChange": "          @Override public Void visit(FieldDeclaration node)", "diff": ["-          setErrorStrings(node, ts.userRepresentation(initT), ts.userRepresentation(expectedT));", "+          TypeSystem.TypePrinter printer = ts.typePrinter();", "+          setErrorStrings(node, printer.print(initT), printer.print(expectedT));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8019b9bbdf53d855ab36ec1308f8810c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "     @Override public Type visit(SimpleAssignExpression node)", "signatureAfterChange": "     @Override public Type visit(SimpleAssignExpression node)", "diff": ["-        setErrorStrings(node, ts.userRepresentation(rightT),", "-                        ts.userRepresentation(target));", "+        TypePrinter printer = ts.typePrinter();", "+        setErrorStrings(node, printer.print(rightT), printer.print(target));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ea8f2331318acf3e3bf4226dc79823b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     @Override public Type visit(ArrayInitializer node)", "signatureAfterChange": "     @Override public Type visit(ArrayInitializer node)", "diff": ["-          setErrorStrings(exp, ts.userRepresentation(expT), ts.userRepresentation(elementType));", "+          TypePrinter printer = ts.typePrinter();", "+          setErrorStrings(exp, printer.print(expT), printer.print(elementType));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5dd1794da5fc31abf9326a571c12c05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "     @Override public Type visit(CastExpression node)", "signatureAfterChange": "     @Override public Type visit(CastExpression node)", "diff": ["-        setErrorStrings(node, ts.userRepresentation(fromT), ts.userRepresentation(t));", "+        TypePrinter printer = ts.typePrinter();", "+        setErrorStrings(node, printer.print(fromT), printer.print(t));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ada978e970405ae3698a14eb057cc84d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @Override public TypeContext visit(VariableDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(VariableDeclaration node)", "diff": ["-          setErrorStrings(node, ts.userRepresentation(initT), ts.userRepresentation(t));", "+          TypePrinter printer = ts.typePrinter();", "+          setErrorStrings(node, printer.print(initT), printer.print(t));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85840e855eb8e6b582bf84507125fed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "     private Type handleRelationalExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleRelationalExpression(BinaryExpression node)", "diff": ["-        setErrorStrings(node, ts.userRepresentation(getType(node.getLeftExpression())),", "-                        ts.userRepresentation(getType(node.getRightExpression())));", "+        TypePrinter printer = ts.typePrinter();", "+        setErrorStrings(node, printer.print(getType(node.getLeftExpression())),", "+                        printer.print(getType(node.getRightExpression())));"]}], "num": 20906}
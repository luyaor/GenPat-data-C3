{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69e0bca3d5e6eeb245c80c77589b944f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d4b0c939b20c7d25d0a6a7afd97c968", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "12434dc2dab84dfe1024e2e2b39fd8f27da62bbd", "commitAfterChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testNonStaticWatches() throws Exception", "signatureAfterChange": "   public void testNonStaticWatches() throws Exception", "diff": ["-   */", "+    */", "+    ", "+    final String monkey = MONKEY_WITH_INNER_CLASS;", "-    OpenDefinitionsDocument doc = _startupDebugger(\"Monkey.java\",", "-                                                   MONKEY_WITH_INNER_CLASS);", "+    OpenDefinitionsDocument doc = _startupDebugger(\"Monkey.java\", monkey);", "-    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 12;\"), 10, true);", "-    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"System.out.println(\\\"localVar = \\\" + localVar);\"), 32, true);", "+    _debugger.toggleBreakpoint(doc, monkey.indexOf(\"innerMethodFoo = 12;\"), 10, true);", "+    _debugger.toggleBreakpoint(doc, monkey.indexOf(\"System.out.println(\\\"localVar = \\\" + localVar);\"), 32, true);", "-    _log.log(\"first step\");", "+//    _log.log(\"first step\");", "-    _log.log(\"second step in \" + this);", "+//    _log.log(\"second step in \" + this);", "-      _log.log(\"third step in \" + this);", "+//      _log.log(\"third step in \" + this);", "-    _log.log(\"fourth step in \" + this);", "+//    _log.log(\"fourth step in \" + this);", "-    _log.log(\"fifth step in \" + this);", "+//    _log.log(\"fifth step in \" + this);", "-      _log.log(\"sixth step in \" + this);", "+//      _log.log(\"sixth step in \" + this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff6593c18c9a15e14d901e4ec2832ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "5402d816f4ee865f7ec73de4093cafaa0c215bb0", "commitAfterChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public synchronized void testStepIntoBreakpoint()      throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testStepIntoOverBreakpoint()      throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-  public synchronized void testStepIntoBreakpoint() ", "+  public synchronized void testStepIntoOverBreakpoint() ", "-      System.out.println(\"----testStepIntoBreakpoint----\");", "+      System.out.println(\"----testStepIntoOverBreakpoint----\");", "-    File aDir = new File(_tempDir, \"a\");", "-    aDir.mkdir();", "-    File file = new File(aDir, \"DrJavaDebugClassWithPackage.java\");", "-    OpenDefinitionsDocument doc = doCompile(DEBUG_CLASS_WITH_PACKAGE, file);", "+    File file = new File(_tempDir, \"DrJavaDebugClass.java\");", "+    OpenDefinitionsDocument doc = doCompile(DEBUG_CLASS, file);", "-    _debugger.toggleBreakpoint(doc,DEBUG_CLASS_WITH_PACKAGE.indexOf(\"foo line 1\"), 4);", "-    _debugger.toggleBreakpoint(doc,DEBUG_CLASS_WITH_PACKAGE.indexOf(\"foo line 2\"), 5);", "+    _debugger.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"Foo Line 1\"), 3);", "+    _debugger.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"bar();\\n\"), 4);", "-      interpretIgnoreResult(\"new a.DrJavaDebugClassWithPackage().foo()\");", "+      interpretIgnoreResult(\"new DrJavaDebugClass().foo()\");", "-    assertInteractionsDoesNotContain(\"foo line 1\");", "+    assertInteractionsDoesNotContain(\"Foo Line 1\");", "-    assertInteractionsContains(\"foo line 1\");", "-    assertInteractionsDoesNotContain(\"foo line 2\");", "+    assertInteractionsContains(\"Foo Line 1\");", "-    synchronized(_notifierLock){", "+    synchronized(_notifierLock) {", "-    assertInteractionsContains(\"foo line 2\");"]}], "num": 2124}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87a575bad9613a67b5f27a5ca299f659", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9559bad9ea7b9022cf09288f1ffd1d2e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "72a0d444dc62ca781c9b91acdee71819a6f4cdd3", "commitAfterChange": "7144a04f8cef658fdd6189df9de3fd59eb678bec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void setUp() throws Exception", "signatureAfterChange": "   public void setUp() throws Exception", "diff": ["-    debug.logStart();", "-    _log.log(\"Setting up \" + this);", "-    super.setUp();  // declared to throw Exception", "-    _model = new TestGlobalModel();", "-    // ensure that the JVM is ready to run; the GlobalModelJUnitTest test cases sometimes received a", "-    // late _junitModel.junitJVMReady() notification after the unit tests had already been started, and", "-    // that was interpreted as trying to start JUnit tests while tests were already running.", "-    _model.ensureJVMStarterFinished();", "-    // create an interactions pane which is essential to the function of the interactions model; ", "-    _interactionsController =  // InteractionsController constructor creates an interactions pane", "-      new InteractionsController(_model.getInteractionsModel(), _model.getSwingInteractionsDocument(),", "-                                 new Runnable() { public void run() { } });", "-    _log.log(\"Global model created for \" + this);", "-    DrJava.getConfig().resetToDefaults();", "-    String user = System.getProperty(\"user.name\");", "-    ", "-    _tempDir = /* IOUtil.createAndMarkTempDirectory */ FileOps.createTempDirectory(\"DrJava-test-\" + user /*, \"\"*/);", "-//    System.err.println(\"Temp Directory is \" + _tempDir.getAbsolutePath());", "-    ", "-    _model.setResetAfterCompile(false);", "-    _log.log(\"Completed (GlobalModelTestCase) set up of \" + this);", "-    debug.logEnd();", "-    ", "-//    _model.getOpenDefinitionsDocuments().get(0).saveFile(new FileSelector(new File(_tempDir, \"blank document\")));", "-//    super.setUp();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          debug.logStart();", "+          _log.log(\"Setting up \" + this);", "+          _model = new TestGlobalModel();", "+          // ensure that the JVM is ready to run; the GlobalModelJUnitTest test cases sometimes received a", "+          // late _junitModel.junitJVMReady() notification after the unit tests had already been started, and", "+          // that was interpreted as trying to start JUnit tests while tests were already running.", "+          _model.ensureJVMStarterFinished();", "+          // create an interactions pane which is essential to the function of the interactions model; ", "+          _interactionsController =  // InteractionsController constructor creates an interactions pane", "+            new InteractionsController(_model.getInteractionsModel(), _model.getSwingInteractionsDocument(),", "+                                       new Runnable() { public void run() { } });", "+          _log.log(\"Global model created for \" + this);", "+          DrJava.getConfig().resetToDefaults();", "+          String user = System.getProperty(\"user.name\");", "+          ", "+          _tempDir = /* IOUtil.createAndMarkTempDirectory */ FileOps.createTempDirectory(\"DrJava-test-\" + user /*, \"\"*/);", "+//          System.err.println(\"Temp Directory is \" + _tempDir.getAbsolutePath());", "+          ", "+          _model.setResetAfterCompile(false);", "+          _log.log(\"Completed (GlobalModelTestCase) set up of \" + this);", "+          debug.logEnd();", "+          ", "+//          _model.getOpenDefinitionsDocuments().get(0).saveFile(new FileSelector(new File(_tempDir, \"blank document\")));", "+        }", "+        catch(IOException e) {", "+          fail(\"IOException thrown with traceback: \\n\" + e);", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b23091d64d1ccc61fc344a01a713c67c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigatorTest.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setUp() throws Exception", "signatureAfterChange": "      public void setUp() throws Exception", "diff": ["+    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "-    File f = File.createTempFile(\"project-\",\".pjt\").getCanonicalFile();", "-    tree = new JTreeSortNavigator<DummyINavigatorItem>(f.getCanonicalPath());", "-    ", "-    tree.addTopLevelGroup(\"[ Source Files ]\", new INavigatorItemFilter<INavigatorItem>(){", "-      public boolean accept(INavigatorItem n) { return true; }", "+        try {", "+          File f = File.createTempFile(\"project-\",\".pjt\").getCanonicalFile();", "+          tree = new JTreeSortNavigator<DummyINavigatorItem>(f.getCanonicalPath());", "+          ", "+          tree.addTopLevelGroup(\"[ Source Files ]\", new INavigatorItemFilter<INavigatorItem>(){", "+            public boolean accept(INavigatorItem n) { return true; }", "+          });", "+          i1 = new DummyINavigatorItem(\"item1\");", "+          i2 = new DummyINavigatorItem(\"item2\");", "+          i3 = new DummyINavigatorItem(\"item1\");", "+          i4 = new DummyINavigatorItem(\"item2\");", "+          tree.addDocument(i1, \"folder1\");", "+          tree.addDocument(i2, \"folder1\");", "+          tree.addDocument(i3, \"folder2\");", "+          tree.addDocument(i4, \"folder2\");", "+          ", "+          root = (DefaultMutableTreeNode)tree.getModel().getRoot();", "+          source = (DefaultMutableTreeNode)root.getChildAt(0);", "+          folder1 = (DefaultMutableTreeNode)source.getChildAt(0);", "+          folder2 = (DefaultMutableTreeNode)source.getChildAt(1);", "+          ", "+          projName = root.toString();", "+        }", "+        catch(Exception e) { throw new UnexpectedException(e); }", "+      }", "-    i1 = new DummyINavigatorItem(\"item1\");", "-    i2 = new DummyINavigatorItem(\"item2\");", "-    i3 = new DummyINavigatorItem(\"item1\");", "-    i4 = new DummyINavigatorItem(\"item2\");", "-    tree.addDocument(i1, \"folder1\");", "-    tree.addDocument(i2, \"folder1\");", "-    tree.addDocument(i3, \"folder2\");", "-    tree.addDocument(i4, \"folder2\");", "-    ", "-    root = (DefaultMutableTreeNode)tree.getModel().getRoot();", "-    source = (DefaultMutableTreeNode)root.getChildAt(0);", "-    folder1 = (DefaultMutableTreeNode)source.getChildAt(0);", "-    folder2 = (DefaultMutableTreeNode)source.getChildAt(1);", "-    ", "-    projName = root.toString();"]}], "num": 18865}
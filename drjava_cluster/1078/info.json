{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "343925fedc8db994d1db9a2e25027a16", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35a255cf953a61ec480093cce1f3971a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 34, "signatureBeforeChange": "   final public TypeDeclaration typeDeclaration() throws ParseException", "signatureAfterChange": "   final public TypeDeclaration typeDeclaration() throws ParseException", "diff": ["-    if (jj_2_6(2147483647)) {", "-      node = classDeclaration();", "-    } else if (jj_2_7(2147483647)) {", "-      node = interfaceDeclaration();", "-    } else {", "-      jj_consume_token(-1);", "-      throw new ParseException();", "+    try {", "+      if (jj_2_6(2147483647)) {", "+        node = classDeclaration();", "+      } else if (jj_2_7(2147483647)) {", "+        node = interfaceDeclaration();", "+      } else {", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+        {if (true) return node;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"invalid declaration\");", "-      {if (true) return node;}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "721f82aa86de60d239aa7f61e7ab3a74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "   final public Node topLevelStatement() throws ParseException", "signatureAfterChange": "   final public Node topLevelStatement() throws ParseException", "diff": ["-    if (jj_2_5(2)) {", "-      node = labeledStatement();", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case LBRACE:", "-        node = block();", "-        break;", "-      case SEMICOLON:", "-        node = emptyStatement();", "-        break;", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FALSE:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case SHORT:", "-      case SUPER:", "-      case THIS:", "-      case TRUE:", "-      case VOID:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case BANG:", "-      case TILDE:", "-      case INCREMENT:", "-      case DECREMENT:", "-      case PLUS:", "-      case MINUS:", "-        node = expression();", "-        jj_consume_token(SEMICOLON);", "-        break;", "-      case IF:", "-        node = ifStatement();", "-        break;", "-      case WHILE:", "-        node = whileStatement();", "-        break;", "-      case DO:", "-        node = doStatement();", "-        break;", "-      case SWITCH:", "-        node = switchStatement();", "-        break;", "-      case FOR:", "-        node = forStatement();", "-        break;", "-      case BREAK:", "-        node = breakStatement();", "-        break;", "-      case CONTINUE:", "-        node = continueStatement();", "-        break;", "-      case RETURN:", "-        node = returnStatement();", "-        break;", "-      case THROW:", "-        node = throwStatement();", "-        break;", "-      case SYNCHRONIZED:", "-        node = synchronizedStatement();", "-        break;", "-      case TRY:", "-        node = tryStatement();", "-        break;", "-      default:", "-        jj_la1[5] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+    try {", "+      if (jj_2_5(2)) {", "+        node = labeledStatement();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LBRACE:", "+          node = block();", "+          break;", "+        case SEMICOLON:", "+          node = emptyStatement();", "+          break;", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case BANG:", "+        case TILDE:", "+        case INCREMENT:", "+        case DECREMENT:", "+        case PLUS:", "+        case MINUS:", "+          node = expression();", "+          jj_consume_token(SEMICOLON);", "+          break;", "+        case IF:", "+          node = ifStatement();", "+          break;", "+        case WHILE:", "+          node = whileStatement();", "+          break;", "+        case DO:", "+          node = doStatement();", "+          break;", "+        case SWITCH:", "+          node = switchStatement();", "+          break;", "+        case FOR:", "+          node = forStatement();", "+          break;", "+        case BREAK:", "+          node = breakStatement();", "+          break;", "+        case CONTINUE:", "+          node = continueStatement();", "+          break;", "+        case RETURN:", "+          node = returnStatement();", "+          break;", "+        case THROW:", "+          node = throwStatement();", "+          break;", "+        case SYNCHRONIZED:", "+          node = synchronizedStatement();", "+          break;", "+        case TRY:", "+          node = tryStatement();", "+          break;", "+        default:", "+          jj_la1[5] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+        {if (true) return node;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid top level statement\");", "-      {if (true) return node;}"]}], "num": 1078}
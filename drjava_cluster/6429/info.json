{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae1a36b7f226e443e44c6e2490f13230", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af1753ee05b74911a830ee50c62b4c33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static void main(String[] args)", "signatureAfterChange": "   public static void main(String[] args)", "diff": ["+    ", "+    _log.log(\"Slave JVM has started with args \" + Arrays.toString(args));", "-        IRemoteClassLoader remote = null;", "+        IRemoteClassLoader remoteLoader = null;", "-        remote = (IRemoteClassLoader) ostream.readObject();", "+        _log.log(\"Slave JVM reading remote loader object\");", "+        remoteLoader = (IRemoteClassLoader) ostream.readObject();", "+        _log.log(\"remote loader read\");", "-          loader.setMasterRemote(remote);", "+          loader.setMasterRemote(remoteLoader);", "+        _log.log(\"remote loader installed\");", "+      _log.log(\"Slave JVM reading the remote master object\");", "-      MasterRemote remote = (MasterRemote) ostream.readObject();", "+      MasterRemote master = (MasterRemote) ostream.readObject();", "+      _log.log(\"remote master read\");", "+      fstream.close();", "+      ostream.close();", "+        _log.log(\"Slave JVM creating singleton instance of slave class \" + args[1]);", "-        SlaveRemote stub = (SlaveRemote) UnicastRemoteObject.exportObject(slave);", "+        _log.log(\"Slave JVM creaing RMI stub for slave class instance \" + slave);", "+        SlaveRemote stub = (SlaveRemote) UnicastRemoteObject.exportObject(slave);  // What does this do?", "+        _log.log(\"stub for slave class exported\");", "-        slave.start(remote);", "-        remote.registerSlave(slave);", "+        _log.log(\"Slave JVM invoking the method start(\" + master + \") in the Slave JVM class\");", "+        slave.start(master);", "+        _log.log(\"Slave JVM invoking the method registerSlave(\" + slave + \") in the Master JVM\");", "+        master.registerSlave(slave);", "+        _log.log(\"Slave JVM could not intstantiate slave class and will exit\");", "-          remote.errorStartingSlave(t);", "+          master.errorStartingSlave(t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e16a10ea8c8c298564bdff3c1c51c8aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public synchronized static void main(String[] args)", "signatureAfterChange": "   public synchronized static void main(String[] args)", "diff": ["+      ", "+      _notDone = true;", "-//      // Loading the class that intermittently hangs first readObject(...) call below", "-//      Class psi = Class.forName(\"java.net.PlainSocketImpl\");", "-      ", "+", "-/* The following code currently breaks unit tests (and perhaps DrJava) when it detects the hanging", "+/* The following code currently breaks unit tests and DrJava itself when it detects the hanging", "- * of exit.  Before code can be commented in, variable masterRemote must be converted to field _masterRemote. */", "+ * of exit.  */", "+//          ", "-//          if (_masterRemote == null) {", "+//          if (_notDone) {", "-", "+      ", "+      // Loading the class that intermittently hangs first readObject(...) call below", "+      Class psi = Class.forName(\"java.net.PlainSocketImpl\");", "+        ", "-      _log.log(\"Slave JVM completed reading \" + masterRemote);", "+      _notDone = false;", "+      _log.log(\"SlaveJVMRunner completed reading \" + masterRemote);", "-  ", "+      AbstractSlaveJVM slave = null;", "+", "-        AbstractSlaveJVM slave = _getInstance(slaveClass);", "+        slave = _getInstance(slaveClass);", "-        _log.log(\"Slave JVM exported stub \" + slaveRemote);", "+        _log.log(\"SlaveJVMRunner exported stub \" + slaveRemote);", "-        _log.log(\"Slave JVM invoking the method registerSlave(\" + slave + \") in the Master JVM\");", "-        masterRemote.registerSlave(slaveRemote);", "+        _log.log(\"SlaveJVMRunner invoking the method registerSlave(\" + slave + \") in the Master JVM\");", "+        masterRemote.registerSlave(slave);", "-        _log.log(\"Slave JVM could not intstantiate slave class.  Threw exception: \" + e);", "+        _log.log(\"SlaveJVMRunner could not instantiate and start slave class '\" + slave + \"'.  Threw exception: \" + e);", "-          String msg = \"Couldn't instantiate and register the slave.\\n\" +", "+          String msg = \"SlaveJVMRunner could not instantiate and register the slave.\\n\" +", "-      _showErrorMessage(\"Could not set up the Slave JVM.\", e);", "-      _log.log(\"Could not set up the Slave JVM. Calling System.exit(2) in response to: \" + e);", "+      _showErrorMessage(\"SlaveJVMRunner could not set up the Slave JVM.\", e);", "+      _log.log(\"SlaveJVMRunner could not set up the Slave JVM. Calling System.exit(2) in response to: \" + e);"]}], "num": 6429}
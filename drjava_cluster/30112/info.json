{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79636fa70f288cd7fbd710705c17c57f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ec85ae2f03086a9ba39b3fd7498ae6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "          public void testForNumericAssignmentExpression()", "signatureAfterChange": "          public void testForNumericAssignmentExpression()", "diff": ["-      ComplexNameReference nf = new ComplexNameReference(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"Ned\")), new Word(JExprParser.NO_SOURCE_INFO, \"Flanders\"));", "-      NumericAssignmentExpression na = new MinusAssignmentExpression(JExprParser.NO_SOURCE_INFO, nf, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "+      ComplexNameReference nf = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Ned\")), new Word(SourceInfo.NO_INFO, \"Flanders\"));", "+      NumericAssignmentExpression na = new MinusAssignmentExpression(SourceInfo.NO_INFO, nf, new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      NumericAssignmentExpression na2 = new ModAssignmentExpression(JExprParser.NO_SOURCE_INFO, nf, nf);", "+      NumericAssignmentExpression na2 = new ModAssignmentExpression(SourceInfo.NO_INFO, nf, nf);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e13706d75c35ff6663d7793a7309cc52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsCurlyTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testWithParen() throws BadLocationException", "signatureAfterChange": "      public void testWithParen() throws BadLocationException", "diff": ["-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START has no brace.\", ! _rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 18, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is curly brace.\", _rule.applyRule(_doc, 19, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", ! _rule.testApplyRule(_doc, 18, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is curly brace.\", _rule.testApplyRule(_doc, 19, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is open curly brace.\", !_rule.applyRule(_doc, _text.length() - 2, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is open curly brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is open curly brace.\", ! _rule.testApplyRule(_doc, _text.length() - 2, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is open curly brace.\", ! _rule.testApplyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is open curly brace.\", _rule.applyRule(_doc, 14, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is open curly brace.\", _rule.applyRule(_doc, 22, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", !_rule.applyRule(_doc, 23, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is open curly brace.\", _rule.testApplyRule(_doc, 14, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is open curly brace.\", _rule.testApplyRule(_doc, 22, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", !_rule.testApplyRule(_doc, 23, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is open bracket.\", !_rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 28, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 30, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is open bracket.\", !_rule.testApplyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.testApplyRule(_doc, 28, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.testApplyRule(_doc, 30, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.testApplyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));"]}], "num": 30112}
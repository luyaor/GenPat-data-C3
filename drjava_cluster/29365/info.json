{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3f3bfd3c315388385dc32bd69bd5d24", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "096d0a2a86023de2cd344da6bdacbd1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/FileOptionComponent.java", "commitBeforeChange": "ea58ebfcec38aad3c446138f5dc29fb9b0bd55b4", "commitAfterChange": "a36f036fed8dd7a9755b2c0fd88168156b516121", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public FileOptionComponent (FileOption opt, String text,                               Frame parent, JFileChooser jfc)", "signatureAfterChange": "    public FileOptionComponent (FileOption opt, String text,                               Frame parent, JFileChooser jfc)", "diff": ["-    _component.setFileField(DrJava.getConfig().getSetting(_option));", "+    File setting = DrJava.getConfig().getSetting(_option);", "+    if (setting != _option.getDefault()) {", "+      _component.setFileField(setting);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ea40d272c03edf3ffad78df9cb40bfb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionEvaluator.java", "commitBeforeChange": "6b388fb1877469cd91350296fabdf9fe8d522b74", "commitAfterChange": "b5cc61b9509dcda722d6dd7d5605a055e9915381", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "      @Override public Box<Object> visit(SimpleFieldAccess node)", "signatureAfterChange": "      @Override public Box<Object> visit(SimpleFieldAccess node)", "diff": ["-      return getField(node).boxForReceiver(_bindings.getThis(getDJClass(node)));", "+      Object receiver = hasDJClass(node) ? _bindings.getThis(getDJClass(node)) : null;", "+      return getField(node).boxForReceiver(receiver);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10f65ab3ad5d0d217822ac544237c81d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data)", "signatureAfterChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, SymbolData enclosing)", "diff": ["-  public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data) {", "+  public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, SymbolData enclosing) {", "-    // No need to resolve the super class of the type being instantiated, because it is a complex type, so its enclosing ", "-    // data should get added to the symbolTable along with it wherever we resolved its enclosing data.", "-    ", "-    // Originally, make super class null.  This will be updated in the TypeChecker pass.", "-    anonymousClassInstantiationHelper(that, data, null);", "-    ", "+    String superName = that.getType().getName();", "+    anonymousClassInstantiationHelper(that, enclosing, superName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11ac921f4a282a206bb71d206378b587", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelControl.java", "commitBeforeChange": "25c6efa4fee666f10304502f8f42fa30cbab79a2", "commitAfterChange": "e193e4674aaab3350b36cbc521ecf3bf9c098bc6", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public int absOffset()", "signatureAfterChange": "   public int absOffset()", "diff": ["-  public int absOffset() { return _rmc.absOffset(); }", "+  public int absOffset() {", "+    int offset = _rmc.absOffset();", "+    assert offset == _rmb.absOffset();", "+    return offset; ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1604fde8998871187acf8fe207874379", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/SingleDisplayModel.java", "commitBeforeChange": "7bb32c28070a4b5d5697c7c88ea0d664289c76e8", "commitAfterChange": "b2ad80c49aaa09f293a5bc1f6664d4cc5243219e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public boolean closeAllFiles()", "signatureAfterChange": "   public boolean closeAllFiles()", "diff": ["-    return super.closeAllFiles();", "+    _isClosingAllDocs = true;", "+    boolean success = super.closeAllFiles();", "+    _isClosingAllDocs = false;", "+", "+    _ensureNotEmpty();", "+    setActiveDocument(0);", "+    return success;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1797583eb7f49956900cdcc2eef04e91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementEvaluator.java", "commitBeforeChange": "12b972c6351f6122675c003ccbc59ef481c89cda", "commitAfterChange": "b10686f6739b4554b283179f3edc2b09ee48a09a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "    @Override public Result visit(VariableDeclaration node)", "signatureAfterChange": "    @Override public Result visit(VariableDeclaration node)", "diff": ["-    RuntimeBindings newB = new RuntimeBindings(_bindings, getVariable(node), null);", "+    // even when an initializer is present, there may be a reference to the uninitialized", "+    // variable in the initializer", "+    Object init = SymbolUtil.initialValue(getErasedType(node).value());", "+    RuntimeBindings newB = new RuntimeBindings(_bindings, getVariable(node), init);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "256dbd4a9433466565c62cee56c39aac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "65fb8db1fb3e7570ae4fa352a26deb0e151b48ac", "commitAfterChange": "d933be24919e2ab110f61a795910708e74f868c4", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "   private String _createErrorMessage(MethodData md)", "signatureAfterChange": "   private String _createErrorMessage(MethodData md)", "diff": ["-      if (i > 0) {", "-        message.append(\",\");", "+      VariableData p = params[i];", "+      if (p != null && p.getType() != null) {", "+        if (i > 0) {", "+          message.append(\",\");", "+        }", "+        message.append(\" \" + p.getType().getName());", "-      message.append(\" \" + params[i].getType().getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39d7c4d123fb299ca4dc11affaf26da0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "ed1ea134c7261acf3843494210d96fbd7bd01666", "commitAfterChange": "3b895d570aa118c72b953464a0bcdde40bd40ffd", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public OpenDefinitionsDocument openFile(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public OpenDefinitionsDocument openFile(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-      _editorKit.read(new FileReader(file), tempDoc, 0);", "+      FileReader reader = new FileReader(file);", "+      _editorKit.read(reader, tempDoc, 0);", "+      reader.close(); // win32 needs readers closed explicitly!", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0ba360782267e74959c648dfc2264c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorHandler.java", "commitBeforeChange": "6d214db24b68a17f17e0cc8f3030a6df6dfa9e3d", "commitAfterChange": "b1335a3b17a414ac9a5047d93a0387148d0d6ac9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static void record(Throwable thrown)", "signatureAfterChange": "   public static void record(Throwable thrown)", "diff": ["-      new DrJavaErrorPopup(DrJavaErrorWindow.getFrame(), thrown).setVisible(true);", "+      DrJavaErrorPopup popup = new DrJavaErrorPopup(DrJavaErrorWindow.getFrame(), thrown);", "+      MainFrame.setPopupLoc(popup);", "+      popup.setVisible(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f80eac1e466508ba1a86664567fb710", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "1c36c4f5a2718b62938a20268edf5b2f24819a2b", "commitAfterChange": "25faf15b00b7a598b085089c43f0beac765b2716", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "diff": ["-    try { return new ProcessTaskController<Remote>(jvmBuilder, DIRECT_EXECUTOR, task, onExit).get(); }", "+    // no need to spawn a thread if we don't need to wait for the process to quit", "+    Executor exec = (onExit == null) ? DIRECT_EXECUTOR : THREAD_EXECUTOR;", "+    try { return new ProcessTaskController<Remote>(jvmBuilder, exec, task, onExit).get(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4701d8f562cf95e4e83045b3a216c959", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerProxy.java", "commitBeforeChange": "8c2314b5dfceee12617fb14cefef6ab6a1e38ab8", "commitAfterChange": "d49cbdbddda87e8c405e1611614405c2c7bd203d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public CompilerError[] compile(File sourceRoot, File[] files)", "signatureAfterChange": "   public CompilerError[] compile(File sourceRoot, File[] files)", "diff": ["-    return _realCompiler.compile(sourceRoot, files);", "+    CompilerError[] ret =  _realCompiler.compile(sourceRoot, files);", "+    _recreateCompiler();", "+    return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a9e3652f3834235506ccb4516b30d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "e1cae1f7b6aae460aab41e86b032251abb119211", "commitAfterChange": "d1929cdbc61164d9dd0af29defc1992f3c759cb6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   public void removeRegions(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public void removeRegions(final OpenDefinitionsDocument doc)", "diff": ["-//    System.err.println(\"Removing ODD \" + doc + \" in \" + this);", "+//    System.err.println(\"Removing regions from ODD \" + doc + \" in \" + this);", "+//    System.err.println(\"_documents = \" + _documents);", "+//    System.err.println(\"ODD \" + doc + \" exists in \" + this);", "-//      System.err.println(\"Removing document regions for \" + doc + \" in \" + this);", "-      // The following ugly line of code is dictated by the \"fail fast\" semantics of Java iterators", "-      while (! regions.isEmpty()) regions.remove(regions.first());", "+//      System.err.println(\"Before removal, regions = \" + regions);", "+      // The following ugly loop is dictated by the \"fail fast\" semantics of Java iterators", "+      while (! regions.isEmpty()) {", "+        R r = regions.first();", "+        regions.remove(r);  ", "+        _notifyRegionRemoved(r);", "+      }", "+//      System.err.println(\"After removal, regions = \" + regions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb22db049204b6796f02c80ddc62238", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69b7f744a06a218546e1e05a5acb1e8cacf5750d", "commitAfterChange": "e10e7bd83f125e1856c739971a7fde05620d52b1", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "    private void _updateWatches()", "signatureAfterChange": "    private void _updateWatches()", "diff": ["-      frames = _suspendedThreads.peek().frames();", "+      ThreadReference thread = _suspendedThreads.peek();", "+      if (thread.frameCount() <= 0 ) {", "+        printMessage(\"Could not update watch values. The current thread had no stackframes.\");", "+        return;", "+      }", "+      frames = thread.frames();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "518aa346042afa3a0da46a0c28e82c00", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "ff65482ac0c34f9d18b211e3b1fa05371a07fb91", "commitAfterChange": "43bd3e08ba052e97e1d0271e7f1e324beac2ba86", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public boolean closeFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean closeFile(OpenDefinitionsDocument doc)", "diff": ["-      if (_definitionsDocs.removeElement(doc)) {", "+      INavigatorItem idoc = _documentsRepos.removeKey(closedDoc);", "+      if (idoc != null) {", "+        _documentNavigator.removeDocument(idoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523d7d090369f1b0ef707c26e8949772", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "ce99ad77121aabff91f9c6fba762f853ca2a34f5", "commitAfterChange": "c7e182b04aa52ae1423064c733cc8609017cc26d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   protected File tempFile() throws IOException", "signatureAfterChange": "   protected File tempFile() throws IOException", "diff": ["-    return File.createTempFile(\"DrJava-test\", \".java\", _tempDir);", "+    File f = File.createTempFile(\"DrJava-test\", \".java\", _tempDir).getCanonicalFile();", "+//    System.err.println(\"temp file created with name \" + f);", "+    return f;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56a324971e1934cd4ab5c74f04e41dc7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "492227e53d4f60169465f2fd7192a458815ea62f", "commitAfterChange": "8bce57471a5d2761f2096c66cde557596d4532bf", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void updateFileTitle()", "signatureAfterChange": "   public void updateFileTitle()", "diff": ["-    String filename = _model.getDisplayFilename(_model.getActiveDocument());", "+    OpenDefinitionsDocument doc = _model.getActiveDocument();", "+    String filename = _model.getDisplayFilename(doc);", "+    _fileNameField.setText(_model.getDisplayFullPath(doc));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58b69c5cbb14d3577d84c1ed0bf12570", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "0e2962e67fbd4bb0610b6df816f609e60a33a28f", "commitAfterChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "     public static void main(String... args)", "signatureAfterChange": "          public static void main(String... args)", "diff": ["+    ", "+      OutputStream out = System.out;", "+      IOUtil.replaceSystemOut(VoidOutputStream.INSTANCE);", "-        ObjectOutputStream objOut = new ObjectOutputStream(System.out);", "+        out.write(PREFIX);", "+        ObjectOutputStream objOut = new ObjectOutputStream(out);", "-          ", "-          IOUtil.replaceSystemOut(VoidOutputStream.INSTANCE);", "-          finally { IOUtil.revertSystemOut(); }", "-      catch (IOException e) { error.log(\"Can't create or write to ObjectOutputStream\", e); }", "+      catch (IOException e) { error.log(\"Error writing to System.out\", e); }", "+      finally { IOUtil.revertSystemOut(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5adaa9757528c1e87cd5884b3eb84a5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/FunctionWrapperClass.java", "commitBeforeChange": "bb37c635695368e8cc96440bd6b6d051918112f8", "commitAfterChange": "4ebd25942c79fb901c720903ad892355732a9230", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public String fullName()", "signatureAfterChange": "   public String fullName()", "diff": ["-    // TODO: use the context to get this name instaed", "-    return _packageName + \".$\" + _name;", "+    // TODO: use the context to get this name instead", "+    String pkg = packageName();", "+    if (pkg.length() > 0) pkg += \".\";", "+    return pkg + \"$\" + _name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ef6e736caf057b34f03a4341b28214", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e99723007606c50032c4a82ba80b9d94aaabe6bc", "commitAfterChange": "958f548f8cc751514e1497672b492b70657c4b6e", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain(String qualifiedClassName) throws ClassNameNotFoundException, IOException", "diff": ["-    public void runMain() throws ClassNameNotFoundException, IOException {", "+    public void runMain(String qualifiedClassName) throws ClassNameNotFoundException, IOException {", "+      String tempClassName = null;", "+      ", "+      if(qualifiedClassName == null)", "+        tempClassName = getDocument().getQualifiedClassName();", "+      else", "+        tempClassName = qualifiedClassName;", "+      ", "-      final String className = getDocument().getQualifiedClassName();", "+      final String className = tempClassName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66ed30d909d239364d92d10785ea96d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/RMIInteractionsModel.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void setToDefaultInterpreter()", "signatureAfterChange": "   public void setToDefaultInterpreter()", "diff": ["+    // Only print prompt if we're not already the default", "+    String currName = _interpreterControl.getCurrentInterpreterName();", "+    boolean printPrompt = !MainJVM.DEFAULT_INTERPRETER_NAME.equals(currName);", "+    ", "-    _updateDocument(_document.DEFAULT_PROMPT, inProgress, true);", "+", "+    _updateDocument(_document.DEFAULT_PROMPT, inProgress, printPrompt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d97e0e2340ba6656a32dbebf3d32113", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "dff1e78708d1fc8c89ac7283a8a2c5db6fd8ed74", "commitAfterChange": "545baa1c63b7ee7d993e35e240105f7970f7c2d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Action get(KeyStroke ks)", "signatureAfterChange": "   public Action get(KeyStroke ks)", "diff": ["-    return (Action)_keyToActionMap.get(ks);", "+    KeyStrokeData ksd = (KeyStrokeData)_keyToDataMap.get(ks);", "+    if (ksd == null)", "+      return null;    ", "+    return ksd.getAction();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7954c88b7aa295d815086508be571c55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "commitAfterChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void junitOpenDefDocs(final List<OpenDefinitionsDocument> lod, final boolean allTests)", "signatureAfterChange": "   private void junitOpenDefDocs(final List<OpenDefinitionsDocument> lod, final boolean allTests)", "diff": ["-    if (_model.hasOutOfSyncDocuments(lod) || _model.hasModifiedDocuments(lod)) {", "+    final List<OpenDefinitionsDocument> outOfSync = _model.getOutOfSyncDocuments(lod);", "+    if ((outOfSync.size()>0) || _model.hasModifiedDocuments(lod)) {", "-            nonTestCase(allTests);", "+            nonTestCase(allTests, false);", "-              nonTestCase(allTests);", "+              nonTestCase(allTests, _model.getNumCompErrors() > 0);", "-      _notifyCompileBeforeJUnit(testAfterCompile);", "+      _notifyCompileBeforeJUnit(testAfterCompile, outOfSync);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "869ead94b9dc32b6dbaf155aeb197f76", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "cf30a52c1526cb702485ea2bbbc59a33efa6fbfa", "commitAfterChange": "2e4dc36e0c74c534d3da6cd41fba04222175644c", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 167, "signatureBeforeChange": "    public boolean closeAllFiles()", "signatureAfterChange": "    public boolean closeAllFiles()", "diff": ["-     return closeFiles(docs);", "+     boolean res = closeFiles(docs);", "+     if (res) resetInteractions(getWorkingDirectory());", "+     return res;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87eefa73eb4ba9a4adccd7687f46797b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69b7f744a06a218546e1e05a5acb1e8cacf5750d", "commitAfterChange": "e10e7bd83f125e1856c739971a7fde05620d52b1", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   synchronized void currThreadDied()", "signatureAfterChange": "   synchronized void currThreadDied()", "diff": ["+      ThreadReference thread = _suspendedThreads.peek();", "+      ", "-        scrollToSource(_suspendedThreads.peek().frame(0).location());", "+        if (thread.frameCount() <= 0) {", "+          printMessage(\"Could not scroll to source for \" + thread.name() + \". It has no stackframes.\");", "+        }", "+        else {", "+          scrollToSource(thread.frame(0).location());", "+        }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88713f331c2a800bb8046d5ebc945ea3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public synchronized Vector<DebugThreadData> getCurrentThreadData()", "signatureAfterChange": "   public synchronized Vector<DebugThreadData> getCurrentThreadData()", "diff": ["-    Iterator iter = _vm.allThreads().iterator();", "+    List listThreads = _vm.allThreads();", "+    /** get an iterator that filters out threads that we know are dead from the list returned ", "+     * by _vm.allThreads() ", "+     **/", "+    Iterator iter = _deadThreads.filter(listThreads).iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891fbe9f8fc0ecfcbc541f89e37914d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "dd27d69f437c114ad258abba00f7d581b096ce79", "commitAfterChange": "1e852b550a8b69787c9e44248d928487d0bf9f6e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "          public DocFile forEmpty(Empty c)", "signatureAfterChange": "          public DocFile forEmpty(Empty c)", "diff": ["-        return new DocFile(_parentDir, fname, select, scroll, active, pack);", "+        DocFile f = new DocFile(_parentDir, fname, select, scroll, active, pack);", "+        if (modDate != null) f.setSavedModDate(modDate.getTime());", "+        return f;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eddba4594d9c62ed6e4f2f58cee1a3b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/Configuration.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public <T> T setSetting(Option<T> op, T value)", "signatureAfterChange": "        public <T> T setSetting(Option<T> op, T value)", "diff": ["+    public <T> T setSetting(Option<T> op, T value) {", "+\tT ret = map.setOption(op,value);", "+\top.notifyListeners(this,value);", "+\treturn ret;", "+    }", "-  public <T> T setSetting(Option<T> op, T value) {", "-    return map.setOption(op,value);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dd9fa64d36bb514cf63189e7e4668c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/RMIInteractionsModel.java", "commitBeforeChange": "17590567cb9f06269b33249dad955c39164a9028", "commitAfterChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void setActiveInterpreter(String name, String prompt)", "signatureAfterChange": "   public void setActiveInterpreter(String name, String prompt)", "diff": ["+    String currName = _interpreterControl.getCurrentInterpreterName();", "-    _updateDocument(prompt, inProgress);", "+    _updateDocument(prompt, inProgress, !currName.equals(name));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a33cf6d5ac25cce2bb89f03a223d0254", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/jedit/src/edu/rice/cs/drjava/plugins/jedit/repl/JEditInteractionsModel.java", "commitBeforeChange": "273b9e6fd6b611d74f03283118f3b2c112f6192d", "commitAfterChange": "236aa7df79220d757b2ee9df059be4a4c3d5fd28", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void addToClassPath(Buffer b)", "signatureAfterChange": "   public void addToClassPath(Buffer b)", "diff": ["-        _interpreterControl.addClassPath(_getSourceRoot(b));", "+        String srcRoot = _getSourceRoot(b);", "+        if (srcRoot != null) {", "+          _interpreterControl.addClassPath(srcRoot);", "+        }", "+        else {", "+          replSystemOutPrint(b.getPath());", "+        }", "+      // replSystemErrPrint(ipe.getMessage());", "-      replSystemErrPrint(ipe.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae8c834299bb30c95a7f576b0ecad21c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "b0d972d74202b06a8aec19804a46939a0aac3bf3", "commitAfterChange": "f81eb3cdab335666760ab0cb868fe3567723e9df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public boolean addEdit(UndoableEdit e)", "signatureAfterChange": "   public boolean addEdit(UndoableEdit e)", "diff": ["-      return super.addEdit(e);", "+      boolean result = super.addEdit(e);", "+      _notifyUndoHappened();", "+      return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a6413a26ab14c5045974fd8431dbdc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["-   */", "+  /** Abstracted out since this is called from find and replace/find. */", "-    // FindResult contains the document that the result was found in, offset to the next occurence of ", "+    // FindResult contains the document that the result was found in, offset to the next occurrence of ", "-    OpenDefinitionsDocument openDoc = _defPane.getOpenDefDocument();", "+    OpenDefinitionsDocument matchDoc = ((DefaultSingleDisplayModel) _model).getODDForDocument(doc);", "+    OpenDefinitionsDocument openDoc = _defPane.getOpenDefDocument();", "+", "-    // If there actually *is* a match, then switch ", "-    // active documents. otherwise don't", "-    if (pos != -1) {", "+    // If there actually *is* a match, then switch active documents. otherwise don't", "+    if (pos != -1) { // found a match", "-      // XXX: this is fundamentally ugly - we should support direct, ordered", "-      //      iteration through all OpenDefinitionsDocuments.", "-      _model.setActiveDocument(((DefaultSingleDisplayModel) _model).getODDForDocument(doc));", "+      ", "+      if (! matchDoc.equals(openDoc)) {", "+        _model.setActiveDocument(matchDoc);  // set active doc if matchDoc != openDoc", "+      }", "-      } else {", "+      } ", "+      else", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c4147b8032ee3942c61152329b54a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69b7f744a06a218546e1e05a5acb1e8cacf5750d", "commitAfterChange": "e10e7bd83f125e1856c739971a7fde05620d52b1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   synchronized public void setCurrentThread(DebugThreadData threadData) throws NoSuchElementException", "signatureAfterChange": "   synchronized public void setCurrentThread(DebugThreadData threadData) throws NoSuchElementException", "diff": ["+      if( thread_ref.frameCount() <= 0 ) {", "+        printMessage(thread_ref.name() + \" could not be suspended. It had no stackframes.\");", "+        resume();", "+        return;", "+      }", "-    currThreadSet(threadData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9aff973689b9ade1b9a9fcf99f6e75e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "98199cff1a4c3f1ef86520681f1e57a0f8ce3066", "commitAfterChange": "70e840b0f758fadcf27d7a77218d5182a9597a0d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @Override public TypeContext visit(VariableDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(VariableDeclaration node)", "diff": ["+      boolean initialized = (node.getInitializer() != null);", "-      LocalVariable v = new LocalVariable(node.getName(), t, node.getModifiers().isFinal());", "+      LocalVariable v = new LocalVariable(node.getName(), t, initialized && node.getModifiers().isFinal());", "-      if (node.getInitializer() != null) {", "+      if (initialized) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bae8987e5874d0a21abf693d6d75971c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   protected File tempFile(String fileName) throws IOException", "signatureAfterChange": "   protected File tempFile(String fileName) throws IOException", "diff": ["-    return File.createTempFile(fileName, \".java\", _tempDir);", "+    File f =  File.createTempFile(fileName, \".java\", _tempDir);", "+    f.deleteOnExit();", "+    return f;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0d9864517b55100fba1b1c34efb394", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void setCurrentLocation(int loc)", "signatureAfterChange": "   public void setCurrentLocation(int loc)", "diff": ["-      synchronized(_reduced) { // locked because reading _currentLocation is not protected by locking in move", "-        move(loc - _currentLocation);  // sets _currentLocation", "+      synchronized(_reduced) {", "+        int dist = loc - _currentLocation;  // _currentLocation and _reduced can be updated asynchronously", "+        _currentLocation = loc;", "+        _reduced.move(dist);", "-  }", "+  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca2b171d2d3f5c54900ac57d541f5fa8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "7b4a527a2fd4010c88a2ef6ea8f158547b322968", "commitAfterChange": "7b22fbe0160e9fdc451caeb623e46b870b03ccd3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "    protected void assertCompileErrorsPresent(boolean b)", "signatureAfterChange": "    protected void assertCompileErrorsPresent(String name, boolean b)", "diff": ["+", "+  protected void assertCompileErrorsPresent(String name, boolean b) {", "+", "+    if (name.length() > 0) {", "+      name += \": \";", "+    }", "-    assertEquals(\"compile errors > 0? errors=\" + buf,", "+    assertEquals(name + \"compile errors > 0? errors=\" + buf,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce63713ab8cde60a32df29a28caa0004", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b1a32460e7865e87ff1cef41f79110513af4e989", "commitAfterChange": "c76fe963c6a762c896b91a64faa06b83223b5217", "methodNumberBeforeChange": 268, "methodNumberAfterChange": 268, "signatureBeforeChange": "    public MainFrame()", "signatureAfterChange": "    public MainFrame()", "diff": ["-    _recentDocFrame.pokeDocument(_model.getActiveDocument());", "+    OpenDefinitionsDocument activeDoc = _model.getActiveDocument();", "+    _recentDocFrame.pokeDocument(activeDoc);", "+    _currentDefDoc = activeDoc.getDocument();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceae73d74ee84b56784853e19f837d73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/RecursiveFileListProperty.java", "commitBeforeChange": "7fd25882874ad9a06ac74fda13ef9cc77e52813e", "commitAfterChange": "028b13db63615f9cda7227ddd738bbfc3e1c04ec", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected List<File> getList()", "signatureAfterChange": "   protected List<File> getList()", "diff": ["-    Iterable<File> it = edu.rice.cs.plt.io.IOUtil.listFilesRecursively(new File(start), fFilter, fDirFilter);", "+    File fStart = new File(start);", "+    // if the specified starting point is a directory, allow that directory", "+    if (fStart.isDirectory()) { fDirFilter.addIncludedFile(fStart); }", "+    Iterable<File> it = edu.rice.cs.plt.io.IOUtil.listFilesRecursively(fStart, fFilter, fDirFilter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfeaa9ccae13ec5e387c759f671b2a74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "commitAfterChange": "a6f0da7db6181f31273ee7bf3cfd92ed3fabb503", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private ArrayList<CompilerError> _extractErrors(LinkedList lines)", "signatureAfterChange": "   private ArrayList<CompilerError> _extractErrors(LinkedList lines)", "diff": ["+    final String BAD_FLAG_INDICATOR = \"invalid flag:\";", "+      }", "+      ", "+      // If we haven't found either, look for a bad flag report.", "+      if (errStart == -1) {", "+        errStart = output.indexOf(BAD_FLAG_INDICATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6cebff866b314dcdf7dff5b8cfc5d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "520cd2cdf6034dac2fccfb5515380300424aef81", "commitAfterChange": "ab8a89c6d648ea35429bd5ad0942dbe6617ad61f", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "     private boolean _saveAs()", "signatureAfterChange": "     private boolean _saveAs()", "diff": ["-      return _model.getActiveDocument().saveFileAs(_saveSelector);", "+      boolean toReturn = _model.getActiveDocument().saveFileAs(_saveSelector);", "+      /**", "+       * this highlights the document in the navigator", "+       */", "+      _model.setActiveDocument(_model.getActiveDocument());", "+      return toReturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dff7247348a07f81d96c2033b41ace5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/Breakpoint.java", "commitBeforeChange": "37dab6b79fc3d4e6f7b2b5f0aa53a4ea9b7f7476", "commitAfterChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    public String toString()", "signatureAfterChange": "    public String toString()", "diff": ["+    String cn = getClassName();", "+    if (_exactClassName!=null) { cn = _exactClassName.replace('$', '.'); }", "-      return \"Breakpoint[class: \" + getClassName() +", "+      return \"Breakpoint[class: \" + cn +", "-      return \"Breakpoint[class: \" + getClassName() +", "+      return \"Breakpoint[class: \" + cn +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1fd979f7b63b7c8e9d747595a645986", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "4e55340834f8e6032cf1387752575fd19cb935fe", "commitAfterChange": "de413eda4232899a577fad80816630301e25a4de", "methodNumberBeforeChange": 697, "methodNumberAfterChange": 697, "signatureBeforeChange": "   public void showTab(final Component c, boolean showDetachedWindow)", "signatureAfterChange": "   public void showTab(final Component c, boolean showDetachedWindow)", "diff": ["-            _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);  // interactions, console always shown", "+            Icon icon = (c instanceof FindResultsPanel) ? FIND_ICON : null;", "+            _tabbedPane.insertTab(tp.getName(), icon, tp, null, numVisible + 2);  // interactions, console always shown"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4db56bdc39fa710d774648e62943298", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "444cb9c318707ca2f9a6eaa5854ba2be0fcd383e", "commitAfterChange": "c21488275df662efbed39106365c897fb0dbfb85", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     private void _insertErrorText(JUnitError[] array, int i, Document doc)       throws BadLocationException", "signatureAfterChange": "     private void _insertErrorText(JUnitError[] array, int i, Document doc)       throws BadLocationException", "diff": ["+        String errorName = error.testName();", "+        if (errorName == null) {", "+          errorName = \"null\";", "+        }", "-        if (!error.testName().equals(\"\")) {", "+        if (!\"\".equals(errorName)) {", "-          doc.insertString(doc.getLength(), error.testName(), NORMAL_ATTRIBUTES);", "+          doc.insertString(doc.getLength(), errorName, NORMAL_ATTRIBUTES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7c255b0cff19cfca33368f7fcea1452", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "60798300f32b2ec4f4cff0f390993b3a5984e6c1", "commitAfterChange": "6fa1e9e0526601b88fed849b111530adacda855f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void addDebugInterpreter(String name)", "signatureAfterChange": "   public void addJavaInterpreter(String name)", "diff": ["+   */", "+  public void addJavaInterpreter(String name) {", "+    JavaInterpreter interpreter = new DynamicJavaAdapter();", "+    interpreter.addClassPath(_classpath);", "+    addInterpreter(name, interpreter);", "-   */", "-  public void addDebugInterpreter(String name) {", "-    addDebugInterpreter(name, new DynamicJavaAdapter());", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e889a324df01193465685a2d7aed6a35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "6989dd5fc1f06c1a4b2b298e19233d706afa3d5c", "commitAfterChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public synchronized void step(int flag) throws DebugException", "signatureAfterChange": "   public synchronized void step(int flag) throws DebugException", "diff": ["-      if (((StepRequest)steps.get(i)).thread().equals(_thread)) {", "-        //DrJava.consoleOut().println(\"There's already a StepRequest on the current thread\");", "-        //DrJava.consoleOut().println(\"suspendCount: \" + _thread.suspendCount());", "-        return;", "+      StepRequest step = (StepRequest)steps.get(i);", "+      if (step.thread().equals(_thread)) {", "+        if (!_thread.isSuspended())", "+          return;", "+        else {", "+          _eventManager.deleteEventRequest(step);", "+          break;", "+        }", "-    //System.out.println(\"_thread resumed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebb1618c1500d5e16aaf903867a3eba5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "e7fa83968a0076b95166203c3ff9a5bddde8dfee", "commitAfterChange": "b2bccf49a3d470addd7a5aec1fd2eaf00accbe3b", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "   @Override public Type visit(ArrayTypeName node)", "signatureAfterChange": "   @Override public Type visit(ArrayTypeName node)", "diff": ["-    return setType(node, new SimpleArrayType(elementType));", "+    Type arrayT = node.isVararg() ? new VarargArrayType(elementType) :", "+                                    new SimpleArrayType(elementType);", "+    return setType(node, arrayT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2140f81bbd52600c26b4dee3dc730d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e8f48651b4fb31b2a1907635fbd654b3f66a98b2", "commitAfterChange": "2499b0018a7f137bb1baaaf2d077c26486e3f12e", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 67, "signatureBeforeChange": "   public void saveProject(String filename) throws IOException", "signatureAfterChange": "   public void saveProject(String filename) throws IOException", "diff": ["+    // add jar main class", "+    File mainClass = getJarMainClass();", "+    //System.out.println(f);", "+    if(mainClass != null){", "+      builder.setJarMainClass(mainClass);", "+    }", "+    ", "-    setFileGroupingState(_makeProjectFileGroupingState(f, new File(filename), srcFiles));", "+    setFileGroupingState(_makeProjectFileGroupingState(mainClass, f, new File(filename), srcFiles));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8914d4ef8606600054c3b81084a5f54", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacGJCompiler.java", "commitBeforeChange": "c05ac2d48bb80dc65372963918fd5adaf608e0fe", "commitAfterChange": "344e9873c99b5d6c091b8e9d7277e515b117d21d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public CompilerError[] compile(File sourceRoot, File[] files)", "signatureAfterChange": "   public CompilerError[] compile(File sourceRoot, File[] files)", "diff": ["-    return compilerLog.getErrors();", "+    CompilerError[] errors = compilerLog.getErrors();", "+", "+    // null out things to not keep pointers to dead data", "+    compiler = null;", "+    compilerLog = null;", "+    return errors;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc3eebbdb363b281cc2513b992bb4f9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "signatureAfterChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "diff": ["-   */", "+    */", "-    return md.getReturnType().getInstanceData();", "+    SymbolData returnType = md.getReturnType();", "+    if (returnType == null) {", "+      _addError(\"Internal error: returnType is null\", that);", "+      return null;", "+    }", "+                ", "+    return returnType.getInstanceData();"]}], "num": 29365}
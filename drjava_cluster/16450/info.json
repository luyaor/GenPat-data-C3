{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bcf2fa8b5f52ba26d9483d04b196ca4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e18716b37883e3e1b63f8fce3c0b10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/tuple/Option.java", "commitBeforeChange": "e490c351e810c170e9a54bc18f1c5b2e0028d6c4", "commitAfterChange": "13af1d4637272a2bca0732db4100c8afaf72a24e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static <T> T unwrap(Option<T> opt)", "signatureAfterChange": "   public abstract T unwrap() throws OptionUnwrapException;", "diff": ["+   */", "+  public abstract T unwrap() throws OptionUnwrapException;", "-   */", "-  public static <T> T unwrap(Option<T> opt) {", "-    if (opt instanceof Wrapper<?>) { return ((Wrapper<T>)opt).value(); }", "-    else { throw new IllegalArgumentException(\"Cannot unwrap a none option\"); }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d81e240401dd4f4189f902d345314dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/tuple/Option.java", "commitBeforeChange": "e490c351e810c170e9a54bc18f1c5b2e0028d6c4", "commitAfterChange": "13af1d4637272a2bca0732db4100c8afaf72a24e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static <T> T unwrap(Option<T> opt, T forNone)", "signatureAfterChange": "   public abstract T unwrap(T forNone);", "diff": ["+  /** Get the value wrapped by this Option, or {@code forNone} if there is no wrapped value. */", "+  public abstract T unwrap(T forNone);", "-   */", "-  public static <T> T unwrap(Option<T> opt, T forNone) {", "-    if (opt instanceof Wrapper<?>) { return ((Wrapper<T>)opt).value(); }", "-    else { return forNone; }", "-  }"]}], "num": 16450}
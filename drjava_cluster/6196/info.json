{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07ec43559698826d99d8f60746bd3184", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "801261c56b729092152e4fa7740f16ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   @Override public Type visit(StaticMethodCall node)", "signatureAfterChange": "   @Override public Type visit(StaticMethodCall node)", "diff": ["-    if (node.getArguments() != null) { args = node.getArguments(); }", "-    for (Expression e : args) { e.acceptVisitor(this); }", "+    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d37fdabf15cc90b4b9a250b50eaeaa09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   @Override public Type visit(ObjectMethodCall node)", "signatureAfterChange": "   @Override public Type visit(ObjectMethodCall node)", "diff": ["-    if (node.getArguments() != null) { args = node.getArguments(); }", "-    for (Expression e : args) { e.acceptVisitor(this); }", "+    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1b2365de8d5d1b94790599275f3ee03", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   @Override public Type visit(SuperMethodCall node)", "signatureAfterChange": "   @Override public Type visit(SuperMethodCall node)", "diff": ["-    if (node.getArguments() != null) { args = node.getArguments(); }", "-    for (Expression e : args) { e.acceptVisitor(this); }", "+    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5d592a01459b3b4cf7b7ecb35f5cc40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   @Override public Type visit(AnonymousAllocation node)", "signatureAfterChange": "   @Override public Type visit(AnonymousAllocation node)", "diff": ["-    if (node.getArguments() != null) { args = node.getArguments(); }", "-    for (Expression e : args) { e.acceptVisitor(this); }", "+    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecf993c0185d3095b100ebe3bdc63fe0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   @Override public Type visit(SimpleAllocation node)", "signatureAfterChange": "   @Override public Type visit(SimpleAllocation node)", "diff": ["-    if (node.getArguments() != null) { args = node.getArguments(); }", "-    for (Expression e : args) { e.acceptVisitor(this); }", "+    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }"]}], "num": 6196}
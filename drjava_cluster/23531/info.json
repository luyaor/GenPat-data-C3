{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "347a9016661d8983cd0a4ab0871220c4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f35d118055f033f15619adb2f3e8f2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 38, "signatureBeforeChange": "   @Override public Type visit(ComplementExpression node)", "signatureAfterChange": "     @Override public Type visit(ComplementExpression node)", "diff": ["-   */", "-  @Override public Type visit(ComplementExpression node) {", "-    node.getExpression().acceptVisitor(this);", "-    try {", "-      Expression exp = ts.unaryPromote(ts.makePrimitive(node.getExpression()));", "-      if (!(getType(exp) instanceof IntegralType)) {", "-        throw new ExecutionError(\"complement.expression.type\", node);", "-      }", "-      node.setExpression(exp);", "-      return setType(node, getType(exp));", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"complement.expression.type\", node);", "-    }", "-  }", "+     */", "+    @Override public Type visit(ComplementExpression node) {", "+      check(node.getExpression());", "+        Expression exp = ts.unaryPromote(ts.makePrimitive(node.getExpression()));", "+        if (!(getType(exp) instanceof IntegralType)) {", "+          throw new ExecutionError(\"complement.expression.type\", node);", "+        }", "+        node.setExpression(exp);", "+        return setType(node, getType(exp));", "+        throw new ExecutionError(\"complement.expression.type\", node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2bac18381898291b54c5d45284d95dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 41, "signatureBeforeChange": "   private Type handleNumericUnaryExpression(UnaryExpression node)", "signatureAfterChange": "     private Type handleNumericUnaryExpression(UnaryExpression node)", "diff": ["-   */", "-  private Type handleNumericUnaryExpression(UnaryExpression node) {", "-    node.getExpression().acceptVisitor(this);", "-    try {", "-      Expression exp = ts.unaryPromote(ts.makePrimitive(node.getExpression()));", "-      node.setExpression(exp);", "-      return setType(node, getType(exp));", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"numeric.expression.type\", node);", "-    }", "-  }", "+     */", "+    private Type handleNumericUnaryExpression(UnaryExpression node) {", "+      check(node.getExpression());", "+      try {", "+        Expression exp = ts.unaryPromote(ts.makePrimitive(node.getExpression()));", "+        node.setExpression(exp);", "+        return setType(node, getType(exp));", "+      }", "+      catch (UnsupportedConversionException e) {", "+        throw new ExecutionError(\"numeric.expression.type\", node);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1ed35d5aea7c9f8a4c974b0a4319063", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 37, "signatureBeforeChange": "   @Override public Type visit(NotExpression node)", "signatureAfterChange": "     @Override public Type visit(NotExpression node)", "diff": ["+     */", "+    @Override public Type visit(NotExpression node) {", "+      check(node.getExpression(), TypeSystem.BOOLEAN);", "+        Expression exp = ts.makePrimitive(node.getExpression());", "+        if (!(getType(exp) instanceof BooleanType)) {", "+          throw new ExecutionError(\"not.expression.type\", node);", "+        }", "+        node.setExpression(exp);", "+        return setType(node, getType(exp));", "-   */", "-  @Override public Type visit(NotExpression node) {", "-    node.getExpression().acceptVisitor(this);", "-    try {", "-      Expression exp = ts.makePrimitive(node.getExpression());", "-      if (!(getType(exp) instanceof BooleanType)) {", "-      node.setExpression(exp);", "-      return setType(node, getType(exp));", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"not.expression.type\", node);", "-    }", "-  }"]}], "num": 23531}
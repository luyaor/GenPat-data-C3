{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24619793e4cad015d547397074b4cace", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0045f5e951c21b0cb2ec410b7aaa9298", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 444, "methodNumberAfterChange": 444, "signatureBeforeChange": "\r \r   public void forDivideExpression(DivideExpression that)", "signatureAfterChange": "    public void forDivideExpression(DivideExpression that)", "diff": ["-\r", "-  public void forDivideExpression(DivideExpression that) {\r", "-    forDivideExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forDivideExpressionOnly(that);\r", "-  }\r", "+", "+  public void forDivideExpression(DivideExpression that) {", "+    forDivideExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forDivideExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2069293f57c16b09b1a580e399a450f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 428, "methodNumberAfterChange": 428, "signatureBeforeChange": "\r \r   public void forAndExpression(AndExpression that)", "signatureAfterChange": "    public void forAndExpression(AndExpression that)", "diff": ["-\r", "-  public void forAndExpression(AndExpression that) {\r", "-    forAndExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forAndExpressionOnly(that);\r", "-  }\r", "+", "+  public void forAndExpression(AndExpression that) {", "+    forAndExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forAndExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39712686c1dd9bdbc930a3fce2d38a13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 441, "methodNumberAfterChange": 441, "signatureBeforeChange": "\r \r   public void forPlusExpression(PlusExpression that)", "signatureAfterChange": "    public void forPlusExpression(PlusExpression that)", "diff": ["-\r", "-  public void forPlusExpression(PlusExpression that) {\r", "-    forPlusExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forPlusExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPlusExpression(PlusExpression that) {", "+    forPlusExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forPlusExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b6f7a3264913c80b5b0690cacec1921", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 442, "methodNumberAfterChange": 442, "signatureBeforeChange": "\r \r   public void forMinusExpression(MinusExpression that)", "signatureAfterChange": "    public void forMinusExpression(MinusExpression that)", "diff": ["-\r", "-  public void forMinusExpression(MinusExpression that) {\r", "-    forMinusExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forMinusExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMinusExpression(MinusExpression that) {", "+    forMinusExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forMinusExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47cfd1b6f9039f56589b10f068d998f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 432, "methodNumberAfterChange": 432, "signatureBeforeChange": "\r \r   public void forEqualsExpression(EqualsExpression that)", "signatureAfterChange": "    public void forEqualsExpression(EqualsExpression that)", "diff": ["-\r", "-  public void forEqualsExpression(EqualsExpression that) {\r", "-    forEqualsExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forEqualsExpressionOnly(that);\r", "-  }\r", "+", "+  public void forEqualsExpression(EqualsExpression that) {", "+    forEqualsExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forEqualsExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1aab2d44e368d480e7379ac2f52b9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 445, "methodNumberAfterChange": 445, "signatureBeforeChange": "\r \r   public void forModExpression(ModExpression that)", "signatureAfterChange": "    public void forModExpression(ModExpression that)", "diff": ["-\r", "-  public void forModExpression(ModExpression that) {\r", "-    forModExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forModExpressionOnly(that);\r", "-  }\r", "+", "+  public void forModExpression(ModExpression that) {", "+    forModExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forModExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54aebf255645c7080fef49dac5f725de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 457, "signatureBeforeChange": "\r \r   public void forCastExpression(CastExpression that)", "signatureAfterChange": "    public void forCastExpression(CastExpression that)", "diff": ["-\r", "-  public void forCastExpression(CastExpression that) {\r", "-    forCastExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forCastExpressionOnly(that);\r", "-  }\r", "+", "+  public void forCastExpression(CastExpression that) {", "+    forCastExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    that.getValue().visit(this);", "+    forCastExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68951da06d93079f17be26ad7332cbc6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 446, "methodNumberAfterChange": 446, "signatureBeforeChange": "\r \r   public void forNoOpExpression(NoOpExpression that)", "signatureAfterChange": "    public void forNoOpExpression(NoOpExpression that)", "diff": ["-\r", "-  public void forNoOpExpression(NoOpExpression that) {\r", "-    forNoOpExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forNoOpExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNoOpExpression(NoOpExpression that) {", "+    forNoOpExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forNoOpExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "add009d8a08a53f0d0612f2209892a75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 443, "methodNumberAfterChange": 443, "signatureBeforeChange": "\r \r   public void forMultiplyExpression(MultiplyExpression that)", "signatureAfterChange": "    public void forMultiplyExpression(MultiplyExpression that)", "diff": ["-\r", "-  public void forMultiplyExpression(MultiplyExpression that) {\r", "-    forMultiplyExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forMultiplyExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMultiplyExpression(MultiplyExpression that) {", "+    forMultiplyExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forMultiplyExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3db456a4923cb99ca08a08d4f57662f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 427, "methodNumberAfterChange": 427, "signatureBeforeChange": "\r \r   public void forOrExpression(OrExpression that)", "signatureAfterChange": "    public void forOrExpression(OrExpression that)", "diff": ["-\r", "-  public void forOrExpression(OrExpression that) {\r", "-    forOrExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forOrExpressionOnly(that);\r", "-  }\r", "+", "+  public void forOrExpression(OrExpression that) {", "+    forOrExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forOrExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e92da83b32be3570063ef9da5cfd55cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 433, "signatureBeforeChange": "\r \r   public void forNotEqualExpression(NotEqualExpression that)", "signatureAfterChange": "    public void forNotEqualExpression(NotEqualExpression that)", "diff": ["-\r", "-  public void forNotEqualExpression(NotEqualExpression that) {\r", "-    forNotEqualExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forNotEqualExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNotEqualExpression(NotEqualExpression that) {", "+    forNotEqualExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forNotEqualExpressionOnly(that);", "+  }"]}], "num": 5444}
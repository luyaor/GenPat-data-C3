{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fbf75829356cfa43626d30066f0b4380", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d32627f3df3c39090f8795ad07c5dd5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["-    // The model already has an active empty document", "-    OpenDefinitionsDocument doc1 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc1));", "-    assertEquals(\"There should be 2 documents in the cache\", 2, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc2 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc2));", "-    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc3 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc3));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc4 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc4));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc5 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc5));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc6 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc6));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    // The documents should not be activated upon creation ", "-    // checkin isModifiedSinceSave shouldn't activate the documents", "+    OpenDefinitionsDocument doc1 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc2 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc3 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc4 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc5 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc6 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    // This tests that isModifiedSinceSave does not cause the document to load into the cache,", "+    // so the two that should have been kicked out, 1 & 2 should not be loaded uppon calling isModified.", "+", "+    assertEquals(\"There should be 4 documents in the cache\", 0, _cache.getNumInCache());", "-    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"Document 1 shouldn't be ready\", _adapterTable.get(doc1).isReady());", "+    assertFalse(\"Document 2 shouldn't be ready\", _adapterTable.get(doc2).isReady());", "+    assertFalse(\"Document 3 shouldn't be ready\", _adapterTable.get(doc3).isReady());", "+    assertFalse(\"Document 4 shouldn't be ready\", _adapterTable.get(doc4).isReady());", "+    assertFalse(\"Document 5 shouldn't be ready\", _adapterTable.get(doc5).isReady());", "+    assertFalse(\"Document 6 shouldn't be ready\", _adapterTable.get(doc6).isReady());", "+    ", "+    // Front of LRU -> a b c d | e f <- out of LRU", "-    doc1.getLength();", "-    doc2.getLength();", "-    doc3.getLength();", "-    doc4.getLength();", "-    assertFalse(\"The document 5 should have been kicked out of the cache\", _cache.isDDocInCache(doc5));", "-    assertFalse(\"The document 6 should have been kicked out of the cache\", _cache.isDDocInCache(doc6));", "+    ", "+    // 6 5 4 3 | 2 1", "+    assertFalse(\"Document 1 shouldn't be ready\", _adapterTable.get(doc1).isReady());", "+    assertFalse(\"Document 2 shouldn't be ready\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"Document 3 shouldn't be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 shouldn't be ready\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"Document 5 shouldn't be ready\", _adapterTable.get(doc5).isReady());", "+    assertTrue(\"Document 6 shouldn't be ready\", _adapterTable.get(doc6).isReady());", "+        ", "+    doc1.getLength(); // 1 6 5 4 | 3 2", "+    assertTrue(\"The document 1 should should now be in the cache\", _adapterTable.get(doc1).isReady());    ", "+    assertEquals(\"There should still be 1 documents in the cache\", 4, _cache.getNumInCache()); ", "+    assertFalse(\"The document 3 should have been kicked out of the cache\", _adapterTable.get(doc3).isReady());", "+    ", "+    doc2.getLength(); // 2 1 6 5 | 4 3", "+    assertTrue(\"The document 2 should should now be in the cache\", _adapterTable.get(doc2).isReady());", "+    assertEquals(\"There should still be 2 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 4 should have been kicked out of the cache\", _adapterTable.get(doc4).isReady());", "+    ", "+    doc3.getLength(); // 3 2 1 6 | 5 4", "+    assertTrue(\"The document 3 should should now be in the cache\", _adapterTable.get(doc3).isReady());", "+    assertEquals(\"There should still be 3 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 5 should have been kicked out of the cache\", _adapterTable.get(doc5).isReady());", "+    ", "+    doc4.getLength(); // 4 3 2 1 | 6 5", "+    assertTrue(\"The document 4 should should now be in the cache\", _adapterTable.get(doc4).isReady());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 6 should have been kicked out of the cache\", _adapterTable.get(doc6).isReady());", "+    ", "+    doc5.getLength(); // 5 4 3 2 | 1 6", "+    assertTrue(\"The document 5 should should now be in the cache\", _adapterTable.get(doc5).isReady());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 1 should have been kicked out of the cache\", _adapterTable.get(doc1).isReady());", "+    ", "+    doc6.getLength(); // 6 5 4 3 | 2 1", "+    assertTrue(\"The document 6 should should now be in the cache\", _adapterTable.get(doc6).isReady());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 2 should have been kicked out of the cache\", _adapterTable.get(doc2).isReady());", "+    ", "+    // Load documents out of order", "+    doc4.getLength(); // 4 6 5 3 | 2 1", "+    assertTrue(\"The document 3 should should still be in the cache\", _adapterTable.get(doc3).isReady());    ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    doc5.getLength(); // 5 4 6 3 | 2 1", "+    assertTrue(\"The document 3 should should still be in the cache\", _adapterTable.get(doc3).isReady());    ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    doc3.getLength(); // 3 5 4 6 | 2 1", "+    assertTrue(\"The document 6 should should still be in the cache\", _adapterTable.get(doc6).isReady());    ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    doc4.getLength(); // 4 3 5 6 | 2 1", "+    assertTrue(\"The document 6 should should still be in the cache\", _adapterTable.get(doc6).isReady());    ", "+    assertFalse(\"The document 1 should still be out of the cache\", _adapterTable.get(doc1).isReady());", "+    assertFalse(\"The document 2 should still be out of the cache\", _adapterTable.get(doc2).isReady());", "-    // Test the LRU to make sure the documents are kicked out in the right order", "-    doc5.getLength();", "-    assertFalse(\"doc1 should have been kicked out first\", _cache.isDDocInCache(doc1));", "-    doc6.getLength();", "-    assertFalse(\"doc2 should have been kicked out first\", _cache.isDDocInCache(doc2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e61652a981631cd372269e014016648b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOpsTest.java", "commitBeforeChange": "1e619a02befaa7a99dc31172b2a007a2446ed2bd", "commitAfterChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "      public void testCommandLineToList()", "signatureAfterChange": "      public void testCommandLineToLists()", "diff": ["-  public void testCommandLineToList() {", "-    List<String> l = StringOps.commandLineToList(\"a b c\");", "+  public void testCommandLineToLists() {", "+    List<List<List<String>>> seqs = StringOps.commandLineToLists(\"a b c\");", "+    assertEquals(1, seqs.size());    ", "+    List<List<String>> pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    List<String> l = pipe.get(0);", "-    l = StringOps.commandLineToList(\"a'b c'\");", "+    seqs = StringOps.commandLineToLists(\"a'b c'\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a\\\"b c\\\"\");", "+    seqs = StringOps.commandLineToLists(\"a\\\"b c\\\"\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a\\\"b 'c'\\\"\");", "+    seqs = StringOps.commandLineToLists(\"a\\\"b 'c'\\\"\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a \\\"b c\\\"\");", "+    seqs = StringOps.commandLineToLists(\"a \\\"b c\\\"\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"\\u001b\");", "-    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "-    assertEquals(0, l.size());", "+    seqs = StringOps.commandLineToLists(\"\\u001b\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "+    // System.err.println(\"l = \"+edu.rice.cs.plt.iter.IterUtil.toString(seqs));", "+    assertEquals(1, l.size());", "+    assertEquals(\"\\u001b\", l.get(0));", "-    l = StringOps.commandLineToList(\"\\u001b\\u001b\");", "+    seqs = StringOps.commandLineToLists(\"\\u001b\\u001b\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"\\u001b \");", "+    seqs = StringOps.commandLineToLists(\"\\u001b \");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a\\u001b b\");", "+    seqs = StringOps.commandLineToLists(\"a\\u001b b\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    "]}], "num": 15374}
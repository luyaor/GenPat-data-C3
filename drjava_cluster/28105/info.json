{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bec6d2e6d0f5a81b39daf8c9c8810993", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1defb16bbd2653d95ff9b70b6e5e76ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "7d20b14faca1d500f599ed54f40d60f42cf8097e", "commitAfterChange": "78f246144dd1abf21f8f40c370cff42a944129aa", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public boolean closeAllFiles()", "signatureAfterChange": "   public boolean closeAllFiles()", "diff": ["-    boolean success = super.closeAllFiles();", "+    //Bug when the first document, in list view, is selected:", "+    //When \"close all\" documents is selected, each document in turn is set active", "+    //Workaround: begin to close the active document, then close all other documents, then remove the ", "+    //active doc from the navigator pane", "+    final OpenDefinitionsDocument toClose = getActiveDocument();", "+    boolean canClose = toClose.canAbandonFile();", "+    if(canClose) {", "+      INavigatorItem idoc = _documentsRepos.removeKey(toClose);      ", "+      boolean success = super.closeAllFiles();", "+      if (idoc != null) {", "+        getDocumentNavigator().removeDocument(idoc);", "+        _notifier.fileClosed(toClose);", "+        toClose.close();", "+      }", "+      _isClosingAllDocs = false;", "+      ", "+      _ensureNotEmpty();", "+      setActiveFirstDocument();", "+      return success;", "+    }", "-    ", "-    _ensureNotEmpty();", "-    setActiveFirstDocument();", "-    return success;", "+    return false; ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fda7c85bd9ece8723de571a3bc9de09d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "9297bd3255995599281a9a548fcd6e849eecaf7b", "commitAfterChange": "b8d26b54d9d0d791e5e97a6dd352ae0f9f5f3b20", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 77, "signatureBeforeChange": "   private void _switchToSuspendedThread(boolean updateWatches) throws DebugException", "signatureAfterChange": "   private void _switchToSuspendedThread(BreakpointRequest request, boolean updateWatches) throws DebugException", "diff": ["-  private void _switchToSuspendedThread(boolean updateWatches) throws DebugException {", "+  private void _switchToSuspendedThread(BreakpointRequest request, boolean updateWatches) throws DebugException {", "-    ", "-    try {", "-      if (currThread.frameCount() > 0) scrollToSource(currThread.frame(0).location());", "+", "+    boolean usedBreakpointLine = false;", "+    if (request!=null) {", "+      // we have breakpoint information, use it", "+      Object property = request.getProperty(\"debugAction\");", "+      if (property != null && (property instanceof JPDABreakpoint)) {", "+        final JPDABreakpoint breakpoint = (JPDABreakpoint) property;", "+        breakpoint.update();", "+        scrollToSource(breakpoint, true);", "+        usedBreakpointLine = true;", "+      }", "-    catch (IncompatibleThreadStateException itse) {", "-      throw new UnexpectedException(itse);", "+    if (!usedBreakpointLine ) {", "+      try {", "+        if (currThread.frameCount() > 0) scrollToSource(currThread.frame(0).location());", "+      }", "+      catch (IncompatibleThreadStateException itse) {", "+        throw new UnexpectedException(itse);", "+      }"]}], "num": 28105}
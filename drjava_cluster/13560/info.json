{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "717a8721e174060b4f60171175d2e948", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183f646eaf6ac1b9a5485c9b0a399374", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/ClassPathManager.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private ClassLoader buildClassLoader(List<ClassPathEntry>locpe)", "signatureAfterChange": "   private ClassLoader buildClassLoader(List<File> path)", "diff": ["-  private ClassLoader buildClassLoader(List<ClassPathEntry>locpe) {", "-    ClassLoader c = new DeadClassLoader();", "-    for(ClassPathEntry cpe: locpe) { c = cpe.getClassLoader(c); }", "-    return c;", "-  }", "+  private ClassLoader buildClassLoader(List<File> path) {", "+    List<URL> urls = new LinkedList<URL>();", "+    for (File f : path) {", "+      try {", "+        URL u = f.toURI().toURL();", "+        urls.add(u);", "+      }", "+      catch (MalformedURLException e) { error.log(\"Can't convert file to URL\", e); }", "+    }", "+    return new URLClassLoader(urls.toArray(new URL[urls.size()]), new DeadClassLoader());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4230ccaba943634d27bf4358246c2ac6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "6e331e9844f73cd6f98ef32e034b0175583aeba8", "commitAfterChange": "6730b2e413a99565d4307ad95e1ac5e98eebdf83", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   synchronized public void compileAll() throws IOException", "signatureAfterChange": "   synchronized public void compileAll() throws IOException", "diff": ["+    ", "+    List<OpenDefinitionsDocument> defDocs =", "+      _getter.getDefinitionsDocuments();", "+    ", "+    File buildDir = null;", "+    if (_getter.getFileGroupingState().isProjectActive()) {", "+      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "+", "+      // If we're in project mode, filter out only the ", "+      // documents that are in the project and leave out", "+      // the external files.", "+      List<OpenDefinitionsDocument> projectDocs =", "+        new LinkedList<OpenDefinitionsDocument>();", "+    ", "+      for(OpenDefinitionsDocument odd : defDocs){", "+        if(odd.isProjectFile()){", "+            projectDocs.add(odd);", "+        }", "+      }", "+      defDocs = projectDocs;", "+    }", "+", "-    if (_getter.hasModifiedDocuments()) {", "+    if (_hasModifiedFiles(defDocs)) {", "-    if (_getter.hasModifiedDocuments()) {", "+    // check for modified project files, in case they didn't save when prompted", "+    if (_hasModifiedFiles(defDocs)) {", "-      List<OpenDefinitionsDocument> defDocs =", "-        _getter.getDefinitionsDocuments();", "-        _compileFiles(sourceRoots, files);", "+        _compileFiles(sourceRoots, files, buildDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be12ea3dccd0bb07dda44446193a53e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "7100bfae3584eff8b8b1993fd999385d8f88ea13", "commitAfterChange": "6bcdef7d4202e06be1c5717fc181a0fdfcc7756a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    public void put(Option<KeyStroke> kso, Action a, JMenuItem jmi, String name)", "signatureAfterChange": "    public void put(VectorOption<KeyStroke> vkso, Action a, JMenuItem jmi, String name)", "diff": ["-  public void put(Option<KeyStroke> kso, Action a, JMenuItem jmi, String name)  {", "-    KeyStroke ks = DrJava.getConfig().getSetting(kso);", "-    KeyStrokeData ksd = new KeyStrokeData(ks, a, jmi, name, kso);", "-    _keyToDataMap.put(ks, ksd);", "+  public void put(VectorOption<KeyStroke> vkso, Action a, JMenuItem jmi, String name)  {", "+    Vector<KeyStroke> keys = DrJava.getConfig().getSetting(vkso);", "+    Vector<KeyStroke> retained = new Vector<KeyStroke>();", "+    KeyStrokeData ksd = new KeyStrokeData(keys, a, jmi, name, vkso);", "-", "-    // check for shift-actions", "-    if (kso != null) {", "-      DrJava.getConfig().addOptionListener(kso, new KeyStrokeOptionListener(jmi, a, ks));", "+    for(KeyStroke ks: keys) {", "+      if (shouldUpdate(ks, a)) {", "+        retained.add(ks);", "+        _keyToDataMap.put(ks, ksd);", "+      }", "+    }", "+    DrJava.getConfig().addOptionListener(vkso, new VectorKeyStrokeOptionListener(jmi, a, retained));", "+    if (retained.size()!=keys.size()) {", "+      // not all keys were added", "+      DrJava.getConfig().setSetting(vkso,retained);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ba8d997b0f2ebb46ab1d294c979dec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "3b64166f1d62b17dc65eb373f58379c1d93452e7", "commitAfterChange": "36e86519fec0be37255f092c8ef3144003d9d925", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public static File makeRelativeTo(File f, File b) throws IOException, SecurityException", "signatureAfterChange": "   public static File makeRelativeTo(File f, File b) throws IOException, SecurityException", "diff": ["+    try {", "+      File[] roots = File.listRoots();", "+      File fRoot = null;", "+      File bRoot = null;", "+      for(File r: roots) {", "+        if (isAncestorOf(r, f)) { fRoot = r; }", "+        if (isAncestorOf(r, b)) { bRoot = r; }", "+        if ((fRoot!=null) && (bRoot!=null)) { break; }", "+      }", "+      if ((fRoot==null) || (!fRoot.equals(bRoot))) {", "+        // f and b have different file system roots", "+        // just make f absolute and canonical", "+        return f.getAbsoluteFile().getCanonicalFile();", "+      }", "+    }", "+    catch(Exception e) { /* ignore, follow previous procedure */ }", "+    "]}], "num": 13560}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "452e70136015e840cbb460c08990c418", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "398c2ec8a749ba91d0260db43bf1ae37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "   private Class<?> visitShiftExpression(BinaryExpression node)", "signatureAfterChange": "   private Type visitShiftExpression(BinaryExpression node)", "diff": ["-  private Class<?> visitShiftExpression(BinaryExpression node) {", "+  private Type visitShiftExpression(BinaryExpression node) {", "-    Class<?> lc = leftExp.acceptVisitor(this);", "-    Class<?> rc = rightExp.acceptVisitor(this);", "-    Class<?> c  = null;", "-", "+    Type lc1 = leftExp.acceptVisitor(this);", "+    Type rc1 = rightExp.acceptVisitor(this);", "+    Type c  = null;", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39a7e2766ef2e7e9f065a4f96ed1f457", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "   private Class<?> visitBitwiseExpression(BinaryExpression node)", "signatureAfterChange": "   private Type visitBitwiseExpression(BinaryExpression node)", "diff": ["-  private Class<?> visitBitwiseExpression(BinaryExpression node) {", "+  private Type visitBitwiseExpression(BinaryExpression node) {", "-    Class<?> lc = leftExp.acceptVisitor(this);", "-    Class<?> rc = rightExp.acceptVisitor(this);", "-    Class<?> c = null;", "+    Type lc1 = leftExp.acceptVisitor(this);", "+    Type rc1 = rightExp.acceptVisitor(this);", "+    Type c = null;", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "492486dec8b6cc0798aad9084dcdf196", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "   protected Class<?> visitNumericExpression(BinaryExpression node, String s)", "signatureAfterChange": "   protected Type visitNumericExpression(BinaryExpression node, String s)", "diff": ["-  protected Class<?> visitNumericExpression(BinaryExpression node, String s) {", "+  protected Type visitNumericExpression(BinaryExpression node, String s) {", "-    Class<?> lc = NodeProperties.getType(leftExp);", "-    Class<?> rc = NodeProperties.getType(rightExp);", "-    Class<?> c  = null;", "-", "+    Type lc1 = NodeProperties.getType(leftExp);", "+    Type rc1 = NodeProperties.getType(rightExp);", "+    Type c  = null;", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "+    ", "-", "+    "]}], "num": 26204}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2e1333bfde473c056db30b783fd040f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04df16be02436b57f5799c93133d4e7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": "                    public void testCreateMethodData()", "signatureAfterChange": "                    public void testCreateMethodData()", "diff": ["-                                             _privateAbstractMav, ", "+                                             PRIVATE_ABSTRACT_MAV, ", "-      MethodData mdata = new MethodData(\"methodName\", _privateAbstractMav, new TypeParameter[0], SymbolData.INT_TYPE, ", "+      MethodData mdata = new MethodData(\"methodName\", PRIVATE_ABSTRACT_MAV, new TypeParameter[0], SymbolData.INT_TYPE, ", "+      _iv._package = \"i.like\";", "+      _iv._enclosingClassName = \"i.like.monkey\";", "+      _iv.symbolTable.put(\"i.like.monkey\", _sd1);", "+      System.err.println(\"SymbolData for i.like.monkey = \" + _iv.getQualifiedSymbolData(\"i.like.monkey\", SourceInfo.NO_INFO));", "-//      assertEquals(\"The error message should be correct.\", \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "+//      assertEquals(\"The error message should be correct.\", ", "+//      \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", ", "+//        errors.get(0).getFirst());", "+      UninitializedVariableDeclarator uvd1 =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                            new Word(SourceInfo.NO_INFO, \"field1\"));", "+      UninitializedVariableDeclarator uvd2 =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                            new Word(SourceInfo.NO_INFO, \"field1\"));", "-                              _abstractMav, ", "+                              ABSTRACT_MAV, ", "-                                                    new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                        new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                                                        new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                    uvd1,", "-                                                      new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                          new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                                                          new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                      uvd2,", "-                       _abstractMav, ", "+                       ABSTRACT_MAV, ", "-                       new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "-                         new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "+                       new VariableData[] { new VariableData(\"field1\", FINAL_MAV, SymbolData.DOUBLE_TYPE, true, _sd1),", "+                         new VariableData(\"field1\", FINAL_MAV, SymbolData.INT_TYPE, true, _sd1) }, ", "-      mdata.getParams()[0].setEnclosingData(result);", "-      mdata.getParams()[1].setEnclosingData(result);", "+      /* Enclosing data for formal parameters is the enclosing class, not the enclosing method. */", "+//      mdata.getParams()[0].setEnclosingData(result);", "+//      mdata.getParams()[1].setEnclosingData(result);", "+      ", "-      mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, result) });                                                          ", "+      mdata.addVars(new VariableData[] { new VariableData(\"field1\", FINAL_MAV, SymbolData.DOUBLE_TYPE, true, _sd1) });", "+      System.err.println(\"****** mdata  = \" + mdata);", "+      System.err.println(\"****** result = \" + result);", "-      //This is now caught in the type checker.", "-      //assertEquals(\"The second error message should be correct.\", \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", errors.get(1).getFirst());", "-      assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());", "+      // This is now caught in the type checker.", "+//      assertEquals(\"The second error message should be correct.\", ", "+//                   \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", ", "+//                   errors.get(1).getFirst());", "+      assertEquals(\"The second error message should be correct.\", ", "+                   \"You cannot have two method parameters with the same name\", ", "+                   errors.get(1).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e52cec3f5f071fc94ff25c7971ec7f7f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public LanguageLevelVisitor(File file,                                String packageName,                                LinkedList<String> importedFiles,                                LinkedList<String> importedPackages,                                LinkedList<String> classNamesInThisFile,                                Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>> classesToBeParsed,                               Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>> continuations)", "signatureAfterChange": "   public LanguageLevelVisitor(File file,                                String packageName,                               String enclosingClassName,                               LinkedList<String> importedFiles,                                LinkedList<String> importedPackages,                                HashSet<String> classesInThisFile,                                Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>> continuations,                               LinkedList<Command> fixUps)", "diff": ["+                              String packageName,", "+                              String enclosingClassName,", "+                              HashSet<String> classesInThisFile, ", "+                              Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>> continuations,", "+                              LinkedList<Command> fixUps) {", "+    _enclosingClassName = enclosingClassName;", "+    _classesInThisFile = classesInThisFile;", "+//    _innerClassesInThisBody = new HashSet<String>();", "+    this.fixUps = fixUps;", "-    */", "-  public LanguageLevelVisitor(File file, ", "-                              String packageName, ", "-                              LinkedList<String> importedFiles, ", "-                              LinkedList<String> importedPackages, ", "-                              LinkedList<String> classNamesInThisFile, ", "-                              Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>> classesToBeParsed,", "-                              Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>> continuations) {", "-    this(file, packageName, importedFiles, importedPackages, classNamesInThisFile, continuations);", "-    _classesToBeParsed = classesToBeParsed;", "+    assert fixUps != null;", "+    ", "+    // Ensure that the imported packages include \"java.lang\" ", "+    if (! _importedPackages.contains(\"java.lang\")) _importedPackages.addFirst(\"java.lang\");", "+    // Ensure that the symbol table contains the essential types;  TODO: this is kludge; fix it !!!", "+    LanguageLevelConverter.loadSymbolTable();"]}], "num": 1371}
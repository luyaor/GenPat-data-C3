{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fbb84a63286fd49e5315b624c1ff149b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5357d5ba95a754201a8f0fe51f1193f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void handleUncheckedException(SymbolData sd, JExpression j)", "signatureAfterChange": "   public void handleUncheckedException(SymbolData sd, JExpression j)", "diff": ["-  /**If an exception is thrown but not caught, throw the appropriate error, based on the JExpression.*/", "+  /** If an exception is thrown but not caught, throw the appropriate error, based on the JExpression.*/", "-      _addError(\"The method \" + ((MethodInvocation)j).getName().getText() + \" is declared to throw the exception \" + sd.getName() + \" which needs to be caught or declared to be thrown\", j);", "+      _addError(\"The method \" + ((MethodInvocation)j).getName().getText() + \" is declared to throw the exception \" + ", "+                sd.getName() + \" which needs to be caught or declared to be thrown\", j);", "-        _addError(\"This statement throws the exception \" + sd.getName() + \" which needs to be caught or declared to be thrown\", j);", "+        _addError(\"This statement throws the exception \" + sd.getName() + ", "+                  \" which needs to be caught or declared to be thrown\", j);", "-        _addError(\"The constructor for the class \" + ((ClassInstantiation)j).getType().getName() + \" is declared to throw the exception \" + sd.getName() + \" which needs to be caught or declared to be thrown.\", j);", "+        _addError(\"The constructor for the class \" + ((ClassInstantiation)j).getType().getName() + ", "+                  \" is declared to throw the exception \" + sd.getName() +", "+                  \" which needs to be caught or declared to be thrown.\", j);", "-        _addError(\"The constructor of this class's super class could throw the exception \" + sd.getName() + \", so the enclosing constructor needs to be declared to throw it\", j);", "+        _addError(\"The constructor of this class's super class could throw the exception \" + sd.getName() + ", "+                  \", so the enclosing constructor needs to be declared to throw it\", j);", "-        _addError(\"This constructor could throw the exception \" + sd.getName() + \", so this enclosing constructor needs to be declared to throw it\", j);", "+        _addError(\"This constructor could throw the exception \" + sd.getName() + ", "+                  \", so this enclosing constructor needs to be declared to throw it\", j);", "-        _addError(\"There is an implicit call to the superclass's constructor here.  That constructor could throw the exception \" + sd.getName() + \", so the enclosing constructor needs to be declared to throw it\", j);", "+        _addError(\"There is an implicit call to the superclass's constructor here.  \" + ", "+                  \"That constructor could throw the exception \" + sd.getName() + ", "+                  \", so the enclosing constructor needs to be declared to throw it\", j);", "-        throw new RuntimeException(\"Internal Program Error: Something besides a method invocation or throw statement threw an exception.  Please report this bug.\");", "+        throw new RuntimeException(\"Internal Program Error: Something besides a method invocation or throw statement\" + ", "+                                   \" threw an exception.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f6183527221bd0bc66251abbc9db0cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public TypeData forComplexAnonymousClassInstantiation(ComplexAnonymousClassInstantiation that)", "signatureAfterChange": "   public TypeData forComplexAnonymousClassInstantiation(ComplexAnonymousClassInstantiation that)", "diff": ["-   */", "+    */", "-    checkAccessibility(that, enclosingType.getSymbolData().getMav(), enclosingType.getSymbolData().getName(), enclosingType.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "+    checkAccessibility(that, enclosingType.getSymbolData().getMav(), enclosingType.getSymbolData().getName(), ", "+                       enclosingType.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "-    final SymbolData superclass_result = getSymbolData(that.getType().getName(), enclosingType.getSymbolData(), that.getType());", "+    final SymbolData superclass_result = getSymbolData(that.getType().getName(), enclosingType.getSymbolData(), ", "+                                                       that.getType());", "-      if (expr.length > 0) { _addError(\"You are creating an anonymous inner class that directly implements an interface, thus you should use the Object constructor which takes in no arguments.  However, you have specified \" + expr.length + \" arguments\", that);}", "+      if (expr.length > 0) { ", "+        _addError(\"You are creating an anonymous inner class that directly implements an interface, thus you should\" + ", "+                  \" use the Object constructor which takes in no arguments.  However, you have specified \" + ", "+                  expr.length + \" arguments\", that);", "+      }", "-      _addError (\"The constructor of a non-static inner class can only be called on an instance of its containing class (e.g. new \" + ", "-                 Data.dollarSignsToDots(enclosingType.getName()) + \"().new \" + that.getType().getName() + \"())\", that);", "+      _addError (\"The constructor of a non-static inner class can only be called on an instance of its containing\" + ", "+                 \" class (e.g. new \" + Data.dollarSignsToDots(enclosingType.getName()) + \"().new \" + ", "+                 that.getType().getName() + \"())\", that);", "-    final TypeData body_result = that.getBody().visit(new ClassBodyTypeChecker(myData, _file, _package, _importedFiles, _importedPackages, vars, _thrown));", "+    final TypeData body_result = that.getBody().visit(new ClassBodyTypeChecker(myData, _file, _package, _importedFiles, ", "+                                                                               _importedPackages, vars, _thrown));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d53a4c276f646e4bc82b383e464363c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "    public TypeData forLabeledCase(LabeledCase that)", "signatureAfterChange": "    public TypeData forLabeledCase(LabeledCase that)", "diff": ["-   */", "+    * char.  Then delegate to the super class to handle the braced body of the switch case. */", "-     ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+     ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, ", "+                                                           _vars, _thrown);", "-    if (label_result == null || !assertFound(label_result, exp)) {", "-      return null;", "-    }", "+    if (label_result == null || !assertFound(label_result, exp)) return null;", "-    if (!(exp instanceof LexicalLiteral || exp instanceof NumericUnaryExpression && ((NumericUnaryExpression) exp).getValue() instanceof LexicalLiteral)) {", "-      _addError(\"The labels of a switch statement must be constants.  You are using a more complicated expression of type \" + label_result.getSymbolData().getName(), that.getLabel());", "+    if (!(exp instanceof LexicalLiteral || exp instanceof NumericUnaryExpression && ", "+          ((NumericUnaryExpression) exp).getValue() instanceof LexicalLiteral)) {", "+      _addError(\"The labels of a switch statement must be constants.  You are using a more complicated expression of\" +", "+                \" type \" + label_result.getSymbolData().getName(), ", "+                that.getLabel());", "-      _addError(\"The labels of a switch statement must be constants of int or char type.  You specified a constant of type \" + label_result.getSymbolData().getName(), that.getLabel());", "+      _addError(\"The labels of a switch statement must be constants of int or char type.  You specified a constant of\" +", "+                \" type \" + label_result.getSymbolData().getName(), ", "+                that.getLabel());"]}], "num": 24675}
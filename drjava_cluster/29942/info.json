{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5422e4780873cbb51973f4e2411c0a9d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed33245714c9e34a2bebebfe5abf77c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 303, "methodNumberAfterChange": 319, "signatureBeforeChange": "           public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker)", "signatureAfterChange": "     public ConstructorInvocation invocation()", "diff": ["+    }", "+    public ConstructorInvocation invocation() {", "+      SubstitutionMap sigma = substitution();", "+      Iterable<? extends Type> targs = _matcher.typeArguments();", "+      Iterable<? extends Expression> args = _matcher.arguments();", "+      Iterable<? extends Type> thrown = substitute(_f.thrownTypes(), sigma);", "+      return new ConstructorInvocation(_declaredConstructor, targs, args, thrown);", "+    }", "-          new Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation>() {", "-          public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type returned = substitute(m.returnType(), sigma);", "-            // TODO: Handle the thrown types", "-            return new ObjectMethodInvocation(m, returned, makeCast(t, object), checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1aae47b1c38010e6d6e21ca76942650", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 314, "methodNumberAfterChange": 315, "signatureBeforeChange": "              @Override public Iterable<StaticMethodInvocation> forSimpleClassType(SimpleClassType t)", "signatureAfterChange": "     public ObjectMethodInvocation invocation()", "diff": ["+    }", "+    public ObjectMethodInvocation invocation() {", "+      SubstitutionMap sigma = substitution();", "+      Type returnType = substitute(_method.returnType(), sigma);", "+      Expression receiver = makeCast(_declaringType, _object);", "+      Iterable<? extends Type> targs = _matcher.typeArguments();", "+      Iterable<? extends Expression> args = _matcher.arguments();", "+      Iterable<? extends Type> thrown = substitute(_method.thrownTypes(), sigma);", "+      return new ObjectMethodInvocation(_declaredMethod, returnType, receiver,targs, args, thrown);", "+    }", "-      ", "-      @Override public Iterable<StaticMethodInvocation> forSimpleClassType(SimpleClassType t) {", "-        Iterable<DJMethod> methods = IterUtil.filter(t.ofClass().declaredMethods(), _matchMethod);", "-//        System.out.println(\"Matching methods in type \" + userRepresentation(t) + \": \" +", "-//                           IterUtil.multilineToString(matchingMethods));", "-        Lambda<DJMethod, SignatureChecker> makeChecker = new Lambda<DJMethod, SignatureChecker>() {", "-          public SignatureChecker value(DJMethod m) {", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(m),", "-                               args, m.returnType(), expected);", "-          }", "-        };", "-        Lambda2<DJMethod, SignatureChecker, StaticMethodInvocation> makeResult = ", "-          new Lambda2<DJMethod, SignatureChecker, StaticMethodInvocation>() {", "-          public StaticMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type returned = substitute(m.returnType(), sigma);", "-            // TODO: Handle the thrown types", "-            return new StaticMethodInvocation(m, returned, checker.typeArguments(), checker.arguments(),", "-                                              m.thrownTypes());", "-          }", "-        };", "-        return findSignatureMatches(methods, makeChecker, makeResult);", "-      }"]}], "num": 29942}
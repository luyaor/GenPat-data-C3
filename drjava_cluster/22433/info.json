{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "443c043c29af7ed899dd134091ac4851", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bfba1cc904b68c7e7d465e1f8a9d42a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOptionTest.java", "commitBeforeChange": "ee1b261a9154b045e862f789f0b5716c6b21f09c", "commitAfterChange": "ab9bed821ebae24e0aa300941a5185e8e0b73667", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void testParse()", "signatureAfterChange": "    public void testParse()", "diff": ["-  public void testParse()", "-  {", "+  public void testParse() {", "-    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "-                                        InputEvent.CTRL_MASK),", "+    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, InputEvent.CTRL_MASK),", "-    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_NUM_LOCK,", "-                                        InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "-                                        true),", "+    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_NUM_LOCK, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true),", "-    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_COMMA,", "-                                        InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "-                                        false),", "+    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, false),", "-    // behaves correctly in 1.3, but the test will not work for some reason", "-    /*assertEquals(KeyStroke.getKeyStroke(new Character('%'),", "-     InputEvent.ALT_MASK | InputEvent.CTRL_MASK),", "-     io.parse(\"ctrl alt typed %\"));*/", "+    assertEquals(KeyStroke.getKeyStroke(new Character('%'), InputEvent.ALT_MASK | InputEvent.CTRL_MASK),", "+                 io.parse(\"ctrl alt typed %\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea6ad8f8e53ce50371e86a3e85c7328c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOptionTest.java", "commitBeforeChange": "ee1b261a9154b045e862f789f0b5716c6b21f09c", "commitAfterChange": "ab9bed821ebae24e0aa300941a5185e8e0b73667", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testFormat()", "signatureAfterChange": "   public void testFormat()", "diff": ["-  public void testFormat()", "-  {", "+  public void testFormat() {", "-    KeyStroke ks = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "-                                          InputEvent.ALT_MASK | InputEvent.META_MASK);", "+    KeyStroke ks = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, InputEvent.ALT_MASK | InputEvent.META_MASK);", "-    ks = KeyStroke.getKeyStroke(KeyEvent.VK_NUMBER_SIGN,", "-                                InputEvent.ALT_MASK | InputEvent.CTRL_MASK);", "+    ks = KeyStroke.getKeyStroke(KeyEvent.VK_NUMBER_SIGN, InputEvent.ALT_MASK | InputEvent.CTRL_MASK);", "-    // behaves correctly in 1.3, but the test will not work for some reason", "-    /*ks = KeyStroke.getKeyStroke(new Character('!'),", "-     InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK);", "-     assertEquals(ks, io.parse(io.format(ks)));*/", "+   ", "+    ks = KeyStroke.getKeyStroke(new Character('!'), InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK);", "+    assertEquals(ks, io.parse(io.format(ks)));", "-    ks = KeyStroke.getKeyStroke(KeyEvent.VK_F10,", "-                                InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "-                                true);", "+    ks = KeyStroke.getKeyStroke(KeyEvent.VK_F10, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);"]}], "num": 22433}
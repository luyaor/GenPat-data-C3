{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8747918dc32759ff0e502c7d289441e5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4aa3e9b9a4168bff59740929f0d1a7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void interpret(final String s) throws RemoteException", "signatureAfterChange": "    public InterpretResult interpret(final String s)", "diff": ["+  public InterpretResult interpret(final String s) {", "+    try {", "+      _dialog(\"to interp: \" + s);", "+      Object result = _interpreter.interpret(s);", "+      _dialog(\"interp ret: \" + result);", "-  public void interpret(final String s) throws RemoteException {", "-    // fire off thread to interpret to keep from blocking the caller", "-    // it's all asynchronous anyhow ...", "-    Thread thread = new Thread() {", "-      public void run() {", "-        try {", "-          //_dialog(\"to interp: \" + s);", "-          Object result = _interpreter.interpret(s);", "-          //_dialog(\"interp ret: \" + result);", "-          if (result == JavaInterpreter.NO_RESULT) {", "-            _mainJVM.returnedVoid();", "-          }", "-          else {", "-            // we use String.valueOf because it deals with result = null!", "-            _mainJVM.returnedResult(String.valueOf(result));", "-          }", "-        }", "-        catch (RemoteException re) {", "-          // what do do? nothing I guess. main jvm is dead!", "-        }", "-        catch (ExceptionReturnedException e) {", "-          Throwable t = e.getContainedException();", "-", "-          try {", "-            //_dialog(\"before call to threwException\");", "-            _mainJVM.threwException(t.getClass().getName(),", "-                                    t.getMessage(),", "-                                    getStackTrace(t));", "-          }", "-          catch (RemoteException re) {", "-            // what do do? nothing I guess. main jvm is dead!", "-          }", "-        }", "-        catch (Throwable t) {", "-          // A toString method might throw anything, so we need to be careful", "-          //_dialog(\"thrown by toString: \" + t);", "-          try {", "-            _mainJVM.threwException(t.getClass().getName(),", "-                                    t.getMessage(),", "-                                    getStackTrace(t));", "-          }", "-          catch (RemoteException re) {", "-            // what do do? nothing I guess. main jvm is dead!", "-          }", "-        }", "+      if (result == JavaInterpreter.NO_RESULT) {", "+        return new VoidResult();", "-    };", "+      else {", "+        // we use String.valueOf because it deals with result = null!", "+        _dialog(\"about to tell main result was \" + result);", "+        return new ValueResult(String.valueOf(result));", "+      }", "+    }", "+    catch (ExceptionReturnedException e) {", "+      Throwable t = e.getContainedException();", "-    thread.start();", "+      //_dialog(\"before call to threwException\");", "+      return new ExceptionResult(t.getClass().getName(),", "+                                 t.getMessage(),", "+                                 getStackTrace(t));", "+    }", "+    catch (Throwable t) {", "+      // A user's toString method might throw anything, so we need to be careful", "+      //_dialog(\"thrown by toString: \" + t);", "+      return new ExceptionResult(t.getClass().getName(),", "+                                 t.getMessage(),", "+                                 getStackTrace(t));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec59e2ab78993e25788aef3c958f17d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "signatureAfterChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "diff": ["-    final TestInteractionsModel model = (TestInteractionsModel)_model;", "+    TestInteractionsModel model = (TestInteractionsModel)_model;", "-    final InteractionsScriptModel ism = model.loadHistoryAsScript(new FileOpenSelector() {", "+    InteractionsScriptModel ism = model.loadHistoryAsScript(new FileOpenSelector() {", "-    final InteractionsDocument doc = model.getDocument();", "+    InteractionsDocument doc = model.getDocument();", "-    Utilities.invokeAndWait(new Runnable() { public void run() { ism.executeInteraction(); } });", "-    Utilities.clearEventQueue();", "+    ism.executeInteraction();", "-    Utilities.invokeAndWait(new Runnable() { public void run() { model.replReturnedVoid(); } });", "-    Utilities.clearEventQueue();", "+    model.replReturnedVoid();", "-    Utilities.invokeAndWait(new Runnable() { public void run() { ism.executeInteraction(); } });", "-    Utilities.clearEventQueue();", "+    ism.executeInteraction();", "-    Utilities.invokeAndWait(new Runnable() { public void run() { model.replReturnedVoid(); } });", "-    Utilities.clearEventQueue();", "+    model.replReturnedVoid();", "-    Utilities.clearEventQueue();"]}], "num": 4098}
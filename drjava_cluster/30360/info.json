{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88d04079b8f20d113dd1dfa4dfaaf868", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d4eae76c559bd09fae0be9d0c322487", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 56, "signatureBeforeChange": "   synchronized void reachedBreakpoint(BreakpointRequest request)", "signatureAfterChange": "   synchronized void reachedBreakpoint(BreakpointRequest request)", "diff": ["-   */", "-  synchronized void reachedBreakpoint(BreakpointRequest request) {", "-//    Utilities.showDebug(\"JPDADebugger.reachedBreakPoint(\" + request + \") called\");", "-    Object property = request.getProperty(\"debugAction\");", "-    if ( (property != null) && (property instanceof JPDABreakpoint) ) {", "-      final JPDABreakpoint breakpoint = (JPDABreakpoint) property;", "-      printMessage(\"Breakpoint hit in class \" + breakpoint.getClassName() + \"  [line \" + breakpoint.getLineNumber() + \"]\");", "-", "-      Utilities.invokeLater(new Runnable() { public void run() { _notifier.breakpointReached(breakpoint); } });", "-    }", "-    else {", "-      // A breakpoint we didn't set??", "-      _log(\"Reached a breakpoint without a debugAction property: \" + request);", "-    }", "-  }", "+   */", "+  synchronized void reachedBreakpoint(BreakpointRequest request) {", "+//    Utilities.showDebug(\"JPDADebugger.reachedBreakPoint(\" + request + \") called\");", "+    Object property = request.getProperty(\"debugAction\");", "+    if ( (property != null) && (property instanceof JPDABreakpoint) ) {", "+      final JPDABreakpoint breakpoint = (JPDABreakpoint) property;", "+      printMessage(\"Breakpoint hit in class \" + breakpoint.getClassName() + \"  [line \" + breakpoint.getLineNumber() + \"]\");", "+", "+      Utilities.invokeLater(new Runnable() { public void run() { _notifier.breakpointReached(breakpoint); } });", "+    }", "+    else {", "+      // A breakpoint we didn't set??", "+      error.log(\"Reached a breakpoint without a debugAction property: \" + request);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f2c671327580094a150a1ab1f1439a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7bb32c28070a4b5d5697c7c88ea0d664289c76e8", "commitAfterChange": "b2ad80c49aaa09f293a5bc1f6664d4cc5243219e", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 67, "signatureBeforeChange": "     public Component getListCellRendererComponent(JList list,                                                   Object value,                                                   int index,                                                   boolean iss,                                                   boolean chf)", "signatureAfterChange": "     public Component getListCellRendererComponent(JList list,                                                   Object value,                                                   int index,                                                   boolean iss,                                                   boolean chf)", "diff": ["-      String label = _getDisplayFilename((OpenDefinitionsDocument) value);", "+      String label = _model.getDisplayFilename((OpenDefinitionsDocument)value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6870cb49af5ad81ea823630e56e694e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "131f4a6b191fd8f9333c37cfcb5f35e99a4f3353", "commitAfterChange": "bb94e0f2c11efec317996114a4387b80b4ef1758", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["+    ", "-        removeNode(node);", "+        _model.removeNodeFromParent(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8244ee84c0746fcf847f2c701f752096", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "df1e36f71885ed44596fe30b7349f6c2af6222fa", "commitAfterChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["-          TypeChecker tc = makeTypeChecker(checkVisitorContext);", "+          AbstractTypeChecker tc = AbstractTypeChecker.makeTypeChecker(checkVisitorContext);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bb828a560d0d1cb0cc09e44c2b1d33e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExprParserTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r   public void testParseSucceeds() throws IOException, ParseException", "signatureAfterChange": "   public void testParseSucceeds() throws IOException, ParseException", "diff": ["-   */\r", "-  public void testParseSucceeds() throws IOException, ParseException {\r", "-    File directory = new File(\"testFiles\");\r", "-\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".test\");\r", "-      }\r", "-    });\r", "-\r", "-    for(int i = 0; i < testFiles.length; i++) {\r", "-      File currFile = testFiles[i];\r", "-      SourceFile sf = null;\r", "-      try {\r", "-        sf = new JExprParser(currFile).SourceFile();\r", "-      }\r", "-      catch (ParseException pe) {\r", "-        throw pe;\r", "-      }\r", "-\r", "-      String path2 = currFile.getAbsolutePath();\r", "-      int indexOfLastDot2 = path2.lastIndexOf('.');\r", "-      String newPath2 = path2.substring(0, indexOfLastDot2) + \".actual\";\r", "-      FileWriter fw = new FileWriter(newPath2);\r", "-      fw.write(sf.toString());\r", "-      fw.close();\r", "-      \r", "-      // Get the corresponding expected String value for the toString of the SourceFile.\r", "-      String path = currFile.getAbsolutePath();\r", "-      int indexOfLastDot = path.lastIndexOf('.');\r", "-      String newPath = path.substring(0, indexOfLastDot) + \".expected\";\r", "-      File f = new File(newPath);\r", "-      String text = readFileAsString(f);\r", "-      assertEquals(\"The resulting SourceFile generated from \" + currFile + \" is not correct.\", text, sf.toString());\r", "-    }\r", "-  }\r", "+   */", "+  public void testParseSucceeds() throws IOException, ParseException {", "+    File directory = new File(\"testFiles\");", "+", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".test\");", "+      }", "+    });", "+", "+    for(int i = 0; i < testFiles.length; i++) {", "+      File currFile = testFiles[i];", "+      SourceFile sf = null;", "+      try {", "+        sf = new JExprParser(currFile).SourceFile();", "+      }", "+      catch (ParseException pe) {", "+        throw pe;", "+      }", "+", "+      String path2 = currFile.getAbsolutePath();", "+      int indexOfLastDot2 = path2.lastIndexOf('.');", "+      String newPath2 = path2.substring(0, indexOfLastDot2) + \".actual\";", "+      FileWriter fw = new FileWriter(newPath2);", "+      fw.write(sf.toString());", "+      fw.close();", "+      ", "+      // Get the corresponding expected String value for the toString of the SourceFile.", "+      String path = currFile.getAbsolutePath();", "+      int indexOfLastDot = path.lastIndexOf('.');", "+      String newPath = path.substring(0, indexOfLastDot) + \".expected\";", "+      File f = new File(newPath);", "+      String text = IOUtil.toString(f);", "+      assertEquals(\"The resulting SourceFile generated from \" + currFile + \" is not correct.\", text, sf.toString());", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1491ac986c2e5e5b208043fe4c85ba8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "eee347fd3fa2c22c95183dc23b859e14d297bb1b", "commitAfterChange": "a72aa0a4c1f252999ab0a9a3163ec82bfbbfaea2", "methodNumberBeforeChange": 724, "methodNumberAfterChange": 725, "signatureBeforeChange": "     public void javadocStarted()", "signatureAfterChange": "     public void javadocStarted()", "diff": ["-      _disableJUnitActions();", "+      _guiAvailabilityNotifier.javadocStarted(); // JAVADOC and COMPILER"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b446fa9f329f00a12df4b16ea6af1e89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewVersionPopup.java", "commitBeforeChange": "69317eecda3235d4815eb5d9a5b9e536b8481c4a", "commitAfterChange": "3549437d3f0aec05949cb330cf74662cd269bb15", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 22, "signatureBeforeChange": "      @SuppressWarnings(\"fallthrough\")   protected String[] getMessage(Box<Boolean> availableRef)", "signatureAfterChange": "      @SuppressWarnings(\"fallthrough\")   protected String[] getMessage(Box<Boolean> availableRef)", "diff": ["-      case 3: if (getTargetFile().toString().endsWith(\".jar\")) { // only consider weekly builds if using *.jar file", "+      case 3: if (FileOps.getDrJavaApplicationFile().toString().endsWith(\".jar\")) { // only consider weekly builds if using *.jar file", "-            \"A new \" + newestType + \" has been found.\",", "-              \"The new version is: \" + _newestVersionString,", "+            \"A new \"+newestType+\" has been found.\",", "+              \"The new version is: \"+_newestVersionString,"]}], "num": 30360}
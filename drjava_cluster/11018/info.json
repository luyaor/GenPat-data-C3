{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f83e08b17a6430c7f75bd8c17df6bc7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e9ffab05b3459f1b1a7694d247db9a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 796, "methodNumberAfterChange": 804, "signatureBeforeChange": "   private void _showAutoImportDialog(String s)", "signatureAfterChange": "   private void _showAutoImportDialog(final String s)", "diff": ["-  private void _showAutoImportDialog(String s) {", "-    Set<JavaAPIListEntry> apiSet = getJavaAPISet();", "-    if (apiSet == null) return;", "+  private void _showAutoImportDialog(final String s) {", "+    hourglassOn();", "+    new Thread() {", "+      public void run() {", "+        // run this in a thread other than the main thread        ", "+        final Set<JavaAPIListEntry> apiSet = getJavaAPISet();", "+        if (apiSet == null) {", "+          hourglassOff();", "+          return;", "+        }", "-    List<JavaAPIListEntry> autoImportList = new ArrayList<JavaAPIListEntry>(apiSet);", "-    if (DrJava.getConfig().getSetting(DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue() &&", "-        _autoImportClassSet.size() > 0) {", "-      autoImportList.addAll(_autoImportClassSet);", "-    }", "-    else {", "-      File projectRoot = _model.getProjectRoot();", "-      List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "-      if (docs != null) {", "-        for (OpenDefinitionsDocument d: docs) {", "-          if (d.isUntitled()) continue;", "-          try {", "-            String rel = FileOps.stringMakeRelativeTo(d.getRawFile(), projectRoot);", "-            String full = rel.replace(File.separatorChar, '.');", "-            for (String ext: edu.rice.cs.drjava.model.compiler.CompilerModel.EXTENSIONS) {", "-              if (full.endsWith(ext)) {", "-                full = full.substring(0, full.lastIndexOf(ext));", "-                break;", "+        Utilities.invokeLater(new Runnable() {", "+          public void run() {", "+            // but now run this in the event thread again", "+            List<JavaAPIListEntry> autoImportList = new ArrayList<JavaAPIListEntry>(apiSet);", "+            if (DrJava.getConfig().getSetting(DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue() &&", "+                _autoImportClassSet.size() > 0) {", "+              autoImportList.addAll(_autoImportClassSet);", "+            }", "+            else {", "+              File projectRoot = _model.getProjectRoot();", "+              List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+              if (docs != null) {", "+                for (OpenDefinitionsDocument d: docs) {", "+                  if (d.isUntitled()) continue;", "+                  try {", "+                    String rel = FileOps.stringMakeRelativeTo(d.getRawFile(), projectRoot);", "+                    String full = rel.replace(File.separatorChar, '.');", "+                    for (String ext: edu.rice.cs.drjava.model.compiler.CompilerModel.EXTENSIONS) {", "+                      if (full.endsWith(ext)) {", "+                        full = full.substring(0, full.lastIndexOf(ext));", "+                        break;", "+                      }", "+                    }", "+                    String simple = full;", "+                    if (simple.lastIndexOf('.') >= 0) simple = simple.substring(simple.lastIndexOf('.') + 1);", "+                    ", "+                    JavaAPIListEntry entry = new JavaAPIListEntry(simple, full, null);", "+                    if (! autoImportList.contains(entry)) { autoImportList.add(entry); }", "+                  }", "+                  catch(IOException ioe) { /* ignore, just don't add this one */ }", "+                  catch(SecurityException se) { /* ignore, just don't add this one */ }", "+                }", "-            String simple = full;", "-            if (simple.lastIndexOf('.') >= 0) simple = simple.substring(simple.lastIndexOf('.') + 1);", "-            ", "-            JavaAPIListEntry entry = new JavaAPIListEntry(simple, full, null);", "-            if (! autoImportList.contains(entry)) { autoImportList.add(entry); }", "+            PredictiveInputModel<JavaAPIListEntry> pim =", "+              new PredictiveInputModel<JavaAPIListEntry>(true, new PrefixStrategy<JavaAPIListEntry>(), autoImportList);", "+            pim.setMask(s);", "+            _initAutoImportDialog();", "+            _autoImportDialog.setModel(true, pim); // ignore case", "+            _autoImportPackageCheckbox.setSelected(false);", "+            _autoImportDialog.setVisible(true);", "-          catch(IOException ioe) { /* ignore, just don't add this one */ }", "-          catch(SecurityException se) { /* ignore, just don't add this one */ }", "-        }", "+        });", "-    }", "-    PredictiveInputModel<JavaAPIListEntry> pim =", "-      new PredictiveInputModel<JavaAPIListEntry>(true, new PrefixStrategy<JavaAPIListEntry>(), autoImportList);", "-    pim.setMask(s);", "-    _initAutoImportDialog();", "-    _autoImportDialog.setModel(true, pim); // ignore case", "-    hourglassOn();", "-    _autoImportPackageCheckbox.setSelected(false);", "-    _autoImportDialog.setVisible(true);", "+    }.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fa7db2647a0738b127d8d32e80abf1c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 152, "signatureBeforeChange": "   private void _openJavadocUnderCursor()", "signatureAfterChange": "   private void _openJavadocUnderCursor()", "diff": ["-    generateJavaAPISet();", "-    Set<JavaAPIListEntry> apiSet = getJavaAPISet();", "-    if (apiSet == null) {", "-//      Utilities.show(\"Cannot load Java API class list. No network connectivity?\");", "-      return;", "-    }", "-    PredictiveInputModel<JavaAPIListEntry> pim =", "-      new PredictiveInputModel<JavaAPIListEntry>(true, new PrefixStrategy<JavaAPIListEntry>(), apiSet);", "-    OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "-    String mask = \"\";", "-    int loc = getCurrentDefPane().getCaretPosition();", "-    String s = odd.getText();", "-    // find start", "-    int start = loc;", "-    while(start > 0) {", "-      if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "-      --start;", "-    }", "-    while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start<loc)) {", "-      ++start;", "-    }", "-    // find end", "-    int end = loc-1;", "-    while(end<s.length()-1) {", "-      if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "-      ++end;", "-    }", "-    if ((start>=0) && (end<s.length())) {", "-      mask = s.substring(start, end + 1);", "-      pim.setMask(mask);", "-    }", "-    ", "+    hourglassOn();", "+    new Thread() {", "+      public void run() {", "+        // run this in a thread other than the main thread", "+        final Set<JavaAPIListEntry> apiSet = getJavaAPISet();", "+        if (apiSet == null) {", "+//        Utilities.show(\"Cannot load Java API class list. No network connectivity?\");", "+          hourglassOff();", "+          return;", "+        }", "+        Utilities.invokeLater(new Runnable() {", "+          public void run() {", "+            // but now run this in the event thread again", "+            PredictiveInputModel<JavaAPIListEntry> pim =", "+              new PredictiveInputModel<JavaAPIListEntry>(true, new PrefixStrategy<JavaAPIListEntry>(), apiSet);", "+            OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "+            String mask = \"\";", "+            int loc = getCurrentDefPane().getCaretPosition();", "+            String s = odd.getText();", "+            // find start", "+            int start = loc;", "+            while(start > 0) {", "+              if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "+              --start;", "+            }", "+            while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start<loc)) {", "+              ++start;", "+            }", "+            // find end", "+            int end = loc-1;", "+            while(end<s.length()-1) {", "+              if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "+              ++end;", "+            }", "+            if ((start>=0) && (end<s.length())) {", "+              mask = s.substring(start, end + 1);", "+              pim.setMask(mask);", "+            }", "+            ", "-    ", "-    if (pim.getMatchingItems().size() == 1) {", "-      // exactly one match, go to file", "-      if (pim.getCurrentItem() != null) {", "-        PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "-      }", "-    }", "-    else {", "-      // try appending \".java\" and the other file extensions and see if it's unique", "-      boolean exact = false;", "-      for(String attemptedExt: OptionConstants.LANGUAGE_LEVEL_EXTENSIONS) {", "-        pim.setMask(mask);", "-        pim.extendMask(attemptedExt);", "-        if (pim.getMatchingItems().size() == 1) {", "-          // exactly one match with \".java\" appended, go to file", "-          exact = true;", "-          if (pim.getCurrentItem() != null) {", "-            PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "-          }", "-          break;", "-        }", "-      }", "-      if (!exact) {", "-        // not exactly one match", "-        pim.setMask(mask);", "-        int found = 0;", "-        if (pim.getMatchingItems().size() == 0) {", "-          // if there are no matches, shorten the mask until there is at least one", "-          mask = pim.getMask();", "-          while(mask.length() > 0) {", "-            mask = mask.substring(0, mask.length() - 1);", "-            pim.setMask(mask);", "-            if (pim.getMatchingItems().size() > 0) { break; }", "-          }", "-        }", "-        else {", "-          // there are several matches, see if there is an exact match", "-          for(JavaAPIListEntry e: pim.getMatchingItems()) {", "-            if (e.toString().equalsIgnoreCase(mask)) {", "-              ++found;", "+            ", "+            if (pim.getMatchingItems().size() == 1) {", "+              // exactly one match, go to file", "+              if (pim.getCurrentItem() != null) {", "+                PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "+                hourglassOff();", "+              }", "+            }", "+            else {", "+              // try appending \".java\" and the other file extensions and see if it's unique", "+              boolean exact = false;", "+              for(String attemptedExt: OptionConstants.LANGUAGE_LEVEL_EXTENSIONS) {", "+                pim.setMask(mask);", "+                pim.extendMask(attemptedExt);", "+                if (pim.getMatchingItems().size() == 1) {", "+                  // exactly one match with \".java\" appended, go to file", "+                  exact = true;", "+                  if (pim.getCurrentItem() != null) {", "+                    PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "+                    hourglassOff();", "+                  }", "+                  break;", "+                }", "+              }", "+              if (!exact) {", "+                // not exactly one match", "+                pim.setMask(mask);", "+                int found = 0;", "+                if (pim.getMatchingItems().size() == 0) {", "+                  // if there are no matches, shorten the mask until there is at least one", "+                  mask = pim.getMask();", "+                  while(mask.length() > 0) {", "+                    mask = mask.substring(0, mask.length() - 1);", "+                    pim.setMask(mask);", "+                    if (pim.getMatchingItems().size() > 0) { break; }", "+                  }", "+                }", "+                else {", "+                  // there are several matches, see if there is an exact match", "+                  for(JavaAPIListEntry e: pim.getMatchingItems()) {", "+                    if (e.toString().equalsIgnoreCase(mask)) {", "+                      ++found;", "+                    }", "+                  }", "+                }", "+                if (found==1) {", "+                  // open unique item and return", "+                  PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "+                  hourglassOff();", "+                }", "+                else {", "+                  initOpenJavadocDialog();", "+                  _openJavadocDialog.setModel(true, pim); // ignore case", "+                  _openJavadocDialog.setVisible(true);", "+                }", "+              }", "-        }", "-        if (found==1) {", "-          // open unique item and return", "-          PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "-        }", "-        else {", "-          initOpenJavadocDialog();", "-          _openJavadocDialog.setModel(true, pim); // ignore case", "-          hourglassOn();", "-          _openJavadocDialog.setVisible(true);", "-        }", "+        });", "-    }", "+    }.start();"]}], "num": 11018}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e6abdf191e8c96cba96df91920337d8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "491cfd0f3cd30efdde1642551eaecee2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JLSTypeSystem.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 140, "signatureBeforeChange": "      protected Iterable<Type> captureTypeArgs(Iterable<? extends Type> targs,                                            Iterable<? extends VariableType> params)", "signatureAfterChange": "      protected Iterable<Type> captureTypeArgs(Iterable<? extends Type> targs,                                            Iterable<? extends VariableType> params)", "diff": ["-    Set<VariableType> remainingParams = CollectUtil.makeSet(params);", "+    Set<VariableType> remainingParams = new HashSet<VariableType>();", "+    CollectUtil.addAll(remainingParams, params);", "-            triple.first().initializeUpperBound(wildU.equals(OBJECT) ? paramU :", "-                                                  new IntersectionType(IterUtil.make(wildU, paramU)));", "+            Type captU = wildU.equals(OBJECT) ? paramU :", "+                         paramU.equals(OBJECT) ? wildU : new IntersectionType(IterUtil.make(wildU, paramU));", "+            triple.first().initializeUpperBound(captU);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d522ff44d72216f98f3e0010824aa907", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 100, "signatureBeforeChange": "    protected Iterable<Type> captureTypeArgs(Iterable<? extends Type> targs,                                            Iterable<? extends VariableType> params)", "signatureAfterChange": "    protected Iterable<Type> captureTypeArgs(Iterable<? extends Type> targs,                                            Iterable<? extends VariableType> params)", "diff": ["+        Type argU = argW.symbol().upperBound();", "+        Type argL = argW.symbol().lowerBound();", "-        triple.first().initializeUpperBound(new IntersectionType(IterUtil.make(argW.symbol().upperBound(),", "-                                                                               paramU)));", "-        triple.first().initializeLowerBound(new UnionType(IterUtil.make(argW.symbol().lowerBound(), paramL)));", "+        Type captureU = argU.equals(paramU) ? argU : new IntersectionType(IterUtil.make(argU, paramU));", "+        Type captureL = argL.equals(paramL) ? argL : new UnionType(IterUtil.make(argL, paramL));", "+        triple.first().initializeUpperBound(captureU);", "+        triple.first().initializeLowerBound(captureL);"]}], "num": 1733}
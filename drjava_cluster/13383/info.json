{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f27dd02f5eccae53e9d78dd1c229f961", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89854f955f3fef18fed2d57eae28fa52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public int getOffset(int lineNum)", "signatureAfterChange": "   public int getOffset(int lineNum)", "diff": ["-    if (lineNum < 0) return -1;", "-    String defsText = getText();", "-    int curLine = 1;", "-    int offset = 0; // offset is number of chars from beginning of file", "-    ", "-    // offset is always pointing to the first character in a line at the top of the loop", "-    /* Isn't there a more efficient way to do this? */", "-    while (offset < defsText.length()) {", "-      ", "-      if (curLine == lineNum) return offset;", "-      ", "-      int nextNewline = defsText.indexOf('\\n', offset);", "-      if (nextNewline == -1) return -1; // end of the document, and couldn't find the supplied lineNum", "-      ", "-      curLine++;", "-      offset = nextNewline + 1;", "+    if (lineNum <= 0) return -1;", "+    if (lineNum == 1) return 0;", "+   ", "+", "+    acquireReadLock();", "+    synchronized(_reduced) {", "+      final int origPos = getCurrentLocation();", "+      try {", "+        final int docLen = getLength();", "+        ", "+        _setCurrentLocation(0); // _currentLocation is candidate offset to return", "+        int i;", "+        for (i = 1; (i < lineNum) && (_currentLocation < docLen); i++) {", "+          int dist = _reduced.getDistToNextNewline();     // or end of doc", "+          if (_currentLocation + dist < docLen) dist++;  // skip newline", "+          _move(dist);  // updates _currentLocation to beginning of line # (i + 1)", "+        }", "+        if (i == lineNum) return _currentLocation;", "+        else return -1;", "+      }", "+      finally {", "+        _setCurrentLocation(origPos);", "+        releaseReadLock(); ", "+      }", "-    return -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce9d9d183006db4f88354a6079f7baf9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public int getOffset(int lineNum)", "signatureAfterChange": "   public int getOffset(int lineNum)", "diff": ["+    if (lineNum < 0) return -1;", "+    String defsText = getText();", "+    int curLine = 1;", "+    int offset = 0; // offset is number of chars from beginning of file", "-    try {", "-      if (lineNum < 0) return -1;", "+    // offset is always pointing to the first character in a line", "+    // at the top of the loop", "+    while (offset < defsText.length()) {", "-      String defsText = getText(0, getLength());", "-      int curLine = 1;", "-      int offset = 0; // offset is number of chars from beginning of file", "+      if (curLine==lineNum) return offset;", "-      // offset is always pointing to the first character in a line", "-      // at the top of the loop", "-      while (offset < defsText.length()) {", "-        ", "-        if (curLine==lineNum) return offset;", "-        ", "-        int nextNewline = defsText.indexOf('\\n', offset);", "-        if (nextNewline == -1) return -1; // end of the document, and couldn't find the supplied lineNum", "-          ", "-        curLine++;", "-        offset = nextNewline + 1;", "-      }", "-      return -1;", "+      int nextNewline = defsText.indexOf('\\n', offset);", "+      if (nextNewline == -1) return -1; // end of the document, and couldn't find the supplied lineNum", "+      ", "+      curLine++;", "+      offset = nextNewline + 1;", "-    catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+    return -1;"]}], "num": 13383}
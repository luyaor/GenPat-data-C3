{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "579a6101e55f1cce215ed530e71e2d4f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e721594843c99948b31d6e6146c1d0b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": "      public void testForArrayAccessOnly()", "signatureAfterChange": "      public void testForArrayAccessOnly()", "diff": ["-      ArrayAccess aa = new ArrayAccess(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+      ArrayAccess aa = ", "+        new ArrayAccess(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+      ", "+      Hashtable<SymbolData, LanguageLevelVisitor> testNewSDs = LanguageLevelConverter._newSDs;", "+      LanguageLevelVisitor testLLVisitor = ", "+        new LanguageLevelVisitor(_etc._file, ", "+                                 _etc._package, ", "+                                 _etc._importedFiles, ", "+                                 _etc._importedPackages, ", "+                                 new LinkedList<String>(), ", "+                                 new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>(), ", "+                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "-      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, ", "-                                   new LanguageLevelVisitor(_etc._file, _etc._package, _etc._importedFiles, _etc._importedPackages, new LinkedList<String>(), new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>(), new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>()),", "-                                   SourceInfo.NO_INFO);", "+      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, testLLVisitor, SourceInfo.NO_INFO);             ", "-      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d2844d515dae68dd153eeac8fc98ffb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "b9f87cd074abdafacdb2719b29e0803fd0f81cf0", "commitAfterChange": "04d7824a20eb03ad17793ba3198be21442313bdc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded, \r                                                   boolean leaf, int row, boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "diff": ["-    /** Overrides the default renderer component to use proper coloring. */\r", "-    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded, \r", "-                                                  boolean leaf, int row, boolean hasFocus) {\r", "-      Component renderer = super.getTreeCellRendererComponent(tree, value, isSelected, isExpanded, leaf, row, hasFocus);\r", "-      \r", "-      if (renderer instanceof JComponent) { ((JComponent) renderer).setOpaque(false); }\r", "-      \r", "-      _setColors(renderer);\r", "-      \r", "-      // set tooltip\r", "-      String tooltip = null;\r", "-      if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {\r", "-        if (leaf) {\r", "-          DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;\r", "-          if (node.getUserObject() instanceof RegionTreeUserObj) {\r", "-            @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();\r", "-            \r", "-            OpenDefinitionsDocument doc = r.getDocument();\r", "-//            doc.acquireReadLock();\r", "-            try {\r", "-              int lnr = doc.getLineOfOffset(r.getStartOffset())+1;\r", "-              int startOffset = doc._getOffset(lnr - 3);\r", "-              if (startOffset<0) { startOffset = 0; }\r", "-              int endOffset = doc._getOffset(lnr + 3);\r", "-              if (endOffset<0) { endOffset = doc.getLength() - 1; }\r", "-              \r", "-              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)\r", "-              String s = doc.getText(startOffset, endOffset-startOffset);\r", "-              \r", "-              // this highlights the actual region in red\r", "-              int rStart = r.getStartOffset()-startOffset;\r", "-              if (rStart<0) { rStart = 0; }\r", "-              int rEnd = r.getEndOffset()-startOffset;\r", "-              if (rEnd > s.length()) { rEnd = s.length(); }\r", "-              if ((rStart <= s.length()) && (rEnd >= rStart)) {\r", "-                String t1 = StringOps.encodeHTML(s.substring(0, rStart));\r", "-                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));\r", "-                String t3 = StringOps.encodeHTML(s.substring(rEnd));\r", "-                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;\r", "-              }\r", "-              else {\r", "-                s = StringOps.encodeHTML(s);\r", "-              }\r", "-              tooltip = \"<html><pre>\"+s+\"</pre></html>\";\r", "-            }\r", "-            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }\r", "-//            finally { doc.releaseReadLock(); }\r", "-            setText(node.getUserObject().toString());\r", "-            renderer = this;\r", "-          }\r", "-        }\r", "-      }\r", "-      setToolTipText(tooltip);\r", "-      return renderer;\r", "-    }\r", "+    /** Overrides the default renderer component to use proper coloring. */", "+    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded, ", "+                                                  boolean leaf, int row, boolean hasFocus) {", "+      Component renderer = super.getTreeCellRendererComponent(tree, value, isSelected, isExpanded, leaf, row, hasFocus);", "+      ", "+      if (renderer instanceof JComponent) { ((JComponent) renderer).setOpaque(false); }", "+      ", "+      _setColors(renderer);", "+      ", "+      // set tooltip", "+      String tooltip = null;", "+      if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {", "+        if (leaf) {", "+          DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;", "+          Object o = node.getUserObject();", "+          ", "+          if (node.getUserObject() instanceof RegionTreeUserObj) {", "+            @SuppressWarnings(\"unchecked\")", "+            RegionTreeUserObj<R> userObject = (RegionTreeUserObj<R>) o;", "+            R r = userObject.region();", "+            ", "+            OpenDefinitionsDocument doc = r.getDocument();", "+            try {", "+              int lnr = doc.getLineOfOffset(r.getStartOffset()) + 1;", "+              int startOffset = doc._getOffset(lnr - 3);", "+              if (startOffset < 0) { startOffset = 0; }", "+              int endOffset = doc._getOffset(lnr + 3);", "+              if (endOffset < 0) { endOffset = doc.getLength() - 1; }", "+              ", "+              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "+              String s = doc.getText(startOffset, endOffset - startOffset);", "+              ", "+              // this highlights the actual region in red", "+              int rStart = r.getStartOffset()-startOffset;", "+              if (rStart < 0) { rStart = 0; }", "+              int rEnd = r.getEndOffset()-startOffset;", "+              if (rEnd > s.length()) { rEnd = s.length(); }", "+              if ((rStart <= s.length()) && (rEnd >= rStart)) {", "+                String t1 = StringOps.encodeHTML(s.substring(0, rStart));", "+                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "+                String t3 = StringOps.encodeHTML(s.substring(rEnd));", "+                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+              }", "+              else {", "+                s = StringOps.encodeHTML(s);", "+              }", "+              tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "+            }", "+            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "+//            finally { doc.releaseReadLock(); }", "+            setText(node.getUserObject().toString());", "+            renderer = this;", "+          }", "+        }", "+      }", "+      setToolTipText(tooltip);", "+      return renderer;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa57d516ee735da53e945e295160ffa6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "9d11311a2c8fe69828f38bf3b0da9037a3e51914", "commitAfterChange": "d86f285f67e4f6710d1cc904d1f552e6a6a92520", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": "            private void _openProjectHelper(File projectFile)", "signatureAfterChange": "            private void _openProjectHelper(File projectFile)", "diff": ["+    IDocumentNavigator new_nav;", "-      ", "+      new_nav = _model.getDocumentNavigator();", "-      _model.getDocumentNavigator().setTopLevelPath(tlp);", "+      new_nav.setTopLevelPath(tlp);", "+", "+    ", "+    List<OpenDefinitionsDocument> old_lod =  _model.getDefinitionsDocuments();", "+", "+    /* i have to copy the list, but i can't use clone, since List is an interface", "+     * so i need to manually copy the list.", "+     * ", "+     * i have to copy it, becase when i close all the files, i have to keep a reference to the currently open files", "+     */", "+    /*", "+    LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "+    for(int i=0;i<old_lod.size();i++){", "+      lod.add(old_lod.get(i));", "+    }", "+    */", "+    ", "+    ", "+    // XXX", "+    _closeAll();", "+", "+/*    ", "+    OpenDefinitionsDocument odd;", "+    INavigatorItem item;", "+", "+    System.out.println(lod.size());", "+    System.out.println(\"-------------\");", "+    for(int i=0;i<lod.size();i++){", "+      odd = lod.get(i);", "+      item = _model.getIDocGivenODD(odd);", "+      try{", "+        new_nav.addDocument(item, odd.getFile().getParent());", "+        System.out.println(\"adding \" + item + \" at \" + odd.getFile().getParent());", "+      }catch(IllegalStateException e){", "+        ", "+      }catch(FileMovedException e){", "+        ", "+      }", "+      ", "+    }", "+    System.out.println(\"-------------\");", "+", "+  */  ", "+", "-    ", "-    _closeAll();"]}], "num": 23119}
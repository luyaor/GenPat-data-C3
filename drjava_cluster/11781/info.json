{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff37aedf6b0311eafe518d41de6b36fd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f82f69bcfa6132c20b3c6c82e4f3e9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": "     @Override public Type visit(ObjectFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(ObjectFieldAccess node)", "diff": ["-      if (receiver instanceof AmbiguousName) {", "-        Node resolved = resolveAmbiguousName((AmbiguousName) receiver);", "-        if (resolved instanceof ReferenceTypeName) {", "-          // this is actually a StaticFieldAccess", "-          Expression translation =", "-            new StaticFieldAccess((ReferenceTypeName) resolved, node.getFieldName(), node.getSourceInfo());", "-          translation.acceptVisitor(this);", "-          setTranslation(node, translation);", "-          setVariableType(node, getVariableType(translation));", "-          return setType(node, getType(translation));", "-        }", "-        else { receiver = (Expression) resolved; }", "-      }", "-      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5635a1f2d379efe1a2b2c8bb7e3954", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "15e62c4c6cc17bdc9cb202b4c5c58df163a8f8cf", "commitAfterChange": "6b388fb1877469cd91350296fabdf9fe8d522b74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "diff": ["-        // TODO: eliminate hacks that support inferred assignment and void returns", "-        if (n.hasProperty(\"assignmentAsDeclaration\")) {", "-          n = (Node) n.getProperty(\"assignmentAsDeclaration\");", "-        }", "-        if (n instanceof Expression) {", "-          Object evalResult = new ExpressionEvaluator(newBindings, _opt).value(n);", "-          if (evalResult == null && NodeProperties.getType(n).equals(TypeSystem.VOID)) {", "-            val = Option.none();", "-          }", "-          else { val = Option.some(evalResult); }", "-        }", "-        else {", "-          StatementEvaluator.Result r = n.acceptVisitor(new StatementEvaluator(newBindings, _opt));", "-          newBindings = r.bindings();", "-          val = r.value();", "-        }", "+        StatementEvaluator.Result r = n.acceptVisitor(new StatementEvaluator(newBindings, _opt));", "+        newBindings = r.bindings();", "+        val = r.value();"]}], "num": 11781}
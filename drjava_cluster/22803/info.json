{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fe57f5ef8155e96f91b758f74fd2ede", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9660c479a3cab566e04fc1959946f824", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Void forClassDef(ClassDef that)", "signatureAfterChange": "   public Void forClassDef(ClassDef that)", "diff": ["-", "+    ", "+    boolean isTestCase = false;  // flag to support automatic importing of junit.framework.*;", "-    SymbolData sd = addSymbolData(that, className);", "-   ", "+    SymbolData sd = defineSymbolData(that, className);", "+    ", "+    if (sd != null) {", "+    ", "+      String superName = that.getSuperclass().getName();", "+      if (superName.equals(\"TestCase\") || superName.equals(\"junit.framework.TestCase\")) {", "+        isTestCase = true;", "+        if (! _importedPackages.contains(\"junit.framework\") && ! _importedFiles.contains(\"junit.framework.TestCase\")) {", "+          System.err.println(\"importing junit.framework.TestCase in file \" + that.getSourceInfo());", "+          _importedFiles.addLast(\"junit.framework.TestCase\");", "+          sd.setHasAutoGeneratedJunitImport(true);", "+        }", "+        // add to symbol table", "+        getSymbolData(\"junit.framework.TestCase\", that.getSourceInfo(), true, false, true, false); ", "+//        assert getSymbolData(\"junit.framework.TestCase\", that.getSourceInfo()) != null;", "+      }", "+    }", "+    ", "+    ", "+    // Test cases are automatically public", "+    if (isTestCase) sd.addModifier(\"public\");", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faa038ba9da245f3eabed08fbc0c9638", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/IncrementalTaskController.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void pause()", "signatureAfterChange": "   public void pause()", "diff": ["-    switch (_status) {", "-      case RUNNING: doPause(); break;", "-      case CANCELED: throw new IllegalStateException(\"Task is cancelled\");", "-    }", "+    // ideally, this would be implemented as part of the state, but we can't do that without", "+    // redefining the entire hierarchy of state classes", "+    boolean success = false;", "+    do {", "+      State s = state.get();", "+      if (s instanceof TaskController.RunningState) {", "+        success = state.compareAndSet(s, new FreshPausingState());", "+        if (success) { doPause(); }", "+      }", "+      else if (s instanceof TaskController.FreshStartingState) {", "+        success = state.compareAndSet(s, new PausedStartingState());", "+      }", "+      else if (s instanceof IncrementalTaskController.StartedPausingState) {", "+        success = state.compareAndSet(s, new FreshPausingState());", "+      }", "+      else if (s instanceof TaskController.CanceledState) {", "+        throw new CancellationException(\"Task is canceled\");", "+      }", "+      else { // ignore other fresh, finished, pausing, or canceling states", "+        success = true;", "+      }", "+    } while (!success);"]}], "num": 22803}
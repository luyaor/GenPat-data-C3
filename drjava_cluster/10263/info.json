{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff02d0581e829b8a2a0b28a0239e0ad9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad2a8bf0805dab5298a9104cac5c9e17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void executeInteraction()", "signatureAfterChange": "   public void executeInteraction()", "diff": ["-   */", "+    */", "-    _model.interpretCurrentInteraction();", "-    _passedCurrent = true;", "-  }", "+    _doc.acquireWriteLock(); ", "+    try {", "+      _passedCurrent = true;", "+      /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "+       * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "+       * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "+       * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "+       * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "+       * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "+       * locked section avoiding the race. */", "+      SwingUtilities.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+    finally { _doc.releaseWriteLock(); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca0bd53c713e557211dcb8b54c23e9c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachineTest.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": "     public boolean shouldContinue()", "signatureAfterChange": "      private void replaceAll()", "diff": ["+  private void replaceAll() {", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _frm.replaceAll(); } });", "-  private static ContinueCommand CONTINUE = new ContinueCommand() {", "-    public boolean shouldContinue() {", "-      return true;", "-    }"]}], "num": 10263}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cef361e2f87466f32c75b0b957505125", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4162e05a1c5f3c2dcf2e51bd810a2ea4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public Void forInnerInterfaceDef(InnerInterfaceDef that)", "signatureAfterChange": "           public void testForInnerClassDef()", "diff": ["-   /** Process a local inner interface definition */", "-    handleInnerInterfaceDef(that, _bodyData, getQualifiedClassName(_bodyData.getSymbolData().getName()) + \".\" + ", "-                        _bodyData.getSymbolData().preincrementLocalClassNum() + that.getName().getText());", "+     public void testForInnerClassDef() {", "+     ", "+      // Test a local inner class definition and reference", "+      SymbolData obj = new SymbolData(\"ILikeMonkey\");", "+      LanguageLevelConverter.symbolTable.put(\"ILikeMonkey\", obj);", "+      InnerClassDef cd0 = ", "+        new InnerClassDef(SourceInfo.NO_INFO, ", "+                          _packageMav, ", "+                          new Word(SourceInfo.NO_INFO, \"Rod\"),", "+                          new TypeParameter[0], ", "+                          new ClassOrInterfaceType(SourceInfo.NO_INFO, \"ILikeMonkey\", new Type[0]), ", "+                          new ReferenceType[0], ", "+                          new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      cd0.visit(_bbv);", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      SymbolData innerClass1 = _bbv._bodyData.getInnerClassOrInterface(\"Rod\");", "+      assertNotNull(\"Should have a inner class named Rod\", innerClass1);", "+      ", "+      // Test one with explicit modifiers", "+      InnerClassDef cd1 = ", "+        new InnerClassDef(SourceInfo.NO_INFO, ", "+                          _publicMav, ", "+                          new Word(SourceInfo.NO_INFO, \"Todd\"),", "+                          new TypeParameter[0], ", "+                          new ClassOrInterfaceType(SourceInfo.NO_INFO, \"ILikeMonkey\", new Type[0]), ", "+                          new ReferenceType[0], ", "+                          new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      cd1.visit(_bbv);", "+      assertEquals(\"There should be no errors\", 0, errors.size());  // modifiers are allowed", "+      SymbolData innerClass2 = _bbv._bodyData.getInnerClassOrInterface(\"Todd\");", "+      assertNotNull(\"Should have a inner class named Todd\", innerClass2);", "+     }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "674257c576fe27894faa21480d70b06c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "6d23d799552cf55313f22433cb12915906b19690", "commitAfterChange": "8a04e8e94a35e432777ebd444cf5fc70868fe9e4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree()", "signatureAfterChange": "   public void buildTree()", "diff": ["-    /*", "-    String oneLevel = _indentSize;", "+    String oneLevel = _indentLevel;", "-      rule33 = new ActionStartStmtPlus(oneLevel),", "+      rule33 = new ActionStartCurrStmtPlus(oneLevel),", "-      rule30 = new QuestionInTernary(rule31, rule32),", "-      rule29 = new QuestionLineContains(\":\", rule30, rule33),", "-      rule28 = new ActionStartStmtPlus(\"\"),                           ", "-      rule27 = new QuestionCurrLineStartsWith(\"{\", rule28, rule29),", "-      rule26 = rule28,", "+      rule30 = new QuestionExistsCharInStmt('?', ':', rule31, rule32),", "+      rule29 = new QuestionLineContains(':', rule30, rule33),", "+      rule28 = new ActionStartStmtOfBracePlus(\"\"),", "+      rule27 = new QuestionCurrLineStartsWithSkipComments(\"{\", rule28, rule29),", "+      //rule26 = new ActionStartPrevStmtPlus(\"\"),", "-      rule24 = rule28,", "-      rule23 = new QuestionInTernary(rule24, rule25),", "-      rule22 = new QuestionLineContains(\":\", rule23, rule24),", "-      rule21 = new ActionStartStmtOfBracePlus(\"\"),", "-      rule20 = new QuestionCurrLineStartsWith(\"}\", rule21, rule22),", "+      //rule24 = rule26,", "+      //rule23 = new QuestionExistsCharInStmt('?', ':', rule24, rule25),", "+      //rule22 = new QuestionLineContains(':', rule23, rule24),", "+      rule21 = rule28,", "+      rule20 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule21, /**rule22*/ rule25),", "-      rule17 = rule33,", "+      rule17 = rule32,", "-      rule09 = new ActionStartPrevLinePlus(\" * \"),", "-      rule08 = rule04,          ", "+      rule09 = new ActionStartPrevLinePlus(\"* \"),", "+      rule08 = new ActionStartPrevLinePlus(\"\"),          ", "-    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6af50766dc3dd2f91f957a336da384b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "ecb6b3252da3d7d3d097f277abccb8227fa3bd5e", "commitAfterChange": "9b7234acc5fdae30e0416741ebffabb14bf8b0b7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public void testMetaKeyPress()", "signatureAfterChange": "    public void testMetaKeyPress()", "diff": ["-//     DefinitionsPane definitions = _frame.getCurrentDefPane();", "-", "-       /* The following is the sequence of key events that happen when the user presses Meta-a */", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_META));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_A));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_UNDEFINED, 'a'));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_A));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "-// \t\t\t\t0, KeyEvent.VK_META));", "-", "-//     DefinitionsDocument doc = definitions.getOpenDocument().getDocument();", "-//     try {", "-//       assertEquals(\"Test if meta key inserted a character into document\", \"\", doc.getText(0, doc.getLength()));", "-//     } catch(BadLocationException ble){", "-//       ble.printStackTrace();", "-//       fail(\"BadLocationException\");", "-//     }", "+     DefinitionsPane definitions = _frame.getCurrentDefPane();", "+     DefinitionsDocument doc = definitions.getOpenDocument().getDocument();", "+     _assertDocumentEmpty(doc, \"point 0\");", "+     /* The following is the sequence of key events that happen when the user presses Meta-a */", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_META));", "+     _assertDocumentEmpty(doc, \"point 1\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_W));", "+     _assertDocumentEmpty(doc, \"point 2\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_UNDEFINED, 'w'));", "+     _assertDocumentEmpty(doc, \"point 3\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_W));", "+     _assertDocumentEmpty(doc, \"point 4\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+\t\t\t\t\t     0, KeyEvent.VK_META));", "+     _assertDocumentEmpty(doc, \"point 5\");"]}], "num": 3613}
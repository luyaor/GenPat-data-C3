{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bbc7d9be51824c2e50bb0ae4c5adefe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c5da9d62fba3c0772264504a7df862e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public Object visit(ClassAllocation node)", "signatureAfterChange": "   public Object visit(ClassAllocation node)", "diff": ["-     */", "-    public Object visit(ClassAllocation node) {", "-        List        larg = node.getArguments();", "-        Object[]    args = Constants.EMPTY_OBJECT_ARRAY;", "-\t", "-\t// Fill the arguments", "-\tif (larg != null) {", "-\t    args = new Object[larg.size()];", "-\t    Iterator it = larg.iterator();", "-\t    int      i  = 0;", "-\t    while (it.hasNext()) {", "-\t\targs[i++] = ((Expression)it.next()).acceptVisitor(this);", "-\t    }", "-\t}", "-", "-\treturn context.invokeConstructor(node, args);", "+   */", "+  public Object visit(ClassAllocation node) {", "+    List<Expression> larg = node.getArguments();", "+    Object[]    args = Constants.EMPTY_OBJECT_ARRAY;", "+    ", "+    // Fill the arguments", "+    if (larg != null) {", "+      args = new Object[larg.size()];", "+      Iterator<Expression> it = larg.iterator();", "+      int      i  = 0;", "+      while (it.hasNext()) {", "+        args[i++] = it.next().acceptVisitor(this);", "+      }", "+    ", "+    return context.invokeConstructor(node, args);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a12643ea30b00320e476bb76c506d83", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public Object visit(SimpleAllocation node)", "signatureAfterChange": "   public Object visit(SimpleAllocation node)", "diff": ["+   */", "+  public Object visit(SimpleAllocation node) {", "+    List<Expression> larg = node.getArguments();", "+    Object[] args = Constants.EMPTY_OBJECT_ARRAY;", "+    ", "+    // Fill the arguments", "+    if (larg != null) {", "+      args = new Object[larg.size()];", "+      Iterator<Expression> it = larg.iterator();", "+      int      i  = 0;", "+      while (it.hasNext()) {", "+        args[i++] = it.next().acceptVisitor(this);", "+      }", "+    ", "+    return context.invokeConstructor(node, args);", "+  }", "-     */", "-    public Object visit(SimpleAllocation node) {", "-        List        larg = node.getArguments();", "-        Object[]    args = Constants.EMPTY_OBJECT_ARRAY;", "-\t", "-\t// Fill the arguments", "-\tif (larg != null) {", "-\t    args = new Object[larg.size()];", "-\t    Iterator it = larg.iterator();", "-\t    int      i  = 0;", "-\t    while (it.hasNext()) {", "-\t\targs[i++] = ((Expression)it.next()).acceptVisitor(this);", "-\t    }", "-\t}", "-", "-\treturn context.invokeConstructor(node, args);"]}], "num": 7225}
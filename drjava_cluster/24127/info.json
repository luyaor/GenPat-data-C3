{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4809ed6bb3a86c5a807511f7c76e85e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "011e20f65584b2111102b77b8f490e0b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "          public void testForSimpleUninitializedArrayInstantiation()", "signatureAfterChange": "          public void testForSimpleUninitializedArrayInstantiation()", "diff": ["-      SourceInfo si = SourceInfo.NO_INFO;", "+      SourceInfo si = SourceInfo.NONE;", "-      //Test one that works", "+      // Test one that works", "-      //Test one with a bad index", "-      SimpleUninitializedArrayInstantiation sa2 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {i1, i2, badIndexD}));", "+      // Test one with a bad index", "+      SimpleUninitializedArrayInstantiation sa2 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", ", "+                                                                    new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {i1, i2, badIndexD}));", "-      assertEquals(\"The error message should be correct\", \"The dimensions of an array instantiation must all be ints.  You have specified something of type double\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The dimensions of an array instantiation must all be ints.  You have specified something of type double\", ", "+                   errors.getLast().getFirst());", "-      SimpleUninitializedArrayInstantiation sa3 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"Jonathan[]\", new ClassOrInterfaceType(si, \"Jonathan\", new Type[0])), ", "-                                                                                            new DimensionExpressionList(si, new Expression[]{i1}));", "+      SimpleUninitializedArrayInstantiation sa3 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"Jonathan[]\", ", "+                                                                    new ClassOrInterfaceType(si, \"Jonathan\", new Type[0])), ", "+                                                  new DimensionExpressionList(si, new Expression[]{i1}));", "-      assertEquals(\"Error message should be correct\", \"Class or variable Jonathan[] not found.\", errors.getLast().getFirst());", "-      ", "-      //Test one with wrong dimensions--too many", "-      SimpleUninitializedArrayInstantiation sa4 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\"))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {i1, i2, i3}));", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Class or variable Jonathan[] not found.\", ", "+                   errors.getLast().getFirst());", "+      // Test one with wrong dimensions--too many", "+      SimpleUninitializedArrayInstantiation sa4 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][]\", ", "+                                                                    new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\"))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {i1, i2, i3}));", "-      assertEquals(\"Error message should be correct\", \"You are trying to initialize an array of type int[][] which requires 2 dimensions, but you have specified 3 dimensions--the wrong number\", errors.getLast().getFirst());", "-      ", "-      ", "-      //Test one with wrong dimensions--too few--should be no additional errors", "-      SimpleUninitializedArrayInstantiation sa5 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {i1, i2}));", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You are trying to initialize an array of type int[][] which requires 2 dimensions, but you have \"", "+                     + \"specified 3 dimensions--the wrong number\", ", "+                   errors.getLast().getFirst());", "+      // Test one with wrong dimensions--too few--should be no additional errors", "+      SimpleUninitializedArrayInstantiation sa5 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", ", "+                                                                    new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", ", "+                                                                                                               new PrimitiveType(si, \"int\")))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {i1, i2}));", "-      assertEquals(\"There should be no errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The class or interface int[][][] is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"There should be one new error\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface int[][][] in int[][][] is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7705e8847b91035dd5d7cdc8839b004c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": "               public void testForComplexMethodInvocation()", "signatureAfterChange": "               public void testForComplexMethodInvocation()", "diff": ["-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"giraffe\")),", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"g\")), ", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] { ", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"g\")), ", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] { ", "+        new IntegerLiteral(SourceInfo.NONE, 5)}));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "-        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"giraffe\")),", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NONE, 4.2)}));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "-        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"g\")), ", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NONE, 4.2)}));", "-      ", "-      assertEquals(\"Error message should be correct\", \"No method found in class giraffe with signature: myName().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"No method found in class giraffe with signature: myName().\", ", "+                   errors.getLast().getFirst());", "-      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, ", "+                                          new VariableData[0], new String[0], g, NULL_LITERAL);", "-                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+                       new String[0], g, NULL_LITERAL);", "-                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+                       new String[0], g, NULL_LITERAL);", "-//      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "+//      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", ", "+//      errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"The class or interface giraffe is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface giraffe in giraffe is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());"]}], "num": 24127}
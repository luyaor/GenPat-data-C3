{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88428f527265b22f8f11fa4645312976", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d03a54fd8f91cb89a1b36662f2e9ea8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForModifiersAndVisibilityDoFirst()", "signatureAfterChange": "          public void testForModifiersAndVisibilityDoFirst()", "diff": ["-      //Check that the proper modifiers are allowed:", "+      // Check that the proper modifiers are allowed:", "-                                                                new String[] {\"private\", \"static\"});", "-       _iv.forModifiersAndVisibilityDoFirst(mavs);", "+                                                               new String[] {\"private\", \"static\"});", "+      _iv.forModifiersAndVisibilityDoFirst(mavs);", "-", "+      ", "-      assertEquals(\"there should now be 1 errors\", 1, errors.size());", "-      assertEquals(\"The error message should be correct for private modifier:\", ", "-                   \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "-", "+//      assertEquals(\"there should now be 1 errors\", 1, errors.size());", "+//      assertEquals(\"The error message should be correct for private modifier:\", ", "+//                   \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "+      ", "-     ", "+      ", "-      assertEquals(\"There should now be 2 errors\", 2, errors.size());", "-      assertEquals(\"The error message should be correct for 1 bad, 1 good modifier:\", ", "-                   \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(1).getFirst());", "-", "+      assertEquals(\"There should still be 0 errors\", 0, errors.size());", "+      ", "-     ", "-      _iv.forModifiersAndVisibilityDoFirst(mavs3);", "-      assertEquals(\"There should now be 3 errors\", 3, errors.size());", "-      assertEquals(\"The error message should be correct for 2 bad modifiers:\",", "-                   \"The keywords \\\"final\\\" \\\"native\\\" cannot be used at the Intermediate level\", ", "-                   errors.get(2).getFirst());", "-", "+      _iv.forModifiersAndVisibilityDoFirst(mavs3);", "+      assertEquals(\"There should now be 1 errors\", 1, errors.size());", "+      assertEquals(\"The error message should be correct for 1 bad modifier:\",", "+                   \"The keyword \\\"native\\\" cannot be used at the Intermediate level\", ", "+                   errors.get(0).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da9cee4fc3482949fb3c20034b672d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "          public void testForTryCatchFinallyStatement()", "signatureAfterChange": "          public void testForTryCatchFinallyStatement()", "diff": ["-      TypeData result = tcfs2.visit(_bbtc);", "+      TypeData result = tcfs2.visit(_bbtc);  // Duplicates previous error", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught or declared to be thrown\", errors.get(1).getFirst());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"This statement throws the exception java.util.prefs.BackingStoreException \" +", "+                   \"which needs to be caught or declared to be thrown\", ", "+                   errors.get(0).getFirst());", "-      assertEquals(\"Should still be 2 errors\", 2, errors.size());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());", "-      assertEquals(\"Should still still be 2 errors\", 2, errors.size());", "+      assertEquals(\"Should still still be 1 error\", 1, errors.size());", "-      nested.visit(_bbtc);", "-      assertEquals(\"There should now be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught or declared to be thrown\", errors.get(2).getFirst());", "+      nested.visit(_bbtc);  // Duplicates existing error", "+      assertEquals(\"There should still be 1 errors\", 1, errors.size());", "+      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException \" +", "+                   \"which needs to be caught or declared to be thrown\", errors.get(0).getFirst());", "-      assertEquals(\"There should still be 3 errors\", 3, errors.size());", "+      assertEquals(\"There should still be 1 error\", 1, errors.size());", "-      assertEquals(\"There should still be 3 errors\", 3, errors.size());", "+      assertEquals(\"There should still be 1 errors\", 1, errors.size());", "-      assertEquals(\"There should still be 3 errors!\", 3, errors.size());", "+      assertEquals(\"There should still be 1 error!\", 1, errors.size());"]}], "num": 20604}
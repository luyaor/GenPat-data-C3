{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5dbb3513e0ce34c77fc4942360e06b9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485137813422015a3af5409896ff50fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "dc0befa68595a5c499b8803df615b4dd1cb06eb6", "commitAfterChange": "1a1442977dda2bbe384cc0f246999c7f651f6997", "methodNumberBeforeChange": 282, "methodNumberAfterChange": 290, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "diff": ["-      final OpenDefinitionsDocument doc;", "+      final ConcreteOpenDefDoc doc = new ConcreteOpenDefDoc(file);", "-        doc = new ConcreteOpenDefDoc(file, ((DocFile)file).getPackage());", "-      }", "-      else {", "-        doc = new ConcreteOpenDefDoc(file);", "+        DocFile df = (DocFile)file;", "+        Pair<Integer,Integer> scroll = df.getScroll();", "+        Pair<Integer,Integer> sel = df.getSelection();", "+        doc.setPackage(df.getPackage());", "+        doc.setInitialVScroll(scroll.getFirst());", "+        doc.setInitialHScroll(scroll.getSecond());", "+        doc.setInitialSelStart(sel.getFirst());", "+        doc.setInitialSelEnd(sel.getSecond());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7d0a27f217df8e7c414b6dda9d46dca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "714a91a3f9a91ffe3e5ee9ae0bd0c977c7aa4e31", "commitAfterChange": "86cce18ff80f67b178e899650f588fd3636436b4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   static boolean handleCommandLineArgs(String[] args)", "signatureAfterChange": "   static boolean handleCommandLineArgs(String[] args)", "diff": ["+    boolean heapSizeGiven = false;  // indicates whether args includes an argument of the form -Xmx<number>", "-        ", "-      else if ((arg.length() > 1) && (arg.substring(0,2).equals(\"-X\"))) _jmvArgs.add(arg); ", "+      ", "+      else if ((arg.length() > 1) && (arg.substring(0,2).equals(\"-X\"))) {", "+        if (arg.substring(0,4).equals(\"-Xmx\")) heapSizeGiven = true;", "+        _jvmArgs.add(arg); ", "+      }", "+    ", "+    String jvmArgString = getConfig().getSetting(MASTER_JVM_ARGS);", "+    List<String> jvmArgs = ArgumentTokenizer.tokenize(jvmArgString);", "+    if (jvmArgs != null && jvmArgs.size() != 0) _jvmArgs.addAll(jvmArgs);", "+    ", "+    if (! heapSizeGiven && ! jvmArgString.contains(\"-Xmx\")) _jvmArgs.add(DEFAULT_MAX_HEAP_SIZE_ARG);", "+        ", "+    _log.log(\"_jvmArgs = \" + _jvmArgs);"]}], "num": 7463}
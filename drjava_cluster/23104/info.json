{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cbb5864f325e139feb65281b4e78b1d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad0a35a305cb008fbf8fd43c3e248fc5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "ddbef72a194d17966584ef9d18603b05f8480094", "commitAfterChange": "768f383e38575107c315a182f5f4f8b4961ac9d0", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void testCaretUpdatedOnInsert() throws DocumentAdapterException", "signatureAfterChange": "   public void testCaretUpdatedOnInsert() throws DocumentAdapterException", "diff": ["-    int pos = _doc.getDocLength() - 5;", "-    _pane.setCaretPosition(pos);", "+    final int pos = _doc.getDocLength() - 5;", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(pos); } });", "-    assertEquals(\"caret should be in correct position\",", "-                 pos + 2, _pane.getCaretPosition());", "+     Utilities.clearEventQueue();", "+    assertEquals(\"caret should be in correct position\", pos + 2, _pane.getCaretPosition());", "-    _pane.setCaretPosition(_doc.getPromptPos());", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(_doc.getPromptPos()); } });", "-    assertEquals(\"caret should be at prompt\",", "-                 _doc.getPromptPos(), _pane.getCaretPosition());", "+    Utilities.clearEventQueue();", "+    assertEquals(\"caret should be at prompt\", _doc.getPromptPos(), _pane.getCaretPosition());", "-    _pane.setCaretPosition(0);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(0); } });", "-    assertEquals(\"caret should be at prompt\",", "-                 _doc.getPromptPos(), _pane.getCaretPosition());", "+    Utilities.clearEventQueue();", "+    assertEquals(\"caret should be at prompt\", _doc.getPromptPos(), _pane.getCaretPosition());", "-    pos = _doc.getPromptPos();", "+    final int newPos = _doc.getPromptPos();", "-    _pane.setCaretPosition(pos+1);", "-    _doc.insertText(pos, \"d\", InteractionsDocument.DEFAULT_STYLE);", "-    assertEquals(\"caret should be immediately after the d\",", "-                 pos + 1, _pane.getCaretPosition());", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(newPos+1); } });", "+    _doc.insertText(newPos, \"d\", InteractionsDocument.DEFAULT_STYLE);", "+    Utilities.clearEventQueue();", "+    assertEquals(\"caret should be immediately after the d\", newPos + 1, _pane.getCaretPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c757f25c50230ed37fe6928ad0350593", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "00c274c983090e9126b5a9ac7c84f4781adba195", "commitAfterChange": "f520b1b5f1b15642429d7c7844d7ac7a96f3e402", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "signatureAfterChange": "   public void testScriptLoading() throws Exception", "diff": ["-  public void testScriptLoading() throws IOException, OperationCanceledException {", "+  public void testScriptLoading() throws Exception {", "+    ", "-        return new File[] {temp};", "+        return new File[] { temp };", "-    ism.nextInteraction();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.nextInteraction(); } });", "-    Utilities.invokeAndWait(new Runnable() { public void run() { ism.executeInteraction(); } });", "-    Utilities.clearEventQueue();", "-    Utilities.clearEventQueue();", "+    model._logInteractionStart();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ism.executeInteraction(); } ", "+    });", "+    model._waitInteractionDone();", "+", "-    // pretend the call completed", "-    Utilities.invokeAndWait(new Runnable() { public void run() { model.replReturnedVoid(); } });", "-    Utilities.clearEventQueue();", "-//    System.err.println(\"Interaction is '\" + doc.getCurrentInteraction() + \"'\");", "+    System.err.println(\"Interaction is '\" + doc.getCurrentInteraction() + \"'\");", "-    assertTrue(\"Should have no previous\", ! ism.hasPrevInteraction());", "+    assertFalse(\"Should have no previous\", ism.hasPrevInteraction());", "+    System.err.println(\"Current interaction for line 428 is \" + doc.getCurrentInteraction());", "+    System.err.println(\"line1 = '\" + line1 + \"'\");", "+    model._logInteractionStart();", "-    Utilities.invokeAndWait(new Runnable() { public void run() { ism.executeInteraction(); } });", "-    Utilities.clearEventQueue();", "-    Utilities.clearEventQueue();", "-//    System.err.println(\"line1 = '\" + line1 + \"'\");", "-//    System.err.println(\"model.toEval = '\" + model.toEval + \"'\");", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.executeInteraction();  } });", "+    model._waitInteractionDone();", "+", "+    System.err.println(\"model.toEval = '\" + model.toEval + \"'\");", "-    // pretend the call completed", "-    Utilities.invokeAndWait(new Runnable() { public void run() { model.replReturnedVoid(); } });", "-    Utilities.clearEventQueue();"]}], "num": 23104}
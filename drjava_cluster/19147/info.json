{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8193607c26da1564e5220e868eece68", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c03257d5be8a5d952669dc200b9dd92", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void switchStateTo(IChangeState newState)", "signatureAfterChange": "   protected void _remove()", "diff": ["+  /** Remove the selected regions. */", "+  protected void _remove() {   ", "+    int[] rows = _regTree.getSelectionRows();", "+    System.err.println(\"_remove() called with rows \" + Arrays.toString(rows));", "+    int len = rows.length;", "+    int row = (len > 0) ? rows[0] : 0;", "+    _frame.removeCurrentLocationHighlight();", "+    for (R r: getSelectedRegions()) {", "+      _regionManager.removeRegion(r); // removes r from region manager and the panel node for r from the tree model", "+    }", "+    int rowCount = _regTree.getRowCount();", "+    ", "+    System.err.println(\"rowCount = \" + rowCount);", "+    if (row >= rowCount) row = Math.max(0, rowCount - 1);  // ensure row is in range", "+    _requestFocusInWindow();", "+    _regTree.scrollRowToVisible(row);", "+    ", "+    //Set selection row; must be done after preceding too lines for selection highlight to persist", "+    _regTree.setSelectionRow(row);", "+    System.err.println(\"Setting selection row = \" + row);", "+    // Ensure that a leaf (region node) is selected  (Is there a simpler way to determine if selected node is a leaf?)", "+    if (_regTree.getLeadSelectionPath().getPathCount() < 2) _regTree.setSelectionRow(row + 1);", "+    System.err.println(\"Resetting selection row = \" + (row + 1));", "+  }", "-    }", "-    public void switchStateTo(IChangeState newState) {", "-      updateButtons();", "-      if (_lastAdded!=null) {", "-        TreePath pathToNewRegion = new TreePath(_lastAdded.getPath());", "-        _regTree.scrollPathToVisible(pathToNewRegion);", "-      }", "-      expandAll();", "-      _regTree.revalidate();", "-      _changeState = newState;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22a062a915be0a09007c7c51d89157f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "signatureAfterChange": "   public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "diff": ["+        System.out.println(\"Finalizing: \" + e.getObject().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    _model.newFile().addFinalizationListener(fldoc);", "+    _frame.getCurrentDefPane().addFinalizationListener(fl);", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    assertEquals(\"all the panes have been garbage collected\", 5, _finalCount);", "-    assertEquals(\"all the defdocs have been garbage collected\", 5, _finalDocCount);", "+    System.out.println(\"Current: \" + _frame.getCurrentDefPane().hashCode());", "+    ", "+//    assertEquals(\"all the panes should have been garbage collected\", 6, _finalCount);", "+    assertEquals(\"all the defdocs should have been garbage collected\", 6, _finalDocCount);"]}], "num": 19147}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19143fb203cd8a5da9959d2f0edb1c2e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15708482026102e9e63eaf8621ef9577", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public void startCompile()", "signatureAfterChange": "     public void startCompile()", "diff": ["-   */", "-  public void startCompile() {", "-    saveBeforeProceeding(GlobalModelListener.COMPILE_REASON);", "-    if (isModifiedSinceSave()) {", "-      // if the file hasn't been saved after we told our", "-      // listeners to do so, don't proceed with the rest", "-      // of the compile.", "-    }", "-    else {", "-      File file = _definitionsDoc.getFile();", "-", "-      // These are the defaults to send to _resetInteractions", "-      // in the case that we fail to find the package.", "-      String packageName = \"\";", "-      File sourceRoot = null;", "-", "-      try {", "-        _notifyListeners(new EventNotifier() {", "-          public void notifyListener(GlobalModelListener l) {", "-            l.compileStarted();", "-          }", "-        });", "-", "-        packageName = _definitionsDoc.getPackageName();", "-        sourceRoot = _getSourceRoot(packageName);", "-        ", "-        File[] files = new File[] { file };", "-", "-        CompilerInterface compiler =CompilerRegistry.ONLY.getActiveCompiler();", "-", "-        _compileErrors = compiler.compile(sourceRoot, files);", "-      }", "-      catch (InvalidPackageException e) {", "-        CompilerError err = new CompilerError(file.getAbsolutePath(),", "-                                              -1,", "-                                              -1,", "-                                              e.getMessage(),", "-                                              false);", "-        _compileErrors = new CompilerError[] { err };", "-      }", "-      finally {", "-        _notifyListeners(new EventNotifier() {", "-          public void notifyListener(GlobalModelListener l) {", "-            l.compileEnded();", "-          }", "-        });", "-", "-        // Only clear console/interactions if there were no errors", "-        if (_compileErrors.length == 0) {", "-          resetConsole();", "-          _resetInteractions(packageName, sourceRoot);", "-        }", "-      }", "-    }", "-  }", "+     */", "+    public void startCompile() {", "+      saveBeforeProceeding(GlobalModelListener.COMPILE_REASON);", "+", "+      if (isModifiedSinceSave()) {", "+        // if the file hasn't been saved after we told our", "+        // listeners to do so, don't proceed with the rest", "+        // of the compile.", "+      }", "+      else {", "+        try {", "+          File file = _doc.getFile();", "+", "+          // These are the defaults to send to _resetInteractions", "+          // in the case that we fail to find the package.", "+          String packageName = \"\";", "+          File sourceRoot = null;", "+", "+          try {", "+            _notifyListeners(new EventNotifier() {", "+              public void notifyListener(GlobalModelListener l) {", "+                l.compileStarted();", "+              }", "+            });", "+", "+            packageName = _doc.getPackageName();", "+            sourceRoot = _getSourceRoot(packageName);", "+", "+            File[] files = new File[] { file };", "+", "+            CompilerInterface compiler =CompilerRegistry.ONLY.getActiveCompiler();", "+", "+            _compileErrors = compiler.compile(sourceRoot, files);", "+          }", "+          catch (InvalidPackageException e) {", "+            CompilerError err = new CompilerError(file.getAbsolutePath(),", "+                                                  -1,", "+                                                  -1,", "+                                                  e.getMessage(),", "+                                                  false);", "+            _compileErrors = new CompilerError[] { err };", "+          }", "+          finally {", "+            _notifyListeners(new EventNotifier() {", "+              public void notifyListener(GlobalModelListener l) {", "+                l.compileEnded();", "+              }", "+            });", "+", "+            // Only clear console/interactions if there were no errors", "+            if (_compileErrors.length == 0) {", "+              resetConsole();", "+              resetInteractions();", "+            }", "+          }", "+        }", "+        catch (IllegalStateException ise) {", "+          // No file exists, don't try to compile", "+        }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e12b3d21b13d74507fefe067caaffa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "27cb6e93149c6a1991393a8ca4c655137f9f0cb6", "commitAfterChange": "dd2df9abefe60137729d1e2ed7d31fad6497b670", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": "   public void openFolder(JFileChooser chooser)", "signatureAfterChange": "   public void openFolder(DirectoryChooser chooser)", "diff": ["-  public void openFolder(JFileChooser chooser) {", "+  public void openFolder(DirectoryChooser chooser) {", "+    File openDir = null;", "-      File openDir = null;", "-      try{", "-        openDir = _model.getActiveDocument().getFile().getParentFile();", "-      }catch(FileMovedException e){", "-      }catch(IllegalStateException e){", "-      }", "-      ", "-      if (openDir != null && openDir.exists()) {", "-        // We were given a default - use it.", "-        chooser.setCurrentDirectory(openDir);", "-        chooser.setSelectedFile(openDir);", "-      }", "-      ", "-      File [] filesArray = getOpenFiles(chooser);", "-      DrJava.getConfig().setSetting(OptionConstants.OPEN_FOLDER_RECURSIVE, _openRecursiveCheckBox.isSelected());", "-      ", "-      if(filesArray == null || filesArray.length == 0)", "-        return;", "-      ", "-            ", "-      File dir = filesArray[0];", "-      ", "-      ArrayList<File> files;", "-      if(dir != null && dir.isDirectory()){", "-        files = FileOps.getFilesInDir(dir, _openRecursiveCheckBox.isSelected(), new FileFilter(){", "-          public boolean accept(File f){ ", "-            return f.isDirectory() ||", "-              f.isFile() && ", "-              f.getName().endsWith(DrJava.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]);", "-          }", "-        });", "-        ", "-        ", "-        ", "-        if(_model.isProjectActive()){", "-          Collections.sort(files, new Comparator<File>(){", "-            public int compare(File o1,File o2){", "-              return - o1.getAbsolutePath().compareTo(o2.getAbsolutePath());", "-            }", "-            public boolean equals(Object o){", "-              return false;", "-            }", "-          });", "-        }else{", "-          Collections.sort(files, new Comparator<File>(){", "-            public int compare(File o1,File o2){", "-              return - o1.getName().compareTo(o2.getName());", "-            }", "-            public boolean equals(Object o){", "-              return false;", "-            }", "-          });", "+      openDir = _model.getActiveDocument().getFile().getParentFile();", "+    }catch(FileMovedException e){", "+    }catch(IllegalStateException e){", "+    }", "+    ", "+    int result = chooser.showDialog(openDir);", "+    if (result != DirectoryChooser.APPROVE_OPTION) {", "+      return; // canceled or error", "+    }", "+    ", "+    File dir = chooser.getSelectedDirectory();", "+    DrJava.getConfig().setSetting(OptionConstants.OPEN_FOLDER_RECURSIVE, _openRecursiveCheckBox.isSelected());", "+    ", "+    if(dir == null) return; // just in case", "+    ", "+    ArrayList<File> files;", "+    if(dir != null && dir.isDirectory()){", "+      files = FileOps.getFilesInDir(dir, _openRecursiveCheckBox.isSelected(), new FileFilter(){", "+        public boolean accept(File f){ ", "+          return f.isDirectory() ||", "+            f.isFile() && ", "+            f.getName().endsWith(DrJava.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]);", "-        ", "-        final File[] sfiles = files.toArray(new File[0]);", "-        ", "-        open(new FileOpenSelector(){", "-          public File[] getFiles() {", "-            return sfiles;", "+      });", "+      ", "+      if(_model.isProjectActive()){", "+        Collections.sort(files, new Comparator<File>(){", "+          public int compare(File o1,File o2){", "+            return - o1.getAbsolutePath().compareTo(o2.getAbsolutePath());", "+          }", "+          public boolean equals(Object o){", "+            return false;", "+          }", "+        });", "+      }else{", "+        Collections.sort(files, new Comparator<File>(){", "+          public int compare(File o1,File o2){", "+            return - o1.getName().compareTo(o2.getName());", "+          }", "+          public boolean equals(Object o){", "+            return false;", "-    }catch(OperationCanceledException e){", "-      // noop", "+      ", "+      final File[] sfiles = files.toArray(new File[0]);", "+      ", "+      open(new FileOpenSelector(){", "+        public File[] getFiles() {", "+          return sfiles;", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f349385441d5161146f8d7bce0cb305", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "bfbbbb34f309b13ef404f393392d7ea8745940cd", "commitAfterChange": "9d671cad5f849049059b2e199aea7279dd398525", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "signatureAfterChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-    LinkedList<File> filesToBeClosed = new LinkedList<File>(); // Used to record .java files that are open at the same time as their .dj? files.", "+    final LinkedList<File> filesToBeClosed = new LinkedList<File>(); // Used to record .java files that are open at the same time as their .dj? files.", "-        if(files.contains(javaFile)){", "-          ", "+        if(files.contains(javaFile)){          ", "-          ", "-        } ", "+          // delete file later so closeFiles doesn't complain about missing files", "+        }", "+        else {", "+          // Delete the stale .java file now (if it exists), a file with this name will subsequently be generated", "+          javaFile.delete();", "+        }", "-        ", "-        // Delete the stale .java file (if it exists), a file with this name will subsequently be generated", "-        javaFile.delete();", "-      new edu.rice.cs.drjava.ui.DrJavaScrollableDialog(null, \"Warning: Files need to be closed\",", "-                                                       \"The following files have matching .dj? files open.\", ", "-                                                       \"These .java files need to be closed for proper compiling. \\n \\n \\n\" +", "-                                                       filesToBeClosed.toString().replace(\", \",\"\\n\"),true).show();", "+      final JButton closeButton = new JButton(new AbstractAction(\"Close Files\") {", "+        public void actionPerformed(ActionEvent e) {", "+          // no op, i.e. delete everything", "+        }", "+      });", "+      final JButton keepButton = new JButton(new AbstractAction(\"Keep Open\") {", "+        public void actionPerformed(ActionEvent e) {", "+          // clear the set, i.e. do not delete anything", "+          filesToBeClosed.clear();", "+        }", "+      });", "+//      new edu.rice.cs.drjava.ui.DrJavaScrollableDialog(null, \"Warning: Files need to be closed\",", "+//                                                       \"The following files have matching .dj? files open.\", ", "+//                                                       \"These .java files need to be closed for proper compiling. \\n \\n \\n\" +", "+//                                                       filesToBeClosed.toString().replace(\", \",\"\\n\"),true).show();", "+      ScrollableListDialog<File> dialog = new ScrollableListDialog.Builder<File>()", "+        .setTitle(\"Java File\"+(filesToBeClosed.size()==1?\"\":\"s\")+\" Need to Be Closed\")", "+        .setText(\"The following .java \"+(filesToBeClosed.size()==1?", "+                                           \"file has a matching .dj? file\":", "+                                           \"files have matching .dj? files\")+\" open.\\n\"+", "+                 (filesToBeClosed.size()==1?", "+                    \"This .java file needs\":", "+                    \"These .java files need\")+\" to be closed for proper compiling.\")", "+        .setItems(filesToBeClosed)", "+        .setMessageType(JOptionPane.WARNING_MESSAGE)", "+        .setFitToScreen(true)", "+        .clearButtons()", "+        .addButton(closeButton)", "+        .addButton(keepButton)", "+        .build();", "+      ", "+      dialog.showDialog();", "+      ", "+      LinkedList<OpenDefinitionsDocument> docsToBeClosed = new LinkedList<OpenDefinitionsDocument>();", "+      for(File f: filesToBeClosed) {", "+        try {", "+          docsToBeClosed.add(_model.getDocumentForFile(f));", "+        }", "+        catch(IOException ioe) { /* ignore, just don't close this document */ }", "+      }", "+      _model.closeFiles(docsToBeClosed);", "+      // delete the files now because closeFiles has executed and won't complain about missing files anymore", "+      for(File f: filesToBeClosed) {        ", "+        // Delete the stale .java file now (if it exists), a file with this name will subsequently be generated", "+        f.delete();", "+      }", "-                     \"level files. Do you want to delete the class files in the following directories?\")", "+                     \"level files. Do you want to delete the class files in the following director\"+(dirsWithLLFiles.size()==1?\"y\":\"ies\")+\"?\")"]}], "num": 6278}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80ddeab804d9f3f781fd37000d617064", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "599bd26a453a09610f0c6bca74b6ad57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 93, "signatureBeforeChange": "   public static <T1, T2, R>      Lambda3<T1, T2, Object, R> promote(final Lambda2<? super T1, ? super T2, ? extends R> lambda)", "signatureAfterChange": "   public static <T1, T2, R> Lambda3<T1, T2, Object, R> promote(Lambda2<? super T1, ? super T2, ? extends R> lambda)", "diff": ["-  /** @return A {@code Lambda3} equivalent to {@code lambda} with an additional, ignored argument */", "-  public static <T1, T2, R> ", "-    Lambda3<T1, T2, Object, R> promote(final Lambda2<? super T1, ? super T2, ? extends R> lambda) {", "-    return new Lambda3<T1, T2, Object, R>() {", "-      public R value(T1 arg1, T2 arg2, Object arg3) { return lambda.value(arg1, arg2); }", "-    };", "+  /** Create a {@code Lambda3} equivalent to {@code lambda} with an additional, ignored argument. */", "+  public static <T1, T2, R> Lambda3<T1, T2, Object, R> promote(Lambda2<? super T1, ? super T2, ? extends R> lambda) {", "+    return new PromotedLambda3<T1, T2, R>(lambda);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820ec96919e7c05b4d986ec2ac4e72c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 102, "signatureBeforeChange": "   public static <T1, T2>      Predicate3<T1, T2, Object> promote(final Predicate2<? super T1, ? super T2> pred)", "signatureAfterChange": "   public static <T1, T2> Predicate3<T1, T2, Object> promote(Predicate2<? super T1, ? super T2> pred)", "diff": ["-  /** @return A {@code Predicate3} equivalent to {@code pred} with an additional, ignored argument */", "-  public static <T1, T2> ", "-    Predicate3<T1, T2, Object> promote(final Predicate2<? super T1, ? super T2> pred) {", "-    return new Predicate3<T1, T2, Object>() {", "-      public Boolean value(T1 arg1, T2 arg2, Object arg3) { return pred.value(arg1, arg2); }", "-    };", "+  /** Create a {@code Predicate3} equivalent to {@code pred} with an additional, ignored argument. */", "+  public static <T1, T2> Predicate3<T1, T2, Object> promote(Predicate2<? super T1, ? super T2> pred) {", "+    return new PromotedPredicate3<T1, T2>(pred);", "+  }"]}], "num": 28020}
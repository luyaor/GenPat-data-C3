{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd8ed52513433b231ec4b56fbc6a4c32", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "178b01f9c9913e9d2d7f9873dc9f9720", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/LanguageLevelStackTraceMapper.java", "commitBeforeChange": "c9a582a01c4727c2040c438bfb469bb6c612160b", "commitAfterChange": "8871133812a093ff5b818f6e8694af02431a4702", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public TreeMap<Integer, Integer> ReadLanguageLevelLineBlock(File LLFile)", "signatureAfterChange": "   public TreeMap<Integer, Integer> readLLLineBlock(File LLFile)", "diff": ["-   */", "-  public TreeMap<Integer, Integer> ReadLanguageLevelLineBlock(File LLFile){", "+    */", "+  public TreeMap<Integer, Integer> readLLLineBlock(File LLFile){", "-    BufferedReader BReader = null;", "-    String ReadLine = \"\";", "+    BufferedReader bufReader = null;", "+    String rdLine = \"\";", "-    try{  BReader = new BufferedReader(new FileReader(LLFile));  } catch(java.io.FileNotFoundException e){ }", "+    try { bufReader = new BufferedReader(new FileReader(LLFile));  } catch(java.io.FileNotFoundException e){ }", "-    try{  ReadLine = BReader.readLine();  }  catch(java.io.IOException e){ }", "+    try { rdLine = bufReader.readLine();  }  catch(java.io.IOException e){ }", "-    LOG.log(\"ReadLine = '\" + ReadLine + \"'\");", "-    LOG.log(\"\\tlastIndex = \" + ReadLine.lastIndexOf(\" \"));", "-    Integer MapSize = new Integer (ReadLine.substring(ReadLine.lastIndexOf(\" \")+1));", "+    LOG.log(\"rdLine = '\" + rdLine + \"'\");", "+    LOG.log(\"\\tlastIndex = \" + rdLine.lastIndexOf(\" \"));", "+    Integer mapSize = new Integer (rdLine.substring(rdLine.lastIndexOf(\" \") + 1));", "-    try{  ReadLine = BReader.readLine();  }  catch(java.io.IOException e){ }", "+    try { rdLine = bufReader.readLine();  }  catch(java.io.IOException e){ }", "-    if(ReadLine.indexOf(\"//\") != 0) MapSize=0;  //Kills the for loop if read line is not of correct format", "-    ", "+    if (rdLine.indexOf(\"//\") != 0) mapSize = 0;  //Kills the for loop if read line is not of correct format", "-    TreeMap<Integer,Integer> JavaDjMap = new TreeMap<Integer,Integer>();", "+    TreeMap<Integer,Integer> javaDJMap = new TreeMap<Integer,Integer>();", "-    temp = ReadLine.substring(2);", "-    temp = temp.trim() + \" \";", "+    temp = rdLine.substring(2).trim() + \" \";", "-    for(int i = 0; i < MapSize; i++){", "-      if(temp.length()<2)  temp = ReadLanguageLevelLineBlockHelper(BReader);", "-      if(temp == null) break;", "+//    Utilities.show(\"read \" + mapSize + \" entries from bufReader\");", "+    for (int i = 0; i < mapSize; i++) {", "+      if (temp.length() < 2)  temp = readLLLineBlockHelper(bufReader);", "+      if (temp == null) break;", "+//      Utilities.show(\"i = \" + i + \"     temp = '\" + temp + \"'\");", "+      numRnum = temp.substring(0, temp.indexOf(\" \"));", "-      numRnum = temp.substring(0,temp.indexOf(\" \"));", "+      djNum = new Integer(numRnum.substring(0, numRnum.indexOf(\"->\")));", "+      javaNum = new Integer(numRnum.substring(numRnum.indexOf(\"->\") + 2));", "-      djNum = new Integer(numRnum.substring(0,numRnum.indexOf(\"->\")));", "-      javaNum = new Integer(numRnum.substring(numRnum.indexOf(\"->\")+2));", "-      ", "-      JavaDjMap.put(javaNum,djNum);", "+      javaDJMap.put(javaNum,djNum);", "-    return JavaDjMap;", "+    return javaDJMap;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21bb3f54d3fcfc1bc569afec1dc03d98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/LanguageLevelStackTraceMapper.java", "commitBeforeChange": "c9a582a01c4727c2040c438bfb469bb6c612160b", "commitAfterChange": "8871133812a093ff5b818f6e8694af02431a4702", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public TreeMap<Integer, Integer> ReadLanguageLevelLineBlockRev(File LLFile)", "signatureAfterChange": "   public TreeMap<Integer, Integer> ReadLanguageLevelLineBlockRev(File LLFile)", "diff": ["-   */", "-  public TreeMap<Integer, Integer> ReadLanguageLevelLineBlockRev(File LLFile){", "+    */", "+  public TreeMap<Integer, Integer> ReadLanguageLevelLineBlockRev(File LLFile) {", "-    BufferedReader BReader = null;", "-    String ReadLine = \"\";", "+    BufferedReader bufReader = null;", "+    String rdLine = \"\";", "-    try{  BReader = new BufferedReader(new FileReader(LLFile));  } catch(java.io.FileNotFoundException e){ }", "+    try { bufReader = new BufferedReader(new FileReader(LLFile)); } catch(java.io.FileNotFoundException e){ }", "-    try{  ReadLine = BReader.readLine();  }  catch(java.io.IOException e){ }", "+    try { rdLine = bufReader.readLine(); } catch(java.io.IOException e){ }", "-    LOG.log(\"ReadLine = '\" + ReadLine + \"'\");", "-    LOG.log(\"\\tlastIndex = \" + ReadLine.lastIndexOf(\" \"));", "-    Integer MapSize = new Integer (ReadLine.substring(ReadLine.lastIndexOf(\" \")+1));", "+    LOG.log(\"rdLine = '\" + rdLine + \"'\");", "+    LOG.log(\"\\tlastIndex = \" + rdLine.lastIndexOf(\" \"));", "+    Integer mapSize = new Integer (rdLine.substring(rdLine.lastIndexOf(\" \") + 1));", "-    try{  ReadLine = BReader.readLine();  }  catch(java.io.IOException e){ }", "+    try{ rdLine = bufReader.readLine(); } catch(java.io.IOException e){ }", "-    if(ReadLine.indexOf(\"//\") != 0) MapSize=0;  //Kills the for loop if read line is not of correct format", "+    if(rdLine.indexOf(\"//\") != 0) mapSize = 0;  // Kills the for loop if read line is not of correct format", "+", "+    TreeMap<Integer,Integer> map = new TreeMap<Integer,Integer>();", "-    ", "-    String temp = \"\";", "+    String temp = rdLine.substring(2).trim() + \" \";  // invariant: temp has no leading spaces and a single trailing space", "-    TreeMap<Integer,Integer> DjJavaMap = new TreeMap<Integer,Integer>();", "-    temp = ReadLine.substring(2);", "-    temp = temp.trim() + \" \";", "-    ", "-    Integer djNum;", "-    Integer javaNum;", "-    ", "-    for(int i = 0; i < MapSize; i++){", "-      if(temp.length()<2)  temp = ReadLanguageLevelLineBlockHelper(BReader);", "-      if(temp == null) break;", "+    int djNum;", "+    int javaNum;", "+", "+    for(int i = 0; i < mapSize; i++){", "+      if (temp.length() < 2)  temp = readLLLineBlockHelper(bufReader);", "+      if (temp == null) break;", "-      numRnum = temp.substring(0,temp.indexOf(\" \"));", "+      numRnum = temp.substring(0, temp.indexOf(\" \"));", "-      djNum = new Integer(numRnum.substring(0,numRnum.indexOf(\"->\")));", "-      javaNum = new Integer(numRnum.substring(numRnum.indexOf(\"->\")+2));", "+      djNum = Integer.parseInt(numRnum.substring(0, numRnum.indexOf(\"->\")), 10);", "+      javaNum = Integer.parseInt(numRnum.substring(numRnum.indexOf(\"->\") + 2), 10);", "-      DjJavaMap.put(djNum,javaNum);", "-      temp = temp.substring(temp.indexOf(\" \")).trim() + \" \";", "+      map.put(djNum, javaNum);", "+      temp = temp.substring(temp.indexOf(\" \")).trim() + \" \";  // slices off first non-blank section", "+      // NOTE: it would more efficient to simply remove all leading whitespace instead of trimming and adding a space.", "-    return DjJavaMap;", "+    return map;"]}], "num": 13710}
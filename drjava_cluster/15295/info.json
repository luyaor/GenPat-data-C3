{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e1380c7f7077b9148b38b0644340a1f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9489f4f2ba40fa4507cb1d64f0075213", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 88, "signatureBeforeChange": "   private Type handleIncrementExpression(UnaryExpression node)", "signatureAfterChange": "     private Type handleIncrementExpression(UnaryExpression node)", "diff": ["-   */", "-  private Type handleIncrementExpression(UnaryExpression node) {", "-    Type result = node.getExpression().acceptVisitor(this);", "-    try {", "-      Expression exp = ts.makePrimitive(node.getExpression());", "-      if (!(getType(exp) instanceof NumericType) || !hasVariableType(node.getExpression())) {", "+     */", "+    private Type handleIncrementExpression(UnaryExpression node) {", "+      Type result = check(node.getExpression());", "+      try {", "+        Expression exp = ts.makePrimitive(node.getExpression());", "+        ", "+        if (!(getType(exp) instanceof NumericType) || !hasVariableType(node.getExpression())) {", "+          throw new ExecutionError(\"increment.type\", node);", "+        }", "+        ", "+        setLeftExpression(node, exp);", "+        return setType(node, result);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      ", "-      setLeftExpression(node, exp);", "-      return setType(node, result);", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"increment.type\", node);", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5606eaab198c3d9c865fa3dd29fe23e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 80, "signatureBeforeChange": "   private Type handleBooleanExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleBooleanExpression(BinaryExpression node)", "diff": ["-   */", "-  private Type handleBooleanExpression(BinaryExpression node) {", "-    node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());    ", "-      if (!(getType(left) instanceof BooleanType) || !(getType(right) instanceof BooleanType)) {", "+     */", "+    private Type handleBooleanExpression(BinaryExpression node) {", "+      check(node.getLeftExpression(), TypeSystem.BOOLEAN);", "+      check(node.getRightExpression(), TypeSystem.BOOLEAN);", "+      try {", "+        Expression left = ts.makePrimitive(node.getLeftExpression());", "+        Expression right = ts.makePrimitive(node.getRightExpression());    ", "+        if (!(getType(left) instanceof BooleanType) || !(getType(right) instanceof BooleanType)) {", "+          throw new ExecutionError(\"boolean.expression.type\", node);", "+        }", "+        node.setLeftExpression(left);", "+        node.setRightExpression(right);", "+        return setType(node, TypeSystem.BOOLEAN);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      node.setLeftExpression(left);", "-      node.setRightExpression(right);", "+    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"boolean.expression.type\", node);", "-    }", "-  }"]}], "num": 15295}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "836d04acfa9febbd0fdcd74ab46076c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071367884bf6fcc0a6fbd12c407d033e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public Class visit(ArrayType node)", "signatureAfterChange": "   public Class<?> visit(ArrayType node)", "diff": ["-  public Class visit(ArrayType node) {", "+  public Class<?> visit(ArrayType node) {", "-    Class c = eType.acceptVisitor(this);", "-    Class ac = Array.newInstance(c, 0).getClass();", "+    Class<?> c = eType.acceptVisitor(this);", "+    Class<?> ac = Array.newInstance(c, 0).getClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a3ec9927e042c441bec23a090b16b3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    public DefinitionsDocument(Indenter i, EventNotifier notifier)", "signatureAfterChange": "    public DefinitionsDocument(Indenter i, EventNotifier notifier)", "diff": ["-    _helperCache = new Hashtable();", "-    _helperCacheHistory = new Vector();", "+    _helperCache = new Hashtable<String, Object>();", "+    _helperCacheHistory = new Vector<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10cb49cd9eb324c7137bbf02fbe020de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected static HashSet _makeKeywords()", "signatureAfterChange": "   protected static HashSet<String> _makeKeywords()", "diff": ["-  protected static HashSet _makeKeywords() {", "+  protected static HashSet<String> _makeKeywords() {", "-    HashSet keywords = new HashSet();", "+    HashSet<String> keywords = new HashSet<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1739a15a170c8755d34e1060800c5610", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/PendingRequestManager.java", "commitBeforeChange": "4ae3dba211535b42e36ea3344ccafcfcc3ff3edd", "commitAfterChange": "90464e2ed7c77705e57d251eb7f4b67e377039d6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void addPendingRequest (DocumentDebugAction action)", "signatureAfterChange": "   public void addPendingRequest (DocumentDebugAction<?> action)", "diff": ["-  public void addPendingRequest (DocumentDebugAction action) {", "+  public void addPendingRequest (DocumentDebugAction<?> action) {", "-    Vector<DocumentDebugAction> actions = _pendingActions.get(className);", "+    Vector<DocumentDebugAction<?>> actions = _pendingActions.get(className);", "-      actions = new Vector<DocumentDebugAction>();", "+      actions = new Vector<DocumentDebugAction<?>>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2496b1cbdd72c97ffa95815ed1543d50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fa92455fedb412729f98f82d7ebe32526434dfc9", "commitAfterChange": "901df797e3b0df4a97e4f748f929fa2a582d5380", "methodNumberBeforeChange": 734, "methodNumberAfterChange": 727, "signatureBeforeChange": "   public void showTab(final Component c, boolean showDetachedWindow)", "signatureAfterChange": "   public void showTab(final Component c, boolean showDetachedWindow)", "diff": ["-      if (c instanceof RegionsTreePanel) {", "-        RegionsTreePanel p = (RegionsTreePanel) c;", "+      if (c instanceof RegionsTreePanel<?>) {", "+        RegionsTreePanel<?> p = (RegionsTreePanel<?>) c;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "259dcc0ba2224f9da5bf2d2aa4a52b62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/XMLProjectFileParser.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @SuppressWarnings(\"unchecked\")   protected Map<OptionParser,String> readStoredPreferences()", "signatureAfterChange": "      @SuppressWarnings(\"unchecked\")   protected Map<OptionParser<?>,String> readStoredPreferences()", "diff": ["-  protected Map<OptionParser,String> readStoredPreferences() {", "-    HashMap<OptionParser,String> storedPreferences = new HashMap<OptionParser,String>();", "+  protected Map<OptionParser<?>,String> readStoredPreferences() {", "+    HashMap<OptionParser<?>,String> storedPreferences = new HashMap<OptionParser<?>,String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af8fdf84b77597b0d88ed9b67bbaf6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "   private Class visitBitwiseAssign(BinaryExpression node)", "signatureAfterChange": "   private Class<?> visitBitwiseAssign(BinaryExpression node)", "diff": ["-  private Class visitBitwiseAssign(BinaryExpression node) {", "+  private Class<?> visitBitwiseAssign(BinaryExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3008580473f34832bd87d79561fe6564", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected static HashSet _makeNormEndings()", "signatureAfterChange": "   protected static HashSet<String> _makeNormEndings()", "diff": ["-  protected static HashSet _makeNormEndings() {", "-    HashSet normEndings = new HashSet();", "+  protected static HashSet<String> _makeNormEndings() {", "+    HashSet<String> normEndings = new HashSet<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31ffb2090cf7faeb0763a24f65cdf778", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public Class visit(EqualExpression node)", "signatureAfterChange": "   public Class<?> visit(EqualExpression node)", "diff": ["-  public Class visit(EqualExpression node) {", "+  public Class<?> visit(EqualExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = rn.acceptVisitor(this);", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = rn.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3222c3a6a9f196a216e07ba7cdcf333c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "   public Class visit(OrExpression node)", "signatureAfterChange": "   public Class<?> visit(OrExpression node)", "diff": ["-  public Class visit(OrExpression node) {", "+  public Class<?> visit(OrExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = rn.acceptVisitor(this);", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = rn.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a899d5c4f269d1b55c0e618138e82bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private ArrayList extractErrors(LinkedList lines)", "signatureAfterChange": "   private ArrayList<CompilerError> extractErrors(LinkedList lines)", "diff": ["-  private ArrayList extractErrors(LinkedList lines) {", "+  private ArrayList<CompilerError> extractErrors(LinkedList lines) {", "-    ArrayList errors = new ArrayList(100);", "+    ArrayList<CompilerError> errors = new ArrayList<CompilerError>(100);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f4bb7a588da7d2f5b0f3d17bb3e3258", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public Class visit(ArrayAccess node)", "signatureAfterChange": "   public Class<?> visit(ArrayAccess node)", "diff": ["-  public Class visit(ArrayAccess node) {", "+  public Class<?> visit(ArrayAccess node) {", "-    Class c = node.getExpression().acceptVisitor(this);", "+    Class<?> c = node.getExpression().acceptVisitor(this);", "-    Class result = c.getComponentType();", "+    Class<?> result = c.getComponentType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40498504b0e2aa56b69ba00f55735d44", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public Class visit(SimpleAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(SimpleAssignExpression node)", "diff": ["-  public Class visit(SimpleAssignExpression node) {", "+  public Class<?> visit(SimpleAssignExpression node) {", "-    Class rc = right.acceptVisitor(this);", "+    Class<?> rc = right.acceptVisitor(this);", "-    Class lc = left.acceptVisitor(this);", "+    Class<?> lc = left.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4501399ae309c280c7279a84fd4b2868", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected static HashSet _makePrimTypes()", "signatureAfterChange": "   protected static HashSet<String> _makePrimTypes()", "diff": ["-  protected static HashSet _makePrimTypes() {", "+  protected static HashSet<String> _makePrimTypes() {", "-      \"boolean\", \"char\", \"byte\", \"short\", \"int\", ", "-      \"long\", \"float\", \"double\", \"void\", ", "+      \"boolean\", \"char\", \"byte\", \"short\", \"int\",", "+      \"long\", \"float\", \"double\", \"void\",", "-    HashSet prims = new HashSet();", "+    HashSet<String> prims = new HashSet<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45cab985399c028b4d9fb0873c71dc35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/InterpreterUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "   public static Class getDeclaringClass(Class c)", "signatureAfterChange": "   public static Class<?> getDeclaringClass(Class<?> c)", "diff": ["-  public static Class getDeclaringClass(Class c) {", "-    Class result = c.getDeclaringClass();", "+  public static Class<?> getDeclaringClass(Class<?> c) {", "+    Class<?> result = c.getDeclaringClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48f4c9feec6de77a000eae8941d9d4b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "   private Class visitRelationalExpression(BinaryExpression node)", "signatureAfterChange": "   private Class<?> visitRelationalExpression(BinaryExpression node)", "diff": ["-  private Class visitRelationalExpression(BinaryExpression node) {", "+  private Class<?> visitRelationalExpression(BinaryExpression node) {", "-    Class lc = leftExp.acceptVisitor(this);", "-    Class rc = rightExp.acceptVisitor(this);", "+    Class<?> lc = leftExp.acceptVisitor(this);", "+    Class<?> rc = rightExp.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c4930343db1923eb02442118a854c8d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectAdvancedPropertiesFrame.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @SuppressWarnings(\"unchecked\")   public Map<OptionParser,String> getPreferencesStoredInProject()", "signatureAfterChange": "\r   \r   @SuppressWarnings(\"unchecked\")\r   public Map<OptionParser<?>,String> getPreferencesStoredInProject()", "diff": ["-  ", "-  @SuppressWarnings(\"unchecked\")", "-  public Map<OptionParser,String> getPreferencesStoredInProject() {", "-    Map<OptionParser,String> sp = new HashMap<OptionParser,String>();", "-    for(PreferencesRecord pr: _preferencesList.getValue()) {", "-      sp.put(pr.option, DrJava.getConfig().getOptionMap().getString(pr.option));", "-    }", "-    return sp;", "-  }", "+  \r", "+  @SuppressWarnings(\"unchecked\")\r", "+  public Map<OptionParser<?>,String> getPreferencesStoredInProject() {\r", "+    Map<OptionParser<?>,String> sp = new HashMap<OptionParser<?>,String>();\r", "+    for(PreferencesRecord pr: _preferencesList.getValue()) {\r", "+      sp.put(pr.option, DrJava.getConfig().getOptionMap().getString(pr.option));\r", "+    }\r", "+    return sp;\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "500577ede868a79633243ca36abc3302", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public Class visit(QualifiedName node)", "signatureAfterChange": "   public Class<?> visit(QualifiedName node)", "diff": ["-  public Class visit(QualifiedName node) {", "+  public Class<?> visit(QualifiedName node) {", "-    Class c = (Class) context.get(var);", "+    Class<?> c = (Class<?>) context.get(var);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55aa270fd94c89249f62bcededa1f687", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static List<Method> getMethods(Class cl, String name, int params)", "signatureAfterChange": "   public static List<Method> getMethods(Class<?> cl, String name, int params)", "diff": ["-  public static List<Method> getMethods(Class cl, String name, int params) {", "+  public static List<Method> getMethods(Class<?> cl, String name, int params) {", "-      Class[] cs = cl.getInterfaces();", "+      Class<?>[] cs = cl.getInterfaces();", "-      Class c = cl;", "+      Class<?> c = cl;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "574666d905aba8b30acd8e09b77016f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public Class setProperties(SimpleAllocation node, Class c, Class[] cargs)", "signatureAfterChange": "   public Class<?> setProperties(SimpleAllocation node, Class<?> c, Class<?>[] cargs)", "diff": ["-  public Class setProperties(SimpleAllocation node, Class c, Class[] cargs) {", "+  public Class<?> setProperties(SimpleAllocation node, Class<?> c, Class<?>[] cargs) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d0bf6e1e472369363ff27362e0e3d0c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Class compileClasses(String name) throws ClassNotFoundException", "signatureAfterChange": "   public Class<?> compileClasses(String name) throws ClassNotFoundException", "diff": ["-  public Class compileClasses(String name) throws ClassNotFoundException {", "-    Class result = null;", "+  public Class<?> compileClasses(String name) throws ClassNotFoundException {", "+    Class<?> result = null;", "-          Class c = compileClass(ci, name);", "+          Class<?> c = compileClass(ci, name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "661b51ce9b058bbe5d08a234e14134ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/PendingRequestManager.java", "commitBeforeChange": "4ae3dba211535b42e36ea3344ccafcfcc3ff3edd", "commitAfterChange": "90464e2ed7c77705e57d251eb7f4b67e377039d6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "signatureAfterChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "diff": ["-    Vector<DocumentDebugAction> actions = _pendingActions.get(className);  // The type argument should be <DocumentDebugAction<? extends EventRequest>> /**/", "-    Vector<DocumentDebugAction> failedActions =", "-      new Vector<DocumentDebugAction>();", "+    Vector<DocumentDebugAction<?>> actions = _pendingActions.get(className);", "+    Vector<DocumentDebugAction<?>> failedActions =", "+      new Vector<DocumentDebugAction<?>>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69276dfbb832bfa2dcb034e4bb8e41c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker15.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   protected ObjectMethodCall _unbox(Expression child, Class type)", "signatureAfterChange": "   protected ObjectMethodCall _unbox(Expression child, Class<?> type)", "diff": ["-  protected ObjectMethodCall _unbox(Expression child, Class type) {", "+  protected ObjectMethodCall _unbox(Expression child, Class<?> type) {", "-    Class unboxedType = type;", "+    Class<?> unboxedType = type;", "-      method = type.getMethod(methodName, new Class[] {});", "+      method = type.getMethod(methodName, new Class<?>[] {});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6967b2ec85deac008cee2039dc2556a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void insertFolderSortedInto(InnerNode<?, ItemT> child, InnerNode<?, ItemT> parent)", "signatureAfterChange": "   private void insertFolderSortedInto(InnerNode<?, ItemT> child, InnerNode<?, ItemT> parent)", "diff": ["-      if (parentsKid instanceof InnerNode) {", "+      if (parentsKid instanceof InnerNode<?,?>) {", "-      else if (parentsKid instanceof LeafNode) break;", "+      else if (parentsKid instanceof LeafNode<?>) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a4262d3a086afe6646cfeb68a27a31b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public Class visit(MultiplyAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(MultiplyAssignExpression node)", "diff": ["-  public Class visit(MultiplyAssignExpression node) {", "+  public Class<?> visit(MultiplyAssignExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e8941c0f45cd2d3860c38481df91ac7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/MethodContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Method lookupMethod(Node prefix, String mname, Class[] params)     throws NoSuchMethodException", "signatureAfterChange": "   public Method lookupMethod(Node prefix, String mname, Class<?>[] params)     throws NoSuchMethodException", "diff": ["-  public Method lookupMethod(Node prefix, String mname, Class[] params)", "+  public Method lookupMethod(Node prefix, String mname, Class<?>[] params)", "-    Class  c = NodeProperties.getType(prefix);", "+    Class<?>  c = NodeProperties.getType(prefix);", "-        Class cl = declaringClass;", "+        Class<?> cl = declaringClass;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8549836ea60092725fc316559d720155", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public Class visit(AddAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(AddAssignExpression node)", "diff": ["-  public Class visit(AddAssignExpression node) {", "+  public Class<?> visit(AddAssignExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8849ac902fec727a35dd8d531566a103", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/ClassInfoUtilities.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private static List getConstructors(ClassInfo cl, int params)", "signatureAfterChange": "   private static List<ConstructorInfo> getConstructors(ClassInfo cl, int params)", "diff": ["-  private static List getConstructors(ClassInfo cl, int params) {", "-    List  result = new LinkedList();", "+  private static List<ConstructorInfo> getConstructors(ClassInfo cl, int params) {", "+    List<ConstructorInfo> result = new LinkedList<ConstructorInfo>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9362704b176d3629129f042dab8343cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classfile/ClassFile.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ClassFile(String name, String sname)", "signatureAfterChange": "   public ClassFile(String name, String sname)", "diff": ["-    interfaces   = new LinkedList();", "-    fields       = new LinkedList();", "-    methods      = new LinkedList();", "+    interfaces   = new LinkedList<Short>();", "+    fields       = new LinkedList<FieldInfo>();", "+    methods      = new LinkedList<MethodInfo>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "936da8cdda6b5074b79968a5eb421da6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/gui/resource/ResourceManager.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public List getStringList(String key, String delim, boolean returnDelims)  \tthrows MissingResourceException", "signatureAfterChange": "   public List<String> getStringList(String key, String delim, boolean returnDelims)      throws MissingResourceException", "diff": ["+   */", "+  public List<String> getStringList(String key, String delim, boolean returnDelims) ", "+    throws MissingResourceException {", "+    ", "+    List<String> result = new ArrayList<String>();", "+    StringTokenizer st  = new StringTokenizer(getString(key), delim, returnDelims);", "+    ", "+    while (st.hasMoreTokens()) { result.add(st.nextToken()); }", "+    ", "+    return result;", "+  }", "-     */", "-    public List getStringList(String key, String delim, boolean returnDelims) ", "-\tthrows MissingResourceException {", "-        List            result = new ArrayList();", "-        StringTokenizer st     = new StringTokenizer(getString(key),", "-                                                     delim,", "-                                                     returnDelims);", "-        while (st.hasMoreTokens()) {", "-            result.add(st.nextToken());", "-        }", "-        return result;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "962906d3fdca508202c5b0cc490ef10e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic Set keySet()", "signatureAfterChange": "     public Set<String> keySet()", "diff": ["+    public Set<String> keySet() {", "+      Set<String> result = new HashSet<String>(11);", "+      for (int i = table.length-1; i >= 0; i--) {", "+        for (Entry e = table[i]; e != null; e = e.next) {", "+          result.add(e.key);", "+        }", "+      }", "+      return result;", "-\t */", "-\tpublic Set keySet() {", "-\t    Set result = new HashSet(11);", "-\t    for (int i = table.length-1; i >= 0; i--) {", "-\t\tfor (Entry e = table[i]; e != null; e = e.next) {", "-\t\t    result.add(e.key);", "-\t\t}", "-\t    }", "-\t    return result;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "963c5950c18afccc5abc56ef770c929c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "   private Class visitUnaryOperation(UnaryExpression node, String s)", "signatureAfterChange": "   private Class<?> visitUnaryOperation(UnaryExpression node, String s)", "diff": ["-  private Class visitUnaryOperation(UnaryExpression node, String s) {", "+  private Class<?> visitUnaryOperation(UnaryExpression node, String s) {", "-    Class c = exp.acceptVisitor(this);", "-    Class returnType = c;", "+    Class<?> c = exp.acceptVisitor(this);", "+    Class<?> returnType = c;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c7293f542412f80edb19461ff5a86f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public Class visit(ComplementExpression node)", "signatureAfterChange": "   public Class<?> visit(ComplementExpression node)", "diff": ["-  public Class visit(ComplementExpression node) {", "+  public Class<?> visit(ComplementExpression node) {", "-    Class c = e.acceptVisitor(this);", "-    Class returnType = c;", "+    Class<?> c = e.acceptVisitor(this);", "+    Class<?> returnType = c;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7a287a6c081c092b14ea901dc7ecf9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/InterpreterUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "   public static Method lookupOuterMethod(Class cl, String name, Class [] ac)     throws NoSuchMethodException", "signatureAfterChange": "   public static Method lookupOuterMethod(Class<?> cl, String name, Class<?> [] ac)     throws NoSuchMethodException", "diff": ["-  public static Method lookupOuterMethod(Class cl, String name, Class [] ac)", "+  public static Method lookupOuterMethod(Class<?> cl, String name, Class<?> [] ac)", "-    Class   c  = (cl != null) ? getDeclaringClass(cl) : null;", "+    Class<?>   c  = (cl != null) ? getDeclaringClass(cl) : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac3c98f1116712b13e3f646de1c5b3fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public TreeInterpreter(ParserFactory pf, ClassLoader cl)", "signatureAfterChange": "   public TreeInterpreter(ParserFactory pf, ClassLoader cl)", "diff": ["-    nameVisitorContext  = new GlobalContext(this);", "+    nameVisitorContext  = new GlobalContext<Type>(this);", "-    checkVisitorContext = new GlobalContext(this);", "+    checkVisitorContext = new GlobalContext<Type>(this);", "-    evalVisitorContext  = new GlobalContext(this);", "+    evalVisitorContext  = new GlobalContext<Object>(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afc047cb0484db608f38450a308e545f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public Class visit(DivideAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(DivideAssignExpression node)", "diff": ["-  public Class visit(DivideAssignExpression node) {", "+  public Class<?> visit(DivideAssignExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0b7d4f41f9de1cbf97caab2089baae5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public synchronized void addTopLevelGroup(String name, INavigatorItemFilter f)", "signatureAfterChange": "   public synchronized void addTopLevelGroup(String name, INavigatorItemFilter<? super ItemT> f)", "diff": ["-  public synchronized void addTopLevelGroup(String name, INavigatorItemFilter f){", "+  public synchronized void addTopLevelGroup(String name, INavigatorItemFilter<? super ItemT> f){", "-    GroupNode n = new GroupNode(name, f);", "+    GroupNode<ItemT> n = new GroupNode<ItemT>(name, f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b333e6dc17b5a626bcbd8b369478d99d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static Field getField(Class cl, String name)     throws NoSuchFieldException, AmbiguousFieldException", "signatureAfterChange": "   public static Field getField(Class<?> cl, String name)     throws NoSuchFieldException, AmbiguousFieldException", "diff": ["-  public static Field getField(Class cl, String name)", "+  public static Field getField(Class<?> cl, String name)", "-    Class c = cl;", "+    Class<?> c = cl;", "-        Class[] ints = c.getInterfaces();", "+        Class<?>[] ints = c.getInterfaces();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b35d1fea3497e4081966024193be5051", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public Class visit(NotEqualExpression node)", "signatureAfterChange": "   public Class<?> visit(NotEqualExpression node)", "diff": ["-  public Class visit(NotEqualExpression node) {", "+  public Class<?> visit(NotEqualExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = rn.acceptVisitor(this);", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = rn.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "badef621244203dd67e065b003063a01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/Context.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     Class setProperties(ClassAllocation node, Class c, Class[] args, List<Node> memb);", "signatureAfterChange": "     Class<?> setProperties(ClassAllocation node, Class<?> c, Class<?>[] args, List<Node> memb);", "diff": ["-    Class setProperties(ClassAllocation node, Class c, Class[] args, List<Node> memb);", "+    Class<?> setProperties(ClassAllocation node, Class<?> c, Class<?>[] args, List<Node> memb);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc738b05b727943b457565f478409bb4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/Context.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     Class setProperties(SimpleAllocation node, Class c, Class[] args);", "signatureAfterChange": "     Class<?> setProperties(SimpleAllocation node, Class<?> c, Class<?>[] args);", "diff": ["-    Class setProperties(SimpleAllocation node, Class c, Class[] args);", "+    Class<?> setProperties(SimpleAllocation node, Class<?> c, Class<?>[] args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be67e77e48e7b0dd7e86eaf201d14151", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void insertNodeSortedInto(LeafNode<ItemT> child, InnerNode<?, ItemT> parent)", "signatureAfterChange": "   private void insertNodeSortedInto(LeafNode<ItemT> child, InnerNode<?, ItemT> parent)", "diff": ["-      if (parentsKid instanceof InnerNode) {", "+      if (parentsKid instanceof InnerNode<?,?>) {", "-      } else if(parentsKid instanceof LeafNode) {", "+      } else if(parentsKid instanceof LeafNode<?>) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2443185229f31b0b4375c5e426984be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "7d7f71637ac82cabd526a44e6c766574f76fc311", "commitAfterChange": "33c99bc453e2b8a224944d7334183adb0010fc32", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected List getOuterNames(String cname)", "signatureAfterChange": "   protected List<String> getOuterNames(String cname)", "diff": ["+   */", "+  protected List<String> getOuterNames(String cname) {", "+    List<String> l = new LinkedList<String>();", "+    int i;", "+    while ((i = cname.lastIndexOf('$')) != -1) {", "+      cname = cname.substring(0, i);", "+      if ((i = cname.lastIndexOf('$')) != -1) {", "+        l.add(cname.substring(i + 1, cname.length()));", "+      } else if ((i = cname.lastIndexOf('.')) != -1) {", "+        l.add(cname.substring(i + 1, cname.length()));", "+      } else {", "+        l.add(cname);", "+      }", "+    return l;", "+  }", "-     */", "-    protected List getOuterNames(String cname) {", "-\tList l = new LinkedList();", "-\tint i;", "-\twhile ((i = cname.lastIndexOf('$')) != -1) {", "-\t    cname = cname.substring(0, i);", "-\t    if ((i = cname.lastIndexOf('$')) != -1) {", "-\t\tl.add(cname.substring(i + 1, cname.length()));", "-\t    } else if ((i = cname.lastIndexOf('.')) != -1) {", "-\t\tl.add(cname.substring(i + 1, cname.length()));", "-\t    } else {", "-\t\tl.add(cname);", "-\t    }", "-\t}", "-\treturn l;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b72e08b33b83331147389ca99ad65c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static Method lookupOuterMethod(Class cl, String name, Class[] ac)     throws NoSuchMethodException", "signatureAfterChange": "   public static Method lookupOuterMethod(Class<?> cl, String name, Class<?>[] ac)     throws NoSuchMethodException", "diff": ["-  public static Method lookupOuterMethod(Class cl, String name, Class[] ac)", "+  public static Method lookupOuterMethod(Class<?> cl, String name, Class<?>[] ac)", "-    Class c = (cl != null) ? cl.getDeclaringClass() : null;", "+    Class<?> c = (cl != null) ? cl.getDeclaringClass() : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73f399cb4c9c7915b2cb838c5d48a4c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/BufferedImportationManager.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public Class lookupClass(String cname, String ccname)     throws ClassNotFoundException", "signatureAfterChange": "   public Class<?> lookupClass(String cname, String ccname)     throws ClassNotFoundException", "diff": ["-  public Class lookupClass(String cname, String ccname)", "+  public Class<?> lookupClass(String cname, String ccname)", "-      Class c = m.get(cname);", "+      Class<?> c = m.get(cname);", "-    Class c = super.lookupClass(cname, ccname);", "+    Class<?> c = super.lookupClass(cname, ccname);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7cf9328f938690bf08ce2a668a6e840", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public MethodDeclaration lookupFunction(String mname, Class[] params)     throws NoSuchFunctionException", "signatureAfterChange": "   public MethodDeclaration lookupFunction(String mname, Class<?>[] params)     throws NoSuchFunctionException", "diff": ["-  public MethodDeclaration lookupFunction(String mname, Class[] params)", "+  public MethodDeclaration lookupFunction(String mname, Class<?>[] params)", "-      Class[] p = new Class[l.size()];", "+      Class<?>[] p = new Class<?>[l.size()];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c82efa0cca8650ab6dcb11e418a27f12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public IDocumentNavigator makeListNavigator(final IDocumentNavigator parent)", "signatureAfterChange": "     public IDocumentNavigator<ItemT> makeListNavigator(final IDocumentNavigator<ItemT> parent)", "diff": ["-    public IDocumentNavigator makeListNavigator(final IDocumentNavigator parent) {", "-      final IDocumentNavigator tbr = makeListNavigator();", "+    public IDocumentNavigator<ItemT> makeListNavigator(final IDocumentNavigator<ItemT> parent) {", "+      final IDocumentNavigator<ItemT> tbr = makeListNavigator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd24734aa28325f5b4f4e2878c36cd07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "   public Class visit(AndExpression node)", "signatureAfterChange": "   public Class<?> visit(AndExpression node)", "diff": ["-  public Class visit(AndExpression node) {", "+  public Class<?> visit(AndExpression node) {", "-    Class lc = le.acceptVisitor(this);", "-    Class rc = re.acceptVisitor(this);", "+    Class<?> lc = le.acceptVisitor(this);", "+    Class<?> rc = re.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d21b9f2c37474c604c2f83a6c0343020", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public Class visit(VariableDeclaration node)", "signatureAfterChange": "   public Class<?> visit(VariableDeclaration node)", "diff": ["-  public Class visit(VariableDeclaration node) {", "+  public Class<?> visit(VariableDeclaration node) {", "-    Class lc = node.getType().acceptVisitor(this);", "+    Class<?> lc = node.getType().acceptVisitor(this);", "-      Class rc = init.acceptVisitor(this);", "+      Class<?> rc = init.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5c6f70ace65011998516fb0511b7432", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classfile/ConstantPool.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ConstantPool()", "signatureAfterChange": "   public ConstantPool()", "diff": ["-    constants    = new HashMap();", "+    constants    = new HashMap<Object,Info>();", "-    constantList = new LinkedList();", "+    constantList = new LinkedList<Info>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d75adb04865e596f1b17aefb026b6d9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public Class visit(RemainderAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(RemainderAssignExpression node)", "diff": ["-  public Class visit(RemainderAssignExpression node) {", "+  public Class<?> visit(RemainderAssignExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f0233c3b1740219f8dfe6eee9f9fdc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public Class visit(SubtractAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(SubtractAssignExpression node)", "diff": ["-  public Class visit(SubtractAssignExpression node) {", "+  public Class<?> visit(SubtractAssignExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e130d86f501bca9abf2989c669df9e1a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOpsTest.java", "commitBeforeChange": "fa92455fedb412729f98f82d7ebe32526434dfc9", "commitAfterChange": "901df797e3b0df4a97e4f748f929fa2a582d5380", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public static Lambda<Object, Class> getLambda()", "signatureAfterChange": "     public static Lambda<Object, Class<?>> getLambda()", "diff": ["-    public static Lambda<Object, Class> getLambda() {", "-      return new Lambda<Object, Class>() {", "-        public Class value(Object param) {", "+    public static Lambda<Object, Class<?>> getLambda() {", "+      return new Lambda<Object, Class<?>>() {", "+        public Class<?> value(Object param) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eacc43c4b9e40c63cdb3ae88fbeac01f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/MethodContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   protected boolean isInnerclass(Class ic, Class oc)", "signatureAfterChange": "   protected boolean isInnerclass(Class<?> ic, Class<?> oc)", "diff": ["-  protected boolean isInnerclass(Class ic, Class oc) {", "+  protected boolean isInnerclass(Class<?> ic, Class<?> oc) {", "-      Class[] cs = oc.getDeclaredClasses();", "+      Class<?>[] cs = oc.getDeclaredClasses();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f00350092cff66bbeda203be3fb6b3bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/ClassInfoUtilities.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static List getMethods(ClassInfo cl, String name, int params)", "signatureAfterChange": "   public static List<MethodInfo> getMethods(ClassInfo cl, String name, int params)", "diff": ["-  public static List getMethods(ClassInfo cl, String name, int params) {", "-    List  result = new LinkedList();", "+  public static List<MethodInfo> getMethods(ClassInfo cl, String name, int params) {", "+    List<MethodInfo> result = new LinkedList<MethodInfo>();"]}], "num": 3270}
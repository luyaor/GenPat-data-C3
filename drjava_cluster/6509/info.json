{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d037e2a3522976612fdcfc704e8c919e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c581bcfd497feaa25a140c640abc4002", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected void handleStart(MasterRemote mainJVM)", "signatureAfterChange": "   protected void handleStart(MasterRemote mainJVM)", "diff": ["-            _log.log(re.toString());", "-            throw new IllegalStateException(\"Main JVM can't be reached.\\n\" + re);", "+            _log.logTime(\"System.in: \" + re.toString());", "+            throw new IllegalStateException(\"Main JVM can't be reached for input.\\n\" + re);", "-      _log.log(ioe.toString());", "+      _log.logTime(\"Creating InputStreamRedirector: \" + ioe.toString());", "-          //_log.log(\"out.print: \" + s);", "+          //_log.logTime(\"out.print: \" + s);", "-          _log.log(re.toString());", "+          _log.logTime(\"System.out: \" + re.toString());", "-          //_log.log(\"err.print: \" + s);", "+          //_log.logTime(\"err.print: \" + s);", "-          _log.log(re.toString());", "+          _log.logTime(\"System.err: \" + re.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82cf6e3bba2460c175770a94279ebf9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "diff": ["-    panel.addComponent(new BooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT, \"Prompt If Interactions Pane Exits Unexpectedly\", this,", "-                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "-                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.INTERACTIONS_RESET_PROMPT, \"Prompt Before Resetting Interactions Pane\", this,", "-                                                  \"Whether DrJava should prompt the user before resetting the interactinos pane.\"));", "+    // Quit", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_COMPILE, \"Automatically Save Before Compiling\", this,", "+", "+    // Interactions", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.INTERACTIONS_RESET_PROMPT,", "+                                                  \"Prompt Before Resetting Interactions Pane\", this,", "+                                                  \"<html>Whether DrJava should prompt the user before<br>\" +", "+                                                  \"manually resetting the interactions pane.</html>\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT,", "+                                                  \"Prompt if Interactions Pane Exits Unexpectedly\", this,", "+                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "+                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\"));", "+    ", "+    // Javadoc", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,", "+                                                  \"Prompt for Javadoc Destination\", this,", "+                                                  \"<html>Whether Javadoc should always prompt the user<br>\" +", "+                                                  \"to select a destination directory.</html>\"));", "+    ", "+", "+    // Save before X", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_COMPILE,", "+                                                  \"Automatically Save Before Compiling\", this,", "-                                                  \"recompiling, or instead should ask the user each time.</html>\"));", "+                                                  \"recompiling or ask the user each time.</html>\"));", "-    ", "+//    // These are not currently used.", "-//                                                  \"testing with JUnit, or instead should ask the user each time</html>\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JAVADOC, \"Automatically Save Before Generating Javadoc\", this,", "-                                                  \"<html>Whether DrJava should automatically save before generating<br>\" +", "-                                                  \"Javadoc, or instead should ask the user each time.</html>\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,", "-                                                  \"Always Prompt for Javadoc Destination\", this,", "-                                                  \"Whether Javadoc should always prompt the user for the destination directory.\"));", "+//                                                  \"testing with JUnit or ask the user each time.</html>\"));", "-//                                                  \"debugging, or instead should ask the user each time</html>\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC, \"Warn on Breakpoint If out of Sync\", this,", "-                                                  \"<html>Whether DrJava should prompt the user if the class file<br>\" +", "+//                                                  \"debugging or ask the user each time.</html>\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JAVADOC,", "+                                                  \"Automatically Save Before Generating Javadoc\", this,", "+                                                  \"<html>Whether DrJava should automatically save before<br>\" +", "+                                                  \"generating Javadoc or ask the user each time.</html>\"));", "+    ", "+    // Warnings", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC,", "+                                                  \"Warn on Breakpoint if Out of Sync\", this,", "+                                                  \"<html>Whether DrJava should warn the user if the class file<br>\" +", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE, \"Warn if Debugging Modified File\", this,", "-                                                  \"Whether DrJava should prompt the user if the file being debugged has been modified.\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF, \"Warn to Restart in order to Change Look and Feel\", this,", "-                                                    \"<html>Whether DrJava should warn the user that look and feel<br>\" +", "-                                                    \"changes will not be applied until DrJava is restarted.</html>.\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE,", "+                                                  \"Warn if Debugging Modified File\", this,", "+                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +", "+                                                  \"debugged has been modified since its last save.</html>\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF,", "+                                                  \"Warn to Restart to Change Look and Feel\", this,", "+                                                  \"<html>Whether DrJava should warn the user that look and feel<br>\" +", "+                                                  \"changes will not be applied until DrJava is restarted.</html>.\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0dc2dd0647697569c51ffca8cd9d487", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "          public void test_forModifiersAndVisibility()", "signatureAfterChange": "          public void test_forModifiersAndVisibility()", "diff": ["-      ModifiersAndVisibility testMav = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"public\", \"private\"});", "+      ModifiersAndVisibility testMav = ", "+        new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"public\", \"private\"});", "-      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers. Can't use private and public together.\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers.\" + ", "+                   \" Can't use private and public together.\", errors.get(0).getFirst());", "-      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers. Can't use final and abstract together.\", errors.get(1).getFirst());", "+      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers.\" + ", "+                   \" Can't use final and abstract together.\", errors.get(1).getFirst());", "-      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers. Can't use final and abstract together.\", errors.get(2).getFirst());", "+      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers.\" + ", "+                   \" Can't use final and abstract together.\", errors.get(2).getFirst());", "-      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers. Can't use final and volatile together.\", errors.get(3).getFirst());", "+      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers.\" + ", "+                   \" Can't use final and volatile together.\", errors.get(3).getFirst());"]}], "num": 6509}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "042b9bdaaf696cea0df5b4a0238cf852", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c4e71de03d77f515cdd7822610efe6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 38, "signatureBeforeChange": "     @Override public Type visit(InnerAllocation node)", "signatureAfterChange": "     @Override public Type visit(InnerAllocation node)", "diff": ["-        ClassType t = ts.lookupClass(node.getExpression(), node.getClassName(), classTargs);", "-        checkAccessibility(t.ofClass(), node);", "+        ClassType t = ts.lookupClass(node.getExpression(), node.getClassName(), classTargs, context.accessModule());", "-          ConstructorInvocation inv = ts.lookupConstructor(t, targs, args, expected);", "-          checkAccessibility(inv.constructor(), node);", "+          ConstructorInvocation inv = ts.lookupConstructor(t, targs, args, expected, context.accessModule());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b211c714aa23112979efb1d6c153c7b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 39, "signatureBeforeChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "diff": ["-        ClassType t = ts.lookupClass(node.getExpression(), node.getClassName(), classTargs);", "-        checkAccessibility(t.ofClass(), node);", "+        ClassType t = ts.lookupClass(node.getExpression(), node.getClassName(), classTargs, context.accessModule());", "-          ConstructorInvocation inv = ts.lookupConstructor(t, targs, args, expected);", "-          checkAccessibility(inv.constructor(), node);", "+          ConstructorInvocation inv = ts.lookupConstructor(t, targs, args, expected, context.accessModule());"]}], "num": 4295}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5f37210283b94d7e4a445a9507b74cd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "430500c8b1e47f08b75e1ac6797eaaa7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "     public ClassLoaderExtension(koala.dynamicjava.interpreter.Interpreter i)", "signatureAfterChange": "   public ClassLoaderExtension(koala.dynamicjava.interpreter.Interpreter i, ClasspathManager c)", "diff": ["-     */", "-    public ClassLoaderExtension(koala.dynamicjava.interpreter.Interpreter i) {", "-      super(i);", "-      // The protected variable classLoader contains the class loader to use", "-      // to find classes. When a new class path is added to the loader,", "-      // it adds on an auxilary classloader and chains the old classLoader", "-      // onto the end.", "-      // Here we initialize classLoader to be the system class loader.", "-      classLoader = new WrapperClassLoader(getClass().getClassLoader()); // classLoader is only used in getResource()", "-      // NOTE that the superclass of ClassLoaderExtension (TreeClassLoader) adds (appends)", "-      // URLs to the classpath of this classloader", "-", "-      // don't load the dynamic java stuff using the sticky loader!", "-      // without this, interpreter-defined classes don't work.", "-      String[] excludes = {", "-        \"edu.rice.cs.drjava.model.repl.DynamicJavaAdapter$InterpreterExtension\",", "-        \"edu.rice.cs.drjava.model.repl.DynamicJavaAdapter$ClassLoaderExtension\"", "-      };", "-", "-      if (!classLoaderCreated) {", "-        _stickyLoader = new StickyClassLoader(this, // Sticky's newLoader, indirectly points to the (dynamic) classLoader", "-                                              classLoader, // Sticky's oldLoader", "-                                              excludes);", "-        classLoaderCreated = true;", "-      }", "-", "-      // we will use this to getResource classes", "-    }", "+   */", "+  public ClassLoaderExtension(koala.dynamicjava.interpreter.Interpreter i, ClasspathManager c) {", "+    super(i);", "+    cpm = c;", "+    // The protected variable classLoader contains the class loader to use", "+    // to find classes. When a new class path is added to the loader,", "+    // it adds on an auxilary classloader and chains the old classLoader", "+    // onto the end.", "+    // Here we initialize classLoader to be the system class loader, and wrap it to not load edu.rice.cs classes", "+    classLoader = new WrapperClassLoader(getClass().getClassLoader()); // classLoader is only used in getResource()", "+    // NOTE that the superclass of ClassLoaderExtension (TreeClassLoader) adds (appends)", "+    // URLs to the classpath of this classloader", "+    ", "+    // don't load the dynamic java stuff using the sticky loader!", "+    // without this, interpreter-defined classes don't work.", "+    String[] excludes = {", "+      \"edu.rice.cs.drjava.model.repl.DynamicJavaAdapter$InterpreterExtension\",", "+      \"edu.rice.cs.drjava.model.repl.DynamicJavaAdapter$ClassLoaderExtension\"", "+    };", "+    ", "+    if (!classLoaderCreated) {", "+      _stickyLoader = new StickyClassLoader(this, // Sticky's newLoader, indirectly points to the (dynamic) classLoader", "+                                            classLoader, // Sticky's oldLoader", "+                                            excludes);", "+      classLoaderCreated = true;", "+    // we will use this to getResource classes", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e8427c58a40525bf3ac6315cbf8af55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "f4c8eb851d98f4da2479f32fb767dac4b3a40e1c", "commitAfterChange": "a7e5e57a85d644730ad4382ac9b270a370e13493", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public FindReplaceMachine(SingleDisplayModel model, DocumentIterator docIterator)", "signatureAfterChange": "   public FindReplaceMachine(SingleDisplayModel model, DocumentIterator docIterator, Component frame)", "diff": ["-  public FindReplaceMachine(SingleDisplayModel model, DocumentIterator docIterator) {    ", "+  public FindReplaceMachine(SingleDisplayModel model, DocumentIterator docIterator, Component frame) {    ", "+    _frame = frame;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99728333a7a73eabbf88cec480bde3b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "aabf32dfcb159caa0bf37490cd0936b3ae5f1fb6", "commitAfterChange": "32543485a6c30402f49deaf8c43253937744fd6f", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": "          public DJFileDisplayManager(Icon java, Icon dj0, Icon dj1, Icon dj2)", "signatureAfterChange": "          public DJFileDisplayManager(Icon java, Icon dj0, Icon dj1, Icon dj2, Icon other)", "diff": ["-    public DJFileDisplayManager(Icon java, Icon dj0, Icon dj1, Icon dj2) {", "+    public DJFileDisplayManager(Icon java, Icon dj0, Icon dj1, Icon dj2, Icon other) {", "+      _other = other;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb5737536ea01e345d477493abfa3ed2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TopLevelContext.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public TopLevelContext(TypeContext next)", "signatureAfterChange": "   public TopLevelContext(TypeContext next, Options opt)", "diff": ["-  public TopLevelContext(TypeContext next) {", "+  public TopLevelContext(TypeContext next, Options opt) {", "+    _opt = opt;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb7e1e60b591515541a48fcd56f06f98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DynamicJavaAdapter()", "signatureAfterChange": "      public DynamicJavaAdapter(ClasspathManager c)", "diff": ["-  public DynamicJavaAdapter() {", "-    _djInterpreter = new InterpreterExtension();", "+  ", "+  public DynamicJavaAdapter(ClasspathManager c) {", "+    cpm = c;", "+    _djInterpreter = new InterpreterExtension(c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f232f17493034d714f1f96977599f6fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ef93e6cc3a79f29ed28debb1108f1338b9a974ad", "commitAfterChange": "76157e15bbd52f4d2639058382773284b7c9c0bd", "methodNumberBeforeChange": 280, "methodNumberAfterChange": 280, "signatureBeforeChange": "          public DJFileDisplayManager(Icon java, Icon dj0, Icon dj1, Icon dj2, Icon other)", "signatureAfterChange": "          public DJFileDisplayManager(Icon java, Icon dj0, Icon dj1, Icon dj2, Icon dj, Icon other)", "diff": ["-    public DJFileDisplayManager(Icon java, Icon dj0, Icon dj1, Icon dj2, Icon other) {", "+    public DJFileDisplayManager(Icon java, Icon dj0, Icon dj1, Icon dj2, Icon dj, Icon other) {", "+      _dj = dj;"]}], "num": 21149}
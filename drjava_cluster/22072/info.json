{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c3f1caba46e907b855dc37fb009377f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c050b9cd249373f436865d4fdcdb4be5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   private static void writeSafeValueHashCode(SymbolData sd, int baseIndent, String valueEqualsName, String methodName)", "signatureAfterChange": "   private static void writeSafeValueHashCode(SymbolData sd, int baseIndent, String valueEqualsName, String methodName)", "diff": ["-    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};", "+    String[] primitiveTypes =", "+      new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to hashCode(), it recursively generates a hash code for any object,\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * including nulls, arrays, and standard reference types.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + ", "+                    \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + ", "+                    \" * As a helper to hashCode(), it recursively generates a hash code for any object,\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) +", "+                    \" * including nulls, arrays, and standard reference types.\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \"private int \" + methodName + \"(java.lang.Object o) {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"private int \" + methodName + \"(java.lang.Object o) {\" + ", "+                    newLine + newLine);", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList<java.lang.Object>());\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + ", "+                      \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList<java.lang.Object>());\" + ", "+                      newLine);", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList());\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + ", "+                      \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList());\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 5) + \"// o should be an array, but if not, hashCode() is called\" + newLine); ", "+    _writeToFileOut(indentString(baseIndent, 5) + \"// o should be an array, but if not, hashCode() is called\" + ", "+                    newLine);", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, final java.util.LinkedList<java.lang.Object> alreadyGenerated) {\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, \" + ", "+                      \"final java.util.LinkedList<java.lang.Object> alreadyGenerated) {\" + newLine + newLine);", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, final java.util.LinkedList alreadyGenerated) {\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, \" + ", "+                      \"final java.util.LinkedList alreadyGenerated) {\" + newLine + newLine);", "-    _writeToFileOut(indentString(baseIndent, 6) + \"return (o != null) && (o instanceof ArrayWrapper)  && \" + valueEqualsName + \"(array, ((ArrayWrapper) o).array());\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"return (o != null) && (o instanceof ArrayWrapper)  && \" + ", "+                    valueEqualsName + \"(array, ((ArrayWrapper) o).array());\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public int hashCode() { return 0; } // This method should never be used -- only here for consistency.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + ", "+                    \"public int hashCode() { return 0; } // This method should never be used -- \" + ", "+                    \"only here for consistency.\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (alreadyGenerated.contains(currentWrapper)) { return -1; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"if (alreadyGenerated.contains(currentWrapper)) { return -1; }\" + ", "+                    newLine);", "-    _writeToFileOut(indentString(baseIndent, 6) + \"result = (result << 1) ^ (arrayHashCode((java.lang.Object[]) array[i], alreadyGenerated) >> 1);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) +", "+                    \"result = (result << 1) ^ (arrayHashCode((java.lang.Object[]) array[i], alreadyGenerated) >> 1);\" +", "+                    newLine);", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o.getClass().isArray()) { return new ArrayHashCode().valueFor(o); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + ", "+                    \"else if (o.getClass().isArray()) { return new ArrayHashCode().valueFor(o); }\" + newLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51608a8271685c0e931a70bbfe69a9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "    private static void writeSafeValueToString(SymbolData sd, int baseIndent, String methodName)", "signatureAfterChange": "    private static void writeSafeValueToString(SymbolData sd, int baseIndent, String methodName)", "diff": ["-    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};", "+    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\",", "+      \"boolean[]\"};", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to toString(), it recursively generates a string for any object,\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + ", "+                    \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + ", "+                    \" * As a helper to toString(), it recursively generates a string for any object,\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \"private java.lang.String \" + methodName + \"(java.lang.Object o) {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"private java.lang.String \" + methodName + \"(java.lang.Object o) {\" +", "+                    newLine + newLine);", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayToString((java.lang.Object[]) o, new java.util.HashSet<java.lang.Object[]>());\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + ", "+                      \"return arrayToString((java.lang.Object[]) o, new java.util.HashSet<java.lang.Object[]>());\" + ", "+                      newLine);", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayToString((java.lang.Object[]) o, new java.util.HashSet());\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + ", "+                      \"return arrayToString((java.lang.Object[]) o, new java.util.HashSet());\" + newLine);", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(\" + type + \" array) {\" + newLine);", "-      _writeToFileOut(indentString(baseIndent, 4) + \"java.lang.StringBuffer result = new java.lang.StringBuffer();\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(\" + type + \" array) {\" +", "+                      newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"java.lang.StringBuffer result = new java.lang.StringBuffer();\" +", "+                      newLine);", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(java.lang.Object[] array, java.util.HashSet<java.lang.Object[]> alreadyPrinted) {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + ", "+                      \"public java.lang.String arrayToString(java.lang.Object[] array, \" + ", "+                      \"java.util.HashSet<java.lang.Object[]> alreadyPrinted) {\" + newLine);", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(java.lang.Object[] array, java.util.HashSet alreadyPrinted) {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + ", "+                      \"public java.lang.String arrayToString(java.lang.Object[] array, \" + ", "+                      \"java.util.HashSet alreadyPrinted) {\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (alreadyPrinted.contains(array)) { return (\\\"[...]\\\"); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + ", "+                    \"if (alreadyPrinted.contains(array)) { return (\\\"[...]\\\"); }\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 4) + \"java.lang.StringBuffer result = new java.lang.StringBuffer();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + ", "+                    \"java.lang.StringBuffer result = new java.lang.StringBuffer();\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 6) + \"result.append(arrayToString((java.lang.Object[]) array[i], alreadyPrinted));\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + ", "+                    \"result.append(arrayToString((java.lang.Object[]) array[i], alreadyPrinted));\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o.getClass().isArray()) { return new ArrayToString().valueFor(o); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + ", "+                    \"else if (o.getClass().isArray()) { return new ArrayToString().valueFor(o); }\" + newLine);"]}], "num": 22072}
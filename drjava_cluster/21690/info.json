{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8b11751f75e5d7120bf8a546e256b7e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24fafd0e145401d2628b60c7b7c85702", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOpsTest.java", "commitBeforeChange": "2e0841eedc488bc59bd976576cad4ea91d3f46bd", "commitAfterChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": "      public void testReplaceVariables2()", "signatureAfterChange": "      public void testCommandLineToList()", "diff": ["+  public void testCommandLineToList() {", "+    List<String> l = StringOps.commandLineToList(\"a b c\");", "+    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "+    assertEquals(3, l.size());", "+    assertEquals(\"a\", l.get(0));", "+    assertEquals(\"b\", l.get(1));", "+    assertEquals(\"c\", l.get(2));", "+", "+    l = StringOps.commandLineToList(\"a'b c'\");", "+    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "+    assertEquals(1, l.size());", "+    assertEquals(\"a'b c'\", l.get(0));", "+", "+    l = StringOps.commandLineToList(\"a\\\"b c\\\"\");", "+    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "+    assertEquals(1, l.size());", "+    assertEquals(\"a\\\"b c\\\"\", l.get(0));", "+", "+    l = StringOps.commandLineToList(\"a\\\"b 'c'\\\"\");", "+    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "+    assertEquals(1, l.size());", "+    assertEquals(\"a\\\"b 'c'\\\"\", l.get(0));", "+    l = StringOps.commandLineToList(\"a \\\"b c\\\"\");", "+    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "+    assertEquals(2, l.size());", "+    assertEquals(\"a\", l.get(0));", "+    assertEquals(\"\\\"b c\\\"\", l.get(1));", "+    ", "+    l = StringOps.commandLineToList(\"\\u001b\");", "+    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "+    assertEquals(0, l.size());", "+    ", "+    l = StringOps.commandLineToList(\"\\u001b\\u001b\");", "+    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "+    assertEquals(1, l.size());", "+    assertEquals(\"\\u001b\", l.get(0));", "+    ", "+    l = StringOps.commandLineToList(\"\\u001b \");", "+    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "+    assertEquals(1, l.size());", "+    assertEquals(\" \", l.get(0));", "+    ", "+    l = StringOps.commandLineToList(\"a\\u001b b\");", "+    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "+    assertEquals(1, l.size());", "+    assertEquals(\"a b\", l.get(0));", "-  public void testReplaceVariables2() {", "-    Map<String,Properties> props = new TreeMap<String,Properties>();", "-    Properties p1 = new Properties();", "-    p1.setProperty(\"var\", \"foo\");", "-    p1.setProperty(\"xxx\", \"bar\");", "-    props.put(\"1\",p1);", "-    Properties p2 = new Properties();", "-    p2.setProperty(\"yyy\", \"bam\");", "-    p2.setProperty(\"xxx\", \"new\");", "-    props.put(\"2\",p2);", "-    ", "-    assertEquals(\"abcxyz\", StringOps.replaceVariables(\"abcxyz\",props));", "-    assertEquals(\"abcfooxyz\", StringOps.replaceVariables(\"abc${var}xyz\",props));", "-    assertEquals(\"abcbarxyz\", StringOps.replaceVariables(\"abc${xxx}xyz\",props));", "-    assertEquals(\"abc${xxx}xyz\", StringOps.replaceVariables(\"abc\\\\${xxx}xyz\",props));", "-    assertEquals(\"abc\\\\barxyz\", StringOps.replaceVariables(\"abc\\\\\\\\${xxx}xyz\",props));", "-    assertEquals(\"abcbamxyz\", StringOps.replaceVariables(\"abc${yyy}xyz\",props));", "-    assertEquals(\"abcbarbamxyz\", StringOps.replaceVariables(\"abc${xxx}${yyy}xyz\",props));", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e61652a981631cd372269e014016648b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOpsTest.java", "commitBeforeChange": "1e619a02befaa7a99dc31172b2a007a2446ed2bd", "commitAfterChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "      public void testCommandLineToList()", "signatureAfterChange": "      public void testCommandLineToLists()", "diff": ["-  public void testCommandLineToList() {", "-    List<String> l = StringOps.commandLineToList(\"a b c\");", "+  public void testCommandLineToLists() {", "+    List<List<List<String>>> seqs = StringOps.commandLineToLists(\"a b c\");", "+    assertEquals(1, seqs.size());    ", "+    List<List<String>> pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    List<String> l = pipe.get(0);", "-    l = StringOps.commandLineToList(\"a'b c'\");", "+    seqs = StringOps.commandLineToLists(\"a'b c'\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a\\\"b c\\\"\");", "+    seqs = StringOps.commandLineToLists(\"a\\\"b c\\\"\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a\\\"b 'c'\\\"\");", "+    seqs = StringOps.commandLineToLists(\"a\\\"b 'c'\\\"\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a \\\"b c\\\"\");", "+    seqs = StringOps.commandLineToLists(\"a \\\"b c\\\"\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"\\u001b\");", "-    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "-    assertEquals(0, l.size());", "+    seqs = StringOps.commandLineToLists(\"\\u001b\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "+    // System.err.println(\"l = \"+edu.rice.cs.plt.iter.IterUtil.toString(seqs));", "+    assertEquals(1, l.size());", "+    assertEquals(\"\\u001b\", l.get(0));", "-    l = StringOps.commandLineToList(\"\\u001b\\u001b\");", "+    seqs = StringOps.commandLineToLists(\"\\u001b\\u001b\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"\\u001b \");", "+    seqs = StringOps.commandLineToLists(\"\\u001b \");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a\\u001b b\");", "+    seqs = StringOps.commandLineToLists(\"a\\u001b b\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    "]}], "num": 21690}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f35eead9b1ee32bb40290d81507beae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b9328b510f289538de54241f2bd368", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "signatureAfterChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "diff": ["-   */", "+  /** Tests that undoing/redoing a multi-line comment/uncomment will restore the caret position */", "-    DefinitionsPane pane = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "-    String text =", "+    ", "+    final DefinitionsPane pane = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "+    final String text =", "-    int newPos = 20;", "+    final int newPos = 20;", "-    doc.insertString(0, text, null);", "-    assertEquals(\"insertion\",text, doc.getText());", "+    // The following statement hung when run in the main test thread.  There must be a pending access to doc in a", "+    // task on the event queue that sometimes has not yet executed.", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { doc.append(text, null); } });", "+    ", "+    assertEquals(\"insertion\", text, doc.getText());", "-    pane.endCompoundEdit();", "-    doc.commentLines(0,doc.getLength());", "+", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "+     ", "+    doc.acquireWriteLock();", "+    try { doc.commentLines(0, doc.getLength()); }", "+    finally { doc.releaseWriteLock(); }", "+    ", "-    assertEquals(\"commenting\",commented, doc.getText());", "+    assertEquals(\"commenting\", commented, doc.getText());", "+    ", "-    pane.setCaretPosition(newPos);", "-    doc.getUndoManager().undo();", "-    assertEquals(\"undo commenting\",text, doc.getText(0,doc.getLength()));", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "+    ", "+    doc.getUndoManager().undo();  ", "+    assertEquals(\"undo commenting\", text, doc.getText());", "-    pane.setCaretPosition(newPos);", "+    ", "+    // Perturb the caret position and redo", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    assertEquals(\"redo commenting\",commented, doc.getText(0,doc.getLength()));", "+    assertEquals(\"redo commenting\", commented, doc.getText());", "-    pane.endCompoundEdit();    ", "-    doc.uncommentLines(0,doc.getLength());", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "+    ", "+    doc.acquireWriteLock();", "+    try { doc.uncommentLines(0, doc.getLength()); }", "+    finally { doc.releaseWriteLock(); }", "+    ", "-    assertEquals(\"uncommenting\",text, doc.getText(0,doc.getLength()));", "-    oldPos = pane.getCaretPosition();", "-    pane.setCaretPosition(newPos);", "+    assertEquals(\"uncommenting\", text, doc.getText());", "+    ", "+    oldPos = pane.getCaretPosition();  // executing this method call outside of the event thread is borderline", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos);  } });", "-    assertEquals(\"undo uncommenting\",commented, doc.getText(0,doc.getLength()));", "+    ", "+    assertEquals(\"undo uncommenting\", commented, doc.getText());", "-    pane.setCaretPosition(newPos);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    assertEquals(\"redo uncommenting\",text, doc.getText(0,doc.getLength()));", "+    assertEquals(\"redo uncommenting\",text, doc.getText());", "+    ", "+    _log.log(\"testMultiLineCommentOrUncommentAfterScroll completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3521d13091c546b2f8ed98d14bff5e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "commitAfterChange": "010ae297b5b09284b0dfa287aa524a83e41fa50d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "signatureAfterChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "diff": ["-    final Object _lock = new Object();", "-    DefinitionsPane pane = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc;", "-    synchronized(_lock) {", "-      doc = pane.getOpenDefDocument();//.getDocument();", "+    final DefinitionsPane pane = _frame.getCurrentDefPane();", "+    OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "+    doc.insertString(0, \"abcd\", null);", "+    try { Utilities.invokeAndWait(new Runnable() { ", "+      public void run() {", "+        pane.setCaretPosition(3); // not thread-safe!", "+      }}); ", "-    /**", "-     * NOTE: This has been added because MainFrameTest hangs randomly (about every other time) without this line.", "-     * It is still unknown why this occurs - being that the above method calls are all accessors, this shouldn't be a situation", "-     * where the document is being accessed by insertString before it is ready to be accessed.", "-     * Added 5/19/2004 by pakruse ", "-     */ /**/", "-    /**", "-     * UPDATE: 7/16/2004 by pakruse. Synchronizing the two statements prevents this test from hanging. Still don't know why", "-     * this happens, but no more need for the Thread.sleep command.", "-     * If this test ever takes more than two minutes to run, then it's hanging, and the following lines should be added back in:", "-     */", "-//    try {", "-//      Thread.sleep(1000); ", "-//    }", "-//    catch(java.lang.InterruptedException e) {", "-//    ", "-//    }", "-       ", "-    synchronized(_lock) {", "-      doc.insertString(0, \"abcd\", null);", "-    }", "+", "+    catch(InterruptedException e) { throw new UnexpectedException(e); }", "-    ", "-    pane.setCaretPosition(3);", "-    OpenDefinitionsDocument oldDoc = doc;", "-    OpenDefinitionsDocument newDoc = model.newFile();", "+    final OpenDefinitionsDocument oldDoc = doc;", "+    final OpenDefinitionsDocument newDoc = model.newFile();", "-    pane = _frame.getCurrentDefPane();", "-    doc = pane.getOpenDefDocument();//.getDocument();", "-    assertEquals(\"New curr DefPane's document\", newDoc, doc);", "-    assertEquals(\"Location of new document\", 0, doc.getCurrentLocation());", "+    DefinitionsPane curPane;", "+    OpenDefinitionsDocument curDoc;", "+    curPane = _frame.getCurrentDefPane();", "+    curDoc = curPane.getOpenDefDocument();//.getDocument();", "+    assertEquals(\"New curr DefPane's document\", newDoc, curDoc);", "+    assertEquals(\"Location in new document\", 0, newDoc.getCurrentLocation());", "-    // Switch back", "+    // Switch back to old document", "-    pane = _frame.getCurrentDefPane();", "-    doc = pane.getOpenDefDocument();//.getDocument();", "- ", "-    assertEquals(\"Location of old document\", 3, doc.getCurrentLocation());", "+    curPane = _frame.getCurrentDefPane();", "+    curDoc = curPane.getOpenDefDocument();//.getDocument();", "+    assertEquals(\"Current document is old document\", oldDoc, curDoc);", "+    assertEquals(\"Location of old document\", 3, curDoc.getCurrentLocation());"]}], "num": 23123}
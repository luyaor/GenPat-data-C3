{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a14a821daa4e316f0f107a32fadcf47f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94e76c3512f4063b9823cc871b0252a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void registerSlave(SlaveRemote slave) throws RemoteException", "signatureAfterChange": "   public void registerSlave(SlaveRemote slave) throws RemoteException", "diff": ["+    ", "+    boolean quitSlavePending;  // flag used to move quitSlave() call out of synchronized block", "+    ", "-      _stubFile.delete();", "-      _stub = null;", "-      _classLoaderStub = null;", "-      _classLoaderStubFile.delete();", "+      quitSlavePending = _quitOnStartup;", "-        quitSlave();", "+    }", "+    if (quitSlavePending) {", "+      _log.log(this + \" Executing deferred quitSlave() that was called during startup\");", "+      quitSlave();  // not synchronized; _slave may be null when this code executes"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4bead20e19120c3e0b604d9d61b01e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testDoNotRunJUnitWhenCompileErrorsOccur() throws Exception", "signatureAfterChange": "   public void testNoClassFile() throws Exception", "diff": ["-   */", "-  public void testDoNotRunJUnitWhenCompileErrorsOccur() throws Exception {", "-    final OpenDefinitionsDocument doc = setupDocument(MONKEYTEST_COMPILEERROR_TEXT);", "-    final File file = new File(_tempDir, \"MonkeyTestCompileError.java\");", "-    doc.saveFile(new FileSelector(file));", "-    ", "-    CompileShouldFailListener listener = new CompileShouldFailListener() {", "-      public void compileErrorDuringJUnit() { compileErrorDuringJUnitCount++; }", "-    };", "-    ", "-    _model.addListener(listener);", "-    listener.assertCompileErrorDuringJUnitCount(0);", "-    doc.startJUnit();", "-    listener.checkCompileOccurred();", "-    assertCompileErrorsPresent(\"JUnit\", true);", "-    listener.assertCompileErrorDuringJUnitCount(1);", "-    listener.assertJUnitStartCount(0);", "-    listener.assertJUnitEndCount(0);", "-  }", "+   */", "+  public void testNoClassFile() throws Exception {", "+    final OpenDefinitionsDocument doc = setupDocument(MONKEYTEST_PASS_TEXT);", "+    final File file = new File(_tempDir, \"MonkeyTestPass.java\");", "+    doc.saveFile(new FileSelector(file));", "+    ", "+    TestShouldSucceedListener listener = new TestShouldSucceedListener() {", "+      public void nonTestCase() {", "+        nonTestCaseCount++;", "+      }", "+    };", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc.startJUnit();", "+      listener.wait();", "+    }", "+    listener.assertNonTestCaseCount(1);", "+    listener.assertJUnitStartCount(1);", "+    listener.assertJUnitEndCount(1);", "+                 ", "+  }"]}], "num": 29363}
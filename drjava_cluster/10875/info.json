{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd90d582fbaabaec52ee549dee28d5be", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d0d4359eed5d22ccc8bfe14031ea85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "015f584d4fd84a66059ace3c33a4092f1db5bd4c", "commitAfterChange": "d76a1ef24ee4d923e6ea3f06169ea8196ce68877", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 149, "signatureBeforeChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-    if (dir == null) return; // just in case", "-    if (dir.isDirectory()) {", "-      Iterable<File> filesIterable;", "-      ", "-      String extension = DrJavaRoot.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)];", "-      ", "-      Predicate<File> match = LambdaUtil.and(IOUtil.IS_FILE, IOUtil.extensionFilePredicate(extension));", "-      if (rec) { filesIterable = IOUtil.listFilesRecursively(dir, match); }", "-      else { filesIterable = IOUtil.attemptListFilesAsIterable(dir, match); }", "-      List<File> files = IterUtil.asList(filesIterable);", "-      ", "-      if (isProjectActive()) {", "-        Collections.sort(files, new Comparator<File>() {", "-          public int compare(File o1,File o2) {", "-            return - o1.getAbsolutePath().compareTo(o2.getAbsolutePath());", "-          }", "-        });", "-      }", "-      else {", "-        Collections.sort(files, new Comparator<File>() {", "-          public int compare(File o1,File o2) {", "-            return - o1.getName().compareTo(o2.getName());", "-          }", "-        });", "-      }", "-      ", "-      int ct = files.size();", "-      ", "-      final File[] sfiles = files.toArray(new File[ct]);", "-      ", "-      openFiles(new FileOpenSelector() { public File[] getFiles() { return sfiles; } });", "-      ", "-      if (ct > 0 && _state.inProjectPath(dir)) setProjectChanged(true);", "+    final File[] sfiles =  getFilesInFolder(dir, rec); ", "+    if(sfiles == null) return;", "+    openFiles(new FileOpenSelector() { public File[] getFiles() { return sfiles; } });", "+    ", "+    if (sfiles.length > 0 && _state.inProjectPath(dir)) setProjectChanged(true);", "+    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "546aea469eadb7838cf7928e74d75080", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "258cd9db8661309d58fd951423e88002f88d9322", "commitAfterChange": "576713321d388945af9795f8f5bacbafa14cd87f", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-    ArrayList<File> files;", "-      files = FileOps.getFilesInDir(dir, rec, new FileFilter() {", "-        public boolean accept(File f) {", "-          return  f.isDirectory() || (f.isFile() &&", "-            f.getName().endsWith(DrJavaRoot.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]));", "-        }", "-      });", "+      Iterable<File> filesIterable;", "+      String extension = DrJavaRoot.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)];", "+      FileFilter match = IOUtil.predicateFileFilter(LambdaUtil.and(IOUtil.IS_FILE, ", "+                                                                   IOUtil.extensionFilePredicate(extension)));", "+      if (rec) { filesIterable = IOUtil.listFilesRecursively(dir, match); }", "+      else { filesIterable = IOUtil.attemptListFilesAsIterable(dir, match); }", "+      List<File> files = IterUtil.asList(filesIterable);", "-      if (isProjectActive())", "+      if (isProjectActive()) {", "-        public int compare(File o1,File o2) {", "-          return - o1.getAbsolutePath().compareTo(o2.getAbsolutePath());", "-        }", "-      });", "-      else", "+          public int compare(File o1,File o2) {", "+            return - o1.getAbsolutePath().compareTo(o2.getAbsolutePath());", "+          }", "+        });", "+      }", "+      else {", "-        public int compare(File o1,File o2) {", "-          return - o1.getName().compareTo(o2.getName());", "-        }", "-      });", "+          public int compare(File o1,File o2) {", "+            return - o1.getName().compareTo(o2.getName());", "+          }", "+        });", "+      }"]}], "num": 10875}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47634a4bf464833cf8edde9fb14f4aeb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a909d47af180cebc4bf0236cbb702d13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void testGranularUndo() throws BadLocationException", "signatureAfterChange": "      public void testGranularUndo() throws BadLocationException", "diff": ["-    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+    final DefinitionsPane defPane = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = defPane.getOpenDefDocument();", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "-        definitions.setCaretPosition(doc.getLength());", "+        defPane.setCaretPosition(doc.getLength());", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.setCaretPosition(doc.getLength());", "+        defPane.setCaretPosition(doc.getLength());", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.setCaretPosition(doc.getLength());", "+        defPane.setCaretPosition(doc.getLength());", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "-        definitions.setCaretPosition(doc.getLength());", "+        defPane.setCaretPosition(doc.getLength());", "-    final KeyEvent e = new KeyEvent(definitions, KeyEvent.KEY_PRESSED, 0, ks.getModifiers(), ks.getKeyCode(),", "+    final KeyEvent e = new KeyEvent(defPane, KeyEvent.KEY_PRESSED, 0, ks.getModifiers(), ks.getKeyCode(),", "-    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.processKeyEvent(e); } });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { defPane.processKeyEvent(e); } });", "-         definitions.processKeyEvent(new KeyEvent(definitions,", "+         defPane.processKeyEvent(new KeyEvent(defPane,", "-         definitions.processKeyEvent(new KeyEvent(definitions,", "+         defPane.processKeyEvent(new KeyEvent(defPane,", "-         definitions.processKeyEvent(new KeyEvent(definitions,", "+         defPane.processKeyEvent(new KeyEvent(defPane,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc3bb3df5b7385917cd5bb770e1807d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "451a8ef10dd808c32bb1dec2a41dbfe38542794f", "commitAfterChange": "fd372db787cedeccdc43d382b7e2999ff5184943", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "signatureAfterChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "diff": ["-    _doc.append(\"typed text\", InteractionsDocument.DEFAULT_STYLE);", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        ", "+        // Type 'T'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_T, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'T'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_T, UNDEFINED));", "+        ", "+        // Type 'Y'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_Y, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'Y'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_Y, UNDEFINED));", "+        ", "+         // Type 'P'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_P, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'P'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_P, UNDEFINED));", "+        ", "+         // Type 'E'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_E, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'E'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_E, UNDEFINED));", "+        ", "+         // Type 'D'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'D'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+      }", "+    });", "+//    System.err.println(\"Document = '\" + _doc.getText() + \"'\");", "+//    System.err.println(\"docLength = \" +  _doc.getLength() + \" caretPos = \" + _pane.getCaretPosition());", "+    ", "+//    System.err.println(\"Document = '\" + _doc.getText() + \"'\");", "-    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(newPos + 1); } });", "+    _pane.setCaretPosition(newPos + 1);", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        // Type 'D'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'D'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+      } ", "+    });", "-    _doc.insertText(newPos, \"d\", InteractionsDocument.DEFAULT_STYLE);", "-    Utilities.clearEventQueue();", "-    assertEquals(\"caret should be one char after the d\", newPos + 2, _pane.getCaretPosition());", "+    assertEquals(\"caret should be one char after the inserted D\", newPos + 2, _pane.getCaretPosition());"]}], "num": 12955}
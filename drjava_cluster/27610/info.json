{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4015b06ec4afc9c06e3e93d4eb2dfabf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09df0c282ac7b6af89b2b76edd0fb9bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r   public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */\r", "-  public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result) {\r", "-    if (left_result == null || right_result == null) {return null;}\r", "-    \r", "-    //make sure that both lhs and rhs could be resolved (not PackageDatas)\r", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {\r", "-      return null;\r", "-    }\r", "-\r", "-    \r", "-    if (!left_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);\r", "-    }\r", "-    else {\r", "-      assertInstanceType(left_result, \"The left side of this expression is a type, not an instance\", that);\r", "-    }\r", "-\r", "-    if (!right_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);\r", "-    }\r", "-    else {\r", "-      assertInstanceType(right_result, \"The right side of this expression is a type, not an instance\", that);\r", "-    }    \r", "-   \r", "-    return SymbolData.BOOLEAN_TYPE.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result) {", "+    if (left_result == null || right_result == null) {return null;}", "+    ", "+    //make sure that both lhs and rhs could be resolved (not PackageDatas)", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "+      return null;", "+    }", "+", "+    ", "+    if (!left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);", "+    }", "+    else {", "+      assertInstanceType(left_result, \"The left side of this expression is a type, not an instance\", that);", "+    }", "+", "+    if (!right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);", "+    }", "+    else {", "+      assertInstanceType(right_result, \"The right side of this expression is a type, not an instance\", that);", "+    }    ", "+   ", "+    return SymbolData.BOOLEAN_TYPE.getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d30fbfa48f06dff51e9b68b7bf7e34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "\r   public TypeData forArrayAccessOnly(ArrayAccess that, TypeData lhs, TypeData index)", "signatureAfterChange": "   public TypeData forArrayAccessOnly(ArrayAccess that, TypeData lhs, TypeData index)", "diff": ["- */\r", "-  public TypeData forArrayAccessOnly(ArrayAccess that, TypeData lhs, TypeData index) {\r", "-    //if either lhs or index is null then an error has already been caught--return null\r", "-    if (lhs == null || index == null) {return null;}\r", "-    \r", "-    //if either lhs or index cannot be resolved, give error\r", "-    if (!assertFound(lhs, that) || !assertFound(index, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    if (assertInstanceType(lhs, \"You cannot access an array element of a type name\", that) &&\r", "-        ! (lhs.getSymbolData() instanceof ArrayData)) {\r", "-      _addError(\"The variable referred to by this array access is a \" + lhs.getSymbolData().getName() + \", not an array\", that);\r", "-      return lhs.getInstanceData();\r", "-    }\r", "-    \r", "-    if (assertInstanceType(index, \"You have used a type name in place of an array index\", that) &&\r", "-        !index.getSymbolData().isAssignableTo(SymbolData.INT_TYPE, _targetVersion)) {\r", "-      _addError(\"You cannot reference an array element with an index of type \" + index.getSymbolData().getName() + \".  Instead, you must use an int\", that);\r", "-      \r", "-    }\r", "-    \r", "-    return ((ArrayData)lhs.getSymbolData()).getElementType().getInstanceData();\r", "-  \r", "-  \r", "-}\r", "+ */", "+  public TypeData forArrayAccessOnly(ArrayAccess that, TypeData lhs, TypeData index) {", "+    //if either lhs or index is null then an error has already been caught--return null", "+    if (lhs == null || index == null) {return null;}", "+    ", "+    //if either lhs or index cannot be resolved, give error", "+    if (!assertFound(lhs, that) || !assertFound(index, that)) {", "+      return null;", "+    }", "+    ", "+    if (assertInstanceType(lhs, \"You cannot access an array element of a type name\", that) &&", "+        ! (lhs.getSymbolData() instanceof ArrayData)) {", "+      _addError(\"The variable referred to by this array access is a \" + lhs.getSymbolData().getName() + \", not an array\", that);", "+      return lhs.getInstanceData();", "+    }", "+    ", "+    if (assertInstanceType(index, \"You have used a type name in place of an array index\", that) &&", "+        !index.getSymbolData().isAssignableTo(SymbolData.INT_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+      _addError(\"You cannot reference an array element with an index of type \" + index.getSymbolData().getName() + \".  Instead, you must use an int\", that);", "+      ", "+    }", "+    ", "+    return ((ArrayData)lhs.getSymbolData()).getElementType().getInstanceData();", "+  ", "+  ", "+}"]}], "num": 27610}
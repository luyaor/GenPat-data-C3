{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7382aa2efb890d691c03f2f3e2941e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5065221d661eed71c1c98a16de536874", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "362905f63dbb4da65eed4f6ca60b6ce9eca3dd7d", "commitAfterChange": "3850150af41978c240def27dca112da787cdab55", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "   private void _setupInteractionsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupInteractionsPanel(ConfigPanel panel)", "diff": ["+    final DirectoryOptionComponent wdComponent =", "+      new DirectoryOptionComponent(OptionConstants.FIXED_INTERACTIONS_DIRECTORY,", "+                                   \"Interactions Working Directory\", this,", "+                                   \"<html>Working directory for the Interactions Pane (unless<br>\"+", "+                                   \"a project working directory has been set).</html>\",", "+                                   _dirChooser);", "+    addOptionComponent(panel, wdComponent);", "+    final BooleanOptionComponent stickyComponent = ", "+      new BooleanOptionComponent(OptionConstants.STICKY_INTERACTIONS_DIRECTORY,", "+                                 \"<html><p align=\\\"right\\\">\" + ", "+                                 StringOps.", "+                                   splitStringAtWordBoundaries(\"Restore last working directory of the Interactions pane on start up\",", "+                                                               33, \"<br>\", SEPS), this,", "+                                 \"<html>Whether to restore the last working directory of the Interaction pane on start up,<br>\" +", "+                                 \"or to always use the value of the \\\"user.home\\\" Java property<br>\"+", "+                                 \"(currently \"+System.getProperty(\"user.home\")+\").\");", "+    addOptionComponent(panel, stickyComponent);", "+    ", "+//    OptionComponent.ChangeListener wdListener = new OptionComponent.ChangeListener() {", "+//      public Object value(Object oc) {", "+//        File f = wdComponent.getComponent().getFileFromField();", "+//        boolean enabled = (f == null) || (f.equals(FileOps.NULL_FILE));", "+//        stickyComponent.getComponent().setEnabled(enabled);", "+//        return null;", "+//      }", "+//    };", "+//    wdListener.value(wdComponent);", "+    ", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "+      ", "-    addOptionComponent(panel, ", "-                       new BooleanOptionComponent(OptionConstants.STICKY_INTERACTIONS_DIRECTORY,", "-                                                  \"<html><p align=\\\"right\\\">\" + ", "-                                                  StringOps.", "-                                                    splitStringAtWordBoundaries(\"Restore last working directory of the Interactions pane on start up\",", "-                                                                                33, \"<br>\", SEPS), this,", "-                                                  \"<html>Whether to restore the last working directory of the Interaction pane on start up,<br>\" +", "-                                                  \"or to always use the value of the \\\"user.home\\\" Java property<br>\"+", "-                                                  \"(currently \"+System.getProperty(\"user.home\")+\").\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddd375e81400ee4bbf23cefee4c90dd0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "8958ac741e416ecbae85abc43f8b198196076bac", "commitAfterChange": "9fa6d06a5ecc75a8eda4a5bc78f492dd1b318059", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public static void saveFile(FileSaver fileSaver) throws IOException", "signatureAfterChange": "   public static void saveFile(FileSaver fileSaver) throws IOException", "diff": ["+    boolean tempFileUsed = true;", "-                                + backup.getAbsolutePath());", "+                                + backup.getAbsolutePath() + ", "+                              \"\\nIt may be possible to save by disabling file backups\\n\");", "-", "+    ", "+    //From this point forward, enclose in try...finally so that we can clean", "+    //up the temp file and restore the file from its backup.", "-  name.  This way, if writing fails in the middle, the old file is not", "-  lost. */", "-      fileSaver.saveTo(tempFile);", "-      if (!tempFile.renameTo(fileSaver.getTargetFile())){", "- throw new IOException(\"Save failed: Could not rename temp file \" +", "-         tempFile + \" to \" + file);", "+       name.  This way, if writing fails in the middle, the old file is not", "+       lost. */", "+      FileOutputStream fos;", "+      try {", "+        /* The next line will fail if we can't create the temp file.  This may mean that", "+         * the user does not have write permission on the directory the file they", "+         * are editing is in.  We may want to go ahead and try writing directly", "+         * to the target file in this case", "+         */", "+        fos = new FileOutputStream(tempFile);", "+      } catch (FileNotFoundException fnfe) {", "+        if (fileSaver.continueWhenTempFileCreationFails()){", "+          fos = new FileOutputStream(file);", "+          tempFileUsed = false;", "+        } else {", "+          throw new IOException(\"Could not create temp file \" + tempFile +", "+                                \" in attempt to save \" + file);", "+        }", "+      }", "+      BufferedOutputStream bos = new BufferedOutputStream(fos);", "+      fileSaver.saveTo(bos);", "+      bos.close();", "+      if (tempFileUsed && !tempFile.renameTo(fileSaver.getTargetFile())){", "+        throw new IOException(\"Save failed: Could not rename temp file \" +", "+                              tempFile + \" to \" + file);", "-    } finally{", "-      if (makeBackup){", "- /* On failure, attempt to move the backup back to its original location if we", "-    made one.  On success, register that a backup was successfully made */", "- if (success){", "-   fileSaver.backupDone();", "- } else {", "-   backup.renameTo(file);", "- }", "+    } finally {", "+      if (makeBackup) {", "+        /* On failure, attempt to move the backup back to its original location if we", "+         made one.  On success, register that a backup was successfully made */", "+        if (success) {", "+          fileSaver.backupDone();", "+        } else {", "+          backup.renameTo(file);", "+        }"]}], "num": 25783}
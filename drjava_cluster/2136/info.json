{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7035b2a6141a483f7480f1832df529c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852cb496e1929c221a389cd330e7026f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 280, "signatureBeforeChange": "   public static <T1, T2, T3, T4> Runnable4<T1, T2, T3, T4>      asRunnable(final Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ?> lambda)", "signatureAfterChange": "   public static <T1, T2, T3, T4>      Runnable4<T1, T2, T3, T4> asRunnable(Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ?> lambda)", "diff": ["-  /** @return  A runnable that executes the given lambda (ignoring the result) */", "-  public static <T1, T2, T3, T4> Runnable4<T1, T2, T3, T4> ", "-    asRunnable(final Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ?> lambda) {", "-    return new Runnable4<T1, T2, T3, T4>() { ", "-      public void run(T1 a1, T2 a2, T3 a3, T4 a4) { lambda.value(a1, a2, a3, a4); }", "-    };", "-  }", "+  /** Create a runnable that executes the given lambda (ignoring the result). */", "+  public static <T1, T2, T3, T4> ", "+    Runnable4<T1, T2, T3, T4> asRunnable(Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ?> lambda) {", "+    return new LambdaRunnable4<T1, T2, T3, T4>(lambda);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "995fafeeb11433b387e6101423db00f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/AbstractRelation.java", "commitBeforeChange": "811484bb0f3e9c6a234bb593ba7247f59304a444", "commitAfterChange": "d3ca8d30db126f3de1352627e18f51d00a1bf339", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public boolean contains(Object o)", "signatureAfterChange": "   public abstract boolean contains(Object obj);", "diff": ["+  public abstract boolean contains(T1 first, T2 second);", "+  public abstract boolean contains(Object obj);", "-  /** Invokes {@link #containsObjects} if the argument is a pair. */", "-  public boolean contains(Object o) {", "-    if (o instanceof Pair<?, ?>) {", "-      Pair<?, ?> p = (Pair<?, ?>) o;", "-      return containsObjects(p.first(), p.second());", "-    }", "-    else { return false; }", "-  }"]}], "num": 2136}
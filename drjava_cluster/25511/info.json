{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1facd2fb8c0a24caa48dcd5e460e60b0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b500dec4648b8ec74e4ee20e17d618ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 22, "signatureBeforeChange": "          private synchronized void kickOut(boolean save)", "signatureAfterChange": "         private void kickOut(boolean isClosing)", "diff": ["-    ", "-    private synchronized void kickOut(boolean save) {", "+   ", "+    private void kickOut(boolean isClosing) {", "+//      Utilities.showDebug(\"kickOut(\" + isClosing + \") called on \" + this);", "+      if (! isClosing) {", "+        /* virtualize this document */", "+//        Utilities.showDebug(\"Virtualizing \" + _doc);", "+        _rec.saveDocInfo(_doc);", "+      }", "-        if (save) _rec.saveDocInfo(_doc);", "-        _doc.close();", "+        _doc.close();  // done elsewhere when isClosing is true?", "-      _stat = NOT_IN_LRU;", "+      _stat = NOT_IN_QUEUE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c427061c346e0e288c00bc92ead6ae77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void junitJVMReady()", "signatureAfterChange": "   public void junitJVMReady()", "diff": ["-   */", "+  /** Called when the JVM used for unit tests has registered. */", "-    if (_isTestInProgress) {", "-      JUnitError[] errors = new JUnitError[1];", "-      errors[0] = new JUnitError(\"Previous test was interrupted\", true, \"\");", "-      _junitErrorModel = new JUnitErrorModel(errors, _getter, true);", "-      ", "-      synchronized(this) { // make sure junitStarted isn't being called", "-        _isTestInProgress = false;", "-        _notifier.junitEnded();", "-      }", "-    }", "+    synchronized (this) { if (! _testInProgress) return; }", "+    JUnitError[] errors = new JUnitError[1];", "+    errors[0] = new JUnitError(\"Previous test was interrupted\", true, \"\");", "+    _junitErrorModel = new JUnitErrorModel(errors, _getter, true);", "+    _notifier.junitEnded();", "+    synchronized (this) { _testInProgress = false; }"]}], "num": 25511}
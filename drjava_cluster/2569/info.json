{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab69e1eb190d8e7f9ecb49fd77680766", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c5e6ddf89337b592fe57cc80df5f67e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "diff": ["-    File file;", "-    try                           { file = doc.getFile(); } ", "-    catch(FileMovedException fme) { file = fme.getFile(); }", "-    ", "-    String path = \"\";", "-    try { path = file.getCanonicalPath(); }", "-    catch(IOException e) { throw new UnexpectedException(e); }", "+    File file = doc.getRawFile();", "+    if (file == null) return;  // Should never happen unless doc is Untitled.", "+    String path = FileOps.getCanonicalPath(file);", "-        try { ", "-          if (it.next().getCanonicalPath().equals(path)) {", "-            it.remove();", "-            setProjectChanged(true);", "-            break;", "-          }", "-        } ", "-        catch(IOException e) { /* Ignore f */ }", "-      }", "+        if (path.equals(FileOps.getCanonicalPath(it.next()))) {", "+          it.remove();", "+          setProjectChanged(true);", "+          break;", "+        }", "+      } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84a30676d3b0e24696f82e7e060e9652", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public synchronized void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "diff": ["-  public synchronized void removeAuxiliaryFile(OpenDefinitionsDocument doc){", "+  public void removeAuxiliaryFile(OpenDefinitionsDocument doc){", "-    } catch(FileMovedException fme){", "+    } catch(FileMovedException fme) {", "-    LinkedList<File> newAuxiliaryFiles = new LinkedList<File>();  ", "-    for(File f: _auxiliaryFiles){", "-      try{", "-        if (!f.getCanonicalPath().equals(file.getCanonicalPath())) {", "-          newAuxiliaryFiles.add(f);", "-        }", "-      } catch(IOException e){", "-        // noop", "+    String path = \"\";", "+    try {", "+      path = file.getCanonicalPath();", "+    }", "+    catch(IOException e) { throw new UnexpectedException(e); }", "+    ", "+    synchronized (_auxiliaryFiles) {", "+      ListIterator<File> it = _auxiliaryFiles.listIterator();", "+      while (it.hasNext()) {", "+        try { ", "+          if (it.next().getCanonicalPath().equals(path)) {", "+            it.remove();", "+            setProjectChanged(true);", "+            break;", "+          }", "+        } ", "+        catch(IOException e) { /* Ignore f */ }", "-    _auxiliaryFiles = newAuxiliaryFiles;", "-    setProjectChanged(true);"]}], "num": 2569}
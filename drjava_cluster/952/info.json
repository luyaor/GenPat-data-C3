{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b097f328c35532c410a95a500d6ba0da", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "556d70cb105164c6efd7f50f1d78fdd3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOptionTest.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testGetName()", "signatureAfterChange": "      public void testGetName()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      KeyStrokeOption io1 = new KeyStrokeOption(\"indent_size\",null);", "-      KeyStrokeOption io2 = new KeyStrokeOption(\"max_files\",null);", "-      ", "-      assertEquals(\"indent_size\", io1.getName());", "-      assertEquals(\"max_files\",   io2.getName());", "-    }", "+    KeyStrokeOption io1 = new KeyStrokeOption(\"indent_size\",null);", "+    KeyStrokeOption io2 = new KeyStrokeOption(\"max_files\",null);", "+    ", "+    assertEquals(\"indent_size\", io1.getName());", "+    assertEquals(\"max_files\",   io2.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc010ce9c8f46139ab96285316e05afc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/tuple/TupleTest.java", "commitBeforeChange": "e490c351e810c170e9a54bc18f1c5b2e0028d6c4", "commitAfterChange": "13af1d4637272a2bca0732db4100c8afaf72a24e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void OptionTest()", "signatureAfterChange": "      public void OptionTest()", "diff": ["-    try { Option.unwrap(o1, new RuntimeException(\"custom exception\")); fail(\"No exception on unwrap\"); }", "-    catch (RuntimeException e) { assertEquals(\"custom exception\", e.getMessage()); }", "-    assertSame(\"foo\", Option.unwrap(o2, new RuntimeException()));", "+    ", "+    try { o1.unwrap(); fail(\"No exception on unwrap\"); }", "+    catch (OptionUnwrapException e) { /* expected behavior */ }", "+    assertSame(\"bar\", o1.unwrap(\"bar\"));", "+    ", "+    assertSame(\"foo\", o2.unwrap());", "+    assertSame(\"foo\", o2.unwrap(\"bar\"));"]}], "num": 952}
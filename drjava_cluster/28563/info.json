{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5eb3b5c0319b914c6d6ed39ef5607535", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c3c63fa9acabb1a4ebe7bbaaf0d006a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/StickyClassLoader.java", "commitBeforeChange": "1b1a2ff927caf38a8f2ba21780232fcbeb4319bb", "commitAfterChange": "5c8f8bcfea00ac2a7a7056ed42a62e0516896606", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected Class loadClass(String name, boolean resolve)    throws ClassNotFoundException", "signatureAfterChange": "   protected Class loadClass(String name, boolean resolve)      throws ClassNotFoundException", "diff": ["-  throws ClassNotFoundException", "+    throws ClassNotFoundException", "-      clazz = getSystemClassLoader().loadClass(name);", "+      try {", "+        clazz = getSystemClassLoader().loadClass(name);", "+      }", "+      catch (ClassNotFoundException e) {", "+        // It might be a non-system class, like javax.mail.*.", "+        //  Fall back on the secondary loader.", "+        clazz = _loadWithSecondary(name);", "+      }", "+      // Don't fall back to secondary if this fails...", "-      // we get the data using getResource because if we just delegate", "-      // the call to loadClass on old or new loader, it will use that", "-      // loader as the associated class loader for the class. that's bad.", "-      try {", "-        String fileName = name.replace('.', '/') + \".class\";", "-", "-        URL resource = getResource(fileName);", "-        if (resource == null) {", "-          throw new ClassNotFoundException(\"Resource not found: \" + fileName);", "-        }", "-", "-        byte[] data = FileOps.readStreamAsBytes(resource.openStream());", "-        try {", "-          clazz = defineClass(name, data, 0, data.length);", "-        }", "-        catch (Error t) {", "-          /*", "-          System.err.println(\"Sticky \" + this + \" error when loading \" + name +", "-                             \" with resolve=\" + resolve + \":\");", "-          */", "-          //t.printStackTrace();", "-          throw t;", "-        }", "-      }", "-      catch (IOException ioe) {", "-        throw new ClassNotFoundException(ioe.toString());", "-      }", "+      // Load with the secondary loader", "+      clazz = _loadWithSecondary(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c435010ee77b00df69ed50f3b2f7ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/CustomSystemClassLoader.java", "commitBeforeChange": "701cda038bdbb4505f738d5f2728e5888b8608b3", "commitAfterChange": "a2c3a24c2af61d289658b8fde0de718a948c97d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Class<?> loadClass(String name) throws ClassNotFoundException", "signatureAfterChange": "   public Class<?> loadClass(String name) throws ClassNotFoundException", "diff": ["-      }else if(fileName.startsWith(\"edu/rice/cs/util/newjvm/SlaveJVMRunner.class\")){", "+      }", "+      else if(fileName.startsWith(\"edu/rice/cs/util/newjvm/SlaveJVMRunner.class\")){", "-        try {", "-          return defineClass(name, data, 0, data.length);", "-        }", "-        catch (Error t) {", "-          throw t;", "-        }", "+        try { return defineClass(name, data, 0, data.length); }", "+        catch (Error t) { throw t; }", "-    }catch(ClassNotFoundException e){", "-      // the system couldn't find it, so let's try something else", "-    }catch(IOException e){", "-      // the system couldn't find it, so let's try something else", "+    catch(ClassNotFoundException e) { /* the system couldn't find it, so let's try something else */ }", "+    catch(IOException e) { /* the system couldn't find it, so let's try something else */ }", "-    try{", "-      if(_master != null){", "+    try {", "+      if (_master != null) {", "-        }else{", "-          byte[] data = FileOps.readStreamAsBytes(resource.openStream());", "-          try {", "-            return defineClass(name, data, 0, data.length);", "-          }", "-          catch (Error t) {", "-            throw t;", "-          }", "-      }else{", "-        throw new ClassNotFoundException();", "+        else {", "+          byte[] data = FileOps.readStreamAsBytes(resource.openStream());", "+          try { return defineClass(name, data, 0, data.length); }", "+          catch (Error t) { throw t; }", "+        }", "-    }catch(RemoteException e){", "-      throw new ClassNotFoundException();", "-    }catch(IOException e){", "-      throw new ClassNotFoundException();", "+      else throw new ClassNotFoundException();", "+    catch(RemoteException e) { throw new ClassNotFoundException(); }", "+    catch(IOException e) { throw new ClassNotFoundException(); }"]}], "num": 28563}
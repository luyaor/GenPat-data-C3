{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41e7b11a82ec8a33b58be9081148b2aa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e40e3edf51d1a6e6d93418067d7fb03", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void testInteractionsHistoryStoredCorrectly() throws EditDocumentException", "signatureAfterChange": "   public void testInteractionsHistoryStoredCorrectly() throws EditDocumentException", "diff": ["-    final String code = \"public class A {\\n\";", "+    String code = \"public class A {\\n\";", "-    final InteractionsDocument doc = _model.getDocument();", "+    InteractionsDocument doc = _model.getDocument();", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        doc.insertText(doc.getLength(), code, InteractionsDocument.DEFAULT_STYLE);", "-        _model.interpretCurrentInteraction();", "-      }", "-    });", "+    doc.insertText(doc.getLength(), code, InteractionsDocument.DEFAULT_STYLE);", "+    _model.interpretCurrentInteraction();", "+    Utilities.clearEventQueue();", "-    final String code1 = \"}\\n\";", "+    code = \"}\\n\";", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        doc.insertText(doc.getLength(), code1, InteractionsDocument.DEFAULT_STYLE);", "-        _model.interpretCurrentInteraction();", "-        _model.replReturnedVoid();", "-      }", "-    });", "+    doc.insertText(doc.getLength(), code, InteractionsDocument.DEFAULT_STYLE);", "+    Utilities.clearEventQueue();", "+    ", "+    synchronized(_lock) {", "+      _model.interpretCurrentInteraction();", "+      _model.replReturnedVoid();", "+    }", "-    assertEquals(\"Current interaction should not be there - should have interpreted\", \"\", doc.getCurrentInteraction());", "-    assertEquals(\"History should contain one interaction\", 1, h.size());", "+    synchronized(_lock) {", "+      assertEquals(\"Current interaction should not be there - should have interpreted\", \"\", doc.getCurrentInteraction());", "+      assertEquals(\"History should contain one interaction\", 1, h.size());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7c2715c5abd47563babaf99018980e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 33, "signatureBeforeChange": "      public void testSaveAsExistsAndOpen() throws BadLocationException, IOException", "signatureAfterChange": "      public void testSaveAsExistsAndOpen() throws BadLocationException, IOException", "diff": ["+    OpenDefinitionsDocument doc1,doc2;", "+    final File file1,file2;", "-    final File file1 = tempFile(1);", "-    final OpenDefinitionsDocument doc1 = _model.getDocumentForFile(file1);", "+    file1 = tempFile(1);", "+    doc1 = _model.getDocumentForFile(file1);", "-    saveFileAs(doc1, new FileSelector(file1));", "+    doc1.saveFileAs(new FileSelector(file1));", "-    final File file2 = tempFile(2);", "-    final OpenDefinitionsDocument doc2 = _model.getDocumentForFile(file2);", "+    file2 = tempFile(2);", "+    doc2 = _model.getDocumentForFile(file2);", "-    Utilities.invokeAndWait(new Runnable() {", "-      public void run() { ", "-        try { ", "-          doc2.saveFileAs(new WarningFileSelector(file1));", "-          fail(\"Did not warn of open file as expected\");", "-        }", "-        catch (Exception e) { /* Good behavior for file saving ... */ }", "-      }", "-    });", "+    try {", "+      doc2.saveFileAs(new WarningFileSelector(file1));", "+      fail(\"Did not warn of open file as expected\");", "+    }", "+    catch (OpenWarningException e) { /* Good behavior for file saving ... */ }"]}], "num": 28332}
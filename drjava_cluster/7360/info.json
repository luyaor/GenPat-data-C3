{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "304e8112e54ba6f8811078ba3e865fdc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464e9569be4b8ad0cba344bb1c819b59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected void loadClass(String name) throws ClassNotFoundException", "signatureAfterChange": "   protected void loadClass(String name) throws ClassNotFoundException", "diff": ["-     */", "-    protected void loadClass(String name) throws ClassNotFoundException {", "-\tif (classPool.contains(name)) {", "-\t    return;", "-\t}", "-", "-\t// Is there a tree associated with this name ?", "-\tTypeDeclaration td = classLoader.getTree(name);", "-\tif (td != null) {", "-\t    ImportationManager im = (ImportationManager)td.getProperty", "-\t\t(NodeProperties.IMPORTATION_MANAGER);", "-\t    Context ctx = new GlobalContext(interpreter, classInfoLoader);", "-\t    im.setClassLoader(classInfoLoader);", "-\t    ctx.setImportationManager(im);", "-\t    ClassFinder cfinder = new TreeClassFinder(ctx,", "-\t\t\t\t\t\t      interpreter,", "-\t\t\t\t\t\t      classPool);", "-\t    classPool.add(name, new TreeClassInfo(td, cfinder));", "-\t    return;", "-\t}", "-", "-\t// Is the class tree already loaded ?", "-\tLibraryFinder lf = interpreter.getLibraryFinder();", "-\ttry {", "-\t    String cun = lf.findCompilationUnitName(name);", "-\t    td = classLoader.getTree(cun);", "-\t    if (td != null) {", "-\t\tImportationManager im = (ImportationManager)td.getProperty", "-\t\t    (NodeProperties.IMPORTATION_MANAGER);", "-\t\tContext ctx = new GlobalContext(interpreter, classInfoLoader);", "-\t\tim.setClassLoader(classInfoLoader);", "-\t\tctx.setImportationManager(im);", "-\t\tClassFinder cfinder = new TreeClassFinder(ctx,", "-\t\t\t\t\t\t\t  interpreter,", "-\t\t\t\t\t\t\t  classPool);", "-\t\tclassPool.add(cun, new TreeClassInfo(td, cfinder));", "-\t\treturn;", "-\t    }", "-\t} catch (ClassNotFoundException e) {", "-\t}", "-", "-\ttry {", "-\t    File f = lf.findCompilationUnit(name);", "-\t    FileInputStream fis = new FileInputStream(f);", "-", "-\t    ParserFactory pf = interpreter.getParserFactory();", "-\t    SourceCodeParser p = pf.createParser(fis, f.getCanonicalPath());", "-\t    List stmts = p.parseCompilationUnit();", "-", "-\t    Iterator it = stmts.iterator();", "-\t    Visitor  v  = new CompilationUnitVisitor();", "-\t    while (it.hasNext()) {", "-\t\t((Node)it.next()).acceptVisitor(v);", "-\t    }", "-\t} catch (IOException e) {", "-\t    throw new ClassNotFoundException(name);", "-\t}", "+   */", "+  protected void loadClass(String name) throws ClassNotFoundException {", "+    if (classPool.contains(name)) {", "+      return;", "+    ", "+    // Is there a tree associated with this name ?", "+    TypeDeclaration td = classLoader.getTree(name);", "+    if (td != null) {", "+      ImportationManager im = (ImportationManager)td.getProperty", "+        (NodeProperties.IMPORTATION_MANAGER);", "+      Context ctx = new GlobalContext(interpreter, classInfoLoader);", "+      im.setClassLoader(classInfoLoader);", "+      ctx.setImportationManager(im);", "+      ClassFinder cfinder = new TreeClassFinder(ctx,", "+                                                interpreter,", "+                                                classPool);", "+      classPool.add(name, new TreeClassInfo(td, cfinder));", "+      return;", "+    ", "+    // Is the class tree already loaded ?", "+    LibraryFinder lf = interpreter.getLibraryFinder();", "+    try {", "+      String cun = lf.findCompilationUnitName(name);", "+      td = classLoader.getTree(cun);", "+      if (td != null) {", "+        ImportationManager im = (ImportationManager)td.getProperty", "+          (NodeProperties.IMPORTATION_MANAGER);", "+        Context ctx = new GlobalContext(interpreter, classInfoLoader);", "+        im.setClassLoader(classInfoLoader);", "+        ctx.setImportationManager(im);", "+        ClassFinder cfinder = new TreeClassFinder(ctx,", "+                                                  interpreter,", "+                                                  classPool);", "+        classPool.add(cun, new TreeClassInfo(td, cfinder));", "+        return;", "+      }", "+    } catch (ClassNotFoundException e) {", "+    ", "+    try {", "+      File f = lf.findCompilationUnit(name);", "+      FileInputStream fis = new FileInputStream(f);", "+      ", "+      ParserFactory pf = interpreter.getParserFactory();", "+      SourceCodeParser p = pf.createParser(fis, f.getCanonicalPath());", "+      List<Node> stmts = p.parseCompilationUnit();", "+      ", "+      Iterator<Node> it = stmts.iterator();", "+      CompilationUnitVisitor v  = new CompilationUnitVisitor();", "+      while (it.hasNext()) {", "+        it.next().acceptVisitor(v);", "+      }", "+    } catch (IOException e) {", "+      throw new ClassNotFoundException(name);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5331bbbd637e487210bf30f54d877e4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5e43ed9b0ccc485edbf101000ea86b2ab5a8036f", "commitAfterChange": "1aafd33bee421dfc8c5f72d0c8fbfbf4f1acd534", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Class visit(ObjectMethodCall node)", "signatureAfterChange": "   public Class visit(ObjectMethodCall node)", "diff": ["-      List args = node.getArguments();", "+      List<Expression> args = node.getArguments();", "-        Iterator it = args.iterator();", "+        Iterator<Expression> it = args.iterator();", "-          cargs[i++] = ((Node)it.next()).acceptVisitor(this);", "+          cargs[i++] = it.next().acceptVisitor(this);", "-      } catch (NoSuchMethodException e) {", "+      } ", "+      catch (NoSuchMethodException e) {", "-      } catch (MethodModificationError e) {", "+      } ", "+      catch (MethodModificationError e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f6277329f56fcc1f51e6181712b00e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void migrateNavigatorItems(IDocumentNavigator child, IDocumentNavigator parent)", "signatureAfterChange": "     private void migrateNavigatorItems(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent)", "diff": ["-    private void migrateNavigatorItems(IDocumentNavigator child, IDocumentNavigator parent) {", "-      Enumeration<INavigatorItem> enumerator =  parent.getDocuments();", "+    // long as it extends ItemT.", "+    private void migrateNavigatorItems(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent) {", "+      Enumeration<ItemT> enumerator =  parent.getDocuments();", "-        INavigatorItem navitem = enumerator.nextElement();", "+        ItemT navitem = enumerator.nextElement();", "-        enumerator = parent.getDocuments();", "+        ", "+        // I don't understand the motivation behind this line.  Is it possible for", "+        // enumerator to become invalid?  If so, what's to prevent that from happening", "+        // again after this line but before we call nextElement()?", "+        enumerator = parent.getDocuments(); "]}], "num": 7360}
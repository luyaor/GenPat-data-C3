{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c774fc9dbb870e3acb68d2559fb2036", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a7ae2e9643ac5bb2ee33f2bccc49571", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public PreviewFrame(SingleDisplayModel model, MainFrame mainFrame, boolean interactions)     throws IllegalStateException", "signatureAfterChange": "   public PreviewFrame(SingleDisplayModel model, MainFrame mainFrame, boolean interactions)      throws IllegalStateException", "diff": ["-   */", "-  public PreviewFrame(SingleDisplayModel model, MainFrame mainFrame, boolean interactions)", "+  /** Contructs a new PreviewFrame using a parent model and a Pageable object print to show. */", "+  public PreviewFrame(SingleDisplayModel model, MainFrame mainFrame, boolean interactions) ", "+    ", "+    /* Initialize constants. */", "+    PageFormat first = _print.getPageFormat(0);", "+", "+    PREVIEW_PAGE_WIDTH = (int) (PAGE_ZOOM * first.getWidth());", "+    PREVIEW_PAGE_HEIGHT = (int) (PAGE_ZOOM * first.getHeight());", "+", "+    PREVIEW_WIDTH = PREVIEW_PAGE_WIDTH + (2 * PAGE_BORDER);", "+    PREVIEW_HEIGHT = PREVIEW_PAGE_HEIGHT + (2 * PAGE_BORDER) + TOOLBAR_HEIGHT;", "-    _setUpConstants();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ed3ac7e70a99bd39aa1405f5a235c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "commitAfterChange": "fbbca8c38fe9b7414801b8eeb32f639f83abb9c9", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": "     public void caretUpdate(final CaretEvent ce)", "signatureAfterChange": "     public void caretUpdate(final CaretEvent ce)", "diff": ["-    // The following method does not need to run in the event thread", "-    public void caretUpdate(final CaretEvent ce) { updateLocation(); }", "+    // The following method only runs in the event thread because it is called from DefinitionsPane", "+    public void caretUpdate(final CaretEvent ce) {", "+      OpenDefinitionsDocument doc = _model.getActiveDocument();", "+      int offset = ce.getDot();", "+      Element root = doc.getDefaultRootElement();", "+      int line = root.getElementIndex(offset);", "+      int col = offset - root.getElement(line).getStartOffset();", "+      updateLocation(line + 1, col);  // line numbers are 1-based", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb4671fee08c9f80157de40f98f58f9b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/LineEnumRule.java", "commitBeforeChange": "4e444cf3e45665116a56b367a272fb6465e0e2ab", "commitAfterChange": "4cc061cda0dcd0210fc21018c1746064dc52e5d0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void paintComponent(Graphics g)", "signatureAfterChange": "   public void paintComponent(Graphics g)", "diff": ["+    final OpenDefinitionsDocument odd = _pane.getOpenDefDocument();", "+    final int endOffset = odd.getEndPosition().getOffset()-1;", "+    int lastLine = odd.getDefaultRootElement().getElementIndex(endOffset);", "+", "+    if (odd.getLineStartPos(endOffset)!=odd.getLineEndPos(endOffset)) { ++lastLine; }", "-      String text = Integer.toString(i/_increment +1);", "+      final int lineNo = i/_increment +1;", "+      if (lineNo>lastLine) break;", "+      String text = Integer.toString(lineNo);"]}], "num": 19836}
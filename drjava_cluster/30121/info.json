{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d919352e0bbfcc9fca4b81bd2ac6d12", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2fb68b96fb32daec61c5ff3e6227db4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  private Object visitType(TypeDeclaration node)", "signatureAfterChange": "     private Boolean visitType(TypeDeclaration node)", "diff": ["+     */", "+    private Boolean visitType(TypeDeclaration node) {", "+      String cname = importationManager.getCurrentPackage();", "+      cname = ((cname.equals(\"\")) ? \"\" : cname + \".\" ) + node.getName();", "+      classLoader.addTree(cname, node);", "+      node.setProperty(NodeProperties.IMPORTATION_MANAGER, importationManager);", "+      if (className.equals(cname)) {", "+        return Boolean.TRUE;", "+      } else {", "+        MembersVisitor v = new MembersVisitor(cname);", "+        Iterator<Node> it = node.getMembers().iterator();", "+        while (it.hasNext()) {", "+          Boolean b = it.next().acceptVisitor(v);", "+          if (b.booleanValue()) return Boolean.TRUE;", "+        }", "+        return Boolean.FALSE;", "+      }", "+    }", "-  */", "- private Object visitType(TypeDeclaration node) {", "-     String cname = importationManager.getCurrentPackage();", "-     cname = ((cname.equals(\"\")) ? \"\" : cname + \".\" ) + node.getName();", "-     classLoader.addTree(cname, node);", "-     node.setProperty(NodeProperties.IMPORTATION_MANAGER, importationManager);", "-     if (className.equals(cname)) {", "-  return Boolean.TRUE;", "-     } else {", "-  Visitor v = new MembersVisitor(cname);", "-  Iterator it = node.getMembers().iterator();", "-  while (it.hasNext()) {", "-      Boolean b = (Boolean)((Node)it.next()).acceptVisitor(v);", "-      if (Boolean.TRUE.equals(b)) {", "-   return b;", "-  }", "-  return Boolean.FALSE;", "-     }", "- }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e100eb9c4b628e2dcbead6720857a497", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "      private Object visitType(TypeDeclaration node)", "signatureAfterChange": "       private Boolean visitType(TypeDeclaration node)", "diff": ["-      */", "-     private Object visitType(TypeDeclaration node) {", "-  if (className.equals(outerName + \"$\" + node.getName())) {", "-      return Boolean.TRUE;", "-  } else {", "-      Visitor v = new MembersVisitor(outerName + \"$\" + node.getName());", "-      Iterator it = node.getMembers().iterator();", "-      while (it.hasNext()) {", "-   Boolean b = (Boolean)((Node)it.next()).acceptVisitor(v);", "-   if (Boolean.TRUE.equals(b)) {", "-       return b;", "-   }", "-      return Boolean.FALSE;", "-  }", "-     }", "+       */", "+      private Boolean visitType(TypeDeclaration node) {", "+        if (className.equals(outerName + \"$\" + node.getName())) {", "+          return Boolean.TRUE;", "+        } else {", "+          MembersVisitor v = new MembersVisitor(outerName + \"$\" + node.getName());", "+          Iterator<Node> it = node.getMembers().iterator();", "+          while (it.hasNext()) {", "+            Boolean b = it.next().acceptVisitor(v);", "+            if (b.booleanValue()) return Boolean.TRUE;", "+          }", "+          return Boolean.FALSE;", "+        }", "+      }"]}], "num": 30121}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "484fda86da5c3fcebcef7cd0eb3f3e97", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7254878a6074205d10526527b5424e0b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "01c3f064333cebc3d30c4b7ad99f0012d4daf0ff", "commitAfterChange": "3ae07c734e21c585f4b81ef537238b0207c86b68", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "   protected static Object performCast(Class<?> tc, Object o)", "signatureAfterChange": "   protected static Object performCast(Class<?> tc, Object o)", "diff": ["-    Class<?> ec = (o != null) ? o.getClass() : null;", "-", "-    if (tc != ec && tc.isPrimitive() && ec != null) {", "-      if (tc != char.class && ec == Character.class) {", "-        o = new Character(((Character)o).charValue());", "-      } ", "-      else if (tc == byte.class) {", "-        o = new Byte(((Number)o).byteValue());", "-      } ", "-      else if (tc == short.class) {", "-        o = new Short(((Number)o).shortValue());", "-      }", "-      else if (tc == int.class) {", "-        o = new Integer(((Number)o).intValue());", "-      }", "-      else if (tc == long.class) {", "-        o = new Long(((Number)o).longValue());", "-      }", "-      else if (tc == float.class) {", "-        o = new Float(((Number)o).floatValue());", "-      }", "-      else if (tc == double.class) {", "-        o = new Double(((Number)o).doubleValue());", "-      }", "-      else if (tc == char.class && ec != Character.class) {", "-        o = new Character((char)((Number)o).shortValue());", "-      }", "-    }", "-    return o;", "+    ", "+    if (o == null || !tc.isPrimitive()) return o;", "+    ", "+    /* oc is class of o */", "+    Class<?> oc = o.getClass();", "+      ", "+    if (oc == Character.class) ", "+      return performCast(tc, new Integer(((Character)o).charValue()));", "+    ", "+    else if (tc == byte.class) return new Byte(((Number)o).byteValue());", "+    ", "+    else if (tc == short.class) return new Short(((Number)o).shortValue());", "+    ", "+    else if (tc == int.class) return new Integer(((Number)o).intValue());", "+    ", "+    else if (tc == long.class) return new Long(((Number)o).longValue());", "+    ", "+    else if (tc == float.class) return new Float(((Number)o).floatValue());", "+    ", "+    else if (tc == double.class) return new Double(((Number)o).doubleValue());", "+    ", "+    else if (tc == char.class)", "+      return new Character((char)((Number)o).shortValue());", "+    ", "+    else return o;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fabeed5c46e6b513f08c3b0a4b6f6ab1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/InterpreterUtilities.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected static Object binaryArithmeticOperation(Class c, Object l, Object r, \t\t\t\t\t\t   BinaryArithmeticOperation o)", "signatureAfterChange": "   protected static Object binaryArithmeticOperation(Class c, Object l, Object r,                                                     BinaryArithmeticOperation o)", "diff": ["-     */", "-    protected static Object binaryArithmeticOperation(Class c, Object l, Object r,", "-\t\t\t\t\t\t   BinaryArithmeticOperation o) {", "-\tif (l instanceof Character) {", "-\t    l = new Integer(((Character)l).charValue());", "-\t}", "-\tif (r instanceof Character) {", "-\t    r = new Integer(((Character)r).charValue());", "-\t}", "-\tif (c == int.class) {", "-\t    return new Integer", "-\t\t(o.invoke(((Number)l).intValue(), ((Number)r).intValue()));", "-\t} else if (c == long.class) {", "-\t    return new Long", "-\t\t(o.invoke(((Number)l).longValue(), ((Number)r).longValue()));", "-\t} else if (c == float.class) {", "-\t    return new Float", "-\t\t(o.invoke(((Number)l).floatValue(), ((Number)r).floatValue()));", "-\t} else {", "-\t    return new Double", "-\t\t(o.invoke(((Number)l).doubleValue(), ((Number)r).doubleValue()));", "-\t}", "-    }", "+   */", "+  protected static Object binaryArithmeticOperation(Class c, Object l, Object r,", "+                                                    BinaryArithmeticOperation o) {", "+    if (l instanceof Character) {", "+      l = new Integer(((Character)l).charValue());", "+    if (r instanceof Character) {", "+      r = new Integer(((Character)r).charValue());", "+    ", "+    Number leftNum = (Number) l;", "+    Number rightNum = (Number) r;", "+    ", "+    if (c == int.class) {", "+      return new Integer(o.invoke(leftNum.intValue(), ", "+                                  rightNum.intValue()));", "+    } ", "+    else if (c == long.class) {", "+      return new Long(o.invoke(leftNum.longValue(), ", "+                               rightNum.longValue()));", "+    } ", "+    else if (c == float.class) {", "+      return new Float(o.invoke(leftNum.floatValue(), ", "+                                rightNum.floatValue()));", "+    } ", "+    else {", "+      return new Double(o.invoke(leftNum.doubleValue(), ", "+                                 rightNum.doubleValue()));", "+  }"]}], "num": 17646}
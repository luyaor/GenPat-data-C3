{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d66251844b039c2adcbc9d928bef8d3e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42da609d736cfa514abd73841d023ef3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void testBooleanBitwiseAnd()", "signatureAfterChange": "   public void testBooleanBitwiseAnd() throws ExceptionReturnedException", "diff": ["-  public void testBooleanBitwiseAnd() {", "-    Node exp = _parseCode(\"new Boolean(true) & new Boolean(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testBooleanBitwiseAnd() throws ExceptionReturnedException {", "+    String text = \"new Boolean(true) & new Boolean(false);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: true true boolean)])\";", "+    String expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)])\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94d56d1d649f2560d0b08c40fffb41cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public void testOringTwoBooleans()", "signatureAfterChange": "   public void testOringTwoBooleans() throws ExceptionReturnedException", "diff": ["-  public void testOringTwoBooleans() {", "-    Node exp = _parseCode(\"new Boolean(true) || new Boolean(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testOringTwoBooleans() throws ExceptionReturnedException {", "+    String text = \"new Boolean(true) || new Boolean(false);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: true true boolean)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}], "num": 30788}
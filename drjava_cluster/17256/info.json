{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfe44ec7625b73a230ad89b5856d4a7e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a66307bcc32313c352423ebb343e91e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 57, "signatureBeforeChange": "   private SymbolData _lookupFromClassesToBeParsed(String qualifiedClassName, SourceInfo si, boolean resolve)", "signatureAfterChange": "   public void anonymousClassInstantiationHelper(AnonymousClassInstantiation that, SymbolData enclosing, String superName)", "diff": ["-    */", "-  private SymbolData _lookupFromClassesToBeParsed(String qualifiedClassName, SourceInfo si, boolean resolve) {", "-    if (resolve) {", "-      Pair<TypeDefBase, LanguageLevelVisitor> p = _classesToBeParsed.get(qualifiedClassName);", "-      if (p == null) {", "-        // This occurs when a class depends upon another class in the same file that has a bogus super class.", "-        // Perhaps occurs elsewhere...?", "-        return null;", "-      }", "-      // Check for cyclic inheritance.", "-      TypeDefBase cd = p.getFirst();", "-      LanguageLevelVisitor llv = p.getSecond();", "-      cd.visit(llv);", "-      return symbolTable.get(qualifiedClassName);", "-    }", "-    else {", "-      // Return a continuation, since it shouldn't be in the symbolTable yet based on where we call this method from.", "-      // The visitor we pair here doesn't matter because it should always get removed from the continuations list before", "-      // it is visited.", "-//      System.err.println(\"Creating continuation for class to be parsed: \" + qualifiedClassName);", "-      SymbolData sd = addSymbolData(si, qualifiedClassName);", "-      return sd;", "-    }", "-  }", "+    */", "+  public void anonymousClassInstantiationHelper(AnonymousClassInstantiation that, SymbolData enclosing, String superName) {", "+    that.getArguments().visit(this);", "+    SymbolData enclosingSD = enclosing.getSymbolData();", "+    String enclosingSDName = enclosingSD.getName();", "+    assert enclosingSDName.equals(_enclosingClassName);", "+    String anonName = getQualifiedClassName(enclosingSDName) + \"$\" +  enclosingSD.preincrementAnonymousInnerClassNum();", "+    ", "+    System.err.println(\"****** In anonymousCIH the anonName = \" + anonName + \" superName = \" + superName ", "+                         + \" enclosing = \" + enclosing);", "+    ", "+    // Define the SymbolData that will correspond to this anonymous class", "+    SymbolData anonSD = defineAnonymousSymbolData(that, anonName, superName);", "+    ", "+//    if (this instanceof IntermediateVisitor) {", "+    // These methods are no-ops in FullJavaVisitor", "+    createToString(anonSD);", "+    createHashCode(anonSD);", "+    createEquals(anonSD);", "+    // Accessors will be filled in in typeChecker pass", "+//    }", "+    ", "+    // Visit the body (with the appropritate class body visitor to get it all nice and resolved.", "+    System.err.println(\"Calling appropriate class body visitor for \" + anonName);", "+    that.getBody().visit(newClassBodyVisitor(anonSD, anonName));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3dcca9ca9e92d00db6f93ad9caf5e62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-    for (int i = 0; i < rts.length; i++) {", "-      tempSd = getSymbolData(rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+    for (ReferenceType rt: rts) {", "+      tempSd = getSymbolData(rt.getName(), rt.getSourceInfo(), false, false, false);", "-      else if (qualifiedClassName.indexOf(\"$\") != -1) { // class is inner", "-        // check to see if this is an inner class referencing an inner interface", "-        String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-        tempSd = getSymbolData(qualifyingPart + \"$\" + rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+      else if (qualifiedClassName.indexOf(\".\") != -1) { // class is inner", "+        // Check to see if this is an inner class referencing an inner interface", "+        String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\".\"));", "+        tempSd = getSymbolData(qualifyingPart + \".\" + rt.getName(), rt.getSourceInfo(), false, false, false);", "-          tempSd = new SymbolData(qualifyingPart + \"$\" + rts[i].getName());", "+          String tempName = qualifyingPart + \".\" + rt.getName();", "+          tempSd = new SymbolData(tempName);", "-          continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));          ", "+//          System.err.println(\"Creating continuation for \" + tempName  + \" at LLV: 1144\");", "+          continuations.put(tempName, new Pair<SourceInfo, LanguageLevelVisitor>(rt.getSourceInfo(), this));          ", "-//        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "-//        // Couldn't resolve the interface.", "-        _log.log(\"CREATING continuation \" + rts[i].getName() + \" with SourceInfo \" + rts[i].getSourceInfo());", "-        continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));    ", "+        String tempName = rt.getName();", "+        _log.log(\"CREATING continuation \" + tempName + \" with SourceInfo \" + rt.getSourceInfo());", "+//        System.err.println(\"CREATING continuation for \" + tempName + \" at LLV: 1154\");", "+        tempSd = new SymbolData(tempName);", "+        tempSd.setInterface(true);", "+        continuations.put(tempName, new Pair<SourceInfo, LanguageLevelVisitor>(rt.getSourceInfo(), this));    ", "-        superClass = new SymbolData(superClassName);", "-        symbolTable.put(superClassName, sd);", "-        continuations.put(superClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "+        superClass = addSymbolData(si, superClassName);"]}], "num": 17256}
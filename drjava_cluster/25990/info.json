{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0ec06318bd226ef2b7b9b032c936aa7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d0d4359eed5d22ccc8bfe14031ea85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "015f584d4fd84a66059ace3c33a4092f1db5bd4c", "commitAfterChange": "d76a1ef24ee4d923e6ea3f06169ea8196ce68877", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 149, "signatureBeforeChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-    if (dir == null) return; // just in case", "-    if (dir.isDirectory()) {", "-      Iterable<File> filesIterable;", "-      ", "-      String extension = DrJavaRoot.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)];", "-      ", "-      Predicate<File> match = LambdaUtil.and(IOUtil.IS_FILE, IOUtil.extensionFilePredicate(extension));", "-      if (rec) { filesIterable = IOUtil.listFilesRecursively(dir, match); }", "-      else { filesIterable = IOUtil.attemptListFilesAsIterable(dir, match); }", "-      List<File> files = IterUtil.asList(filesIterable);", "-      ", "-      if (isProjectActive()) {", "-        Collections.sort(files, new Comparator<File>() {", "-          public int compare(File o1,File o2) {", "-            return - o1.getAbsolutePath().compareTo(o2.getAbsolutePath());", "-          }", "-        });", "-      }", "-      else {", "-        Collections.sort(files, new Comparator<File>() {", "-          public int compare(File o1,File o2) {", "-            return - o1.getName().compareTo(o2.getName());", "-          }", "-        });", "-      }", "-      ", "-      int ct = files.size();", "-      ", "-      final File[] sfiles = files.toArray(new File[ct]);", "-      ", "-      openFiles(new FileOpenSelector() { public File[] getFiles() { return sfiles; } });", "-      ", "-      if (ct > 0 && _state.inProjectPath(dir)) setProjectChanged(true);", "+    final File[] sfiles =  getFilesInFolder(dir, rec); ", "+    if(sfiles == null) return;", "+    openFiles(new FileOpenSelector() { public File[] getFiles() { return sfiles; } });", "+    ", "+    if (sfiles.length > 0 && _state.inProjectPath(dir)) setProjectChanged(true);", "+    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7907010ce53ac5fe526b462c8704b49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ab929f2517998893e7ac2a2baadc6213c733962b", "commitAfterChange": "0fe56dbec731a045fe28e9c5bc1a9260c7157f46", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 149, "signatureBeforeChange": "   public void openFolder(DirectorySelector openSelector)", "signatureAfterChange": "   public void openFolder(DirectorySelector openSelector)", "diff": ["+      ArrayList<File> files;", "-        final File[] files = getFilesInDir(dir, openSelector.isRecursive());", "+        files = FileOps.getFilesInDir(dir, openSelector.isRecursive(), new FileFilter(){", "+          public boolean accept(File f){ ", "+            return f.isDirectory() ||", "+              f.isFile() && ", "+              f.getName().endsWith(DrJava.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]);", "+          }", "+        });", "+        ", "+        if(_model.isProjectActive()){", "+          Collections.sort(files, new Comparator<File>(){", "+            public int compare(File o1,File o2){", "+              return - o1.getAbsolutePath().compareTo(o2.getAbsolutePath());", "+            }", "+            public boolean equals(Object o){", "+              return false;", "+            }", "+          });", "+        }else{", "+          Collections.sort(files, new Comparator<File>(){", "+            public int compare(File o1,File o2){", "+              return - o1.getName().compareTo(o2.getName());", "+            }", "+            public boolean equals(Object o){", "+              return false;", "+            }", "+          });", "+        }", "+        ", "+        final File[] sfiles = files.toArray(new File[0]);", "+        ", "-            return files;", "+            return sfiles;"]}], "num": 25990}
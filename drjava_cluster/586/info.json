{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7f99821ccd26c5d97b86da68a8004da", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97d5143fcab8f709cf7549b652961798", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "   public void testNoPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"no open brace\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"line of close brace (no open brace)\", !rule.applyRule(_doc, 7));", "-    assertTrue(\"line after close brace (no open brace)\", !rule.applyRule(_doc, 8));", "+    assertTrue(\"no open brace\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"line of close brace (no open brace)\", !rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"line after close brace (no open brace)\", !rule.applyRule(_doc, 8, Indenter.OTHER));", "-    assertTrue(\"no close brace\", !rule.applyRule(_doc, 0));", "+    assertTrue(\"no close brace\", !rule.applyRule(_doc, 0, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2d97b739b08433b96101abdf26c155f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testDoesNotStartWithPrefix() throws BadLocationException", "signatureAfterChange": "   public void testDoesNotStartWithPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"before brace\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"just before brace\", !rule.applyRule(_doc, 7));", "-    assertTrue(\"just after brace\", !rule.applyRule(_doc, 8));", "-    assertTrue(\"line after brace\", !rule.applyRule(_doc, 10));", "+    assertTrue(\"before brace\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"just before brace\", !rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"just after brace\", !rule.applyRule(_doc, 8, Indenter.OTHER));", "+    assertTrue(\"line after brace\", !rule.applyRule(_doc, 10, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16269fd91e995954f4c24b1b647e8d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testPrefixAtEnd() throws BadLocationException", "signatureAfterChange": "   public void testPrefixAtEnd() throws BadLocationException", "diff": ["-    assertTrue(\"first line\", !rule.applyRule(_doc, 3));", "-    assertTrue(\"end of first line\", !rule.applyRule(_doc, 12));", "-    assertTrue(\"beginning of second line\", rule.applyRule(_doc, 13));", "-    assertTrue(\"end of second line\", rule.applyRule(_doc, 14));", "+    assertTrue(\"first line\", !rule.applyRule(_doc, 3, Indenter.OTHER));", "+    assertTrue(\"end of first line\", !rule.applyRule(_doc, 12, Indenter.OTHER));", "+    assertTrue(\"beginning of second line\", rule.applyRule(_doc, 13, Indenter.OTHER));", "+    assertTrue(\"end of second line\", rule.applyRule(_doc, 14, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c0c00eaa9d802dfabf1cd59a1bd669", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testWSAfterBrace() throws BadLocationException", "signatureAfterChange": "      public void testWSAfterBrace() throws BadLocationException", "diff": ["-    assertTrue(\"START immediatly follows an open brace.\", _rule.applyRule(_doc, 14));     ", "-    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 15));     ", "-    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23));     ", "-    assertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25));     ", "+    assertTrue(\"START immediatly follows an open brace.\", _rule.applyRule(_doc, 14, Indenter.OTHER));", "+    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 15, Indenter.OTHER));", "+    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23, Indenter.OTHER));", "+    assertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5d49ac2ba81297b248938aaa63dee14", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testMultipleCharPrefix() throws BadLocationException", "signatureAfterChange": "   public void testMultipleCharPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"star\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"dot star\", !rule.applyRule(_doc, 2));", "-    assertTrue(\"dot star dot\", rule.applyRule(_doc, 7));", "-    assertTrue(\"dot star dot text\", rule.applyRule(_doc, 9));", "+    assertTrue(\"star\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"dot star\", !rule.applyRule(_doc, 2, Indenter.OTHER));", "+    assertTrue(\"dot star dot\", rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"dot star dot text\", rule.applyRule(_doc, 9, Indenter.OTHER));"]}], "num": 586}
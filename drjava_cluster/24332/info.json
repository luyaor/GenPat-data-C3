{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a99f6b6a3a90352db4aacad3005fc64", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b45ef329921e4f39af717e85dab8657", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": "     private void visitExpressionContainer(ExpressionContainer node)", "signatureAfterChange": "   private void visitExpressionContainer(ExpressionContainer node)", "diff": ["+   */", "+  private void visitExpressionContainer(ExpressionContainer node) {", "+    Expression exp = node.getExpression();", "+    Node o = exp.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,exp);", "+      node.setExpression((Expression)o);", "+    }", "+  }", "-     */", "-    private void visitExpressionContainer(ExpressionContainer node) {", "-\tExpression exp = node.getExpression();", "-\tObject o = exp.acceptVisitor(this);", "-\tif (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-\t\tthrow new ExecutionError(\"malformed.expression\", exp);", "-\t    }", "-\t    node.setExpression((Expression)o);", "-\t}", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a973ae9af31e6770e98263f6b0b87491", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/Brace.java", "commitBeforeChange": "d75bb4144501a8419376e0dc8dbe054c7511983f", "commitAfterChange": "a31b2c97ecb1660744788e96501356f9c0219d19", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean isMatch(ReducedToken other)", "signatureAfterChange": "   public boolean isMatch(Brace other)", "diff": ["-  public boolean isMatch(ReducedToken other) {", "-    if (! (other instanceof Brace)) return false;", "-    int otherType = ((Brace) other)._type;", "+  public boolean isMatch(Brace other) {", "-    return _type + off == otherType;", "+    return _type + off == other._type;"]}], "num": 24332}
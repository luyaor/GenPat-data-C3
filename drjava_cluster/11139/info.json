{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c765fd7c7f02a2bec22c43f9ae505dd7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c651821d3622dcf7f53c7879a6c3d5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void testPlusOperator()", "signatureAfterChange": "   public void testPlusOperator() throws ExceptionReturnedException", "diff": ["-  public void testPlusOperator() {", "-    Node exp = _parseCode(\"+new Double(10);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testPlusOperator() throws ExceptionReturnedException {", "+    String text = \"+new Double(10);\";", "+    String expected = \"(koala.dynamicjava.tree.ObjectMethodCall: doubleValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Double) [(koala.dynamicjava.tree.IntegerLiteral: 10 10 int)]))\";", "+", "+    _checkUnaryExpression(text, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa575a548337782155820522c32862a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public void testNegatingOneBoolean()", "signatureAfterChange": "   public void testNegatingOneBoolean() throws ExceptionReturnedException", "diff": ["-   */", "-  public void testNegatingOneBoolean() {", "-    Node exp = _parseCode(\"!new Boolean(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+   */", "+  public void testNegatingOneBoolean() throws ExceptionReturnedException {", "+    String text = \"!new Boolean(false);\";", "+    String expected = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)]))\";", "+", "+    _checkUnaryExpression(text, expected);"]}], "num": 11139}
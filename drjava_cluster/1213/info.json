{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "244d26f28385b981aee80c48138c793a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21157552f775831a859feb690eb946d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r   public void testSomeFilesCompiled()", "signatureAfterChange": "   public void testSomeFilesCompiled()", "diff": ["-   */\r", "-  public void testSomeFilesCompiled() {\r", "-    directory = new File(directory, \"someCompiled\");\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getName().equals(\"UseOtherClassAsField.dj0\") || pathName.getName().equals(\"SubClass.dj0\");\r", "-      }});\r", "-      \r", "-      LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      result = llc.convert(testFiles);\r", "-      \r", "-      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());\r", "-\r", "-      /**Now make sure that the resulting java files are correct.*/\r", "-      for(int i = 0; i < testFiles.length; i++) {\r", "-        File currFile = testFiles[i];\r", "-        String fileName = currFile.getAbsolutePath();\r", "-        fileName = fileName.substring(0, fileName.length() -4);\r", "-        File resultingFile = new File(fileName + \".java\");\r", "-        File correctFile = new File(fileName + \".expected\");\r", "-        \r", "-        try {\r", "-        assertEquals(\"File \" + currFile.getName() + \" should have been handled correctly\",\r", "-                     readFileAsString(correctFile),\r", "-                     readFileAsString(resultingFile));\r", "-        }\r", "-        catch (IOException ioe) {\r", "-          fail(ioe.getMessage());\r", "-          // let JUnit throw the exception\r", "-        }\r", "-      }\r", "-      \r", "-      /**And make sure that .java files did not get generated for the classes referenced from our test class.*/\r", "-      File superClass = new File(directory.getAbsolutePath() + \"SuperClass.java\");\r", "-      File classAsField = new File(directory.getAbsolutePath() + \"ClassAsField.java\");\r", "-      assertFalse(\"superClass.java should not exist\", superClass.exists());\r", "-      assertFalse(\"ClassAsField.java should not exist\", classAsField.exists());\r", "-      \r", "-  }\r", "+   */", "+  public void testSomeFilesCompiled() {", "+    directory = new File(directory, \"someCompiled\");", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getName().equals(\"UseOtherClassAsField.dj0\") || pathName.getName().equals(\"SubClass.dj0\");", "+      }});", "+      ", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      result = llc.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+      ", "+      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+", "+      /**Now make sure that the resulting java files are correct.*/", "+      for(int i = 0; i < testFiles.length; i++) {", "+        File currFile = testFiles[i];", "+        String fileName = currFile.getAbsolutePath();", "+        fileName = fileName.substring(0, fileName.length() -4);", "+        File resultingFile = new File(fileName + \".java\");", "+        File correctFile = new File(fileName + \".expected\");", "+        ", "+        try {", "+        assertEquals(\"File \" + currFile.getName() + \" should have been handled correctly\",", "+                     IOUtil.toString(correctFile),", "+                     IOUtil.toString(resultingFile));", "+        }", "+        catch (IOException ioe) {", "+          fail(ioe.getMessage());", "+          // let JUnit throw the exception", "+        }", "+      }", "+      ", "+      /**And make sure that .java files did not get generated for the classes referenced from our test class.*/", "+      File superClass = new File(directory.getAbsolutePath() + \"SuperClass.java\");", "+      File classAsField = new File(directory.getAbsolutePath() + \"ClassAsField.java\");", "+      assertFalse(\"superClass.java should not exist\", superClass.exists());", "+      assertFalse(\"ClassAsField.java should not exist\", classAsField.exists());", "+      ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a8619e86e64948e9a8d74bf88a9a6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r   public void testRequiresAutoboxing()", "signatureAfterChange": "   public void testRequiresAutoboxing()", "diff": ["-  /* Make sure that autoboxing is done appropriately*/\r", "-  public void testRequiresAutoboxing() {\r", "-    directory = new File(directory, \"requiresAutoboxing\");\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".dj0\");\r", "-      }});\r", "-\r", "-      LanguageLevelConverter llc14 = new LanguageLevelConverter(JavaVersion.JAVA_1_4);\r", "-      // JavaVersion doesn't support JSR-14, but if it did, we could modify this\r", "-      LanguageLevelConverter llcJSR14 = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      \r", "-      for (int i = 0; i<testFiles.length; i++) {\r", "-        result = llc14.convert(new File[]{testFiles[i]});\r", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());\r", "-      }\r", "-      \r", "-      result = llcJSR14.convert(testFiles);\r", "-\r", "-      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());\r", "-\r", "-      /**Now make sure that the resulting java files are correct.*/\r", "-      for(int i = 0; i < testFiles.length; i++) {\r", "-        File currFile = testFiles[i];\r", "-        String fileName = currFile.getAbsolutePath();\r", "-        fileName = fileName.substring(0, fileName.length() -4);\r", "-        File resultingFile = new File(fileName + \".java\");\r", "-        File correctFile = new File(fileName + \".expected\");\r", "-        \r", "-        try {\r", "-        assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",\r", "-                     readFileAsString(correctFile),\r", "-                     readFileAsString(resultingFile));\r", "-        }\r", "-        catch (IOException ioe) {\r", "-          fail(ioe.getMessage());\r", "-          // let JUnit throw the exception\r", "-        }\r", "-      }\r", "-      \r", "-  }\r", "+  /* Make sure that autoboxing is done appropriately*/", "+  public void testRequiresAutoboxing() {", "+    directory = new File(directory, \"requiresAutoboxing\");", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".dj0\");", "+      }});", "+", "+      LanguageLevelConverter llc14 = new LanguageLevelConverter();", "+      LanguageLevelConverter llc5 = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      ", "+      for (int i = 0; i<testFiles.length; i++) {", "+        result = llc14.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_1_4, IterUtil.<File>empty()));", "+        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+      }", "+      ", "+      result = llc5.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+", "+      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+", "+      /**Now make sure that the resulting java files are correct.*/", "+      for(int i = 0; i < testFiles.length; i++) {", "+        File currFile = testFiles[i];", "+        String fileName = currFile.getAbsolutePath();", "+        fileName = fileName.substring(0, fileName.length() -4);", "+        File resultingFile = new File(fileName + \".java\");", "+        File correctFile = new File(fileName + \".expected\");", "+        ", "+        try {", "+        assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "+                     IOUtil.toString(correctFile),", "+                     IOUtil.toString(resultingFile));", "+        }", "+        catch (IOException ioe) {", "+          fail(ioe.getMessage());", "+          // let JUnit throw the exception", "+        }", "+      }", "+      ", "+  }"]}], "num": 1213}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b55a5b6818ed62dcf6151dfaab4b4ba4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6324d6cc144cd8aaa4503b941a1f2a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public SymbolData getSymbolData(boolean giveAmbigException, String className, Data currentData, JExpression jexpr, boolean giveException)", "signatureAfterChange": "   public SymbolData getSymbolData(boolean giveAmbigException, String className, Data currentData, JExpression jexpr,                                    boolean giveException)", "diff": ["-   **/", "-  public SymbolData getSymbolData(boolean giveAmbigException, String className, Data currentData, JExpression jexpr, boolean giveException) {", "+    *  */", "+  public SymbolData getSymbolData(boolean giveAmbigException, String className, Data currentData, JExpression jexpr, ", "+                                  boolean giveException) {", "-    if (result == null) {", "-      result = getSymbolData(className, jexpr, giveException, true);", "-    }", "+    if (result == null) result = getSymbolData(className, jexpr, giveException, true);", "-    else {", "-      if (result == SymbolData.AMBIGUOUS_REFERENCE) {", "-        if (giveAmbigException) {_addError(\"Ambiguous reference to class or interface \" + className, jexpr); return SymbolData.AMBIGUOUS_REFERENCE;}", "-        return null;  //return null to indicate we were unable to resolve this.", "-      }", "+    else if (result == SymbolData.AMBIGUOUS_REFERENCE) {", "+      if (giveAmbigException) {_addError(\"Ambiguous reference to class or interface \" + className, jexpr); return SymbolData.AMBIGUOUS_REFERENCE;}", "+      return null;  // return null to indicate we were unable to resolve this.", "-    if (result == null || !giveException) {return result;}", "+    if (result == null || ! giveException) return result;", "-    else {", "-      return result;", "-    }", "+    else return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f067505dd527bba0bc3ce9c071c9ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 40, "signatureBeforeChange": "   private SymbolData _getSymbolData_Primitive(String className)", "signatureAfterChange": "           public void execute()", "diff": ["-    */", "-  private SymbolData _getSymbolData_Primitive(String className) {", "-    if (className.equals(\"boolean\")) {", "-      return SymbolData.BOOLEAN_TYPE;", "-    }", "-    else if (className.equals(\"char\")) {", "-      return SymbolData.CHAR_TYPE;", "-    }", "-    else if (className.equals(\"byte\")) {", "-      return SymbolData.BYTE_TYPE;", "-    }", "-    else if (className.equals(\"short\")) {", "-      return SymbolData.SHORT_TYPE;", "-    }", "-    else if (className.equals(\"int\")) {", "-      return SymbolData.INT_TYPE;", "-    }", "-    else if (className.equals(\"long\")) {", "-      return SymbolData.LONG_TYPE;", "-    }", "-    else if (className.equals(\"float\")) {", "-      return SymbolData.FLOAT_TYPE;", "-    }", "-    else if (className.equals(\"double\")) {", "-      return SymbolData.DOUBLE_TYPE;", "-    }", "-    else if (className.equals(\"void\")) {", "-      return SymbolData.VOID_TYPE;", "-    }", "-    else if (className.equals(\"null\")) {", "-      return SymbolData.NULL_TYPE;", "-    }", "-    return null;", "-  }", "+        Command fixUp = new Command() {", "+          public void execute() { ", "+            SymbolData newSd = _identifyType(typeName, si, enclosingClassName);", "+            assert newSd != null && newSd != SymbolData.NOT_FOUND;  // TODO !!!: Expand to error message?", "+            varData[j].setType(newSd);", "+          }"]}], "num": 389}
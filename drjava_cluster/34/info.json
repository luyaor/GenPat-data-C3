{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f18153768dcacb605cadaed47bef62a2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a160e7171d522902d47b0e313749a8d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public ClassPathVector getClassPath()", "signatureAfterChange": "   public Iterable<File> getClassPath()", "diff": ["-  public ClassPathVector getClassPath() {", "+  public Iterable<File> getClassPath() {", "-      try {", "-        ClassPathVector classPath = slave.getAugmentedClassPath();  // returns fresh copy", "-        for (File f : _startupClassPath) {", "-          try { classPath.add(FileOps.toURL(f)); }", "-          catch (MalformedURLException e) { /* just ignore bad classpath entry */ }", "-        }", "-        return classPath;", "-      }", "-      catch (RemoteException re) { _threwException(re); return new ClassPathVector(); }", "+      try { return IterUtil.compose(slave.getAugmentedClassPath(), _startupClassPath); }", "+      catch (RemoteException re) { _threwException(re); return IterUtil.empty(); }", "-    else { return new ClassPathVector(); }", "+    else { return IterUtil.empty(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf79fb1a1849d1a38673939a4241d3e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public Iterable<File> getClassPath()", "signatureAfterChange": "   public Option<Iterable<File>> getClassPath()", "diff": ["+  public Option<Iterable<File>> getClassPath() {", "+    InterpreterJVMRemoteI remote = _accessInterpreterJVM();", "+    if (remote == null) { return Option.none(); }", "+    try { return Option.some(remote.getClassPath()); }", "+    catch (RemoteException e) { _handleRemoteException(e); return Option.none(); }", "-    */", "-  public Iterable<File> getClassPath() {", "-    // silently fail if disabled. see killInterpreter docs for details.", "-    if (_restart) {", "-      ", "-      InterpreterJVMRemoteI slave = ensureInterpreterConnected();", "-      ", "-      try { return slave.getClassPath(); }", "-      catch (RemoteException re) { _threwException(re); return IterUtil.empty(); }", "-    }", "-    else { return IterUtil.empty(); }", "-  }"]}], "num": 34}
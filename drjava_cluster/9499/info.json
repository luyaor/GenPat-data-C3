{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25f3c9c86bcc5b2805fdd312fcd3b5ab", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2618621ddb392690683df3eb088691b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/CastExpression.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public CastExpression(TypeName tt, Expression exp,                         String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public CastExpression(TypeName tt, Expression exp,                         String fn, int bl, int bc, int el, int ec)", "diff": ["-    if (tt == null) throw new IllegalArgumentException(\"tt == null\");", "-    ", "+    //if (tt == null) throw new IllegalArgumentException(\"tt == null\");", "+    // tt can be null in a generated cast"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fa39461070a08d529919a722abc6769", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/VariableDeclaration.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public VariableDeclaration(boolean fin, TypeName type, String name, Expression init,                              String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public VariableDeclaration(boolean fin, TypeName type, String name, Expression init,                              String fn, int bl, int bc, int el, int ec)", "diff": ["-    if (type == null) throw new IllegalArgumentException(\"type == null\");", "+    // TODO: restore this check? -- we're allowing an inferred type for now", "+    //if (type == null) throw new IllegalArgumentException(\"type == null\");"]}], "num": 9499}
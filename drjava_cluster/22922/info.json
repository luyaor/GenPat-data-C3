{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0601a761004fd4dd7cc1e8487ad8b94e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3ab0bab0754e8d7e354d7baeeb7434", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "signatureAfterChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "diff": ["-   */", "+  /** Runs JUnit on the current document.  Forces the user to compile all open source documents before proceeding. */", "-    try {", "-      // try to get the file, to make sure it's not untitled. if it is, it'll throw an IllegalStateException", "-      File testFile = doc.getFile();", "-      LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "-      lod.add(doc);", "-      junitOpenDefDocs(lod, false);", "-    }", "-    catch (IllegalStateException e) {", "-      // No file exists, don't try to compile and test", "-      nonTestCase(false);", "-      return;", "-    }", "-    catch (NoClassDefFoundError e) {", "-      // Method getTest in junit.framework.BaseTestRunner can throw a NoClassDefFoundError (via reflection).", "-        _notifier.junitEnded();  // balances junitStarted()", "-        synchronized(_testLock) { _testInProgress = false; }", "-        throw e;", "-    }", "-    catch (ExitingNotAllowedException enae) {  // test attempted to call System.exit", "-      _notifier.junitEnded();  // balances junitStarted()", "-      synchronized(_testLock) { _testInProgress = false; }", "-      throw enae;", "-    }", "+    File testFile;", "+    try { testFile = doc.getFile(); ", "+      if (testFile == null) {  // document is untitiled: abort unit testing and return", "+        nonTestCase(false);", "+        return;", "+      }", "+    } ", "+    catch(FileMovedException fme) { /* do nothing */ }", "+    ", "+    LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "+    lod.add(doc);", "+    junitOpenDefDocs(lod, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef419be855c994d712c1051b275bbe7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testOpenRealFile() throws BadLocationException, IOException", "signatureAfterChange": "   public void testOpenRealFile() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestFileIOListener(tempFile); ", "+    final TestListener listener = new TestFileIOListener(tempFile); ", "-    try {", "-      OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "-      listener.assertOpenCount(1);", "-      listener.assertCloseCount(1);  // Untitled document is closed when doc is opened", "-      assertModified(false, doc);", "-      assertContents(BAR_TEXT, doc);", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);  // Untitled document is closed when doc is opened", "+          assertModified(false, doc);", "+          assertContents(BAR_TEXT, doc);", "+        }", "+        catch(AlreadyOpenException aoe) {", "+          // Should not be open", "+          fail(\"File was already open!\");", "+        }", "+        catch(OperationCanceledException oce) {", "+          // Should not be canceled", "+          fail(\"Open was unexpectedly canceled!\");", "+        }", "+        catch(Exception e) { ", "+          // Should never happen", "+          fail(\"Exception thrown in testOpenRealFile.  Traceback: \" + e);", "+        }", "+      }", "+    });"]}], "num": 22922}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7093b3125b0acac30f07e4419b38d737", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fcfad502164ec352f06b9d12baf0dfd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testBracket() throws BadLocationException", "signatureAfterChange": "      public void testBracket() throws BadLocationException", "diff": ["-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START's brace is an open bracket.\", _rule.applyRule(_doc, i));     ", "+        assertTrue(\"START's brace is an open bracket.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i));     ", "+        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-      assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 8));", "-      assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 22));", "-      assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 23));", "+      assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 8, Indenter.OTHER));", "+      assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 22, Indenter.OTHER));", "+      assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 23, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1ee25156e0e79a42a30aa3090e048ee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBraceTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testNoEquals() throws BadLocationException", "signatureAfterChange": "   public void testNoEquals() throws BadLocationException", "diff": ["-    assertTrue(\"At DOCSTART.\",    ! rule.applyRule(_doc, 0));", "-    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10));", "-    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25));", "+    assertTrue(\"At DOCSTART.\",    ! rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.OTHER));", "+    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.OTHER));", "-    assertTrue(\"Before start of inner array\", ! rule.applyRule(_doc, 50));", "-    assertTrue(\"Same line as inner {.\", !rule.applyRule(_doc, 54));", "-    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75));", "-    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180));", "+    assertTrue(\"Before start of inner array\", ! rule.applyRule(_doc, 50, Indenter.OTHER));", "+    assertTrue(\"Same line as inner {.\", !rule.applyRule(_doc, 54, Indenter.OTHER));", "+    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.OTHER));", "+    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.OTHER));"]}], "num": 3220}
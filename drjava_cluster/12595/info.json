{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e4f7f074b4364d60cc4f2a5d1daa523", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e65e7cb7328530aa7e9e690fe20b8f33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 121, "signatureBeforeChange": "   public static <T> SizedIterable<T> asSizedIterable(final Collection<T> coll)", "signatureAfterChange": "   public static <T> SizedIterable<T> asIterable(Collection<T> coll)", "diff": ["-   */", "-  public static <T> SizedIterable<T> asSizedIterable(final Collection<T> coll) {", "-    class Wrapper extends AbstractIterable<T> implements SizedIterable<T> {", "-      public Iterator<T> iterator() { return coll.iterator(); }", "-      public int size() { return coll.size(); }", "-      public boolean isFixed() { return isFixedCollection(coll); }", "-    }", "-    return new Wrapper();", "-  }", "+   */", "+  public static <T> SizedIterable<T> asIterable(Collection<T> coll) {", "+    return new CollectionWrapper<T>(coll);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2b3b422b77de4963da3f9baf88f8815", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 70, "signatureBeforeChange": "   public static <K, V> Map<K, V> asMap(final Dictionary<K, V> d)", "signatureAfterChange": "   public static <K, V> Map<K, V> asMap(Dictionary<K, V> d)", "diff": ["+   */", "+  public static <K, V> Map<K, V> asMap(Dictionary<K, V> d) {", "+    // can't cast arbitrary Dictionaries because the dictionary type parameters may", "+    // be unrelated to map parameters -- it might be a Dictionary<K, V> and a Map<K, Foo>", "+    if (d instanceof Hashtable<?, ?>) { return (Hashtable<K, V>) d; }", "+    return new DictionaryMap<K, V>(d);", "-  /** Convert a Dictionary to a Map. */", "-  public static <K, V> Map<K, V> asMap(final Dictionary<K, V> d) {", "-    return new DictionaryMap<K, V>(d);"]}], "num": 12595}
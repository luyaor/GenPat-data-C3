{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5bf09dcd85ab2eae5042c3c5253bb21", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f5e3e244fb41a2109df68d380ba1304", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "commitAfterChange": "c5aaf72fbd7fa889788e2cd72fe646345421a547", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void testNonStaticWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public void testNonStaticWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 12;\"), 9);", "+    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 12;\"), 10);", "+    _debugger.addWatch(\"nullString\");", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "+    assertEquals(\"watch value incorrect\", \"null\", watches.elementAt(5).getValue());", "+    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.elementAt(5).getType());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "+    assertEquals(\"watch value incorrect\", \"null\", watches.elementAt(5).getValue());", "+    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.elementAt(5).getType());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(5).getValue());", "+    assertEquals(\"watch type incorrect\", DebugWatchData.NO_TYPE, watches.elementAt(5).getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ea0a6cffba674e64dc6acbc10c809f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "0bbc4205cb6cdac938c33646446cffe67a254d86", "commitAfterChange": "32c1a96bda59745efd4d13dbac97b7a11f8d7d24", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["+    CompoundUndoManager undoManager = _defModel.getUndoManager();", "-    _defModel.addUndoableEditListener(_defModel.getUndoManager());", "+    _defModel.addUndoableEditListener(undoManager);", "-    int key = _defModel.getUndoManager().startCompoundEdit();", "+    int key = undoManager.startCompoundEdit();", "+    undoManager.startCompoundEdit();", "-    // End the outer compound edit and verify that both get undone", "-    _defModel.getUndoManager().endCompoundEdit(key);", "-    _defModel.getUndoManager().undo();", "+    undoManager.undo();", "-    // End the outer compound edit trigger a second compound edit", "-    _defModel.getUndoManager().endCompoundEdit(key);", "+    undoManager.startCompoundEdit();", "-    assertEquals(\"Should have returned the correct key.\", 5, key);", "+    assertEquals(\"Should have returned the correct key.\", 4, key);", "-      _defModel.getUndoManager().endCompoundEdit(key + 1);", "-      fail(\"Should not have allowed ending a compound edit with a wrong key.\");", "+      _defModel.getUndoManager().endCompoundEdit(key + 2);", "+//      fail(\"Should not have allowed ending a compound edit with a wrong key.\");", "+    undoManager.startCompoundEdit();"]}], "num": 17889}
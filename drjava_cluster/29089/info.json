{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35301e873b9f09ecbdbbc091b551ed89", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ea83074dff6be6880305e1dfaa567ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 76, "signatureBeforeChange": "   private int getWhiteSpace()", "signatureAfterChange": "   private int _getWhiteSpace() throws BadLocationException", "diff": ["-    */", "-  private int getWhiteSpace() {", "-    acquireReadLock();", "-    String text = \"\";", "-    try {", "-      synchronized (_reduced) {", "-        text = getText(_currentLocation, getLength() - _currentLocation); ", "-      }", "-    }", "-    catch (BadLocationException e) { throw new UnexpectedException(e); }", "-    finally { releaseReadLock(); }", "-    ", "-    int i = 0;", "-    while (i < text.length() && text.charAt(i) == ' ' ) i++;", "-    return i;", "+    */", "+  private int _getWhiteSpace() throws BadLocationException {", "+        ", "+    assert isReadLocked();", "+    ", "+    String text = \"\";", "+    int lineEnd = _getLineEndPos(_currentLocation);  // index of next '\\n' char or end of document", "+    int lineLen = lineEnd - _currentLocation;", "+    String line = getText(_currentLocation, lineLen);", "+    int i;", "+    for (i = 0; i < lineLen && line.charAt(i) == ' '; i++) ;", "+    return i;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd592d11437a37def5d5e40805baedea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public CompilerErrorPanel(DefinitionsPane defPane, GlobalModel model)", "signatureAfterChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "diff": ["-  public CompilerErrorPanel(DefinitionsPane defPane, GlobalModel model) {", "-    _definitionsPane = defPane;", "+  public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame) {", "-", "-    _listener = new DefinitionsCaretListener();", "-    _definitionsPane.addCaretListener(_listener);", "+    _frame = frame;", "-          _switchToError(_errorListPane.getSelectedIndex() + 1);", "+          int index = _errorListPane.getSelectedIndex() + 1;", "+          if (index < _numErrors) {", "+            _errorListPane.switchToError(index);", "+          }", "-          _switchToError(_errorListPane.getSelectedIndex() - 1);", "+          int index = _errorListPane.getSelectedIndex() -1 ;", "+          if (index >= 0) {", "+            _errorListPane.switchToError(index);", "+          }", "-    ", "+", "+", "-    // If we don't, when it pops up it cuts away the right edge of the ", "+    // If we don't, when it pops up it cuts away the right edge of the", "-", "-    resetErrors(new CompilerError[0]);"]}], "num": 29089}
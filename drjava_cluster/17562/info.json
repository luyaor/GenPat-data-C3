{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7bf639dbe8a68a38f4d0f8b0e461ebf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24ca4a3800a28fc869b80cf646dde83a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelControl.java", "commitBeforeChange": "cfd8cdfe8db5b449181969655285bf92b469bc81", "commitAfterChange": "f17abf941340b20848be6eb070215726592e1973", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": " \t \tpublic boolean hasHighlightChanged()", "signatureAfterChange": "   public Vector<HighlightStatus> getHighlightStatus(final int start,                                                     final int length)", "diff": ["-\t", "-\tpublic boolean hasHighlightChanged()", "-\t\t{", "-\t\t\treturn rmc.hasHighlightChanged();", "-\t\t}", "+   */", "+  public Vector<HighlightStatus> getHighlightStatus(final int start,", "+                                                    final int length)", "+  {", "+    Vector<HighlightStatus> vec = new Vector<HighlightStatus>();", "+", "+    int curState;", "+    int curLocation;", "+    int curLength;", "+", "+    ModelList<ReducedToken>.Iterator cursor = rmc._cursor.copy();", "+    curLocation = start; //+ rmc._offset;", "+    curLength = cursor.current().getSize() - rmc._offset;", "+    curState = cursor.current().getHighlightState();", "+", "+    while ((curLocation + curLength) < (start + length)) {", "+      cursor.next();", "+      int nextState = cursor.current().getHighlightState();", "+", "+      if (nextState == curState) {", "+        // add on and keep building", "+        curLength += cursor.current().getSize();", "+      }", "+      else {", "+        // add old one to the vector and start new one", "+        vec.addElement(new HighlightStatus(curLocation, curLength, curState));", "+        curLocation += curLength; // new block starts after previous one", "+        curLength = cursor.current().getSize();", "+        curState = nextState;", "+      }", "+    }", "+", "+    // Add the last one, which has not been added yet", "+    vec.addElement(new HighlightStatus(curLocation, curLength, curState));", "+", "+    cursor.dispose();", "+", "+    return vec;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8efef72783bb01ad23417dd3bae5816a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelControl.java", "commitBeforeChange": "cfd8cdfe8db5b449181969655285bf92b469bc81", "commitAfterChange": "f17abf941340b20848be6eb070215726592e1973", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": " \t \tpublic boolean hasHighlightChanged()", "signatureAfterChange": "   public Vector<HighlightStatus> getHighlightStatus(final int start,                                                     final int length)", "diff": ["-\t", "-\tpublic boolean hasHighlightChanged()", "-\t\t{", "-\t\t\treturn rmc.hasHighlightChanged();", "-\t\t}", "+   */", "+  public Vector<HighlightStatus> getHighlightStatus(final int start,", "+                                                    final int length)", "+  {", "+    Vector<HighlightStatus> vec = new Vector<HighlightStatus>();", "+", "+    int curState;", "+    int curLocation;", "+    int curLength;", "+", "+    ModelList<ReducedToken>.Iterator cursor = rmc._cursor.copy();", "+    curLocation = start; //+ rmc._offset;", "+    curLength = cursor.current().getSize() - rmc._offset;", "+    curState = cursor.current().getHighlightState();", "+", "+    while ((curLocation + curLength) < (start + length)) {", "+      cursor.next();", "+      int nextState = cursor.current().getHighlightState();", "+", "+      if (nextState == curState) {", "+        // add on and keep building", "+        curLength += cursor.current().getSize();", "+      }", "+      else {", "+        // add old one to the vector and start new one", "+        vec.addElement(new HighlightStatus(curLocation, curLength, curState));", "+        curLocation += curLength; // new block starts after previous one", "+        curLength = cursor.current().getSize();", "+        curState = nextState;", "+      }", "+    }", "+", "+    // Add the last one, which has not been added yet", "+    vec.addElement(new HighlightStatus(curLocation, curLength, curState));", "+", "+    cursor.dispose();", "+", "+    return vec;", "+  }"]}], "num": 17562}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a487d14fc19c7fedd59b696ef3af8a24", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39024a7dca8bf9f876ed2013bc4611a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ShadowingClassLoaderTest.java", "commitBeforeChange": "24a4bd9b5af47fdf2b927852ef0f4a564c73861b", "commitAfterChange": "a0233fef3427e8ddd7241be47fe79cd3cd5d54bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testShadowedClassLoading() throws ClassNotFoundException", "signatureAfterChange": "      public void testShadowedClassLoading() throws ClassNotFoundException", "diff": ["-    ShadowingClassLoader l = new ShadowingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.reflect\");", "+    // simple black list", "+    ShadowingClassLoader l = ShadowingClassLoader.blackList(BASE_LOADER, \"edu.rice.cs.plt.reflect\");", "-    ShadowingClassLoader l2 = new ShadowingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.refl\");", "+    // prefix containing partial word shouldn't work", "+    ShadowingClassLoader l2 = ShadowingClassLoader.blackList(BASE_LOADER, \"edu.rice.cs.plt.refl\");", "-    ShadowingClassLoader l3 = new ShadowingClassLoader(BASE_LOADER, false, \"edu.rice.cs.plt.reflect\");", "+    // simple white list", "+    ShadowingClassLoader l3 = ShadowingClassLoader.whiteList(BASE_LOADER, \"edu.rice.cs.plt.reflect\");", "+    ", "+    // default black list doesn't block bootstrap classes", "+    ShadowingClassLoader l4 = ShadowingClassLoader.blackList(BASE_LOADER, \"javax\", \"edu\");", "+    assertLoadsSameClass(BASE_LOADER, l4, \"java.lang.Number\");", "+    assertLoadsSameClass(BASE_LOADER, l4, \"javax.swing.JFrame\");", "+    assertLoadsClass(BASE_LOADER, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertDoesNotLoadClass(l4, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    ", "+    // default white list doesn't block bootstrap classes", "+    ShadowingClassLoader l5 = ShadowingClassLoader.whiteList(BASE_LOADER, \"javax\", \"edu.rice.cs.plt.reflect\");", "+    assertLoadsSameClass(BASE_LOADER, l5, \"javax.swing.JFrame\");", "+    assertLoadsSameClass(BASE_LOADER, l5, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertLoadsClass(BASE_LOADER, \"edu.rice.cs.plt.iter.IterUtil\");", "+    assertDoesNotLoadClass(l5, \"edu.rice.cs.plt.iter.IterUtil\");", "+    ", "+    // can filter boostrap classes with filterBootClasses parameter", "+    ShadowingClassLoader l6 =", "+    new ShadowingClassLoader(BASE_LOADER, true, IterUtil.make(\"javax\", \"edu\"), true);", "+    assertLoadsSameClass(BASE_LOADER, l6, \"java.lang.Number\");", "+    assertLoadsClass(BASE_LOADER, \"javax.swing.JFrame\");", "+    assertDoesNotLoadClass(l6, \"javax.swing.JFrame\");", "+    assertLoadsClass(BASE_LOADER, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertDoesNotLoadClass(l4, \"edu.rice.cs.plt.reflect.ReflectUtil\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678b691b6d201b44f60cd8c08b6ccbf9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "041023bab0887f54ed814ccd2037595271522c8d", "commitAfterChange": "67e38f766289e5330a2b4079022fb56c6e08bd49", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testAccessStaticFieldsAndMethodsOfOuterClasses()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "signatureAfterChange": "   public void testAccessStaticFieldsAndMethodsOfOuterClasses()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "diff": ["-// TEMPORARILY commented out because this test is failing", "-//    interpret(\"twoDeepFoo = 100;\");", "-//    assertEquals(\"should have assigned field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"twoDeepFoo\"));", "-//    assertEquals(\"should have assigned the field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "-//    assertEquals(\"should have assigned the field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"monkey.MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "-//", "-//    interpret(\"int twoDeepFoo = -10;\");", "-//    assertEquals(\"Should have successfully shadowed field of static outer class\",", "-//                 \"-10\",", "-//                 interpret(\"twoDeepFoo\"));", "-//    assertEquals(\"should have assigned the field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"MonkeyTwoDeep.twoDeepFoo\"));", "-//    assertEquals(\"should have assigned the field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "-//", "-//    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "-//                 \"6\",", "-//                 interpret(\"foo\"));", "-//    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "-//                 \"6\",", "-//                 interpret(\"MonkeyStaticStuff.foo\"));", "-//", "-//    interpret(\"foo = 987;\");", "-//    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "-//                 \"987\",", "-//                 interpret(\"foo\"));", "-//    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "-//                 \"987\",", "-//                 interpret(\"MonkeyStaticStuff.foo\"));", "-//", "-//    interpret(\"int foo = 56;\");", "-//    assertEquals(\"Should have defined a new variable\",", "-//                 \"56\",", "-//                 interpret(\"foo\"));", "-//    assertEquals(\"Should have shadowed the value of a static field of a non-static outer class\",", "-//                 \"987\",", "-//                 interpret(\"MonkeyStaticStuff.foo\"));", "-//", "-//    assertEquals(\"should be able to call method of outer class\",", "-//                 \"-2\",", "-//                 interpret(\"getNegativeTwo()\"));", "-//    assertEquals(\"should be able to call method of outer class\",", "-//                 \"-2\",", "-//                 interpret(\"MonkeyTwoDeep.getNegativeTwo()\"));", "-//    assertEquals(\"should be able to call method of outer class\",", "-//                 \"-2\",", "-//                 interpret(\"MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));", "-//    assertEquals(\"should be able to call method of outer class\",", "-//                 \"-2\",", "-//                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));", "+    interpret(\"twoDeepFoo = 100;\");", "+    assertEquals(\"should have assigned field of static outer class\",", "+                 \"100\",", "+                 interpret(\"twoDeepFoo\"));", "+    assertEquals(\"should have assigned the field of static outer class\",", "+                 \"100\",", "+                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "+    assertEquals(\"should have assigned the field of static outer class\",", "+                 \"100\",", "+                 interpret(\"monkey.MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "+", "+    interpret(\"int twoDeepFoo = -10;\");", "+    assertEquals(\"Should have successfully shadowed field of static outer class\",", "+                 \"-10\",", "+                 interpret(\"twoDeepFoo\"));", "+    assertEquals(\"should have assigned the field of static outer class\",", "+                 \"100\",", "+                 interpret(\"MonkeyTwoDeep.twoDeepFoo\"));", "+    assertEquals(\"should have assigned the field of static outer class\",", "+                 \"100\",", "+                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "+", "+    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "+                 \"6\",", "+                 interpret(\"foo\"));", "+    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "+                 \"6\",", "+                 interpret(\"MonkeyStaticStuff.foo\"));", "+", "+    interpret(\"foo = 987;\");", "+    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "+                 \"987\",", "+                 interpret(\"foo\"));", "+    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "+                 \"987\",", "+                 interpret(\"MonkeyStaticStuff.foo\"));", "+", "+    interpret(\"int foo = 56;\");", "+    assertEquals(\"Should have defined a new variable\",", "+                 \"56\",", "+                 interpret(\"foo\"));", "+    assertEquals(\"Should have shadowed the value of a static field of a non-static outer class\",", "+                 \"987\",", "+                 interpret(\"MonkeyStaticStuff.foo\"));", "+", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyTwoDeep.getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));"]}], "num": 14201}
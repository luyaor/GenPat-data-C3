{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a882ca44331a3208f0b553aceaf8a1a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e0143aa52dc5222da5caa20805542a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public String getVariableToString(String var)", "signatureAfterChange": "   public String getVariableToString(String var)", "diff": ["-    InterpreterJVMRemoteI slave = ensureInterpreterConnected();", "-    ", "-    try {", "-      return slave.interpret(var).apply(new InterpretResult.Visitor<String>() {", "-        public String forNoValue() { return \"\"; }", "-        public String forStringValue(String s) { return '\"' + s + '\"'; }", "-        public String forCharValue(Character c) { return \"'\" + c + \"'\"; }", "-        public String forNumberValue(Number n) { return n.toString(); }", "-        public String forBooleanValue(Boolean b) { return b.toString(); }", "-        public String forObjectValue(String valString) { return valString; }", "-        public String forException(String msg) { return \"\"; }", "-        public String forUnexpectedException(Throwable t) { throw new UnexpectedException(t); }", "-        public String forBusy() { return \"\"; }", "-      });", "-    }", "-    catch (RemoteException re) {", "-      _threwException(re);", "-      return null;", "-    }", "+    InterpreterJVMRemoteI interpreter = ensureInterpreterConnected();", "+    try { return interpreter.getVariableToString(var); }", "+    catch (RemoteException e) { _threwException(e); return null; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "533ac88016279fd5d6fa2946a968cccd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "          public DocumentRegion forEmpty(Empty c)", "signatureAfterChange": "          public DocumentRegion forEmpty(Empty c)", "diff": ["+      File f;", "-        final File f = new File(fname);", "-        return new DocumentRegion() {", "-          public OpenDefinitionsDocument getDocument() { return null; }", "-          public File getFile() { return f; }", "-          public int getStartOffset() { return startOffset; }", "-          public int getEndOffset() { return endOffset; }", "-        };", "+        f = new File(fname);", "-        final File f = new File(pathRoot, fname);", "-        return new DocumentRegion() {", "-          public OpenDefinitionsDocument getDocument() { return null; }", "-          public File getFile() { return f; }", "-          public int getStartOffset() { return startOffset; }", "-          public int getEndOffset() { return endOffset; }", "-        };", "+        f = new File(pathRoot, fname);", "+      return new SimpleDocumentRegion(null, f, startOffset, endOffset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84536dd2d6f8f06326e6b90a378225f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public String getVariableToString(String var)", "signatureAfterChange": "   public String getVariableToString(String var)", "diff": ["-    try { return slave.getVariableToString(var); }", "+    try {", "+      return slave.interpret(var).apply(new InterpretResult.Visitor<String>() {", "+        public String forNoValue() { return \"\"; }", "+        public String forStringValue(String s) { return '\"' + s + '\"'; }", "+        public String forCharValue(Character c) { return \"'\" + c + \"'\"; }", "+        public String forNumberValue(Number n) { return n.toString(); }", "+        public String forBooleanValue(Boolean b) { return b.toString(); }", "+        public String forObjectValue(String valString) { return valString; }", "+        public String forException(String msg) { return \"\"; }", "+        public String forUnexpectedException(Throwable t) { throw new UnexpectedException(t); }", "+        public String forBusy() { return \"\"; }", "+      });", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba511ff3c3af0fe0d9ea6f3f9c111c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/DictionaryMap.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public Set<K> keySet()", "signatureAfterChange": "      public PredicateSet<K> keySet()", "diff": ["+  public PredicateSet<K> keySet() {", "+    return new AbstractPredicateSet<K>() {", "+      public boolean contains(Object o) { return _d.get(o) != null; }", "+      public Iterator<K> iterator() { return IterUtil.asIterator(_d.keys()); }", "+      public boolean isInfinite() { return false; }", "+      public boolean hasFixedSize() { return false; }", "+      public boolean isStatic() { return false; }", "+      @Override public int size() { return _d.size(); }", "+      @Override public int size(int b) { int s = _d.size(); return (s < b) ? s : b; }", "+      @Override public boolean isEmpty() { return _d.isEmpty(); }", "+      @Override public boolean remove(Object o) { return _d.remove(o) != null; }", "+    };", "-  public Set<K> keySet() { return _keys.value(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad518fe7a861cdd368e4e764cea02be1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigatorTest.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setUp() throws IOException", "signatureAfterChange": "      public void setUp() throws IOException", "diff": ["-    ", "-    tree.addDocument(new INavigatorItem() {", "-      public String getName() { return \"item1\"; }", "-      public boolean equals(Object o) { return o == this; }", "-    }, \"folder1\");", "-    tree.addDocument(new INavigatorItem() {", "-      public String getName() { return \"item2\"; }", "-      public boolean equals(Object o) { return o == this; }", "-    }, \"folder1\");", "-    tree.addDocument(new INavigatorItem() {", "-      public String getName() { return \"item1\"; }", "-      public boolean equals(Object o) { return o == this; }", "-    }, \"folder2\");", "-    tree.addDocument(new INavigatorItem() {", "-      public String getName() { return \"item2\"; }", "-      public boolean equals(Object o) { return o == this; }", "-    }, \"folder2\");", "+    tree.addDocument(new DummyINavigatorItem(\"item1\"), \"folder1\");", "+    tree.addDocument(new DummyINavigatorItem(\"item2\"), \"folder1\");", "+    tree.addDocument(new DummyINavigatorItem(\"item1\"), \"folder2\");", "+    tree.addDocument(new DummyINavigatorItem(\"item2\"), \"folder2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2af8cb11ccaf3cb202ff829fedbe789", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "2d130b589eb563459c94da96fea961fcbe800771", "commitAfterChange": "467e5b5cdd1dcb74e3af8270c3f2ac9d390a6395", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public Object[] getVariable(String var)", "signatureAfterChange": "   public Object[] getVariable(String var)", "diff": ["-    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "-    if (env == null) { return new Object[0]; }", "-    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "-    if (lv == null) { return new Object[0]; }", "-    return new Object[]{ env.second().get(lv) };", "+//    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "+//    if (env == null) { return new Object[0]; }", "+//    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "+//    if (lv == null) { ", "+        InterpretResult ir = interpret(var);", "+        return ir.apply(new InterpretResult.Visitor<Object[]>() {", "+            public Object[] forNoValue() { return new Object[0]; }", "+            public Object[] forStringValue(String val) { return new Object[] { val }; }", "+            public Object[] forCharValue(Character val) { return new Object[] { val }; }", "+            public Object[] forNumberValue(Number val) { return new Object[] { val }; }", "+            public Object[] forBooleanValue(Boolean val) { return new Object[] { val }; }", "+            public Object[] forObjectValue(String valString) { return new Object[] { valString }; }", "+            public Object[] forException(String message) { return new Object[0]; }", "+            public Object[] forEvalException(String message, StackTraceElement[] stackTrace) { return new Object[0]; }", "+            public Object[] forUnexpectedException(Throwable t) { return new Object[0]; }", "+            public Object[] forBusy() { return new Object[0]; }", "+        });", "+//    }", "+//    return new Object[]{ env.second().get(lv) };"]}], "num": 9599}
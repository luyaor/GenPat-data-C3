{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1119cbf40c408cb608aa6f25d999f9a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678b691b6d201b44f60cd8c08b6ccbf9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "041023bab0887f54ed814ccd2037595271522c8d", "commitAfterChange": "67e38f766289e5330a2b4079022fb56c6e08bd49", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testAccessStaticFieldsAndMethodsOfOuterClasses()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "signatureAfterChange": "   public void testAccessStaticFieldsAndMethodsOfOuterClasses()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "diff": ["-// TEMPORARILY commented out because this test is failing", "-//    interpret(\"twoDeepFoo = 100;\");", "-//    assertEquals(\"should have assigned field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"twoDeepFoo\"));", "-//    assertEquals(\"should have assigned the field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "-//    assertEquals(\"should have assigned the field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"monkey.MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "-//", "-//    interpret(\"int twoDeepFoo = -10;\");", "-//    assertEquals(\"Should have successfully shadowed field of static outer class\",", "-//                 \"-10\",", "-//                 interpret(\"twoDeepFoo\"));", "-//    assertEquals(\"should have assigned the field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"MonkeyTwoDeep.twoDeepFoo\"));", "-//    assertEquals(\"should have assigned the field of static outer class\",", "-//                 \"100\",", "-//                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "-//", "-//    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "-//                 \"6\",", "-//                 interpret(\"foo\"));", "-//    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "-//                 \"6\",", "-//                 interpret(\"MonkeyStaticStuff.foo\"));", "-//", "-//    interpret(\"foo = 987;\");", "-//    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "-//                 \"987\",", "-//                 interpret(\"foo\"));", "-//    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "-//                 \"987\",", "-//                 interpret(\"MonkeyStaticStuff.foo\"));", "-//", "-//    interpret(\"int foo = 56;\");", "-//    assertEquals(\"Should have defined a new variable\",", "-//                 \"56\",", "-//                 interpret(\"foo\"));", "-//    assertEquals(\"Should have shadowed the value of a static field of a non-static outer class\",", "-//                 \"987\",", "-//                 interpret(\"MonkeyStaticStuff.foo\"));", "-//", "-//    assertEquals(\"should be able to call method of outer class\",", "-//                 \"-2\",", "-//                 interpret(\"getNegativeTwo()\"));", "-//    assertEquals(\"should be able to call method of outer class\",", "-//                 \"-2\",", "-//                 interpret(\"MonkeyTwoDeep.getNegativeTwo()\"));", "-//    assertEquals(\"should be able to call method of outer class\",", "-//                 \"-2\",", "-//                 interpret(\"MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));", "-//    assertEquals(\"should be able to call method of outer class\",", "-//                 \"-2\",", "-//                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));", "+    interpret(\"twoDeepFoo = 100;\");", "+    assertEquals(\"should have assigned field of static outer class\",", "+                 \"100\",", "+                 interpret(\"twoDeepFoo\"));", "+    assertEquals(\"should have assigned the field of static outer class\",", "+                 \"100\",", "+                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "+    assertEquals(\"should have assigned the field of static outer class\",", "+                 \"100\",", "+                 interpret(\"monkey.MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "+", "+    interpret(\"int twoDeepFoo = -10;\");", "+    assertEquals(\"Should have successfully shadowed field of static outer class\",", "+                 \"-10\",", "+                 interpret(\"twoDeepFoo\"));", "+    assertEquals(\"should have assigned the field of static outer class\",", "+                 \"100\",", "+                 interpret(\"MonkeyTwoDeep.twoDeepFoo\"));", "+    assertEquals(\"should have assigned the field of static outer class\",", "+                 \"100\",", "+                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.twoDeepFoo\"));", "+", "+    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "+                 \"6\",", "+                 interpret(\"foo\"));", "+    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "+                 \"6\",", "+                 interpret(\"MonkeyStaticStuff.foo\"));", "+", "+    interpret(\"foo = 987;\");", "+    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "+                 \"987\",", "+                 interpret(\"foo\"));", "+    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "+                 \"987\",", "+                 interpret(\"MonkeyStaticStuff.foo\"));", "+", "+    interpret(\"int foo = 56;\");", "+    assertEquals(\"Should have defined a new variable\",", "+                 \"56\",", "+                 interpret(\"foo\"));", "+    assertEquals(\"Should have shadowed the value of a static field of a non-static outer class\",", "+                 \"987\",", "+                 interpret(\"MonkeyStaticStuff.foo\"));", "+", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyTwoDeep.getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\",", "+                 \"-2\",", "+                 interpret(\"MonkeyStaticStuff.MonkeyInner.MonkeyTwoDeep.getNegativeTwo()\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72da6400de54296209c269bb5cb8b6b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 26, "signatureBeforeChange": "   @Override public TypeContext visit(ReturnStatement node)", "signatureAfterChange": "   @Override public TypeContext visit(ReturnStatement node)", "diff": ["-    // TODO: Check that the return type is correct (including the void case)", "-    if (node.getExpression() != null) { checkType(node.getExpression()); }", "+    Type expected = context.getReturnType();", "+    if (expected == null) { throw new ExecutionError(\"return.not.allowed\", node); }", "+", "+    if (node.getExpression() == null) {", "+      if (!expected.equals(TypeSystem.VOID)) {", "+        setErrorStrings(node, ts.userRepresentation(TypeSystem.VOID),", "+                        ts.userRepresentation(expected));", "+        throw new ExecutionError(\"return.type\", node);", "+      }", "+    }", "+    else {", "+      checkType(node.getExpression(), expected);", "+      try {", "+        Expression newExp = ts.assign(expected, node.getExpression());", "+        node.setExpression(newExp);", "+      }", "+      catch (UnsupportedConversionException e) {", "+        setErrorStrings(node, ts.userRepresentation(getType(node.getExpression())),", "+                        ts.userRepresentation(expected));", "+        throw new ExecutionError(\"return.type\", node);", "+      }", "+    }", "+    "]}], "num": 19504}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dcf4ee6dd9be0c42b988c75ff85b2b1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "167b5d40a89d458f4c3fc71ad02a4d67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "db64d6218289f5b8c2c9777bfd38b4160001ceaa", "commitAfterChange": "8f81b4833cb462795daefaccef203de9c66140be", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private JUnitError _makeJUnitError ( TestFailure tF, String theclass, boolean isError, String fileName)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, String className, boolean isError, String fileName)", "diff": ["-  private JUnitError _makeJUnitError ( TestFailure tF, String theclass, boolean isError, String fileName) {", "+  private JUnitError _makeJUnitError(TestFailure failure, String className, boolean isError, String fileName) {", "-    TestFailure tFail = tF;", "-    TestCase tcFail = (TestCase) tFail.failedTest();", "+    Test failedTest = failure.failedTest();", "+    String testName = failedTest.getClass().getName();", "+    if (failedTest instanceof TestCase) {", "+      testName = ((TestCase)failedTest).getName();", "+    }", "-    StringWriter swFail = new StringWriter();", "-    PrintWriter pwFail  = new PrintWriter(swFail);", "+    StringWriter sWriter = new StringWriter();", "+    PrintWriter pWriter  = new PrintWriter(sWriter);", "-    tFail.thrownException().printStackTrace(pwFail);", "+    failure.thrownException().printStackTrace(pWriter);", "-    String classnameFail = theclass + \".\" + tcFail.getName();", "+    String classNameAndTest = className + \".\" + testName;", "-    int lineNum = _lineNumber( swFail.toString(), classnameFail);", "+    int lineNum = _lineNumber( sWriter.toString(), classNameAndTest);", "-  /*  try {", "-      _file = _document.getFile();", "-    }", "-    catch (FileMovedException fme) {", "-      // Recover, even though file was deleted", "-      _file = fme.getFile();", "-    }*/", "-    ", "-      tFail.thrownException().toString(): ", "-      tFail.thrownException().getMessage();", "+      failure.thrownException().toString(): ", "+      failure.thrownException().getMessage();", "-                            ! (tFail.thrownException() instanceof AssertionFailedError),", "-                            tcFail.getName(),", "-                            swFail.toString());", "+                            ! (failure.thrownException() instanceof AssertionFailedError),", "+                            testName,", "+                            sWriter.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5988ed138c05810d282366c9f673c938", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, String className, boolean isError, String fileName)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "diff": ["-  private JUnitError _makeJUnitError(TestFailure failure, String className, boolean isError, String fileName) {", "-   ", "+  private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,", "+                                     boolean isError, List<File> files) {", "+", "-    ", "-    StringWriter sWriter = new StringWriter();", "-    PrintWriter pWriter  = new PrintWriter(sWriter);", "-    ", "-    failure.thrownException().printStackTrace(pWriter);", "-        ", "+", "+    String testString = failedTest.toString();", "+    int firstIndex = testString.indexOf('(') + 1;", "+    int secondIndex = testString.indexOf(')');", "+    String className = testString.substring(firstIndex, secondIndex);", "+    int indexOfClass = classNames.indexOf(className);", "+    File file;", "+    if (indexOfClass != -1) {", "+      file = files.get(indexOfClass);", "+    }", "+    else {", "+      file = _jmc.getFileForClassName(className);", "+    }", "+", "+//    String ps = System.getProperty(\"file.separator\");", "+//    // replace periods with the System's file separator", "+//    className = StringOps.replace(className, \".\", ps);", "+//", "+//    // crop off the $ if there is one and anything after it", "+//    int indexOfDollar = className.indexOf('$');", "+//    if (indexOfDollar > -1) {", "+//      className = className.substring(0, indexOfDollar);", "+//    }", "+//", "+//    String filename = className + \".java\";", "+", "-      ", "-      return new JUnitError(new File(fileName), lineNum, 0, exception,", "-                            ! (failure.thrownException() instanceof AssertionFailedError),", "-                            testName, stackTrace);", "+    boolean isFailure = (failure.thrownException() instanceof AssertionFailedError) &&", "+      !classNameAndTest.equals(\"junit.framework.TestSuite$1.warning\");", "+    return new JUnitError(file, lineNum, 0, exception, !isFailure, testName, className, stackTrace);"]}], "num": 15730}
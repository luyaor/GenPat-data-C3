{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e789996b12b4c640499c2a2cb4928f3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69c51e8e8a8f1f0fed7eefb2adaa9bff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "          public void testForPackageImportStatementOnly()", "signatureAfterChange": "          public void testForPackageImportStatementOnly()", "diff": ["-      Word[] words3 = new Word[] {new Word(JExprParser.NO_SOURCE_INFO, \"myPackage\"), new Word(JExprParser.NO_SOURCE_INFO, \"cookie\")};", "+      Word[] words3 = new Word[] {new Word(JExprParser.NO_SOURCE_INFO, \"myPackage\"), new Word(JExprParser.NO_SOURCE_INFO, ", "+                                                                                              \"cookie\")};", "-      assertTrue(\"Imported Packages should now contain myPackage.cookie\", _llv._importedPackages.contains(\"myPackage.cookie\"));", "+      assertTrue(\"Imported Packages should now contain myPackage.cookie\", ", "+                 _llv._importedPackages.contains(\"myPackage.cookie\"));", "-      assertEquals(\"The error message should be correct\", \"You do not need to import package myPackage. It is your package so all public classes in it are already visible.\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct\", \"You do not need to import package myPackage.\" + ", "+                   \" It is your package so all public classes in it are already visible.\", errors.get(0).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9297f1ff1d3420ce17ee7b4b80136394", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "         public void testforValueReturnStatementOnly()", "signatureAfterChange": "         public void testforValueReturnStatementOnly()", "diff": ["-      BracedBody bb1 = new BracedBody(SourceInfo.NO_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "-                                                                                 new BooleanLiteral(SourceInfo.NO_INFO, true))});", "+      BodyItemI[] bis = ", "+        new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "+                                                   new BooleanLiteral(SourceInfo.NO_INFO, true))};", "+      BracedBody bb1 = new BracedBody(SourceInfo.NO_INFO, bis);", "-      assertEquals(\"Error message should be correct\", \"You cannot return a value from a class's constructor\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", \"You cannot return a value from a class's constructor\", ", "+                   errors.get(0).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8b96d0e98f784a1d78ec0f61be8eca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "          public void testForInnerInterfaceDef()", "signatureAfterChange": "          public void testForInnerInterfaceDef()", "diff": ["-      InnerInterfaceDef iid = new InnerInterfaceDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Broken\"),", "-                                                    new TypeParameter[0], new ReferenceType[0], ", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "-      ", "+      InnerInterfaceDef iid = ", "+        new InnerInterfaceDef(NO_INFO, _packageMav, new Word(NO_INFO, \"Broken\"),", "+                              new TypeParameter[0], new ReferenceType[0], ", "+                              new BracedBody(NO_INFO, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"Inner interface declarations cannot appear here\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"The error message should be correct\", \"Inner interface declarations cannot appear here\",", "+                   errors.getLast().getFirst());"]}], "num": 14453}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96f35a5f6d61e30283e50985e0fa99ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "213a64ac37a27444b5333372a36dfad2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/LongLiteral.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Long parse(String s)", "signatureAfterChange": "   private static Long parse(String s)", "diff": ["+    boolean negate = false;", "-    return Long.valueOf(s.substring(start, end), radix);", "+    else if (s.startsWith(\"-\")) { start++; negate = true; }", "+    // BigInteger can parse hex numbers representing negative longs; Long can't", "+    BigInteger val = new BigInteger(s.substring(start, end), radix);", "+    if (negate) { val = val.negate(); }", "+    long result = val.longValue();", "+    if (val.bitLength() > 64 || (radix == 10 && !val.equals(BigInteger.valueOf(result)))) {", "+      throw new NumberFormatException(\"Literal is out of range\");", "+    }", "+    return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d455762b2b3d475786daa9d75eef59b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/IntegerLiteral.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Integer parse(String s)", "signatureAfterChange": "   private static Integer parse(String s)", "diff": ["+    boolean negate = false;", "-    return Integer.valueOf(s.substring(start), radix);", "+    else if (s.startsWith(\"-\")) { start++; negate = true; }", "+    // BigInteger can parse hex numbers representing negative ints; Integer can't", "+    BigInteger val = new BigInteger(s.substring(start), radix);", "+    if (negate) { val = val.negate(); }", "+    int result = val.intValue();", "+    if (val.bitLength() > 32 || (radix == 10 && !val.equals(BigInteger.valueOf(result)))) {", "+      throw new NumberFormatException(\"Literal is out of range\");", "+    }", "+    return result;"]}], "num": 29052}
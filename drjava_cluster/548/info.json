{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00845cfd47418fb3f0437b6a4094846b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1855583bebbcae232d80e045064fe9ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "6c7308b28231f013064e2caac6c40346905e6204", "commitAfterChange": "0aeaf959a1b3eeec380d4f686f4e9dc9fd607e92", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "signatureAfterChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-    /* Rename any .dj0 files in files to be .java files, so the correct thing is compiled.  The hashset is used to ", "-     * make sure we never send in duplicate files. This can happen if the java file was sent in along with the ", "-     * corresponding .dj* file. The dj* file is renamed to a .java file and thus we have two of the same file in ", "-     * the list.  By adding the renamed file to the hashset, the hashset efficiently removes duplicates.", "+    /* Construct the collection of files to be compild by javac, renaming any language levels (.dj*) files to the ", "+     * corresponding java (.java) files.  By using a HashSet, we avoid creating duplicates in this collection.", "+    LinkedList<File> newFiles = new LinkedList<File>();  // Used to record the LL files that must be converted", "+        newFiles.add(javaFile);", "-        // Delete the .java file, it will be regenerated later", "+        // Delete the stale .java file (if it exists), a file with this name will subsequently be generated", "-    LanguageLevelConverter llc = new LanguageLevelConverter();", "-    Options llOpts;", "-    if (bootClassPath == null) { llOpts = new Options(getActiveCompiler().version(), classPath); }", "-    else { llOpts = new Options(getActiveCompiler().version(), classPath, bootClassPath); }", "-    Map<File,Set<String>> sourceToTopLevelClassMap = new HashMap<File,Set<String>>();", "-    /* LanguageLevels Bug Workaround:  JUnit test files can generate spurious conversion errors.  This", "-     * problem can be mitigated by compiling JUnit test files, which contain the substring \"Test\", last.  ", "-     */", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> llErrors = ", "-      llc.convert(_testFileSort(files).toArray(new File[0]), llOpts, sourceToTopLevelClassMap);", "-    ", "+      Map<File,Set<String>> sourceToTopLevelClassMap = new HashMap<File,Set<String>>();", "-          if (classNames==null) classNames = new HashSet<String>();", "+          if (classNames == null) classNames = new HashSet<String>();", "-            if (endPos<0) return false; // can't be a class file", "+            if (endPos < 0) return false; // can't be a class file", "-            if ((dollarPos>=0) && (dollarPos<endPos)) endPos = dollarPos;", "+            if ((dollarPos >= 0) && (dollarPos < endPos)) endPos = dollarPos;", "-              new File(dir,name).delete();", "+              new File(dir, name).delete();", "-    }", "+      /* Perform language levels conversion, creating corresponding .java files. */", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Options llOpts;", "+      if (bootClassPath == null) { llOpts = new Options(getActiveCompiler().version(), classPath); }", "+      else { llOpts = new Options(getActiveCompiler().version(), classPath, bootClassPath); }", "+      ", "+      // NOTE: the following workaround (\"_testFileSort(files)\" instead of simply \"files\") may no longer be necessary.", "+      /* Perform the conversion incorporating the following Bug Workaround:  Forward references can generate spurious ", "+       * conversion errors in some cases.  This problem can be mitigated by compiling JUnit test files (with names", "+       * containing the substring \"Test\") last.  ", "+       */", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> llErrors = ", "+        llc.convert(_testFileSort(files).toArray(new File[0]), llOpts, sourceToTopLevelClassMap);", "+      /* Add any errors encountered in conversion to the compilation error log. */", "+      errors.addAll(_parseExceptions2CompilerErrors(llErrors.getFirst()));", "+      errors.addAll(_visitorErrors2CompilerErrors(llErrors.getSecond()));", "+      ", "+//      // Confirm that the .java files corresponding to .dj* files exist.", "+//      for (File f: newFiles)", "+//        if (! f.exists()) Utilities.show(f + \" does not exist\");", "-    files = new LinkedList<File>(javaFileSet);", "+    }", "-    errors.addAll(_parseExceptions2CompilerErrors(llErrors.getFirst()));", "-    errors.addAll(_visitorErrors2CompilerErrors(llErrors.getSecond()));", "-    if (containsLanguageLevels) { return files; }", "+    if (containsLanguageLevels) { return new LinkedList<File>(javaFileSet); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d3c4e38da4bee8d2dd5f394ac2d46d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "893c07e82b5df8a5ee457745ae613e9f4f3395b7", "commitAfterChange": "e7565df68be50967f0383d34df0b493ae42a4e83", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 45, "signatureBeforeChange": "   protected void _addButtons()", "signatureAfterChange": "   protected java.util.List<JButton> getButtons()", "diff": ["-  /** Adds buttons to _buttonPanel */", "-  protected void _addButtons() {", "-    _buttonPanel.add(_addButton);", "-    _buttonPanel.add(_removeButton);", "+  /** Return the buttons that should be added to the table underneath. */", "+  protected java.util.List<JButton> getButtons() {", "+    List<JButton> buttons = new ArrayList<JButton>();", "+    buttons.add(_addButton);", "+    if (_moveButtonEnabled) {", "+      buttons.add(_moveUpButton);", "+      buttons.add(_moveDownButton);", "+    }", "+    return buttons;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7a5d0b4b700d8f04f84464aed5adb94", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/TreeUtilities.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static TypeName classToType(Class<?> c, String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public static TypeName classToTypeName(Class<?> c, String fn, int bl, int bc, int el, int ec)", "diff": ["-  public static TypeName classToType(Class<?> c, String fn, int bl, int bc, int el, int ec) {", "+  public static TypeName classToTypeName(Class<?> c, String fn, int bl, int bc, int el, int ec) {", "-      result = new ArrayTypeName(classToType(c.getComponentType(), fn, bl, bc, el, ec),", "+      result = new ArrayTypeName(classToTypeName(c.getComponentType(), fn, bl, bc, el, ec),", "-      result = new ReferenceTypeName(c.getName(), fn, bl, bc, el, ec);", "+      List<IdentifierToken> ids = new ArrayList<IdentifierToken>(1);", "+      ids.add(new Identifier(c.getName()));", "+      result = new ReferenceTypeName(ids, fn, bl, bc, el, ec);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c850bb605ae060a38c7430d56f98429c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,                                                        boolean start)", "signatureAfterChange": "   public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,                                                        boolean start)", "diff": ["-    return computeInProcess(task, jvmBuilder, start, null);", "-  }", "+    ProcessTaskController<R> controller = new ProcessTaskController<R>(jvmBuilder, THREAD_EXECUTOR, task);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f22dbaf5a9ff0a8f5344a82259672786", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk16/edu/rice/cs/drjava/model/compiler/Javac160Compiler.java", "commitBeforeChange": "0fe874dd6d2f82ba868df35578fd530c5227b9f2", "commitAfterChange": "12b972c6351f6122675c003ccbc59ef481c89cda", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["+    List<File> filteredClassPath = new LinkedList<File>(classPath);", "-      Iterator<? extends File> i = classPath.iterator();", "+      Iterator<? extends File> i = filteredClassPath.iterator();", "-        if (filter.accept(i.next())) { i.remove(); }", "+\tif (filter.accept(i.next())) { i.remove(); }", "+      if (_tempJUnit!=null) { filteredClassPath.add(_tempJUnit); }", "-    Context context = _createContext(classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    Context context = _createContext(filteredClassPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);"]}], "num": 548}
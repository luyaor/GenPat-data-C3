{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef0db1a601ad3821085f82cb1b13e933", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc6cc7f4efa3a0206ee0610a929ec568", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 28, "signatureBeforeChange": "   protected SymbolData addInnerSymbolData(SourceInfo si, String qualifiedTypeName, Data enclosing)", "signatureAfterChange": "   protected SymbolData addInnerSymbolData(SourceInfo si, String qualifiedTypeName, Data enclosing)", "diff": ["-  // Creates a continuation for an inner class or interface", "+  // Creates a continuation for an inner class/interface; qualifiedTypeName is known to exist", "-    SymbolData sd = new SymbolData(qualifiedTypeName); // create continuation", "-    SymbolData enclosingSD = enclosing.getSymbolData();", "-    // if qualifiedTypeName refers to an external inner class, the following will likely fail", "-    symbolTable.put(qualifiedTypeName, sd);  ", "+    SymbolData sd = makeContinuation(si, qualifiedTypeName); // create continuation", "+    SymbolData enclosingSD = enclosing.getSymbolData();  // must exist in symbol table", "+    // if qualifiedTypeName refers to an external inner class, the following will likely fail.  TODO: eliminate this", "-    continuations.put(qualifiedTypeName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "-//    System.err.println(\"Creating continuation for inner type \" + qualifiedTypeName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff06dc8ef0657338f4af6f938ef3b0cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 23, "signatureBeforeChange": "   protected SymbolData addSymbolData(SourceInfo si, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData getQualifiedSymbolData(String qualClassName, SourceInfo si)", "diff": ["+    * searches imported files, primitive types, as well as types in the symbol table. */", "+  protected SymbolData getQualifiedSymbolData(String qualClassName, SourceInfo si) {", "+    return getQualifiedSymbolData(qualClassName, si, false, false, true);", "+  }", "-  protected SymbolData addSymbolData(SourceInfo si, String qualifiedClassName) {", "-    SymbolData sd = new SymbolData(qualifiedClassName);  // create a continuation", "-    continuations.put(qualifiedClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "-    symbolTable.put(qualifiedClassName, sd);", "-//    System.err.println(\"Creating continuation for \" + qualifiedClassName + \" at LLV:1124\");"]}], "num": 24500}
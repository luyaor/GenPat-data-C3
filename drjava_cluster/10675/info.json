{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21eb1a1b0162d54fb456ee5bb80bbb6e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88166da7a4ee934b6ac85974652369ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public int getIntelligentBeginLinePos(int currPos) throws BadLocationException", "signatureAfterChange": "   public int getIntelligentBeginLinePos(int currPos) throws BadLocationException", "diff": ["-    int firstChar = getLineStartPos(currPos);", "-    String prefix = getText(firstChar, currPos-firstChar);", "+", "+    String prefix;", "+    int firstChar;", "+    readLock();", "+    try {", "+      firstChar = getLineStartPos(currPos);", "+      prefix = getText(firstChar, currPos-firstChar);", "+    }", "+    finally { readUnlock(); }", "-    boolean found = false;", "-    for (i = 0; i < prefix.length() && !found; i++ ) {", "-      found = !Character.isWhitespace(prefix.charAt(i));", "-    }", "-    ", "+    int len = prefix.length();", "+   ", "+    for (i = 0; i < len; i++ ) { if (! Character.isWhitespace(prefix.charAt(i))) break; }", "+", "-    if (found) {", "-      i--;  // want the position just before the non-WS char", "+    if (i < len) {", "-      if (firstRealChar < currPos)  return firstRealChar;", "+      if (firstRealChar < currPos) return firstRealChar;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "963f92582e20dd1e51bbd3db277da9db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevLinePlus.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-", "+      String prefix;", "+      ", "-        String prefix = doc.getText(startPrevLine, firstChar - startPrevLine);", "-        doc.setTab(prefix + _suffix, here);", "+        String prevPrefix = doc.getText(startPrevLine, firstChar - startPrevLine);", "+        prefix = prevPrefix + _suffix;", "-      else {", "-        // On first line", "-        doc.setTab(_suffix, here);", "-      }", "+      else prefix = _suffix;  // On first line", "+      ", "+      if (AbstractDJDocument.hasOnlySpaces(prefix)) doc.setTab(prefix.length(), here);", "+      else doc.setTab(prefix, here);", "+      ", "-    catch (BadLocationException e) {", "-      // Shouldn't happen", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); } // Shouldn't happen"]}], "num": 10675}
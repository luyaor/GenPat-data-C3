{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66ff7944a857085892b6d02e407f4581", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad3a85a144ed59aecc8234808cf6eed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void testMatchBraceText()", "signatureAfterChange": "   public void testMatchBraceText()", "diff": ["-        _result = _frame.getFileNameField();", "-    Utilities.clearEventQueue(); ", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(115); ", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  definitions.setCaretPosition(115); } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(102);", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(102);  } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(119); ", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(119); } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(121); ", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(121); } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(122);", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(122); } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61e85197c8a717c6fabe57f6f9f929a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "      public void testPromptListClearedOnReset() throws Exception", "signatureAfterChange": "      public void testPromptListClearedOnReset() throws Exception", "diff": ["+  ", "-    //Can't use the fields declared in setUp - it doesn't use a real InteractionsModel", "+    // Can't use the fields declared in setUp - it doesn't use a real InteractionsModel", "+    ", "+    final Object _resetLock = new Object();", "-    _pane.resetPrompts();", "+    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _pane.resetPrompts(); }", "+    });", "-    Utilities.clearEventQueue();", "-    _pane.setCaretPosition(_doc.getLength());", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _pane.setCaretPosition(_doc.getLength()); }", "+    });", "+    ", "-    _pane.setCaretPosition(_doc.getLength());", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        _pane.setCaretPosition(_doc.getLength());", "+        _firstPrompt = (int) _pane.getPromptList().get(0); // cast prevents ambiguity", "+        _secondPrompt = (int) _pane.getPromptList().get(1); // cast prevents ambiguity", "+      }", "+    });", "+    ", "-   (int) _pane.getPromptList().get(0)); //needs cast to prevent ambiguity", "+                 _firstPrompt); ", "-                 (int)_pane.getPromptList().get(1)); //needs cast to prevent ambiguity", "+                 _secondPrompt); ", "+    synchronized(_resetLock) { _resetDone = false; }", "+    _model.addListener(new DummyGlobalModelListener() {", "+      public void interpreterReady(File wd) {", "+        synchronized(_resetLock) {", "+          _resetDone = true;", "+          _resetLock.notifyAll();", "+        }", "+      }});", "+      ", "+    _model.resetInterpreter(FileOption.NULL_FILE);", "+ ", "+    /* Wait until reset has finished. */", "+    synchronized(_resetLock) { while (! _resetDone) _resetLock.wait(); }", "-    synchronized(_model) {", "-      // Reset should clear", "-      _model.setWaitingForFirstInterpreter(false);", "-      //this adds the \"Resetting Interactions\" ", "-      _model.resetInterpreter(FileOption.NULL_FILE);  // restarting the interpreter since argument is not null", "-      _model.interpreterResetting();", "-    }", "-    Utilities.clearEventQueue();", "-    synchronized(_model) {", "-      assertEquals(\"PromptList after reset should contain no elements\", 0, _pane.getPromptList().size());", "-    }  ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _size = _pane.getPromptList().size(); }", "+    });", "+    ", "+//    System.err.println(_pane.getPromptList());", "+    ", "+    assertEquals(\"PromptList after reset should contain one element\", 1, _size);"]}], "num": 30141}
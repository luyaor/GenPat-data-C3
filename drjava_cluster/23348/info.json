{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2547c65dd4693bd7078cf7550e773d9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21d0f8da5a26129ad77a3d029bec59a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DefaultInteractionsModel.java", "commitBeforeChange": "eb8f1a08f585431afff35aec705cfd9169bfce44", "commitAfterChange": "b2d820b253c15b02ecb50e43e9a336a56dadd45e", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public StackTraceElement[] replaceLLException(StackTraceElement[] stackTrace)", "signatureAfterChange": "   public StackTraceElement[] replaceLLException(StackTraceElement[] stackTrace)", "diff": ["-    LanguageLevelStackTraceMapper LLSTM = new LanguageLevelStackTraceMapper(_model);", "-    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "-    List<File> files = new ArrayList<File>();", "-    for(OpenDefinitionsDocument odd: docs){", "-      File f = odd.getRawFile();", "-      if (f.getName().endsWith(\".dj0\") ||", "-          f.getName().endsWith(\".dj1\") ||", "-          f.getName().endsWith(\".dj2\")) files.add(f); ", "-    }", "+    // use LLSTM from compiler model.", "+    LanguageLevelStackTraceMapper LLSTM = _model.getCompilerModel().getLLSTM();", "+    final List<File> files = new ArrayList<File>();", "+    for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()) { files.add(odd.getRawFile()); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f4ed8ba1cef2341f92236a85981891", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJavaRoot.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public static void main(final String[] args)", "signatureAfterChange": "      public static void main(final String[] args)", "diff": ["-      ", "-      try { _mainFrame = new MainFrame(); }", "-      catch(RuntimeException e) {", "-        Throwable c = e.getCause();", "-        if ((c instanceof java.rmi.server.ExportException) && (c.getMessage().equals(\"Listen failed on port: 0\"))) {", "-          JOptionPane.showMessageDialog(null,", "-                                        \"DrJava could not communicate with its Interactions Pane.\\n\"+", "-                                        \"This can happen if a firewall does not allow DrJava to access\\n\"+", "-                                        \"the network. If you have a firewall, please make sure that\\n\"+", "-                                        \"DrJava has network access.\\n\"+", "-                                        \"DrJava does not access the internet or other computers, except\\n\"+", "-                                        \"for \\\"Open Java API Javadoc\\\", but it needs network access to\\n\"+", "-                                        \"communicate with the Interactions Pane.\",", "-                                        \"Network Access Failed\",", "-                                        JOptionPane.ERROR_MESSAGE);", "-          System.exit(1);", "-        }", "-        else throw e;", "-      }    ", "+      _mainFrame = new MainFrame();", "-      System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.DrJavaErrorHandler\");", "+      Thread.setDefaultUncaughtExceptionHandler(DrJavaErrorHandler.INSTANCE);", "-       * added to the fileview before the MainFrame is set visible.  When this was not done, we occasionally encountered", "+       * added to the file view before the MainFrame is set visible.  When this was not done, we occasionally encountered", "+      error.log(t);", "-      new DrJavaErrorHandler().handle(t);", "+      DrJavaErrorHandler.record(t);"]}], "num": 23348}
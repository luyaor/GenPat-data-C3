{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f7562a258678babbc37e1c91f1be9bd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6246700f26435a0a92f3c083a9b4c5d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void _ensureLegalCaretPos()", "signatureAfterChange": "     protected void _ensureLegalCaretPos(DocumentEvent e)", "diff": ["-    protected void _ensureLegalCaretPos() {", "+    protected void _ensureLegalCaretPos(DocumentEvent e) {", "+//      System.err.println(\"_ensureLegalCaretPosition(\" + e + \") called\");", "-      int len = doc.getLength();", "-      if (_pane.getCaretPosition() > len) {", "-        _cachedCaretPos = len;", "-        _pane.setCaretPosition(len);", "+      int newPos = _pane.getCaretPosition();", "+      final int len = doc.getLength();", "+//      System.err.println(\"caretPos = \" + newPos + \" len = \" + len);", "+      if (newPos > len) {", "+        newPos = len;", "+        Utilities.invokeLater(new Runnable() { public void run() { _pane.setCaretPosition(len); } });", "+      setCachedCaretPos(newPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84a1dfdef1dd8556a77591cb4b0dbda6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "          private int getNewCaretPos(DocumentEvent e, ConsoleDocument doc)", "signatureAfterChange": "          private int getNewCaretPos(ConsoleDocument doc, int promptPos, int insertPos, int insertLen)", "diff": ["-    private int getNewCaretPos(DocumentEvent e, ConsoleDocument doc) {", "+    private int getNewCaretPos(ConsoleDocument doc, int promptPos, int insertPos, int insertLen) {", "+", "-      if (! doc.hasPrompt()) return docLen;", "- ", "-      final int promptPos = doc.getPromptPos();", "-      if (promptPos == docLen) return docLen;", "+      if (! doc.hasPrompt() || promptPos == docLen) return docLen;", "-      final int insertPos = e.getOffset();", "-      final int insertLen = e.getLength();", "-      // Advance caret by insertion length (works both for echoed keyboard input and for writes to System.out", "+      // Advance caret by insertion length because it is sitting at or beyond the prompt"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3243254e8ec5f0e1a8633b88dd21946", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "451a8ef10dd808c32bb1dec2a41dbfe38542794f", "commitAfterChange": "fd372db787cedeccdc43d382b7e2999ff5184943", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private int getNewCaretPos(DocumentEvent e, ConsoleDocument doc)", "signatureAfterChange": "     private int getNewCaretPos(DocumentEvent e, ConsoleDocument doc)", "diff": ["-      // Figure out where the prompt was before the insertion", "-      final int prevPromptPos = (insertPos <= promptPos) ? promptPos - insertLen : promptPos;", "-      // If caret was at previous prompt (or before), move it to the new prompPos.", "+      // Figure out where the prompt was before the insertion; printed output precedes the prompt", "+      final int prevPromptPos = (insertPos < promptPos) ? promptPos - insertLen : promptPos;", "+      // If caret was at previous prompt (or before), move it to the new prompPos.  ", "-       * relative position to the prompt. */", "+       * relative position to the prompt. (On keyboard input, prevPromptPos == promptPos, making this a no-op. */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d57697e705ee2bd8497f9adf73582c82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "07f5fc6f2851e46d6d967b2ccccedf4ca6a440d6", "commitAfterChange": "00c274c983090e9126b5a9ac7c84f4781adba195", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testUndoEventsOccur()", "signatureAfterChange": "   public void testUndoEventsOccur()", "diff": ["-          public void undoableEditHappened(UndoableEditEvent e) { doc.getUndoManager().addEdit(e.getEdit()); }", "+          public void undoableEditHappened(UndoableEditEvent e) { ", "+//            System.err.println(\"undoableEditHappened(\" + e + \") called\");", "+            doc.getUndoManager().addEdit(e.getEdit()); ", "+          }", "-    TestListener listener = new TestListener() { public void undoableEditHappened() { undoableEditCount++; } };", "+    TestListener listener = new TestListener() { ", "+      public void undoableEditHappened() { ", "+        undoableEditCount++; ", "+//        System.err.println(\"undoableEditHappened call propagated to listener\");", "+      } ", "+    };", "+    fail(\"Dump printed output\");", "+    "]}], "num": 2012}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f5697eec421a4d3ae042bc2e6c4f39a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071e6238179947e3d893ee443e9e2765", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "    public Object visit(StaticMethodCall node)", "signatureAfterChange": "    public Object visit(StaticMethodCall node)", "diff": ["-    return super.visit(node);", "+    Method m = (Method) node.getProperty(NodeProperties.METHOD);", "+", "+    // DynamicJava doesn't check that the method is really static!", "+    if (! Modifier.isStatic(m.getModifiers())) {", "+      StringBuffer buf = new StringBuffer();", "+      buf.append(m.getDeclaringClass());", "+      buf.append(\".\");", "+      buf.append(m.getName());", "+      buf.append(\"(\");", "+      ", "+      boolean first = true;", "+      Class[] params = m.getParameterTypes();", "+      for (int i = 0; i < params.length; i++) {", "+        if (first) {", "+          first = false;", "+        }", "+        else {", "+          buf.append(\", \");", "+        }", "+", "+        buf.append(params[i].getName());", "+      }", "+      ", "+      buf.append(\")\");", "+      buf.append(\" is not a static method.\");", "+", "+      throw new InteractionsException(buf.toString());", "+    }", "+", "+    Object ret = super.visit(node);", "+    ", "+    // workaround to not return null for void returns", "+    if (m.getReturnType().equals(Void.TYPE)) {", "+      return JavaInterpreter.NO_RESULT;", "+    }", "+    else {", "+      return ret;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e349b1bb53f8042b4c407af6c6f2b19", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "c0f3fda00a0dfdfc7ba1813b053360e729d2a0e8", "commitAfterChange": "c6a161a5a4f58810a30c95aeb5df1cdc34d75882", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public DefaultGlobalModel()", "signatureAfterChange": "   public DefaultGlobalModel()", "diff": ["-    _jvm.setOptionArgs(DrJava.getConfig().getSetting(SLAVE_JVM_ARGS));", "+    StringBuilder sb = new StringBuilder();", "+    if (!(\"\".equals(DrJava.getConfig().getSetting(SLAVE_JVM_XMX).trim()))) {", "+      sb.append(\"-Xmx\");", "+      sb.append(DrJava.getConfig().getSetting(SLAVE_JVM_XMX));", "+      sb.append(DrJava.getConfig().getSetting(SLAVE_JVM_XMX));", "+      sb.append(\" \");", "+    }", "+    sb.append(DrJava.getConfig().getSetting(SLAVE_JVM_ARGS));", "+    _jvm.setOptionArgs(sb.toString());", "-    DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, new OptionListener<String>() {", "-      public void optionChanged(OptionEvent<String> oe) { _jvm.setOptionArgs(oe.value); }", "-    }); ", "+    OptionListener<String> updateListener = new OptionListener<String>() {", "+      public void optionChanged(OptionEvent<String> oe) {", "+        StringBuilder sb = new StringBuilder();", "+        if (!(\"\".equals(DrJava.getConfig().getSetting(SLAVE_JVM_XMX).trim()))) {", "+          sb.append(\"-Xmx\");", "+          sb.append(DrJava.getConfig().getSetting(SLAVE_JVM_XMX));", "+          sb.append(DrJava.getConfig().getSetting(SLAVE_JVM_XMX));", "+          sb.append(\" \");", "+        }", "+        sb.append(DrJava.getConfig().getSetting(SLAVE_JVM_ARGS));", "+        _jvm.setOptionArgs(sb.toString());", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, updateListener); ", "+    DrJava.getConfig().addOptionListener(SLAVE_JVM_XMX, updateListener); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2c2ef64f91e79c794fec7977372234", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlus.java", "commitBeforeChange": "1cb762451f589947c585a2a219ca59cd916faaa1", "commitAfterChange": "33157731339c994882aa1f63ed4a691707c328ca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void indentLine(DefinitionsDocument doc)", "signatureAfterChange": "   public void indentLine(DefinitionsDocument doc)", "diff": ["-    // For testing only", "-    doc.setTab(\"---\", doc.getCurrentLocation());", "+    int here = doc.getCurrentLocation();", "+    int startLine = doc.getLineStartPos(here);", "+    doc.setCurrentLocation(startLine);", "+    IndentInfo ii = doc.getReduced().getIndentInformation();", "+    ", "+    // Check preconditions", "+    if ((ii.braceType.equals(\"\")) ||", "+        (ii.distToBrace < 0)) {", "+      // Can't find brace, so do nothing.", "+      return;", "+    }", "+", "+    // Find length to brace", "+    int bracePos = startLine - ii.distToBrace;", "+    int braceNewLine = 0;", "+    if (ii.distToNewline >=0) {", "+      braceNewLine = startLine - ii.distToNewline;", "+    }", "+    int braceLen = bracePos - braceNewLine;", "+", "+    // Create tab string", "+    StringBuffer tab = new StringBuffer(_suffix.length() + braceLen);", "+    for (int i=0; i < braceLen; i++) {", "+      tab.append(\" \");", "+    }", "+    tab.append(_suffix);", "+    ", "+    if (here >= doc.getLength()) {", "+      here = doc.getLength() - 1;", "+    }", "+    doc.setCurrentLocation(here);", "+    ", "+    doc.setTab(tab.toString(), here);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4975a6acfcd0303d62baba8e08d21f43", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "755690ad27d80d16d7853b1d30f45c8b48ddecb5", "commitAfterChange": "6d214db24b68a17f17e0cc8f3030a6df6dfa9e3d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["+        sb.append(\"<html>\");", "-          ", "-          sb.append(_region.getDocument().getText(startSel, length).trim());", "+          ", "+          // this highlights the actual region in red", "+          int startRed = _region.getStartOffset() - startSel;", "+          int endRed = _region.getEndOffset() - startSel;", "+          String s = _region.getDocument().getText(startSel, length);", "+          for(int i=0; i<s.length(); ++i) {", "+            if (!Character.isWhitespace(s.charAt(i))) {", "+              break;", "+            }", "+            --startRed;", "+            --endRed;", "+          }", "+          s = s.trim();", "+          if (startRed<0) { startRed = 0; }", "+          if (startRed>s.length()) { startRed = s.length(); }", "+          if (endRed<startRed) { endRed = startRed; }", "+          if (endRed>s.length()) { endRed = s.length(); }", "+          sb.append(StringOps.encodeHTML(s.substring(0, startRed)));", "+          sb.append(\"<font color=#ff0000>\");", "+          sb.append(StringOps.encodeHTML(s.substring(startRed, endRed)));", "+          sb.append(\"</font>\");", "+          sb.append(StringOps.encodeHTML(s.substring(endRed)));", "+          sb.append(\"</html>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f5bc89b9219d820e6d526b72c9fdaa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigProperty.java", "commitBeforeChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "commitAfterChange": "e753017eccbd872714e58c93831cb488b5045d2a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void update()", "signatureAfterChange": "   public void update()", "diff": ["-      if (_name.equals(\"config.\"+key)) { _value = value; return; }", "+      if (_name.equals(\"config.\"+key)) {", "+        if (op instanceof VectorOption) {", "+          @SuppressWarnings(\"unchecked\")", "+          Vector<?> vec = ((VectorOption)op).parse(value);", "+          StringBuilder sb = new StringBuilder();", "+          for(Object o: vec) {", "+            sb.append(_attributes.get(\"sep\"));", "+            sb.append(o.toString());", "+          }", "+          _value = sb.toString();", "+          if (_value.startsWith(_attributes.get(\"sep\"))) {", "+            _value= _value.substring(_attributes.get(\"sep\").length());", "+          }", "+        }", "+        else if (_name.equals(\"config.debug.step.exclude\")) {", "+          java.util.StringTokenizer tok = new java.util.StringTokenizer(value);", "+          StringBuilder sb = new StringBuilder();", "+          while(tok.hasMoreTokens()) {", "+            sb.append(_attributes.get(\"sep\"));", "+            sb.append(tok.nextToken());", "+          }", "+          _value = sb.toString();", "+          if (_value.startsWith(_attributes.get(\"sep\"))) {", "+            _value= _value.substring(_attributes.get(\"sep\").length());", "+          }", "+        }", "+        else {", "+          _value = value;", "+        }", "+        return;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "510f520978b477d6123909096f6097f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "11e630b08382faca40628146b7f40625d89f190c", "commitAfterChange": "4742de9e9abcc9abfbe963657e41dfd407aaaeee", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected JButton[] makeButtons()", "signatureAfterChange": "   protected JComponent[] makeButtons()", "diff": ["-  protected JButton[] makeButtons() {    ", "+  protected JComponent[] makeButtons() {    ", "-    ", "-    Action removeAllAction = new AbstractAction(\"Remove All\") {", "-      public void actionPerformed(ActionEvent ae) {", "-        _model.getFindResultsManager().clearRegions();", "+", "+    _colorBox = new JComboBox();    ", "+    for(int i=0; i<OptionConstants.FIND_RESULTS_COLORS.length; ++i) {", "+      _colorBox.addItem(DrJava.getConfig().getSetting(OptionConstants.FIND_RESULTS_COLORS[i]));", "+    }", "+    _colorBox.addItem(\"None\");", "+    _colorBox.setRenderer(new ColorComboRenderer());", "+    _colorBox.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        if (_lastIndex<OptionConstants.FIND_RESULTS_COLORS.length) {", "+          --DefinitionsPane.FIND_RESULTS_PAINTERS_USAGE[_lastIndex];", "+        }", "+        _lastIndex = _colorBox.getSelectedIndex();", "+        if (_lastIndex<OptionConstants.FIND_RESULTS_COLORS.length) {", "+          ++DefinitionsPane.FIND_RESULTS_PAINTERS_USAGE[_lastIndex];", "+        }", "+        _frame.refreshFindResultsHighlightPainter(FindResultsPanel.this, ", "+                                                  DefinitionsPane.FIND_RESULTS_PAINTERS[_lastIndex]);", "-    };", "-    _removeAllButton = new JButton(removeAllAction);", "+    });", "+    // find the first available color, or choose \"None\"", "+    for(_lastIndex=0; _lastIndex<OptionConstants.FIND_RESULTS_COLORS.length; ++_lastIndex) {", "+      if (DefinitionsPane.FIND_RESULTS_PAINTERS_USAGE[_lastIndex]==0) {", "+        break;", "+      }", "+    }", "+    if (_lastIndex<OptionConstants.FIND_RESULTS_COLORS.length) {", "+      ++DefinitionsPane.FIND_RESULTS_PAINTERS_USAGE[_lastIndex];", "+    }", "+    _colorBox.setSelectedIndex(_lastIndex);", "+    _frame.refreshFindResultsHighlightPainter(FindResultsPanel.this, ", "+                                              DefinitionsPane.FIND_RESULTS_PAINTERS[_lastIndex]);", "-    JButton[] buts = new JButton[] { ", "+    JComponent[] buts = new JComponent[] { ", "-        _removeAllButton", "+        new JLabel(\"Highlight:\"),", "+        _colorBox", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "628dc487d3db7b0fe86c8d23782eccfc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "01976b859dcbb21fcccdad846dcb4a0675ac7cca", "commitAfterChange": "2fc4395eb72dbc8caeb586fbd5d1fef990083e71", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["-        args = new Object[larg.size()];", "+        args = new Object[typs.length];", "-        while (it.hasNext()) {", "+        while (i < typs.length-1) {", "+        if(typs.length > 0){", "+          if(!m.isVarArgs()){", "+            Object p  = it.next().acceptVisitor(this);", "+            args[i] = performCast(typs[i], p);", "+            i++;", "+          } else { // Pass an array with all the remaining arguments", "+            assert(typs[typs.length-1].isArray());", "+            Class componentType = typs[typs.length-1].getComponentType();", "+            Object argArray = Array.newInstance(componentType,new int[]{(larg.size()-typs.length+1)});", "+            for(int j = 0; j < larg.size()-typs.length+1; j++){", "+              Object p  = it.next().acceptVisitor(this);", "+              Array.set(argArray, j, performCast(componentType, p));", "+            }", "+            args[typs.length-1] = argArray;", "+          }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63408b3de944f96876f27eb2abb4fbe1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/ParseError.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ParseException getParseException()", "signatureAfterChange": "               private static String parseExceptionMessage(ParseException e)", "diff": ["-     */", "-    public ParseException getParseException() {", "-      return pe;", "+    ", "+    private static String parseExceptionMessage(ParseException e) {", "+      if (e.expectedTokenSequences == null) { return e.getMessage(); }", "+      else {", "+        int maxSize = 0;", "+        for (int i = 0; i < e.expectedTokenSequences.length; i++) {", "+          if (maxSize < e.expectedTokenSequences[i].length) {", "+            maxSize = e.expectedTokenSequences[i].length;", "+          }", "+        }", "+        String retval = \"Syntax Error: \\\"\";", "+        Token tok = e.currentToken.next;", "+        ", "+        for (int i = 0; i < maxSize; i++) {", "+          if (i != 0) retval += \" \";", "+          if (tok.kind == 0) {", "+            retval += e.tokenImage[0];", "+            break;", "+          }", "+          retval += TextUtil.javaEscape(tok.image);", "+          tok = tok.next; ", "+        }", "+        retval += \"\\\"\";", "+        return retval;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6af50766dc3dd2f91f957a336da384b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "ecb6b3252da3d7d3d097f277abccb8227fa3bd5e", "commitAfterChange": "9b7234acc5fdae30e0416741ebffabb14bf8b0b7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public void testMetaKeyPress()", "signatureAfterChange": "    public void testMetaKeyPress()", "diff": ["-//     DefinitionsPane definitions = _frame.getCurrentDefPane();", "-", "-       /* The following is the sequence of key events that happen when the user presses Meta-a */", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_META));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_A));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_UNDEFINED, 'a'));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_A));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "-// \t\t\t\t0, KeyEvent.VK_META));", "-", "-//     DefinitionsDocument doc = definitions.getOpenDocument().getDocument();", "-//     try {", "-//       assertEquals(\"Test if meta key inserted a character into document\", \"\", doc.getText(0, doc.getLength()));", "-//     } catch(BadLocationException ble){", "-//       ble.printStackTrace();", "-//       fail(\"BadLocationException\");", "-//     }", "+     DefinitionsPane definitions = _frame.getCurrentDefPane();", "+     DefinitionsDocument doc = definitions.getOpenDocument().getDocument();", "+     _assertDocumentEmpty(doc, \"point 0\");", "+     /* The following is the sequence of key events that happen when the user presses Meta-a */", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_META));", "+     _assertDocumentEmpty(doc, \"point 1\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_W));", "+     _assertDocumentEmpty(doc, \"point 2\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_UNDEFINED, 'w'));", "+     _assertDocumentEmpty(doc, \"point 3\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_W));", "+     _assertDocumentEmpty(doc, \"point 4\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+\t\t\t\t\t     0, KeyEvent.VK_META));", "+     _assertDocumentEmpty(doc, \"point 5\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb68bee506136491c1e652e528169616", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "52a1b40a342403f03cb2b7e4cdf8d8b28874a356", "commitAfterChange": "202fe65b6d19b63d8f3941f6eff8e18c68fa7232", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public FindReplacePanel(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplacePanel(MainFrame frame, SingleDisplayModel model)", "diff": ["+        if(isSelected)", "+          _searchLimitedSelection.setSelected(false);", "+    });", "+    ", "+    boolean searchSelection = DrJava.getConfig().getSetting(OptionConstants.FIND_ONLY_SELECTION);", "+    _searchLimitedSelection = new JCheckBox(\"Search Limited Selection\", searchSelection);", "+    _machine.setSearchSelectedText(searchSelection);", "+    _searchLimitedSelection.addItemListener(new ItemListener() {", "+      public void itemStateChanged(ItemEvent e) {", "+        boolean isSelected = (e.getStateChange() == ItemEvent.SELECTED);", "+        _machine.setSearchSelectedText(isSelected);", "+        if(isSelected) {", "+          _ignoreTestCases.setSelected(false);", "+          _searchAllDocuments.setSelected(false);", "+          _findNextButton.setEnabled(false);", "+          _findPreviousButton.setEnabled(false);", "+          _replaceFindNextButton.setEnabled(false);", "+          _replaceButton.setEnabled(false);", "+          _replaceFindPreviousButton.setEnabled(false);", "+        }", "+        else {", "+          _findNextButton.setEnabled(true);", "+          _findPreviousButton.setEnabled(true);", "+          _replaceFindNextButton.setEnabled(true);", "+          _replaceButton.setEnabled(true);", "+          _replaceFindPreviousButton.setEnabled(true);", "+        }", "+        DrJava.getConfig().setSetting(OptionConstants.FIND_ONLY_SELECTION, isSelected);", "+        _findField.requestFocusInWindow();        ", "+      }      ", "+        if(isSelected) ", "+          _searchLimitedSelection.setSelected(false);", "+    _ignoreTestCasesPanel.add(_searchLimitedSelection);"]}], "num": 24686}
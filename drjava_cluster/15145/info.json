{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c18cefa38d78f52f0a25b42385c3ab49", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8021def20e2566f4740e57944d1392e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "a4e2145de592013fb29da195ee7f505ebce1be18", "commitAfterChange": "47d80006b1fee008ed7ba52e8eff3cd92ddf84ff", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   private static Iterable<File> listFilesRecursively(final File f, final FileFilter filter,                                                       final FileFilter recursionFilter,                                                       final RecursionStack<File> stack)", "signatureAfterChange": "   private static Iterable<File> listFilesRecursively(final File f, final FileFilter filter,                                                       final FileFilter recursionFilter,                                                       final RecursionStack<File> stack)", "diff": ["-      try {", "-        final File canonicalF = f.getCanonicalFile();", "-        Thunk<Iterable<File>> getMembers = new Thunk<Iterable<File>>() {", "-          public Iterable<File> value() {", "-            Iterable<File> dirFiles = IterUtil.empty();", "-            for (File child : attemptListFilesAsIterable(canonicalF)) {", "-              dirFiles = IterUtil.compose(dirFiles, listFilesRecursively(child, filter, recursionFilter, stack));", "-            }", "-            return dirFiles;", "+      Thunk<Iterable<File>> getMembers = new Thunk<Iterable<File>>() {", "+        public Iterable<File> value() {", "+          Iterable<File> dirFiles = IterUtil.empty();", "+          for (File child : attemptListFilesAsIterable(f)) {", "+            dirFiles = IterUtil.compose(dirFiles, listFilesRecursively(child, filter, recursionFilter, stack));", "-        };", "-        result = IterUtil.compose(result, stack.apply(getMembers, IterUtil.<File>empty(), canonicalF));", "+          return dirFiles;", "+        }", "+      };", "+      try {", "+        result = IterUtil.compose(result, stack.apply(getMembers, IterUtil.<File>empty(), f.getCanonicalFile()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be85dfee3f20c5dc5f05c6548196785f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 277, "methodNumberAfterChange": 278, "signatureBeforeChange": "   private <T extends Pair<?, SignatureChecker>> Iterable<T> mostSpecificSignatures(Iterable<T> allSigs)", "signatureAfterChange": "         @Override public Iterable<MethodInvocationCandidate<I>> forClassType(ClassType t)", "diff": ["+        @Override public Iterable<MethodInvocationCandidate<I>> defaultCase(Type t) { return IterUtil.empty(); }", "+        @Override public Iterable<MethodInvocationCandidate<I>> forClassType(ClassType t) {", "+          List<MethodInvocationCandidate<I>> result = new LinkedList<MethodInvocationCandidate<I>>();", "+          for (DJMethod m : t.ofClass().declaredMethods()) {", "+            if (matches(m)) { result.add(makeInvocationCandidate(m, t)); }", "+          }", "+          return result;", "+        }", "-  /** Compute the most specific signatures in the list. */", "-  private <T extends Pair<?, SignatureChecker>> Iterable<T> mostSpecificSignatures(Iterable<T> allSigs) {", "-//    System.out.println(\"All matching signatures: \" + allSigs);", "-    Iterable<T> result = IterUtil.empty();", "-    for (T sig : allSigs) {", "-      boolean keep = true;", "-      for (T sig2 : allSigs) {", "-        keep &= (sig == sig2) || isMoreSpecific(sig.second(), sig2.second());", "-        if (!keep) { break; }", "-      }", "-      if (keep) { result = IterUtil.compose(result, sig); }", "-    }", "-//    System.out.println(\"Most specific signatures: \" + result);", "-    if (IterUtil.isEmpty(result)) { return allSigs; }", "-    else { return result; }", "-  }"]}], "num": 15145}
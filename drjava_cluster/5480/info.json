{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e30935f7e74cdaf2df6fbfbf30a1a5cf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84f03b3a5714f21158a01c0ca44e2d99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "          public void setUp()", "signatureAfterChange": "          public void setUp()", "diff": ["+      VariableData[] vds = new VariableData[] { new VariableData(\"i\", _publicMav, SymbolData.INT_TYPE, true, null), ", "+                                                new VariableData(SymbolData.BOOLEAN_TYPE) };", "-                            new VariableData[] { new VariableData(\"i\", _publicMav, SymbolData.INT_TYPE, true, null), new VariableData(SymbolData.BOOLEAN_TYPE) },", "+                            vds,", "-      ((MethodData) _bd1).getParams()[0].setEnclosingData(_bd1);                      ", "-      ((MethodData) _bd1).getParams()[1].setEnclosingData(_bd1);                      ", "+      ", "+      _bd1.getParams()[0].setEnclosingData(_bd1);                      ", "+      _bd1.getParams()[1].setEnclosingData(_bd1);                      ", "-      _bd1.addVars(((MethodData)_bd1).getParams());", "-      _cbtc = new ConstructorBodyTypeChecker(_bd1, new File(\"\"), \"\", new LinkedList<String>(), new LinkedList<String>(), new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>());", "+      _bd1.addVars(_bd1.getParams());", "+      _cbtc = new ConstructorBodyTypeChecker(_bd1, ", "+                                             new File(\"\"), ", "+                                             \"\", ", "+                                             new LinkedList<String>(), ", "+                                             new LinkedList<String>(), ", "+                                             new LinkedList<VariableData>(), ", "+                                             new LinkedList<Pair<SymbolData, JExpression>>());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b069811204b5bdfd1679cea3b16bd475", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     @Override public Type visit(ObjectMethodCall node)", "signatureAfterChange": "     @Override public Type visit(ObjectMethodCall node)", "diff": ["-          Expression translation;", "-          if (node instanceof PolymorphicObjectMethodCall) {", "-            translation =", "-              new PolymorphicStaticMethodCall((ReferenceTypeName) resolved, node.getMethodName(), node.getArguments(),", "-                                              ((PolymorphicObjectMethodCall) node).getTypeArguments(),", "-                                              node.getSourceInfo());", "-          }", "-          else {", "-            translation = new StaticMethodCall((ReferenceTypeName) resolved, node.getMethodName(),", "-                                               node.getArguments(), node.getSourceInfo());", "-          }", "+          Expression translation = new StaticMethodCall((ReferenceTypeName) resolved, node.getTypeArgs(),", "+                                                        node.getMethodName(), node.getArguments(),", "+                                                        node.getSourceInfo());", "-      ", "-      Iterable<Type> targs = IterUtil.empty();", "-      if (node instanceof PolymorphicObjectMethodCall) {", "-        targs = checkTypeNameList(((PolymorphicObjectMethodCall) node).getTypeArguments());", "-      }", "+      Iterable<Type> targs = checkTypeNameList(node.getTypeArgs().unwrap(Collections.<TypeName>emptyList())); "]}], "num": 5480}
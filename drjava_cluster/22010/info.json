{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34babc4af2d38e3d392b1bd523840ff0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f1fdc90a4b1e5b83a97a1c5693a90f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "5402d816f4ee865f7ec73de4093cafaa0c215bb0", "commitAfterChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static Test suite()", "signatureAfterChange": "   public void testStaticFieldsConsistent()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-  public static Test suite() {", "-    return new TestSuite(DebugTest.class);", "-  }", "+   */", "+  public void testStaticFieldsConsistent()", "+    throws DebugException, BadLocationException, DocumentAdapterException,", "+    IOException, InterruptedException", "+  {", "+    if (printMessages) {", "+      System.out.println(\"----testStaticFieldsConsistent----\");", "+    }", "+    StepTestListener debugListener = new StepTestListener();", "+    ", "+    // Compile the class", "+    File file = new File(_tempDir, \"DrJavaDebugStaticField.java\");", "+    OpenDefinitionsDocument doc = doCompile(CLASS_WITH_STATIC_FIELD, file);", "+    ", "+    _debugger.addListener(debugListener);", "+", "+    // Start debugger", "+    synchronized(_notifierLock) {", "+      _debugger.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(1);", "+    ", "+    _debugger.toggleBreakpoint(doc,CLASS_WITH_STATIC_FIELD.indexOf(\"System.out.println\"), 4);", "+    debugListener.assertBreakpointSetCount(1);", "+", "+    // Run the foo() method, hitting breakpoint", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"java DrJavaDebugStaticField\");", "+      _waitForNotifies(6);  // (suspended, updated, breakpointReached) *2", "+      _notifierLock.wait();", "+    }", "+", "+    DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "+    DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "+", "+     if (printMessages) {", "+      System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+    }", "+      ", "+    // Ensure breakpoint is hit", "+    debugListener.assertBreakpointReachedCount(2);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(2);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertCurrThreadResumedCount(0);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertEquals(\"x has correct value at start\", \"0\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"assigning x succeeds\", \"5\", interpret(\"DrJavaDebugStaticField.x = 5\"));", "+    assertEquals(\"assignment reflected in this\", \"5\", interpret(\"this.x\"));", "+", "+    // Step over once", "+    synchronized(_notifierLock){", "+      _asynchStep(Debugger.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(3);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(3);  // fires", "+    debugListener.assertBreakpointReachedCount(2);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertInteractionsContains(\"x == 5\");", "+    assertEquals(\"x retains correct value after step\", \"5\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"this has correct value for x after step\", \"5\", interpret(\"this.x\"));", "+", "+    // Step over again", "+    synchronized(_notifierLock) {", "+      _asynchStep(Debugger.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) {", "+      System.out.println(\"****\"+getInteractionsText());", "+    }", "+    debugListener.assertStepRequestedCount(2);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(2); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(4);  // fires", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(4);  // fires", "+    debugListener.assertBreakpointReachedCount(2);", "+    assertEquals(\"x has correct value after increment\", \"6\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"this has correct value for x after increment\", \"6\", interpret(\"this.x\"));", "+", "+    synchronized(_notifierLock){", "+      _asynchDoSetCurrentThread(threadB);", "+      _waitForNotifies(2);  // updated, suspended", "+      _notifierLock.wait();", "+    }", "+    assertEquals(\"x has correct value in other thread\", \"6\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"this has correct value for x in other thread\", \"6\", interpret(\"this.x\"));", "+", "+    // Close doc and make sure breakpoints are removed", "+    _model.closeFile(doc);", "+    debugListener.assertBreakpointRemovedCount(1);  //fires (no waiting)", "+    ", "+    // Shutdown the debugger", "+    if (printMessages) {", "+      System.out.println(\"Shutting down...\");", "+    }", "+    synchronized(_notifierLock) {", "+      _debugger.shutdown();", "+      _waitForNotifies(1);  // shutdown", "+      _notifierLock.wait();", "+    }", "+    ", "+    debugListener.assertDebuggerShutdownCount(1);  //fires", "+    if (printMessages) {", "+      System.out.println(\"Shut down.\");", "+    }", "+    _debugger.removeListener(debugListener);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7646e56ced3f9ab0d234af02e4aafaf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 10;\"), 7);", "+    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 12;\"), 9);", "-      interpretIgnoreResult(\"new Monkey().new MonkeyInner().innerMethod()\");", "+      interpretIgnoreResult(\"new Monkey().new MonkeyInner().new MonkeyInnerInner().innerMethod()\");", "+    _debugger.addWatch(\"innerInnerFoo\");", "-    // Step over once", "+    // Step to line 10", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch value incorrect\", DebugWatchUndefinedValue.ONLY.toString(), watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", \"12\", watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    // Step over twice", "+    // Step to line 11", "-    // Step over thrice", "+    // Step to line 12", "-    // Step over frice(?)", "+    // Step to line 13", "+    if (printMessages) {", "+      System.out.println(\"fifth step\");", "+    }", "+    // Step to line 14", "+    synchronized(_notifierLock){", "+      _asyncStep(Debugger.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(5);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(5); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(6);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(6);  // fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    ", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch value incorrect\", DebugWatchUndefinedValue.ONLY.toString(), watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", \"13\", watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "+    ", "+    if (printMessages) {", "+      System.out.println(\"sixth step\");", "+    }", "+    // Step into static method (line 15)", "+    synchronized(_notifierLock){", "+      _asyncStep(Debugger.STEP_INTO);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(6);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(6); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(7);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(7);  // fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    ", "+    // Test watches in a static context.", "+    watches = _debugger.getWatches();", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "+    assertEquals(\"watch value incorrect\", \"7\", watches.elementAt(0).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(1).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(2).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());"]}], "num": 22010}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cad8f1418fc815fe138efba67784f327", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f775ab7c0a4ecbdb816dfdb4befbf8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 254, "signatureBeforeChange": "              public void dumpBounds()", "signatureAfterChange": "          public void appendConstraints()", "diff": ["-      ", "-      public void dumpBounds() {", "-        boolean printedFirst = false;", "-        for (int i = 0; i < _vars.size(); i++) {", "-          VariableType v = _vars.get(i);", "-          Type upper = v.symbol().upperBound();", "-          Type lower = v.symbol().lowerBound();", "-          boolean printUpper = !isEqual(upper, OBJECT) /*&& !isEqual(upper, TOP)*/;", "-          boolean printLower = !isEqual(lower, NULL) /*&& !isEqual(lower, BOTTOM)*/;", "-          if (printUpper || printLower) {", "-            if (printedFirst) { _result.append(\"; \"); }", "-            else { printedFirst = true; }", "-          }", "-          if (printUpper) { ", "-            _result.append(_names.get(v));", "-            _result.append(\" <: \");", "-            TypeWriter.this.run(upper); // may increase the size of _vars", "-          }", "-          if (printLower) {", "-            if (printUpper) { _result.append(\", \"); }", "-            _result.append(_names.get(v));", "-            _result.append(\" :> \");", "-            TypeWriter.this.run(lower); // may increase the size of _vars", "-          }", "-        }", "-      }", "+  ", "+      public void appendConstraints() {", "+        if (!_boundedVars.isEmpty()) {", "+          _result.append(\" [\");", "+          // not using an iterator because the list may grow during iteration", "+          for (int i = 0; i < _boundedVars.size(); i++) {", "+            if (i > 0) { _result.append(\"; \"); }", "+            VariableType v = _boundedVars.get(i);", "+            Type upper = v.symbol().upperBound();", "+            Type lower = v.symbol().lowerBound();", "+            boolean printUpper = !isEqual(upper, OBJECT) /*&& !isEqual(upper, TOP)*/;", "+            boolean printLower = !isEqual(lower, NULL) /*&& !isEqual(lower, BOTTOM)*/;", "+            if (printUpper) {", "+              _result.append(nameForVariable(v));", "+              _result.append(\" <: \");", "+              run(upper); // may increase the size of _vars", "+            }", "+            if (printLower) {", "+              if (printUpper) { _result.append(\", \"); }", "+              _result.append(nameForVariable(v));", "+              _result.append(\" :> \");", "+              run(lower); // may increase the size of _vars", "+            }", "+          }", "+          _result.append(\"]\");", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05115327c212e8fe7909264847565b2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PreemptingClassLoader.java", "commitBeforeChange": "e6763da4d9e1118450dc76cc396410e4a3b0e46a", "commitAfterChange": "9c8a785db081b77d8ac8b9698b67d2973d82d49a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private boolean shouldPreempt(String name)", "signatureAfterChange": "      private boolean shouldPreempt(String name)", "diff": ["-    if (_classNames.contains(name)) { return true; }", "-    int dollar = name.indexOf('$');", "-    while (dollar != -1) {", "-      if (_classNames.contains(name.substring(0, dollar))) { return true; }", "-      dollar = name.indexOf('$', dollar + 1);", "+    // TODO: improve efficiency by using a sorted data structure", "+    for (String p : _prefixes) {", "+      if (name.startsWith(p)) {", "+        if (name.equals(p) || name.startsWith(p + \".\") || name.startsWith(p + \"$\")) {", "+          return true;", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b8e2eaea9dc1f4254dd5323c85b693d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private void _switchToError(final int errorNum)", "signatureAfterChange": "     void switchToError(int index)", "diff": ["-   */", "-  private void _switchToError(final int errorNum) {", "-    // errorNum is an error number. Because errors without source info ", "-    // come first, check and see if this error is without source info, and", "-    // if so don't try to highlight source info!", "-    boolean errorHasLocation = (errorNum >= _errorsWithoutPositions.length);", "-", "-    if (errorHasLocation) {", "-      // Index into _errors array", "-      int idx = errorNum - _errorsWithoutPositions.length;", "-", "-      _highlightErrorInSource(idx);", "-      _gotoErrorSourceLocation(idx);", "-    }", "-    else {", "-      // Get rid of old highlight, since the error we have no has", "-      // no source location", "-      _removePreviousHighlight();", "-    }", "-", "-    // Select item wants the error number, which what we were passed", "-    _errorListPane.selectItem(errorNum);", "-  }", "+     */", "+    void switchToError(int index) {", "+      if ((index >= 0) && (index < _errorListPositions.length)) {", "+        Position pos = _errorListPositions[index];", "+        CompilerError error = (CompilerError) _errorTable.get(pos);", "+        switchToError(error);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf9c016da925f3c4fe9ffa8a113eb8ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "ff65482ac0c34f9d18b211e3b1fa05371a07fb91", "commitAfterChange": "43bd3e08ba052e97e1d0271e7f1e324beac2ba86", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public boolean closeFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean closeFile(OpenDefinitionsDocument doc)", "diff": ["-    int index = _getDocumentIndex(doc);", "-    if (super.closeFile(doc)) {", "-      // Select next document if not closing all documents", "-      if (!_isClosingAllDocs) {", "-        _ensureNotEmpty();", "-", "-        // Select next document", "-        int size = getDefinitionsDocuments().size();", "-        if (index < 0) {", "-          index = 0;", "-        }", "-        if (index >= size) {", "-          index = size - 1;", "-        }", "-        setActiveDocument(index);", "+      INavigatorItem switchTo =_documentNavigator.getNext(getIDocGivenODD(doc));", "+      /** if we can't move forward, go backwards */", "+      if( switchTo == getIDocGivenODD(doc)) {", "+   switchTo = _documentNavigator.getPrevious(switchTo);", "-      return true;", "-    }", "-    else {", "+", "+      if( super.closeFile(doc) ) {", "+   // Select next document if not closing all documents", "+   if (!_isClosingAllDocs) {", "+       _ensureNotEmpty();", "+", "+       if( getDefinitionsDocumentsSize() == 1 ) {", "+    _setActiveFirstDocument();", "+       }", "+       else {", "+    _setActiveDoc(switchTo);", "+       }", "+   }", "+   return true;", "+      }", "-    }"]}], "num": 16323}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b12cc0edaf9be365593d4e150f0b8fb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c6269f517f5810cf64b3cd8e13ba53a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "diff": ["-        if (n instanceof Expression) { val = Option.some(new ExpressionEvaluator(newBindings, _opt).value(n)); }", "+        // TODO: eliminate hacks that support inferred assignment and void returns", "+        if (n.hasProperty(\"assignmentAsDeclaration\")) {", "+          n = (Node) n.getProperty(\"assignmentAsDeclaration\");", "+        }", "+        if (n instanceof Expression) {", "+          Object evalResult = new ExpressionEvaluator(newBindings, _opt).value(n);", "+          if (evalResult == null && NodeProperties.getType(n).equals(TypeSystem.VOID)) {", "+            val = Option.none();", "+          }", "+          else { val = Option.some(evalResult); }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5635a1f2d379efe1a2b2c8bb7e3954", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "15e62c4c6cc17bdc9cb202b4c5c58df163a8f8cf", "commitAfterChange": "6b388fb1877469cd91350296fabdf9fe8d522b74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "diff": ["-        // TODO: eliminate hacks that support inferred assignment and void returns", "-        if (n.hasProperty(\"assignmentAsDeclaration\")) {", "-          n = (Node) n.getProperty(\"assignmentAsDeclaration\");", "-        }", "-        if (n instanceof Expression) {", "-          Object evalResult = new ExpressionEvaluator(newBindings, _opt).value(n);", "-          if (evalResult == null && NodeProperties.getType(n).equals(TypeSystem.VOID)) {", "-            val = Option.none();", "-          }", "-          else { val = Option.some(evalResult); }", "-        }", "-        else {", "-          StatementEvaluator.Result r = n.acceptVisitor(new StatementEvaluator(newBindings, _opt));", "-          newBindings = r.bindings();", "-          val = r.value();", "-        }", "+        StatementEvaluator.Result r = n.acceptVisitor(new StatementEvaluator(newBindings, _opt));", "+        newBindings = r.bindings();", "+        val = r.value();"]}], "num": 18518}
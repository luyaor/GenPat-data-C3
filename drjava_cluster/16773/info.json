{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8489dec9b071c47a5fc6563deee4d5ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "079a5c892c81feb05192c933d013d417", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "088add2fbe2b148ed5de65332e17119f9cd5c078", "commitAfterChange": "dd87e87bd7504e54354041075b7fdfd1298dfd10", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static File[] getToolsJarFiles(File toolsJar)", "signatureAfterChange": "   public static File[] getToolsJarFiles(File toolsJar)", "diff": ["-    String javaHome = System.getProperty(\"java.home\");", "-    File home = new File(javaHome);", "-    ArrayList<File> files = new ArrayList<File>();", "+    File javaHome = FileOps.getCanonicalFile(new File(System.getProperty(\"java.home\")));", "-    // Check JAVAC_LOCATION", "-    if (toolsJar.exists()) files.add(toolsJar);", "-", "-    // Check $JAVA_HOME/lib/tools.jar", "-    File libDir = new File(home, \"lib\");", "-    File jar1 = new File(libDir, \"tools.jar\");", "-    if (jar1.exists()) files.add(jar1);", "-", "-    // Check $JAVA_HOME/../lib/tools.jar", "-    File libDir2 = new File(home.getParentFile(), \"lib\");", "-    File jar2 = new File(libDir2, \"tools.jar\");", "-    if (jar2.exists()) files.add(jar2);", "-", "-    if (javaHome.toLowerCase().indexOf(\"program files\") != -1) {", "-      // Windows: JavaHome is JRE; guess where SDK is", "-      File jar3 = new File(getWindowsToolsJar(javaHome));", "-      if (jar3.exists()) files.add(jar3);", "+    // We must maintain insertion order, so that the first entries have priority;", "+    // at the same time, we want to eliminate duplicates so that the same tools.jar file", "+    // doesn't show up multiple times.", "+    LinkedHashSet<File> javaHomeParents = new LinkedHashSet<File>();", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(javaHome, \"..\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(javaHome, \"../..\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/java/\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/j2se/\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/local/\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/local/java/\")));", "+    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/usr/local/j2se/\")));", "+    ", "+    LinkedHashSet<File> javaHomes = new LinkedHashSet<File>();", "+    javaHomes.add(javaHome);", "+    String version = System.getProperty(\"java.specification.version\");", "+    final String prefix1 = \"j2sdk\" + version;", "+    final String prefix2 = \"jdk\" + version;", "+    for (File parent : javaHomeParents) {", "+      javaHomes.addAll(FileOps.getFilesInDir(parent, false, new FileFilter() {", "+        public boolean accept(File f) {", "+          String name = f.getName();", "+          return name.startsWith(prefix1) || name.startsWith(prefix2);", "+        }", "+      }));", "+    }", "+    ", "+    LinkedHashSet<File> result = new LinkedHashSet<File>();", "+    if (toolsJar.exists()) result.add(FileOps.getCanonicalFile(toolsJar));", "+    for (File home : javaHomes) {", "+      File tools = new File(home, \"lib/tools.jar\");", "+      if (tools.exists()) { result.add(FileOps.getCanonicalFile(toolsJar)); }", "-    File[] fileArray = new File[files.size()];", "-    files.toArray(fileArray);", "-    return fileArray;", "+    return result.toArray(new File[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dc625f155f7c7027e8ad176fb6bebde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "a7c42e6b408bc2551d30854030021129f731f923", "commitAfterChange": "3d672b118ecc6f4a359a005302c6376fdd753150", "methodNumberBeforeChange": 262, "methodNumberAfterChange": 266, "signatureBeforeChange": "   private void _setUpContextMenus()", "signatureAfterChange": "   private void _setUpContextMenus()", "diff": ["+    _navPanePopupMenuForExternal = new JPopupMenu();", "+    _navPanePopupMenuForExternal.add(_saveAction);", "+    _navPanePopupMenuForExternal.add(_saveAsAction);", "+    _navPanePopupMenuForExternal.add(_revertAction);", "+    _navPanePopupMenuForExternal.addSeparator();", "+    _navPanePopupMenuForExternal.add(_closeAction);", "+    _navPanePopupMenuForExternal.addSeparator();", "+    _navPanePopupMenuForExternal.add(_printAction);", "+    _navPanePopupMenuForExternal.add(_printPreviewAction);", "+    _navPanePopupMenuForExternal.addSeparator();", "+    _navPanePopupMenuForExternal.add(_compileAction);", "+    _navPanePopupMenuForExternal.add(_junitAction);", "+    _navPanePopupMenuForExternal.add(_javadocCurrentAction);", "+    _navPanePopupMenuForExternal.add(_runAction);", "+    _navPanePopupMenuForExternal.addSeparator();", "+    _navPanePopupMenuForExternal.add(_moveToAuxiliaryAction);", "+    ", "+    _navPanePopupMenuForAuxiliary = new JPopupMenu();", "+    _navPanePopupMenuForAuxiliary.add(_saveAction);", "+    _navPanePopupMenuForAuxiliary.add(_saveAsAction);", "+    _navPanePopupMenuForAuxiliary.add(_revertAction);", "+    _navPanePopupMenuForAuxiliary.addSeparator();", "+    _navPanePopupMenuForAuxiliary.add(_closeAction);", "+    _navPanePopupMenuForAuxiliary.addSeparator();", "+    _navPanePopupMenuForAuxiliary.add(_printAction);", "+    _navPanePopupMenuForAuxiliary.add(_printPreviewAction);", "+    _navPanePopupMenuForAuxiliary.addSeparator();", "+    _navPanePopupMenuForAuxiliary.add(_compileAction);", "+    _navPanePopupMenuForAuxiliary.add(_junitAction);", "+    _navPanePopupMenuForAuxiliary.add(_javadocCurrentAction);", "+    _navPanePopupMenuForAuxiliary.add(_runAction);", "+    _navPanePopupMenuForAuxiliary.addSeparator();", "+    _navPanePopupMenuForAuxiliary.add(_removeAuxiliaryAction);", "-            _navPanePopupMenu.show(e.getComponent(), e.getX(), e.getY());", "+            try{", "+              String groupName = _model.getDocumentNavigator().getNameOfSelectedTopLevelGroup();", "+              if(groupName == \"[ Source Files ]\"){", "+                _navPanePopupMenu.show(e.getComponent(), e.getX(), e.getY());", "+              }else if(groupName == \"[ External Files ]\"){", "+                INavigatorItem n = _model.getDocumentNavigator().getCurrentSelectedLeaf();", "+                if(n == null){", "+                  // false alarm, a document is not really selected...", "+                }else{", "+                  OpenDefinitionsDocument d = _model.getODDGivenIDoc(n);", "+                  if(d.isUntitled()){", "+                    _navPanePopupMenu.show(e.getComponent(), e.getX(), e.getY());", "+                  }else{", "+                    _navPanePopupMenuForExternal.show(e.getComponent(), e.getX(), e.getY());", "+                  }", "+                }", "+              }else if(groupName == \"[ Auxiliary Files ]\"){", "+                _navPanePopupMenuForAuxiliary.show(e.getComponent(), e.getX(), e.getY());", "+              }", "+            }catch(GroupNotSelectedException ex){", "+              // noop", "+            }"]}], "num": 16773}
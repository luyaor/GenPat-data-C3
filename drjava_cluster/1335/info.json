{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb240ab7eb25e583924cae0d080a9904", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd1bd72833d296be4f27042270967bfa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   protected ArrayList<String> _getHistoryText(FileOpenSelector selector)     throws IOException, OperationCanceledException", "signatureAfterChange": "   protected ArrayList<String> _getHistoryText(FileOpenSelector selector)     throws IOException, OperationCanceledException", "diff": ["-    throws IOException, OperationCanceledException", "-  {", "+    throws IOException, OperationCanceledException {", "+    if (files == null) throw new IOException(\"No Files returned from FileSelector\");", "+    ", "-    if (files == null) {", "-      throw new IOException(\"No Files returned from FileSelector\");", "-    }", "-", "-    for (int i=0; i < files.length; i++) {", "-      if (files[i] == null) {", "-        throw new IOException(\"File name returned from FileSelector is null\");", "-      }", "-      File c = files[i];", "-      if (c != null) {", "-        try {", "-          FileInputStream fis = new FileInputStream(c);", "-          InputStreamReader isr = new InputStreamReader(fis);", "-          BufferedReader br = new BufferedReader(isr);", "-          String currLine;", "-          while ((currLine = br.readLine()) != null) {", "-            strings.add(currLine);", "-          }", "-          br.close(); // win32 needs readers closed explicitly!", "+    ", "+    for (File f: files) {", "+      if (f == null) throw new IOException(\"File name returned from FileSelector is null\");", "+      try {", "+        FileInputStream fis = new FileInputStream(f);", "+        InputStreamReader isr = new InputStreamReader(fis);", "+        BufferedReader br = new BufferedReader(isr);", "+        while (true) {", "+          String line = br.readLine();", "+          if (line == null) break;", "+          strings.add(line);", "-        catch (IOException ioe) {", "-          throw new IOException(\"File name returned from FileSelector is null\");", "-          //_showIOError(ioe);", "-        }", "+        br.close(); // win32 needs readers closed explicitly!", "-", "+      catch (IOException ioe) { throw new IOException(\"File name returned from FileSelector is null\"); }", "+    ", "-      String text = \"\";", "-      String currString;", "+      StringBuffer text = new StringBuffer();", "-      for (int j = 0; j < strings.size(); j++) {", "-        currString = strings.get(j);", "-        if (currString.length() > 0) {", "+      for (String s: strings) {", "+        int sl = s.length();", "+        if (sl > 0) {", "+          ", "-          if (firstLine && (currString.trim().equals(History.HISTORY_FORMAT_VERSION_2.trim()))) {", "-            formatVersion = 2;", "-          }", "+          if (firstLine && (s.trim().equals(History.HISTORY_FORMAT_VERSION_2.trim()))) formatVersion = 2;", "+          ", "-              if (currString.charAt(currString.length() - 1) == ';') {", "-                text += currString + _newLine;", "-              }", "-              else {", "-                text += currString + \";\" + _newLine;", "-              }", "+              text.append(s);", "+              if (s.charAt(sl - 1) != ';') text.append(';');", "+              text.append(_newLine);", "-              if (!firstLine) { // don't include format version string in output", "-                text += currString + _newLine;", "-              }", "+              if (!firstLine) text.append(s).append(_newLine); // omit version string from output", "-", "+      ", "-      histories.add(text);", "+      histories.add(text.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3dcca9ca9e92d00db6f93ad9caf5e62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-    for (int i = 0; i < rts.length; i++) {", "-      tempSd = getSymbolData(rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+    for (ReferenceType rt: rts) {", "+      tempSd = getSymbolData(rt.getName(), rt.getSourceInfo(), false, false, false);", "-      else if (qualifiedClassName.indexOf(\"$\") != -1) { // class is inner", "-        // check to see if this is an inner class referencing an inner interface", "-        String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-        tempSd = getSymbolData(qualifyingPart + \"$\" + rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+      else if (qualifiedClassName.indexOf(\".\") != -1) { // class is inner", "+        // Check to see if this is an inner class referencing an inner interface", "+        String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\".\"));", "+        tempSd = getSymbolData(qualifyingPart + \".\" + rt.getName(), rt.getSourceInfo(), false, false, false);", "-          tempSd = new SymbolData(qualifyingPart + \"$\" + rts[i].getName());", "+          String tempName = qualifyingPart + \".\" + rt.getName();", "+          tempSd = new SymbolData(tempName);", "-          continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));          ", "+//          System.err.println(\"Creating continuation for \" + tempName  + \" at LLV: 1144\");", "+          continuations.put(tempName, new Pair<SourceInfo, LanguageLevelVisitor>(rt.getSourceInfo(), this));          ", "-//        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "-//        // Couldn't resolve the interface.", "-        _log.log(\"CREATING continuation \" + rts[i].getName() + \" with SourceInfo \" + rts[i].getSourceInfo());", "-        continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));    ", "+        String tempName = rt.getName();", "+        _log.log(\"CREATING continuation \" + tempName + \" with SourceInfo \" + rt.getSourceInfo());", "+//        System.err.println(\"CREATING continuation for \" + tempName + \" at LLV: 1154\");", "+        tempSd = new SymbolData(tempName);", "+        tempSd.setInterface(true);", "+        continuations.put(tempName, new Pair<SourceInfo, LanguageLevelVisitor>(rt.getSourceInfo(), this));    ", "-        superClass = new SymbolData(superClassName);", "-        symbolTable.put(superClassName, sd);", "-        continuations.put(superClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "+        superClass = addSymbolData(si, superClassName);"]}], "num": 1335}
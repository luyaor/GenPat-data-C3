{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6397345fe0d2259c48bd7794e35684ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "499411695044b0607ea7e2a64ae4d21f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void testNumericBitwiseAnd()", "signatureAfterChange": "   public void testNumericBitwiseAnd() throws ExceptionReturnedException", "diff": ["-  public void testNumericBitwiseAnd() {", "-    Node exp = _parseCode(\"new Integer(true) & new Integer(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testNumericBitwiseAnd() throws ExceptionReturnedException {", "+    String text = \"new Character('a') & new Integer(2);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: charValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Character) [(koala.dynamicjava.tree.CharacterLiteral: 'a' a char)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "+", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53871b5ca2822d5f58fd088548a8ac1b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void testNumericBitwiseOr()", "signatureAfterChange": "   public void testNumericBitwiseOr() throws ExceptionReturnedException", "diff": ["-  public void testNumericBitwiseOr() {", "-    Node exp = _parseCode(\"new Integer(true) | new Integer(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testNumericBitwiseOr() throws ExceptionReturnedException {", "+    String text = \"new Short(\\\"2\\\") | new Byte(\\\"2\\\");\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: shortValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Short) [(koala.dynamicjava.tree.StringLiteral: \\\"2\\\" 2 class java.lang.String)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: byteValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Byte) [(koala.dynamicjava.tree.StringLiteral: \\\"2\\\" 2 class java.lang.String)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}], "num": 4624}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9843e77ce9be1c1b9caaee5e9bdf170", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b591ef3c073ab42b4f79ae504940c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "     public Object visit(DivideExpression node)", "signatureAfterChange": "   public Class visit(DivideExpression node)", "diff": ["+   */", "+  public Class visit(DivideExpression node) {", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ln.acceptVisitor(this);", "+    rn.acceptVisitor(this);", "+    Class c = visitNumericExpression(node, \"division.type\");", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.divide(c,", "+                                     ln.getProperty(NodeProperties.VALUE),", "+                                     rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }", "-     */", "-    public Object visit(DivideExpression node) {", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-        ln.acceptVisitor(this);", "-        rn.acceptVisitor(this);", "-        Class c = visitNumericExpression(node, \"division.type\");", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.divide(c,", "-                                             ln.getProperty(NodeProperties.VALUE),", "-        }", "-        return c;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d60fc772edcc8b9bc4ea387973c41682", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "     public Object visit(RemainderExpression node)", "signatureAfterChange": "   public Class visit(RemainderExpression node)", "diff": ["+   */", "+  public Class visit(RemainderExpression node) {", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ln.acceptVisitor(this);", "+    rn.acceptVisitor(this);", "+    Class c = visitNumericExpression(node, \"remainder.type\");", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.remainder(c,", "+                                        ln.getProperty(NodeProperties.VALUE),", "+                                        rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }", "-     */", "-    public Object visit(RemainderExpression node) {", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-        ln.acceptVisitor(this);", "-        rn.acceptVisitor(this);", "-        Class c = visitNumericExpression(node, \"remainder.type\");", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.remainder(c,", "-\t\t\t\t\t\tln.getProperty(NodeProperties.VALUE),", "-\t\t\t\t\t\trn.getProperty(NodeProperties.VALUE)));", "-        return c;", "-    }"]}], "num": 27374}
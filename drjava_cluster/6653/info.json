{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e098d305ca92c3bdafe866718415f6f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42d4129a97bc97a02f9c168ca9c90f41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "11e630b08382faca40628146b7f40625d89f190c", "commitAfterChange": "4742de9e9abcc9abfbe963657e41dfd407aaaeee", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void addRegion(final R r)", "signatureAfterChange": "   public void addRegion(final R r)", "diff": ["-        // Sort regions by line number.", "+        // Sort regions by start offset.", "-        Enumeration lineNumbers = doc.children();", "-        while (lineNumbers.hasMoreElements()) {", "-          DefaultMutableTreeNode lineNumber = (DefaultMutableTreeNode)lineNumbers.nextElement();", "+        Enumeration existingRegions = doc.children();", "+        while (existingRegions.hasMoreElements()) {", "+          DefaultMutableTreeNode existing = (DefaultMutableTreeNode)existingRegions.nextElement();", "-          // if line number of indexed regions is less than new region, continue", "-          int lnr = r.getDocument().getLineOfOffset(r.getStartOffset())+1;", "-          if (((RegionTreeUserObj)lineNumber.getUserObject()).lineNumber() == lnr) {", "+          // if start offset of indexed regions is less than new region, continue", "+          int ofs = r.getStartOffset();", "+          if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() == ofs) {", "-            _regTree.scrollPathToVisible(new TreePath(lineNumber));", "+            _regTree.scrollPathToVisible(new TreePath(existing));", "-          else if (((RegionTreeUserObj)lineNumber.getUserObject()).lineNumber() > lnr) {", "+          else if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() > ofs) {", "-            _regTreeModel.insertNodeInto(newRegion, doc, doc.getIndex(lineNumber));", "+            _regTreeModel.insertNodeInto(newRegion, doc, doc.getIndex(existing));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "934c4cc1041778f776968533ed90fc0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "b5f59af8481ed1aa24e82d114a52e3948d4e83f5", "commitAfterChange": "4a90aa5d0c3f437e0c1cdaccfb311a2852121f92", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   void getDistToCurrentBraceNewline(IndentInfo braceInfo)", "signatureAfterChange": "   int getDistToCurrentBraceNewline(int distToBraceCurrent)", "diff": ["+    */", "+  int getDistToCurrentBraceNewline(int distToBraceCurrent) {", "+    ", "+    TokenList.Iterator copyCursor = _cursor._copy();", "+    ", "+    if (distToBraceCurrent == -1 || copyCursor.atStart()) return -1; // no brace", "+    ", "+    copyCursor.move(- distToBraceCurrent);", "+    int walkcount = _getDistToPreviousNewline(copyCursor);", "+    ", "+    if (walkcount == -1) return  -1;  // no newline", "+    else return walkcount + distToBraceCurrent;", "+  }"]}], "num": 6653}
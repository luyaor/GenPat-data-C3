{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6954d2aae46efb346c84148599843188", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39633548a2a891bbe4544886e68f948c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void testReopenFile()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testReopenFile()     throws BadLocationException, IOException", "diff": ["-        assertEquals(\"file to open\", tempFile, file);", "+        try {", "+          assertEquals(\"file to open\", tempFile.getCanonicalPath(), ", "+                       file.getCanonicalPath());", "+        }", "+        catch (IOException ioe) {", "+          throw new UnexpectedException(ioe);", "+        }", "+      fail(\"file should already be open\");", "+    }", "+    catch (AlreadyOpenException aoe) {", "+      // Should not be open", "+      listener.assertOpenCount(1);", "+    }", "+    catch (OperationCanceledException oce) {", "+      // Should not be canceled", "+      fail(\"Open was unexpectedly canceled!\");", "+    }", "+    ", "+    // Now reopen same file with a different path", "+    //  eg. /tmp/MyFile -> /tmp/./MyFile", "+    try {", "+      File parent = tempFile.getParentFile();", "+      String dotSlash = \".\" + System.getProperty(\"file.separator\");", "+      parent = new File(parent, dotSlash);", "+      File sameFile = new File(parent, tempFile.getName());", "+      OpenDefinitionsDocument doc2 = _model.openFile(new FileSelector(sameFile));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d9defb1137969f54dddfc9833495f01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 246, "signatureBeforeChange": "           public File getFile() throws FileMovedException", "signatureAfterChange": "   public synchronized void addToBrowserHistory()", "diff": ["-          public OpenDefinitionsDocument getDocument() { return odd; }", "-          public File getFile() throws FileMovedException { return odd.getFile(); }", "+  /** Add the current location to the browser history. */", "+  public synchronized void addToBrowserHistory() {", "+    final OpenDefinitionsDocument doc = getActiveDocument();", "+    ", "+    if (doc!=null) {", "+      doc.acquireReadLock();", "+      try {", "+        final Position startPos = doc.createPosition(doc.getCaretPosition());", "+        final Position endPos = doc.createPosition(doc.getLineEndPos(doc.getCaretPosition()));", "+        getBrowserHistoryManager().addRegion(new SimpleDocumentRegion(doc, doc.getFile(), startPos.getOffset(), endPos.getOffset()));", "+      }", "+      catch (FileMovedException fme) {", "+        throw new UnexpectedException(fme);", "+      }", "+      catch (BadLocationException ble) {", "+        throw new UnexpectedException(ble);", "+      }", "+      finally { doc.releaseReadLock(); }", "+    }"]}], "num": 15420}
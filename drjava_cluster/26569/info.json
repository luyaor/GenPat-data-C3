{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cafa5294a1df927fe5c4d516686a4819", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3007d2cd702f6d4ef0009ca159ea5a89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)     throws BadLocationException", "diff": ["-  public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)", "+  public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)", "-//    System.err.println(\"findPrevDelimiter(\" + pos + \", \" + Arrays.toString(delims) + \", \" + skipParenPhrases);", "+//    System.err.println(\"findPrevDelimiter(\" + pos + \", \" + Arrays.toString(delims) + \", \" + skipBracePhrases);", "-    final Query key = new Query.PrevDelimiter(pos, delims, skipParenPhrases);", "+    final Query key = new Query.PrevDelimiter(pos, delims, skipBracePhrases);", "+    ", "+    ", "-    int i;  // index of for loop below", "+    int i;  // index for for loop below", "-        // Move reduced model to location pos", "-        _setCurrentLocation(pos);  // reduced model points to pos == reducedPos", "-        ", "+    ", "-        for (i = pos-1; i >= 0; i--) {", "+        for (i = pos - 1; i >= 0; i--) {", "-          ", "-          if (match(text.charAt(i),delims)) {", "-            // Move reduced model to walker's location", "-            _setCurrentLocation(i);  // reduced model points to i", "-            reducedPos = i;          // reduced model points to reducedPos", "-            ", "-            // Check if matching char should be ignored because it is within a comment, quotes, or ignored paren phrase", "-            ReducedModelState state = _reduced.getStateAtCurrent();", "-            if (! state.equals(ReducedModelState.FREE) || _isStartOfComment(text, i)", "-                  || ((i > 0) && _isStartOfComment(text, i - 1)) || (skipParenPhrases && posInParenPhrase()))", "-              continue;  // ignore matching char ", "-            else break;  // found valid matching char", "+              // Move reduced model to location pos", "+          _setCurrentLocation(i);  // reduced model points to i", "+          if (isShadowed() || isCommentOpen(text, i)) {", "+//            System.err.println(text.charAt(i) + \" at pos \" + i + \" is shadowed\");", "+            continue;", "-        }", "+          char ch = text.charAt(i);", "+          ", "+          if (match(ch, delims) /* && ! isShadowed() && (! skipParenPhrases || ! posInParenPhrase())*/) {", "+            reducedPos = i;    // record valid match                                                                              ", "+            break;", "+          }", "+          ", "+          if (skipBracePhrases && match(ch, CLOSING_BRACES) ) {  // note that delims have already been matched", "+//            Utilities.show(\"closing bracket is '\" + ch + \"' at pos \" + i);", "+            _setCurrentLocation(i + 1); // move cursor immediately to right of ch (a brace)", "+//            Utilities.show(\"_currentLocation = \" + _currentLocation);", "+            int dist = balanceBackward();", "+            if (dist == -1) { // if braces do not balance, return failure", "+              i = -1;", "+//              Utilities.show(\"dist = \" + dist + \" No matching brace found\");", "+              break;", "+            }", "+            assert dist > 0;", "+//            Utilities.show(\"text = '\" + getText(i + 1 - dist, dist) + \"' dist = \" + dist + \" matching bracket is '\" + text.charAt(i) + \"' at pos \" + i);", "+            _setCurrentLocation(i + 1 - dist);  // skip over balanced brace text, decrementing _currentLocation", "+            i = _currentLocation;", "+            // Decrementing i skips over matching brace", "+            continue;", "+          }", "+        }  // end for", "-        /* Invariant: same as for loop except that -1 <= i <= reducedPos <= pos */", "+        /* Invariant: same as for loop except that -1 <= i <= reducedPos <= pos && 0 <= reducedPos */", "-//      System.err.println(\"Returning \" + reducedPos);", "+//      Utilities.show(\"findPrevDelimiter returning \" + reducedPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3214e7459833ca1a1b30a37bc994cdc8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "17f7883ffae3637cf9ec6b5aa5b32f12aa6f1a56", "commitAfterChange": "c3f7f9d7c32c110a7370bfc2864b2e98a988bba6", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public int getCurrentLine()", "signatureAfterChange": "   public int getCurrentLine()", "diff": ["+    // don't know if this does anything.", "+    if (_cachedNextLineLoc == -1 ){ initNextLineNum(); }", "+    int here = getCurrentLocation();", "+    // let's see if we get off easy", "+    if( _cachedPrevLineLoc < here && here < _cachedNextLineLoc ){ ", "+      return _cachedLineNum;", "+    }", "+    ", "+    // test to see which is easier: starting from the top", "+    // or calculating relatively.", "+    if( _cachedLocation - here > here ){ ", "+      _cachedLineNum = getLineFromScratch(); ", "+    }", "+    else {", "+      int lineOffset = getRelativeLine(here);", "+      _cachedLineNum = _cachedLineNum+lineOffset;      ", "+    }", "+    _cachedLocation = here;", "+    _cachedPrevLineLoc = getLineStartPos(here);", "+    _cachedNextLineLoc = here + _reduced.getDistToNextNewline();", "+    return _cachedLineNum;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec9688de29cd3e5d0a7c38e64309c08d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "b91661a64fee7b8cdd1ac1251ccb6b9269f4f733", "commitAfterChange": "223d0c96bf01ec9cd58365db0a5f43a8cc81523f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      public boolean showFile(SourceSource src, int line, int count)", "signatureAfterChange": "      public boolean showFile(SourceSource src, int line, int count)", "diff": ["-            _model.setActiveDocument(doc);", "-            DrJava.consoleErr().println(\"Showing line \" + line);", "+            _model.setActiveDocument(doc);\t    ", "+            DrJava.consoleErr().println(\"Showing line \" + line);\t    ", "-              int pos = doc.gotoLine(line);", "-              _frame.getCurrentDefPane().setCaretPosition(pos);", "+ \t      if (_curBP>0 && line != _curBP) // remove existing bp", "+\t\t_frame.getCurrentDefPane().getHighlighter().removeHighlight(_curBreakpointTag);", "+", "+\t      _curBreakpointTag = highlightLine(line, _activeBreakpointHighlightPainter);", "+\t      _curBP = line;", "+\t      \t      ", "+\t      // _frame.getCurrentDefPane().setCaretPosition(doc.getDocument().getCurrentLocation());", "+\t      ", "-                int pos = doc.gotoLine(line);", "-                _frame.getCurrentDefPane().setCaretPosition(pos);", "+\t\tif (_curBP>0 && line != _curBP) // remove existing bp", "+\t\t  _frame.getCurrentDefPane().getHighlighter().removeHighlight(_curBreakpointTag);", "+", "+  \t        _curBreakpointTag = highlightLine(line, _activeBreakpointHighlightPainter);", "+\t        _curBP = line;", "+\t      \t      ", "+\t        // _frame.getCurrentDefPane().setCaretPosition(doc.getDocument().getCurrentLocation());", "+"]}], "num": 26569}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6240c28b1bb28cb5e0387a9e0a26639f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "490ab709ae604d2d1b74358b4c6128b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "commitAfterChange": "f998596e58db467638fd2c5025aacbfb31d4199f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, int start, int len,                                             final boolean wrapped, final boolean allWrapped)", "signatureAfterChange": "   private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, final int start, final int len,                                             final boolean wrapped, final boolean allWrapped)", "diff": ["-  private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, int start, int len, ", "+  private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, final int start, final int len, ", "-      // loop carried variables are text, len, start; ", "-      // loop invariant variables are _doc, docLen, _isForward, findWord, wordLen.", "-      // On forward search, (start + len) is invariant; on backward search start is invariant.", "+      // loop carried variables are rem, foundOffset; ", "+      // loop invariant variables are _doc, docLen, _isForward, findWord, wordLen, start, len.", "+      // Invariant:  on forwardsearch, foundOffset + rem == len; on backward search foundOffset == rem.", "-      while (len >= wordLen) {", "-        ", "+      int foundOffset = _isForward? 0 : len;", "+      int rem = len;", "+//      _log.log(\"Starting search loop; text = '\" + text + \"' findWord = '\" + findWord + \"' forward? = \" + _isForward + \" rem = \" + rem + \" foundOffset = \" + foundOffset);", "+      while (rem >= wordLen) {", "+", "-        int foundOffset = _isForward ? text.indexOf(findWord) : text.lastIndexOf(findWord);", "+        foundOffset = _isForward ? text.indexOf(findWord, foundOffset) : text.lastIndexOf(findWord, foundOffset);", "+//        _log.log(\"foundOffset = \" + foundOffset);", "-          int adjustedOffset = foundOffset + wordLen;", "-          start += adjustedOffset;                       // start is moved to match", "-          text = text.substring(adjustedOffset, len);    // len is length of text before update", "-          len = len - adjustedOffset;                    // len is updated to length of text after update", "-          matchLocation = start;                         // matchLocation is index in _doc of right edge of match", "+          foundOffset += wordLen;                          // skip over matched word", "+//          text = text.substring(adjustedOffset, len);    // len is length of text before update", "+          rem = len - foundOffset;                         // len is updated to length of remaining text to search", "+          matchLocation = foundLocation + wordLen;         // matchLocation is index in _doc of right edge of match", "-        else {", "-          len = foundOffset;                             // start is left invariant; len is moved to match", "-          matchLocation = start + foundOffset;           // matchLocation is index in _doc of left edge of match", "-          text = text.substring(0, len);                 // len is length of text after update", "+        else { ", "+          foundOffset -= wordLen;                        // skip over matched word        ", "+          rem = foundOffset;                             // rem is adjusted to match foundOffset", "+          matchLocation = foundLocation;                 // matchLocation is index in _doc of left edge of match", "+//          text = text.substring(0, len);               // len is length of text after update", "-        ", "+//        _log.log(\"rem = \" + rem);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b34b4859b7e99c13fa5529defde68c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   private int _findWrapped(int start, int end)", "signatureAfterChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "diff": ["+   */  ", "+  private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped) {", "+    int newLen, newStart;", "+    ", "+    assert (_isForward && start + len == doc.getLength()) || (! _isForward && start == 0);", "+    ", "+//    System.err.println(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +", "+//                       doc.getLength() + \", _isForward = \" + _isForward);", "+", "+    doc.readLock();", "+    try {", "+      if (doc.getLength() == 0) return new FindResult(doc, -1, true, allWrapped);", "+      if (_isForward) {", "+        newLen = start;", "+        newStart = 0;", "+      }", "+      else {", "+        newStart = len;", "+        newLen = doc.getLength() - len;", "+      }", "+//      System.err.println(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "+//                     newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);", "+      return _findNextInDocSegment(doc, newStart, newLen, true, allWrapped);", "+    }", "+    finally { doc.readUnlock(); }", "+  } ", "-   */", "-  private int _findWrapped(int start, int end) {", "-    int foundOffset = -1;", "-    try{", "-      boolean stillSearching = true;", "-      while(stillSearching) {", "-        stillSearching = false;", "-        _wrapped = true;", "-        int docLen;", "-        String findSpace;", "-        _doc.acquireReadLock();  ", "-        try { ", "-          docLen = _doc.getLength(); ", "-          if (!_searchBackwards) {", "-            if (end > docLen) end = docLen;", "-          }", "-          ", "-          else {  // searching backwards", "-            if (start < 0){ ", "-              start = 0;", "-              end = docLen;", "-            }", "-          }", "-          findSpace = _doc.getText(start, end);", "-        }", "-        finally { _doc.releaseReadLock(); }", "-        String findWord = _findWord;", "-        ", "-        if (!_matchCase) {", "-          findSpace = findSpace.toLowerCase();", "-          findWord = findWord.toLowerCase();", "-        }", "-        ", "-        foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-          : findSpace.lastIndexOf(findWord);", "-        ", "-        if (foundOffset >= 0) {", "-          int locationToIgnore = start + foundOffset;", "-          _model.getODDForDocument(_doc).setCurrentLocation(locationToIgnore);", "-          if (_shouldIgnore(locationToIgnore, _doc)) {", "-            foundOffset += start;", "-            if (!_searchBackwards) {", "-              foundOffset += findWord.length();", "-              start = foundOffset;", "-              end = docLen-foundOffset;", "-              stillSearching = true;", "-              continue;", "-              // return _findWrapped(foundOffset, docLen-foundOffset);", "-            }", "-            end = foundOffset-start;", "-            stillSearching = true;", "-            continue;", "-            // return _findWrapped(start, foundOffset-start);", "-          }       ", "-          // otherwise we have found it", "-//        _found = true;", "-          foundOffset += start;", "-          if (!_searchBackwards) foundOffset += findWord.length();", "-          _current = _doc.createPosition(foundOffset);  // thread-safe operation on _doc", "-        }", "-    return foundOffset;"]}], "num": 29115}
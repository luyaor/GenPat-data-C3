{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f9b14462224a3da0896bb68de13d7d2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "096b85a5e0bab185c9a03af31b1063e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 280, "methodNumberAfterChange": 273, "signatureBeforeChange": "      protected boolean inherits(Type child, PredicateSet<MethodInvocationCandidate<I>> childMatches,                                MethodInvocationCandidate<I> match)", "signatureAfterChange": "      protected boolean inherits(Type child, PredicateSet<DJMethod> childMatches, DJMethod match)", "diff": ["-    protected boolean inherits(Type child, PredicateSet<MethodInvocationCandidate<I>> childMatches,", "-                               MethodInvocationCandidate<I> match) {", "+    protected boolean inherits(Type child, PredicateSet<DJMethod> childMatches, DJMethod match) {", "-        for (MethodInvocationCandidate<I> childMethod : childMatches) {", "-          if (childMethod.overrides(match)) { return false; }", "+        for (DJMethod childMethod : childMatches) {", "+          if (overrides(childMethod, match)) { return false; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed484f88adae276c988350d89bcc097", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 355, "methodNumberAfterChange": 300, "signatureBeforeChange": "           public boolean contains(DJClass c)", "signatureAfterChange": "      protected boolean inherits(Type child, PredicateSet<ClassType> childMatches, ClassType match)", "diff": ["+", "+    protected boolean inherits(Type child, PredicateSet<ClassType> childMatches, ClassType match) {", "+      // TODO: follow the JLS definition of class inheritance (8.5)", "+      return childMatches.isEmpty() && !match.ofClass().accessibility().equals(Access.PRIVATE);", "+    }", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              return includePrivate || !c.accessibility().equals(Access.PRIVATE);", "-            }", "-            else { return false; }", "-          }"]}], "num": 31331}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "502b4cbefe6c784c55f8cf1617cb91c1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06558bfcf830daf87c745b4b658242da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   @Override public TypeContext visit(ImportDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(ImportDeclaration node)", "diff": ["-        if (ts.containsStaticField(t, member)) { result = result.importField(t.ofClass(), member); }", "-        if (ts.containsStaticMethod(t, member)) { result = result.importMethod(t.ofClass(), member); }", "-        if (ts.containsStaticClass(t, member)) { result = result.importMemberClass(t.ofClass(), member); }", "+        if (ts.containsStaticField(t, member, context.accessModule())) {", "+          result = result.importField(t.ofClass(), member);", "+        }", "+        if (ts.containsStaticMethod(t, member, context.accessModule())) {", "+          result = result.importMethod(t.ofClass(), member);", "+        }", "+        if (ts.containsStaticClass(t, member, context.accessModule())) {", "+          result = result.importMemberClass(t.ofClass(), member);", "+        }", "-            if (ts.containsClass(t, split.second())) {", "+            if (ts.containsClass(t, split.second(), context.accessModule())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "497ea05d2951dc33f8a7c59d9438cb18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "commitAfterChange": "1c816952b5b8421dc41f789510e8d7ee742c6828", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "         private void compileClass(Node ast)", "signatureAfterChange": "         private void compileClass(Node ast)", "diff": ["+    DJClass declaring = _treeClass.declaringClass();", "+    if (declaring != null) {", "+      // visitOuter corresponds to Class.getEnclosingClass(), visitInner to Class.getDeclaringClass()", "+      _classWriter.visitOuterClass(className(declaring), null, null); ", "+      _classWriter.visitInnerClass(_name, className(declaring), _treeClass.declaredName(), accessFlags);", "+    }", "-      _classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_SYNTHETIC, BINDINGS_FACTORY_FIELD,", "+      // to be accessible to inner classes, must not be private", "+      _classWriter.visitField(ACC_FINAL | ACC_SYNTHETIC, BINDINGS_FACTORY_FIELD,", "+        }", "+        @Override public Void visit(ClassDeclaration member) {", "+          recordInnerClass(member, isInterface); return null;", "+        }", "+        @Override public Void visit(InterfaceDeclaration member) {", "+          recordInnerClass(member, isInterface); return null;"]}], "num": 864}
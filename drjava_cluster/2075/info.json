{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9356d297c8cf062d36559c23fcd0e3c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2024ba07f0931646549019758b6e18b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JLSTypeSystem.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "          @Override public Boolean forVariableType(VariableType t)", "signatureAfterChange": "          @Override public Boolean forVariableType(final VariableType t)", "diff": ["-    @Override public Boolean forVariableType(VariableType t) {", "+    @Override public Boolean forVariableType(final VariableType t) {", "-        Type lower = t.symbol().lowerBound();", "-        Type upper = t.symbol().upperBound();", "-        return lower.apply(this) && upper.apply(this) && isSubtype(lower, upper) && !containsVar(lower, t);", "+        Thunk<Boolean> recur = new Thunk<Boolean>() {", "+          public Boolean value() {", "+            Type lower = t.symbol().lowerBound();", "+            Type upper = t.symbol().upperBound();", "+            return lower.apply(WellFormedTester.this) && upper.apply(WellFormedTester.this) &&", "+                    isSubtype(lower, upper) && !containsVar(lower, t);", "+          }", "+        };", "+        // assume it's well-formed if we're already checking it", "+        return _stack.apply(recur, true, t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae6fdbe57bf71b0e0db19aa415a38496", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JLSTypeSystem.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 137, "signatureBeforeChange": "              public Type merge(PrecomputedRecursionStack<Set<Type>, Wildcard> joinStack)", "signatureAfterChange": "              public Type merge(final PrecomputedRecursionStack<Set<Type>, Wildcard> joinStack)", "diff": ["-      public Type merge(PrecomputedRecursionStack<Set<Type>, Wildcard> joinStack) {", "+      public Type merge(final PrecomputedRecursionStack<Set<Type>, Wildcard> joinStack) {", "-          Wildcard result = new Wildcard(new BoundedSymbol(new Object()));", "-          result.symbol().initializeLowerBound(NULL);", "-          if (!joinStack.contains(_types)) {", "-            joinStack.push(_types, result);", "-            try { result.symbol().initializeUpperBound(join(_types, joinStack)); }", "-            finally { joinStack.pop(_types); }", "-          }", "-          return result;", "+          final Wildcard result = new Wildcard(new BoundedSymbol(new Object()));", "+          Thunk<Wildcard> recur = new Thunk<Wildcard>() {", "+            public Wildcard value() {", "+              result.symbol().initializeLowerBound(NULL);", "+              result.symbol().initializeUpperBound(join(_types, joinStack));", "+              return result;", "+            }", "+          };", "+          return joinStack.apply(recur, result, _types);"]}], "num": 2075}
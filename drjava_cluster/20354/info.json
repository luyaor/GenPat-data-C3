{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bf9ffda6ccc5c25753cf08b9012ca47", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39f1056d345785d1d1e9580db6d0c755", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugWatchDataTest.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testFirstCreation()", "signatureAfterChange": "   public void testFirstCreation()", "diff": ["-    assertEquals(\"should have a name on startup\",", "+    assertEquals(\"should have a name on startUp\",", "-    assertEquals(\"should have no value on startup\",", "+    assertEquals(\"should have no value on startUp\",", "-    assertEquals(\"should have no type on startup\",", "+    assertEquals(\"should have no type on startUp\",", "-    assertTrue(\"should not be changed on startup\", !data.isChanged());", "+    assertTrue(\"should not be changed on startUp\", !data.isChanged());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af0e4e0f457aa82d2b248b4defa91547", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "42465b0c95801c83cae0d8e781c43cb17e95c775", "commitAfterChange": "dd7f7fbbfae186b155b4ab01f1629e1623154745", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private Class _checkBinaryExpression(String text, String leftExpected, String rightExpected)      throws ExceptionReturnedException", "signatureAfterChange": "      private Class _checkBinaryExpression(String text, String leftExpected, String rightExpected)      throws ExceptionReturnedException", "diff": ["-    assertEquals(\"Left should have unboxed correctly.\", leftExpected, actual);", "+    assertEquals(\"Left should have typed correctly.\", leftExpected, actual);", "-    assertEquals(\"Right should have unboxed correctly.\", rightExpected, actual);", "+    assertEquals(\"Right should have typed correctly.\", rightExpected, actual);", "-    _interpreter.interpret(text);", "+    _interpreter.interpret(\"int x; Integer X; Boolean B; boolean b; \"+ text);"]}], "num": 20354}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7606ac249e5c3f59c91c1c8b833cb8a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30014c4326822fb212079f12f9ef1680", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ClassDeclaration.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ClassDeclaration(ModifierSet mods, String name, ReferenceTypeName ext, List<? extends ReferenceTypeName> impl, List<Node> body,                           SourceInfo si)", "signatureAfterChange": "   public ClassDeclaration(ModifierSet mods, String name, Option<List<TypeParameter>> tparams, ReferenceTypeName ext,                            List<? extends ReferenceTypeName> impl, List<Node> body)", "diff": ["+   */", "+  public ClassDeclaration(ModifierSet mods, String name, Option<List<TypeParameter>> tparams, ReferenceTypeName ext,", "+                           List<? extends ReferenceTypeName> impl, List<Node> body) {", "+    this(mods, name, tparams, ext, impl, body, SourceInfo.NONE);", "-  public ClassDeclaration(ModifierSet mods, String name, ReferenceTypeName ext, List<? extends ReferenceTypeName> impl, List<Node> body,", "-                          SourceInfo si) {", "-    super(mods, name, impl, body, si);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d35e98c635073dd1b5dd24f3b2bce6d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/AnonymousAllocation.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public AnonymousAllocation(ReferenceTypeName tp, List<? extends Expression> args, List<Node> memb, SourceInfo si)", "signatureAfterChange": "   public AnonymousAllocation(Option<List<TypeName>> targs, ReferenceTypeName tp, List<? extends Expression> args,                               List<Node> memb)", "diff": ["+   */", "+  public AnonymousAllocation(Option<List<TypeName>> targs, ReferenceTypeName tp, List<? extends Expression> args,", "+                              List<Node> memb) {", "+    this(targs, tp, args, memb, SourceInfo.NONE);", "-    super(tp, args, si);"]}], "num": 23178}
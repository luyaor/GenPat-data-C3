{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "830ef3cbe77cb58ad94726d50538f378", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29506457086de5979738634d6a0a5204", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result,                                                           TypeData[] dimensions_result)", "signatureAfterChange": "   public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData typeRes,                                                           TypeData[] dimensions_result)", "diff": ["-  public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, ", "+  public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData typeRes, ", "-    if (type_result instanceof ArrayData) {", "-      int dim = ((ArrayData) type_result).getDimensions();", "+    if (typeRes instanceof ArrayData) {", "+      int dim = ((ArrayData) typeRes).getDimensions();", "-        _addError(\"You are trying to initialize an array of type \" + type_result.getName() + \" which requires \" + dim +", "+        _addError(\"You are trying to initialize an array of type \" + typeRes.getName() + \" which requires \" + dim +", "-    if (type_result == null || !assertFound(type_result, that)) {return null;}", "-    return type_result.getInstanceData();", "+    if (typeRes == null || !assertFound(typeRes, that)) {return null;}", "+    return typeRes.getInstanceData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a65c124fca8588aa89013cba73f70c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "   public TypeData forCastExpression(CastExpression that)", "signatureAfterChange": "   public TypeData forCastExpression(CastExpression that)", "diff": ["-    final SymbolData type_result = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType(), false);", "-    final TypeData value_result = that.getValue().visit(this);", "+    final SymbolData typeRes = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType(), false);", "+    final TypeData valueRes = that.getValue().visit(this);", "-    if (type_result == null) {", "+    if (typeRes == null) {", "-    if (value_result == null || !assertFound(value_result, that.getValue())) {", "+    if (valueRes == null || !assertFound(valueRes, that.getValue())) {", "-      return type_result.getInstanceData();", "+      return typeRes.getInstanceData();", "-    // Neither type_result nor value_result are null.", "-    return forCastExpressionOnly(that, type_result, value_result);", "+    // Neither typeRes nor valueRes are null.", "+    return forCastExpressionOnly(that, typeRes, valueRes);"]}], "num": 10416}
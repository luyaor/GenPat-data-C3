{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d81cf3cadf06fc48451b8423ebe5419d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c9bc83e566ffc72be2e7f285c377b5c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/generic/GenericTreeTest.java", "commitBeforeChange": "38c5f71d4cacb939b5f81114fa6e5e26d271c57b", "commitAfterChange": "9b6f07f2b132c681f98fe8fb44100b84e5395f40", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public void testInterpretInnerPolyConstructorsVarArgs()", "signatureAfterChange": "     public void testInterpretGenericClassWithAmpersand()", "diff": ["-    //Testing Polymorph Constructors with varargs", "-    public void testInterpretInnerPolyConstructorsVarArgs(){", "+    //Testing type params with &", "+    public void testInterpretGenericClassWithAmpersand(){", "-        \"public class B<A extends Number> {\\n\"+", "-        \"  public class C<D extends Integer> {\\n\"+", "-        \"    String str = \\\"\\\";\\n\"+", "-        \"    public <T extends String> C(T ... s){\\n\"+", "-        \"      for(int i=0;i<s.length;i++) {\\n\"+", "-        \"        str = str+s[i];\\n\"+", "-        \"      }\\n\"+", "-        \"    }\\n\"+", "-        \"    public String getStr(){\\n\"+", "-        \"      return str;\\n\"+", "-        \"    }\\n\"+", "-        \"  }\\n\"+", "+        \"public interface I {}\\n\"+", "+        \"public interface I2 {}\\n\"+", "+        \"public class C {}\\n\"+", "+        \"public class B<T extends C & I & I2> {\\n\"+", "-        \"B<Double> b = new B<Double>();\\n\"+", "-        \"b.new C<Integer>(\\\"Str1\\\",\\\"Str2\\\",\\\"Str3\\\").getStr();\\n\";", "-    ", "-      assertEquals(\"Str1Str2Str3\", interpret(testString));", "+        \"B<C> b = new B<C>();\\n\"+", "+        \"b\";", "+", "+      assertEquals(\"B\", interpret(testString).getClass().getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1877980be85ee907e5a4174a73126812", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/src-jsr14v1_2/edu/rice/cs/drjava/model/compiler/Javac141Compiler.java", "commitBeforeChange": "015d995aaac9945bf19ce48723d9a6dd74ca0c24", "commitAfterChange": "3e31dad6a289d5a146929ce28de9c5a45f322c9f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      protected Context createContext(File[] sourceRoots)", "signatureAfterChange": "      protected Context createContext(File[] sourceRoots)", "diff": ["-    options.put(\"-gj\", \"\");", "+    _addGenericsOption(options);", "-    // Set output classfile version to 1.1", "-    options.put(\"-target\", \"1.1\");", "+    // Set output target version", "+    _addSourceAndTargetOptions(options);", "+    ", "-", "-    // Allow assertions in 1.4 if configured and in Java >= 1.4", "-    String version = System.getProperty(\"java.version\");", "-    if ((_allowAssertions) && (version != null) &&", "-        (\"1.4.0\".compareTo(version) <= 0)) {", "-      options.put(\"-source\", \"1.4\");", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3767911f46c2fed0dd07021a21073376", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "signatureAfterChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "diff": ["-    _log.log(\"First test of NoValidTests complete\");", "-    ", "-    _log.log(\"Second listener added to model\");", "-    System.out.println(\"-----> file = \"+file+\" -- canWrite() = \"+file.canWrite()+\" -- exists() = \"+file.exists());", "-    doc.saveFile(new FileSelector(file));", "+//    System.err.println(\"-----> file = \"+file+\" -- canWrite() = \"+file.canWrite()+\" -- exists() = \"+file.exists());", "+    saveFile(doc, new FileSelector(file));", "-    ", "-    _log.log(\"Resetting compile counts\");", "+", "-    doc2.saveFile(new FileSelector(file2));", "+    saveFile(doc2, new FileSelector(file2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c8ec8486cb3fa13199cee936c31b627", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "12434dc2dab84dfe1024e2e2b39fd8f27da62bbd", "commitAfterChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public synchronized void testStepIntoOverBreakpoint() throws Exception", "signatureAfterChange": "   public synchronized void testStepIntoOverBreakpoint() throws Exception", "diff": ["-    _log.log(\"----After breakpoint:\\n\" + getInteractionsText());", "+//    _log.log(\"----After breakpoint:\\n\" + getInteractionsText());", "-    _log.log(\"****\"+getInteractionsText());", "+//    _log.log(\"****\"+getInteractionsText());", "-    _log.log(\"----After resume:\\n\" + getInteractionsText());", "+//    _log.log(\"----After resume:\\n\" + getInteractionsText());", "-    _log.log(\"Shutting down...\");", "+//    _log.log(\"Shutting down ...\");", "-    _log.log(\"Shut down.\");", "+    _log.log(\"Completed testStepIntoOverBreakpoint\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d4b0c939b20c7d25d0a6a7afd97c968", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "12434dc2dab84dfe1024e2e2b39fd8f27da62bbd", "commitAfterChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testNonStaticWatches() throws Exception", "signatureAfterChange": "   public void testNonStaticWatches() throws Exception", "diff": ["-   */", "+    */", "+    ", "+    final String monkey = MONKEY_WITH_INNER_CLASS;", "-    OpenDefinitionsDocument doc = _startupDebugger(\"Monkey.java\",", "-                                                   MONKEY_WITH_INNER_CLASS);", "+    OpenDefinitionsDocument doc = _startupDebugger(\"Monkey.java\", monkey);", "-    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 12;\"), 10, true);", "-    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"System.out.println(\\\"localVar = \\\" + localVar);\"), 32, true);", "+    _debugger.toggleBreakpoint(doc, monkey.indexOf(\"innerMethodFoo = 12;\"), 10, true);", "+    _debugger.toggleBreakpoint(doc, monkey.indexOf(\"System.out.println(\\\"localVar = \\\" + localVar);\"), 32, true);", "-    _log.log(\"first step\");", "+//    _log.log(\"first step\");", "-    _log.log(\"second step in \" + this);", "+//    _log.log(\"second step in \" + this);", "-      _log.log(\"third step in \" + this);", "+//      _log.log(\"third step in \" + this);", "-    _log.log(\"fourth step in \" + this);", "+//    _log.log(\"fourth step in \" + this);", "-    _log.log(\"fifth step in \" + this);", "+//    _log.log(\"fifth step in \" + this);", "-      _log.log(\"sixth step in \" + this);", "+//      _log.log(\"sixth step in \" + this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "468c1b513099efa0a6fb5b53ba716010", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "958f548f8cc751514e1497672b492b70657c4b6e", "commitAfterChange": "0707afe81b4d2dfe9c2f27d4ef0cf8fcb3dfd8ff", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public File getMainClassContainingFile()", "signatureAfterChange": "   public File getMainClassContainingFile()", "diff": ["-    Log.log(\"For path: \"+path+\"\\n\");", "-    ", "-      Log.log(\"\\tnull\\n\");", "-      Log.log(\"\\t\"+(new File(getProjectFile().getParent(), path)).getAbsolutePath()+\"\\n\");", "-        Log.log(\"\\t\"+tempFile.getAbsolutePath()+\"\\n\");", "-    Log.log(\"\\tnull\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6beb04690514e04efe0aabb4d4170099", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/MintCompiler.java", "commitBeforeChange": "d6e5a814c07284651f7c529a85f464592512b19a", "commitAfterChange": "7068b1b7376b1c3813644f4d8ea2780684ca5f7c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r     \r   private Context _createContext(java.util.List<? extends File> classPath,\r                                  java.util.List<? extends File> sourcePath,\r                                  File destination, \r                                  java.util.List<? extends File> bootClassPath,\r                                  String sourceVersion,\r                                  boolean showWarnings)", "signatureAfterChange": "\r     \r   private Context _createContext(java.util.List<? extends File> classPath,\r                                  java.util.List<? extends File> sourcePath,\r                                  File destination, \r                                  java.util.List<? extends File> bootClassPath,\r                                  String sourceVersion,\r                                  boolean showWarnings)", "diff": ["-    msg(\"_createContext before: -classpath: \"+options.get(\"-classpath\")+\r", "-        \", -bootclasspath: \"+options.get(\"-bootclasspath\"));\r", "-    msg(\"bootClassPath: \"+((bootClassPath!=null)?IOUtil.pathToString(bootClassPath):\"n/a\"));\r", "-    \r", "-    msg(\"_createContext after: -classpath: \"+options.get(\"-classpath\")+\r", "-        \", -bootclasspath: \"+options.get(\"-bootclasspath\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85eeee74a128a512355575060dd90384", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "00ef1eb4d5cc14a02a79039c3a1d533302feb4d3", "commitAfterChange": "c36edada76ee9f3d9322b919e75fbcf066a0cd41", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "signatureAfterChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "diff": ["+   ", "-      \"public class B {\\n\"+", "-      \"  public class C {\\n\"+", "-      \"    String str = \\\"\\\";\\n\"+", "-      \"    public C(String ... args){\\n\"+", "-      \"      for(String  s: args) {\\n\"+", "-      \"        str = str+s;\\n\"+", "-      \"      }\\n\"+", "-      \"    }\\n\"+", "-      \"    public String getStr(){\\n\"+", "-      \"      return str;\\n\"+", "-      \"    }\\n\"+", "-      \"  }\\n\"+", "-      \"}\\n\"+", "-      \"(new B()).new C(\\\"Str1\\\",\\\"Str2\\\",\\\"Str3\\\",\\\"Str4\\\").getStr();\\n\";", "+      \"interface Lambda { public Object apply(Object ... args); } \\n\" +", "+      \"Lambda l = new Lambda() { \\n\" +", "+      \"  public Object apply(Object... args) { \\n\" +", "+      \"    return true; \\n\" +", "+      \"  } \\n\" +", "+      \"}; \\n\" +", "+      \"l.apply()\";", "-    assertEquals(\"Wrong Output.\", \"Str1Str2Str3Str4\", res);", "+    assertEquals(\"Wrong output.\", Boolean.TRUE, res);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "974e2ce67204451df779b9437c0a8b13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 58, "signatureBeforeChange": "          public void compare(String leftName, Iterable<CompilationUnit> left,                           String rightName, Iterable<CompilationUnit> right)", "signatureAfterChange": "          public void compare(Iterable<CompilationUnit> left, Iterable<CompilationUnit> right)", "diff": ["-    public void compare(String leftName, Iterable<CompilationUnit> left,", "-                          String rightName, Iterable<CompilationUnit> right) {", "-      System.out.println(\"Comparing \" + leftName + \" with \" + rightName);", "-      if (IterUtil.sizeOf(left) != IterUtil.sizeOf(right)) {", "-        System.out.println(\"Can't compare results: mismatched CompilationUnit lists\");", "-      else {", "-        for (Pair<CompilationUnit, CompilationUnit> p : IterUtil.zip(left, right)) {", "-          compare(p.first(), p.second());", "-        }", "+    ", "+    public void compare(Iterable<CompilationUnit> left, Iterable<CompilationUnit> right) {", "+      _log.start();", "+      if (IterUtil.sizeOf(left) != IterUtil.sizeOf(right)) {", "+        _log.mismatchedCompilationUnits();", "+      }", "+      else {", "+        for (Pair<CompilationUnit, CompilationUnit> p : IterUtil.zip(left, right)) {", "+          compare(\"Compilation unit\", p.first(), p.second());", "+        }", "+      }", "+      _log.end();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff6593c18c9a15e14d901e4ec2832ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "5402d816f4ee865f7ec73de4093cafaa0c215bb0", "commitAfterChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public synchronized void testStepIntoBreakpoint()      throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testStepIntoOverBreakpoint()      throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-  public synchronized void testStepIntoBreakpoint() ", "+  public synchronized void testStepIntoOverBreakpoint() ", "-      System.out.println(\"----testStepIntoBreakpoint----\");", "+      System.out.println(\"----testStepIntoOverBreakpoint----\");", "-    File aDir = new File(_tempDir, \"a\");", "-    aDir.mkdir();", "-    File file = new File(aDir, \"DrJavaDebugClassWithPackage.java\");", "-    OpenDefinitionsDocument doc = doCompile(DEBUG_CLASS_WITH_PACKAGE, file);", "+    File file = new File(_tempDir, \"DrJavaDebugClass.java\");", "+    OpenDefinitionsDocument doc = doCompile(DEBUG_CLASS, file);", "-    _debugger.toggleBreakpoint(doc,DEBUG_CLASS_WITH_PACKAGE.indexOf(\"foo line 1\"), 4);", "-    _debugger.toggleBreakpoint(doc,DEBUG_CLASS_WITH_PACKAGE.indexOf(\"foo line 2\"), 5);", "+    _debugger.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"Foo Line 1\"), 3);", "+    _debugger.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"bar();\\n\"), 4);", "-      interpretIgnoreResult(\"new a.DrJavaDebugClassWithPackage().foo()\");", "+      interpretIgnoreResult(\"new DrJavaDebugClass().foo()\");", "-    assertInteractionsDoesNotContain(\"foo line 1\");", "+    assertInteractionsDoesNotContain(\"Foo Line 1\");", "-    assertInteractionsContains(\"foo line 1\");", "-    assertInteractionsDoesNotContain(\"foo line 2\");", "+    assertInteractionsContains(\"Foo Line 1\");", "-    synchronized(_notifierLock){", "+    synchronized(_notifierLock) {", "-    assertInteractionsContains(\"foo line 2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1721a4a0f84c2e3b7090bc36d268c75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "12434dc2dab84dfe1024e2e2b39fd8f27da62bbd", "commitAfterChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public synchronized void testBreakpointsAndStepsInNonPublicClasses() throws Exception", "signatureAfterChange": "   public synchronized void testBreakpointsAndStepsInNonPublicClasses() throws Exception", "diff": ["-    _log.log(\"----After breakpoint:\\n\" + getInteractionsText());", "+//    _log.log(\"----After breakpoint:\\n\" + getInteractionsText());", "-    _log.log(\"adding another breakpoint\");", "+//    _log.log(\"adding another breakpoint\");", "-    _log.log(\"****\"+getInteractionsText());", "+//    _log.log(\"****\"+getInteractionsText());", "-      _log.log(\"resuming\");", "+//      _log.log(\"resuming\");", "-    _log.log(\"----After one resume:\\n\" + getInteractionsText());", "+//    _log.log(\"----After one resume:\\n\" + getInteractionsText());", "-    _log.log(\"-------- Adding interpret listener --------\");", "+//    _log.log(\"-------- Adding interpret listener --------\");", "-      _log.log(\"-------- resuming --------\");", "+//      _log.log(\"-------- resuming --------\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2751642533dc71065471d314f038a4d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/MintCompiler.java", "commitBeforeChange": "d6e5a814c07284651f7c529a85f464592512b19a", "commitAfterChange": "7068b1b7376b1c3813644f4d8ea2780684ca5f7c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,\r                                                    java.util.List<? extends File> classPath, \r                                                    java.util.List<? extends File> sourcePath,\r                                                    File destination, \r                                                    java.util.List<? extends File> bootClassPath,\r                                                    String sourceVersion,\r                                                    boolean showWarnings)", "signatureAfterChange": "\r   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,\r                                                    java.util.List<? extends File> classPath, \r                                                    java.util.List<? extends File> sourcePath,\r                                                    File destination, \r                                                    java.util.List<? extends File> bootClassPath,\r                                                    String sourceVersion,\r                                                    boolean showWarnings)", "diff": ["-    msg(\"DrJava compile: files: \"+((files!=null)?IOUtil.pathToString(files):\"n/a\"));\r", "-    msg(\"            classPath: \"+((classPath!=null)?IOUtil.pathToString(classPath):\"n/a\"));\r", "-    msg(\"           sourcePath: \"+((sourcePath!=null)?IOUtil.pathToString(sourcePath):\"n/a\"));\r", "-    msg(\"          destination: \"+destination);\r", "-    msg(\"        bootClassPath: \"+((bootClassPath!=null)?IOUtil.pathToString(bootClassPath):\"n/a\"));\r", "-    \r", "-//    JavaCompiler compiler = JavaCompiler.instance(context);\r", "-//    \r", "-//    /** Default FileManager provided by Context class */\r", "-//    DefaultFileManager fileManager = (DefaultFileManager) context.get(JavaFileManager.class);\r", "-//    com.sun.tools.javac.util.List<JavaFileObject> fileObjects = com.sun.tools.javac.util.List.nil();\r", "-//    for (File f : files) fileObjects = fileObjects.prepend(fileManager.getRegularFile(f));\r", "-//    \r", "-//    try { compiler.compile(fileObjects); }\r", "-//    catch(Throwable t) {  // compiler threw an exception/error (typically out of memory error)\r", "-//      errors.addFirst(new DJError(\"Compile exception: \" + t, false));\r", "-//      error.log(t);\r", "-//    }\r"]}], "num": 23344}
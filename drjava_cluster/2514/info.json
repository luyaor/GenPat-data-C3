{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8aeb8be058519ecb3c55fad681dbe497", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027a947bfef6e4e84d45caf565745c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 44, "signatureBeforeChange": "   private static void archiveProperties(Node ast, final String prefix)", "signatureAfterChange": "          private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,                                      Map<?,?> rightProps, SourceInfo.Wrapper right)", "diff": ["-   */", "-  private static void archiveProperties(Node ast, final String prefix) {", "-    new DepthFirstVisitor() {", "-      public void run(Node node) {", "-        node.archiveProperties(prefix);", "-        super.run(node);", "-      }", "-    }.run(ast);", "-  }", "+    ", "+    private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,", "+                                     Map<?,?> rightProps, SourceInfo.Wrapper right) {", "+      Set<Object> keys = new HashSet<Object>(leftProps.keySet());", "+      keys.retainAll(rightProps.keySet());", "+      Set<Object> leftKeys = new HashSet<Object>(leftProps.keySet());", "+      leftKeys.removeAll(keys);", "+      Set<Object> rightKeys = new HashSet<Object>(rightProps.keySet());", "+      rightKeys.removeAll(keys);", "+      if (!leftKeys.isEmpty() || !rightKeys.isEmpty()) {", "+        mismatch(\"Extra properties\", leftKeys.toString(), left, rightKeys.toString(), right);", "+      }", "+      for (Object k : keys) {", "+        compareObjects(\"property \" + k, leftProps.get(k), left, rightProps.get(k), right);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ffd6be9b56461e4a261282537231f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "commitAfterChange": "2df7289d55456372fbaf4e3ab78549d8571648f8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private static boolean endsWithExt(File f, String[] exts)", "signatureAfterChange": "   private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<? super CompilerError> errors)", "diff": ["-  /** Determines if file f ends with one of the extensions in exts. */", "-  private static boolean endsWithExt(File f, String[] exts) {", "-    for (String ext: exts) { if (f.getName().endsWith(ext)) return true; }", "-    return false;", "+    */", "+  private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<? super CompilerError> errors) {", "+    // TODO: The classpath (and sourcepath, bootclasspath) should be an argument passed to Language Levels.", "+    LanguageLevelConverter llc = new LanguageLevelConverter(getActiveCompiler().getName());", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> llErrors = ", "+      llc.convert(files.toArray(new File[0]));", "+    ", "+    /* Rename any .dj0 files in files to be .java files, so the correct thing is compiled.  The hashset is used to ", "+     * make sure we never send in duplicate files. This can happen if the java file was sent in along with the ", "+     * corresponding .dj* file. The dj* file is renamed to a .java file and thus we have two of the same file in ", "+     * the list.  By adding the renamed file to the hashset, the hashset efficiently removes duplicates.", "+     */", "+    HashSet<File> javaFileSet = new HashSet<File>();", "+    boolean containsLanguageLevels = false;", "+    for (File f : files) {", "+      File canonicalFile = FileOps.getCanonicalFile(f);", "+      String fileName = canonicalFile.getPath();", "+      int lastIndex = fileName.lastIndexOf(\".dj\");", "+      if (lastIndex != -1) {", "+        containsLanguageLevels = true;", "+        javaFileSet.add(new File(fileName.substring(0, lastIndex) + \".java\"));", "+      }", "+      else { javaFileSet.add(canonicalFile); }", "+    }", "+    files = new LinkedList<File>(javaFileSet);", "+    ", "+    errors.addAll(_parseExceptions2CompilerErrors(llErrors.getFirst()));", "+    errors.addAll(_visitorErrors2CompilerErrors(llErrors.getSecond()));", "+    if (containsLanguageLevels) { return files; }", "+    else { return null; }"]}], "num": 2514}
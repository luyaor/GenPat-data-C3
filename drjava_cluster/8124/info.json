{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a57a80c728771497bee961619a8184e7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b9110e870576c6d1dc016906a87b936", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryVisitor.java", "commitBeforeChange": "5e7a16013fcb5945eddc036e2d2d0ce3e14ba2d0", "commitAfterChange": "e1389ddb9dcb8a7d3a230cc1be322481e1c8fd6a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public void forClassDef(ClassDef that)", "signatureAfterChange": "   public Void forClassDef(ClassDef that)", "diff": ["-  public void forClassDef(ClassDef that) {", "+  public Void forClassDef(ClassDef that) {", "-    if (prune(that)) return;", "+    if (prune(that)) return null;", "-      isTestCase=true;", "+      isTestCase = true;", "-      getSymbolData(\"junit.framework.TestCase\", that.getSourceInfo(), true, false, true, false);   //add this to the symbol table.", "+      getSymbolData(\"junit.framework.TestCase\", that.getSourceInfo(), true, false, true, false);  // add to symbol table", "-    if (sd == null) return;", "+    if (sd == null) return null;", "-      that.getBody().visit(new ClassBodyElementaryVisitor(sd, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));", "+      that.getBody().visit(new ClassBodyElementaryVisitor(sd, _file, _package, _importedFiles, _importedPackages, ", "+                                                          _classNamesInThisFile, continuations));", "+    return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c890eb4a8a8703011ae28254074e1ae2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyAdvancedVisitor.java", "commitBeforeChange": "5e7a16013fcb5945eddc036e2d2d0ce3e14ba2d0", "commitAfterChange": "e1389ddb9dcb8a7d3a230cc1be322481e1c8fd6a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void forConstructorDef(ConstructorDef that)", "signatureAfterChange": "   public Void forConstructorDef(ConstructorDef that)", "diff": ["-  public void forConstructorDef(ConstructorDef that) {", "+  public Void forConstructorDef(ConstructorDef that) {", "-    if (prune(that)) return;", "+    if (prune(that)) return null;", "+    return null;"]}], "num": 8124}
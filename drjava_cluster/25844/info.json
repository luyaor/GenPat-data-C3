{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6170859dbfcb5dccb0755a75c0fbdeae", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15708482026102e9e63eaf8621ef9577", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public void startCompile()", "signatureAfterChange": "     public void startCompile()", "diff": ["-   */", "-  public void startCompile() {", "-    saveBeforeProceeding(GlobalModelListener.COMPILE_REASON);", "-    if (isModifiedSinceSave()) {", "-      // if the file hasn't been saved after we told our", "-      // listeners to do so, don't proceed with the rest", "-      // of the compile.", "-    }", "-    else {", "-      File file = _definitionsDoc.getFile();", "-", "-      // These are the defaults to send to _resetInteractions", "-      // in the case that we fail to find the package.", "-      String packageName = \"\";", "-      File sourceRoot = null;", "-", "-      try {", "-        _notifyListeners(new EventNotifier() {", "-          public void notifyListener(GlobalModelListener l) {", "-            l.compileStarted();", "-          }", "-        });", "-", "-        packageName = _definitionsDoc.getPackageName();", "-        sourceRoot = _getSourceRoot(packageName);", "-        ", "-        File[] files = new File[] { file };", "-", "-        CompilerInterface compiler =CompilerRegistry.ONLY.getActiveCompiler();", "-", "-        _compileErrors = compiler.compile(sourceRoot, files);", "-      }", "-      catch (InvalidPackageException e) {", "-        CompilerError err = new CompilerError(file.getAbsolutePath(),", "-                                              -1,", "-                                              -1,", "-                                              e.getMessage(),", "-                                              false);", "-        _compileErrors = new CompilerError[] { err };", "-      }", "-      finally {", "-        _notifyListeners(new EventNotifier() {", "-          public void notifyListener(GlobalModelListener l) {", "-            l.compileEnded();", "-          }", "-        });", "-", "-        // Only clear console/interactions if there were no errors", "-        if (_compileErrors.length == 0) {", "-          resetConsole();", "-          _resetInteractions(packageName, sourceRoot);", "-        }", "-      }", "-    }", "-  }", "+     */", "+    public void startCompile() {", "+      saveBeforeProceeding(GlobalModelListener.COMPILE_REASON);", "+", "+      if (isModifiedSinceSave()) {", "+        // if the file hasn't been saved after we told our", "+        // listeners to do so, don't proceed with the rest", "+        // of the compile.", "+      }", "+      else {", "+        try {", "+          File file = _doc.getFile();", "+", "+          // These are the defaults to send to _resetInteractions", "+          // in the case that we fail to find the package.", "+          String packageName = \"\";", "+          File sourceRoot = null;", "+", "+          try {", "+            _notifyListeners(new EventNotifier() {", "+              public void notifyListener(GlobalModelListener l) {", "+                l.compileStarted();", "+              }", "+            });", "+", "+            packageName = _doc.getPackageName();", "+            sourceRoot = _getSourceRoot(packageName);", "+", "+            File[] files = new File[] { file };", "+", "+            CompilerInterface compiler =CompilerRegistry.ONLY.getActiveCompiler();", "+", "+            _compileErrors = compiler.compile(sourceRoot, files);", "+          }", "+          catch (InvalidPackageException e) {", "+            CompilerError err = new CompilerError(file.getAbsolutePath(),", "+                                                  -1,", "+                                                  -1,", "+                                                  e.getMessage(),", "+                                                  false);", "+            _compileErrors = new CompilerError[] { err };", "+          }", "+          finally {", "+            _notifyListeners(new EventNotifier() {", "+              public void notifyListener(GlobalModelListener l) {", "+                l.compileEnded();", "+              }", "+            });", "+", "+            // Only clear console/interactions if there were no errors", "+            if (_compileErrors.length == 0) {", "+              resetConsole();", "+              resetInteractions();", "+            }", "+          }", "+        }", "+        catch (IllegalStateException ise) {", "+          // No file exists, don't try to compile", "+        }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8f77872c7126d8d0e06ba999b9f7381", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 50, "signatureBeforeChange": "   private File _getSourceRoot(String packageName)     throws InvalidPackageException", "signatureAfterChange": "     private File _getSourceRoot(String packageName)       throws InvalidPackageException", "diff": ["-  private File _getSourceRoot(String packageName)", "-    throws InvalidPackageException", "-  {", "-    File sourceFile = _definitionsDoc.getFile();", "-    if (sourceFile == null) {", "-      throw new InvalidPackageException(-1, \"Can not get source root for \" +", "-                                            \"unsaved file. Please save.\");", "-    }", "-                                        ", "-    if (packageName.equals(\"\")) {", "-      return sourceFile.getParentFile();", "-    Stack packageStack = new Stack();", "-    int dotIndex = packageName.indexOf('.');", "-    int curPartBegins = 0;", "-    while (dotIndex != -1)", "-      packageStack.push(packageName.substring(curPartBegins, dotIndex));", "-      curPartBegins = dotIndex + 1;", "-      dotIndex = packageName.indexOf('.', dotIndex + 1);", "-    // Now add the last package component", "-    packageStack.push(packageName.substring(curPartBegins));", "-    File parentDir = sourceFile;", "-    while (!packageStack.empty()) {", "-      String part = (String) packageStack.pop();", "+     */", "+    private File _getSourceRoot(String packageName)", "+      throws InvalidPackageException", "+    {", "+      File sourceFile;", "+      try {", "+        sourceFile = _doc.getFile();", "+      }", "+      catch (IllegalStateException ise) {", "+        throw new InvalidPackageException(-1, \"Can not get source root for \" +", "+                                              \"unsaved file. Please save.\");", "+      }", "+", "+      if (packageName.equals(\"\")) {", "+        return sourceFile.getParentFile();", "+      }", "+", "+      Stack packageStack = new Stack();", "+      int dotIndex = packageName.indexOf('.');", "+      int curPartBegins = 0;", "+", "+      while (dotIndex != -1)", "+      {", "+        packageStack.push(packageName.substring(curPartBegins, dotIndex));", "+        curPartBegins = dotIndex + 1;", "+        dotIndex = packageName.indexOf('.', dotIndex + 1);", "+      }", "+", "+      // Now add the last package component", "+      packageStack.push(packageName.substring(curPartBegins));", "+", "+      File parentDir = sourceFile;", "+      while (!packageStack.empty()) {", "+        String part = (String) packageStack.pop();", "+        parentDir = parentDir.getParentFile();", "+", "+        if (parentDir == null) {", "+          throw new RuntimeException(\"parent dir is null?!\");", "+        }", "+", "+        // Make sure the package piece matches the directory name", "+        if (! part.equals(parentDir.getName())) {", "+          String msg = \"The source file \" + sourceFile.getAbsolutePath() +", "+                       \" is in the wrong directory or in the wrong package. \" +", "+                       \"The directory name \" + parentDir.getName() +", "+                       \" does not match the package component \" + part + \".\";", "+", "+          throw new InvalidPackageException(-1, msg);", "+        }", "+      }", "+", "+      // OK, now parentDir points to the directory of the first component of the", "+      // package name. The parent of that is the root.", "-", "-        throw new RuntimeException(\"parent dir is null?!\");", "+        throw new RuntimeException(\"parent dir of first component is null?!\");", "-      // Make sure the package piece matches the directory name", "-      if (! part.equals(parentDir.getName())) {", "-        String msg = \"The source file \" + sourceFile.getAbsolutePath() + ", "-                     \" is in the wrong directory or in the wrong package. \" +", "-                     \"The directory name \" + parentDir.getName() +", "-                     \" does not match the package component \" + part + \".\";", "-", "-        throw new InvalidPackageException(-1, msg);", "-      }", "+      return parentDir;", "-    // OK, now parentDir points to the directory of the first component of the", "-    // package name. The parent of that is the root.", "-    parentDir = parentDir.getParentFile();", "-    if (parentDir == null) {", "-      throw new RuntimeException(\"parent dir of first component is null?!\");", "-    }", "-", "-    return parentDir;"]}], "num": 25844}
/*BEGIN_COPYRIGHT_BLOCK
 *
 * This file is part of DrJava.  Download the current version of this project:
 * http://sourceforge.net/projects/drjava/ or http://www.drjava.org/
 * 
 * DrJava Open Source License
 *
 * Copyright (C) 2001-2003 JavaPLT group at Rice University (javaplt@rice.edu)
 * All rights reserved.
 *
 * Developed by:   Java Programming Languages Team
 *                 Rice University
 *                 http://www.cs.rice.edu/~javaplt/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal with the Software without restriction, including without
 * limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to
 * whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimers.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimers in the
 *       documentation and/or other materials provided with the distribution.
 *     - Neither the names of DrJava, the JavaPLT, Rice University, nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this Software without specific prior written permission.
 *     - Products derived from this software may not be called "DrJava" nor
 *       use the term "DrJava" as part of their names without prior written
 *       permission from the JavaPLT group.  For permission, write to
 *       javaplt@rice.edu.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS WITH THE SOFTWARE.
 *
END_COPYRIGHT_BLOCK*/

package edu.rice.cs.drjava.model;

import java.awt.print.PageFormat;
import java.io.*;
import java.util.*;

import edu.rice.cs.util.swing.DocumentIterator;

import edu.rice.cs.util.text.SwingDocumentAdapter;
import edu.rice.cs.drjava.model.definitions.*;
import edu.rice.cs.drjava.model.debug.Debugger;
import edu.rice.cs.drjava.model.repl.*;
import edu.rice.cs.drjava.model.junit.JUnitModel;
import edu.rice.cs.drjava.model.compiler.CompilerModel;
import edu.rice.cs.util.docnavigation.*;

/**
 * Handles the bulk of DrJava's program logic.
 * The UI components interface with the GlobalModel through its public methods,
 * and GlobalModel responds via the GlobalModelListener interface.
 * This removes the dependency on the UI for the logical flow of the program's
 * features.  With the current implementation, we can finally test the compile
 * functionality of DrJava, along with many other things.
 * An ongoing refactoring effort will be moving many GlobalModel functions into
 * more specific sub-interfaces for particular behaviors.
 * @see DefaultGlobalModel, IGetDocuments, ILoadDocuments, CompilerModel,
 *      JUnitModel, JavadocModel
 *
 * @version $Id$
 */
public interface GlobalModel extends IGetDocuments, ILoadDocuments {

  //-------------------------- Listener Management --------------------------//

  /**
   * Add a listener to this global model.
   * @param listener a listener that reacts on events generated by the GlobalModel
   */
  public void addListener(GlobalModelListener listener);

  /**
   * Remove a listener from this global model.
   * @param listener a listener that reacts on events generated by the GlobalModel
   */
  public void removeListener(GlobalModelListener listener);

  //------------------------ Feature Model Accessors ------------------------//

  /**
   * Returns the interactions model.
   */
  public DefaultInteractionsModel getInteractionsModel();

  /**
   * Gets the CompilerModel, which provides all methods relating to compilers.
   */
  public CompilerModel getCompilerModel();

  /**
   * Gets the JUnitModel, which provides all methods relating to JUnit testing.
   */
  public JUnitModel getJUnitModel();

  /**
   * Gets the JavadocModel, which provides all methods relating to Javadoc.
   */
  public JavadocModel getJavadocModel();

  /**
   * Gets the Debugger, which interfaces with the integrated debugger.
   */
  public Debugger getDebugger();
  
  /**
   * Gets the DocumentNavigator, which controls the document view.
   */
  public IAWTContainerNavigatorActor getDocumentNavigator();
   
  public void setDocumentNavigator(IAWTContainerNavigatorActor newnav);
  
  //---------------------------- File Management ----------------------------//

  /**
   * Creates a new document in the definitions pane and
   * adds it to the list of open documents.
   * @return The new open document
   */
  public OpenDefinitionsDocument newFile();

  /**
   * Creates a new junit test case.
   * TODO: Move to JUnitModel?
   * @param name the name of the new test case
   * @param makeSetUp true iff an empty setUp() method should be included
   * @param makeTearDown true iff an empty tearDown() method should be included
   * @return the new open test case
   */
  public OpenDefinitionsDocument newTestCase(String name, boolean makeSetUp, boolean makeTearDown);

  /**
   * Closes an open definitions document, prompting to save if
   * the document has been changed.  Returns whether the file
   * was successfully closed.
   * @return true if the document was closed
   */
  public boolean closeFile(OpenDefinitionsDocument doc);

  /**
   * Attempts to close all open documents.
   * @return true if all documents were closed
   */
  public boolean closeAllFiles();

  /**
   * Reverts all open files.
   * (Not working yet.)
  public void revertAllFiles() throws IOException;
  */

  /**
   * Saves all open documents, prompting when necessary.
   */
  public void saveAllFiles(FileSaveSelector com) throws IOException;
  
  
  /**
   * Writes the project file to disk
   * @param filename where to save the project
   */
  public void saveProject(String filename) throws IOException;
  
  /**
   * Parses out the given project file, sets up the state and other configurations
   * such as the Navigator and the classpath, and returns an array of files to open.
   * @param file The project file to parse
   * @return an array of document's files to open
   */
  public File[] openProject(File fine) throws IOException;

  /**
   * Performs any needed operations on the model before closing the
   * project and its files.  This is not responsible for actually
   * closing the files since that is handled in MainFrame._closeProject()
   */
  public void closeProject();
  
  /**
   * Searches for a file with the given name on the current source roots and the
   * augmented classpath.
   * @param filename Name of the source file to look for
   * @return the file corresponding to the given name, or null if it cannot be found
   */
  public File getSourceFile(String filename);

  /**
   * Searches for a file with the given name on the provided paths.
   * Returns null if the file is not found.
   * @param filename Name of the source file to look for
   * @param paths An array of directories to search
   */
  public File getSourceFileFromPaths(String filename, Vector<File> paths);

  /**
   * Gets an array of all sourceRoots for the open definitions
   * documents, without duplicates.
   */
  public File[] getSourceRootSet();

  /**
   * Return the name of the file, or "(untitled)" if no file exists.
   * Does not include the ".java" if it is present.
   */      
  public String getDisplayFilename(OpenDefinitionsDocument doc);


  
  /**
   * Return the absolute path of the file with the given index,
   * or "(untitled)" if no file exists.
   */
  public String getDisplayFullPath(int index);

  //------------------------------ Definitions ------------------------------//

  /**
   * Fetches the {@link javax.swing.text.EditorKit} implementation for use
   * in the definitions pane.
   */
  public DefinitionsEditorKit getEditorKit();

  /**
   * Gets a DocumentIterator to allow navigating through open swing Documents.
   * TODO: remove ugly swing dependency.
   */
  public DocumentIterator getDocumentIterator();

  //---------------------------------- I/O ----------------------------------//

  /**
   * Gets the console document.
   */
  public ConsoleDocument getConsoleDocument();

  /**
   * TODO: remove this swing dependency.
   * @return SwingDocumentAdapter in use by the ConsoleDocument.
   */
  public SwingDocumentAdapter getSwingConsoleDocument();

  /**
   * Resets the console.
   * Fires consoleReset() event.
   */
  public void resetConsole();

  /**
   * Prints System.out to the DrJava console.
   */
  public void systemOutPrint(String s);

  /**
   * Prints System.err to the DrJava console.
   */
  public void systemErrPrint(String s);

  //----------------------------- Interactions -----------------------------//

  /**
   * Gets the (toolkit-independent) interactions document.
   */
  public InteractionsDocument getInteractionsDocument();

  /**
   * TODO: remove this swing dependency.
   * @return SwingDocumentAdapter in use by the InteractionsDocument.
   */
  public SwingDocumentAdapter getSwingInteractionsDocument();

  /**
   * Clears and resets the interactions pane.
   * First it makes sure it's in the right package given the
   * package specified by the definitions.  If it can't,
   * the package for the interactions becomes the defualt
   * top level. In either case, this method calls a helper
   * which fires the interactionsReset() event.
   */
  public void resetInteractions();

  /**
   * Blocks until the interpreter has registered.
   */
  public void waitForInterpreter();

  /**
   * Interprets the current given text at the prompt in the interactions
   * pane.
   */
  public void interpretCurrentInteraction();

  /**
   * Returns the current classpath in use by the Interpreter JVM.
   */
  public Vector<String> getClasspath();

  // TODO: Move history methods to a more appropriate home.

  /**
   * Interprets the file selected in the FileOpenSelector. Assumes all strings
   * have no trailing whitespace. Interprets the array all at once so if there are
   * any errors, none of the statements after the first erroneous one are processed.
   */
  public void loadHistory(FileOpenSelector selector) throws IOException;

  /**
   * Loads the history/histories from the given selector.
   */
  public InteractionsScriptModel loadHistoryAsScript(FileOpenSelector selector)
    throws IOException, OperationCanceledException;

  /**
   * Clears the interactions history
   */
  public void clearHistory();

  /**
   * Saves the unedited version of the current history to a file
   * @param selector File to save to
   */
  public void saveHistory(FileSaveSelector selector) throws IOException;

  /**
   * Saves the edited version of the current history to a file
   * @param selector File to save to
   * @param editedVersion Edited verison of the history which will be
   * saved to file instead of the lines saved in the history. The saved
   * file will still include any tags needed to recognize it as a saved
   * interactions file.
   */
  public void saveHistory(FileSaveSelector selector, String editedVersion)
    throws IOException;

  /**
   * Returns the entire history as a String with semicolons as needed
   */
  public String getHistoryAsStringWithSemicolons();

  /**
   * Returns the entire history as a String
   */
  public String getHistoryAsString();

  //------------------------------- Debugger -------------------------------//

  /** Called when the debugger wants to print a message. */
  public void printDebugMessage(String s);

  /**
   * Returns an available port number to use for debugging the interactions JVM.
   * @throws IOException if unable to get a valid port number.
   */
  public int getDebugPort() throws IOException;

  //--------------------------------- Misc ---------------------------------//

  // TODO: comment
  public PageFormat getPageFormat();

  // TODO: comment
  public void setPageFormat(PageFormat format);

  /**
   * Exits the program.
   * Only quits if all documents are successfully closed.
   */
  public void quit();
  
  /**
   * Returns the document count
   */
  public int getDocumentCount();
  
  /**
   * returns a list of OpenDefinitionsDocuments that do not belong
   * to the currently active project.<br>
   * if no project is active, all documents are returned.
   */
  public List<OpenDefinitionsDocument> getNonProjectDocuments();

  /**
   * returns a list of OpenDefinitionsDocuments that do belong
   * to the currently active project.<br>
   * if no project is active, no documents are returned.
   */
  public List<OpenDefinitionsDocument> getProjectDocuments();
  
  /**
   * @return true if the model has a project open, false otherwise.
   */
  public boolean isProjectActive();
  
  /**
   * @return the file that points to the current project file. Null if not currently in project view
   */
  public File getProjectFile();
  
  /**
   * Sets the current built directory
   */
  public void setBuildDirectory(File f);
  
  /**
   * @return the directory that the class files should be stored after compilation
   */
  public File[] getProjectFiles();

  /**
   * @return the directory that the class files should be stored after compilation
   */
  public File getBuildDirectory();

  /**
   * Sets the main file of the project
   */
  public void setJarMainClass(File f);
  
  /**
   * Return the main file for the project
   * If not in project mode, returns null
   */
  public File getJarMainClass();
  
  /**
   * Returns true the given file is in the current project file.
   */
  public boolean isProjectFile(File f);
  
  /**
   * a file is in the project if the source root is the same as the
   * project root. this means that project files must be saved at the
   * source root. (we query the model through the model's state)
   */
  public boolean isInProjectPath(OpenDefinitionsDocument doc);
  
  /**
   * Notifies the project state that the project has been changed
   */
  public void setProjectChanged(boolean changed);
  
  /**
   * Returns true if the project state has been changed
   */
  public boolean isProjectChanged();
}

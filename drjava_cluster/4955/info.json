{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f635607d01a90a0c97f7b7dbc9137199", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e4eb4b5125da2c9be91931e56badf46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "a35de807c6239a74c75cd1d9a337e2c468729622", "commitAfterChange": "bf372fc29acf6ea260cc55361328f14ce539744d", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "\r   private void _insertVariableJava()", "signatureAfterChange": "   private void _insertVariableJava()", "diff": ["-  /** insert a variable Java class command line. */\r", "-  private void _insertVariableJava() {\r", "-    _windowListenerActive = false;\r", "-    _insertVarDialogMonitor.reset();\r", "-    _insertVarDialog.setVisible(true);\r", "-    // start a new thread to wait for the dialog to finish\r", "-    // this waiting cannot happen in the event thread, as that would block the other dialog\r", "-    new Thread(new Runnable() {\r", "-      public void run() {\r", "-        _insertVarDialogMonitor.waitOne();\r", "-        // dialog has finished, figure out the results in the event thread\r", "-        SwingUtilities.invokeLater(new Runnable() {\r", "-          public void run() {\r", "-            SwingUtilities.invokeLater(new Runnable() {\r", "-              public void run() {\r", "-                ExecuteExternalDialog.this.toFront();\r", "-              }\r", "-            });\r", "-            _windowListenerActive = true;\r", "-            edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty> selected = _insertVarDialog.getSelected();\r", "-            if (selected!=null) {\r", "-              String text = _lastJavaFocus.getText();\r", "-              Caret caret = _lastJavaFocus.getCaret();\r", "-              int min = Math.min(caret.getDot(), caret.getMark());\r", "-              int max = Math.max(caret.getDot(), caret.getMark());\r", "-              if (min != max) {\r", "-                text = text.substring(0, min) + text.substring(max);\r", "-              }\r", "-              text = text.substring(0,min) + \"${\" + selected.first() + \"}\" + text.substring(min);\r", "-              _lastJavaFocus.setText(text);\r", "-              caret.setDot(min+selected.first().length()+2);\r", "-              _lastJavaFocus.setCaret(caret);\r", "-            }\r", "-          }\r", "-        });\r", "-      }\r", "-    }).start();\r", "-  }\r", "+  /** insert a variable Java class command line. */", "+  private void _insertVariableJava() {", "+    _mainFrame.removeModalWindowAdapter(this);", "+    _insertVarDialogMonitor.reset();", "+    _insertVarDialog.setVisible(true);", "+    // start a new thread to wait for the dialog to finish", "+    // this waiting cannot happen in the event thread, as that would block the other dialog", "+    new Thread(new Runnable() {", "+      public void run() {", "+        _insertVarDialogMonitor.waitOne();", "+        // dialog has finished, figure out the results in the event thread", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            SwingUtilities.invokeLater(new Runnable() {", "+              public void run() {", "+                ExecuteExternalDialog.this.toFront();", "+              }", "+            });", "+            _mainFrame.installModalWindowAdapter(ExecuteExternalDialog.this, NO_OP, CANCEL);", "+", "+            edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty> selected = _insertVarDialog.getSelected();", "+            if (selected!=null) {", "+              String text = _lastJavaFocus.getText();", "+              Caret caret = _lastJavaFocus.getCaret();", "+              int min = Math.min(caret.getDot(), caret.getMark());", "+              int max = Math.max(caret.getDot(), caret.getMark());", "+              if (min != max) {", "+                text = text.substring(0, min) + text.substring(max);", "+              }", "+              text = text.substring(0,min) + \"${\" + selected.first() + \"}\" + text.substring(min);", "+              _lastJavaFocus.setText(text);", "+              caret.setDot(min+selected.first().length()+2);", "+              _lastJavaFocus.setCaret(caret);", "+            }", "+          }", "+        });", "+      }", "+    }).start();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b094db736dbea4630d5925e4408d865c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "a35de807c6239a74c75cd1d9a337e2c468729622", "commitAfterChange": "bf372fc29acf6ea260cc55361328f14ce539744d", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "\r   private void _insertVariableCommand()", "signatureAfterChange": "   private void _insertVariableCommand()", "diff": ["-  /** Insert a variable into the command line. */\r", "-  private void _insertVariableCommand() {\r", "-    _windowListenerActive = false;\r", "-    _insertVarDialogMonitor.reset();\r", "-    _insertVarDialog.setVisible(true);\r", "-    // start a new thread to wait for the dialog to finish\r", "-    // this waiting cannot happen in the event thread, as that would block the other dialog\r", "-    new Thread(new Runnable() {\r", "-      public void run() {\r", "-        _insertVarDialogMonitor.waitOne();\r", "-        // dialog has finished, figure out the results in the event thread\r", "-        SwingUtilities.invokeLater(new Runnable() {\r", "-          public void run() {\r", "-            SwingUtilities.invokeLater(new Runnable() {\r", "-              public void run() {\r", "-                ExecuteExternalDialog.this.toFront();\r", "-              }\r", "-            });\r", "-            _windowListenerActive = true;\r", "-            edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty> selected = _insertVarDialog.getSelected();\r", "-            if (selected!=null) {\r", "-              String text = _lastCommandFocus.getText();\r", "-              Caret caret = _lastCommandFocus.getCaret();\r", "-              int min = Math.min(caret.getDot(), caret.getMark());\r", "-              int max = Math.max(caret.getDot(), caret.getMark());\r", "-              if (min != max) {\r", "-                text = text.substring(0, min) + text.substring(max);\r", "-              }\r", "-              text = text.substring(0,min) + \"${\" + selected.first() + \"}\" + text.substring(min);\r", "-              _lastCommandFocus.setText(text);\r", "-              caret.setDot(min+selected.first().length()+2);\r", "-              _lastCommandFocus.setCaret(caret);\r", "-            }\r", "-          }\r", "-        });\r", "-      }\r", "-    }).start();\r", "-  }\r", "+  /** Insert a variable into the command line. */", "+  private void _insertVariableCommand() {", "+    _mainFrame.removeModalWindowAdapter(this);", "+    _insertVarDialogMonitor.reset();", "+    _insertVarDialog.setVisible(true);", "+    // start a new thread to wait for the dialog to finish", "+    // this waiting cannot happen in the event thread, as that would block the other dialog", "+    new Thread(new Runnable() {", "+      public void run() {", "+        _insertVarDialogMonitor.waitOne();", "+        // dialog has finished, figure out the results in the event thread", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            SwingUtilities.invokeLater(new Runnable() {", "+              public void run() {", "+                ExecuteExternalDialog.this.toFront();", "+              }", "+            });", "+            _mainFrame.installModalWindowAdapter(ExecuteExternalDialog.this, NO_OP, CANCEL);", "+", "+            edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty> selected = _insertVarDialog.getSelected();", "+            if (selected!=null) {", "+              String text = _lastCommandFocus.getText();", "+              Caret caret = _lastCommandFocus.getCaret();", "+              int min = Math.min(caret.getDot(), caret.getMark());", "+              int max = Math.max(caret.getDot(), caret.getMark());", "+              if (min != max) {", "+                text = text.substring(0, min) + text.substring(max);", "+              }", "+              text = text.substring(0,min) + \"${\" + selected.first() + \"}\" + text.substring(min);", "+              _lastCommandFocus.setText(text);", "+              caret.setDot(min+selected.first().length()+2);", "+              _lastCommandFocus.setCaret(caret);", "+            }", "+          }", "+        });", "+      }", "+    }).start();", "+  }"]}], "num": 4955}
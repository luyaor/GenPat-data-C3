{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9af7f3b01941e356d221771e1ef008bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2712f4e73ec7ba9ab63ddca7f11faf11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 232, "signatureBeforeChange": "     private File _locateClassFile()", "signatureAfterChange": "     private File _locateClassFile()", "diff": ["-      try {", "-        String className = getDocument().getQualifiedClassName();", "-        String ps = System.getProperty(\"file.separator\");", "-        // replace periods with the System's file separator", "-        className = StringOps.replace(className, \".\", ps);", "-        String filename = className + \".class\";", "-", "-        // Check source root set (open files)", "-        File[] sourceRoots = { };", "-        Vector<File> roots = new Vector<File>();", "-        ", "-        if (getBuildDirectory() != null) roots.add(getBuildDirectory());", "-        ", "-        // Add the current document to the beginning of the roots list", "-        try { roots.add(getSourceRoot()); }", "-        catch (InvalidPackageException ipe) {", "-          try {", "-            File f = getFile().getParentFile();", "-            if (f != null) roots.add(f);", "-          }", "-          catch (IllegalStateException ise) { /* No file; do nothing */ }", "-          catch (FileMovedException fme) {", "-            // Moved, but we'll add the old file to the set anyway", "-            File root = fme.getFile().getParentFile();", "-            if (root != null)  roots.add(root);", "-          }", "+      if (isUntitled()) return null;", "+      ", "+      String className;", "+      try { className = getDocument().getQualifiedClassName(); }", "+      catch (ClassNameNotFoundException cnnfe) { return null;  /* No source class name */ }", "+      ", "+      String ps = System.getProperty(\"file.separator\");", "+      // replace periods with the System's file separator", "+      className = StringOps.replace(className, \".\", ps);", "+      String fileName = className + \".class\";", "+      ", "+      // Check source root set (open files)", "+      ArrayList<File> roots = new ArrayList<File>();", "+      ", "+      if (getBuildDirectory() != null) roots.add(getBuildDirectory());", "+      ", "+      // Add the current document to the beginning of the roots list", "+      try { roots.add(getSourceRoot()); }", "+      catch (InvalidPackageException ipe) {", "+        try {", "+          File root = getFile().getParentFile();", "+          if (root != null) roots.add(root);", "-", "-        for (int i = 0; i < sourceRoots.length; i++) roots.add(sourceRoots[i]);", "-        ", "-        File classFile = getSourceFileFromPaths(filename, roots);", "-", "-        if (classFile == null) {", "-          // Class not on source root set, check system classpath", "-          String cp = System.getProperty(\"java.class.path\");", "-          String pathSeparator = System.getProperty(\"path.separator\");", "-          Vector<File> cpVector = new Vector<File>();", "-          for (int i = 0; i < cp.length();) {", "-            int nextSeparator = cp.indexOf(pathSeparator, i);", "-            if (nextSeparator == -1) {", "-              cpVector.add(new File(cp.substring(i, cp.length())));", "-              break;", "-            }", "-            cpVector.add(new File(cp.substring(i, nextSeparator)));", "-            i = nextSeparator + 1;", "-          }", "-          classFile = getSourceFileFromPaths(filename, cpVector);", "+        catch(NullPointerException e) { throw new UnexpectedException(e); }", "+        catch(FileMovedException fme) {", "+          // Moved, but we'll add the old file to the set anyway", "+          File root = fme.getFile().getParentFile();", "+          if (root != null) roots.add(root);", "-        if (classFile == null) {", "-          // not on system classpath, check interactions classpath", "-          classFile = getSourceFileFromPaths(filename, DrJava.getConfig().getSetting(EXTRA_CLASSPATH));", "-        }", "-        return classFile;", "-      catch (ClassNameNotFoundException cnnfe) {", "-        // No class name found, so we can't find a class file", "-        return null;", "+      ", "+      File classFile = getSourceFileFromPaths(fileName, roots);", "+      if (classFile != null) return classFile;", "+      ", "+      // Class not on source root set, check system classpath", "+      String cp = System.getProperty(\"java.class.path\");", "+      String pathSeparator = System.getProperty(\"path.separator\");", "+      Vector<File> cpVector = new Vector<File>();", "+      int i = 0;", "+      while (i < cp.length()) {", "+        int nextSeparator = cp.indexOf(pathSeparator, i);", "+        if (nextSeparator == -1) {", "+          cpVector.add(new File(cp.substring(i, cp.length())));", "+          break;", "+        }", "+        cpVector.add(new File(cp.substring(i, nextSeparator)));", "+        i = nextSeparator + 1;", "+      classFile = getSourceFileFromPaths(fileName, cpVector);", "+      ", "+      if (classFile != null) return classFile;", "+      ", "+      // not on system classpath, check interactions classpath", "+      return getSourceFileFromPaths(fileName, DrJava.getConfig().getSetting(EXTRA_CLASSPATH));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f763c342dff5ccf2ea55880aa6d8291", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "   private void _createDebugger()", "signatureAfterChange": "       private void _setupDebugger()", "diff": ["-   */", "-  private void _createDebugger() {", "-    try {", "-      _debugger = new edu.rice.cs.drjava.model.debug.jpda.JPDADebugger(this); // TODO: load dynamically", "-      _jvm.setDebugModel(_debugger.callback());", "+  private void _setupDebugger() {", "+    _jvm.setDebugModel(_debugger.callback());", "-      // add listener to set the project file to \"changed\" when a breakpoint or watch is added, removed, or changed", "-      getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "-        public void regionAdded(final Breakpoint bp, int index) { setProjectChanged(true); }", "-        public void regionChanged(final Breakpoint bp, int index) { setProjectChanged(true); }", "-        public void regionRemoved(final Breakpoint bp) { ", "-          try {", "-            getDebugger().removeBreakpoint(bp);", "-          } catch(DebugException de) { /* just ignore it */ }", "-          setProjectChanged(true);", "-          }", "-      });", "-      getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {", "-        public void regionAdded(DocumentRegion r, int index) { setProjectChanged(true); }", "-        public void regionChanged(DocumentRegion r, int index) { setProjectChanged(true); }", "-        public void regionRemoved(DocumentRegion r) { setProjectChanged(true); }", "-      });", "+    // add listener to set the project file to \"changed\" when a breakpoint or watch is added, removed, or changed", "+    getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+      public void regionAdded(final Breakpoint bp, int index) { setProjectChanged(true); }", "+      public void regionChanged(final Breakpoint bp, int index) { setProjectChanged(true); }", "+      public void regionRemoved(final Breakpoint bp) { ", "+        try {", "+          getDebugger().removeBreakpoint(bp);", "+        } catch(DebugException de) { /* just ignore it */ }", "+        setProjectChanged(true);", "+      }", "+    });", "+    getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {", "+      public void regionAdded(DocumentRegion r, int index) { setProjectChanged(true); }", "+      public void regionChanged(DocumentRegion r, int index) { setProjectChanged(true); }", "+      public void regionRemoved(DocumentRegion r) { setProjectChanged(true); }", "+    });", "+    ", "+    _debugger.addListener(new DebugListener() {", "+      public void watchSet(final DebugWatchData w) { setProjectChanged(true); }", "+      public void watchRemoved(final DebugWatchData w) { setProjectChanged(true); }    ", "-      _debugger.addListener(new DebugListener() {", "-        public void watchSet(final DebugWatchData w) { setProjectChanged(true); }", "-        public void watchRemoved(final DebugWatchData w) { setProjectChanged(true); }    ", "-        ", "-        public void regionAdded(final Breakpoint bp, int index) { }", "-        public void regionChanged(final Breakpoint bp, int index) { }", "-        public void regionRemoved(final Breakpoint bp) { }", "-        public void debuggerStarted() { }", "-        public void debuggerShutdown() { }", "-        public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) { }", "-        public void breakpointReached(final Breakpoint bp) { }", "-        public void stepRequested() { }", "-        public void currThreadSuspended() { }", "-        public void currThreadResumed() { }", "-        public void threadStarted() { }", "-        public void currThreadDied() { }", "-        public void nonCurrThreadDied() {  }", "-        public void currThreadSet(DebugThreadData thread) { }", "-      });", "-    }", "-    catch( NoClassDefFoundError ncdfe ) {", "-      // JPDA not available, so we won't use it.", "-      _debugger = NoDebuggerAvailable.ONLY;", "-    }", "-    catch( UnsupportedClassVersionError ucve ) {", "-      // Wrong version of JPDA, so we won't use it.", "-      _debugger = NoDebuggerAvailable.ONLY;", "-    }", "-    catch( Throwable t ) {", "-      // Something went wrong in initialization, don't use debugger", "-      _debugger = NoDebuggerAvailable.ONLY;", "-    }", "+      public void regionAdded(final Breakpoint bp, int index) { }", "+      public void regionChanged(final Breakpoint bp, int index) { }", "+      public void regionRemoved(final Breakpoint bp) { }", "+      public void debuggerStarted() { }", "+      public void debuggerShutdown() { }", "+      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) { }", "+      public void breakpointReached(final Breakpoint bp) { }", "+      public void stepRequested() { }", "+      public void currThreadSuspended() { }", "+      public void currThreadResumed() { }", "+      public void threadStarted() { }", "+      public void currThreadDied() { }", "+      public void nonCurrThreadDied() {  }", "+      public void currThreadSet(DebugThreadData thread) { }", "+    });"]}], "num": 12225}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88c0066bf12ea150c5e97c93521a903d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b67195760fab588029f62833aea0bb7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionLineContains.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    if (charPos == AbstractDJDocument.ERROR_INDEX) {", "+    if (charPos == -1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a285a717ba3140ef7869b980c2f9ca6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsJavaDocWithText.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    */\r", "-  boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason) {\r", "-\r", "-    try {\r", "-      // Find start of line\r", "-      int here = doc.getCurrentLocation();\r", "-      int startLine = doc.getLineStartPos(here);\r", "-      \r", "-      if (startLine <= AbstractDJDocument.DOCSTART) return false;  // on first line\r", "-      \r", "-      // Find start of previous line\r", "-      int endPrevLine = startLine - 1;\r", "-      int startPrevLine = doc.getLineStartPos(endPrevLine);\r", "-      int firstChar = doc.getLineFirstCharPos(startPrevLine);\r", "-      \r", "-      // Compare prefix\r", "-      String actualPrefix = doc.getText(firstChar, 3);\r", "-      if (! actualPrefix.equals(\"/**\")) return false;\r", "-      int nextNonWSChar = doc.getFirstNonWSCharPos(firstChar + 3, true);\r", "-      return nextNonWSChar != ERROR_INDEX && nextNonWSChar <= endPrevLine;     \r", "-    }\r", "-    catch (BadLocationException e) {\r", "-      // Shouldn't happen\r", "-      throw new UnexpectedException(e);\r", "-    }\r", "-  }\r", "+    */", "+  boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason) {", "+", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      if (startLine <= 0) return false;  // on first line", "+      ", "+      // Find start of previous line", "+      int endPrevLine = startLine - 1;", "+      int startPrevLine = doc.getLineStartPos(endPrevLine);", "+      int firstChar = doc.getLineFirstCharPos(startPrevLine);", "+      ", "+      // Compare prefix", "+      String actualPrefix = doc.getText(firstChar, 3);", "+      if (! actualPrefix.equals(\"/**\")) return false;", "+      int nextNonWSChar = doc.getFirstNonWSCharPos(firstChar + 3, true);", "+      return nextNonWSChar != -1 && nextNonWSChar <= endPrevLine;     ", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }", "+  }"]}], "num": 21192}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3afc401f0d4818ec99bbee125e6c3ab", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ec3e96703e7e8743bd6991e82775791", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 443, "methodNumberAfterChange": 453, "signatureBeforeChange": "     public InferenceChecker(Iterable<? extends Type> params, Iterable<? extends Expression> args,                              Iterable<? extends VariableType> tparams)", "signatureAfterChange": "     public InferenceChecker(Iterable<? extends Type> params, Iterable<? extends Expression> args,                              Iterable<? extends VariableType> tparams,                             Type returned, Option<Type> expected)", "diff": ["-                            Iterable<? extends VariableType> tparams) {", "+                            Iterable<? extends VariableType> tparams,", "+                            Type returned, Option<Type> expected) {", "+      _returned = returned;", "+      if (expected.isSome()) {", "+        Expression exp = TypeUtil.makeEmptyExpression();", "+        NodeProperties.setType(exp, expected.unwrap());", "+        _expected = Option.some(NodeProperties.getType(boxingConvert(exp, _returned)));", "+      }", "+      else { _expected = expected; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bd94c056c400cf475d12755160c6513", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 470, "methodNumberAfterChange": 479, "signatureBeforeChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args,                                                  final Option<Type> expected)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-                                                 final Iterable<? extends Expression> args)", "+                                                 final Iterable<? extends Expression> args,", "+                                                 final Option<Type> expected)", "-//    System.out.println(\"\\nLooking up constructor in type \" + userRepresentation(t) +", "-//                       \" with typeArgs (\" + userRepresentation(typeArgs) + \") and args (\" +", "-//                       userRepresentation(IterUtil.map(args, TYPE_OF_EXPRESSION)) + \")\");", "+    debug.logValues(\"Looking up constructor\",", "+                    new String[]{\"t\", \"typeArgs\", \"arg types\", \"expected\"},", "+                    wrap(t), wrap(typeArgs), wrap(IterUtil.map(args, NodeProperties.NODE_TYPE)),", "+                    expected);", "-      @Override public Iterable<ConstructorInvocation> forSimpleClassType(SimpleClassType t) {", "+      @Override public Iterable<ConstructorInvocation> forSimpleClassType(final SimpleClassType t) {", "-//        System.out.println(\"All constructors in type \" + userRepresentation(t) + \": \" +", "-//                           IterUtil.multilineToString(allConstructors));", "-            return makeChecker(k.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(k), args);", "+            debug.logValues(new String[]{\"k\", \"declaredParameterTypes\"}, k, SymbolUtil.declaredParameterTypes(k));", "+            return makeChecker(k.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(k),", "+                               args, t, expected);", "-      @Override public Iterable<ConstructorInvocation> forRawClassType(RawClassType t) {", "+      @Override public Iterable<ConstructorInvocation> forRawClassType(final RawClassType t) {", "-                               IterUtil.map(SymbolUtil.declaredParameterTypes(k), ERASE_LAMBDA), args);", "+                               IterUtil.map(SymbolUtil.declaredParameterTypes(k), ERASE_LAMBDA),", "+                               args, t, expected);", "-      @Override public Iterable<ConstructorInvocation> forParameterizedClassType(ParameterizedClassType t) {", "+      @Override public Iterable<ConstructorInvocation> forParameterizedClassType(final ParameterizedClassType t) {", "-                               substitute(SymbolUtil.declaredParameterTypes(k), classSigma), args);", "+                               substitute(SymbolUtil.declaredParameterTypes(k), classSigma),", "+                               args, t, expected);"]}], "num": 24096}
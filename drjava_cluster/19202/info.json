{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2865552f348b1caff86fa7cb27bf942", "detectedBy": ["DIFF_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87e2c49109999fef0447058eb929c386", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r   public void testNoNullPointer()", "signatureAfterChange": "   public void testNoNullPointer()", "diff": ["-   */\r", "-  public void testNoNullPointer() { \r", "-    directory = new File(directory.getAbsolutePath() + \"/shouldBreak\");\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\"SwitchDoesntAssign.dj2\");\r", "-      }});\r", "-\r", "-      LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      for (int i = 0; i<testFiles.length; i++) {\r", "-        result = llc.convert(new File[]{testFiles[i]});\r", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());\r", "-      }\r", "-  }  \r", "+   */", "+  public void testNoNullPointer() { ", "+    directory = new File(directory.getAbsolutePath() + \"/shouldBreak\");", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\"SwitchDoesntAssign.dj2\");", "+      }});", "+", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      for (int i = 0; i<testFiles.length; i++) {", "+        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+      }", "+  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af3fa56c7f4aa3d7acc10b7c441fa87e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void testShouldBeErrors()", "signatureAfterChange": "   public void testShouldBeErrors()", "diff": ["-   */\r", "-  public void testShouldBeErrors() { \r", "-    directory = new File(directory.getAbsolutePath() + \"/shouldBreak\");\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".dj2\");\r", "-      }});\r", "-\r", "-      LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      for (int i = 0; i<testFiles.length; i++) {\r", "-        LanguageLevelVisitor._errorAdded = false;\r", "-        result = llc.convert(new File[]{testFiles[i]});\r", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());\r", "-      }\r", "-  }\r", "+   */", "+  public void testShouldBeErrors() { ", "+    directory = new File(directory.getAbsolutePath() + \"/shouldBreak\");", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".dj2\");", "+      }});", "+", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      for (int i = 0; i<testFiles.length; i++) {", "+        LanguageLevelVisitor._errorAdded = false;", "+        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+      }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7f32498f3a1b6d43ebb4927e21f4896", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r   public void testShouldBeErrors()", "signatureAfterChange": "   public void testShouldBeErrors()", "diff": ["-  /*Test some files that should break*/\r", "-  public void testShouldBeErrors() {\r", "-    directory = new File(directory, \"shouldBreak\");\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".dj0\");\r", "-      }});\r", "-\r", "-      LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      for (int i = 0; i<testFiles.length; i++) {\r", "-        result = llc.convert(new File[]{testFiles[i]});\r", "-        assertTrue(\"should be parse exceptions or visitor exceptions in file \" + testFiles[i].getName(), !result.getFirst().isEmpty() || !result.getSecond().isEmpty());\r", "-      }\r", "-  }\r", "+  /*Test some files that should break*/", "+  public void testShouldBeErrors() {", "+    directory = new File(directory, \"shouldBreak\");", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".dj0\");", "+      }});", "+", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      for (int i = 0; i<testFiles.length; i++) {", "+        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+        assertTrue(\"should be parse exceptions or visitor exceptions in file \" + testFiles[i].getName(), !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+      }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3aabedc497b54ea75a6ad38a21a9cd7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r   public void testPackageError()", "signatureAfterChange": "   public void testPackageError()", "diff": ["-   */\r", "-  public void testPackageError() {\r", "-    directory = new File(directory.getAbsolutePath() + \"/shouldBreak/noBreak\");\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".dj2\");\r", "-      }});\r", "-      LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      for (int i = 0; i<testFiles.length; i++) {\r", "-        result = llc.convert(new File[]{testFiles[i]});\r", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());\r", "-      }\r", "-    \r", "-      \r", "-  }\r", "+   */", "+  public void testPackageError() {", "+    directory = new File(directory.getAbsolutePath() + \"/shouldBreak/noBreak\");", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".dj2\");", "+      }});", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      for (int i = 0; i<testFiles.length; i++) {", "+        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+      }", "+    ", "+      ", "+  }"]}], "num": 19202}
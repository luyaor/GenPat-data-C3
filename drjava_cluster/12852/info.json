{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5173c6cd0645dede02efb1dcf7d0656c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1db790184b5c63ebbe20bd2ad0219f08", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelDeleteTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 9, "signatureBeforeChange": "   \tpublic void testDeleteThroughToStar2()", "signatureAfterChange": "  \tpublic void testDeleteNewlineAndShadowBlockCommentStart()", "diff": ["+\tpublic void testDeleteNewlineAndShadowBlockCommentStart()", "+\t\t\tmodel1.insertSlash();", "+\t\t\tassertEquals(\"#0.0\", 1, model1.absOffset());", "+\t\t\tassertEquals(\"#0.1\",ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#1.0\", 2, model1.absOffset());", "+\t\t\tassertEquals(\"#1.1\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+", "+\t\t\tassertEquals(\"#2.0\", 3, model1.absOffset());", "+\t\t\tassertEquals(\"#2.1\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+", "+\t\t\tassertEquals(\"#3.0\", 4, model1.absOffset());", "+\t\t\tassertEquals(\"#3.1\",ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+", "+\t\t\tassertEquals(\"#4.0\", 5, model1.absOffset());", "+\t\t\tassertEquals(\"#4.1\",ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+", "+\t\t\tassertEquals(\"#5.0\", 6, model1.absOffset());", "+\t\t\tassertEquals(\"#5.1\",ReducedToken.INSIDE_BLOCK_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#6.0\", 3, model1.absOffset());\t\t\t", "+\t\t\tassertEquals(\"#7.0\", 3, model1.absOffset());\t\t\t", "+\t\t\tassertEquals(\"#7.1\",\"/\",model1.currentToken().getType());", "+\t\t\tassertEquals(\"#7.2\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "+\t\t\tassertEquals(\"#8.0\", 2, model1.absOffset());\t\t\t", "+\t\t\tassertEquals(\"#8.1\",\"*\",model1.currentToken().getType());", "+\t\t\tassertEquals(\"#8.2\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "+", "+\t\t\tmodel1.move(2);", "+\t\t\tassertEquals(\"#9.0\", 4, model1.absOffset());\t\t\t", "+\t\t\tassertEquals(\"#9.1\",\"*\",model1.currentToken().getType());", "+\t\t\tassertEquals(\"#9.2\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "+\t\t}", "-", "-\tpublic void testDeleteThroughToStar2()", "-\t\t{", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertNewline();", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertStar();", "-\t\t\t", "-\t\t\tassertEquals(\"#0.4\",ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "-\t\t\t// //*", "-\t\t\t// /*#", "-\t\t\tmodel1.move(-2);", "-\t\t\tmodel1.delete(-1);", "-\t\t\t", "-\t\t\tassertEquals(\"#0.0\",\"/\",model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#0.1\",\"*\",model1.getCursor().prevItem().getType());", "-\t\t\tassertEquals(\"#0.2\",\"*\",model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#0.3\",0,model1.getBlockOffset());", "-\t\t\tassertEquals(\"#0.4\",ReducedToken.INSIDE_LINE_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-\t\t\tassertEquals(\"#0.5\",ReducedToken.INSIDE_LINE_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67842f6be883aa3b88b4dbc3f8cd4bbb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "         public void testForInstanceOfExpressionOnly()", "signatureAfterChange": "            public void testForInstanceOfExpressionOnly()", "diff": ["-", "-    public void testForInstanceOfExpressionOnly() {", "-      InstanceofExpression ioe = new InstanceofExpression(SourceInfo.NO_INFO, ", "-                                                          new BooleanLiteral(SourceInfo.NO_INFO, true),", "-                                                          new PrimitiveType(SourceInfo.NO_INFO, \"int\"));", "-      try {", "-        _etc.forInstanceofExpressionOnly(ioe, SymbolData.BOOLEAN_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData());", "-        fail(\"Should have thrown an exception.\");", "-      }", "-      catch (Exception e) {", "-        assertEquals(\"Exception message should be correct\", \"Internal Program Error: instanceof is not currently supported.  This should have been caught before the Type Checker.  Please report this bug.\", e.getMessage());", "-        ", "-      }", "-    }", "+    public void testForInstanceOfExpressionOnly() {", "+      SymbolData sd1 = SymbolData.DOUBLE_TYPE;", "+      SymbolData sd2 = SymbolData.BOOLEAN_TYPE;", "+      SymbolData sd3 = SymbolData.INT_TYPE;", "+      InstanceofExpression ioe = new InstanceofExpression(SourceInfo.NO_INFO,          ", "+                                                          new NullLiteral(SourceInfo.NO_INFO),", "+                                                          JExprParser.NO_TYPE);  // Object type", "+      ", "+      assertEquals(\"When value_result is subtype of type_result, return BOOLEAN type_result.\", sd2.getInstanceData(), ", "+                   _etc.forInstanceofExpressionOnly(ioe, sd1, sd3.getInstanceData()));", "+      assertEquals(\"Should not throw an error.\", 0, errors.size());", "+      assertEquals(\"When type_result is subtype of value_result, return BOOLEAN type_result.\", sd2.getInstanceData(), ", "+                   _etc.forInstanceofExpressionOnly(ioe, sd3, sd1.getInstanceData()));", "+      assertEquals(\"Should not throw an error.\", 0, errors.size());", "+      assertEquals(\"When type_result and value_result are not subtypes of each other, return BOOLEAN type_result\", ", "+                   sd2.getInstanceData(),", "+                   _etc.forInstanceofExpressionOnly(ioe, sd2, sd1.getInstanceData()));", "+      assertEquals(\"Should now be one error.\", 1, errors.size());", "+      assertEquals(\"Error message should be correct.\", \"You cannot test whether an expression of type \" + sd1.getName() ", "+                     + \" belongs to type \" + sd2.getName() + \" because they are not related\", ", "+                   errors.getLast().getFirst());     ", "+      SymbolData foo = new SymbolData(\"Foo\");", "+      SymbolData fooMama = new SymbolData(\"FooMama\");", "+      foo.setSuperClass(fooMama);", "+      assertEquals(\"When value_result is a SymbolData, return BOOLEAN type_result\",  sd2.getInstanceData(), ", "+                   _etc.forInstanceofExpressionOnly(ioe, foo, fooMama));", "+      assertEquals(\"There should be 2 errors.\", 2, errors.size());", "+      assertEquals(\"Error message should be correct.\", ", "+                   \"You are trying to test if FooMama belongs to type, but it is a class or interface type, \"", "+                     + \"not an instance.  Perhaps you meant to create a new instance of FooMama\",", "+                   errors.getLast().getFirst());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70ad24df5569b680a85c0d3fab0739ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelDeleteTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 9, "signatureBeforeChange": "   \tpublic void testDeleteThroughToStar2()", "signatureAfterChange": "  \tpublic void testDeleteNewlineAndShadowBlockCommentStart()", "diff": ["+\tpublic void testDeleteNewlineAndShadowBlockCommentStart()", "+\t\t\tmodel1.insertSlash();", "+\t\t\tassertEquals(\"#0.0\", 1, model1.absOffset());", "+\t\t\tassertEquals(\"#0.1\",ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#1.0\", 2, model1.absOffset());", "+\t\t\tassertEquals(\"#1.1\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+", "+\t\t\tassertEquals(\"#2.0\", 3, model1.absOffset());", "+\t\t\tassertEquals(\"#2.1\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+", "+\t\t\tassertEquals(\"#3.0\", 4, model1.absOffset());", "+\t\t\tassertEquals(\"#3.1\",ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+", "+\t\t\tassertEquals(\"#4.0\", 5, model1.absOffset());", "+\t\t\tassertEquals(\"#4.1\",ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+", "+\t\t\tassertEquals(\"#5.0\", 6, model1.absOffset());", "+\t\t\tassertEquals(\"#5.1\",ReducedToken.INSIDE_BLOCK_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#6.0\", 3, model1.absOffset());\t\t\t", "+\t\t\tassertEquals(\"#7.0\", 3, model1.absOffset());\t\t\t", "+\t\t\tassertEquals(\"#7.1\",\"/\",model1.currentToken().getType());", "+\t\t\tassertEquals(\"#7.2\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "+\t\t\tassertEquals(\"#8.0\", 2, model1.absOffset());\t\t\t", "+\t\t\tassertEquals(\"#8.1\",\"*\",model1.currentToken().getType());", "+\t\t\tassertEquals(\"#8.2\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "+", "+\t\t\tmodel1.move(2);", "+\t\t\tassertEquals(\"#9.0\", 4, model1.absOffset());\t\t\t", "+\t\t\tassertEquals(\"#9.1\",\"*\",model1.currentToken().getType());", "+\t\t\tassertEquals(\"#9.2\",ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "+\t\t}", "-", "-\tpublic void testDeleteThroughToStar2()", "-\t\t{", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertNewline();", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertStar();", "-\t\t\t", "-\t\t\tassertEquals(\"#0.4\",ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "-\t\t\t// //*", "-\t\t\t// /*#", "-\t\t\tmodel1.move(-2);", "-\t\t\tmodel1.delete(-1);", "-\t\t\t", "-\t\t\tassertEquals(\"#0.0\",\"/\",model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#0.1\",\"*\",model1.getCursor().prevItem().getType());", "-\t\t\tassertEquals(\"#0.2\",\"*\",model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#0.3\",0,model1.getBlockOffset());", "-\t\t\tassertEquals(\"#0.4\",ReducedToken.INSIDE_LINE_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-\t\t\tassertEquals(\"#0.5\",ReducedToken.INSIDE_LINE_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "-\t\t}"]}], "num": 12852}
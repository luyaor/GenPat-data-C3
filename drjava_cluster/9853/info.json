{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08a03a5925e1b4d1a5d3712481d26257", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bb031cd081841e262087c8126e7bcb1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "96bf5a5cd2d40db16b0b6c02c789d4b37a3a9876", "commitAfterChange": "0bdf9ca1ec4730da3a7aefde2e61b8646efd7da7", "methodNumberBeforeChange": 307, "methodNumberAfterChange": 307, "signatureBeforeChange": "      private void _junitProject()", "signatureAfterChange": "   private void _junitProject()", "diff": ["-  private void _junitProject() { _junitAll(); }", "+  /** Tests the documents in the project source tree. Assumes that DrJava is in project mode. */", "+  private void _junitProject() { ", "+     new Thread(\"Running Junit Tests\") {", "+      public void run() {", "+        _disableJUnitActions();", "+        hourglassOn();  // turned off in JUnitStarted/NonTestCase event", "+        try { _model.getJUnitModel().junitProject(); } ", "+        catch(UnexpectedException e) { _junitInterrupted(e); }", "+      }", "+    }.start();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e6f5b7baf7ea3d671612e676d53b23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 405, "methodNumberAfterChange": 402, "signatureBeforeChange": "      public void nonTestCase(boolean isTestAll)", "signatureAfterChange": "      public void nonTestCase(boolean isTestAll)", "diff": ["+    /** Event that is fired with there is nothing to test.  JUnit is never started. */ ", "-      String message = isTestAll ?", "+      final String message = isTestAll ?", "+      ", "+      // Not necessarily invoked from event-handling thread!", "-      JOptionPane.showMessageDialog(MainFrame.this, message,", "-                                    \"Test Works Only On JUnit TestCases\",", "-                                    JOptionPane.ERROR_MESSAGE);", "-", "-", "+      SwingUtilities.invokeLater(new Runnable() {", "+        public void run() {", "+          JOptionPane.showMessageDialog(MainFrame.this, message,", "+                                        \"Test Works Only On JUnit TestCases\",", "+                                        JOptionPane.ERROR_MESSAGE);", "+          // clean up as junitEnded except hourglassOff (should factored into a private method)", "+           showTab(_junitErrorPanel);", "+            _junitAction.setEnabled(true);", "+            _junitAllAction.setEnabled(true);", "+            _junitErrorPanel.reset();", "+        }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df3de96c7ba381e91be05bc890dd3e02", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 64, "signatureBeforeChange": "   public void interpreterReady(File wd)", "signatureAfterChange": "   public void interpreterReady(final File wd)", "diff": ["-  public void interpreterReady(File wd) {", "+  public void interpreterReady(final File wd) {", "-      _document.reset(generateBanner(wd));", "-      _document.setInProgress(false);", "-      _caretInit();", "-      _notifyInterpreterReady(wd);", "+      Utilities.invokeLater(new Runnable() {", "+          public void run() {", "+            _document.acquireWriteLock();", "+              try {", "+              _document.reset(generateBanner(wd));", "+              _document.setInProgress(false);", "+              _pane.setCaretPosition(_document.getLength());", "+//              _caretInit();", "+            }", "+              finally { _document.releaseWriteLock(); }", "+          _notifyInterpreterReady(wd);", "+          }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b966a83b6480e83666a9f8012d1f46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "202fe65b6d19b63d8f3941f6eff8e18c68fa7232", "commitAfterChange": "b7e7dc26985115a0b1d39562458d043f05ace9bb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean searchSelectedText, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm, MovingDocumentRegion region,                       final FindResultsPanel panel)", "signatureAfterChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean searchSelectedText, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm, final MovingDocumentRegion region,                       final FindResultsPanel panel)", "diff": ["-                      final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm, MovingDocumentRegion region,", "+                      final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm, final MovingDocumentRegion region,", "-      }, region.getStartOffset(), region.getEndOffset());", "+      }, region);", "-          if (count > 0) _frame.showFindResultsPanel(panel);", "-          else { ", "-            Toolkit.getDefaultToolkit().beep();", "-            panel.freeResources(); ", "-          }", "-          _frame.setStatusMessage(\"Found \" + count + \" occurrence\" + ((count == 1) ? \"\" : \"s\") + \".\");", "+      if (count > 0) _frame.showFindResultsPanel(panel);", "+      else { ", "+        Toolkit.getDefaultToolkit().beep();", "+        panel.freeResources(); ", "+      }", "+      _frame.setStatusMessage(\"Found \" + count + \" occurrence\" + ((count == 1) ? \"\" : \"s\") + \".\");", "+          ", "+      if (searchSelectedText) {", "+        EventQueue.invokeLater(new Runnable() { public void run() { ", "+          if (_defPane!=null) {", "+            _defPane.requestFocusInWindow();", "+            _defPane.setSelectionStart(region.getStartOffset());", "+            _defPane.setSelectionEnd(region.getEndOffset());", "+          }", "+        } });", "+      }          "]}], "num": 9853}
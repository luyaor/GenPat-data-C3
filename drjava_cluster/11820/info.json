{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "959da97961fde716489a3512ddfdd088", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "543e25623d362313cf70cbfc1731dcbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public Class visit(ArrayAccess node)", "signatureAfterChange": "   public Class visit(ArrayAccess node)", "diff": ["+    // Make sure this is an array", "-    Class result;", "-    node.setProperty(NodeProperties.TYPE, result = c.getComponentType());", "+    Class result = c.getComponentType();", "+    node.setProperty(NodeProperties.TYPE, result);", "-    if (c != char.class && c != byte.class && c != short.class && c != int.class) {", "+    if (c != char.class      && c != byte.class && c != short.class && c != int.class &&", "+        c != Character.class && c != Byte.class && c != Short.class && c != Integer.class) {", "+    ", "+    // un-box the index into the array, if necessary", "+    if (_isBoxingType(c)) {", "+      node.setCellNumber(_unbox(node.getCellNumber(), c));", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c576843b16d3d8657644e482ed2979a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public Class visit(SwitchStatement node)", "signatureAfterChange": "   public Class visit(SwitchStatement node)", "diff": ["-    Class c = node.getSelector().acceptVisitor(this);", "-    if (c != char.class && c != byte.class && c != short.class && c != int.class) {", "+    Expression exp = node.getSelector();", "+    Class c = exp.acceptVisitor(this);", "+    if (c != char.class      && c != byte.class && c != short.class && c != int.class  && ", "+        c != Character.class && c != Byte.class && c != Short.class && c != Integer.class) {", "-", "+    // unbox it if needed", "+    if (c == Character.class || c == Byte.class || c == Short.class || c == Integer.class) {", "+      node.setSelector(_unbox(exp, c));", "+    }", "+    ", "-      Expression exp = sb.getExpression();", "+      exp = sb.getExpression();"]}], "num": 11820}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "016a07aff68343373b5f78386e37d39e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d15a69522fd3ecb1cfba50ca5bf059c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "35ca78e33b0503c2a6070986170dae99ba9dcb1a", "commitAfterChange": "6136e4c5753a47e4bcb40afa831b9c58e353fd69", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 105, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["-    final ProjectFileIR ir;", "-    final DocFile[] srcFiles;", "-    final DocFile[] auxFiles;", "+    ", "+    final ProjectFileIR ir = ProjectFileParser.ONLY.parse(projectFile);", "+    ", "+    final DocFile[] srcFiles = ir.getSourceFiles();", "+    final DocFile[] auxFiles = ir.getAuxiliaryFiles();", "+    final File buildDir = ir.getBuildDirectory();", "+    final File mainClass = ir.getMainClass();", "+    final File[] projectClasspaths = ir.getClasspaths();", "+    ", "+    final String projfilepath = projectFile.getCanonicalPath();", "+    ", "+    final List<OpenDefinitionsDocument> oldProjDocs = getProjectDocuments();", "+    final FileGroupingState oldState = _state;", "-    //File projectRoot = projectFile.getParentFile();", "-    ir = ProjectFileParser.ONLY.parse(projectFile);", "-    srcFiles = ir.getSourceFiles();", "-    auxFiles = ir.getAuxiliaryFiles();", "-    String projfilepath = projectFile.getCanonicalPath();", "-        return !(d.isProjectFile() || d.isAuxiliaryFile()) || d.isUntitled();", "+        return !(d.inProject() || d.isAuxiliaryFile()) || d.isUntitled();", "-    File buildDir = ir.getBuildDirectory();", "-    File mainClass;", "-    mainClass = ir.getMainClass();", "-    ", "-    File[] projectclasspaths = ir.getClasspaths();", "-    for (File f : projectclasspaths) { extraClasspaths.add(f); }", "+    for (File f : projectClasspaths) { extraClasspaths.add(f); }", "-    setFileGroupingState(_makeProjectFileGroupingState(mainClass, buildDir, projectFile, srcFiles, extraClasspaths));", "-    ", "-//    Vector<File> currentclasspaths = DrJava.getConfig().getSetting(OptionConstants.EXTRA_CLASSPATH);", "-//    for (int i = 0; i<projectclasspaths.length; i++) {", "-//      currentclasspaths.remove(projectclasspaths[i].getAbsoluteFile());", "-//      currentclasspaths.add(projectclasspaths[i].getAbsoluteFile());", "-//    }", "-//    DrJava.getConfig().setSetting(OptionConstants.EXTRA_CLASSPATH, currentclasspaths);", "-    ", "-    setProjectChanged(false);", "+    setFileGroupingState(makeProjectFileGroupingState(mainClass, buildDir, projectFile, srcFiles, extraClasspaths));", "-//    List<OpenDefinitionsDocument> nonProjDocs = getNonProjectDocuments();", "-    final List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // opened documents in the project source tree", "-    ", "-//    File[] projectFiles = getProjectFiles();   ", "+    final List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // opened documents in the project source tree ", "-    //List<OpenDefinitionsDocument> docsToClose = new LinkedList<OpenDefinitionsDocument>();", "-          if (d.isProjectFile()) closeFile(d);", "+          if (oldState.inProject(d.file())) closeFile(d);", "-//    resetInteractions(); // Since the classpath is most likely changed.  Clears out test pane as well.", "+    resetInteractions(); // Since the classpath is most likely changed.  Clears out test pane as well."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e03bcd4c1f44675d6b6cd9fb72b84cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ea3de3bd50de8d728bdb5d615bd9b8838d2e94b4", "commitAfterChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "methodNumberBeforeChange": 303, "methodNumberAfterChange": 309, "signatureBeforeChange": "      private boolean _save()", "signatureAfterChange": "      private boolean _save()", "diff": ["-      if (_model.getActiveDocument().saveFile(_saveSelector)) {", "-        _currentDefPane.hasWarnedAboutModified(false); ", "-        ", "-        /**This highlights the document in the navigator */", "-        _model.setActiveDocument(_model.getActiveDocument());", "-        ", "-        return true;", "+      // now works with multiple files", "+      List<OpenDefinitionsDocument> l = _model.getDocumentNavigator().getSelectedDocuments();", "+      boolean error = true;", "+      for(OpenDefinitionsDocument doc: l) {", "+        if (doc.saveFile(_saveSelector)) {", "+          getDefPaneGivenODD(doc).hasWarnedAboutModified(false);", "+        }", "+        else {", "+          error = true;", "+        }", "-      else return false;", "+      return error;", "+//      if (_model.getActiveDocument().saveFile(_saveSelector)) {", "+//        _currentDefPane.hasWarnedAboutModified(false); ", "+//        ", "+//        /**This highlights the document in the navigator */", "+//        _model.setActiveDocument(_model.getActiveDocument());", "+//        ", "+//        return true;", "+//      }", "+//      else return false;"]}], "num": 20889}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79e0c850549aea3a78c025c31718e2f0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00fb899eb665103aec0d201a815b83b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "bffcae721f8dbc844dc8a667963f0caab39047ea", "commitAfterChange": "0af0c72004872701891228fa18659a3204fb6e2f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private static FullVersion guessVersion(File f, CompoundJDKDescriptor desc)", "signatureAfterChange": "      private static FullVersion guessVersion(File f)", "diff": ["-  private static FullVersion guessVersion(File f, CompoundJDKDescriptor desc) {", "+  private static FullVersion guessVersion(File f) {", "-    List<Lambda3<String,String,String,String>> detectors;", "-    if (desc!=null) {", "-      detectors = Collections.<Lambda3<String,String,String,String>>singletonList(desc.getDetector());", "-    }", "-    else {", "-      detectors = Collections.<Lambda3<String,String,String,String>>emptyList();", "-    }", "-", "-      if (name.startsWith(\"jdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(3),vendor,vendor,detectors); }", "-      else if (name.startsWith(\"j2sdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(5),vendor,vendor,detectors); }", "-      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) { result = JavaVersion.parseFullVersion(parsedVersion = name,vendor,vendor,detectors); }", "+      else if (path.toLowerCase().contains(\"sun\")) vendor = \"sun\";", "+      if (name.startsWith(\"jdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(3),vendor,vendor); }", "+      else if (name.startsWith(\"j2sdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(5),vendor,vendor); }", "+      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) { result = JavaVersion.parseFullVersion(parsedVersion = name,vendor,vendor); }", "-            result = JavaVersion.parseFullVersion(parsedVersion = v,vendor,vendor,detectors);", "+            result = JavaVersion.parseFullVersion(parsedVersion = v,vendor,vendor);", "-    // distinguish Sun Java 6 and OpenJDK 6 if it is still unknown", "-    if ((result == null) ||", "-        (result.vendor()==JavaVersion.VendorType.UNKNOWN &&", "-         result.majorVersion().compareTo(JavaVersion.JAVA_6)>=0) ||", "-        (f.getAbsolutePath().toLowerCase().contains(\"mint\"))) {", "-      JarFile jf = null;", "-      try {", "-        jf = new JarFile(f);", "-        if (jf.getJarEntry(\"edu/rice/cs/mint/comp/TransStaging.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/BracketExprTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/BracketStatTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/EscapeExprTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/EscapeStatTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")==null) {", "-          vendor = \"mint\";", "-        }    ", "-        else if (jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")==null) {", "-          vendor = \"openjdk\";", "-        }", "-        else {", "-          vendor = \"sun\";", "-        }", "-        result = JavaVersion.parseFullVersion(parsedVersion,vendor,vendor,detectors);", "+    ", "+    if ((result == null) || (result.vendor()==JavaVersion.VendorType.UNKNOWN)) {", "+      if (result.majorVersion().compareTo(JavaVersion.JAVA_6)<0) {", "+        // Java 5 or earlier, assume Sun", "+        vendor = \"sun\";", "-      catch(IOException ioe) { /* keep existing version */ }", "-      finally {", "+      else {", "+        // distinguish Sun Java 6 and OpenJDK 6 if it is still unknown", "+        JarFile jf = null;", "-          if (jf != null) jf.close();", "+          jf = new JarFile(f);", "+          if (jf.getJarEntry(\"com/sun/tools/javac/util/JavacFileManager.class\")!=null) {", "+            // NOTE: this may cause Sun's Java 7 to also be recognized as openjdk", "+            vendor = \"openjdk\";", "+          }", "+          else if (jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")!=null) {", "+            vendor = \"sun\";", "+          }", "-        catch(IOException ioe) { /* ignore, just trying to close the file */ }", "+        catch(IOException ioe) { /* keep existing version */ }", "+        finally {", "+          try {", "+            if (jf != null) jf.close();", "+          }", "+          catch(IOException ioe) { /* ignore, just trying to close the file */ }", "+        }", "+      result = JavaVersion.parseFullVersion(parsedVersion,vendor,vendor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d5a0d0a369cdd5139a1778f683f075b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "f5dccb0b4004cfd3f184330e53ba101eca68857c", "commitAfterChange": "8dbb3967ef585255b4d1ff989654250a57b1af90", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public static FullVersion guessVersion(File f)", "signatureAfterChange": "      public static FullVersion guessVersion(File f, JDKDescriptor desc)", "diff": ["-  public static FullVersion guessVersion(File f) {", "+  public static FullVersion guessVersion(File f, JDKDescriptor desc) {", "+    ", "+    boolean forceUnknown = (desc!=null) && desc.isCompound();", "-      if (path.startsWith(\"/System/Library/Frameworks/JavaVM.framework\")) vendor = \"apple\";", "-      else if (path.toLowerCase().contains(\"openjdk\")) vendor = \"openjdk\";", "-      else if (path.toLowerCase().contains(\"sun\")) vendor = \"sun\";", "+      if (!forceUnknown) {", "+        if (path.startsWith(\"/System/Library/Frameworks/JavaVM.framework\")) vendor = \"apple\";", "+        else if (path.toLowerCase().contains(\"openjdk\")) vendor = \"openjdk\";", "+        else if (path.toLowerCase().contains(\"sun\")) vendor = \"sun\";", "+      }", "-      if (result.majorVersion().compareTo(JavaVersion.JAVA_6)<0) {", "-        // Java 5 or earlier, assume Sun", "-        vendor = \"sun\";", "-      }", "-      else {", "-        // distinguish Sun Java 6 and OpenJDK 6 if it is still unknown", "-        JarFile jf = null;", "-        try {", "-          jf = new JarFile(f);", "-          /* if (jf.getJarEntry(\"com/sun/tools/javac/file/JavacFileManager.class\")!=null) {            ", "-            // NOTE: this may cause OpenJDK 7 to also be recognized as sun", "-            vendor = \"sun\";", "-          }", "-          else */ if (jf.getJarEntry(\"com/sun/tools/javac/util/JavacFileManager.class\")!=null) {", "-            vendor = \"openjdk\";", "-          }", "-          else if (jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")!=null) {", "-            vendor = \"sun\";", "-          }", "+      if (!forceUnknown) {", "+        if (result.majorVersion().compareTo(JavaVersion.JAVA_6)<0) {", "+          // Java 5 or earlier, assume Sun", "+          vendor = \"sun\";", "-        catch(IOException ioe) { /* keep existing version */ }", "-        finally {", "+        else {", "+          // distinguish Sun Java 6 and OpenJDK 6 if it is still unknown", "+          JarFile jf = null;", "-            if (jf != null) jf.close();", "+            jf = new JarFile(f);", "+            /* if (jf.getJarEntry(\"com/sun/tools/javac/file/JavacFileManager.class\")!=null) {            ", "+             // NOTE: this may cause OpenJDK 7 to also be recognized as sun", "+             vendor = \"sun\";", "+             }", "+             else */ if (jf.getJarEntry(\"com/sun/tools/javac/util/JavacFileManager.class\")!=null) {", "+               vendor = \"openjdk\";", "+             }", "+             else if (jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")!=null) {", "+               vendor = \"sun\";", "+             }", "-          catch(IOException ioe) { /* ignore, just trying to close the file */ }", "+          catch(IOException ioe) { /* keep existing version */ }", "+          finally {", "+            try {", "+              if (jf != null) jf.close();", "+            }", "+            catch(IOException ioe) { /* ignore, just trying to close the file */ }", "+          }"]}], "num": 3310}
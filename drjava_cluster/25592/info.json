{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4f7d3818045897bad66024349b69ffe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a28fe2d38c7452bccaea952c2a03ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "6ec50bbad6902867dbbd689ce421d583e985cd75", "commitAfterChange": "40c5d59f4d83560f5b1a6adb2abd1bc3bc016193", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 66, "signatureBeforeChange": "   public void quitFailed(Throwable th)", "signatureAfterChange": "          @Override public void startFailed(Exception e)", "diff": ["-   */", "-  public void quitFailed(Throwable th) {", "-    _interactionsModel.interpreterResetFailed(th);", "-    _cleanlyRestarting = false;", "-  }", "+    ", "+    @Override public void startFailed(Exception e) {", "+      int count = _failures + 1;", "+      if (count < MAX_STARTUP_FAILURES) {", "+        if (_state.compareAndSet(this, new StartingState(count))) { _doStartup(); }", "+        else { _state.value().startFailed(e); }", "+      }", "+      else {", "+        if (_state.compareAndSet(this, new FreshState())) { _interactionsModel.interpreterWontStart(e); }", "+        else { _state.value().startFailed(e); }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3521afced8bb199266d19e5b45ea184", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public boolean isInterpreterRunning()", "signatureAfterChange": "   protected void handleSlaveWontStart(Exception e)", "diff": ["-  public boolean isInterpreterRunning() { return _interpreterJVM() != null; }", "+   */", "+  protected void handleSlaveWontStart(Exception e) {", "+    boolean giveUp;", "+    synchronized (_startupLock) {", "+      _startupAttempts++;", "+      debug.logValue(\"startupFailures\", _startupAttempts);", "+      giveUp = _startupAttempts > MAX_STARTUP_FAILURES;", "+      if (giveUp) {", "+        _restart = false;", "+        _startupAttempts = 0;", "+        _startupComplete.signal();", "+      }", "+    }", "+    if (giveUp) {", "+      debug.log(\"Giving up on restart\");", "+      _interactionsModel.interpreterWontStart(e);", "+    }", "+    else {", "+      debug.logStart(\"trying to start interpreter again\");", "+      _doStartup();", "+      debug.logEnd(\"trying to start interpreter again\");", "+    }", "+  }"]}], "num": 25592}
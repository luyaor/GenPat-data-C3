{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42b9e881e848734a867f2065adbd0e72", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ada6c5a4a65e8d1ef4d9c73a6d1dfd1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 32, "signatureBeforeChange": "          public void breakpointRemoved(Breakpoint bp)", "signatureAfterChange": "     public void breakpointRemoved(final Breakpoint bp)", "diff": ["-     ", "-   public void breakpointRemoved(Breakpoint bp) {", "-     ", "-     DefaultMutableTreeNode bpDoc = new DefaultMutableTreeNode(bp.getClassName());", "-     ", "-     Enumeration documents = _breakpointNode.children();", "-     while (documents.hasMoreElements()) {", "-       DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-       if (doc.getUserObject().equals(bpDoc.getUserObject())) {", "-         // have to remove the correct line number", "-         //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "-         Enumeration lineNumbers = doc.children();", "-         while (lineNumbers.hasMoreElements()) {", "-           DefaultMutableTreeNode lineNumber = ", "-             (DefaultMutableTreeNode)lineNumbers.nextElement();", "-           if (lineNumber.getUserObject().equals(new Integer (bp.getLineNumber()))) {", "-             //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "-             //doc.remove(lineNumber);", "-             _bpTreeModel.removeNodeFromParent(lineNumber);", "-             if (doc.getChildCount() == 0) {", "-               // this document has no more breakpoints, remove it", "-               //_breakpointNode.remove(doc);", "-               _bpTreeModel.removeNodeFromParent(doc);", "-             }        ", "-             //_bpTree.scrollPathToVisible(new TreePath(childNode.getPath()));", "-             //_bpTreeModel.reload();", "-             return;", "-           }", "-         }", "-       }", "-     }    ", "-   }", "+     */", "+    public void breakpointRemoved(final Breakpoint bp) {", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          DefaultMutableTreeNode bpDocNode = new DefaultMutableTreeNode(bp.getClassName());", "+          ", "+          // Find the document node for this breakpoint", "+          Enumeration documents = _breakpointRootNode.children();", "+          while (documents.hasMoreElements()) {", "+            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+            if (doc.getUserObject().equals(bpDocNode.getUserObject())) {", "+              //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "+              ", "+              // Find the correct line number node for this breakpoint", "+              Enumeration lineNumbers = doc.children();", "+              while (lineNumbers.hasMoreElements()) {", "+                DefaultMutableTreeNode lineNumber = ", "+                  (DefaultMutableTreeNode)lineNumbers.nextElement();", "+                if (lineNumber.getUserObject().equals(new Integer(bp.getLineNumber()))) {", "+                  //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "+                  _bpTreeModel.removeNodeFromParent(lineNumber);", "+                  if (doc.getChildCount() == 0) {", "+                    // this document has no more breakpoints, remove it", "+                    _bpTreeModel.removeNodeFromParent(doc);", "+                  }        ", "+                  return;", "+                }", "+              }", "+            }", "+          }", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a50553d5c3358dafebb6e7bc069df90f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 48, "signatureBeforeChange": "     public void breakpointSet(final Breakpoint bp)", "signatureAfterChange": "     public void breakpointSet(final Breakpoint bp)", "diff": ["-     */", "-    public void breakpointSet(final Breakpoint bp) {", "-//      // Only change GUI from event-dispatching thread", "-//      Runnable doCommand = new Runnable() {", "-//        public void run() {", "-          DefaultMutableTreeNode bpDocNode = new DefaultMutableTreeNode(bp.getClassName());", "-", "-          // Look for matching document node", "-          // Raw type here due to Swing's use of raw types.", "-          Enumeration documents = _breakpointRootNode.children();", "-          while (documents.hasMoreElements()) {", "-            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-            if (doc.getUserObject().equals(bpDocNode.getUserObject())) {", "-", "-              // Create a new breakpoint in this node", "-              //Sort breakpoints by line number.", "-              // Raw type here due to Swing's use of raw types.", "-              Enumeration lineNumbers = doc.children();", "-              while (lineNumbers.hasMoreElements()) {", "-                DefaultMutableTreeNode lineNumber = (DefaultMutableTreeNode)lineNumbers.nextElement();", "-", "-                //if line number of indexed breakpoint is less than new breakpoint, continue", "-                if (((Integer)lineNumber.getUserObject()).intValue() > bp.getLineNumber()) {", "-", "-                  //else, add to the list", "-                  DefaultMutableTreeNode newBreakpoint =", "-                    new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "-                  _bpTreeModel.insertNodeInto(newBreakpoint, doc, doc.getIndex(lineNumber));", "-", "-                  // Make sure this node is visible", "-                  _bpTree.scrollPathToVisible(new TreePath(newBreakpoint.getPath()));", "-                  return;", "-                }", "-              }", "-              //if none are greater, add at the end", "-              DefaultMutableTreeNode newBreakpoint =", "-                new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "-              _bpTreeModel.insertNodeInto(newBreakpoint, doc, doc.getChildCount());", "-", "-              // Make sure this node is visible", "-              _bpTree.scrollPathToVisible(new TreePath(newBreakpoint.getPath()));", "-              return;", "-            }", "-          }", "-          // No matching document node was found, so create one", "-          _bpTreeModel.insertNodeInto(bpDocNode, _breakpointRootNode, _breakpointRootNode.getChildCount());", "-          DefaultMutableTreeNode newBreakpoint =", "-            new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "-          _bpTreeModel.insertNodeInto(newBreakpoint, bpDocNode, bpDocNode.getChildCount());", "-", "-          // Make visible", "-          TreePath pathToNewBreakpoint = new TreePath(newBreakpoint.getPath());", "-          _bpTree.scrollPathToVisible(pathToNewBreakpoint);", "-//        }", "-//      };", "-//      Utilities.invokeLater(doCommand);", "-    }", "+    /** Called when a breakpoint is set in a document. Must be executed in event thread. */", "+    public void breakpointSet(final Breakpoint bp) { }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5b134f0bfbde151716623bf6e0dd634", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "        public void breakpointReached(Breakpoint bp)", "signatureAfterChange": "     public void breakpointReached(final Breakpoint bp)", "diff": ["-   ", "-   public void breakpointReached(Breakpoint bp) {", "-     DefaultMutableTreeNode bpDoc = new DefaultMutableTreeNode(bp.getClassName());", "-     ", "-     Enumeration documents = _breakpointNode.children();", "-     while (documents.hasMoreElements()) {", "-       DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-       if (doc.getUserObject().equals(bpDoc.getUserObject())) {", "-         // have to remove the correct line number", "-         //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "-         Enumeration lineNumbers = doc.children();", "-         while (lineNumbers.hasMoreElements()) {", "-           DefaultMutableTreeNode lineNumber = ", "-             (DefaultMutableTreeNode)lineNumbers.nextElement();", "-           if (lineNumber.getUserObject().equals(new Integer (bp.getLineNumber()))) {", "-             //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "-             ", "-             //DefaultMutableTreeNode hitBreakpoint = new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "-             TreePath pathToNewBreakpoint = new TreePath(lineNumber.getPath());", "-             ", "-             _bpTree.scrollPathToVisible(pathToNewBreakpoint);", "-             _bpTree.setSelectionPath(pathToNewBreakpoint);", "-             //DrJava.consoleOut().println(\"Set selection to new hit breakpoint.\");", "-           }", "-         }", "-       }", "-     }", "-   }", "+     */", "+    public void breakpointReached(final Breakpoint bp) {", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          DefaultMutableTreeNode bpDoc = new DefaultMutableTreeNode(bp.getClassName());", "+          ", "+          // Find the document node for this breakpoint", "+          Enumeration documents = _breakpointRootNode.children();", "+          while (documents.hasMoreElements()) {", "+            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+            if (doc.getUserObject().equals(bpDoc.getUserObject())) {", "+              //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "+              ", "+              // Find the correct line number node for this breakpoint", "+              Enumeration lineNumbers = doc.children();", "+              while (lineNumbers.hasMoreElements()) {", "+                DefaultMutableTreeNode lineNumber = ", "+                  (DefaultMutableTreeNode)lineNumbers.nextElement();", "+                if (lineNumber.getUserObject().equals(new Integer(bp.getLineNumber()))) {", "+                  //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "+                  ", "+                  // Select the node which has been hit", "+                  TreePath pathToNewBreakpoint = new TreePath(lineNumber.getPath());", "+                  _bpTree.scrollPathToVisible(pathToNewBreakpoint);", "+                  _bpTree.setSelectionPath(pathToNewBreakpoint);", "+                  //DrJava.consoleOut().println(\"Set selection to new hit breakpoint.\");", "+                }", "+              }", "+            }", "+          }", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);", "+    }"]}], "num": 24573}
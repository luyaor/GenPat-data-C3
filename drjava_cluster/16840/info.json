{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "502db7682e1d8b9428eeb2147c6abdbc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b11453dddb18fc103f0f2422d1bd079c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r   public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result)", "signatureAfterChange": "   public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result)", "diff": ["-  /* Make sure that the conditional expression has the right type. */\r", "-  public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result) {\r", "-    if (testExpression_result != null && assertFound(testExpression_result, that.getTestExpression())) {\r", "-      if (!testExpression_result.isInstanceType()) {\r", "-        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);\r", "-      }\r", "-      else if (!testExpression_result.getSymbolData().isBooleanType(_targetVersion)) {\r", "-        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());\r", "-      }\r", "-    }\r", "-    return null;\r", "-  }\r", "+  /* Make sure that the conditional expression has the right type. */", "+  public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result) {", "+    if (testExpression_result != null && assertFound(testExpression_result, that.getTestExpression())) {", "+      if (!testExpression_result.isInstanceType()) {", "+        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      }", "+      else if (!testExpression_result.getSymbolData().isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());", "+      }", "+    }", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbed48da230cdc0e2f8b4749b63f3bce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result)", "signatureAfterChange": "   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result)", "diff": ["-  /* Make sure that the conditional expression has the right type. */\r", "-  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result) {\r", "-    if (condition_result != null && assertFound(condition_result, that)) { \r", "-      if (!condition_result.isInstanceType()) {\r", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);\r", "-      }\r", "-      else if (!condition_result.getSymbolData().isBooleanType(_targetVersion)) {\r", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that);\r", "-      }\r", "-    }\r", "-    return null;\r", "-  }\r", "+  /* Make sure that the conditional expression has the right type. */", "+  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result) {", "+    if (condition_result != null && assertFound(condition_result, that)) { ", "+      if (!condition_result.isInstanceType()) {", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      }", "+      else if (!condition_result.getSymbolData().isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that);", "+      }", "+    }", "+    return null;", "+  }"]}], "num": 16840}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98fb97846e62eb12560493e8979e0d7f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0146734045fa0c4c16cd1e1c2fed8ff2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "297435705dbd8bf9d631995d57ce87c743b50405", "commitAfterChange": "1baaca56848b77e4ea889da1ec6855791456c263", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   private void _ok()", "signatureAfterChange": "   private void _ok()", "diff": ["+      HashSet<String> _exceptions = new HashSet<String>();", "-            if(files[i].isDirectory()){", "-              jarFile.addDirectoryRecursive(files[i], files[i].getName(), allFilter);", "-            }else{", "-              jarFile.addFile(files[i], \"\", files[i].getName());", "+            try {", "+              if(files[i].isDirectory()){", "+                LOG.log(\"jarFile.addDirectoryRecursive(\"+files[i]+\")\");", "+                jarFile.addDirectoryRecursive(files[i], files[i].getName(), allFilter);", "+              }else{", "+                LOG.log(\"jarFile.addFile(\"+files[i]+\")\");", "+                jarFile.addFile(files[i], \"\", files[i].getName());", "+              }", "+            catch(IOException ioe) { _exceptions.add(ioe.getMessage()); }", "-            if (files[i].isDirectory()) {", "-              jarFile.addDirectoryRecursive(files[i], files[i].getName(), classFilter);", "+            try {", "+              if (files[i].isDirectory()) {", "+                LOG.log(\"jarFile.addDirectoryRecursive(\"+files[i]+\")\");", "+                jarFile.addDirectoryRecursive(files[i], files[i].getName(), classFilter);", "+              }", "+              else {", "+                LOG.log(\"jarFile.addFile(\"+files[i]+\")\");", "+                jarFile.addFile(files[i], \"\", files[i].getName());", "+              }", "-            else {", "-              jarFile.addFile(files[i], \"\", files[i].getName());", "-            }", "+            catch(IOException ioe) { _exceptions.add(ioe.getMessage()); }", "-            catch (IOException e) {", "-              e.printStackTrace();", "-              throw new UnexpectedException(e);", "-            }", "+            catch(IOException ioe) { _exceptions.add(ioe.getMessage()); }", "+            LOG.log(\"(_jarClasses.isSelected() && _jarSources.isSelected()) || _jarAll.isSelected()\");", "+              LOG.log(\"jarAll\");", "+              LOG.log(\"binRoot=\"+binRoot);", "+              LOG.log(\"root=\"+_model.getProjectRoot());", "+              LOG.log(\"FileOps.isAncestorOf(_model.getProjectRoot(),binRoot)=\"+FileOps.isAncestorOf(_model.getProjectRoot(),binRoot));", "+              LOG.log(\"mainJar=\"+mainJar);", "+              LOG.log(\"jarOut=\"+jarOut);", "-              if(!(binRoot.equals(_model.getProjectRoot())))", "+              if(!_model.getProjectRoot().equals(binRoot))", "+                LOG.log(\"jarBuildDirectory\");", "-          e.printStackTrace();", "-          ", "+          // e.printStackTrace();", "-          if (_jarClasses.isSelected() && _makeExecutable.isSelected()) {", "+          if (_exceptions.size()>0) {", "+            ScrollableListDialog<String> dialog = new ScrollableListDialog.Builder<String>()", "+              .setOwner(JarOptionsDialog.this)", "+              .setTitle(\"Problems Creating Jar\")", "+              .setText(\"There were problems creating this jar file, but DrJava was probably able to recover.\")", "+              .setItems(new ArrayList<String>(_exceptions))", "+              .setMessageType(JOptionPane.ERROR_MESSAGE)", "+              .build();", "+            ", "+            Utilities.setPopupLoc(dialog, JarOptionsDialog.this);", "+            dialog.showDialog();", "+          }", "+          if ((_jarAll.isSelected() || _jarClasses.isSelected()) && _makeExecutable.isSelected()) {", "-            JOptionPane.showMessageDialog(JarOptionsDialog.this, \"An error occured while creating the jar file. This could be because the file that you are writing to or the file you are reading from could not be opened.\", \"Error: File Access\", JOptionPane.ERROR_MESSAGE);", "-            JarOptionsDialog.this.setVisible(false);", "-          }else{", "-            JOptionPane.showMessageDialog(JarOptionsDialog.this, \"The supplied manifest does not conform to the 1.0 Manifest format specification.\", \"Error: Malformed Manifest\", JOptionPane.ERROR_MESSAGE);", "+            if (_exceptions.size()>0) {", "+              ScrollableListDialog<String> dialog = new ScrollableListDialog.Builder<String>()", "+                .setOwner(JarOptionsDialog.this)", "+                .setTitle(\"Error Creating Jar\")", "+                .setText(\"<html>An error occured while creating the jar file. This could be because the file<br>\"+", "+                         \"that you are writing to or the file you are reading from could not be opened.</html>\")", "+                .setItems(new ArrayList<String>(_exceptions))", "+                .setMessageType(JOptionPane.ERROR_MESSAGE)", "+                .build();", "+              ", "+              Utilities.setPopupLoc(dialog, JarOptionsDialog.this);", "+              dialog.showDialog();", "+            }", "+            else {", "+              JOptionPane.showMessageDialog(JarOptionsDialog.this, ", "+                                            \"An error occured while creating the jar file. This could be because the file that you \"+", "+                                            \"are writing to or the file you are reading from could not be opened.\", ", "+                                            \"Error Creating Jar\",", "+                                            JOptionPane.ERROR_MESSAGE);", "+            }", "-          ", "+          else {", "+            if (_exceptions.size()>0) {", "+              ScrollableListDialog<String> dialog = new ScrollableListDialog.Builder<String>()", "+                .setOwner(JarOptionsDialog.this)", "+                .setTitle(\"Error Creating Jar\")", "+                .setText(\"The supplied manifest does not conform to the 1.0 Manifest format specification\")", "+                .setItems(new ArrayList<String>(_exceptions))", "+                .setMessageType(JOptionPane.ERROR_MESSAGE)", "+                .build();", "+              ", "+              Utilities.setPopupLoc(dialog, JarOptionsDialog.this);", "+              dialog.showDialog();", "+            }", "+            else {", "+              JOptionPane.showMessageDialog(JarOptionsDialog.this, \"The supplied manifest does not conform to the 1.0 Manifest format specification.\",", "+                                            \"Error Creating Jar\",", "+                                            JOptionPane.ERROR_MESSAGE);", "+            }", "+          }", "+          JarOptionsDialog.this.setVisible(false);  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ea2459acba2d023ec7fe6a6feaec74a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "b4cb953a15f76465c4fdfdd0a3efe47737f78efc", "commitAfterChange": "da8b20243b85298aada190df10fa721e07aae787", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": "      public String userRepresentation(Iterable<? extends Type> ts)", "signatureAfterChange": "      public String userRepresentation(Iterable<? extends Type> ts)", "diff": ["-    final StringBuilder result = new StringBuilder();", "+    TypeWriter w = new TypeWriter();", "+    w.runOnList(ts);", "+    w.appendConstraints();", "+    return w.result();", "+  }", "-    class VariableHandler {", "-      public void dumpBounds(Runnable1<Type> dumpType) {", "-            if (printedFirst) { result.append(\"; \"); }", "-            result.append(_names.get(v));", "-            result.append(\" <: \");", "-            dumpType.run(upper); // may increase the size of _vars", "-            if (printUpper) { result.append(\", \"); }", "-            result.append(_names.get(v));", "-            result.append(\" :> \");", "-            dumpType.run(lower); // may increase the size of _vars", "-    ", "-    final VariableHandler variableHandler = new VariableHandler();", "-    ", "-    class DumpType implements TypeVisitor_void, Runnable1<Type> {", "-      ", "-      final RecursionStack<Type> _stack = new RecursionStack<Type>();", "-      ", "-      /**", "-       * Running is preferred over applying the visitor, as invoking this will put the", "-       * value being processed on the stack, and avoid unnecessary repetition", "-       */", "-      public void run(final Type t) {", "-//        String prefix = \"\"; for (int i = 0; i < _stack.size(); i++) { prefix += \"  \"; }", "-//        System.out.println(prefix + \"Running on id \" + System.identityHashCode(t) + \": \" + t);", "-        Runnable recur = new Runnable() { public void run() { t.apply(DumpType.this); } };", "-        Runnable dontRecur = new Runnable() { public void run() { result.append(\"...\"); } };", "-        //Threshold of 2 causes the loop to be printed twice", "-        _stack.run(recur, dontRecur, t/*, 2*/); ", "-      }", "-      ", "-      public void forBooleanType(BooleanType t) { result.append(\"boolean\"); }", "-      public void forCharType(CharType t) { result.append(\"char\"); }", "-      public void forByteType(ByteType t) { result.append(\"byte\"); }", "-      public void forShortType(ShortType t) { result.append(\"short\"); }", "-      public void forIntType(IntType t) { result.append(\"int\"); }", "-      public void forLongType(LongType t) { result.append(\"long\"); }", "-      public void forFloatType(FloatType t) { result.append(\"float\"); }", "-      public void forDoubleType(DoubleType t) { result.append(\"double\"); }", "-      public void forNullType(NullType t) { result.append(\"(null)\"); }", "-      public void forVoidType(VoidType t) { result.append(\"void\"); }", "-      public void forTopType(TopType t) { result.append(\"(top)\"); }", "-      public void forBottomType(BottomType t) { result.append(\"(bottom)\"); }", "-      ", "-      public void forSimpleArrayType(SimpleArrayType t) {", "-        run(t.ofType());", "-        result.append(\"[]\");", "-      }", "-      ", "-      public void forVarargArrayType(VarargArrayType t) {", "-        run(t.ofType());", "-        result.append(\"[]\");", "-      }", "-      ", "-      public void forSimpleClassType(SimpleClassType t) {", "-        result.append(SymbolUtil.shortName(t.ofClass()));", "-      }", "-      ", "-      public void forRawClassType(RawClassType t) {", "-        result.append(\"raw \");", "-        result.append(SymbolUtil.shortName(t.ofClass()));", "-      }", "-      ", "-      public void forParameterizedClassType(ParameterizedClassType t) {", "-        Iterator<DJClass> classes = SymbolUtil.outerClassChain(t.ofClass()).iterator();", "-        Iterator<? extends Type> targs = t.typeArguments().iterator();", "-        DJClass c = classes.next();", "-        result.append(SymbolUtil.shortName(c));", "-        DJClass inner;", "-        while (c != null) {", "-          inner = classes.hasNext() ? classes.next() : null; // next in the chain, or null if c is last", "-          if (inner == null || !inner.isStatic()) {", "-            Iterable<VariableType> params = c.declaredTypeParameters();", "-            if (!IterUtil.isEmpty(params)) {", "-              result.append(\"<\");", "-              boolean firstParam = true;", "-              for (VariableType param : params) { // param is ignored -- it's just a counter", "-                if (!firstParam) { result.append(\", \"); }", "-                firstParam = false;", "-                run(targs.next());", "-              }", "-              result.append(\">\");", "-            }", "-          }", "-          if (inner != null) { result.append(\".\"); result.append(c.declaredName()); }", "-          c = inner;", "-        }", "-      }", "-      ", "-      public void forVariableType(VariableType t) {", "-        String name = variableHandler.registerVariable(t);", "-        result.append(name);", "-      }", "-      ", "-      public void forIntersectionType(IntersectionType t) {", "-        int size = IterUtil.sizeOf(t.ofTypes());", "-        if (size == 0) { result.append(\"(empty intersect)\"); }", "-        else if (size == 1) {", "-          result.append(\"(intersect \");", "-          run(IterUtil.first(t.ofTypes()));", "-          result.append(\")\");", "-        }", "-        else {", "-          boolean first = true;", "-          for (Type componentT : t.ofTypes()) {", "-            if (first) { first = false; }", "-            else { result.append(\" & \"); }", "-            run(componentT);", "-          }", "-        }", "-      }", "-      ", "-      public void forUnionType(UnionType t) {", "-        int size = IterUtil.sizeOf(t.ofTypes());", "-        if (size == 0) { result.append(\"(empty union)\"); }", "-        else if (size == 1) {", "-          result.append(\"(union \");", "-          run(IterUtil.first(t.ofTypes()));", "-          result.append(\")\");", "-        }", "-        else {", "-          boolean first = true;", "-          for (Type componentT : t.ofTypes()) {", "-            if (first) { first = false; }", "-            else { result.append(\" | \"); }", "-            run(componentT);", "-          }", "-        }", "-      }", "-      ", "-      public void forWildcard(Wildcard t) {", "-        result.append(\"?\");", "-        if (!isEqual(t.symbol().upperBound(), OBJECT)) {", "-          result.append(\" extends \");", "-          run(t.symbol().upperBound());", "-        }", "-        if (!isEqual(t.symbol().lowerBound(), NULL)) {", "-          result.append(\" super \");", "-          run(t.symbol().lowerBound());", "-        }", "-      }", "-      ", "-    };", "-    ", "-    Runnable1<Type> dumpType = new DumpType();", "-    boolean first = true;", "-    for (Type t : ts) {", "-      if (first) { first = false; }", "-      else { result.append(\", \"); }", "-      dumpType.run(t);", "-    }", "-    if (!variableHandler.isEmpty()) {", "-      result.append(\" [\");", "-      variableHandler.dumpBounds(dumpType);", "-      result.append(\"]\");", "-    }", "-    return result.toString();"]}], "num": 21145}
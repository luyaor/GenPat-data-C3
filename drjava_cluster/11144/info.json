{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "909464b524b95769e2a09f6e3febf653", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa16903ced7a5fabed601d373710a1fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected String interpret(String input) throws BadLocationException", "signatureAfterChange": "   protected String interpret(String input) throws BadLocationException", "diff": ["+", "+    TestListener listener = new TestListener() {", "+      public void interactionStarted() {", "+        interactionStartCount++;", "+      }", "+", "+      public void interactionEnded() {", "+        assertInteractionStartCount(1);", "+", "+        synchronized(this) {", "+          interactionEndCount++;", "+          this.notify();", "+        }", "+      }", "+    };", "+", "+    _model.addListener(listener);", "+", "+    // wait for interpret over", "+    while (listener.interactionEndCount == 0) {", "+      synchronized(listener) {", "+        try {", "+          listener.wait();", "+        }", "+        catch (InterruptedException ie) {", "+          throw new UnexpectedException(ie);", "+        }", "+      }", "+    }", "+", "+    _model.removeListener(listener);", "+    listener.assertInteractionStartCount(1);", "+    listener.assertInteractionEndCount(1);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dabb8aa81d1d3fd416cc00ec0305c650", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "0cc8b968630d99117b745ff6fd42d808622c322f", "commitAfterChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected synchronized final void invokeSlave() throws IOException, RemoteException", "signatureAfterChange": "   protected synchronized final void invokeSlave(String[] jvmArgs)     throws IOException, RemoteException", "diff": ["-  protected synchronized final void invokeSlave() throws IOException, RemoteException", "+   */", "+  protected synchronized final void invokeSlave(String[] jvmArgs)", "+    throws IOException, RemoteException", "-    _stub = UnicastRemoteObject.exportObject(this);", "+    Thread t = new Thread() {", "+      public void run() {", "+        synchronized(AbstractMasterJVM.this) {", "+          try {", "+            _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this);", "+          }", "+          catch (RemoteException re) {", "+            throw new edu.rice.cs.util.UnexpectedException(re);", "+          }", "+          AbstractMasterJVM.this.notify();", "+        }", "+      }", "+    };", "+", "+    t.start();", "+    while (_stub == null) {", "+      try {", "+        wait();", "+      }", "+      catch (InterruptedException ie) {", "+        throw new edu.rice.cs.util.UnexpectedException(ie);", "+      }", "+    }", "+", "-    final Process process = ExecJVM.runJVMPropogateClassPath(RUNNER, args);", "+    final Process process = ", "+      ExecJVM.runJVMPropogateClassPath(RUNNER, args, jvmArgs);"]}], "num": 11144}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "652ed2cdb2b4927a726e97b422c86171", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1639d8ff075fd71d8dbe9df4c8772481", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "           public void testForCastExpression()", "signatureAfterChange": "           public void testForCastExpression()", "diff": ["-      CastExpression ce = new CastExpression(JExprParser.NO_SOURCE_INFO, ", "-                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"dan\"), ", "-                                             new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      CastExpression ce = new CastExpression(SourceInfo.NO_INFO, ", "+                                             new PrimitiveType(SourceInfo.NO_INFO, \"dan\"), ", "+                                             new NullLiteral(SourceInfo.NO_INFO));", "-      CastExpression ce2 = new CastExpression(JExprParser.NO_SOURCE_INFO,", "-                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                             new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"notReal\")));", "+      CastExpression ce2 = new CastExpression(SourceInfo.NO_INFO,", "+                                             new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "+                                             new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"notReal\")));", "-      CastExpression ce3 = new CastExpression(JExprParser.NO_SOURCE_INFO,", "-                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                             new DoubleLiteral(JExprParser.NO_SOURCE_INFO, 5));", "+      CastExpression ce3 = new CastExpression(SourceInfo.NO_INFO,", "+                                             new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "+                                             new DoubleLiteral(SourceInfo.NO_INFO, 5));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "742cd772f30d9d3b071a0c34f47086ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TryCatchBodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "          public void testCompareThrownAndCaught()", "signatureAfterChange": "          public void testCompareThrownAndCaught()", "diff": ["-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      Block b = new Block(JExprParser.NO_SOURCE_INFO, emptyBody);", "+      BracedBody emptyBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "+      Block b = new Block(SourceInfo.NO_INFO, emptyBody);", "-      PrimitiveType intt = new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\");", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "-      FormalParameter param = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"j\")), false);", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "+      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "+      FormalParameter param = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[] {new CatchBlock(JExprParser.NO_SOURCE_INFO,  param, b)});", "+      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[] {new CatchBlock(SourceInfo.NO_INFO,  param, b)});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d6b873562f9f05d32edcd26cc6af45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 126, "signatureBeforeChange": "               public void testLiterals()", "signatureAfterChange": "               public void testLiterals()", "diff": ["-      StringLiteral sl = new StringLiteral(JExprParser.NO_SOURCE_INFO, \"string literal!\");", "-      IntegerLiteral il = new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 4);", "-      LongLiteral ll = new LongLiteral(JExprParser.NO_SOURCE_INFO, 5);", "-      FloatLiteral fl = new FloatLiteral(JExprParser.NO_SOURCE_INFO, 1.2f);", "-      DoubleLiteral dl = new DoubleLiteral(JExprParser.NO_SOURCE_INFO, 4.2);", "-      CharLiteral cl = new CharLiteral(JExprParser.NO_SOURCE_INFO, 'c');", "-      BooleanLiteral bl = new BooleanLiteral(JExprParser.NO_SOURCE_INFO, true);", "-      NullLiteral nl = new NullLiteral(JExprParser.NO_SOURCE_INFO);", "-      ClassLiteral csl = new ClassLiteral(JExprParser.NO_SOURCE_INFO, new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"monkey\", new Type[0]));", "+      StringLiteral sl = new StringLiteral(SourceInfo.NO_INFO, \"string literal!\");", "+      IntegerLiteral il = new IntegerLiteral(SourceInfo.NO_INFO, 4);", "+      LongLiteral ll = new LongLiteral(SourceInfo.NO_INFO, 5);", "+      FloatLiteral fl = new FloatLiteral(SourceInfo.NO_INFO, 1.2f);", "+      DoubleLiteral dl = new DoubleLiteral(SourceInfo.NO_INFO, 4.2);", "+      CharLiteral cl = new CharLiteral(SourceInfo.NO_INFO, 'c');", "+      BooleanLiteral bl = new BooleanLiteral(SourceInfo.NO_INFO, true);", "+      NullLiteral nl = new NullLiteral(SourceInfo.NO_INFO);", "+      ClassLiteral csl = new ClassLiteral(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"monkey\", new Type[0]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a47c2750390b4c9cd1cf83c97c16be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "          public void testMakeSureCaughtStuffWasThrown()", "signatureAfterChange": "          public void testMakeSureCaughtStuffWasThrown()", "diff": ["-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      Block b = new Block(JExprParser.NO_SOURCE_INFO, emptyBody);", "+      BracedBody emptyBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "+      Block b = new Block(SourceInfo.NO_INFO, emptyBody);", "-      PrimitiveType intt = new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\");", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "-      FormalParameter param = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"j\")), false);", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "+      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "+      FormalParameter param = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "-        new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, b,", "-                                    new CatchBlock[] {new CatchBlock(JExprParser.NO_SOURCE_INFO,  param, b)});", "+        new NormalTryCatchStatement(SourceInfo.NO_INFO, b,", "+                                    new CatchBlock[] {new CatchBlock(SourceInfo.NO_INFO,  param, b)});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea2a02d994df6fc7dad591dec04a9185", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "          public void test_NotAllowed()", "signatureAfterChange": "          public void test_NotAllowed()", "diff": ["-      SourceInfo noInfo = JExprParser.NO_SOURCE_INFO;", "-      Word w = new Word(JExprParser.NO_SOURCE_INFO, \"word\");", "+      SourceInfo noInfo = SourceInfo.NO_INFO;", "+      Word w = new Word(SourceInfo.NO_INFO, \"word\");", "-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      ClassOrInterfaceType superClass = new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]);", "+      BracedBody emptyBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "+      ClassOrInterfaceType superClass = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]);", "-      BracedBody hasBitOperator = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                                                                                                      new BitwiseOrAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5)))});", "+      BracedBody hasBitOperator = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, ", "+                                                                                                                      new BitwiseOrAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)))});"]}], "num": 18806}
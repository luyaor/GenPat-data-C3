{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a9a45ce8b544c6a3b179e62c5c90a22", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0669ceb10e922b624308b1637131a810", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "d177c7b252113934f48a076489797b39dc0f639d", "commitAfterChange": "a58ec688d3981da4575e2c6fb686db26b70ae68b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Class visit(WhileStatement node)", "signatureAfterChange": "   public Class visit(WhileStatement whileStmt)", "diff": ["-  public Class visit(WhileStatement node) {", "+  public Class visit(WhileStatement whileStmt) {", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "-      throw new ExecutionError(\"condition.type\", node);", "+    Expression exp = whileStmt.getCondition();", "+    ", "+    Class type = exp.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "+      throw new ExecutionError(\"condition.type\", whileStmt);", "-    node.getBody().acceptVisitor(this);", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"exp.booleanValue();\"", "+      whileStmt.setCondition(_unbox(exp, type));", "+    }", "+    ", "+    whileStmt.getBody().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d58337288fc7af382bd77dda4c4b5aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "b5c763bf27a5267e7ff6eb7560dbde820d19b063", "commitAfterChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public Class<?> visit(SynchronizedStatement node)", "signatureAfterChange": "   public Class<?> visit(AssertStatement node)", "diff": ["+   */", "+  public Class<?> visit(AssertStatement node) {", "+    Expression cond = node.getCondition();", "+    ", "+    //Check the condition", "+    Class<?> type = cond.acceptVisitor(this);", "+    if(type != boolean.class && type != Boolean.class) {", "+      throw new ExecutionError(\"condition.type\", node);", "+    }", "+    ", "+    // Auto unbox; Boolean->boolean", "+    if(type == Boolean.class) {", "+      //add method call on expression;", "+      // \"cond.booleanValue();\"", "+      node.setCondition(_unbox(cond, type));", "+    }", "+    ", "+    //Check the failure string", "+    Expression failString = node.getFailString();", "+    if(failString != null) {", "+      Class<?> type2 = failString.acceptVisitor(this);", "+    }", "+    return null;", "+  }"]}], "num": 6069}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd861e4b2dd91b885f600b1c045fa18b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "239040b411b9b2a31a80961819926749", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "18b580b77b8847f429951fbe8909a60f04261495", "commitAfterChange": "c056ab71f347d40179703642e25ff83ac78c70e0", "methodNumberBeforeChange": 263, "methodNumberAfterChange": 263, "signatureBeforeChange": "      public void setUpDrJavaProperties()", "signatureAfterChange": "      public void setUpDrJavaProperties()", "diff": ["+    PropertyMaps.ONLY.setProperty(\"Misc\", new RecursiveFileListProperty(\"find\", File.pathSeparator, DEF_DIR, DEF_DIR));", "+    ", "-    // TODO:", "-//    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.class.files\", File.pathSeparator, DEF_DIR) {", "-//      protected List<File> getList() { return _model.getClassFiles(); }", "-//      // make it lazy again!", "-//      public String toString() {", "-//        return _value;", "-//      }", "-//      public boolean isCurrent() { return false; }", "-//    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"DrJava\", \"drjava.all.files\"));", "+    RecursiveFileListProperty classFilesProperty = new RecursiveFileListProperty(\"project.class.files\", ", "+                                                                                 File.pathSeparator,", "+                                                                                 DEF_DIR,", "+                                                                                 _model.getBuildDirectory().getAbsolutePath()) {", "+      /** Reset the attributes. */", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"sep\", _sep);", "+        _attributes.put(\"rel\", _dir);", "+        _attributes.put(\"dir\", _model.getBuildDirectory().getAbsolutePath());", "+        _attributes.put(\"filter\", \"*.class\");", "+        _attributes.put(\"dirfilter\", \"*\");", "+      }", "+    };", "+    PropertyMaps.ONLY.setProperty(\"Project\", classFilesProperty);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6af0903d327b89ca356d2784e3d2d090", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "dfe6c6e73e062ff4ec08707a0c96aef62a0a1709", "commitAfterChange": "c62d3e0fe024c724a67e86baf30c41235da58454", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "               public InputBox(boolean endOfStream)", "signatureAfterChange": "               public InputBox(boolean endOfStream)", "diff": ["-      // Listen for undo and redo events", "-      doc.addUndoableEditListener(new UndoableEditListener() {", "-        public void undoableEditHappened(UndoableEditEvent evt) {", "-          undo.addEdit(evt.getEdit());", "-        }", "-      }); ", "-      ", "-            if (undo.canUndo()) { undo.undo(); }", "+            if (undo.canUndo()) { undo.undo(); }           ", "+          setEnabled(undo.canUndo() && isEditable());", "+          am.get(REDO_NAME).setEnabled(undo.canRedo() && isEditable());", "+          undoAction.setEnabled(undo.canUndo() && isEditable());", "+          setEnabled(undo.canRedo() && isEditable());", "+      ", "+      // Listen for undo and redo events", "+      doc.addUndoableEditListener(new UndoableEditListener() {", "+        public void undoableEditHappened(UndoableEditEvent evt) {", "+          undo.addEdit(evt.getEdit());", "+          undoAction.setEnabled(undo.canUndo() && isEditable());", "+          redoAction.setEnabled(undo.canRedo() && isEditable());", "+        }", "+      });", "+      undoAction.setEnabled(undo.canUndo() && isEditable());", "+      redoAction.setEnabled(undo.canRedo() && isEditable());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "855a1a7f27a93e8f37de12e5ec0d6bbe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ToolbarOptionComponent.java", "commitBeforeChange": "9c5777f5c4beabc12e35e029719473305aed7334", "commitAfterChange": "6f3940face1890969eb276e9b92d09c044ad9646", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public boolean updateConfig()", "signatureAfterChange": "   public boolean updateConfig()", "diff": ["-", "+    boolean wasEnabled = DrJava.getConfig().getSetting(OptionConstants.TOOLBAR_ENABLED).booleanValue();", "+    ", "+    if(btnIdent == NONE) {", "+      if(wasEnabled) DrJava.getConfig().setSetting(OptionConstants.TOOLBAR_ENABLED, Boolean.FALSE);      ", "+    }", "+      if(!wasEnabled) DrJava.getConfig().setSetting(OptionConstants.TOOLBAR_ENABLED, Boolean.TRUE);   ", "+      if(!wasEnabled) DrJava.getConfig().setSetting(OptionConstants.TOOLBAR_ENABLED, Boolean.TRUE);  ", "+      if(!wasEnabled) DrJava.getConfig().setSetting(OptionConstants.TOOLBAR_ENABLED, Boolean.TRUE);        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a309d855d479922b2f7b246d1fe5b9de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "34ce8483136d91f9eff46f1971dc8a612f363868", "commitAfterChange": "cfd4689ec89c3908ea0306a11510c85ea5436de0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-      // handleCommandLineArgs will return true if DrJava should be loaded", "-      if (handleCommandLineArgs(args)) {", "-        ", "-        // Restart if there are custom JVM args", "-        boolean restart = getConfig().getSetting(MASTER_JVM_ARGS).length() > 0;", "-        ", "-        LinkedList<String> classArgsList = new LinkedList<String>();", "-        classArgsList.addAll(_filesToOpen);", "-", "-        // Add the parameters \"-debugConsole\" to classArgsList if _showDebugConsole is true", "-        if (_showDebugConsole) { classArgsList.addFirst(\"-debugConsole\"); }", "-        ", "-        if (!_propertiesFile.equals(DEFAULT_PROPERTIES_FILE)) {", "-          // Placed in reversed order to get \"-config filename\"", "-          classArgsList.addFirst(_propertiesFile.getAbsolutePath());", "-          classArgsList.addFirst(\"-config\");", "+      // if there were files passed on the command line,", "+      // try to open them in an existing instance", "+      if (!_forceNewInstance &&", "+          DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.REMOTE_CONTROL_ENABLED) &&", "+          (_filesToOpen.size()>0)) {", "+        try {", "+          boolean ret = RemoteControlClient.openFile(null);", "+          if (RemoteControlClient.isServerRunning()) {", "+            // existing instance is running and responding", "+            for (int i=0; i<_filesToOpen.size(); ++i) {", "+              RemoteControlClient.openFile(new File(_filesToOpen.get(i)));", "+            }", "+            // files opened in existing instance, quit", "+            System.exit(0);", "+          }", "-", "-        String[] classArgs = classArgsList.toArray(new String[0]);", "+        catch(IOException ioe) {", "+          ioe.printStackTrace();", "+        }      ", "+      }", "+      ", "+      // Restart if there are custom JVM args", "+      boolean restart = getConfig().getSetting(MASTER_JVM_ARGS).length() > 0;", "+      ", "+      LinkedList<String> classArgsList = new LinkedList<String>();", "+      classArgsList.addAll(_filesToOpen);", "+      ", "+      // Add the parameters \"-debugConsole\" to classArgsList if _showDebugConsole is true", "+      if (_showDebugConsole) { classArgsList.addFirst(\"-debugConsole\"); }", "+      ", "+      if (!_propertiesFile.equals(DEFAULT_PROPERTIES_FILE)) {", "+        // Placed in reversed order to get \"-config filename\"", "+        classArgsList.addFirst(_propertiesFile.getAbsolutePath());", "+        classArgsList.addFirst(\"-config\");", "+      }", "+      ", "+      String[] classArgs = classArgsList.toArray(new String[0]);", "+      ", "+      if (restart) {", "+        String classPath = System.getProperty(\"java.class.path\");", "-        if (restart) {", "-          String classPath = System.getProperty(\"java.class.path\");", "-          ", "-          // Run a new copy of DrJava and exit", "-          try {", "+        // Run a new copy of DrJava and exit", "+        try {", "-            ExecJVM.runJVM(\"edu.rice.cs.drjava.DrJavaRoot\", classArgs, classPath, _jvmArgs.toArray(new String[0]), null);", "-          }", "-          catch (IOException ioe) {", "-            // Display error", "-            final String[] text = {", "-              \"DrJava was unable to load its compiler and debugger.  Would you \",", "-              \"like to start DrJava without a compiler and debugger?\", \"\\nReason: \" + ioe.toString()", "-            };", "-            int result = JOptionPane.showConfirmDialog(null, text, \"Could Not Load Compiler and Debugger\",", "-                                                       JOptionPane.YES_NO_OPTION);", "-            if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "-          }", "+          ExecJVM.runJVM(\"edu.rice.cs.drjava.DrJavaRoot\", classArgs, classPath, _jvmArgs.toArray(new String[0]), null);", "-        ", "-        else {", "-          // No restart -- just invoke DrJavaRoot.main.", "-          DrJavaRoot.main(classArgs);", "+        catch (IOException ioe) {", "+          // Display error", "+          final String[] text = {", "+            \"DrJava was unable to load its compiler and debugger.  Would you \",", "+            \"like to start DrJava without a compiler and debugger?\", \"\\nReason: \" + ioe.toString()", "+          };", "+          int result = JOptionPane.showConfirmDialog(null, text, \"Could Not Load Compiler and Debugger\",", "+                                                     JOptionPane.YES_NO_OPTION);", "+          if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "+      }", "+      ", "+      else {", "+        // No restart -- just invoke DrJavaRoot.main.", "+        DrJavaRoot.main(classArgs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8ccff38477d1e76119836e974bda971", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "eee347fd3fa2c22c95183dc23b859e14d297bb1b", "commitAfterChange": "a72aa0a4c1f252999ab0a9a3163ec82bfbbfaea2", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   private void _setupButtonPanel()", "signatureAfterChange": "   private void _setupButtonPanel()", "diff": ["+    _frame._addGUIAvailabilityListener(_resumeButton,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER_SUSPENDED);", "-    ", "+    _frame._addGUIAvailabilityListener(_automaticTraceButton,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER_SUSPENDED);", "+    _frame._addGUIAvailabilityListener(_stepIntoButton,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER_SUSPENDED);", "+    _frame._addGUIAvailabilityListener(_stepOverButton,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER_SUSPENDED);", "+    _frame._addGUIAvailabilityListener(_stepOutButton,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER,", "+                                      GUIAvailabilityListener.ComponentType.DEBUGGER_SUSPENDED);", "-    disableButtons();", "+    updateButtons();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9635ce96b97559fcad79b13123363d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "eb774667aba1f48d68c4931aa8f511134299e8dd", "commitAfterChange": "b86859aaefb86c79b1343c533fc1a98460d5733a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   private JPanel _makeMainClassSelectorPanel()", "signatureAfterChange": "   private JPanel _makeMainClassSelectorPanel()", "diff": ["-    ", "+    LOG.log(\"_makeMainClassSelectorPanel, _rootFile=\"+_rootFile);", "+    chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);", "+    chooser.setMultiSelectionEnabled(false);", "-        return  !f.isDirectory() && name.endsWith(\".class\");", "+        return  f.isDirectory() || name.endsWith(\".class\");", "+        if (getText().length()==0) {", "+          LOG.log(\"getFileChooser().setCurrentDirectory(_rootFile);\");", "+          getFileChooser().setRoot(_rootFile);", "+          getFileChooser().setCurrentDirectory(_rootFile);", "+        }", "+        if(!getFileChooser().getSelectedFile().getAbsolutePath().startsWith(_rootFile.getAbsolutePath())){", "+          JOptionPane.showMessageDialog(JarOptionsDialog.this,", "+                                        \"Main Class must be in Build Directory or one of its sub-directories.\", ", "+                                        \"Unable to set Main Class\", JOptionPane.ERROR_MESSAGE);", "+          setText(\"\");", "+        }"]}], "num": 17130}
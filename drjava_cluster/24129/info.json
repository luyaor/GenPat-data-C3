{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b435715861937fc07facb80cfc5286e1", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb1a336856852fcd3d97fcfe3d350b75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public int balanceBackward()", "signatureAfterChange": "   public int balanceBackward()", "diff": ["+    ", "-    resetWalkerLocationToCursor();", "+    resetWalkerLocationToCursor();  // _walker aligned to _cursor", "+//    Utilities.show(\"Balancing backward with iterator cursor at \" + absOffset() + \" and walker at \" + _parent.walkerOffset());", "-    if (iter.atStart() || iter.atFirstItem() || ! closedBraceImmediatelyLeft()) {", "+    if (iter.atStart() || iter.atFirstItem() || ! closedBraceImmediatelyLeft() || isShadowed()) {", "-      //System.out.println(\"! atStart, atFirstItem, or no closed brace\");", "+//      Utilities.show(\"balanceBackward immediately aborted; returning -1\");", "-    iter.prev();", "-    assert iter.current() instanceof Brace;  // In fact, it is a significant closed brace.", "+    int relDistance = 0; // distance from iter position to walker position", "+    int distance = 0;    // distance from iter position to _cursor postion", "-    int relDistance = 0; // distance to right edge of nearest brace ", "-    int distance = 0;    // distance to original cursor       ", "+    // move one token left, changing iter but not walker", "+    iter.prev();   ", "+    assert iter.current() instanceof Brace;  // In fact, it is a significant closed brace.", "+//      Utilities.show(\"distance \" + distance + \" was incremented by \" + size);", "-        if (moveWalkerGetState(- relDistance) == FREE) {", "+        ReducedModelState curBraceState = moveWalkerGetState(- relDistance);  // walker moves left", "+        relDistance = 0;", "+//        Utilities.show(\"curBrace = \" + curBrace + \"curBraceState = \" + curBraceState);", "+//        Utilities.show(\"Walker is now at offset \" + _parent.walkerOffset() + \" distance = \" + distance);", "+        if (curBraceState == FREE && ! curToken.isCommentStart()) { // curBrace NOT shadowed", "+//          Utilities.show(curBrace + \" is not shadowed\");", "+//            Utilities.show(curBrace + \" is OPEN at distance \" + distance);", "-              //System.out.println(\"! encountered open brace that didn't match\");", "+//              Utilities.show(\"! encountered open brace \" + curBrace + \" that didn't match; returning -1\");", "-          // closed", "-          else braceStack.push(curBrace);", "+          else { // curBrace is closed", "+//            Utilities.show(curBrace + \" pushed on stack\");", "+            braceStack.push(curBrace);", "+          }", "-        relDistance = 0;", "-      ", "+//      else Utilities.show(curToken + \" at distance \" + distance + \" is shadowed\");", "+//       Utilities.show(\"Unmatched braces in stack: balancebackward returning -1\");", "+//      Utilities.show(\"balancebackward returning \" + distance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f693cae6760a8838575f1a2082747d06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public int balanceForward()", "signatureAfterChange": "   public int balanceForward()", "diff": ["+    resetWalkerLocationToCursor();", "+//    Utilities.show(\"Balancing forward with iterator cursor at \" + absOffset() + \" and walker at \" + _parent.walkerOffset());", "+", "-    resetWalkerLocationToCursor();", "-    ", "-    if (iter.atStart() || iter.atFirstItem() || ! openBraceImmediatelyLeft()) {", "-//      System.out.println(\"openBraceImmediatelyLeft(): \"+openBraceImmediatelyLeft());", "+", "+    if (iter.atStart() || iter.atFirstItem() || ! openBraceImmediatelyLeft() || isShadowed()) {", "+//      Utilities.show(\"openBraceImmediatelyLeft(): \" + openBraceImmediatelyLeft());", "+//      Utilities.show(\"balanceForward immediately aborted; returning -1\");", "-    moveWalkerGetState(openBraceDistance);", "+//    moveWalkerGetState(openBraceDistance);", "-    iter.next();", "-    moveWalkerGetState(-openBraceDistance);", "+    iter.next();  // undoes iter.prev() above", "+//    moveWalkerGetState(-openBraceDistance);", "-    int relDistance = 0;  // distance to closest preceding Brace (non-gap)", "-    int distance = 0;     // distance to end of original open Brace (immediately left of cursor on entry)", "-   ", "+    int relDistance = 0;  // distance from iter position to walker position", "+    int distance = 0;     // distance from _cursor position to iter position", "-        if (moveWalkerGetState(relDistance) == FREE) {", "+        ReducedModelState curBraceState = moveWalkerGetState(relDistance); // walker moves right", "+        relDistance = 0;", "+//        Utilities.show(\"curBrace = \" + curBrace + \"curBraceState = \" + curBraceState);", "+//        Utilities.show(\"Walker is now at offset \" + _parent.walkerOffset() + \" distance = \" + distance);", "+        if (curBraceState == FREE && ! curToken.isCommentStart()) {  // not shadowed", "+//          Utilities.show(curBrace + \" is not shadowed\");", "+//            Utilities.show(curBrace + \" is CLOSED at distance \" + distance);", "-//                  System.out.println(\"! encountered closed brace that didn't match\");", "+//              System.out.println(\"! encountered closed brace that didn't match\");", "+//              Utilities.show(\"! encountered closed brace \" + curBrace + \" that didn't match; returning -1\");", "-          else braceStack.push(curBrace);", "+          else {", "+            braceStack.push(curBrace);", "+//            Utilities.show(curBrace + \" pushed on stack\");", "+          }", "-        relDistance = 0; // we moved the walker back to the right edge of the curBrace", "+//        else Utilities.show(curToken + \" at distance \" + distance + \" is shadowed\");", "-      distance += size;", "+      distance += size;     ", "+//      Utilities.show(\"distance \" + distance + \" was incremented by \" + size);", "+", "+//      Utilities.show(\"Unmatched braces in stack: balancebackward returning -1\");", "+//      Utilities.show(\"balancebackward returning \" + distance);"]}], "num": 24129}
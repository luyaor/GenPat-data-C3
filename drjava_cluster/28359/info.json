{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88a53f0748d525286fa4f07e93f88e17", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fcf327a54d12c712b489ac95f7dce4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": "   public File getSourceFile(String filename)", "signatureAfterChange": "   public File getSourceFile(String filename)", "diff": ["-    for (int i = 0; i < sourceRoots.length; i++) {", "-      File f = _getSourceFileFromPath(filename, sourceRoots[i]);", "-      if (f != null) {", "-        return f;", "-      }", "+    for (File s: sourceRoots) {", "+      File f = _getSourceFileFromPath(filename, s);", "+      if (f != null) return f;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec2654bc9f98e16bca9fc94854021240", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platforms/src-jdk15/edu/rice/cs/drjava/model/compiler/Javac150Compiler.java", "commitBeforeChange": "ab9e3c17a5a3c5f93e2194242f915fa2f6bda14a", "commitAfterChange": "0bcf0550e09e9d78837430136001fe08d0458948", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public CompilerError[] compile(File[] sourceRoots, File[] files)", "signatureAfterChange": "   public CompilerError[] compile(File[] sourceRoots, File[] files)", "diff": ["-    // We must re-initialize the compiler on each compile. Otherwise", "-    // it gets very confused.", "-    //DrJava.consoleOut().println(\"-- In JavacGJCompiler: SourceRoots:\");", "-    //for (int i = 0 ; i < sourceRoots.length; i ++) {", "-    //  DrJava.consoleOut().println(sourceRoots[i]);", "-    //}", "+", "-    for (int i = 0; i < files.length; i++) {", "-      filesToCompile = filesToCompile.prepend(files[i].getAbsolutePath());", "-    }", "+    for (File f : files) filesToCompile = filesToCompile.prepend(f.getAbsolutePath());", "-    try {", "-      compiler.compile(filesToCompile);", "-    }", "+    try { compiler.compile(filesToCompile); }", "-      // GJ defines the compile method to throw Throwable?!", "-      //System.err.println(\"Compile error: \" + t);", "-      //t.printStackTrace();", "-      ", "-      ", "-      //Added to account for error in javac whereby a variable that was not declared will", "-      //cause an out of memory error. This change allows us to output both errors and not", "-      //just the out of memory error", "+", "+      /* Added to account for error in javac whereby a variable that was not declared will cause an out of memory error.", "+       * This change allows us to output both errors and not just the out of memory error.", "+       */", "-//      return new CompilerError[] {", "-//        new CompilerError(\"Compile exception: \" + t, false)", "-//      };", "-//    System.out.println(\"Errors: \" + compiler.errorCount());", "-//    System.out.println(\"Warnings: \" + compiler.warningCount());", "-    // null out things to not keep pointers to dead data", "+    // release these bindings to free heap memory"]}], "num": 28359}
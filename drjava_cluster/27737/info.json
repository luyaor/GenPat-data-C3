{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22586b8a1cadbd8aebd1629fbac5404e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9bc03ce8a624de1e1f0e036a073e70f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "6d9f2ce37ba22041a5b2840cffbd0f66339165b6", "commitAfterChange": "b153c43e59717c98f32c67f14d61a00a81016991", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": "   final public Expression unaryExpression() throws ParseException", "signatureAfterChange": "   final public Expression unaryExpression() throws ParseException", "diff": ["-    Token      t;", "+    Token      t,tk;", "-      exp = unaryExpression();", "-       {if (true) return new MinusExpression(exp,", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case INTEGER_LITERAL:", "+        tk = jj_consume_token(INTEGER_LITERAL);", "+                                             {if (true) return new IntegerLiteral(\"-\"+tk.image,", "-                                  t.beginLine,      t.beginColumn,", "-                                  exp.getEndLine(), exp.getEndColumn());}", "+                                  t.beginLine, t.beginColumn,", "+                                                           tk.endLine,   tk.endColumn);}", "+        break;", "+      case LONG_LITERAL:", "+        tk = jj_consume_token(LONG_LITERAL);", "+              if(tk.image.endsWith(\"L\")) tk.image=tk.image.substring(0,tk.image.length()-1);", "+              {if (true) return new LongLiteral(\"-\"+tk.image, filename, t.beginLine, t.beginColumn,", "+                                                   tk.endLine,   tk.endColumn);}", "+        break;", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FALSE:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case FLOAT_LITERAL:", "+      case DOUBLE_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case LESS:", "+      case BANG:", "+      case TILDE:", "+      case INCREMENT:", "+      case DECREMENT:", "+      case PLUS:", "+      case MINUS:", "+        exp = unaryExpression();", "+               {if (true) return new MinusExpression(exp, filename,", "+                                          t.beginLine,      t.beginColumn,", "+                                          exp.getEndLine(), exp.getEndColumn());}", "+        break;", "+      default:", "+        jj_la1[113] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "-      jj_la1[113] = jj_gen;", "+      jj_la1[114] = jj_gen;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c178f8bba499caedbf89c53f8c1b8053", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "commitAfterChange": "ff142f6bee221c65d8a36e94ac6a2e4478194666", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "   final public ForStatement forStatement() throws ParseException", "signatureAfterChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "diff": ["-  final public ForStatement forStatement() throws ParseException {", "+  final public ForSlashEachStatement forStatement() throws ParseException {", "-    List<Node>       init   = null;", "+    FormalParameter forEachInit = null;", "+    List       init   = null;", "-    List<Node>       update = null;", "+    List       update = null;", "+    Token      colon  = null;", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FINAL:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case INCREMENT:", "-    case DECREMENT:", "-      init = forInit();", "-      break;", "-    default:", "-      jj_la1[58] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(SEMICOLON);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case BANG:", "-    case TILDE:", "-    case INCREMENT:", "-    case DECREMENT:", "-    case PLUS:", "-    case MINUS:", "+    if (jj_2_24(2147483647)) {", "+      forEachInit = formalParameter();", "+      colon = jj_consume_token(COLON);", "-      break;", "-    default:", "-      jj_la1[59] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(SEMICOLON);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case INCREMENT:", "-    case DECREMENT:", "-      update = statementExpressionList();", "-      break;", "-    default:", "-      jj_la1[60] = jj_gen;", "-      ;", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FALSE:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case INTEGER_LITERAL:", "+      case LONG_LITERAL:", "+      case FLOAT_LITERAL:", "+      case DOUBLE_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case SEMICOLON:", "+      case INCREMENT:", "+      case DECREMENT:", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case INCREMENT:", "+        case DECREMENT:", "+          init = forInit();", "+          break;", "+        default:", "+          jj_la1[58] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case BANG:", "+        case TILDE:", "+        case INCREMENT:", "+        case DECREMENT:", "+        case PLUS:", "+        case MINUS:", "+          exp = expression();", "+          break;", "+        default:", "+          jj_la1[59] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case INCREMENT:", "+        case DECREMENT:", "+          update = statementExpressionList();", "+          break;", "+        default:", "+          jj_la1[60] = jj_gen;", "+          ;", "+        }", "+        break;", "+      default:", "+        jj_la1[61] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "-      {if (true) return new ForStatement(init, exp, update, stmt,", "-                              filename,", "-                              t.beginLine, t.beginColumn,", "-                              stmt.getEndLine(), stmt.getEndColumn());}", "+        if(colon != null){", "+          {if (true) return new ForEachStatement(forEachInit, exp, stmt,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  stmt.getEndLine(), stmt.getEndColumn());}", "+        }else{", "+          {if (true) return new ForStatement(init, exp, update, stmt,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  stmt.getEndLine(), stmt.getEndColumn());}", "+", "+        }"]}], "num": 27737}
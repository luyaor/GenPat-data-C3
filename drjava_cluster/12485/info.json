{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e4b2d2b8ff9d6b36e686469c703b906", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37badae75c70853475ccca9bc8841e97", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public Object visit(InnerClassAllocation node)", "signatureAfterChange": "     public Node visit(InnerClassAllocation node)", "diff": ["-    public Object visit(InnerClassAllocation node) {", "+    public Node visit(InnerClassAllocation node) {", "-      LinkedList arguments = null; // Add parameterization <Expression>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Expression>.", "-        arguments = new LinkedList(); // Add parameterization <Expression>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));", "-      LinkedList members = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getMembers().iterator();", "+      LinkedList<Node> members = new LinkedList<Node>(); // Add parameterization <Node>.", "+      Iterator<Node> it = node.getMembers().iterator();", "-        members.add((Node)((Node)it.next()).acceptVisitor(this));", "+        members.add(it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "807c49298bd42161c2ff4a1ab9968c05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     public Object visit(ClassAllocation node)", "signatureAfterChange": "     public Node visit(ClassAllocation node)", "diff": ["-    public Object visit(ClassAllocation node) {", "+    public Node visit(ClassAllocation node) {", "-      LinkedList arguments = null; // Add parameterization <Expression>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Expression>.", "-        arguments = new LinkedList(); // Add parameterization <Expression>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));", "-      LinkedList members = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getMembers().iterator();", "+      LinkedList<Node> members = new LinkedList<Node>(); // Add parameterization <Node>.", "+      Iterator<Node> it = node.getMembers().iterator();", "-        members.add((Node)((Node)it.next()).acceptVisitor(this));", "+        members.add(it.next().acceptVisitor(this));"]}], "num": 12485}
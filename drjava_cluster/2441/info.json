{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05d3c1d8578647c5b03435abea0739b3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a129c4d690ef09a6bf9ad1e4bdc15fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "b97db40bea671594a37f7cabd8d363cab45e0154", "commitAfterChange": "fab79f2f445044e7a60a89e228042164713428d9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 21, "signatureBeforeChange": "   private int getRelativeLine( int currLoc )", "signatureAfterChange": "   private int _getRelativeLine()", "diff": ["-  private int getRelativeLine( int currLoc ){", "-    // we moved backwards", "+  private int _getRelativeLine(){", "+    int currLoc = getCurrentLocation();", "+    ", "+    ", "-      int distPrevNewLine = _reduced.getDistToPreviousNewline( 0 );", "-      while (distPrevNewLine != -1 && getCurrentLocation()>currLoc) {", "-        setCurrentLocation( getCurrentLocation()-distPrevNewLine-1 );", "+      // we moved backward", "+      int prevLineLoc = getLineStartPos( _cachedLocation );", "+      while( prevLineLoc > currLoc ){", "-        distPrevNewLine = _reduced.getDistToPreviousNewline( 0 );", "+        prevLineLoc = getLineStartPos( prevLineLoc - 1 );", "+        // temporary performance optimization", "+        setCurrentLocation(prevLineLoc);", "-      // this and the similar test in the other case", "-      // account for the fact that our loop condition guarantees", "-      // one extraneous loop through the document.", "-      if( getCurrentLocation() != currLoc ){ count++; }", "-   }", "-   // we moved forwards", "-   else{", "-     int distNextNewLine = _reduced.getDistToNextNewline();", "-     while (distNextNewLine != -1 && getCurrentLocation()<currLoc) {", "-       try{", "-         setCurrentLocation( getCurrentLocation()+distNextNewLine+1 );", "-         distNextNewLine = _reduced.getDistToNextNewline();", "-       }", "-       catch( IllegalArgumentException iae ){", "-         setCurrentLocation( currLoc );", "-         distNextNewLine = -1;", "-       }", "-       count++;", "-     }", "-     if( getCurrentLocation() != currLoc ){ count--; }", "-   }", "-     setCurrentLocation( currLoc );", "-     return count;", "-   }", "+    }", "+    ", "+    else{", "+      // we moved forward", "+      int nextLineLoc = getLineEndPos( _cachedLocation );", "+      while( nextLineLoc < currLoc ){", "+        count++;", "+        nextLineLoc = getLineEndPos( nextLineLoc + 1 );", "+        // temporary performance optimization", "+        setCurrentLocation(nextLineLoc);", "+      }", "+    }", "+    setCurrentLocation( currLoc );", "+    return count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a285a717ba3140ef7869b980c2f9ca6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsJavaDocWithText.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    */\r", "-  boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason) {\r", "-\r", "-    try {\r", "-      // Find start of line\r", "-      int here = doc.getCurrentLocation();\r", "-      int startLine = doc.getLineStartPos(here);\r", "-      \r", "-      if (startLine <= AbstractDJDocument.DOCSTART) return false;  // on first line\r", "-      \r", "-      // Find start of previous line\r", "-      int endPrevLine = startLine - 1;\r", "-      int startPrevLine = doc.getLineStartPos(endPrevLine);\r", "-      int firstChar = doc.getLineFirstCharPos(startPrevLine);\r", "-      \r", "-      // Compare prefix\r", "-      String actualPrefix = doc.getText(firstChar, 3);\r", "-      if (! actualPrefix.equals(\"/**\")) return false;\r", "-      int nextNonWSChar = doc.getFirstNonWSCharPos(firstChar + 3, true);\r", "-      return nextNonWSChar != ERROR_INDEX && nextNonWSChar <= endPrevLine;     \r", "-    }\r", "-    catch (BadLocationException e) {\r", "-      // Shouldn't happen\r", "-      throw new UnexpectedException(e);\r", "-    }\r", "-  }\r", "+    */", "+  boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason) {", "+", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      if (startLine <= 0) return false;  // on first line", "+      ", "+      // Find start of previous line", "+      int endPrevLine = startLine - 1;", "+      int startPrevLine = doc.getLineStartPos(endPrevLine);", "+      int firstChar = doc.getLineFirstCharPos(startPrevLine);", "+      ", "+      // Compare prefix", "+      String actualPrefix = doc.getText(firstChar, 3);", "+      if (! actualPrefix.equals(\"/**\")) return false;", "+      int nextNonWSChar = doc.getFirstNonWSCharPos(firstChar + 3, true);", "+      return nextNonWSChar != -1 && nextNonWSChar <= endPrevLine;     ", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }", "+  }"]}], "num": 2441}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e3be0489233c286249d449fa9a49fac", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2248a2e536c40090459e2ea642936fdf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     public Object visit(PlusExpression node)", "signatureAfterChange": "   public Class visit(PlusExpression node)", "diff": ["-     */", "-    public Object visit(PlusExpression node) {", "-        Class c = visitUnaryOperation(node, \"plus.expression.type\");", "-", "-        // Compute the expression if it is constant", "-        Node  n = node.getExpression();", "-        if (n.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.plus(c, n.getProperty(NodeProperties.VALUE)));", "-        }", "-        return c;", "+   */", "+  public Class visit(PlusExpression node) {", "+    Class c = visitUnaryOperation(node, \"plus.expression.type\");", "+    ", "+    // Compute the expression if it is constant", "+    Node  n = node.getExpression();", "+    if (n.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.plus(c, n.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cba89d65ac0a5d5c4d299c7ead41642", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "     public Object visit(MinusExpression node)", "signatureAfterChange": "   public Class visit(MinusExpression node)", "diff": ["-     */", "-    public Object visit(MinusExpression node) {", "-        Class c = visitUnaryOperation(node, \"minus.expression.type\");", "-", "-        // Compute the expression if it is constant", "-        Node  n = node.getExpression();", "-        if (n.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.minus(c, n.getProperty(NodeProperties.VALUE)));", "-        }", "-        return c;", "+   */", "+  public Class visit(MinusExpression node) {", "+    Class c = visitUnaryOperation(node, \"minus.expression.type\");", "+    ", "+    // Compute the expression if it is constant", "+    Node  n = node.getExpression();", "+    if (n.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.minus(c, n.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }"]}], "num": 841}
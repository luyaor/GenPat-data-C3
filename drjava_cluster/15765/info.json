{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df564db35657fd5e3cd05c37c347a9b4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f683e99273b97775fa7ae5e2254d341", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "   public Type visit(AddExpression node)", "signatureAfterChange": "   public Class<?> visit(AddExpression node)", "diff": ["-  public Type visit(AddExpression node) {", "+  public Class<?> visit(AddExpression node) {", "-    Type lc = ln.acceptVisitor(this);", "-    Type rc = rn.acceptVisitor(this);", "-    Type c  = String.class;", "-    ", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = rn.acceptVisitor(this);", "+    Class<?> c  = String.class;", "+", "+", "-                       InterpreterUtilities.add((Class<?>)c, ln.getProperty(NodeProperties.VALUE),", "+                       InterpreterUtilities.add(c, ln.getProperty(NodeProperties.VALUE),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d7031edee7a0ae1db9e31b4c23624eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public Type visit(VariableDeclaration node)", "signatureAfterChange": "   public Class<?> visit(VariableDeclaration node)", "diff": ["-  public Type visit(VariableDeclaration node) {", "+  public Class<?> visit(VariableDeclaration node) {", "-    Type lc = node.getType().acceptVisitor(this);", "-    if (node.isFinal()) context.defineConstant(node.getName(), lc);", "-    else context.define(node.getName(), lc);", "-    ", "+    Class<?> lc = node.getType().acceptVisitor(this);", "+    if (node.isFinal()) {", "+      context.defineConstant(node.getName(), lc);", "+    } ", "+    else {", "+      context.define(node.getName(), lc);", "+    }", "+", "-      Type rc = init.acceptVisitor(this);", "+      Class<?> rc = init.acceptVisitor(this);"]}], "num": 15765}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d613330b344ae32ca35973f7ed58bf18", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0462fd1f080cb2888390bc26ea8399af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "c767fd7ac698a252b2acccd30077ab91751fe069", "commitAfterChange": "41dbd1f79552ad2c4983397e3a693dbde7c41bb5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testIndentInfoParen() throws BadLocationException", "signatureAfterChange": "   public void testIndentInfoParen() throws BadLocationException", "diff": ["-    assertEquals(\"1.0\", openParen, ii.braceType);", "-    assertEquals(\"1.2\", 2, ii.distToBrace);", "-    assertEquals(\"1.1\", 2, ii.distToNewline);", "-    assertEquals(\"1.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, openParen, 2, 2, 0);", "-    assertEquals(\"0.1\", \"\\n  helo (\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"\\n  helo (\\n\", doc);", "-    assertEquals(\"2.0\", openParen, ii.braceType);", "-    assertEquals(\"2.1\", 9, ii.distToNewline);", "-    assertEquals(\"2.2\", 2, ii.distToBrace);", "+    _assertIndentInfo(ii, openParen, 9, 2, 0);", "-    assertEquals(\"0.2\", \"\\n  helo ( (\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"\\n  helo ( (\\n\", doc);", "-    assertEquals(\"3.0\", openParen, ii.braceType);", "-    assertEquals(\"3.1\", 11, ii.distToNewline);", "-    assertEquals(\"3.2\", 2, ii.distToBrace);", "+    _assertIndentInfo(ii, openParen, 11, 2, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652ef68a35e7682b5143cb1cbc830ac7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/IndentTest.java", "commitBeforeChange": "c767fd7ac698a252b2acccd30077ab91751fe069", "commitAfterChange": "41dbd1f79552ad2c4983397e3a693dbde7c41bb5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testIndentInfoParen() throws BadLocationException", "signatureAfterChange": "   public void testIndentInfoParen() throws BadLocationException", "diff": ["-    assertEquals(\"1.0\", openParen, ii.braceType);", "-    assertEquals(\"1.2\", 2, ii.distToBrace);", "-    assertEquals(\"1.1\", 2, ii.distToNewline);", "-    assertEquals(\"1.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, openParen, 2, 2, 0);", "-    assertEquals(\"0.1\", \"\\n  helo (\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"\\n  helo (\\n\", doc);", "-    assertEquals(\"2.0\", openParen, ii.braceType);", "-    assertEquals(\"2.1\", 9, ii.distToNewline);", "-    assertEquals(\"2.2\", 2, ii.distToBrace);", "+    _assertIndentInfo(ii, openParen, 9, 2, 0);", "-    assertEquals(\"0.2\", \"\\n  helo ( (\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"\\n  helo ( (\\n\", doc);", "-    assertEquals(\"3.0\", openParen, ii.braceType);", "-    assertEquals(\"3.1\", 11, ii.distToNewline);", "-    assertEquals(\"3.2\", 2, ii.distToBrace);", "+    _assertIndentInfo(ii, openParen, 11, 2, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a3c0958fac8a6d5c5e0099fcf9d0fbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 77, "signatureBeforeChange": "          public void testForClassDef()", "signatureAfterChange": "          public void testForClassDef()", "diff": ["-                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), new ReferenceType[0], ", "+                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-      Lisa.setSuperClass(new SymbolData(\"super\", _publicMav, new TypeParameter[0], null, new LinkedList<SymbolData>(), null));", "+      Lisa.setSuperClass(new SymbolData(\"super\", _publicMav, new TypeParameter[0], null, new ArrayList<SymbolData>(), null));", "-      sd2.setIsContinuation(false);", "-      sd2.setMav(_publicMav);", "-      sd2.setPackage(\"java.lang\");", "-      MethodData objMd = new MethodData(\"Object\", _publicMav, new TypeParameter[0], sd2, new VariableData[0], new String[0], sd2, cd);", "+//      sd2.setIsContinuation(false);", "+//      sd2.setMav(_publicMav);", "+//      sd2.setPackage(\"java.lang\");", "+      MethodData objMd = new MethodData(\"java.lang.Object\", _publicMav, new TypeParameter[0], sd2, new VariableData[0], new String[0], sd2, cd);", "-      sd.setInterfaces(new LinkedList<SymbolData>());", "+      sd.setInterfaces(new ArrayList<SymbolData>());", "-      SymbolData t = new SymbolData(\"junit.framework.TestCase\");", "-      t.setIsContinuation(false);", "-      t.setMav(_publicMav);", "-      t.setPackage(\"junit.framework\");", "-      symbolTable.remove(\"junit.framework.TestCase\");", "-      symbolTable.put(\"junit.framework.TestCase\", t);", "-      sd.setSuperClass(t);", "+      ", "+      SymbolData testCase = defineTestCaseClass();", "+      sd.setSuperClass(testCase);", "+      ", "-      _btc._file=new File(\"Hspia.dj0\");", "+      _btc._file = new File(\"Hspia.dj0\");", "-      t = new SymbolData(\"junit.framework.TestCase\");", "-      t.setIsContinuation(false);", "-      t.setMav(_publicMav);", "-      t.setPackage(\"junit.framework\");", "-      symbolTable.remove(\"junit.framework.TestCase\");", "-      symbolTable.put(\"junit.framework.TestCase\", t);", "-      sd.setSuperClass(t);", "+      ", "+//      SymbolData testCase = defineTestCase();", "+//      symbolTable.put(\"junit.framework.TestCase\", testCase);", "+//      sd.setSuperClass(testCase);", "+      "]}], "num": 1028}
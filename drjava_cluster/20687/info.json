{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3f73d04cba6370182e788f18f6af265", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a49aa785cc6d12b747632a15b01317c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPane.java", "commitBeforeChange": "8d3cdbacfda748aaaf1451c3632bfbbb860b1d39", "commitAfterChange": "69a380647f3d586f130ea02ad1e8381a390045e3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected void matchUpdate(int offset)", "signatureAfterChange": "   protected void matchUpdate(int offset, boolean opening)", "diff": ["-    * lock and reduced locks on _doc are already held. */", "-  protected void matchUpdate(int offset) {", "+    */", "+  protected void matchUpdate(int offset, boolean opening) {", "-//    addToPromptList(getPromptPos()); // NOT USED", "-    int to = getCaretPosition();", "-    int from = _doc.balanceBackward(); //_doc()._reduced.balanceBackward();", "-    if (from > -1) {", "-      // Found a matching open brace to this close brace", "-      from = to - from;", "-      /* if (_notCrossesPrompt(to,from)) */ _addHighlight(from, to);  // _listOfPrompt NOT USED", "-      //      Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "-    }", "-    // if this wasn't a close brace, check for an open brace", "-    else {", "-      // (getCaretPosition will be the start of the highlight)", "-      from = to;", "-      to = _doc.balanceForward();", "+    int caretPos = getCaretPosition();", "+    ", "+    if (opening) {", "+      // getCaretPosition() will be the start of the highlight", "-      if (to > -1) {", "-        to = to + from;", "-        /* if (_notCrossesPrompt(to,from)) */ _addHighlight(from - 1, to);  // _listOfPrompt NOT USED", "-//        Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "+      int to = _doc.balanceForward();  // relative distance to matching bracket", "+      ", "+      if (to > -1) {  // matching closing bracket was found", "+        int end = caretPos + to;", "+        _addHighlight(caretPos - 1, end);  ", "+      }", "+    }", "+    else {", "+      int from = _doc.balanceBackward();", "+      if (from > -1) {  // matching open bracket was found", "+        int start = caretPos - from;", "+        _addHighlight(start, caretPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e280d59efb71ce343a7a911281270826", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "8d3cdbacfda748aaaf1451c3632bfbbb860b1d39", "commitAfterChange": "69a380647f3d586f130ea02ad1e8381a390045e3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   protected void matchUpdate(int offset)", "signatureAfterChange": "   protected void matchUpdate(int offset, boolean opening)", "diff": ["-  /** Updates match highlights.  Only runs in the event thread except in some unit tests. */", "-  protected void matchUpdate(int offset) { ", "+    */", "+  protected void matchUpdate(int offset, boolean opening) { ", "+    assert EventQueue.isDispatchThread();", "+    assert offset > 0;", "-    // Update the highlight if there is any. Not necessarily executed in event thread", "-    int to = getCaretPosition();", "-    int from = _doc.balanceBackward();", "-    if (from > -1) {", "-      // Found a matching open brace to this close brace", "-      from = to - from;", "-      _addHighlight(from, to);", "-      //     Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "-      ", "-      String matchText = _matchText(from);", "-      ", "-      if (matchText != null) _mainFrame.updateStatusField(\"Bracket matches: \" + matchText);", "-      else updateStatusField();", "-    }", "+    // Update the highlight if there is any.", "+    int caretPos = getCaretPosition();", "-    // if this wasn't a close brace, check for an open brace", "-    else {", "-      // (getCaretPosition will be the start of the highlight)", "-      from = to;", "+    if (opening) {", "+      // getCaretPosition() will be the start of the highlight", "-      to = _doc.balanceForward();", "-      if (to > -1) {", "-        to = to + from;", "-        _addHighlight(from - 1, to);", "-//        Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "+      int to = _doc.balanceForward();  // relative distance to matching brace (if it exists)", "+      if (to > -1) {  // matching closing brace exists", "+        int end = caretPos + to;", "+        _addHighlight(caretPos - 1, end);", "+    }", "+    else {", "+      // Update highlight ends with getCaretPosition() ", "+      ", "+      int from = _doc.balanceBackward();  // relative distance to matching brace (if it exists)", "+      if (from > -1) { // matching opening brace was found", "+        int start = caretPos - from;", "+        _addHighlight(start, caretPos);", "+        ", "+        String matchText = _matchText(start);", "+        ", "+        if (matchText != null) _mainFrame.updateStatusField(\"Bracket matches: \" + matchText);", "+        else updateStatusField();", "+      }"]}], "num": 20687}
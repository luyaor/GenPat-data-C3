{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d912b88b28f845d6cf7a11d1182160de", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9413292a66c489f7d146d54fd260e43e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersion.java", "commitBeforeChange": "391e45139a20d29595a89151324a2e220b5d12fb", "commitAfterChange": "b3945c97981b1413d538a04b218b57bbc9b0fda9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public int compareTo(FullVersion v)", "signatureAfterChange": "     public int compareTo(FullVersion v)", "diff": ["-                  result = _java_runtime_name.compareTo(v._java_runtime_name);", "-                  if (result == 0) {", "-                    result = _java_vm_vendor.compareTo(v._java_vm_vendor);", "+                  if (_location == null) {", "+                    if (v._location == null) return 0;", "+                    else return -1;", "+                  }", "+                  else {", "+                    if (v._location == null) return 1;", "+                    else return _location.compareTo(v._location);", "-                result = _java_runtime_name.compareTo(v._java_runtime_name);", "-                if (result == 0) {", "-                  result = _java_vm_vendor.compareTo(v._java_vm_vendor);", "+                if (_location == null) {", "+                  if (v._location == null) return 0;", "+                  else return -1;", "+                }", "+                else {", "+                  if (v._location == null) return 1;", "+                  else return _location.compareTo(v._location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee5b0d1cf9c0429b29aaac5deb441d78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/MintCompiler.java", "commitBeforeChange": "c1c33f1060f9022135b7f75a813b69c4045f6b46", "commitAfterChange": "0de85ca2b785d7ad489463f9a174133a91014910", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public int compile(String[] args,                        List<File> files,                        Context context,                        List<JavaFileObject> fileObjects,                        Iterable<? extends Processor> processors)", "signatureAfterChange": "     public int compile(String[] args,                        List<File> files,                        Context context,                        List<JavaFileObject> fileObjects,                        Iterable<? extends Processor> processors)", "diff": ["-            if (log.expectDiagKeys != null) {", "-                if (log.expectDiagKeys.size() == 0) {", "-                    Log.printLines(log.noticeWriter, \"all expected diagnostics found\");", "-                    return EXIT_OK;", "-                } else {", "-                    Log.printLines(log.noticeWriter, \"expected diagnostic keys not found: \" + log.expectDiagKeys);", "-                    return EXIT_ERROR;", "-                }", "-            }", "+            // TODO: Is this necessary?", "+//            if (log.expectDiagKeys != null) {", "+//                if (log.expectDiagKeys.size() == 0) {", "+//                    Log.printLines(log.noticeWriter, \"all expected diagnostics found\");", "+//                    return EXIT_OK;", "+//                } else {", "+//                    Log.printLines(log.noticeWriter, \"expected diagnostic keys not found: \" + log.expectDiagKeys);", "+//                    return EXIT_ERROR;", "+//                }", "+//            }"]}], "num": 31376}
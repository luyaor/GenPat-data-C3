{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "297698a551dd33d85f765a6477ed5c1b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a5a15c8b903d901c799e60ef679e9b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "e664df55ae0a7bd09b3050ad4027139ea59836cd", "commitAfterChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 28, "signatureBeforeChange": "      private void typeCheck(Iterable<CompilationUnit> sources, Iterable<? extends File> cp) throws InterpreterException", "signatureAfterChange": "     protected abstract void step(TypeDeclaration ast, ClassChecker checker);", "diff": ["-  private void typeCheck(Iterable<CompilationUnit> sources, Iterable<? extends File> cp) throws InterpreterException {", "-    ClassLoader loader = new PathClassLoader(null, cp);", "-    Library classLib = SymbolUtil.classLibrary(loader);", "-    Library sourceLib = new TreeLibrary(sources, loader, _opt);", "-    TypeContext context = new TopLevelContext(new LibraryContext(new LibraryContext(classLib), sourceLib), loader);", "-    CompilationUnitChecker checker = new CompilationUnitChecker(context, _opt);", "-    List<InterpreterException> errors = new ArrayList<InterpreterException>();", "-    Iterable<CompilationUnitChecker.BodyChecker> bodyCheckers = IterUtil.empty();", "-    for (CompilationUnit u : sources) {", "-      debug.logValue(\"Checking source\", \"location\", u.getSourceInfo());", "-      try { bodyCheckers = IterUtil.compose(bodyCheckers, checker.check(u)); }", "-      catch (CheckerException e) { errors.add(e); }", "-    }", "-    if (!errors.isEmpty()) {", "-      for (CompilationUnitChecker.BodyChecker c : bodyCheckers) {", "-        try { c.check(); }", "-        catch (CheckerException e) { errors.add(e); }", "-    }", "-    if (!errors.isEmpty()) { throw new CompositeException(errors); }", "+    }", "+    protected abstract void step(TypeDeclaration ast, ClassChecker checker);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a11b770dfbd57abe301e0379fbffb7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 136, "signatureBeforeChange": "      private ParameterizedClassType capture(ParameterizedClassType t)", "signatureAfterChange": "      private ParameterizedClassType capture(ParameterizedClassType t)", "diff": ["+    boolean ground = true; // optimization: simply return non-wildcard cases", "+    for (Type arg : t.typeArguments()) {", "+      if (arg instanceof Wildcard) { ground = false; break; }", "+    }", "+    if (ground) { return t; }", "+    else {", "+      Iterable<VariableType> params = SymbolUtil.allTypeParameters(t.ofClass());", "+      Iterable<Type> captureArgs = captureTypeArgs(t.typeArguments(), params);", "+      return new ParameterizedClassType(t.ofClass(), captureArgs);", "+    }", "+  }", "-    boolean ground = true;", "-    for (Type arg : t.typeArguments()) {", "-        ground = false;", "-    if (ground) { return t; }", "-    else {", "-      Iterable<VariableType> params = SymbolUtil.allTypeParameters(t.ofClass());", "-      final SubstitutionMap sigma = new SubstitutionMap(params, newArgs);", "-      for (Triple<BoundedSymbol, Type, VariableType> triple : IterUtil.zip(captureVars, t.typeArguments(), params)) {", "-        Type arg = triple.second();", "-        if (arg instanceof Wildcard) {", "-          Wildcard argW = (Wildcard) arg;", "-          VariableType param = triple.third();", "-          Type paramU = substitute(param.symbol().upperBound(), sigma);", "-          Type paramL = substitute(param.symbol().lowerBound(), sigma);", "-          triple.first().initializeUpperBound(new IntersectionType(IterUtil.make(argW.symbol().upperBound(),", "-                                                                                 paramU)));", "-          triple.first().initializeLowerBound(new UnionType(IterUtil.make(argW.symbol().lowerBound(), paramL)));", "-        }", "-      return new ParameterizedClassType(t.ofClass(), newArgs);"]}], "num": 17622}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7493527e473a23adebb87934e106908", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23dc08e6898675753992147aa27ac2ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "d43aa0dddfca5bd508283f6af1dfc42f0f92a186", "commitAfterChange": "0e1d09dde6936169177bd564168991351deb65d8", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 191, "signatureBeforeChange": "   public static <T> Runnable bindFirst(Runnable1<? super T> runnable, T arg)", "signatureAfterChange": "   public static <T1, T2> Predicate<T2> bindFirst(Predicate2<? super T1, ? super T2> pred, T1 arg1)", "diff": ["+  /** Bind a fixed argument to the given binary predicate, producing a unary prediate. */", "+  public static <T1, T2> Predicate<T2> bindFirst(Predicate2<? super T1, ? super T2> pred, T1 arg1) {", "+    return new BindFirstPredicate<T1, T2>(pred, arg1);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5fa3746739128b6dae57a7537dfdba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 80, "signatureBeforeChange": "      public static <K, V> Map<K, V> compose(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child)", "signatureAfterChange": "   public static <K, X, V> LambdaMap<K, V> compose(Map<? extends K, ? extends X> left,                                                   Map<? super X, ? extends V> right)", "diff": ["-  public static <K, V> Map<K, V> compose(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child) {", "-    return new ComposedMap<K, V>(parent, child);", "+  /** Produce a lazy transitive composition of two maps.  Size-related operations have poor performance. */", "+  public static <K, X, V> LambdaMap<K, V> compose(Map<? extends K, ? extends X> left,", "+                                                  Map<? super X, ? extends V> right) {", "+    return new ComposedMap<K, X, V>(left, right);", "+  }"]}], "num": 30750}
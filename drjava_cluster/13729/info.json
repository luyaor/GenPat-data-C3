{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00b72ea4ad7e318239ff1178f4ed8a3e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e7f474cae5b04fb92410548cf2c8c0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/AbstractInjectiveRelation.java", "commitBeforeChange": "811484bb0f3e9c6a234bb593ba7247f59304a444", "commitAfterChange": "d3ca8d30db126f3de1352627e18f51d00a1bf339", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected boolean containsObjects(Object first, Object second)", "signatureAfterChange": "   public boolean contains(T1 first, T2 second)", "diff": ["-  /** Checks for the given entry in {@code injectionMap()}. */", "-  protected boolean containsObjects(Object first, Object second) {", "+  /** Checks for the given entry in {@code functionMap()}. */", "+  public boolean contains(T1 first, T2 second) {", "-    if (map.containsKey(second)) {", "-      T1 val = map.get(second);", "-      return (first == null) ? (val == null) : first.equals(val);", "+    return map.containsKey(second) && ObjectUtil.equal(map.get(second), first);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80e8a0a25510ee126d4dd7c1fa2b048f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/AbstractFunctionalRelation.java", "commitBeforeChange": "811484bb0f3e9c6a234bb593ba7247f59304a444", "commitAfterChange": "d3ca8d30db126f3de1352627e18f51d00a1bf339", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected boolean containsObjects(Object first, Object second)", "signatureAfterChange": "   public boolean contains(T1 first, T2 second)", "diff": ["-  protected boolean containsObjects(Object first, Object second) {", "+  public boolean contains(T1 first, T2 second) {", "-    if (map.containsKey(first)) {", "-      T2 val = map.get(first);", "-      return (second == null) ? (val == null) : second.equals(val);", "+    return map.containsKey(first) && ObjectUtil.equal(map.get(first), second);", "+  }"]}], "num": 13729}
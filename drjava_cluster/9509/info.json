{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc3999a35aabc61d669ba1ec1b9e32b3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a76d0b04189c1d15e2ca387dd46eecf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/DynamicJava.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public static void main(String... args) throws IOException", "signatureAfterChange": "      public static void main(String... args) throws IOException", "diff": ["-    Interpreter i = new Interpreter(Options.DEFAULT);", "+", "+    ArgumentParser argParser = new ArgumentParser();", "+    argParser.supportOption(\"classpath\", IOUtil.WORKING_DIRECTORY.toString());", "+    argParser.supportAlias(\"cp\", \"classpath\");", "+    ArgumentParser.Result parsedArgs = argParser.parse(args);", "+    Iterable<File> cp = IOUtil.parsePath(parsedArgs.getUnaryOption(\"classpath\"));", "+", "+    Interpreter i = new Interpreter(Options.DEFAULT, new PathClassLoader(cp));", "+    String prev = null;", "+    boolean blank = false;", "+        // two blank lines trigger a recompute", "+        if (input.equals(\"\")) {", "+          if (blank == true) { input = prev; blank = false; }", "+          else { blank = true; }", "+        }", "+        else { prev = input; blank = false; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc900428a0adecadf0d058222bd7bd1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "signatureAfterChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "diff": ["+    LinkedList<String> fullJVMArgs = new LinkedList<String>(Arrays.asList(jvmArgs));", "+    Properties propagate = ConcurrentUtil.getProperties(\"plt.\", \"drjava.\", \"edu.rice.cs.\");", "+    if (propagate.containsKey(\"plt.debug.log\") || propagate.containsKey(\"plt.error.log\") || ", "+        propagate.containsKey(\"plt.log.factory\")) {", "+      propagate.put(\"plt.log.working.dir\", System.getProperty(\"user.dir\", \"\"));", "+    }", "+    for (Map.Entry<Object, Object> entry : propagate.entrySet()) {", "+      fullJVMArgs.addFirst(\"-D\" + entry.getKey() + \"=\" + entry.getValue());", "+    }", "+    final String[] jvmArgsArray = fullJVMArgs.toArray(new String[0]);", "+    ", "-          final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs, workDir);", "+          final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgsArray, workDir);"]}], "num": 9509}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9bc74f092d5d49458a80cbe92d8857e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3166a5e1dd8379779d07f8c90c331e65", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public TypeData forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public TypeData forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-   */\r", "-  public TypeData forAbstractMethodDef(AbstractMethodDef that) {\r", "-    final TypeData mav_result = that.getMav().visit(this);\r", "-    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);\r", "-    for (int i = 0; i < that.getTypeParams().length; i++) {\r", "-      typeParams_result[i] = that.getTypeParams()[i].visit(this);\r", "-    }\r", "-    final SymbolData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);\r", "-    final TypeData name_result = that.getName().visit(this);\r", "-\r", "-    // This is not used because this call eventually invokes the forUninitializedVariableDeclarator method above.\r", "-    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);\r", "-    for (int i = 0; i<params_result.length; i++) {\r", "-      params_result[i] = getSymbolData(that.getParams()[i].getDeclarator().getType().getName(), _symbolData, that.getParams()[i]);\r", "-    }\r", "-    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);\r", "-    for (int i = 0; i < that.getThrows().length; i++) {\r", "-      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);\r", "-    }\r", "-    // Ensure that this method doesn't override another method with a different return type.\r", "-    MethodData md = _symbolData.getMethod(that.getName().getText(), params_result);\r", "-    if (md == null) {\r", "-      throw new RuntimeException(\"Internal Program Error: Could not find the method \" + that.getName().getText() + \" in class \" + _symbolData.getName() +\".  Please report this bug.\");\r", "-    }\r", "-    SymbolData.checkDifferentReturnTypes(md, _symbolData, _targetVersion);\r", "-\r", "-    return result_result;\r", "-  }\r", "+   */", "+  public TypeData forAbstractMethodDef(AbstractMethodDef that) {", "+    final TypeData mav_result = that.getMav().visit(this);", "+    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);", "+    for (int i = 0; i < that.getTypeParams().length; i++) {", "+      typeParams_result[i] = that.getTypeParams()[i].visit(this);", "+    }", "+    final SymbolData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);", "+    final TypeData name_result = that.getName().visit(this);", "+", "+    // This is not used because this call eventually invokes the forUninitializedVariableDeclarator method above.", "+    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);", "+    for (int i = 0; i<params_result.length; i++) {", "+      params_result[i] = getSymbolData(that.getParams()[i].getDeclarator().getType().getName(), _symbolData, that.getParams()[i]);", "+    }", "+    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);", "+    for (int i = 0; i < that.getThrows().length; i++) {", "+      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);", "+    }", "+    // Ensure that this method doesn't override another method with a different return type.", "+    MethodData md = _symbolData.getMethod(that.getName().getText(), params_result);", "+    if (md == null) {", "+      throw new RuntimeException(\"Internal Program Error: Could not find the method \" + that.getName().getText() + \" in class \" + _symbolData.getName() +\".  Please report this bug.\");", "+    }", "+    SymbolData.checkDifferentReturnTypes(md, _symbolData, LanguageLevelConverter.OPT.javaVersion());", "+", "+    return result_result;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf4aa450618fd1c093ddb6818837109", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r   public TypeData forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public TypeData forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-   */\r", "-  public TypeData forAbstractMethodDef(AbstractMethodDef that) {\r", "-    final TypeData mav_result = that.getMav().visit(this);\r", "-    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);\r", "-    for (int i = 0; i < that.getTypeParams().length; i++) {\r", "-      typeParams_result[i] = that.getTypeParams()[i].visit(this);\r", "-    }\r", "-    final TypeData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);//that.getResult().visit(this);\r", "-    final TypeData name_result = that.getName().visit(this);\r", "-    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);\r", "-    for (int i = 0; i<params_result.length; i++) {\r", "-      params_result[i] = getSymbolData(that.getParams()[i].getDeclarator().getType().getName(), _symbolData, that.getParams()[i]);\r", "-    }\r", "-    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);\r", "-    for (int i = 0; i < that.getThrows().length; i++) {\r", "-      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);//that.getThrows()[i].visit(this);\r", "-    }\r", "-    // Ensure that this method doesn't override another method with a different return type.\r", "-    MethodData md = _symbolData.getMethod(that.getName().getText(), params_result);\r", "-    if (md == null) {\r", "-      throw new RuntimeException(\"Internal Program Error: Could not find the method \" + that.getName().getText() + \" in interface \" + _symbolData.getName() + \".  Please report this bug.\");\r", "-    }\r", "-    SymbolData.checkDifferentReturnTypes(md, _symbolData, _targetVersion);\r", "-    return result_result;\r", "-  }\r", "+   */", "+  public TypeData forAbstractMethodDef(AbstractMethodDef that) {", "+    final TypeData mav_result = that.getMav().visit(this);", "+    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);", "+    for (int i = 0; i < that.getTypeParams().length; i++) {", "+      typeParams_result[i] = that.getTypeParams()[i].visit(this);", "+    }", "+    final TypeData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);//that.getResult().visit(this);", "+    final TypeData name_result = that.getName().visit(this);", "+    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);", "+    for (int i = 0; i<params_result.length; i++) {", "+      params_result[i] = getSymbolData(that.getParams()[i].getDeclarator().getType().getName(), _symbolData, that.getParams()[i]);", "+    }", "+    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);", "+    for (int i = 0; i < that.getThrows().length; i++) {", "+      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);//that.getThrows()[i].visit(this);", "+    }", "+    // Ensure that this method doesn't override another method with a different return type.", "+    MethodData md = _symbolData.getMethod(that.getName().getText(), params_result);", "+    if (md == null) {", "+      throw new RuntimeException(\"Internal Program Error: Could not find the method \" + that.getName().getText() + \" in interface \" + _symbolData.getName() + \".  Please report this bug.\");", "+    }", "+    SymbolData.checkDifferentReturnTypes(md, _symbolData, LanguageLevelConverter.OPT.javaVersion());", "+    return result_result;", "+  }"]}], "num": 18500}
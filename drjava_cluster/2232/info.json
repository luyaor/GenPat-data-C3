{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4468ff195131b496664d6155a41a098e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27407c8c68472e6970d8c7ef32589cf9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ComplementSet.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Iterator<E> iterator()", "signatureAfterChange": "      public boolean hasFixedSize()", "diff": ["-  /** Traversing is linear in the size of {@code domain}. */", "-  public Iterator<E> iterator() {", "-    Predicate<Object> filter = LambdaUtil.negate(CollectUtil.containsPredicate(_excluded));", "-    return new FilteredIterator<E>(_domain.iterator(), filter);", "+  public boolean hasFixedSize() {", "+    return IterUtil.hasFixedSize(_set) && _excluded.hasFixedSize();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc9f440ff13d225ebcbfcd45364b0ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/IntersectionSet.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Iterator<E> iterator()", "signatureAfterChange": "      public boolean hasFixedSize()", "diff": ["-  /** Traversing is linear in the size of {@code set2}. */", "-  public Iterator<E> iterator() {", "-    Predicate<Object> filter = CollectUtil.containsPredicate(_set1);", "-    return new FilteredIterator<E>(_set2.iterator(), filter);", "+  public boolean hasFixedSize() {", "+    return ((PredicateSet<?>) _pred).hasFixedSize() && IterUtil.hasFixedSize(_set);"]}], "num": 2232}
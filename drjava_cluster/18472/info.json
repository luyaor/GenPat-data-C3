{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5ae14c47e31ae162e1d6dbc1ecfad3b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "319c4df42d4004003fa0c2e0d479dfdf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["-    */", "-    public FindResult findNext() { return _state.findNext(); }", "+   */", "+  public FindResult findNext() {", "+//    Utilities.showDebug(\"DEBUG: findNext() in FindAnyOccurrenceState called\");", "+    ", "+    // If the user just found and toggled the \"Search Backwards\"", "+    // option, we should skip the first find.", "+    if (_skipOneFind) {", "+//      Utilities.showDebug(\"DEBUG: We should skip one\");", "+      int wordLength = _lastFindWord.length();", "+      if (!_searchBackwards) setPosition(getCurrentOffset() + wordLength);", "+      else setPosition(getCurrentOffset() - wordLength);", "+      positionChanged();", "+    }", "+    if (!_searchBackwards) return _findNext(_current.getOffset(), _doc.getLength()-_current.getOffset());", "+    return _findNext(0, _current.getOffset());", "+  }        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb58f71614c1a3435e01351779a3e9ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "576713321d388945af9795f8f5bacbafa14cd87f", "commitAfterChange": "b814c7e145dc4411f1437e59c56bc53ee860800f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "   static void checkForCompilersAndDebugger(String[] args)", "signatureAfterChange": "   static boolean checkForCompilersAndDebugger(String[] args)", "diff": ["-   */", "-  static void checkForCompilersAndDebugger(String[] args) {", "-    ", "-    boolean needCompiler = ! hasAvailableCompiler();", "-    boolean needDebugger = ! hasAvailableDebugger();", "-", "-    // Try to make sure both compiler and debugger are available", "-    if (needCompiler || needDebugger) promptForToolsJar(needCompiler, needDebugger);", "+    */", "+  static boolean checkForCompilersAndDebugger(String[] args) {", "+    if (canLoad(_thisLoader, TEST_COMPILER_CLASS) && canLoad(_thisLoader, TEST_DEBUGGER_CLASS)) {", "+      return true;", "+    }", "+    else {", "+      boolean haveCompiler = canLoad(_thisLoader, TEST_COMPILER_CLASS) || ", "+                             canLoad(_toolsLoader, TEST_COMPILER_CLASS);", "+      boolean haveDebugger = canLoad(_thisLoader, TEST_DEBUGGER_CLASS) || ", "+                             canLoad(_toolsLoader, TEST_DEBUGGER_CLASS);", "+      if (!haveCompiler || !haveDebugger) { promptForToolsJar(!haveCompiler, !haveDebugger); }", "+      return false;", "+    }"]}], "num": 18472}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a61e6e65728592268e2ee57c83ecc4f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2394ead5480ff5d849164ea202664c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   private void _uncommentLine()", "signatureAfterChange": "   private void _uncommentLine() throws BadLocationException", "diff": ["+   */", "+  private void _uncommentLine() throws BadLocationException {", "+    // Look for \"//\" at the beginning of the line, and remove it.", "+    int curCol = getCurrentCol();", "+    int lineStart = _currentLocation - curCol;", "+    String text = getText(lineStart, curCol + _reduced.getDistToNextNewline());", "+    int pos = text.indexOf(\"//\");", "+    ", "+    //      System.out.println(\"\" + _currentLocation + \" \" + curCol + \" \"", "+    //                           + text + \" \" + pos + \" \" + _reduced.getDistToNextNewline());", "+    ", "+    // Look for any non-whitespace chars before the \"//\" on the line.", "+    boolean goodWing = true;", "+    for (int i = pos-1; i >= 0; i--) {", "+      char c = text.charAt(i);", "+      // If a previous char is not whitespace, we're not looking at a wing comment.", "+      if (c != ' ') {", "+        goodWing = false;", "+        break;", "+      }", "+    }", "+    ", "+    // If a wing comment wasn't found, or if the wings aren't the first", "+    // non-whitespace characters on the line, do nothing.", "+    if (pos >= 0 && goodWing) {", "+      // Otherwise, remove the wings and indent.", "+      remove(lineStart + pos, 2);", "+      _indentLine(Indenter.OTHER);", "-   */", "-  private void _uncommentLine() {", "-    // throwErrorHuh();", "-    try {", "-      // Look for \"//\" at the beginning of the line, and remove it.", "-      int curCol = getCurrentCol();", "-      int lineStart = getCurrentLocation() - curCol;", "-      String text = getText(lineStart, curCol + _reduced.getDistToNextNewline());", "-      int pos = text.indexOf(\"//\");", "-//      System.out.println(\"\" + getCurrentLocation() + \" \" + curCol + \" \"", "-//                           + text + \" \" + pos + \" \" + _reduced.getDistToNextNewline());", "-      // Look for any non-whitespace chars before the \"//\" on the line.", "-      boolean goodWing = true;", "-      for (int i = pos-1; ((i >= 0) && goodWing); i--) {", "-        char c = text.charAt(i);", "-        // If a previous char is not whitespace, we're not looking at a wing comment.", "-        // TODO: why the following???", "-        if (!((c == ' ') || (c == ' ') || (c == ' '))) goodWing = false;", "-      }", "-", "-      // If a wing comment wasn't found, or if the wings aren't the first", "-      // non-whitespace characters on the line, do nothing.", "-      if ((pos >= 0) && goodWing) {", "-        // Otherwise, remove the wings and indent.", "-        remove(lineStart + pos, 2);", "-        _indentLine(Indenter.OTHER);", "-      }", "-    } catch (BadLocationException e) { throw new UnexpectedException(e); }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1afbbf8402a889c745b14d34f8d4daa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   private int _uncommentLine() throws BadLocationException", "signatureAfterChange": "   private int _uncommentLine() throws BadLocationException", "diff": ["-    int curCol = getCurrentCol();", "-    int lineStart = _currentLocation - curCol;", "-    String text = getText(lineStart, curCol + _reduced.getDistToNextNewline());", "-    int pos = text.indexOf(\"//\");", "+//    Utilities.show(\"Uncomment line at location \" + _currentLocation);", "+//    Utilities.show(\"Preceding char = '\" + getText().charAt(_currentLocation - 1) + \"'\");", "+//    Utilities.show(\"Line = \\n\" + getText(_currentLocation, getLineEndPos(_currentLocation) - _currentLocation + 1));", "+    int pos1 = getText().indexOf(\"//\", _currentLocation);", "+    int pos2 = getFirstNonWSCharPos(_currentLocation, true);", "+//    Utilities.show(\"Pos1 = \" + pos1 + \" Pos2 = \" + pos2);", "+    if (pos1 != pos2) return NO_COMMENT_OFFSET;", "-    //      System.out.println(\"\" + _currentLocation + \" \" + curCol + \" \"", "-    //                           + text + \" \" + pos + \" \" + _reduced.getDistToNextNewline());", "-    ", "-    // Look for any non-whitespace chars before the \"//\" on the line.", "-    boolean goodWing = true;", "-    for (int i = pos-1; i >= 0; i--) {", "-      char c = text.charAt(i);", "-      // If a previous char is not whitespace, we're not looking at a wing comment.", "-      if (c != ' ') {", "-        goodWing = false;", "-        return NO_COMMENT_OFFSET;", "-      }", "-    }", "-    ", "-    // If a wing comment wasn't found, or if the wings aren't the first", "-    // non-whitespace characters on the line, do nothing.", "-    if (pos >= 0 && goodWing) {", "-      // Otherwise, remove the wings.", "-      remove(lineStart + pos, 2);", "-      //_indentLine(Indenter.IndentReason.OTHER);", "-      return WING_COMMENT_OFFSET;", "-    }", "-    return NO_COMMENT_OFFSET;", "+    remove(pos1, 2);", "+    return WING_COMMENT_OFFSET;"]}], "num": 23171}
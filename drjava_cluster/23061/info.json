{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f02bc3b9556465b4efeda9b783288ba", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b1f326b0977c9997b6465d271b15ed5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "deb4bbe3644e2d17508378353337903e5f2c956b", "commitAfterChange": "f9f9b40d76f2ccbda12717eda0af359f2105ef7b", "methodNumberBeforeChange": 526, "methodNumberAfterChange": 526, "signatureBeforeChange": "   private File getChosenFile(JFileChooser fc, int choice) throws OperationCanceledException", "signatureAfterChange": "   private File getChosenFile(JFileChooser fc, int choice, File previous) throws OperationCanceledException", "diff": ["-  private File getChosenFile(JFileChooser fc, int choice) throws OperationCanceledException {", "+  private File getChosenFile(JFileChooser fc, int choice, File previous) throws OperationCanceledException {", "-            if (chosen.getName().indexOf(\".\") == -1)", "-              return new File(chosen.getAbsolutePath() +", "-                              OptionConstants.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]);", "+            if (chosen.getName().indexOf(\".\") == -1) {", "+              // no file extension", "+              String previousName = (previous!=null)?previous.getName():\"\";", "+              if (!DrJavaFileUtils.isSourceFile(previousName)) {", "+                // previous file name doesn't have a file extension either", "+                return new File(chosen.getAbsolutePath() + OptionConstants.", "+                                  LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]);", "+              }", "+              else {", "+                // use previous file's extension", "+                int previousLastDotPos = previousName.lastIndexOf(\".\");", "+                String previousExt = previousName.substring(previousLastDotPos);", "+                File newFile = new File(chosen.getAbsolutePath() + previousExt);", "+                return newFile;", "+              }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ae7c726e62070d8334a42106ab5f30a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "e28d42989a089b15d3a01e7dd19b426bc7021c04", "commitAfterChange": "261ca8732921a2a5c58b2777d5419ddfe2c261df", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public synchronized void interpret(final String s, final InterpreterData interpreter)", "signatureAfterChange": "   public synchronized void interpret(final String input, final InterpreterData interpreter)", "diff": ["-  public synchronized void interpret(final String s, final InterpreterData interpreter) {", "-    Thread thread = new Thread(\"interpret thread: \" + s) {", "+  public synchronized void interpret(final String input, final InterpreterData interpreter) {", "+    Thread thread = new Thread(\"interpret thread: \" + input) {", "+        String s = input;", "-            // Processor disabled until bug 750605 fixed", "-            //String s1 = _interactionsProcessor.preProcess(s);", "+            String s1 = _interactionsProcessor.preProcess(s);", "-            //String s2 = _interactionsProcessor.postProcess(s1, result);", "+            String s2 = _interactionsProcessor.postProcess(s1, result);", "-//           catch (ParseException pe) {", "-//             // A ParseException indicates a syntax error in the input window", "-//             _mainJVM.interpretResult( new SyntaxErrorResult( pe, s ) );", "-//           }", "-//           catch (TokenMgrError tme) {", "-//             // A TokenMgrError indicates some lexical difficulty with input.", "-//             _mainJVM.interpretResult( new SyntaxErrorResult( tme, s ) );", "-//           }", "+          catch (ParseException pe) {", "+            // A ParseException indicates a syntax error in the input window", "+            _mainJVM.interpretResult( new SyntaxErrorResult( pe, s ) );", "+          }", "+          catch (TokenMgrError tme) {", "+            // A TokenMgrError indicates some lexical difficulty with input.", "+            _mainJVM.interpretResult( new SyntaxErrorResult( tme, s ) );", "+          }"]}], "num": 23061}
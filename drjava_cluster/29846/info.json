{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87085755db1832887b5bc73667f4823f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "117ca1ca7ce17fcd863517ef8f009846", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 66, "signatureBeforeChange": "      public static <T> Set<T> asSet(Iterable<T> iter)", "signatureAfterChange": "   public static <T> Set<T> asSet(Iterable<T> iter)", "diff": ["+   */", "+  public static <T> Set<T> asSet(Iterable<T> iter) {", "+    if (iter instanceof Set<?>) { return (Set<T>) iter; }", "+    else { return new IterableSet<T>(iter); }", "+  }", "-  ", "-  public static <T> Set<T> asSet(Iterable<T> iter) {", "-    if (iter instanceof Set<?>) { return (Set<T>) iter; }", "-    else if (iter instanceof Collection<?>) { return new HashSet<T>((Collection<T>) iter); }", "-    else if (iter instanceof SizedIterable<?>) {", "-      SizedIterable<T> si = (SizedIterable<T>) iter;", "-      Set<T> result = new HashSet<T>(si.size());", "-      for (T elt : si) { result.add(elt); }", "-      return result;", "-    else {", "-      Set<T> result = new HashSet<T>();", "-      for (T elt : iter) { result.add(elt); }", "-      return result;", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be85dfee3f20c5dc5f05c6548196785f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 277, "methodNumberAfterChange": 278, "signatureBeforeChange": "   private <T extends Pair<?, SignatureChecker>> Iterable<T> mostSpecificSignatures(Iterable<T> allSigs)", "signatureAfterChange": "         @Override public Iterable<MethodInvocationCandidate<I>> forClassType(ClassType t)", "diff": ["+        @Override public Iterable<MethodInvocationCandidate<I>> defaultCase(Type t) { return IterUtil.empty(); }", "+        @Override public Iterable<MethodInvocationCandidate<I>> forClassType(ClassType t) {", "+          List<MethodInvocationCandidate<I>> result = new LinkedList<MethodInvocationCandidate<I>>();", "+          for (DJMethod m : t.ofClass().declaredMethods()) {", "+            if (matches(m)) { result.add(makeInvocationCandidate(m, t)); }", "+          }", "+          return result;", "+        }", "-  /** Compute the most specific signatures in the list. */", "-  private <T extends Pair<?, SignatureChecker>> Iterable<T> mostSpecificSignatures(Iterable<T> allSigs) {", "-//    System.out.println(\"All matching signatures: \" + allSigs);", "-    Iterable<T> result = IterUtil.empty();", "-    for (T sig : allSigs) {", "-      boolean keep = true;", "-      for (T sig2 : allSigs) {", "-        keep &= (sig == sig2) || isMoreSpecific(sig.second(), sig2.second());", "-        if (!keep) { break; }", "-      }", "-      if (keep) { result = IterUtil.compose(result, sig); }", "-    }", "-//    System.out.println(\"Most specific signatures: \" + result);", "-    if (IterUtil.isEmpty(result)) { return allSigs; }", "-    else { return result; }", "-  }"]}], "num": 29846}
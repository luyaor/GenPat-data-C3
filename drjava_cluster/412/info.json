{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1d21c567fe7297c908daa7194c38c74", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3305ea46b541025b87f8b36f5dc053cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "714a91a3f9a91ffe3e5ee9ae0bd0c977c7aa4e31", "commitAfterChange": "86cce18ff80f67b178e899650f588fd3636436b4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public static void deleteDirectoryOnExit(final File dir)", "signatureAfterChange": "   public static void deleteDirectoryOnExit(final File dir)", "diff": ["-    // Delete this on exit, whether it's a directory or file", "-    dir.deleteOnExit();", "-    // If it's a directory, visit its children.", "-    //  For some reason, this has to be done after calling deleteOnExit", "-    //  on the directory itself.", "+    // Delete this on exit, whether it's a directory or file", "+    _log.log(\"Deleting file/directory \" + dir + \" on exit\");", "+    dir.deleteOnExit(); ", "+    ", "+    // If it's a directory, visit its children.  This recursive walk has to be done AFTER calling deleteOnExit", "+    //  on the directory itself because Java closes the list of files to deleted on exit in reverse order.", "-      if (childFiles!=null) { // listFiles may return null if there's an IO error", "+      if (childFiles != null) { // listFiles may return null if there's an IO error", "+", "+  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9b23f4e7b1a117644437a2d4b24335e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected OpenDefinitionsDocument setupDocument(String text) throws BadLocationException", "signatureAfterChange": "   protected OpenDefinitionsDocument setupDocument(String text) throws BadLocationException", "diff": ["-      public void newFileCreated(OpenDefinitionsDocument doc) { newCount++; }", "-      public void activeDocumentChanged(OpenDefinitionsDocument doc) { switchCount++; }", "+      public synchronized void newFileCreated(OpenDefinitionsDocument doc) { newCount++; }", "+      public synchronized void activeDocumentChanged(OpenDefinitionsDocument doc) { switchCount++; }", "-    changeDocumentText(text, doc);", "+    changeDocumentText(text, doc);  // not atomic but no other thread is trying to modify doc", "-//    _log.log(\"New File \" + doc + \" created\");", "+    _log.log(\"New File \" + doc + \" created\");", "-  }"]}], "num": 412}
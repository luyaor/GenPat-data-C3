{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8017c9f6dfa562a77d5037f7eefa22fa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b7bab0310f2feb60598f1d6ce95f842", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/AnonymousInnerAllocation.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public AnonymousInnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs,                                    List<? extends Expression> args, List<Node> memb,                                   SourceInfo si)", "signatureAfterChange": "   public AnonymousInnerAllocation(Expression exp, Option<List<TypeName>> targs, String cn,                                    Option<List<TypeName>> ctargs, List<? extends Expression> args, List<Node> memb,                                    SourceInfo si)", "diff": ["-  public AnonymousInnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, ", "-                                  List<? extends Expression> args, List<Node> memb,", "-                                  SourceInfo si) {", "-    super(exp, cn, ctargs, args, si);", "+  public AnonymousInnerAllocation(Expression exp, Option<List<TypeName>> targs, String cn,", "+                                   Option<List<TypeName>> ctargs, List<? extends Expression> args, List<Node> memb,", "+                                   SourceInfo si) {", "+    super(exp, targs, cn, ctargs, args, si);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e4a985abe2562f1844784e6b55734f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/AnonymousInnerAllocation.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public AnonymousInnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs,                                    List<? extends Expression> args, List<Node> memb)", "signatureAfterChange": "   public AnonymousInnerAllocation(Expression exp, Option<List<TypeName>> targs, String cn,                                    Option<List<TypeName>> ctargs, List<? extends Expression> args, List<Node> memb)", "diff": ["-  public AnonymousInnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, ", "-                                  List<? extends Expression> args, List<Node> memb) {", "-    this(exp, cn, ctargs, args, memb, SourceInfo.NONE);", "+  public AnonymousInnerAllocation(Expression exp, Option<List<TypeName>> targs, String cn,", "+                                   Option<List<TypeName>> ctargs, List<? extends Expression> args, List<Node> memb) {", "+    this(exp, targs, cn, ctargs, args, memb, SourceInfo.NONE);"]}], "num": 8193}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df31deeae85a0834a16d32c8a94db068", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83deb3b1664cf7a482dda2ede51c5fc3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "commitAfterChange": "b1b91197c778ee62ce767051b412c31f7bcdddb8", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 84, "signatureBeforeChange": "      synchronized void currThreadSet(final DebugThreadData thread)", "signatureAfterChange": "   private void _removeAllDebugInterpreters() throws DebugException", "diff": ["+   */", "+  private void _removeAllDebugInterpreters() throws DebugException {", "+    DefaultInteractionsModel interactionsModel =", "+      ((DefaultInteractionsModel)_model.getInteractionsModel());", "+    String oldInterpreterName;", "+    if (_runningThread != null) {", "+      oldInterpreterName = _getUniqueThreadName(_runningThread);", "+      interactionsModel.removeInterpreter(oldInterpreterName);", "+    }", "+    while (!_suspendedThreads.isEmpty()) {", "+      ThreadReference threadRef = _suspendedThreads.pop();", "+      oldInterpreterName = _getUniqueThreadName(threadRef);", "+      interactionsModel.removeInterpreter(oldInterpreterName);", "+    }", "+  }", "-  synchronized void currThreadSet(final DebugThreadData thread) {", "-    printMessage(\"The current thread has been set.\");", "-    notifyListeners(new EventNotifier() {", "-      public void notifyListener(DebugListener l) {", "-        l.currThreadSet(thread);", "-      }", "-    });", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5addd67313ddacd3613330482159552", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 249, "signatureBeforeChange": "   protected Type immediateSupertype(ClassType t)", "signatureAfterChange": "      private Type fieldType(final DJField f, Type declaringType)", "diff": ["-  /** Get a class's immediate supertype.  The result is either null or the result of a {@link #meet} call. */", "-    return t.apply(new TypeAbstractVisitor<Type>() {", "-      public Type defaultCase(Type t) { throw new IllegalArgumentException(); }", "-      public Type forSimpleClassType(SimpleClassType t) { return immediateSupertype(t); }", "-      public Type forRawClassType(RawClassType t) { return immediateSupertype(t); }", "-      public Type forParameterizedClassType(ParameterizedClassType t) { return immediateSupertype(t); }", "-    });", "-  }", "+  ", "+  private Type fieldType(final DJField f, Type declaringType) {", "+    return declaringType.apply(new TypeAbstractVisitor<Type>() {", "+      @Override public Type defaultCase(Type declaringType) { return f.type(); }", "+      @Override public Type forRawClassType(RawClassType declaringType) { return erase(f.type()); }", "+      @Override public Type forParameterizedClassType(ParameterizedClassType declaringType) {", "+        ParameterizedClassType cap = capture(declaringType);", "+        return substitute(f.type(), SymbolUtil.allTypeParameters(cap.ofClass()), cap.typeArguments());", "+      }"]}], "num": 22891}
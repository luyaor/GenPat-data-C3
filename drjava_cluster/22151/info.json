{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cea76a44e82ae151bd82b4ad92dda1b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "283b108e5809f10b68feb26808760ff5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result)", "signatureAfterChange": "   public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result)", "diff": ["-  /**Make sure that the condition statement of the while returns type boolean. */", "+  /** Make sure that the condition statement of the while returns type boolean. */", "-      if (!condition_result.isInstanceType()) {", "-        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      if (! condition_result.isInstanceType()) {", "+        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, it is a class or \" +", "+                    \"interface name\", that);", "-        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that.getCondition());", "+        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, its type is \" + ", "+                  condition_result.getName(), that.getCondition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d1daf658054586df1afc61ccd2db198", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public TypeData complexThisConstructorInvocationNotAllowed(ComplexThisConstructorInvocation that)", "signatureAfterChange": "   public TypeData complexThisConstructorInvocationNotAllowed(ComplexThisConstructorInvocation that)", "diff": ["-   */", "+  /** ComplexThisConstructorInvocations are not ever allowed--throw an appropriate error. */", "-    _addError(\"Constructor Invocations of this form are never allowed.  A constructor invocation can appear here, but it must either be a super constructor invocation or have the form this(...)\", that);", "+    _addError(\"Constructor Invocations of this form are never allowed.  A constructor invocation can appear here, \"", "+                + \"but it must either be a super constructor invocation or have the form this(...)\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "761be2fa476c293df7fb5d0e001e5cc7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result)", "signatureAfterChange": "   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result,                                        TypeData update_result, TypeData code_result)", "diff": ["-  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result) {", "+  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, ", "+                                      TypeData update_result, TypeData code_result) {", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or \" +", "+                  \"interface name\", that);", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that);", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + ", "+                  condition_result.getName(), that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f8e19c515bf6870f32c22df71a41196", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result)", "signatureAfterChange": "   public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result,                                           TypeData thenStatement_result)", "diff": ["-  public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result) {", "+  public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, ", "+                                         TypeData thenStatement_result) {", "-        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, it is a class \" +", "+                    \"or interface name\", that);", "-        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());", "+        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, its type is \" + ", "+                  testExpression_result.getName(), that.getTestExpression());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4ab53ad0d7d317a35e1d3bb46b85bfb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public Void forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public Void forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do \"", "+                           + \"not have an explicit return type\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d69bb37e45a4c0caf5ef85428b31e17f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Void forPrimitiveTypeDoFirst(PrimitiveType that)", "signatureAfterChange": "   public Void forPrimitiveTypeDoFirst(PrimitiveType that)", "diff": ["-      _addError(\"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used at the Advanced level\", that);", "+      _addError(\"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used \" +", "+                \"at the Advanced level\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d88143531276924adabe7742f3224c5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public Void forPrimitiveTypeDoFirst(PrimitiveType that)", "signatureAfterChange": "   public Void forPrimitiveTypeDoFirst(PrimitiveType that)", "diff": ["-      _addError(\"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used at the Intermediate level\", that);", "+      _addError(\"Only the primitive types \\\"int\\\", \\\"double\\\", \\\"boolean\\\", and \\\"char\\\" can be used \" +", "+                \"at the Intermediate level\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc46bdc1b0d68a4983e676a6dc70c158", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do \"", "+                           + \"not have an explicit return type\","]}], "num": 22151}
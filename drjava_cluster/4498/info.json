{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fe65ea0cfdd2a256e96565f8216fc64", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "510f520978b477d6123909096f6097f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "11e630b08382faca40628146b7f40625d89f190c", "commitAfterChange": "4742de9e9abcc9abfbe963657e41dfd407aaaeee", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected JButton[] makeButtons()", "signatureAfterChange": "   protected JComponent[] makeButtons()", "diff": ["-  protected JButton[] makeButtons() {    ", "+  protected JComponent[] makeButtons() {    ", "-    ", "-    Action removeAllAction = new AbstractAction(\"Remove All\") {", "-      public void actionPerformed(ActionEvent ae) {", "-        _model.getFindResultsManager().clearRegions();", "+", "+    _colorBox = new JComboBox();    ", "+    for(int i=0; i<OptionConstants.FIND_RESULTS_COLORS.length; ++i) {", "+      _colorBox.addItem(DrJava.getConfig().getSetting(OptionConstants.FIND_RESULTS_COLORS[i]));", "+    }", "+    _colorBox.addItem(\"None\");", "+    _colorBox.setRenderer(new ColorComboRenderer());", "+    _colorBox.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        if (_lastIndex<OptionConstants.FIND_RESULTS_COLORS.length) {", "+          --DefinitionsPane.FIND_RESULTS_PAINTERS_USAGE[_lastIndex];", "+        }", "+        _lastIndex = _colorBox.getSelectedIndex();", "+        if (_lastIndex<OptionConstants.FIND_RESULTS_COLORS.length) {", "+          ++DefinitionsPane.FIND_RESULTS_PAINTERS_USAGE[_lastIndex];", "+        }", "+        _frame.refreshFindResultsHighlightPainter(FindResultsPanel.this, ", "+                                                  DefinitionsPane.FIND_RESULTS_PAINTERS[_lastIndex]);", "-    };", "-    _removeAllButton = new JButton(removeAllAction);", "+    });", "+    // find the first available color, or choose \"None\"", "+    for(_lastIndex=0; _lastIndex<OptionConstants.FIND_RESULTS_COLORS.length; ++_lastIndex) {", "+      if (DefinitionsPane.FIND_RESULTS_PAINTERS_USAGE[_lastIndex]==0) {", "+        break;", "+      }", "+    }", "+    if (_lastIndex<OptionConstants.FIND_RESULTS_COLORS.length) {", "+      ++DefinitionsPane.FIND_RESULTS_PAINTERS_USAGE[_lastIndex];", "+    }", "+    _colorBox.setSelectedIndex(_lastIndex);", "+    _frame.refreshFindResultsHighlightPainter(FindResultsPanel.this, ", "+                                              DefinitionsPane.FIND_RESULTS_PAINTERS[_lastIndex]);", "-    JButton[] buts = new JButton[] { ", "+    JComponent[] buts = new JComponent[] { ", "-        _removeAllButton", "+        new JLabel(\"Highlight:\"),", "+        _colorBox", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62b77d63877960acd6f5d746ed34d2b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipComments.java", "commitBeforeChange": "0047e2d5991ef20f74452ac3c21bd6d7ee99b408", "commitAfterChange": "818d684134925745129d103adc256ed04e291a53", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "     boolean applyRule(DefinitionsDocument doc)", "diff": ["-   */", "-  boolean applyRule(DefinitionsDocument doc)", "-  {", "-    try", "+     */", "+    boolean applyRule(DefinitionsDocument doc)", "-      // Find the first non-whitespace character on the current line.", "-      ", "-      int", "-        current = doc.getCurrentLocation(),", "-        start   = doc.getLineFirstCharPos(current),", "-        end     = doc.getLineEndPos(current);", "-      ", "-      ", "-      // Return false if the specified prefix doesn't \"fit\" on the current line.", "-      ", "-      if ((start + _prefix.length()) > end)", "-        return false;", "-      ", "-      // Return false if the start of the line is inside a comment, or if", "-      // it is shadowed by single or double quotes.", "-      ", "-      BraceReduction reduced = doc.getReduced();", "-      reduced.move(start - current);", "-      ReducedModelState state = reduced.getStateAtCurrent();", "-      reduced.move(current - start);", "-      ", "-      if (!state.equals(ReducedModelStates.FREE))", "-        return false;", "-      ", "-      // Compare the specified prefix with the beginning of the current line.", "-      ", "-      return _prefix.equals(doc.getText(start, _prefix.length()));", "+\ttry", "+\t{", "+\t    // Find the first non-whitespace character on the current line.", "+\t    ", "+\t    int currentPos = doc.getCurrentLocation(),", "+\t\tstartPos   = doc.getLineFirstCharPos(currentPos),", "+\t\tendPos     = doc.getLineEndPos(currentPos),", "+\t\tlineLength = endPos - startPos;", "+\t    ", "+\t    char currentChar, previousChar = '\\0';", "+\t    String text = doc.getText(startPos, lineLength);", "+\t    ", "+\t    for (int i = 0; i < lineLength; i++)", "+\t    {", "+\t\t// Get state for walker position.", "+\t\tBraceReduction reduced = doc.getReduced();", "+\t\treduced.move( startPos - currentPos + i);", "+\t\tReducedModelState state = reduced.getStateAtCurrent();", "+\t\treduced.move(-startPos + currentPos - i);", "+\t\t", "+\t\tcurrentChar = text.charAt(i);", "+\t    ", "+\t\tif (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) ", "+\t\t{", "+\t\t    return false;", "+\t\t}", "+\t\tif (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT))", "+\t\t{", "+\t\t    // Handle case: ...*/*", "+\t\t    previousChar = '\\0'; continue;", "+\t\t}", "+\t\tif (state.equals(ReducedModelState.FREE))", "+\t\t{", "+\t\t    // Can prefix still fit on the current line?", "+\t\t    if (_prefix.length() > lineLength - i)", "+\t\t    {", "+\t\t\treturn false;", "+\t\t    }", "+\t\t    else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/')", "+\t\t    {", "+\t\t\t// '/' is the only non-WS character that we consume without", "+\t\t\t// immediately returning false. When we try to match the prefix,", "+\t\t\t// we also need to reflect this implicit lookahead mechanism.", "+\t\t\treturn true;", "+\t\t    }", "+\t\t    else if (currentChar == '/')", "+\t\t    {", "+\t\t\tif (previousChar == '/') { return false; }", "+\t\t    }", "+\t\t    else if (currentChar == ' ' || currentChar == '\\t')", "+\t\t    {", "+\t\t    }", "+\t\t    else if (!(currentChar == '*' && previousChar == '/'))", "+\t\t    {", "+\t\t\treturn false;", "+\t\t    }", "+\t\t}", "+\t\tif (previousChar == '/' && currentChar != '*')", "+\t\t{", "+\t\t    return false;", "+\t\t}", "+\t\tpreviousChar = currentChar;", "+\t    }", "+\t    return false;", "+\t}", "+\tcatch (BadLocationException e)", "+\t{", "+\t    // Control flow should never reach this point!", "+\t    throw new UnexpectedException(new RuntimeException(\"Bug in QuestionCurrLineStartsWithSkipComments\"));", "+\t}", "-    catch (BadLocationException e)", "-    {", "-      // Control flow should never reach this point!", "-      throw new UnexpectedException(new RuntimeException(\"Bug in QuestionCurrLineStartsWithSkipComments\"));", "-    }", "-  }"]}], "num": 4498}
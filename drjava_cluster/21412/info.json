{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62d9055c676bcfbcf82465e91a5ef358", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3db29f2efa6858a2da6caa6344a27637", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "e7fa83968a0076b95166203c3ff9a5bddde8dfee", "commitAfterChange": "b2bccf49a3d470addd7a5aec1fd2eaf00accbe3b", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public boolean isSubtype(Type subT, Type superT)", "signatureAfterChange": "   public boolean isSubtype(Type subT, Type superT)", "diff": ["-    return isSubtype(subT, superT, new RecursionStack2<Type, Type>());", "+    //debug.logStart(new String[]{\"subT\", \"superT\"}, subT, superT);", "+    boolean result = isSubtype(subT, superT, new RecursionStack2<Type, Type>());", "+    //debug.logEnd(\"result\", result);", "+    return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7235d3a4c8dbf7c98584fe49d8f99d6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhrase.java", "commitBeforeChange": "c056ab71f347d40179703642e25ff83ac78c70e0", "commitAfterChange": "6e6dc20e393a893a5d9ad55d0b971c8d23c8c73e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-        char[] delims = {';', ',', '(', '[', ", "-          '&', '|', '+', '-', '*', '/', '%', ", "-          '=', '<', '>', '}'", "-        };", "+        char[] delims = {';', ',', '(', '[', '&', '|', '+', '-', '*', '/', '%', '=', '<', '>', '}'};", "-        return (nextNonWS >= startLine);", "+        boolean result = nextNonWS >= startLine;", "+//        if (! result) Utilities.show(\"QuestionNewParenPhrase is returning false at pos \" + here);", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27652702e90cd0d0d5c166522b6b569", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private boolean _isJUnitTest(Class c)", "signatureAfterChange": "   private boolean _isJUnitTest(Class c)", "diff": ["-    //new ScrollableDialog(null, \"_isJUnitTestCase called on \" + c, \"\", \"\").show();", "-", "-    return Test.class.isAssignableFrom(c) && !Modifier.isAbstract(c.getModifiers()) && ", "-      !Modifier.isInterface(c.getModifiers());", "+    boolean result = Test.class.isAssignableFrom(c) && !Modifier.isAbstract(c.getModifiers()) && ", "+                     !Modifier.isInterface(c.getModifiers());", "+    //debug.logValues(new String[]{\"c\", \"isJUnitTest(c)\"}, c, result);", "+    return result;"]}], "num": 21412}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8adaa77b7248ff5bf20bb3db29d591ec", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78b6f2cb426de51746bdd2040a8b9c6b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "aff4ca7a048d3be1e2f863c90bf8f2bfe09306fd", "commitAfterChange": "7636e2659b4b69c586b657836319e825c9bf35fa", "methodNumberBeforeChange": 344, "methodNumberAfterChange": 344, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["+          // if file is read-only, ask if it should be made writable", "+          if(file.exists() && !file.canWrite()) {", "+            File[] res = _notifier.filesReadOnly(new File[] {file});", "+            for(File roFile: res) {", "+              FileOps.makeWritable(roFile);", "+            }", "+            if (res.length==0) { return false; /* read-only, do not overwrite */ }", "+          }", "+          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc40c394a81df857b1cddffd57aadcab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "aff4ca7a048d3be1e2f863c90bf8f2bfe09306fd", "commitAfterChange": "7636e2659b4b69c586b657836319e825c9bf35fa", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "diff": ["+    // if file is read-only, ask if it should be made writable", "+    if (file.exists() && !file.canWrite()) {", "+      File[] res = _notifier.filesReadOnly(new File[] {file});", "+      for(File roFile: res) {", "+        FileOps.makeWritable(roFile);", "+      }", "+      if (res.length==0) { return; /* read-only, do not overwrite */ }", "+    }", "+"]}], "num": 17934}
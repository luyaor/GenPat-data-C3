{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb0f570e3b970e90fbe639b0c6371534", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f6701e7ab88b38c1294ff8482ac70a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void testStarted(String name)", "signatureAfterChange": "     public synchronized void testStarted(String name)", "diff": ["-    public void testStarted(String name) {", "-//      Document doc = getDocument();", "-//      try {", "-//        doc.insertString(doc.getLength(),", "-//                         \"  \" + name,", "-//                         NORMAL_ATTRIBUTES);", "-//      }", "-//      catch (BadLocationException ble) {", "-//        // Inserting at end, shouldn't happen", "-//        throw new UnexpectedException(ble);", "-//      }", "+    public synchronized void testStarted(String name) {", "+      String testName = _getTestFromName(name);", "+      String className = _getClassFromName(name);", "+      String fullName = className + \".\" + testName;", "+      if (fullName.equals(JUNIT_WARNING)) {", "+        return;", "+      }", "+      Document doc = getDocument();", "+      int index = doc.getLength();", "+      ", "+      try {", "+        // Insert the classname if it has changed", "+        if (!className.equals(_runningTestName)) {", "+          _runningTestName = className;", "+          doc.insertString(index, \"  \" + className + \"\\n\", NORMAL_ATTRIBUTES);", "+          index = doc.getLength();", "+        }", "+        ", "+        // Insert the test name, remembering its position", "+        doc.insertString(index, \"    \", NORMAL_ATTRIBUTES);", "+        index = doc.getLength();", "+        doc.insertString(index, testName + \"\\n\", NORMAL_ATTRIBUTES);", "+        Position pos = doc.createPosition(index);", "+        _runningTestNamePositions.put(fullName, pos);", "+        setCaretPosition(index);", "+      }", "+      catch (BadLocationException ble) {", "+        // Inserting at end, shouldn't happen", "+        throw new UnexpectedException(ble);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cbdd8d10533299f26cace82c76f107c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "dff1e78708d1fc8c89ac7283a8a2c5db6fd8ed74", "commitAfterChange": "545baa1c63b7ee7d993e35e240105f7970f7c2d1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "signatureAfterChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "diff": ["+    ", "-        if(mapInsert(oce.value, _a)) // if overwrite, remove accelerator of overwritten menuitem", "+        if (oce.value == KeyStrokeOption.NULL_KEYSTROKE) return; ", "+        ", "+        if(shouldUpdate(oce.value, _a)) ", "-          if (_jmi != null) { // otherwise this keystroke should map to an action that isn't in the menu", "-            JMenuItem overwrittenMenuItem = (JMenuItem) _keyToMenuItemMap.get(oce.value);", "-            if (overwrittenMenuItem != null) {", "-              overwrittenMenuItem.setAccelerator(null);", "-            }", "-            _jmi.setAccelerator(oce.value);", "-          }", "-          // change shift-version's binding", "-          Action shiftAction = (Action) _actionToShiftActionMap.get(_a);", "-          if (shiftAction != null) {", "-            _keyToActionMap.remove(addShiftModifier(_ks));", "-            mapInsert(addShiftModifier(oce.value), shiftAction);", "+          KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(_a);", "+          _keyToDataMap.remove(_ks);", "+          ", "+          //check for conflicting key binding", "+          if (_keyToDataMap.containsKey(oce.value)) {", "+            //if new key in map, and shouldUpdate returns true, we are overwriting it", "+            KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(oce.value);", "+            conflictKSD.setKeyStroke(KeyStrokeOption.NULL_KEYSTROKE);", "+            _updateMenuItem(conflictKSD);", "+            _keyToDataMap.remove(oce.value);", "+            DrJava.CONFIG.setSetting(conflictKSD.getOption(), KeyStrokeOption.NULL_KEYSTROKE);", "-          _keyToActionMap.remove(_ks);", "-          _ks = oce.value;", "+          ", "+          _keyToDataMap.put(oce.value,data);", "+          data.setKeyStroke(oce.value);", "+          _updateMenuItem(data);", "+          ", "+          //Check associated shift-version's binding", "+          Action shiftAction = (Action) data.getShiftAction();", "+          if (shiftAction != null) {", "+            //_keyToActionMap.remove(addShiftModifier(_ks));", "+            KeyStrokeData shiftKSD = (KeyStrokeData) _actionToDataMap.get(shiftAction);", "+            _keyToDataMap.remove(shiftKSD.getKeyStroke());", "+            shiftKSD.setKeyStroke(addShiftModifier(oce.value));", "+            _keyToDataMap.put(shiftKSD.getKeyStroke(), shiftKSD);", "+            //mapInsert(addShiftModifier(oce.value), shiftAction);", "+          }", "+          ", "+          _ks = oce.value;          ", "+        else if (_ks != oce.value)", "+          DrJava.CONFIG.setSetting(oce.option, _ks);", "+   ", "+    ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58535a8618689d0cc504b2a082e42862", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected void _insertErrors(DefaultStyledDocument doc) throws BadLocationException", "signatureAfterChange": "     protected void _insertErrors(DefaultStyledDocument doc) throws BadLocationException", "diff": ["-      // Show errors", "+      ", "+      //Added this counter in order to add errors and warnings in correct order and select them correctly", "+      //Previous version used errorNum as a counter, but this doesn't work anymore because we are not doing", "+      //errors and variables at the same time.", "+      int errorPositionInListOfErrors = 0;", "+      // Show errors first and warnings second", "+      ", "+      String errorTitle = _getErrorTitle();", "+      if (cem.getNumWarnings() > 0)   ", "+        doc.insertString(doc.getLength(), errorTitle, BOLD_ATTRIBUTES);", "+      ", "-        _insertErrorText(err, doc);", "-        ", "-        Position pos = doc.createPosition(startPos);", "-        _errorListPositions[errorNum] = pos;", "-        _errorTable.put(pos, err);", "+        if (!err.isWarning()){", "+          _insertErrorText(err, doc);", "+          Position pos = doc.createPosition(startPos);", "+          _errorListPositions[errorPositionInListOfErrors] = pos;", "+          _errorTable.put(pos, err);", "+          errorPositionInListOfErrors++;", "+        }", "+      ", "+      String warningTitle = _getWarningTitle();", "+      if (cem.getNumCompErrors() > 0)   ", "+        doc.insertString(doc.getLength(), warningTitle, BOLD_ATTRIBUTES);", "+      ", "+      for (int errorNum = 0; errorNum < numErrors; errorNum++) {", "+        int startPos = doc.getLength();", "+        CompilerError err = cem.getError(errorNum);", "+        ", "+        if (err.isWarning()){", "+          _insertErrorText(err, doc);", "+          Position pos = doc.createPosition(startPos);", "+          _errorListPositions[errorPositionInListOfErrors] = pos;", "+          _errorTable.put(pos, err);", "+          errorPositionInListOfErrors++;", "+        }", "+      }      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9c3c6e804559ce8624ffd1256324a1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "facb31d52d0108009578d6a1708ac1dfc68b98b8", "commitAfterChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void _updateWithErrors() throws BadLocationException", "signatureAfterChange": "     private void _updateWithErrors() throws BadLocationException", "diff": ["-      JUnitError[] errors = errorModel.getErrors();", "-", "-      if (errors.length > 0) {", "+      JUnitError[] errorsWithPositions = errorModel.getErrorsWithPositions();", "+      JUnitError[] errorsWithoutPositions = errorModel.getErrorsWithoutPositions();", "+      ", "+      if ((errorsWithoutPositions.length > 0) ||", "+            (errorsWithPositions.length > 0)) {", "+        ", "+        // Show errors without source locations", "+        for (int j = 0; j < errorsWithoutPositions.length; j++, errorNum++) {", "+          int startPos = doc.getLength();", "+          ", "+          doc.insertString(doc.getLength(), \"================\\n\", NORMAL_ATTRIBUTES);", "+          ", "+          doc.insertString(doc.getLength(), \"File: \", BOLD_ATTRIBUTES);", "+          doc.insertString(doc.getLength(), filename + \"\\n\", NORMAL_ATTRIBUTES);", "-        // Show errors", "-        for (int j = 0; j < errors.length; j++, errorNum++) {", "+          _insertErrorText(errorsWithoutPositions, j, doc);", "+          ", "+          // Note to user that there is no source info for this error", "+          doc.insertString(doc.getLength(),", "+                           \" (no source location)\",", "+                           NORMAL_ATTRIBUTES);", "+          doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "+          ", "+          Position pos = doc.createPosition(startPos);", "+          _errorListPositions[errorNum] = pos;", "+          _errorTable.put(pos, errorsWithoutPositions[j]);", "+        }", "+        ", "+        ", "+        // Show errors with source locations", "+        for (int j = 0; j < errorsWithPositions.length; j++, errorNum++) {", "+          //WARNING: the height of the highlight box in JUnitError panel is dependent on the ", "+          // presence of this extra line. If removed, code must be changed in order to account for its", "+          // absence.", "+          doc.insertString(doc.getLength(), \"================\\n\", NORMAL_ATTRIBUTES);", "+          ", "-          _insertErrorText(errors, j, doc);", "+          _insertErrorText(errorsWithPositions, j, doc);", "-          _errorTable.put(pos, errors[j]);", "+          _errorTable.put(pos, errorsWithPositions[j]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1811a4947333e1f0234169c5284cea3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void testEnded(String name, boolean wasSuccessful, boolean causedError)", "signatureAfterChange": "     public synchronized void testEnded(String name, boolean wasSuccessful, boolean causedError)", "diff": ["-    public void testEnded(String name, boolean wasSuccessful, boolean causedError) {", "-//      Document doc = getDocument();", "-//      String status = \"ok\";", "-//      if (!wasSuccessful) {", "-//        status = (causedError) ? \"error\" : \"failed\";", "-//      }", "-//      try {", "-//        doc.insertString(doc.getLength(),", "-//                         \"  [\" + status + \"]\\n\",", "-//                         NORMAL_ATTRIBUTES);", "-//      }", "-//      catch (BadLocationException ble) {", "-//        // Inserting at end, shouldn't happen", "-//        throw new UnexpectedException(ble);", "-//      }", "+    public synchronized void testEnded(String name, boolean wasSuccessful, boolean causedError) {", "+      String testName = _getTestFromName(name);", "+      String fullName = _getClassFromName(name) + \".\" + testName;", "+      if (fullName.equals(JUNIT_WARNING)) {", "+        return;", "+      }", "+      Document doc = getDocument();", "+      Position namePos = _runningTestNamePositions.get(fullName);", "+      AttributeSet set;", "+      if (!wasSuccessful || causedError) {", "+        set = TEST_FAIL_ATTRIBUTES;", "+      }", "+      else {", "+        set = TEST_PASS_ATTRIBUTES;", "+      }", "+      if (namePos != null) {", "+        int index = namePos.getOffset();", "+        int length = testName.length();", "+        if (doc instanceof StyledDocument) {", "+          ((StyledDocument)doc).setCharacterAttributes(index, length, set, false);", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "face165e5107216463a9f396b214060b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "e97d669e5368c283be3ec2a94ca1c792daab5138", "commitAfterChange": "d75bb4144501a8419376e0dc8dbe054c7511983f", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 305, "signatureBeforeChange": "     public File getSourceRoot() throws InvalidPackageException", "signatureAfterChange": "     public File getSourceRoot() throws InvalidPackageException", "diff": ["-    public File getSourceRoot() throws InvalidPackageException { return _getSourceRoot(_packageName); }", "+    public File getSourceRoot() throws InvalidPackageException { ", "+      if (isUntitled())", "+        throw new InvalidPackageException(-1, \"Can not get source root for unsaved file. Please save.\");", "+      ", "+      try {", "+        String[] packages = _packageName.split(\"\\\\.\");", "+        if (packages.length == 1 && packages[0].equals(\"\")) {", "+          packages = new String[0]; // split should do this, but it doesn't", "+        }", "+        File dir = getFile().getParentFile();", "+        for (String p : IterUtil.reverse(IterUtil.asIterable(packages))) {", "+          if (dir == null || !dir.getName().equals(p)) {", "+            String m = \"File is in the wrong directory or is declared part of the wrong package.  \" +", "+            \"Directory name \" + ((dir == null) ? \"(root)\" : \"'\" + dir.getName() + \"'\") +", "+            \" does not match package name '\" + p + \"'.\";", "+            throw new InvalidPackageException(-1, m);", "+          }", "+          dir = dir.getParentFile();", "+        }", "+        if (dir == null) {", "+          // should not happen in typical cases -- requires the first package name to match the root's name,", "+          // which is usually not a valid identifier (like \"\" or \"C:\")", "+          throw new InvalidPackageException(-1, \"File is in a directory tree with a null root\");", "+        }", "+        return dir;", "+      }", "+      catch (FileMovedException fme) {", "+        throw new", "+          InvalidPackageException(-1, \"File has been moved or deleted from its previous location. Please save.\");", "+      }", "+    }"]}], "num": 6036}
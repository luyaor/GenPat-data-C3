{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea0d304d54ee4f5e423388975ccd99a9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18f6a9bd34ccc5ae8ffd3c5baefe5c99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public Object visit(SuperMethodCall node)", "signatureAfterChange": "   public Node visit(SuperMethodCall node)", "diff": ["+   */", "+  public Node visit(SuperMethodCall node) {", "+    // Check the arguments", "+    List<Expression> args = node.getArguments();", "+    if (args != null) {", "+      visitExprList(args);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(SuperMethodCall node) {", "-\t// Check the arguments", "-\tList args = node.getArguments();", "-\tif (args != null) {", "-\t    visitList(args);", "-\t}", "-\treturn null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "463a405f1a4dd771b37d837c9ad7304d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public Object visit(SimpleAllocation node)", "signatureAfterChange": "   public Node visit(SimpleAllocation node)", "diff": ["+   */", "+  public Node visit(SimpleAllocation node) {", "+    // Visit the arguments", "+    List<Expression> args = node.getArguments();", "+    ", "+    if (args != null) {", "+      visitExprList(args);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(SimpleAllocation node) {", "-        // Visit the arguments", "-        List args = node.getArguments();", "-", "-        if (args != null) {", "-            visitList(args);", "-\t}", "-        return null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60c2737caca47b527dda9c793f08194d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Node visit(ObjectMethodCall node)", "diff": ["+   */", "+  public Node visit(ObjectMethodCall node) {", "+    // Check the arguments", "+    List<Expression> args = node.getArguments();", "+    if (args != null) {", "+      visitExprList(args);", "+    }", "+    ", "+    // Check the expression", "+    Expression exp = node.getExpression();", "+    Object o;", "+    if (exp == null) {", "+      o = context.getDefaultQualifier(node);", "+    } else {", "+      o = exp.acceptVisitor(this);", "+      if (o == null) {", "+      }", "+    ", "+    if (o == null) {", "+      return new FunctionCall(node.getMethodName(),", "+                              node.getArguments(),", "+                              node.getFilename(),", "+                              node.getBeginLine(),", "+                              node.getBeginColumn(),", "+                              node.getEndLine(),", "+                              node.getEndColumn()", "+    );", "+    } else if (o instanceof ReferenceType) {", "+      return new StaticMethodCall((ReferenceType)o,", "+                                  node.getMethodName(),", "+                                  node.getArguments(),", "+                                  node.getFilename(),", "+                                  node.getBeginLine(),", "+                                  node.getBeginColumn(),", "+                                  node.getEndLine(),", "+                                  node.getEndColumn()", "+    );", "+    } else {", "+      node.setExpression((Expression)o);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(ObjectMethodCall node) {", "-\t// Check the arguments", "-\tList args = node.getArguments();", "-\tif (args != null) {", "-\t    visitList(args);", "-\t}", "-", "-\t// Check the expression", "-\tExpression exp = node.getExpression();", "-\tObject o;", "-\tif (exp == null) {", "-\t    o = context.getDefaultQualifier(node);", "-\t} else {", "-\t    o = exp.acceptVisitor(this);", "-\t    if (o == null) {", "-\t\treturn null;", "-\t    }", "-\t}", "-", "-\tif (o == null) {", "-\t    return new FunctionCall(node.getMethodName(),", "-\t\t\t\t    node.getArguments(),", "-\t\t\t\t    node.getFilename(),", "-\t\t\t\t    node.getBeginLine(),", "-\t\t\t\t    node.getBeginColumn(),", "-\t\t\t\t    node.getEndLine(),", "-\t\t\t\t    node.getEndColumn());", "-        } else if (o instanceof ReferenceType) {", "-\t    return new StaticMethodCall((ReferenceType)o,", "-\t\t\t\t\tnode.getMethodName(),", "-\t\t\t\t\tnode.getArguments(),", "-\t\t\t\t\tnode.getFilename(),", "-\t\t\t\t\tnode.getBeginLine(),", "-\t\t\t\t\tnode.getBeginColumn(),", "-\t\t\t\t\tnode.getEndLine(),", "-\t\t\t\t\tnode.getEndColumn());", "-\t} else {", "-\t    node.setExpression((Expression)o);", "-\t}", "-\treturn null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7b3a8f01efffa6d89dd9ec5cd9c6a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": "     public Object visit(InnerClassAllocation node)", "signatureAfterChange": "   public Node visit(InnerClassAllocation node)", "diff": ["+   */", "+  public Node visit(InnerClassAllocation node) {", "+    visitExpressionContainer(node);", "+    List<Expression> largs = node.getArguments();", "+    if (largs != null) {", "+      visitExprList(largs);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(InnerClassAllocation node) {", "-\tvisitExpressionContainer(node);", "-\tList largs = node.getArguments();", "-\tif (largs != null) {", "-\t    visitList(largs);", "-\t}", "-\treturn null;", "-    }"]}], "num": 23739}
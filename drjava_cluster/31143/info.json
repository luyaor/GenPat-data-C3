{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "157215cff1e052c56b6fa1048e0b491e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7665908c7c3b9a3af006c08d0dac3945", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public Void forClassImportStatementOnly(ClassImportStatement that)", "signatureAfterChange": "   public Void forClassImportStatementOnly(ClassImportStatement that)", "diff": ["-    for (int i = 0; i<_importedFiles.size(); i++) {", "+    for (int i = 0; i < _importedFiles.size(); i++) {", "-      int indexOfLastDot = name.lastIndexOf(\".\");", "+      int indexOfLastDot = name.lastIndexOf('.');", "-    for (int i = 1; i < words.length; i++) {nameBuff.append(\".\" + words[i].getText());}", "+    for (int i = 1; i < words.length; i++) {nameBuff.append('.' + words[i].getText());}", "-    // Make sure that this imported class does not duplicate the package.  WHY? FIX THIS.", "-    // Although this is allowed in full java, we decided to not allow it at any LanguageLevel.", "-    int indexOfLastDot = qualifiedTypeName.lastIndexOf(\".\");", "-    if (indexOfLastDot != -1) {", "-      if (_package.equals(qualifiedTypeName.substring(0, indexOfLastDot))) {", "-        _addAndIgnoreError(\"You do not need to import \" + qualifiedTypeName ", "-                             + \".  It is in your package so it is already visible\", ", "-                           that);", "-        return null;", "-      }", "-    }", "+//    // Make sure that this imported class does not duplicate the package.  WHY? FIX THIS.", "+//    // Although this is allowed in full java, we decided to not allow it at any LanguageLevel.", "+//    int indexOfLastDot = qualifiedTypeName.lastIndexOf('.');", "+//    if (indexOfLastDot != -1) {", "+//      if (_package.equals(qualifiedTypeName.substring(0, indexOfLastDot))) {", "+//        _addAndIgnoreError(\"You do not need to import \" + qualifiedTypeName ", "+//                             + \".  It is in your package so it is already visible\", ", "+//                           that);", "+//        return null;", "+//      }", "+//    }", "-    // Create a continuation for imported class (named temp) if one does not already exist", "+    // Create a continuation for imported class if one does not already exist", "+    createImportedSymbolContinuation(qualifiedTypeName, that.getSourceInfo());", "+    return forImportStatementOnly(that);", "+  }", "-      sd = addSymbolData(that.getSourceInfo(), qualifiedTypeName);", "-    return forImportStatementOnly(that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0200c58c91435c94708a232ded6535", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractDJPane.java", "commitBeforeChange": "74df86fd67328f41836d5f23da76b724b0648a22", "commitAfterChange": "debcaa5c7896b7af34301718bd146b407947838f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected void _updateMatchHighlight()", "signatureAfterChange": "      protected abstract void _updateMatchHighlight();", "diff": ["-   */", "-  protected void _updateMatchHighlight() {", "-    int to = getCaretPosition();", "-    int from = getDJDocument().balanceBackward(); //_doc()._reduced.balanceBackward();", "-    if (from > -1) {", "-      // Found a matching open brace to this close brace", "-      from = to - from;", "-      _addHighlight(from, to);", "-      //      Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "-    }", "-    // if this wasn't a close brace, check for an open brace", "-    else {", "-      // (getCaretPosition will be the start of the highlight)", "-      from = to;", "-", "-      to = getDJDocument().balanceForward();", "-      if (to > -1) {", "-        to = to + from;", "-        _addHighlight(from - 1, to);", "-//        Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "-      }", "-    }", "-  }", "+  ", "+  protected abstract void _updateMatchHighlight();"]}], "num": 31143}
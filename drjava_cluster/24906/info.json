{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0ea0e70373c62df7a426246e6c7c983", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9f87e65a2784a297ad05cd45b5af8bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "591ec87995880046281596623701cb5a561fc66e", "commitAfterChange": "ce73fdb27a8e7aa886580e240ca54bfd98e64031", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   private void insert(Node<T> point, T item)", "signatureAfterChange": "   private void insert(Node<T> point, T item)", "diff": ["-   */", "+  /** Insert an item before a certain node in the list.  Can never be called on head node. */", "-    Node<T> ins = new Node<T>(item, point.pred, point);", "-    point.pred.succ = ins;", "-    point.pred = ins;", "+    Node<T> before = point.pred;", "+    Node<T> newNode = new Node<T>(item, before, point);", "+    before.succ = newNode;", "+    point.pred = newNode;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb655fa88ad7bdd5b1414280731c8c96", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "4cf68dc70458288095c944d37276893b11daf353", "commitAfterChange": "c22ae4a2b42306ce89775aaf2a5b300676337b0d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void insert(Node<T> point, T item)", "signatureAfterChange": "   private Node<T> insert(Node<T> point, T item)", "diff": ["-  /** Insert an item before a certain node in the list.  Can never be called on head node. */", "-  private void insert(Node<T> point, T item) {", "-    Node<T> before = point.pred;", "-    Node<T> newNode = new Node<T>(item, before, point);", "-    before.succ = newNode;", "-    point.pred = newNode;", "+  /** Insert a node immediately before the specified point. Returns the inserted node. Assumes point is not head. */", "+  private Node<T> insert(Node<T> point, T item) {", "+    assert point != _head;", "+    Node<T> newNode = point.insert(item);", "+    return newNode;"]}], "num": 24906}
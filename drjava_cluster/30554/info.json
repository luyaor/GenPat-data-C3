{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c05f5d3276e63d81a1a062888f2bc9fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f1f068d2f093f412d423af3eda5091f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/MethodContext.java", "commitBeforeChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "commitAfterChange": "798fcd5fdec1efc6698cb1c49cd62bdab41daffc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Class setProperties(ClassAllocation node, Class c, Class[] args, List<Node> memb)", "signatureAfterChange": "   public Class setProperties(ClassAllocation node, Class c, Class[] args, List<Node> memb)", "diff": ["-    params.add(new FormalParameter(false, otype, \"param$0\", false));", "+    params.add(new FormalParameter(false, otype, \"param$0\"));", "-    params.add(new FormalParameter(false, MAP_TYPE, \"param$1\", false));", "+    params.add(new FormalParameter(false, MAP_TYPE, \"param$1\"));", "-                                     \"param$\" + (i + 2), false));", "+                                     \"param$\" + (i + 2)));", "-                                     stmts);", "+                                     stmts, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d5ae98a458e3582f07c6bad87dae26a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public Void forClassDefDoFirst(ClassDef that)", "signatureAfterChange": "   public Void forClassDefDoFirst(ClassDef that)", "diff": ["-      if (s.endsWith(name) && ! s.equals(getQualifiedClassName(name))) {", "+      if (s.endsWith(name) && ! s.equals(getQualifiedClassName(name))) {  // TODO: this test is too coarse!", "-      getSymbolData(\"java.lang.\" + that.getName().getText(), that.getSourceInfo(), true, false, false, false);", "+       getQualifiedSymbolData(\"java.lang.\" + that.getName().getText(), that.getSourceInfo(), false, false, false);", "+//    identifyInnerClasses(that);"]}], "num": 30554}
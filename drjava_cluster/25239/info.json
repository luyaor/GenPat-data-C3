{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c45702815d7f6000129e4ebdc9103379", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31b086e0a22ad098a0800b193e0a2ea4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args,                                                  final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args,                                                  final Option<Type> expected, final Access.Module accessModule)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-                                                 final Option<Type> expected)", "+                                                 final Option<Type> expected, final Access.Module accessModule)", "-      ", "-    Iterable<FunctionInvocationCandidate<DJConstructor>> cs = bestInvocations(constructors, typeArgs, args, expected);", "+    ", "+    Iterable<DJConstructor> accessible = IterUtil.filter(constructors, new Predicate<DJConstructor>() {", "+      public boolean contains(DJConstructor k) { return accessible(k, accessModule); }", "+    });", "+    Iterable<FunctionInvocationCandidate<DJConstructor>> cs = bestInvocations(accessible, typeArgs, args, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9a99fe2b4a6c6f6a264eeefc2f240a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "12384109e03448701c98d404f37be617f6e32fee", "commitAfterChange": "7b8e61b54c444deec40202441181317a86727c3a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public static boolean promptForToolsJar(boolean needCompiler,                                           boolean needDebugger)", "signatureAfterChange": "   public static boolean promptForToolsJar(boolean needCompiler,                                           boolean needDebugger)", "diff": ["-    int result = JOptionPane.showConfirmDialog(null,", "-                                               text,", "-                                               \"Locate 'tools.jar'?\",", "+    int result = JOptionPane.showConfirmDialog(null, text, \"Locate 'tools.jar'?\",", "-      // TO DO: add a file filter", "+      chooser.setFileFilter(new ClasspathFilter() {", "+        public boolean accept(File f) {", "+          String ext = getExtension(f);", "+          return ext != null && ext.equals(\"jar\");", "+        }", "+        public String getName() {", "+          return \"Jar files\";", "+        }", "+      });"]}], "num": 25239}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4bc6c7dcb70e007f1372d969587788f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34ac4393212f686c741120b8c7894551", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public static Predicate2<Thread, StackTraceElement> blackListLocationFilter(final String... prefixes)", "signatureAfterChange": "   public static Runnable logExceptions(Log l, Runnable r)", "diff": ["-   */", "-  public static Predicate2<Thread, StackTraceElement> blackListLocationFilter(final String... prefixes) {", "-    return new Predicate2<Thread, StackTraceElement>() {", "-      public boolean contains(Thread thread, StackTraceElement location) {", "-        String caller = location.getClassName() + \".\" + location.getMethodName();", "-        for (String pre : prefixes) {", "-          if (caller.startsWith(pre)) { return false; }", "-        return true;", "-      }", "-    };", "-  }", "+  /** Wrap a Runnable in a try-catch block that logs all caught {@code RuntimeException}s. */", "+  public static Runnable logExceptions(Log l, Runnable r) {", "+    return new LogExceptionRunnable(l, r);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7118815800616acbb7b71f73348509", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public static Predicate2<Thread, StackTraceElement> whiteListLocationFilter(final String... prefixes)", "signatureAfterChange": "     public void run()", "diff": ["-   */", "-  public static Predicate2<Thread, StackTraceElement> whiteListLocationFilter(final String... prefixes) {", "-    return new Predicate2<Thread, StackTraceElement>() {", "-      public boolean contains(Thread thread, StackTraceElement location) {", "-        String caller = location.getClassName() + \".\" + location.getMethodName();", "-        for (String pre : prefixes) {", "-          if (caller.startsWith(pre)) { return true; }", "-        return false;", "-      }", "-    };", "-  }", "+    public LogThrowableRunnable(Log log, Runnable r) { _log = log; _r = r; }", "+    public void run() {", "+      try { _r.run(); }", "+      catch (Throwable t) { _log.log(t); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f96b465213c54b9b2e593f76da528e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public static Predicate2<Thread, StackTraceElement> whiteListThreadFilter(final Thread... threads)", "signatureAfterChange": "     public void run(T1 arg1, T2 arg2, T3 arg3, T4 arg4)", "diff": ["-   */", "-  public static Predicate2<Thread, StackTraceElement> whiteListThreadFilter(final Thread... threads) {", "-    return new Predicate2<Thread, StackTraceElement>() {", "-      public boolean contains(Thread thread, StackTraceElement location) {", "-        for (Thread t : threads) {", "-          if (thread.equals(t)) { return true; }", "-        return false;", "-    };", "+    }", "+    public void run(T1 arg1, T2 arg2, T3 arg3, T4 arg4) {", "+      try { _r.run(arg1, arg2, arg3, arg4); }", "+      catch (Throwable t) { _log.log(t); }", "+    }"]}], "num": 17149}
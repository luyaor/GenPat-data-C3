{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f0500cd9b281bd2aa4c9b8f0660be33", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d3d62d87806ec84572320427f96bcb6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r   \r   private JPanel makeCommandPane()", "signatureAfterChange": "      private JPanel makeCommandPane()", "diff": ["-  \r", "-  private JPanel makeCommandPane() {\r", "-    JPanel panel = new JPanel(new BorderLayout());\r", "-    GridBagLayout gridbag = new GridBagLayout();\r", "-    JPanel main = new JPanel(gridbag);\r", "-    GridBagConstraints c = new GridBagConstraints();\r", "-    main.setLayout(gridbag);\r", "-    c.fill = GridBagConstraints.BOTH;\r", "-    Insets labelInsets = new Insets(5, 10, 0, 0);\r", "-    Insets compInsets  = new Insets(5, 5, 0, 10);\r", "-    \r", "-    c.weightx = 0.0;\r", "-    c.weighty = 0.0;\r", "-    c.insets = labelInsets;\r", "-    JLabel commandLineLabel = new JLabel(\"Command line:\");\r", "-    gridbag.setConstraints(commandLineLabel, c);\r", "-    main.add(commandLineLabel);\r", "-    \r", "-    c.weightx = 1.0;\r", "-    c.weighty = 32.0;\r", "-    c.gridwidth = GridBagConstraints.REMAINDER;\r", "-    c.insets = compInsets;\r", "-    \r", "-    _commandLine = new JTextPane();\r", "-    // do not allow a newline\r", "-    _commandLine.addKeyListener(new KeyListener() {\r", "-      public void keyPressed(KeyEvent e) {\r", "-        if (e.getKeyCode() == KeyEvent.VK_ENTER) {\r", "-          e.consume();\r", "-        }\r", "-        else if (e.getKeyCode() == KeyEvent.VK_TAB) {\r", "-          e.consume();\r", "-          if (e.isShiftDown()) {\r", "-            _insertCommandButton.setEnabled(false);\r", "-            _cancelCommandButton.requestFocus();\r", "-          }\r", "-          else {\r", "-            _commandWorkDirLine.requestFocus();\r", "-          }\r", "-        }\r", "-      }\r", "-      public void  keyReleased(KeyEvent e) { }\r", "-      public void  keyTyped(KeyEvent e) { }\r", "-    });\r", "-    JScrollPane commandLineSP = new JScrollPane(_commandLine);\r", "-    commandLineSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\r", "-    gridbag.setConstraints(commandLineSP, c);\r", "-    main.add(commandLineSP);\r", "-    \r", "-    c.weightx = 0.0;\r", "-    c.weighty = 0.0;\r", "-    c.gridwidth = 1;\r", "-    c.insets = labelInsets;\r", "-    _commandLinePreviewLabel = new JLabel(\"<html>Command line preview:<br>(0 characters)</html>\");\r", "-    _commandLinePreviewLabel.setToolTipText(STALE_TOOLTIP);\r", "-    gridbag.setConstraints(_commandLinePreviewLabel, c);\r", "-    main.add(_commandLinePreviewLabel);\r", "-    \r", "-    c.weightx = 1.0;\r", "-    c.weighty = 32.0;\r", "-    c.gridwidth = GridBagConstraints.REMAINDER;\r", "-    c.insets = compInsets;\r", "-    \r", "-    _commandLinePreview = new JTextPane();\r", "-    _commandLinePreview.setToolTipText(STALE_TOOLTIP);\r", "-    _commandLineDoc = (StyledDocument)_commandLinePreview.getDocument();\r", "-    \r", "-    // Create a style object and then set the style attributes\r", "-    _varCommandLineCmdStyle = new SimpleAttributeSet();\r", "-    StyleConstants.setBackground(_varCommandLineCmdStyle, DrJava.getConfig().getSetting(DEFINITIONS_MATCH_COLOR));\r", "-    \r", "-    _commandLineCmdAS = new SimpleAttributeSet();\r", "-    StyleConstants.setForeground(_commandLineCmdAS, DrJava.getConfig().getSetting(DEFINITIONS_NORMAL_COLOR));\r", "-    _varCommandLineCmdStyle = new SimpleAttributeSet();\r", "-    StyleConstants.setBackground(_varCommandLineCmdStyle, DrJava.getConfig().getSetting(DEFINITIONS_MATCH_COLOR));\r", "-    _varErrorCommandLineCmdStyle = new SimpleAttributeSet();\r", "-    StyleConstants.setBackground(_varErrorCommandLineCmdStyle, DrJava.getConfig().getSetting(DEBUG_BREAKPOINT_COLOR));\r", "-    _varCommandLineCmdStyle = new SimpleAttributeSet();\r", "-    StyleConstants.setBackground(_varCommandLineCmdStyle, DrJava.getConfig().getSetting(DEFINITIONS_MATCH_COLOR));\r", "-    \r", "-    _commandLinePreview.setEditable(false);\r", "-    _commandLinePreview.setBackground(Color.LIGHT_GRAY);\r", "-    _commandLinePreview.setSelectedTextColor(Color.LIGHT_GRAY);\r", "-    JScrollPane commandLinePreviewSP = new JScrollPane(_commandLinePreview);\r", "-    commandLinePreviewSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\r", "-    gridbag.setConstraints(commandLinePreviewSP, c);\r", "-    main.add(commandLinePreviewSP);\r", "-\r", "-    // work directory\r", "-    c.weightx = 0.0;\r", "-    c.weighty = 0.0;\r", "-    c.gridwidth = 1;\r", "-    c.insets = labelInsets;\r", "-    JLabel workDirLabel = new JLabel(\"Work directory:\");\r", "-    gridbag.setConstraints(workDirLabel, c);\r", "-    main.add(workDirLabel);\r", "-    \r", "-    c.weightx = 1.0;\r", "-    c.weighty = 8.0;\r", "-    c.gridwidth = GridBagConstraints.RELATIVE;\r", "-    c.insets = compInsets;\r", "-    \r", "-    _commandWorkDirLine = new JTextPane();\r", "-    // do not allow a newline\r", "-    _commandWorkDirLine.addKeyListener(new KeyListener() {\r", "-      public void keyPressed(KeyEvent e) {\r", "-        if (e.getKeyCode() == KeyEvent.VK_ENTER) {\r", "-          e.consume();\r", "-        }\r", "-        else if (e.getKeyCode() == KeyEvent.VK_TAB) {\r", "-          e.consume();\r", "-          if (e.isShiftDown()) {\r", "-            _commandLine.requestFocus();\r", "-          }\r", "-          else {\r", "-            _commandEnclosingFileLine.requestFocus();\r", "-          }\r", "-        }\r", "-      }\r", "-      public void  keyReleased(KeyEvent e) { }\r", "-      public void  keyTyped(KeyEvent e) { }\r", "-    });\r", "-    JScrollPane commandWorkDirLineSP = new JScrollPane(_commandWorkDirLine);\r", "-    commandWorkDirLineSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\r", "-    gridbag.setConstraints(commandWorkDirLineSP, c);\r", "-    main.add(commandWorkDirLineSP);\r", "-    \r", "-    c.weightx = 0.0;\r", "-    c.weighty = 0.0;\r", "-    c.gridwidth = GridBagConstraints.REMAINDER;\r", "-    c.insets = compInsets;\r", "-    \r", "-    _commandWorkDirBtn = new JButton(\"...\");\r", "-    _commandWorkDirBtn.addActionListener(new ActionListener() {\r", "-      public void actionPerformed(ActionEvent e) { chooseFile(_commandWorkDirLine); }\r", "-    });\r", "-    gridbag.setConstraints(_commandWorkDirBtn, c);\r", "-    main.add(_commandWorkDirBtn);\r", "-    \r", "-    c.weightx = 0.0;\r", "-    c.weighty = 0.0;\r", "-    c.gridwidth = 1;\r", "-    c.insets = labelInsets;\r", "-    JLabel commandWorkDirLinePreviewLabel = new JLabel(\"Work directory preview:\");\r", "-    commandWorkDirLinePreviewLabel.setToolTipText(STALE_TOOLTIP);\r", "-    gridbag.setConstraints(commandWorkDirLinePreviewLabel, c);\r", "-    main.add(commandWorkDirLinePreviewLabel);\r", "-    \r", "-    c.weightx = 1.0;\r", "-    c.weighty = 8.0;\r", "-    c.gridwidth = GridBagConstraints.REMAINDER;\r", "-    c.insets = compInsets;\r", "-    \r", "-    _commandWorkDirLinePreview = new JTextPane();\r", "-    _commandWorkDirLinePreview.setToolTipText(STALE_TOOLTIP);\r", "-    _commandWorkDirLineDoc = (StyledDocument)_commandWorkDirLinePreview.getDocument();\r", "-    \r", "-    _commandWorkDirLinePreview.setEditable(false);\r", "-    _commandWorkDirLinePreview.setBackground(Color.LIGHT_GRAY);\r", "-    _commandWorkDirLinePreview.setSelectedTextColor(Color.LIGHT_GRAY);\r", "-    JScrollPane commandWorkDirLinePreviewSP = new JScrollPane(_commandWorkDirLinePreview);\r", "-    commandWorkDirLinePreviewSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\r", "-    gridbag.setConstraints(commandWorkDirLinePreviewSP, c);\r", "-    main.add(commandWorkDirLinePreviewSP);\r", "-\r", "-    // enclosing .djapp file\r", "-    c.weightx = 0.0;\r", "-    c.weighty = 0.0;\r", "-    c.gridwidth = 1;\r", "-    c.insets = labelInsets;\r", "-    JLabel enclosingFileLabel = new JLabel(\"Enclosing .djapp file:\");\r", "-    gridbag.setConstraints(enclosingFileLabel, c);\r", "-    main.add(enclosingFileLabel);\r", "-    \r", "-    c.weightx = 1.0;\r", "-    c.weighty = 8.0;\r", "-    c.gridwidth = GridBagConstraints.RELATIVE;\r", "-    c.insets = compInsets;\r", "-    \r", "-    _commandEnclosingFileLine = new JTextPane();\r", "-    // do not allow a newline\r", "-    _commandEnclosingFileLine.addKeyListener(new KeyListener() {\r", "-      public void keyPressed(KeyEvent e) {\r", "-        if (e.getKeyCode() == KeyEvent.VK_ENTER) {\r", "-          e.consume();\r", "-        }\r", "-        else if (e.getKeyCode() == KeyEvent.VK_TAB) {\r", "-          e.consume();\r", "-          if (e.isShiftDown()) {\r", "-            _commandWorkDirLine.requestFocus();\r", "-          }\r", "-          else {\r", "-            _insertCommandButton.setEnabled(false);\r", "-            if (_editMode) {\r", "-              _saveCommandButton.requestFocus();\r", "-            }\r", "-            else {\r", "-              _runCommandButton.requestFocus();\r", "-            }\r", "-          }\r", "-        }\r", "-      }\r", "-      public void  keyReleased(KeyEvent e) { }\r", "-      public void  keyTyped(KeyEvent e) { }\r", "-    });\r", "-    JScrollPane commandEnclosingFileLineSP = new JScrollPane(_commandEnclosingFileLine);\r", "-    commandEnclosingFileLineSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\r", "-    gridbag.setConstraints(commandEnclosingFileLineSP, c);\r", "-    main.add(commandEnclosingFileLineSP);\r", "-    \r", "-    c.weightx = 0.0;\r", "-    c.weighty = 0.0;\r", "-    c.gridwidth = GridBagConstraints.REMAINDER;\r", "-    c.insets = compInsets;\r", "-    \r", "-    _commandEnclosingFileBtn = new JButton(\"...\");\r", "-    _commandEnclosingFileBtn.addActionListener(new ActionListener() {\r", "-      public void actionPerformed(ActionEvent e) { chooseFile(_commandEnclosingFileLine); }\r", "-    });\r", "-    gridbag.setConstraints(_commandEnclosingFileBtn, c);\r", "-    main.add(_commandEnclosingFileBtn);\r", "-    \r", "-    c.weightx = 0.0;\r", "-    c.weighty = 0.0;\r", "-    c.gridwidth = 1;\r", "-    c.insets = labelInsets;\r", "-    JLabel commandEnclosingFileLinePreviewLabel = new JLabel(\"Enclosing .djapp file preview:\");\r", "-    commandEnclosingFileLinePreviewLabel.setToolTipText(STALE_TOOLTIP);\r", "-    gridbag.setConstraints(commandEnclosingFileLinePreviewLabel, c);\r", "-    main.add(commandEnclosingFileLinePreviewLabel);\r", "-    \r", "-    c.weightx = 1.0;\r", "-    c.weighty = 8.0;\r", "-    c.gridwidth = GridBagConstraints.REMAINDER;\r", "-    c.insets = compInsets;\r", "-    \r", "-    _commandEnclosingFileLinePreview = new JTextPane();\r", "-    _commandEnclosingFileLinePreview.setToolTipText(STALE_TOOLTIP);\r", "-    _commandEnclosingFileLineDoc = (StyledDocument)_commandEnclosingFileLinePreview.getDocument();\r", "-    \r", "-    _commandEnclosingFileLinePreview.setEditable(false);\r", "-    _commandEnclosingFileLinePreview.setBackground(Color.LIGHT_GRAY);\r", "-    _commandEnclosingFileLinePreview.setSelectedTextColor(Color.LIGHT_GRAY);\r", "-    JScrollPane commandEnclosingFileLinePreviewSP = new JScrollPane(_commandEnclosingFileLinePreview);\r", "-    commandEnclosingFileLinePreviewSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\r", "-    gridbag.setConstraints(commandEnclosingFileLinePreviewSP, c);\r", "-    main.add(commandEnclosingFileLinePreviewSP);\r", "-    \r", "-    // bottom panel\r", "-    panel.add(main, BorderLayout.CENTER);\r", "-    JPanel bottom = new JPanel();\r", "-    bottom.setBorder(new EmptyBorder(5, 5, 5, 5));\r", "-    bottom.setLayout(new BoxLayout(bottom, BoxLayout.X_AXIS));\r", "-    bottom.add(Box.createHorizontalGlue());\r", "-    if (!_editMode) {\r", "-      bottom.add(_runCommandButton);\r", "-    }\r", "-    bottom.add(_saveCommandButton);\r", "-    bottom.add(_insertCommandButton);\r", "-    bottom.add(_cancelCommandButton);\r", "-    bottom.add(Box.createHorizontalGlue());\r", "-    panel.add(bottom, BorderLayout.SOUTH);\r", "-    \r", "-    // update the preview of the actual command line post substitution\r", "-    _documentListener = new DocumentListener() {\r", "-      public void update(DocumentEvent e) {\r", "-        try {\r", "-          // preview\r", "-          _commandLineDoc.remove(0,_commandLineDoc.getLength());\r", "-          String text = StringOps.replaceVariables(_commandLine.getText(), _props, PropertyMaps.GET_LAZY);\r", "-          _commandLineDoc.insertString(_commandLineDoc.getLength(), StringOps.unescapeFileName(text), null);\r", "-          \r", "-          // command line\r", "-          colorVariables(_commandLine,\r", "-                         _props,\r", "-                         this,\r", "-                         _commandLineCmdAS,\r", "-                         _varCommandLineCmdStyle,\r", "-                         _varErrorCommandLineCmdStyle);\r", "-          _commandLinePreviewLabel.setText(\"<html>Command line preview:<br>(\"+_commandLinePreview.getText().length()+\r", "-                                           \" characters)</html>\");\r", "-        }\r", "-        catch(BadLocationException ble) {\r", "-          _commandLinePreview.setText(\"Error.\");\r", "-        }\r", "-      }\r", "-      public void changedUpdate(DocumentEvent e) { update(e); }\r", "-      public void insertUpdate(DocumentEvent e) { update(e); }\r", "-      public void removeUpdate(DocumentEvent e)  { update(e); }\r", "-    };\r", "-    _commandLine.getDocument().addDocumentListener(_documentListener);\r", "-    _documentListener.changedUpdate(null);\r", "-    \r", "-    // update the preview of the actual work directory post substitution\r", "-    _workDirDocumentListener = new DocumentListener() {\r", "-      public void update(DocumentEvent e) {\r", "-        try {\r", "-          // preview\r", "-          _commandWorkDirLineDoc.remove(0,_commandWorkDirLineDoc.getLength());\r", "-          String text = StringOps.replaceVariables(_commandWorkDirLine.getText(), _props, PropertyMaps.GET_LAZY);\r", "-          _commandWorkDirLineDoc.insertString(0, StringOps.unescapeFileName(text), null);\r", "-          \r", "-          // command line\r", "-          colorVariables(_commandWorkDirLine,\r", "-                         _props,\r", "-                         this,\r", "-                         _commandLineCmdAS,\r", "-                         _varCommandLineCmdStyle,\r", "-                         _varErrorCommandLineCmdStyle);\r", "-        }\r", "-        catch(BadLocationException ble) {\r", "-          _commandLinePreview.setText(\"Error: \"+ble);\r", "-        }\r", "-      }\r", "-      public void changedUpdate(DocumentEvent e) { update(e); }\r", "-      public void insertUpdate(DocumentEvent e) { update(e); }\r", "-      public void removeUpdate(DocumentEvent e)  { update(e); }\r", "-    };\r", "-    _commandWorkDirLine.getDocument().addDocumentListener(_workDirDocumentListener);\r", "-    _commandWorkDirLine.setText(\"${drjava.working.dir}\");\r", "-    _workDirDocumentListener.changedUpdate(null);\r", "-    \r", "-    // update the preview of the actual enclosing .djapp file post substitution\r", "-    _enclosingFileDocumentListener = new DocumentListener() {\r", "-      public void update(DocumentEvent e) {\r", "-        try {\r", "-          // preview\r", "-          _commandEnclosingFileLineDoc.remove(0,_commandEnclosingFileLineDoc.getLength());\r", "-          String text = StringOps.replaceVariables(_commandEnclosingFileLine.getText(), _props, PropertyMaps.GET_LAZY);\r", "-          _commandEnclosingFileLineDoc.insertString(0, StringOps.unescapeFileName(text), null);\r", "-          \r", "-          // command line\r", "-          colorVariables(_commandEnclosingFileLine,\r", "-                         _props,\r", "-                         this,\r", "-                         _commandLineCmdAS,\r", "-                         _varCommandLineCmdStyle,\r", "-                         _varErrorCommandLineCmdStyle);\r", "-        }\r", "-        catch(BadLocationException ble) {\r", "-          _commandLinePreview.setText(\"Error: \"+ble);\r", "-        }\r", "-      }\r", "-      public void changedUpdate(DocumentEvent e) { update(e); }\r", "-      public void insertUpdate(DocumentEvent e) { update(e); }\r", "-      public void removeUpdate(DocumentEvent e)  { update(e); }\r", "-    };\r", "-    _commandEnclosingFileLine.getDocument().addDocumentListener(_enclosingFileDocumentListener);\r", "-    _commandEnclosingFileLine.setText(\"\");\r", "-    _enclosingFileDocumentListener.changedUpdate(null);\r", "-    \r", "-    _lastCommandFocus = _commandLine;\r", "-    // do not allow preview to have focus\r", "-    _commandLine.addFocusListener(new FocusAdapter() {\r", "-      @SuppressWarnings(\"unchecked\")\r", "-      public void focusGained(FocusEvent e) {\r", "-        _lastCommandFocus = (JTextPane)e.getComponent();\r", "-        _insertCommandButton.setEnabled(true);\r", "-      }\r", "-      public void focusLost(FocusEvent e) {\r", "-        if ((e.getOppositeComponent() == _commandLinePreview) || \r", "-            (e.getOppositeComponent() == _commandWorkDirLinePreview)) {\r", "-          _commandLine.requestFocus();\r", "-        }\r", "-      }\r", "-    });\r", "-    _commandWorkDirLine.addFocusListener(new FocusAdapter() {\r", "-      @SuppressWarnings(\"unchecked\")\r", "-      public void focusGained(FocusEvent e) {\r", "-        _lastCommandFocus = (JTextPane)e.getComponent();\r", "-        _insertCommandButton.setEnabled(true);\r", "-      }\r", "-      public void focusLost(FocusEvent e) {\r", "-        if ((e.getOppositeComponent() == _commandLinePreview) || \r", "-            (e.getOppositeComponent() == _commandWorkDirLinePreview)) {\r", "-          _commandWorkDirLine.requestFocus();\r", "-        }\r", "-      }\r", "-    });\r", "-    \r", "-    return panel;\r", "-  }\r", "+  ", "+  private JPanel makeCommandPane() {", "+    JPanel panel = new JPanel(new BorderLayout());", "+    GridBagLayout gridbag = new GridBagLayout();", "+    JPanel main = new JPanel(gridbag);", "+    GridBagConstraints c = new GridBagConstraints();", "+    main.setLayout(gridbag);", "+    c.fill = GridBagConstraints.BOTH;", "+    Insets labelInsets = new Insets(5, 10, 0, 0);", "+    Insets compInsets  = new Insets(5, 5, 0, 10);", "+    ", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.insets = labelInsets;", "+    JLabel commandLineLabel = new JLabel(\"Command line:\");", "+    gridbag.setConstraints(commandLineLabel, c);", "+    main.add(commandLineLabel);", "+    ", "+    c.weightx = 1.0;", "+    c.weighty = 32.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.insets = compInsets;", "+    ", "+    _commandLine = new JTextPane();", "+    // do not allow a newline", "+    _commandLine.addKeyListener(new KeyListener() {", "+      public void keyPressed(KeyEvent e) {", "+        if (e.getKeyCode() == KeyEvent.VK_ENTER) e.consume();", "+        else if (e.getKeyCode() == KeyEvent.VK_TAB) {", "+          e.consume();", "+          if (e.isShiftDown()) {", "+            _insertCommandButton.setEnabled(false);", "+            _cancelCommandButton.requestFocus();", "+          }", "+          else _commandWorkDirLine.requestFocus();", "+        }", "+      }", "+      public void keyReleased(KeyEvent e) { }", "+      public void keyTyped(KeyEvent e) { }", "+    });", "+    JScrollPane commandLineSP = new JScrollPane(_commandLine);", "+    commandLineSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(commandLineSP, c);", "+    main.add(commandLineSP);", "+    ", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = 1;", "+    c.insets = labelInsets;", "+    _commandLinePreviewLabel = new JLabel(\"<html>Command line preview:<br>(0 characters)</html>\");", "+    _commandLinePreviewLabel.setToolTipText(STALE_TOOLTIP);", "+    gridbag.setConstraints(_commandLinePreviewLabel, c);", "+    main.add(_commandLinePreviewLabel);", "+    ", "+    c.weightx = 1.0;", "+    c.weighty = 32.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.insets = compInsets;", "+    ", "+    _commandLinePreview = new JTextPane();", "+    _commandLinePreview.setToolTipText(STALE_TOOLTIP);", "+    _commandLineDoc = (StyledDocument)_commandLinePreview.getDocument();", "+    ", "+    // Create a style object and then set the style attributes", "+    _varCommandLineCmdStyle = new SimpleAttributeSet();", "+    StyleConstants.setBackground(_varCommandLineCmdStyle, DrJava.getConfig().getSetting(DEFINITIONS_MATCH_COLOR));", "+    ", "+    _commandLineCmdAS = new SimpleAttributeSet();", "+    StyleConstants.setForeground(_commandLineCmdAS, DrJava.getConfig().getSetting(DEFINITIONS_NORMAL_COLOR));", "+    _varCommandLineCmdStyle = new SimpleAttributeSet();", "+    StyleConstants.setBackground(_varCommandLineCmdStyle, DrJava.getConfig().getSetting(DEFINITIONS_MATCH_COLOR));", "+    _varErrorCommandLineCmdStyle = new SimpleAttributeSet();", "+    StyleConstants.setBackground(_varErrorCommandLineCmdStyle, DrJava.getConfig().getSetting(DEBUG_BREAKPOINT_COLOR));", "+    _varCommandLineCmdStyle = new SimpleAttributeSet();", "+    StyleConstants.setBackground(_varCommandLineCmdStyle, DrJava.getConfig().getSetting(DEFINITIONS_MATCH_COLOR));", "+    ", "+    _commandLinePreview.setEditable(false);", "+    _commandLinePreview.setBackground(Color.LIGHT_GRAY);", "+    _commandLinePreview.setSelectedTextColor(Color.LIGHT_GRAY);", "+    JScrollPane commandLinePreviewSP = new JScrollPane(_commandLinePreview);", "+    commandLinePreviewSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(commandLinePreviewSP, c);", "+    main.add(commandLinePreviewSP);", "+", "+    // work directory", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = 1;", "+    c.insets = labelInsets;", "+    JLabel workDirLabel = new JLabel(\"Work directory:\");", "+    gridbag.setConstraints(workDirLabel, c);", "+    main.add(workDirLabel);", "+    ", "+    c.weightx = 1.0;", "+    c.weighty = 8.0;", "+    c.gridwidth = GridBagConstraints.RELATIVE;", "+    c.insets = compInsets;", "+    ", "+    _commandWorkDirLine = new JTextPane();", "+    // do not allow a newline", "+    _commandWorkDirLine.addKeyListener(new KeyListener() {", "+      public void keyPressed(KeyEvent e) {", "+        if (e.getKeyCode() == KeyEvent.VK_ENTER) e.consume();", "+        else if (e.getKeyCode() == KeyEvent.VK_TAB) {", "+          e.consume();", "+          if (e.isShiftDown()) {", "+            _commandLine.requestFocus();", "+          }", "+          else _commandEnclosingFileLine.requestFocus();", "+        }", "+      }", "+      public void  keyReleased(KeyEvent e) { }", "+      public void  keyTyped(KeyEvent e) { }", "+    });", "+    JScrollPane commandWorkDirLineSP = new JScrollPane(_commandWorkDirLine);", "+    commandWorkDirLineSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(commandWorkDirLineSP, c);", "+    main.add(commandWorkDirLineSP);", "+    ", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.insets = compInsets;", "+    ", "+    _commandWorkDirBtn = new JButton(\"...\");", "+    _commandWorkDirBtn.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) { chooseFile(_commandWorkDirLine); }", "+    });", "+    gridbag.setConstraints(_commandWorkDirBtn, c);", "+    main.add(_commandWorkDirBtn);", "+    ", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = 1;", "+    c.insets = labelInsets;", "+    JLabel commandWorkDirLinePreviewLabel = new JLabel(\"Work directory preview:\");", "+    commandWorkDirLinePreviewLabel.setToolTipText(STALE_TOOLTIP);", "+    gridbag.setConstraints(commandWorkDirLinePreviewLabel, c);", "+    main.add(commandWorkDirLinePreviewLabel);", "+    ", "+    c.weightx = 1.0;", "+    c.weighty = 8.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.insets = compInsets;", "+    ", "+    _commandWorkDirLinePreview = new JTextPane();", "+    _commandWorkDirLinePreview.setToolTipText(STALE_TOOLTIP);", "+    _commandWorkDirLineDoc = (StyledDocument)_commandWorkDirLinePreview.getDocument();", "+    ", "+    _commandWorkDirLinePreview.setEditable(false);", "+    _commandWorkDirLinePreview.setBackground(Color.LIGHT_GRAY);", "+    _commandWorkDirLinePreview.setSelectedTextColor(Color.LIGHT_GRAY);", "+    JScrollPane commandWorkDirLinePreviewSP = new JScrollPane(_commandWorkDirLinePreview);", "+    commandWorkDirLinePreviewSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(commandWorkDirLinePreviewSP, c);", "+    main.add(commandWorkDirLinePreviewSP);", "+", "+    // enclosing .djapp file", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = 1;", "+    c.insets = labelInsets;", "+    JLabel enclosingFileLabel = new JLabel(\"Enclosing .djapp file:\");", "+    gridbag.setConstraints(enclosingFileLabel, c);", "+    main.add(enclosingFileLabel);", "+    ", "+    c.weightx = 1.0;", "+    c.weighty = 8.0;", "+    c.gridwidth = GridBagConstraints.RELATIVE;", "+    c.insets = compInsets;", "+    ", "+    _commandEnclosingFileLine = new JTextPane();", "+    // do not allow a newline", "+    _commandEnclosingFileLine.addKeyListener(new KeyListener() {", "+      public void keyPressed(KeyEvent e) {", "+        if (e.getKeyCode() == KeyEvent.VK_ENTER)  e.consume();", "+        else if (e.getKeyCode() == KeyEvent.VK_TAB) {", "+          e.consume();", "+          if (e.isShiftDown()) _commandWorkDirLine.requestFocus();", "+          else {", "+            _insertCommandButton.setEnabled(false);", "+            if (_editMode) {", "+              _saveCommandButton.requestFocus();", "+            }", "+            else _runCommandButton.requestFocus();", "+          }", "+        }", "+      }", "+      public void  keyReleased(KeyEvent e) { }", "+      public void  keyTyped(KeyEvent e) { }", "+    });", "+    JScrollPane commandEnclosingFileLineSP = new JScrollPane(_commandEnclosingFileLine);", "+    commandEnclosingFileLineSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(commandEnclosingFileLineSP, c);", "+    main.add(commandEnclosingFileLineSP);", "+    ", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.insets = compInsets;", "+    ", "+    _commandEnclosingFileBtn = new JButton(\"...\");", "+    _commandEnclosingFileBtn.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) { chooseFile(_commandEnclosingFileLine); }", "+    });", "+    gridbag.setConstraints(_commandEnclosingFileBtn, c);", "+    main.add(_commandEnclosingFileBtn);", "+    ", "+    c.weightx = 0.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = 1;", "+    c.insets = labelInsets;", "+    JLabel commandEnclosingFileLinePreviewLabel = new JLabel(\"Enclosing .djapp file preview:\");", "+    commandEnclosingFileLinePreviewLabel.setToolTipText(STALE_TOOLTIP);", "+    gridbag.setConstraints(commandEnclosingFileLinePreviewLabel, c);", "+    main.add(commandEnclosingFileLinePreviewLabel);", "+    ", "+    c.weightx = 1.0;", "+    c.weighty = 8.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER;", "+    c.insets = compInsets;", "+    ", "+    _commandEnclosingFileLinePreview = new JTextPane();", "+    _commandEnclosingFileLinePreview.setToolTipText(STALE_TOOLTIP);", "+    _commandEnclosingFileLineDoc = (StyledDocument)_commandEnclosingFileLinePreview.getDocument();", "+    ", "+    _commandEnclosingFileLinePreview.setEditable(false);", "+    _commandEnclosingFileLinePreview.setBackground(Color.LIGHT_GRAY);", "+    _commandEnclosingFileLinePreview.setSelectedTextColor(Color.LIGHT_GRAY);", "+    JScrollPane commandEnclosingFileLinePreviewSP = new JScrollPane(_commandEnclosingFileLinePreview);", "+    commandEnclosingFileLinePreviewSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "+    gridbag.setConstraints(commandEnclosingFileLinePreviewSP, c);", "+    main.add(commandEnclosingFileLinePreviewSP);", "+    ", "+    // bottom panel", "+    panel.add(main, BorderLayout.CENTER);", "+    JPanel bottom = new JPanel();", "+    bottom.setBorder(new EmptyBorder(5, 5, 5, 5));", "+    bottom.setLayout(new BoxLayout(bottom, BoxLayout.X_AXIS));", "+    bottom.add(Box.createHorizontalGlue());", "+    if (!_editMode) {", "+      bottom.add(_runCommandButton);", "+    }", "+    bottom.add(_saveCommandButton);", "+    bottom.add(_insertCommandButton);", "+    bottom.add(_cancelCommandButton);", "+    bottom.add(Box.createHorizontalGlue());", "+    panel.add(bottom, BorderLayout.SOUTH);", "+    ", "+    // update the preview of the actual command line post substitution", "+    _documentListener = new DocumentListener() {", "+      public void update(DocumentEvent e) {", "+        try {", "+          // preview", "+          _commandLineDoc.remove(0,_commandLineDoc.getLength());", "+          String text = StringOps.replaceVariables(_commandLine.getText(), _props, PropertyMaps.GET_LAZY);", "+          _commandLineDoc.insertString(_commandLineDoc.getLength(), StringOps.unescapeFileName(text), null);", "+          ", "+          // command line", "+          colorVariables(_commandLine,", "+                         _props,", "+                         this,", "+                         _commandLineCmdAS,", "+                         _varCommandLineCmdStyle,", "+                         _varErrorCommandLineCmdStyle);", "+          _commandLinePreviewLabel.setText(\"<html>Command line preview:<br>(\"+_commandLinePreview.getText().length()+", "+                                           \" characters)</html>\");", "+        }", "+        catch(BadLocationException ble) { _commandLinePreview.setText(\"Error.\"); }", "+      }", "+      public void changedUpdate(DocumentEvent e) { update(e); }", "+      public void insertUpdate(DocumentEvent e) { update(e); }", "+      public void removeUpdate(DocumentEvent e)  { update(e); }", "+    };", "+    _commandLine.getDocument().addDocumentListener(_documentListener);", "+    _documentListener.changedUpdate(null);", "+    ", "+    // update the preview of the actual work directory post substitution", "+    _workDirDocumentListener = new DocumentListener() {", "+      public void update(DocumentEvent e) {", "+        try {", "+          // preview", "+          _commandWorkDirLineDoc.remove(0,_commandWorkDirLineDoc.getLength());", "+          String text = StringOps.replaceVariables(_commandWorkDirLine.getText(), _props, PropertyMaps.GET_LAZY);", "+          _commandWorkDirLineDoc.insertString(0, StringOps.unescapeFileName(text), null);", "+          ", "+          // command line", "+          colorVariables(_commandWorkDirLine,", "+                         _props,", "+                         this,", "+                         _commandLineCmdAS,", "+                         _varCommandLineCmdStyle,", "+                         _varErrorCommandLineCmdStyle);", "+        }", "+        catch(BadLocationException ble) { _commandLinePreview.setText(\"Error: \"+ble); }", "+      }", "+      public void changedUpdate(DocumentEvent e) { update(e); }", "+      public void insertUpdate(DocumentEvent e) { update(e); }", "+      public void removeUpdate(DocumentEvent e)  { update(e); }", "+    };", "+    _commandWorkDirLine.getDocument().addDocumentListener(_workDirDocumentListener);", "+    _commandWorkDirLine.setText(\"${drjava.working.dir}\");", "+    _workDirDocumentListener.changedUpdate(null);", "+    ", "+    // update the preview of the actual enclosing .djapp file post substitution", "+    _enclosingFileDocumentListener = new DocumentListener() {", "+      public void update(DocumentEvent e) {", "+        try {", "+          // preview", "+          _commandEnclosingFileLineDoc.remove(0,_commandEnclosingFileLineDoc.getLength());", "+          String text = StringOps.replaceVariables(_commandEnclosingFileLine.getText(), _props, PropertyMaps.GET_LAZY);", "+          _commandEnclosingFileLineDoc.insertString(0, StringOps.unescapeFileName(text), null);", "+          ", "+          // command line", "+          colorVariables(_commandEnclosingFileLine,", "+                         _props,", "+                         this,", "+                         _commandLineCmdAS,", "+                         _varCommandLineCmdStyle,", "+                         _varErrorCommandLineCmdStyle);", "+        }", "+        catch(BadLocationException ble) {", "+          _commandLinePreview.setText(\"Error: \"+ble);", "+        }", "+      }", "+      public void changedUpdate(DocumentEvent e) { update(e); }", "+      public void insertUpdate(DocumentEvent e) { update(e); }", "+      public void removeUpdate(DocumentEvent e)  { update(e); }", "+    };", "+    _commandEnclosingFileLine.getDocument().addDocumentListener(_enclosingFileDocumentListener);", "+    _commandEnclosingFileLine.setText(\"\");", "+    _enclosingFileDocumentListener.changedUpdate(null);", "+    ", "+    _lastCommandFocus = _commandLine;", "+    // do not allow preview to have focus", "+    _commandLine.addFocusListener(new FocusAdapter() {", "+      @SuppressWarnings(\"unchecked\")", "+      public void focusGained(FocusEvent e) {", "+        _lastCommandFocus = (JTextPane)e.getComponent();", "+        _insertCommandButton.setEnabled(true);", "+      }", "+      public void focusLost(FocusEvent e) {", "+        if ((e.getOppositeComponent() == _commandLinePreview) || ", "+            (e.getOppositeComponent() == _commandWorkDirLinePreview)) {", "+          _commandLine.requestFocus();", "+        }", "+      }", "+    });", "+    _commandWorkDirLine.addFocusListener(new FocusAdapter() {", "+      @SuppressWarnings(\"unchecked\")", "+      public void focusGained(FocusEvent e) {", "+        _lastCommandFocus = (JTextPane)e.getComponent();", "+        _insertCommandButton.setEnabled(true);", "+      }", "+      public void focusLost(FocusEvent e) {", "+        if ((e.getOppositeComponent() == _commandLinePreview) || ", "+            (e.getOppositeComponent() == _commandWorkDirLinePreview)) {", "+          _commandWorkDirLine.requestFocus();", "+        }", "+      }", "+    });", "+    ", "+    return panel;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37a00f6e87d855c1135dddb1f7f7bb28", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "fa92455fedb412729f98f82d7ebe32526434dfc9", "commitAfterChange": "901df797e3b0df4a97e4f748f929fa2a582d5380", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private JPanel makeCommandPane()", "signatureAfterChange": "      private JPanel makeCommandPane()", "diff": ["-      @SuppressWarnings(\"unchecked\")", "-      @SuppressWarnings(\"unchecked\")"]}], "num": 2422}
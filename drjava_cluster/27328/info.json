{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76bfafda982cb71a7db79cd6b59d70f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c48256243c70a7b9444638444c46486", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "          public void test_NotAllowed()", "signatureAfterChange": "          public void test_NotAllowed()", "diff": ["-      SourceInfo noInfo = JExprParser.NO_SOURCE_INFO;", "-      Word w = new Word(JExprParser.NO_SOURCE_INFO, \"word\");", "+      Word w = new Word(NO_INFO, \"word\");", "-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      UnbracedBody emptyUnbracedBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      ClassOrInterfaceType superClass = new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]);", "+      BracedBody emptyBody = new BracedBody(NO_INFO, new BodyItemI[0]);", "+      UnbracedBody emptyUnbracedBody = new UnbracedBody(NO_INFO, new BodyItemI[0]);", "+      ClassOrInterfaceType superClass = new ClassOrInterfaceType(NO_INFO, \"java.lang.Object\", new Type[0]);", "-      CompoundWord cw = new CompoundWord(noInfo, new Word[0]);", "-      Statement stmt = new EmptyStatement(noInfo);", "-      Expression e = new EmptyExpression(noInfo);", "-      Block b = new Block(noInfo, emptyBody);", "+      CompoundWord cw = new CompoundWord(NO_INFO, new Word[0]);", "+      Statement stmt = new EmptyStatement(NO_INFO);", "+      Expression e = new EmptyExpression(NO_INFO);", "+      Block b = new Block(NO_INFO, emptyBody);", "-      TypeVariable tv = new TypeVariable(noInfo, \"name\");", "+      TypeVariable tv = new TypeVariable(NO_INFO, \"name\");", "-      InnerInterfaceDef ii = new InnerInterfaceDef(noInfo, _publicMav, w, tps, rts, emptyBody);", "-      InnerClassDef ic = new InnerClassDef(noInfo, _publicMav, w, tps, superClass, rts, emptyBody);", "+      InnerInterfaceDef ii = new InnerInterfaceDef(NO_INFO, _publicMav, w, tps, rts, emptyBody);", "+      InnerClassDef ic = new InnerClassDef(NO_INFO, _publicMav, w, tps, superClass, rts, emptyBody);", "-      StaticInitializer si = new StaticInitializer(noInfo, b);", "-      LabeledStatement ls = new LabeledStatement(noInfo, new Word(noInfo, \"label\"), stmt);", "+      StaticInitializer si = new StaticInitializer(NO_INFO, b);", "+      LabeledStatement ls = new LabeledStatement(NO_INFO, new Word(NO_INFO, \"label\"), stmt);", "-      LabeledBreakStatement bs = new LabeledBreakStatement(noInfo, new Word(noInfo, \"myLabel\"));", "-      LabeledContinueStatement cs = new LabeledContinueStatement(noInfo, new Word(noInfo, \"yourLabel\"));", "-      SynchronizedStatement syncs = new SynchronizedStatement(noInfo, e, b);", "-      TypeParameter tp = new TypeParameter(noInfo, tv, superClass);", "-      ConditionalExpression ce = new ConditionalExpression(noInfo, e, e, e);", "+      LabeledBreakStatement bs = new LabeledBreakStatement(NO_INFO, new Word(NO_INFO, \"myLabel\"));", "+      LabeledContinueStatement cs = new LabeledContinueStatement(NO_INFO, new Word(NO_INFO, \"yourLabel\"));", "+      SynchronizedStatement syncs = new SynchronizedStatement(NO_INFO, e, b);", "+      TypeParameter tp = new TypeParameter(NO_INFO, tv, superClass);", "+      ConditionalExpression ce = new ConditionalExpression(NO_INFO, e, e, e);", "-      TryCatchStatement tcs = new NormalTryCatchStatement(noInfo, b, new CatchBlock[0]);", "-      SwitchCase defaultSc = new DefaultCase(JExprParser.NO_SOURCE_INFO, emptyUnbracedBody);", "-      SwitchStatement ssBadDefault = new SwitchStatement(noInfo, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), new SwitchCase[]{defaultSc, defaultSc});", "+      TryCatchStatement tcs = new NormalTryCatchStatement(NO_INFO, b, new CatchBlock[0]);", "+      SwitchCase defaultSc = new DefaultCase(NO_INFO, emptyUnbracedBody);", "+      SwitchStatement ssBadDefault = new SwitchStatement(NO_INFO, new IntegerLiteral(NO_INFO, 5), ", "+                                                         new SwitchCase[]{defaultSc, defaultSc});", "-     assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"LabeledBreakStatement is not allowed\", \"Labeled statements cannot be used at the Advanced level, so you cannot break to a label\", errors.getLast().getFirst());", "+     assertEquals(\"LabeledBreakStatement is not allowed\",", "+                  \"Labeled statements cannot be used at the Advanced level, so you cannot break to a label\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"ContinueStatement is not allowed\", \"Labeled statements cannot be used at the Advanced level, so you cannot use a labeled continue statement\", errors.getLast().getFirst());", "+     assertEquals(\"ContinueStatement is not allowed\", ", "+                  \"Labeled statements cannot be used at the Advanced level, so you cannot use a labeled \" + ", "+                  \"continue statement\", errors.getLast().getFirst());", "-     assertEquals(\"SynchronizedStatement is not allowed\", \"Synchronized statements cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"SynchronizedStatement is not allowed\", ", "+                  \"Synchronized statements cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"ConditionalExpression is not allowed\", \"Conditional expressions cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"ConditionalExpression is not allowed\", ", "+                  \"Conditional expressions cannot be used at the Advanced level\", errors.getLast().getFirst());", "-     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", errors.getLast().getFirst());", "+     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"Default case has to be last case\", \"Default case must be the last case of a switch statement at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"Default case has to be last case\", ", "+                  \"Default case must be the last case of a switch statement at the Advanced level\", ", "+                  errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5328f8f6e17b2cd849743b41f0712950", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 21, "signatureBeforeChange": "          public void test_NotAllowed()", "signatureAfterChange": "          public void test_NotAllowed()", "diff": ["-                                                                                                                      new BitwiseOrAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)))});", "-", "-      TryCatchStatement tcs = new NormalTryCatchStatement(noInfo, b, new CatchBlock[0]);", "-", "-     ", "-     si.visit(_iv);", "-     assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ii.visit(_iv);", "-     assertEquals(\"InnerInterfaceDef is not allowed\", \"Nested interfaces cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-     ", "-     ic.visit(_iv);", "-     assertEquals(\"InnerClassDef is not allowed\", \"Inner classes cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-     ", "-     ls.visit(_iv);", "-     assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ss.visit(_iv);", "-     assertEquals(\"SwitchStatement is not allowed\", \"Switch statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ws.visit(_iv);", "-     assertEquals(\"WhileStatement is not allowed\", \"While statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ds.visit(_iv);", "-     assertEquals(\"DoStatement is not allowed\", \"Do statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     fs.visit(_iv);", "-     assertEquals(\"ForStatement is not allowed\", \"For statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-     ", "-     bs.visit(_iv);", "-     assertEquals(\"BreakStatement is not allowed\", \"Break statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     cs.visit(_iv);", "-     assertEquals(\"ContinueStatement is not allowed\", \"Continue statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-   ", "-     syncs.visit(_iv);", "-     assertEquals(\"SynchronizedStatement is not allowed\", \"Synchronized statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-    ", "-     tp.visit(_iv);", "-     assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     at.visit(_iv);", "-     assertEquals(\"ArrayTypes is not allowed\", \"Arrays cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ce.visit(_iv);", "-     assertEquals(\"ConditionalExpression is not allowed\", \"Conditional expressions cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-     ", "-     hasBitOperator.visit(_iv);", "-      assertEquals(\"Bitwise operators are not allowed\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+                                                                                                              new BitwiseOrAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)))});", "-     tcs.visit(_iv);", "-     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", errors.getLast().getFirst());", "+      TryCatchStatement tcs = new NormalTryCatchStatement(noInfo, b, new CatchBlock[0]);", "+      ", "+      ", "+      si.visit(_iv);", "+      assertEquals(\"After visiting static initializer, errors should still be 0\", 0, errors.size());", "+      ", "+      ii.visit(_iv);", "+      assertEquals(\"After visiting inner interface, errors should still be 0\", 0, errors.size());", "+      ", "+      ic.visit(_iv);", "+      assertEquals(\"After visiting inner class, errors should still be 0\", 0, errors.size());", "+      ", "+      ls.visit(_iv);", "+      assertEquals(\"After visiting labeled statment, errors should still be 0\", 0, errors.size());", "+      ", "+      ss.visit(_iv);", "+      assertEquals(\"After visiting switch statment, errors should still be 0\", 0, errors.size());", "+      ", "+      ws.visit(_iv);", "+      assertEquals(\"After visiting while statment, errors should still be 0\", 0, errors.size());", "+      ", "+      ds.visit(_iv);", "+      assertEquals(\"After visiting do statment, errors should still be 0\", 0, errors.size());", "+      ", "+      fs.visit(_iv);", "+      assertEquals(\"After visiting for statment, errors should still be 0\", 0, errors.size());", "+      ", "+      bs.visit(_iv);", "+      assertEquals(\"After visiting break statment, errors should still be 0\", 0, errors.size());", "+      ", "+      cs.visit(_iv);", "+      assertEquals(\"After visiting continue statment, errors should still be 0\", 0, errors.size());", "+      ", "+      syncs.visit(_iv);", "+      assertEquals(\"After visiting synchronized statment, errors should now be 1\", 1, errors.size());", "+      assertEquals(\"SynchronizedStatement is not allowed\", \"Synchronized statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "+      ", "+      tp.visit(_iv);", "+      assertEquals(\"After visiting type parameter, errors should now be 2\", 2, errors.size());", "+      assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Intermediate level\", errors.getLast().getFirst());", "+      ", "+//     at.visit(_iv);", "+//     assertEquals(\"ArrayTypes is not allowed\", \"Arrays cannot be used at the Intermediate level\", errors.getLast().getFirst());", "+      ", "+//     ce.visit(_iv);", "+//     assertEquals(\"ConditionalExpression is not allowed\", \"Conditional expressions cannot be used at the Intermediate level\", errors.getLast().getFirst());", "+      ", "+//     hasBitOperator.visit(_iv);", "+//     assertEquals(\"Bitwise operators are not allowed\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+      ", "+//     tcs.visit(_iv);", "+//     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", errors.getLast().getFirst());"]}], "num": 27328}
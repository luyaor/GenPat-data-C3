{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77dbd2ca488aed2dc8dce3905f55a031", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e26be3330e41e5e42dd6a87b301b2f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "611afcaf59528294d37f92105e692c81ac320af5", "commitAfterChange": "8714a43a313a1a0d2ca9cc83816dab7a08ff011b", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public int findCharOnLine(int pos, char findChar)", "signatureAfterChange": "   public int findCharOnLine(int pos, char findChar)", "diff": ["+    ", "+    // Move to start of line", "+    /*", "+    _reduced.move(lineStart - here);", "+    int reducedPos = lineStart;", "+    int prevI = 0;", "+    */", "+    ", "-      this.getReduced().move(i + lineStart - here);", "+      int matchIndex = i + lineStart;", "+      _reduced.move(matchIndex - here);", "+      //int dist = i - prevI;", "+      //_reduced.move(dist);", "+      //reducedPos = reducedPos + dist;", "-      if (!this.getReduced().getStateAtCurrent().equals(ReducedModelState.FREE)) {", "+      if (!_reduced.getStateAtCurrent().equals(ReducedModelState.FREE)) {", "-        this.getReduced().move(here - (i + lineStart));", "-        _storeInCache(key, new Integer(i + lineStart));", "-        return (i + lineStart);", "+        //_reduced.move(here - reducedPos);", "+        _reduced.move(here - matchIndex);", "+        _storeInCache(key, new Integer(matchIndex));", "+        return matchIndex;", "-      this.getReduced().move(here - (i + lineStart));", "+      _reduced.move(here - matchIndex);", "+      ", "+      //prevI = i;", "+    ", "+    //_reduced.move(here - reducedPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad1ac509db6ae468a9d628705255bf5c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private int _uncommentBlock(final int start, final int end)", "signatureAfterChange": "   private int _uncommentBlock(final int start, final int end)", "diff": ["-      int walker = start;", "-      synchronized(_reduced) {", "-        while (walker < endPos.getOffset()) {", "-          setCurrentLocation(walker);", "-          // Keep pointer to walker position that will stay current", "-          // regardless of how commentLine changes things", "-          Position walkerPos = this.createUnwrappedPosition(walker);", "-          // uncomment current line", "-          afterUncommentEnd-= _uncommentLine();  // accesses _reduced", "-          // Move back to walker spot", "-          setCurrentLocation(walkerPos.getOffset());", "-          walker = walkerPos.getOffset();", "-          // Adding 1 makes us point to the first character AFTER the next newline.", "-          // We don't actually move yet. That happens at the top of the loop,", "-          // after we check if we're past the end.", "-          walker += _reduced.getDistToNextNewline() + 1;", "-          //DrJava.consoleOut().println(\"progress: \" + (100*(walker-start)/(end-start)));", "-        }", "-      }", "+      ", "+//      synchronized(_reduced) {  //unnecessary because write lock is exclusive", "+      int walker = getLineStartPos(start);", "+//      Utilities.show(\"Initial walker pos = \" + walker);", "+      while (walker < endPos.getOffset()) {", "+        setCurrentLocation(walker);           // Move cursor to walker position", "+        int diff = _uncommentLine();          // Uncomment current line, accessing the reduced model", "+        afterUncommentEnd -= diff;            // Update afterUncommentEnd", "+        walker = getLineEndPos(walker) + 1;   // Update walker pos to point to beginning of next line", "+//        Utilities.show(\"Updated value of walker = \" + walker);", "+      }        ", "+//      }   "]}], "num": 6606}
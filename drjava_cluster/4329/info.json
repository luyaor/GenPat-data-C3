{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6641e7b54c8a1372024c62ec70282ddf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14ad7f09f230b8e1ed859b09d1c8ccf4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "          public void testCreateUniqueName()", "signatureAfterChange": "          public void testCreateUniqueName()", "diff": ["+      System.err.println(\"testCreateName finished\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f34ddddcef0e15018032db86c98d5f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "          public void testGetInnerClassOrInterface()", "signatureAfterChange": "          public void testGetInnerClassOrInterface()", "diff": ["-      ", "-      //one level can be found", "+      // One level can be found", "-      //dollars or dots are okay, and nested inner classes can be found", "+      // Dollars or dots are okay, and nested inner classes can be found", "-      //dollars or dots are okay, and nested inner classes can be found", "+      // Dollars or dots are okay, and nested inner classes can be found", "-      //null is returned when a non-present inner class is looked for.", "+      // null is returned when a non-present inner class is looked for.", "-      ", "-      //one level can be found", "+      // One level can be found", "-      ", "-      assertEquals(\"Should return SymbolData.AMBIGUOUS_REFERENCE\", SymbolData.AMBIGUOUS_REFERENCE, me.getInnerClassOrInterface(\"MyInner\"));", "+      assertEquals(\"Should return SymbolData.AMBIGUOUS_REFERENCE\", SymbolData.AMBIGUOUS_REFERENCE, ", "+                   me.getInnerClassOrInterface(\"MyInner\"));", "-      //Test a case where the inner class is private in one, but not the other", "+      // Test a case where the inner class is private in one, but not the other", "-      //Test a case where the inner class is private in both--returns one of them", "+      // Test a case where the inner class is private in both--returns one of them", "-      //Test a case where the inner most class is private, but one layer is public", "+      // Test a case where the inner most class is private, but one layer is public", "-      assertEquals(\"Should return innerInterfaceInner\", innerInterfaceInner, me.getInnerClassOrInterface(\"MyInner.Inner\"));", "+      assertEquals(\"Should return innerInterfaceInner\", innerInterfaceInner, ", "+                   me.getInnerClassOrInterface(\"MyInner.Inner\"));", "+      ", "+      System.err.println(\"testGetInnerClassOrInterface finished\");"]}], "num": 4329}
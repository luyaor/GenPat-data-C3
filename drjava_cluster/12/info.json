{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3491e87275fcf996fb489ebb13ea8cc1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f775ab7c0a4ecbdb816dfdb4befbf8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 254, "signatureBeforeChange": "              public void dumpBounds()", "signatureAfterChange": "          public void appendConstraints()", "diff": ["-      ", "-      public void dumpBounds() {", "-        boolean printedFirst = false;", "-        for (int i = 0; i < _vars.size(); i++) {", "-          VariableType v = _vars.get(i);", "-          Type upper = v.symbol().upperBound();", "-          Type lower = v.symbol().lowerBound();", "-          boolean printUpper = !isEqual(upper, OBJECT) /*&& !isEqual(upper, TOP)*/;", "-          boolean printLower = !isEqual(lower, NULL) /*&& !isEqual(lower, BOTTOM)*/;", "-          if (printUpper || printLower) {", "-            if (printedFirst) { _result.append(\"; \"); }", "-            else { printedFirst = true; }", "-          }", "-          if (printUpper) { ", "-            _result.append(_names.get(v));", "-            _result.append(\" <: \");", "-            TypeWriter.this.run(upper); // may increase the size of _vars", "-          }", "-          if (printLower) {", "-            if (printUpper) { _result.append(\", \"); }", "-            _result.append(_names.get(v));", "-            _result.append(\" :> \");", "-            TypeWriter.this.run(lower); // may increase the size of _vars", "-          }", "-        }", "-      }", "+  ", "+      public void appendConstraints() {", "+        if (!_boundedVars.isEmpty()) {", "+          _result.append(\" [\");", "+          // not using an iterator because the list may grow during iteration", "+          for (int i = 0; i < _boundedVars.size(); i++) {", "+            if (i > 0) { _result.append(\"; \"); }", "+            VariableType v = _boundedVars.get(i);", "+            Type upper = v.symbol().upperBound();", "+            Type lower = v.symbol().lowerBound();", "+            boolean printUpper = !isEqual(upper, OBJECT) /*&& !isEqual(upper, TOP)*/;", "+            boolean printLower = !isEqual(lower, NULL) /*&& !isEqual(lower, BOTTOM)*/;", "+            if (printUpper) {", "+              _result.append(nameForVariable(v));", "+              _result.append(\" <: \");", "+              run(upper); // may increase the size of _vars", "+            }", "+            if (printLower) {", "+              if (printUpper) { _result.append(\", \"); }", "+              _result.append(nameForVariable(v));", "+              _result.append(\" :> \");", "+              run(lower); // may increase the size of _vars", "+            }", "+          }", "+          _result.append(\"]\");", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc7d3744293eccec917dba77bc700ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 567, "signatureBeforeChange": "   public void updateTabbedPane()", "signatureAfterChange": "           public void run()", "diff": ["-    */", "-  public void updateTabbedPane() {", "-    final JComponent c = (JComponent) _tabbedPane.getSelectedComponent();", "-    synchronized(_updateLock) {", "-      if (c == null || (_tabUpdatePending && c == _lastUpdatedComponent)) return;", "-    }", "-    _tabUpdatePending = true;", "-    Thread updater = new Thread(new Runnable() {", "-      public void run() {", "-        synchronized(_updateLock) { ", "-          try { _updateLock.wait(UPDATE_DELAY); } ", "-          catch(InterruptedException e) { /* fall through */ }", "-        }", "-        EventQueue.invokeLater(new Runnable() { ", "-          public void run() {", "-            synchronized(_updateLock) { ", "-              _tabUpdatePending = false;", "-              _lastUpdatedComponent = c;", "-            }", "-//            System.err.println(\"Repainting \" + c);", "-            c.revalidate();", "-            c.repaint();", "-          }", "-        });", "-      }", "-    });", "-    updater.start();", "-  }", "+        EventQueue.invokeLater(new Runnable() {", "+          public void run() {", "+            synchronized (_updateLock) {", "+              _pendingUpdate = new Runnable() {", "+                public void run() {", "+                  for (final R r: matches) {", "+                    r.updateLines();  // recompute _lineStartPos and _lineEndPos in r", "+//                    System.err.println(\"reloading node for \" + r);", "+                    p._regTreeModel.reload(p.getNode(r));", "+                    p.repaint();", "+                  }", "+                }", "+              };  // end Runnable", "+              if (_tabUpdatePending) return;  // Let the queued task run this update (or a successor)", "+              _tabUpdatePending = true;", "+            } // end synchronized", "+            ", "+            // Create a new update task", "+            new Thread(new Runnable() {", "+              public void run() {", "+                Thread.currentThread().setPriority(UPDATER_PRIORITY);", "+                synchronized (_updateLock) {", "+                  try { _updateLock.wait(UPDATE_DELAY); }  // _pendingUpdate can be updated during wait", "+                  catch(InterruptedException e) { /* fall through */ }", "+                  _tabUpdatePending = false;", "+                } // end synchronized", "+                _pendingUpdate.run();", "+              }", "+            }).start();", "+          }"]}], "num": 12}
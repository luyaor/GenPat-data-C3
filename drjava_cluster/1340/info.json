{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c25d8abe07331d50484ffb3b13a39ae", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a53e6b2b3bc10ef5fcdb9c0a017c918", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "      public void testForVariableDeclaration()", "signatureAfterChange": "      public void testForVariableDeclaration()", "diff": ["-      //make sure that if forVariableDeclaration is called with a AnonymousClassInstantiation, the symboldata is only added once.", "-      //this is to make sure an old bug stays fixed.", "-      SimpleAnonymousClassInstantiation basic = new SimpleAnonymousClassInstantiation(JExprParser.NO_SOURCE_INFO, new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"Object\", new Type[0]), ", "-                                                                        new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0]),", "-                                                                        new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      // Make sure that if forVariableDeclaration is called with a AnonymousClassInstantiation, ", "+      // the symboldata is only added once. This is to make sure an old bug stays fixed.", "+      SimpleAnonymousClassInstantiation basic = ", "+        new SimpleAnonymousClassInstantiation(NO_INFO, new ClassOrInterfaceType(NO_INFO, \"Object\", new Type[0]), ", "+                                              new ParenthesizedExpressionList(NO_INFO, new Expression[0]),", "+                                              new BracedBody(NO_INFO, new BodyItemI[0]));", "-     VariableDeclarator[] d1 = {new InitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]), new Word(JExprParser.NO_SOURCE_INFO, \"b\"), basic)};", "-     VariableDeclaration vd1 = new VariableDeclaration(JExprParser.NO_SOURCE_INFO,_publicMav, d1); ", "+     VariableDeclarator[] d1 = {", "+       new InitializedVariableDeclarator(NO_INFO, new ClassOrInterfaceType(NO_INFO, \"java.lang.Object\", new Type[0]), ", "+                                         new Word(NO_INFO, \"b\"), basic)", "+     };", "+     VariableDeclaration vd1 = new VariableDeclaration(NO_INFO,_publicMav, d1); ", "-     ClassBodyAdvancedVisitor cbav = new ClassBodyAdvancedVisitor(_sd1, \"\", _av._file, _av._package, _av._importedFiles, _av._importedPackages, _av._classNamesInThisFile, _av.continuations);", "+     ClassBodyAdvancedVisitor cbav =", "+       new ClassBodyAdvancedVisitor(_sd1, \"\", _av._file, _av._package, _av._importedFiles, ", "+                                    _av._importedPackages, _av._classNamesInThisFile, _av.continuations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fad07f010e4f5373c6089bb217395de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "          public void testHandleInnerClassDef()", "signatureAfterChange": "          public void testHandleInnerClassDef()", "diff": ["-      InnerClassDef cd1 = new InnerClassDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Bart\"),", "-                                       new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-                                       new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "-      InnerClassDef cd0 = new InnerClassDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Lisa\"),", "-                                       new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-                                            new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {cd1}));", "+      InnerClassDef cd1 = ", "+        new InnerClassDef(NO_INFO, _packageMav, new Word(NO_INFO, \"Bart\"),", "+                          new TypeParameter[0], new ClassOrInterfaceType(NO_INFO, \"java.lang.Object\", new Type[0]),", "+                          new ReferenceType[0], new BracedBody(NO_INFO, new BodyItemI[0]));", "+      InnerClassDef cd0 = ", "+        new InnerClassDef(NO_INFO, _packageMav, new Word(NO_INFO, \"Lisa\"),", "+                          new TypeParameter[0], new ClassOrInterfaceType(NO_INFO, \"java.lang.Object\", new Type[0]),", "+                          new ReferenceType[0], new BracedBody(NO_INFO, new BodyItemI[] {cd1}));", "-      SymbolData sd0 = new SymbolData(outerData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], obj, new LinkedList<SymbolData>(), null); ", "-      SymbolData sd1 = new SymbolData(outerData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], obj, new LinkedList<SymbolData>(), null); ", "+      SymbolData sd0 = new SymbolData(outerData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], obj, ", "+                                      new LinkedList<SymbolData>(), null); ", "+      SymbolData sd1 = new SymbolData(outerData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], obj, ", "+                                      new LinkedList<SymbolData>(), null); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab06eaa6e34bd8c4618134ee77c05d7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForInnerClassDef()", "signatureAfterChange": "          public void testForInnerClassDef()", "diff": ["-      InnerClassDef cd0 = new InnerClassDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Rod\"),", "-                                       new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-                                       new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      InnerClassDef cd0 =", "+        new InnerClassDef(NO_INFO, _packageMav, new Word(NO_INFO, \"Rod\"),", "+                          new TypeParameter[0], ", "+                          new ClassOrInterfaceType(NO_INFO, \"java.lang.Object\", new Type[0]), ", "+                          new ReferenceType[0], ", "+                          new BracedBody(NO_INFO, new BodyItemI[0]));", "-      InnerClassDef cd1 = new InnerClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"Todd\"),", "-                                       new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-                                            new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      InnerClassDef cd1 = ", "+        new InnerClassDef(NO_INFO, _publicMav, new Word(NO_INFO, \"Todd\"),", "+                          new TypeParameter[0], ", "+                          new ClassOrInterfaceType(NO_INFO, \"java.lang.Object\", new Type[0]), ", "+                          new ReferenceType[0], ", "+                          new BracedBody(NO_INFO, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"No modifiers may appear before a class declaration here\", errors.getLast().getFirst());", "-", "-      ", "-", "+      assertEquals(\"The error message should be correct\", \"No modifiers may appear before a class declaration here\", ", "+                   errors.getLast().getFirst());"]}], "num": 1340}
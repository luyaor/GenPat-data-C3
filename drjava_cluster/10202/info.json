{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1d0e994079810a4ab30fe4e69c72b23", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3621e047da4c93381c429d87a4ed9a19", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "8a3aaf6e3fe6fafb27249a8ad4b2c013ef4ae05a", "commitAfterChange": "102797244429ae58868d0037b49467f5a00bbd6a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void windowDeactivated(WindowEvent ev)", "signatureAfterChange": "      private PageChangerUpdater createPageChanger()", "diff": ["-    public void windowDeactivated(WindowEvent ev) {}", "+  ", "+  private PageChangerUpdater createPageChanger() {", "+    //_pageTextField.setAction(_goToPageAction);", "+    // _goToPageAction.putValue(Action.SHORT_DESCRIPTION, \"Goto Page\");", "+    try {", "+      Class spinnerClass = Class.forName(\"javax.swing.JSpinner\");", "+      final JComponent spinner = (JComponent) spinnerClass.newInstance();", "+      final Method getter = spinnerClass.getMethod(\"getValue\",null);", "+      Object model = callMethod(spinner,spinnerClass,\"getModel\",null,null);", "+      Class modelClass = model.getClass();", "+      Class[] ca = new Class[] {Comparable.class};", "+      Object[] aa = new Object[] {new Integer(1)};", "+      callMethod(model,modelClass,\"setMinimum\",ca,aa);", "+      aa[0] = new Integer(_print.getNumberOfPages());", "+      callMethod(model,modelClass,\"setMaximum\",ca,aa);", "+      ca[0] = ChangeListener.class;", "+      aa[0] = new ChangeListener() {", "+        public void stateChanged(ChangeEvent ev) {", "+          int num = _pageNumber;", "+          try {", "+            num = ((Number) getter.invoke(spinner,null)).intValue()-1;", "+            if((num >= 0) && (num < _print.getNumberOfPages())) {", "+              _goToPage(num);", "+            } else {", "+            _updateActions();", "+            }", "+          } catch(Exception ex) {", "+            _updateActions();", "+          }", "+        }", "+      };", "+      callMethod(spinner,spinnerClass,\"addChangeListener\",ca,aa);", "+      return new JSpinnerChanger(spinnerClass,spinner);", "+    } catch(Exception e) {", "+      /** Displays the previous page of the document. */", "+      final JTextField tf = new JTextField();", "+      tf.addActionListener(new ActionListener() {", "+        public void actionPerformed(ActionEvent ae) {", "+          try {", "+            int pageToGoTo = Integer.parseInt(tf.getText()) - 1;", "+            ", "+            if ((pageToGoTo < 0) || (pageToGoTo >= _print.getNumberOfPages())) {", "+              _updateActions();", "+            } else {", "+              _goToPage(pageToGoTo);", "+            }", "+          } catch (NumberFormatException e) {", "+            _updateActions();", "+          }", "+        }", "+      });", "+      return new JTextFieldChanger(tf);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc458791469333c224f642c7d2cbcdbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public CompilerErrorModel()", "signatureAfterChange": "   public T getErrorAtOffset(OpenDefinitionsDocument odd, int offset)", "diff": ["-   */", "-  public CompilerErrorModel() {", "-    this(new CompilerError[0], null, null);", "-  }", "+   */", "+  public T getErrorAtOffset(OpenDefinitionsDocument odd, int offset) {", "+    File file = null;", "+    try {", "+      file = odd.getFile();", "+    } catch (IllegalStateException e) {", "+      return null;", "+    } catch (FileMovedException e) {", "+      file = e.getFile();", "+    }", "+", "+", "+    StartAndEndIndex saei = _filesToIndexes.get(file);", "+    if (saei == null){", "+      return null;", "+    }", "+    int start = saei.getStartPos();", "+    int end = saei.getEndPos();", "+    if (start == end){", "+      return null;", "+    }", "+", "+    // check if the dot is on a line with an error.", "+    // Find the first error that is on or after the dot. If this comes", "+    // before the newline after the dot, it's on the same line.", "+    int errorAfter; // index of the first error after the dot", "+    for (errorAfter = start; errorAfter < end; errorAfter++) {", "+      if (_positions[errorAfter] == null) {", "+        //This indicates something wrong, but it was happening before so...", "+        return null;", "+      }", "+      if (_positions[errorAfter].getOffset() >=offset) {", "+        break;", "+      }", "+    }", "+", "+    // index of the first error before the dot", "+    int errorBefore = errorAfter - 1;", "+", "+    // this will be set to what we want to select, or -1 if nothing", "+    int shouldSelect = -1;", "+", "+    if (errorBefore >= start) { // there's an error before the dot", "+      int errPos = _positions[errorBefore].getOffset();", "+      try {", "+        String betweenDotAndErr = odd.getDocument().getText(errPos, offset - errPos);", "+", "+        if (betweenDotAndErr.indexOf('\\n') == -1) {", "+          shouldSelect = errorBefore;", "+        }", "+      }", "+      catch (BadLocationException willNeverHappen) {", "+        throw new UnexpectedException(willNeverHappen);", "+      }", "+    }", "+", "+    if ((shouldSelect == -1) && (errorAfter != _positions.length)) {", "+      // we found an error on/after the dot", "+      // if there's a newline between dot and error,", "+      // then it's not on this line", "+      int errPos = _positions[errorAfter].getOffset();", "+      try {", "+        String betweenDotAndErr = odd.getDocument().getText(offset, errPos - offset);", "+", "+        if (betweenDotAndErr.indexOf('\\n') == -1) {", "+          shouldSelect = errorAfter;", "+        }", "+      }", "+      catch (BadLocationException willNeverHappen) {", "+        throw new UnexpectedException(willNeverHappen);", "+      }", "+    }", "+", "+    if (shouldSelect == -1){", "+      return null;", "+    } else {", "+      return _errors[shouldSelect];", "+    }", "+  }"]}], "num": 10202}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43d1517c8160fb71dd9c7a1cdf29448b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "402ee6f1af202e15c749370938ea2913", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 176, "signatureBeforeChange": "   public static <T> SizedIterable<T> asSizedIterable(Collection<T> coll)", "signatureAfterChange": "   public static <T> SizedIterable<T> asSizedIterable(Collection<T> coll)", "diff": ["-    return new CollectionWrapper<T>(coll);", "+    if (coll instanceof SizedIterable<?>) { return (SizedIterable<T>) coll; }", "+    else { return new CollectionWrapper<T>(coll); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "770d86e47f9b3f959ef339f15442aa8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static boolean isEmpty(Iterable<?> iter)", "signatureAfterChange": "   public static boolean isEmpty(Iterable<?> iter)", "diff": ["+    else if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).isEmpty(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2b3b422b77de4963da3f9baf88f8815", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 70, "signatureBeforeChange": "   public static <K, V> Map<K, V> asMap(final Dictionary<K, V> d)", "signatureAfterChange": "   public static <K, V> Map<K, V> asMap(Dictionary<K, V> d)", "diff": ["+   */", "+  public static <K, V> Map<K, V> asMap(Dictionary<K, V> d) {", "+    // can't cast arbitrary Dictionaries because the dictionary type parameters may", "+    // be unrelated to map parameters -- it might be a Dictionary<K, V> and a Map<K, Foo>", "+    if (d instanceof Hashtable<?, ?>) { return (Hashtable<K, V>) d; }", "+    return new DictionaryMap<K, V>(d);", "-  /** Convert a Dictionary to a Map. */", "-  public static <K, V> Map<K, V> asMap(final Dictionary<K, V> d) {", "-    return new DictionaryMap<K, V>(d);"]}], "num": 13440}
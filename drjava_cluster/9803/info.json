{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "076c0c1f3c83bd47eb81757f383a127d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25529f79c1acbdfe09e88243ce6f797b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-      while(failCount<2) {", "+      while(failCount < 2) {", "+        String masterMemory = getConfig().getSetting(MASTER_JVM_XMX).trim();", "-          || ((!(\"\".equals(DrJava.getConfig().getSetting(MASTER_JVM_XMX).trim()))) &&", "-              (!(edu.rice.cs.drjava.config.OptionConstants.heapSizeChoices.get(0).equals(DrJava.getConfig().getSetting(MASTER_JVM_XMX).trim()))));", "+          || (!\"\".equals(masterMemory) && !OptionConstants.heapSizeChoices.get(0).equals(masterMemory));", "-        LinkedList<String> classArgsList = new LinkedList<String>();", "-        classArgsList.addAll(_filesToOpen);", "+        LinkedList<String> classArgs = new LinkedList<String>();", "+        classArgs.addAll(_filesToOpen);", "-        if (_showDebugConsole) { classArgsList.addFirst(\"-debugConsole\"); }", "+        if (_showDebugConsole) { classArgs.addFirst(\"-debugConsole\"); }", "-          classArgsList.addFirst(_propertiesFile.getAbsolutePath());", "-          classArgsList.addFirst(\"-config\");", "+          classArgs.addFirst(_propertiesFile.getAbsolutePath());", "+          classArgs.addFirst(\"-config\");", "-        String[] classArgs = classArgsList.toArray(new String[0]);", "-        ", "-          String classPath = System.getProperty(\"java.class.path\");", "-//          Utilities.showDebug(\"Starting DrJavaRoot with classArgs = \" + Arrays.toString(classArgs) + \"; classPath = \" + classPath + ", "-//                             \"; jvmArgs = \" + _jvmArgs + \"; workDir = \" + workDir);", "-            Process p = ExecJVM.runJVM(\"edu.rice.cs.drjava.DrJavaRoot\", classArgs, classPath, _jvmArgs.toArray(new String[0]), null);", "-            final Thread mainThread = Thread.currentThread();", "-            // this thread waits some time for something to go wrong in the spawned JVM (p)", "-            // then it interrupts the main thread, which is waiting for the JVM to end", "-            Thread sleepThread = new Thread(new Runnable() {", "-              public void run() {", "-                try {", "-                  Thread.sleep(WAIT_BEFORE_DECLARING_SUCCESS); // wait 5 seconds for something to go wrong.", "-                  mainThread.interrupt();", "-                }", "-                catch(InterruptedException e) { /* just check if something has gone wrong now, even if it's not 5 seconds later */ }", "-              }", "-            });", "-            sleepThread.setDaemon(true);", "-            sleepThread.start(); // this will wait 5 seconds and then interrupt the main thread waiting for the other JVM to quit", "-            // let the main threat wait for the JVM to end", "+            boolean failed = false;", "+            Process p = JVMBuilder.DEFAULT.jvmArguments(_jvmArgs).start(DrJavaRoot.class.getName(), classArgs);", "+            DelayedInterrupter timeout = new DelayedInterrupter(WAIT_BEFORE_DECLARING_SUCCESS);", "-              p.waitFor();", "-              sleepThread.interrupt();", "+              int exitValue = p.waitFor();", "+              timeout.abort();", "+              failed = (exitValue != 0);", "-            catch(InterruptedException e) { /* we got interrupted by the sleepThread */ }", "-            try {", "-              // check how the JVM ended", "-              if (p.exitValue()!=0) {", "-                // ended in failure", "-                if (failCount>0) {", "-                  // 2nd time that spawning has failed, give up", "-                  JOptionPane.showMessageDialog(null,", "-                                                \"DrJava was unable to start, and resetting your configuration\\n\"+", "-                                                \"did not help. Please file a support request at\\n\"+", "-                                                \"https://sourceforge.net/projects/drjava/\",", "-                                                \"Could Not Start DrJava\",", "-                                                JOptionPane.ERROR_MESSAGE);", "-                  System.exit(0);", "-                }", "-                else {", "-                  // 1st time that spawning has failred, offer to reset configuration", "-                  int result = JOptionPane.showConfirmDialog(null,", "-                                                             \"DrJava was unable to start. Your configuration file (.drjava)\\n\"+", "-                                                             \"might be corrupt. Do you want to reset your configuration?\",", "-                                                             \"Could Not Start DrJava\",", "-                                                             JOptionPane.YES_NO_OPTION);", "-                  if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "-                  // reset configuration, save, and reload it", "-                  getConfig().resetToDefaults();", "-                  getConfig().saveConfiguration();", "-                  if (!handleCommandLineArgs(args)) { System.exit(0); }", "-                  ++failCount;", "-                  continue;", "-                }", "+            catch(InterruptedException e) { /* timeout was reached */ }", "+            if (failed) {", "+              if (failCount > 0) {", "+                // 2nd time that spawning has failed, give up", "+                JOptionPane.showMessageDialog(null,", "+                                              \"DrJava was unable to start, and resetting your configuration\\n\"+", "+                                              \"did not help. Please file a support request at\\n\"+", "+                                              \"https://sourceforge.net/projects/drjava/\",", "+                                              \"Could Not Start DrJava\",", "+                                              JOptionPane.ERROR_MESSAGE);", "+                System.exit(0);", "-            }", "-            catch(IllegalThreadStateException e) {", "-              // the other JVM hasn't finished yet, assume it's running well", "+              else {", "+                // 1st time that spawning has failed, offer to reset configuration", "+                int result = JOptionPane.showConfirmDialog(null,", "+                                                           \"DrJava was unable to start. Your configuration file (.drjava)\\n\"+", "+                                                           \"might be corrupt. Do you want to reset your configuration?\",", "+                                                           \"Could Not Start DrJava\",", "+                                                           JOptionPane.YES_NO_OPTION);", "+                if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "+                // reset configuration, save, and reload it", "+                getConfig().resetToDefaults();", "+                getConfig().saveConfiguration();", "+                if (!handleCommandLineArgs(args)) { System.exit(0); }", "+                ++failCount;", "+                continue;", "+              }", "-          DrJavaRoot.main(classArgs);", "+          DrJavaRoot.main(classArgs.toArray(new String[0]));", "-      new DrJavaErrorHandler().handle(t);", "+      DrJavaErrorHandler.record(t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba881ebe8dd7ad17f7acfd8d6b23ca36", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 97, "signatureBeforeChange": "   private static SimpleAllocation _box(Expression exp, Class primType)", "signatureAfterChange": "   private static SimpleAllocation _box(Expression exp, Class refType)", "diff": ["-  private static SimpleAllocation _box(Expression exp, Class primType) {", "-    String refTypeName = \"\";", "-    Class refType = null;", "-    ", "-    if (primType == boolean.class) {", "-      refTypeName = \"Boolean\";", "-      refType = Boolean.class;", "-    }", "-    else if (primType == byte.class) {", "-      refTypeName = \"Byte\";", "-      refType = Byte.class;", "-    }", "-    else if (primType == char.class) {", "-      refTypeName = \"Character\";", "-      refType = Character.class;", "-    }", "-    else if (primType == short.class) {", "-      refTypeName = \"Short\";", "-      refType = Short.class;", "-    }", "-    else if (primType == int.class) {", "-      refTypeName = \"Integer\";", "-      refType = Integer.class;", "-    }", "-    else if (primType == long.class) {", "-      refTypeName = \"Long\";", "-      refType = Long.class;", "-    }", "-    else if (primType == float.class) {", "-      refTypeName = \"Float\";", "-      refType = Float.class;", "-    }", "-    else if (primType == double.class) {", "-      refTypeName = \"Double\";", "-      refType = Double.class;", "-    }", "-    else {", "-      throw new ExecutionError(\"box.type\", exp);", "-    }", "+  private static SimpleAllocation _box(Expression exp, Class refType) {", "+    String refTypeName = refType.getName();", "+    PrimitiveType primType = _correspondingPrimType(refType);", "-      constructor = refType.getConstructor(new Class[] {primType});", "+      constructor = refType.getConstructor(new Class[] { primType.getValue() });", "+    ", "+    CastExpression castExp = new CastExpression(primType, exp, ", "+                                                exp.getFilename(),", "+                                                exp.getBeginLine(),", "+                                                exp.getBeginColumn(),", "+                                                exp.getEndLine(),", "+                                                exp.getEndColumn());", "+    castExp.setProperty(NodeProperties.TYPE, primType.getValue());", "-    args.add(exp);", "+    args.add(castExp);"]}], "num": 9803}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e2542ef02bc1c7f608755739878c6dd", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d071f3997080872aa2eb92ae65f2f15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 234, "signatureBeforeChange": "   public static <T1, T2> Predicate2<T1, T2> and2(Predicate2<? super T1, ? super T2> p1,                                                   Predicate2<? super T1, ? super T2> p2,                                                  Predicate2<? super T1, ? super T2> p3)", "signatureAfterChange": "   public static <T1, T2> Predicate2<T1, T2> and(Predicate2<? super T1, ? super T2> p1,                                                  Predicate2<? super T1, ? super T2> p2,                                                 Predicate2<? super T1, ? super T2> p3)", "diff": ["-  /** @return  The conjunction ({@code &&}) of {@code p1}, {@code p2}, and {@code p3} */", "-  public static <T1, T2> Predicate2<T1, T2> and2(Predicate2<? super T1, ? super T2> p1, ", "-                                                 Predicate2<? super T1, ? super T2> p2,", "-                                                 Predicate2<? super T1, ? super T2> p3) {", "-    return and2(IterUtil.makeIterable(p1, p2, p3));", "-  }", "+  /** Produce the conjunction ({@code &&}) of {@code p1}, {@code p2}, and {@code p3}. */", "+  public static <T1, T2> Predicate2<T1, T2> and(Predicate2<? super T1, ? super T2> p1, ", "+    return new AndPredicate2<T1, T2>(IterUtil.<Predicate2<? super T1, ? super T2>>make(p1, p2, p3));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2113bee653bed56f833f74ab7e93365", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 233, "signatureBeforeChange": "   public static <T1, T2> Predicate2<T1, T2> and2(Predicate2<? super T1, ? super T2> p1,                                                   Predicate2<? super T1, ? super T2> p2)", "signatureAfterChange": "   public static <T1, T2> Predicate2<T1, T2> and(Predicate2<? super T1, ? super T2> p1,                                                  Predicate2<? super T1, ? super T2> p2)", "diff": ["-  /** @return  The conjunction ({@code &&}) of {@code p1} and {@code p2} */", "-  public static <T1, T2> Predicate2<T1, T2> and2(Predicate2<? super T1, ? super T2> p1, ", "-                                                 Predicate2<? super T1, ? super T2> p2) {", "-    return and2(IterUtil.makeIterable(p1, p2));", "-  }", "+  /** Produce the conjunction ({@code &&}) of {@code p1} and {@code p2}. */", "+  public static <T1, T2> Predicate2<T1, T2> and(Predicate2<? super T1, ? super T2> p1, ", "+    return new AndPredicate2<T1, T2>(IterUtil.<Predicate2<? super T1, ? super T2>>make(p1, p2));"]}], "num": 30919}
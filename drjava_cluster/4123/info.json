{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "894e029cc2a2361a9d3a2dc1faa1ec4b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e3be69eb364de57f102ab9016e16337", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "     @Override public Type visit(SimpleAllocation node)", "signatureAfterChange": "     @Override public Type visit(SimpleAllocation node)", "diff": ["-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      Iterable<? extends Expression> args = node.getArguments();", "+      checkList(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "563c7769bcadd4bf4cf7694ae04996be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 26, "signatureBeforeChange": "     @Override public Type visit(SuperMethodCall node)", "signatureAfterChange": "     @Override public Type visit(SuperMethodCall node)", "diff": ["-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      Iterable<? extends Expression> args = node.getArguments();", "+      checkList(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b821c0dcc6ad3cb1373247ed6c795b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "     @Override public Type visit(SimpleMethodCall node)", "signatureAfterChange": "     @Override public Type visit(SimpleMethodCall node)", "diff": ["-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      Iterable<? extends Expression> args = node.getArguments();", "+      checkList(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "789cdd153430f82a34f90d29e49c24b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 32, "signatureBeforeChange": "     @Override public Type visit(AnonymousAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousAllocation node)", "diff": ["-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      Iterable<? extends Expression> args = node.getArguments();", "+      checkList(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c19e707aaf2a30d7d8c3e092f7d121e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "     @Override public Type visit(ObjectMethodCall node)", "signatureAfterChange": "     @Override public Type visit(ObjectMethodCall node)", "diff": ["-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      Iterable<? extends Expression> args = node.getArguments();", "+      checkList(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0a47e87eb97df94d87d3a065d7671e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": "     @Override public Type visit(StaticMethodCall node)", "signatureAfterChange": "     @Override public Type visit(StaticMethodCall node)", "diff": ["-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      Iterable<? extends Expression> args = node.getArguments();", "+      checkList(args);"]}], "num": 4123}
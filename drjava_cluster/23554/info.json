{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1d5cb6e9ea98c0805978fc563e65e9f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc7d3744293eccec917dba77bc700ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 567, "signatureBeforeChange": "   public void updateTabbedPane()", "signatureAfterChange": "           public void run()", "diff": ["-    */", "-  public void updateTabbedPane() {", "-    final JComponent c = (JComponent) _tabbedPane.getSelectedComponent();", "-    synchronized(_updateLock) {", "-      if (c == null || (_tabUpdatePending && c == _lastUpdatedComponent)) return;", "-    }", "-    _tabUpdatePending = true;", "-    Thread updater = new Thread(new Runnable() {", "-      public void run() {", "-        synchronized(_updateLock) { ", "-          try { _updateLock.wait(UPDATE_DELAY); } ", "-          catch(InterruptedException e) { /* fall through */ }", "-        }", "-        EventQueue.invokeLater(new Runnable() { ", "-          public void run() {", "-            synchronized(_updateLock) { ", "-              _tabUpdatePending = false;", "-              _lastUpdatedComponent = c;", "-            }", "-//            System.err.println(\"Repainting \" + c);", "-            c.revalidate();", "-            c.repaint();", "-          }", "-        });", "-      }", "-    });", "-    updater.start();", "-  }", "+        EventQueue.invokeLater(new Runnable() {", "+          public void run() {", "+            synchronized (_updateLock) {", "+              _pendingUpdate = new Runnable() {", "+                public void run() {", "+                  for (final R r: matches) {", "+                    r.updateLines();  // recompute _lineStartPos and _lineEndPos in r", "+//                    System.err.println(\"reloading node for \" + r);", "+                    p._regTreeModel.reload(p.getNode(r));", "+                    p.repaint();", "+                  }", "+                }", "+              };  // end Runnable", "+              if (_tabUpdatePending) return;  // Let the queued task run this update (or a successor)", "+              _tabUpdatePending = true;", "+            } // end synchronized", "+            ", "+            // Create a new update task", "+            new Thread(new Runnable() {", "+              public void run() {", "+                Thread.currentThread().setPriority(UPDATER_PRIORITY);", "+                synchronized (_updateLock) {", "+                  try { _updateLock.wait(UPDATE_DELAY); }  // _pendingUpdate can be updated during wait", "+                  catch(InterruptedException e) { /* fall through */ }", "+                  _tabUpdatePending = false;", "+                } // end synchronized", "+                _pendingUpdate.run();", "+              }", "+            }).start();", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62e88a9709d360ab41d6f63711ef1051", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ArgumentTokenizer.java", "commitBeforeChange": "e6059a690372d24d354206755ceb1326c1718997", "commitAfterChange": "30865706505ac032f7839e76656d4d5fb3416a82", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public ArrayList<String> tokenize(String arguments, boolean stringify)", "signatureAfterChange": "   public ArrayList<String> tokenize(String arguments, boolean stringify)", "diff": ["-              // Seen the close quote; finish this arg and start a new one", "-              argList.add(currArg.toString());", "-              currArg = new StringBuffer();", "-              state = NO_TOKEN_STATE;", "+              // Seen the close quote; continue this arg until whitespace is seen", "+              state = NORMAL_TOKEN_STATE;", "-              // Seen the close quote; finish this arg and start a new one", "-              argList.add(currArg.toString());", "-              currArg = new StringBuffer();", "-              state = NO_TOKEN_STATE;", "+              // Seen the close quote; continue this arg until whitespace is seen", "+              state = NORMAL_TOKEN_STATE;", "-          case NORMAL_TOKEN_STATE:", "-            if (Character.isWhitespace(c)) {", "-              // Whitespace ends the token; start a new one", "-              argList.add(currArg.toString());", "-              currArg = new StringBuffer();", "-              state = NO_TOKEN_STATE;", "-            }", "-            else if (c == '\\\\') {", "-              // Backslash in a normal token: escape the next character", "-              escaped = true;", "-            }", "-            else {", "-              currArg.append(c);", "-            }", "-            break;", "+//          case NORMAL_TOKEN_STATE:", "+//            if (Character.isWhitespace(c)) {", "+//              // Whitespace ends the token; start a new one", "+//              argList.add(currArg.toString());", "+//              currArg = new StringBuffer();", "+//              state = NO_TOKEN_STATE;", "+//            }", "+//            else if (c == '\\\\') {", "+//              // Backslash in a normal token: escape the next character", "+//              escaped = true;", "+//            }", "+//            else if (c == '\\'') {", "+//              state = SINGLE_QUOTE_STATE;", "+//            }", "+//            else if (c == '\"') {", "+//              state = DOUBLE_QUOTE_STATE;", "+//            }", "+//            else {", "+//              currArg.append(c);", "+//            }", "+//            break;", "+          case NORMAL_TOKEN_STATE:", "+                else if (state == NORMAL_TOKEN_STATE) {", "+                  // Whitespace ends the token; start a new one", "+                  argList.add(currArg.toString());", "+                  currArg = new StringBuffer();", "+                  state = NO_TOKEN_STATE;", "+                }"]}], "num": 23554}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b62178a638bb2af132aba196fa3ba995", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16d7e72a14a2f370cb597a22d74ec571", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void addRegion(final R r)", "signatureAfterChange": "   public void addRegion(final R r)", "diff": ["-    if (doc == _cachedDoc) docNode = _cachedDocNode;", "-    else {", "+//    if (doc == _cachedDoc) docNode = _cachedDocNode;", "+//    else {", "-        _cachedDoc = doc;", "-        _cachedDocNode = docNode;", "-        _cachedStartOffset = -1;  // a sentinel value guaranteed to be less than r.getStartOffset()", "-        _cachedRegionIndex = -1;  // The next region in this document will have index 0", "+//        _cachedDoc = doc;", "+//        _cachedDocNode = docNode;", "+//        _cachedStartOffset = -1;  // a sentinel value guaranteed to be less than r.getStartOffset()", "+//        _cachedRegionIndex = -1;  // The next region in this document will have index 0", "-    }", "+//    }", "-    if (doc == _cachedDoc & r.getStartOffset() >= _cachedStartOffset) { // insert new region after previous insert", "-      _cachedRegionIndex++;", "-      _cachedStartOffset = r.getStartOffset();", "-      insertNewRegionNode(r, docNode, _cachedRegionIndex);", "-    }", "-    else {", "+//    if (doc == _cachedDoc & r.getStartOffset() >= _cachedStartOffset) { // insert new region after previous insert", "+//      _cachedRegionIndex++;", "+//      _cachedStartOffset = r.getStartOffset();", "+//      insertNewRegionNode(r, docNode, _cachedRegionIndex);", "+//    }", "+//    else {", "-          _cachedDoc = doc;", "-          _cachedDocNode = docNode;", "-          _cachedRegionIndex = index;", "-          _cachedStartOffset = startOffset;", "+//          _cachedDoc = doc;", "+//          _cachedDocNode = docNode;", "+//          _cachedRegionIndex = index;", "+//          _cachedStartOffset = startOffset;", "-          _cachedDoc = null;  // insertion was not at the end of the region list for doc", "+//          _cachedDoc = null;  // insertion was not at the end of the region list for doc", "-    }", "+//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355bea293c2b1e85cd9eeba9a730c6fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _highlightErrorInSource(Position pos)", "signatureAfterChange": "   private void _highlightErrorInSource(Position pos)", "diff": ["-    if (pos == null) {", "-      return;", "-    }", "+    if (pos == null) return;", "-", "-    try {", "-      String text = _openDoc.getText(0, _openDoc.getLength());", "-", "-      // Look for the previous newline BEFORE this character. Thus start looking", "-      // on the character one before this character. If this is not the case,", "-      // if the error is at a newline character, both prev and next newlines", "-      // will be set to that place, resulting in nothing being highlighted.", "-      int prevNewline = text.lastIndexOf('\\n', errPos - 1);", "-      if (prevNewline == -1) {", "-        prevNewline = 0;", "-      }", "-", "-      int nextNewline = text.indexOf('\\n', errPos);", "-      if (nextNewline == -1) {", "-        nextNewline = _openDoc.getLength();", "-      }", "-", "-      removeHighlight();", "-      ", "-      //Add 1 if not the first line of the file, so that the highlight range", "-      // will match the range chosen for the highlight manager.", "-      if (prevNewline>0) prevNewline++;      ", "-      ", "-      if (prevNewline <= nextNewline) {", "-        _definitionsPane.addErrorHighlight(prevNewline, nextNewline);", "-      }", "-    }", "-    catch (BadLocationException impossible) {", "-      throw new UnexpectedException(impossible);", "+    ", "+    String text = _openDoc.getText();", "+    ", "+    // Look for the previous newline BEFORE this character. Thus start looking", "+    // on the character one before this character. If this is not the case,", "+    // if the error is at a newline character, both prev and next newlines", "+    // will be set to that place, resulting in nothing being highlighted.", "+    int prevNewline = text.lastIndexOf('\\n', errPos - 1);", "+    if (prevNewline == -1) prevNewline = 0;", "+    ", "+    int nextNewline = text.indexOf('\\n', errPos);", "+    if (nextNewline == -1) nextNewline = text.length();", "+    ", "+    removeHighlight();", "+    ", "+    //Add 1 if not the first line of the file, so that the highlight range", "+    // will match the range chosen for the highlight manager.", "+    if (prevNewline>0) prevNewline++;      ", "+    ", "+    if (prevNewline <= nextNewline) {", "+      _definitionsPane.addErrorHighlight(prevNewline, nextNewline);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fe68ce26a7da950c1872b6ce47bcf42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "7cfeeaf9345ca550653b259e08abe84024ba9934", "commitAfterChange": "193d12982052662ec0e78a136e3a67b8a2ade2e4", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public int getCurrentLine()", "signatureAfterChange": "   public int getCurrentLine()", "diff": ["-    // throwErrorHuh();", "-    int here = _currentLocation;", "-    if (_cachedLocation > getLength()) {", "-      // we can't know the last line number after a delete; starting over.", "-      _cachedLocation = 0;", "-      _cachedLineNum = 1;", "-    }", "-    if (_cachedNextLineLoc > getLength()) _cachedNextLineLoc = -1;", "-    // let's see if we get off easy", "-    if ( ! (_cachedPrevLineLoc < here && here < _cachedNextLineLoc )) {", "-", "-      // this if improves performance when moving from the end of the document to the beginnning.", "-      // in essence, it calculates the line number from scratch", "-      if (_cachedLocation - here > here) {", "-        _cachedLocation = 0;", "-        _cachedLineNum = 1;", "+    acquireReadLock();", "+    try {", "+      synchronized(_reduced) {", "+        int here = _currentLocation;", "+        if (_cachedLocation > getLength()) {", "+          // we can't know the last line number after a delete; starting over.", "+          _cachedLocation = 0;", "+          _cachedLineNum = 1;", "+        }", "+        if (_cachedNextLineLoc > getLength()) _cachedNextLineLoc = -1;", "+        // let's see if we get off easy", "+        if ( ! (_cachedPrevLineLoc < here && here < _cachedNextLineLoc )) {", "+          ", "+          // this if improves performance when moving from the end of the document to the beginnning.", "+          // in essence, it calculates the line number from scratch", "+          if (_cachedLocation - here > here) {", "+            _cachedLocation = 0;", "+            _cachedLineNum = 1;", "+          }", "+          int lineOffset = _getRelativeLine();", "+          _cachedLineNum = _cachedLineNum + lineOffset;", "+          ", "+        }", "+        _cachedLocation = here;", "+        _cachedPrevLineLoc = getLineStartPos(here);", "+        _cachedNextLineLoc = getLineEndPos(here);", "+        return _cachedLineNum;", "-      int lineOffset = _getRelativeLine();", "-      _cachedLineNum = _cachedLineNum + lineOffset;", "-", "-    _cachedLocation = here;", "-    _cachedPrevLineLoc = getLineStartPos(here);", "-    _cachedNextLineLoc = getLineEndPos(here);", "-    return _cachedLineNum;", "+    finally { releaseReadLock(); }"]}], "num": 30659}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "659bf96f28b989e066a2b789d988c4bf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9d9ec1aa4373447ccd71ba58606ee4c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 62, "signatureBeforeChange": "   protected void advanceCaret(final int n)", "signatureAfterChange": "      protected void scrollToCaret()", "diff": ["-  /** Advances the caret in the interactions pane by n characters and scrolls the pane to make it visible. */", "-  protected void advanceCaret(final int n) {", "-    /* In legacy unit tests, _pane can apparently be null in some cases.  It can also be mutated in the middle of run() ", "-       in InteractionsDJDocumentTest.testStylesListContentAndReset. */", "-    final InteractionsPane pane = _pane;  ", "-    if (Utilities.TEST_MODE && pane == null) return;  // Some legacy unit tests do not set up an interactions pane", "-    ", "-    Utilities.invokeLater(new Runnable() {  // initialize caret in the interactions pane ", "+  ", "+  protected void scrollToCaret() {", "+    Utilities.invokeLater(new Runnable() {", "-//        pane.validate();", "-        int caretPos = pane.getCaretPosition();", "-        int newCaretPos = Math.min(caretPos + n, _document.getLength());", "-        pane.setCaretPos(newCaretPos);", "+        final InteractionsPane pane = _pane; ", "+        if (pane == null) return;  // Can be called in tests when component has not been realized", "-      } ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c01c405d77cab5cb9564207d00dcf614", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException, InterruptedException", "signatureAfterChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException, InterruptedException", "diff": ["-    doc.acquireWriteLock();", "-    ", "-    try { doc.indentLines(0, doc.getLength()); }", "-    finally { doc.releaseWriteLock(); }", "+//    doc.acquireWriteLock();", "+//    try { ", "+    doc.indentLines(0, doc.getLength()); ", "+//    }", "+//    finally { doc.releaseWriteLock(); }", "-    final int oldPos = pane.getCaretPosition();", "-//    System.err.println(\"Old position is: \" + oldPos);", "-    ", "-        pane.setCaretPosition(newPos);", "+        doc.getUndoManager().undo();", "-    Utilities.clearEventQueue();", "-    // Moving this statement to the event thread breaks \"Undo should have restored ...\"  Why?  Timing.  ", "-    // Inserting Thread.sleep(500) does the same thing", "-    doc.getUndoManager().undo();", "-    ", "+", "-    int rePos = pane.getCaretPosition();", "+    int rePos = doc.getCurrentLocation();", "-    assertEquals(\"Undo should have restored caret position.\", oldPos, rePos);", "+    // cursor will be located at beginning of first line that is changed", "+//    assertEquals(\"Undo should have restored cursor position.\", oldPos, rePos);", "-    assertEquals(\"redo restores caret position\", oldPos, pane.getCaretPosition());", "+//    assertEquals(\"redo restores caret position\", oldPos, pane.getCaretPosition());"]}], "num": 4823}
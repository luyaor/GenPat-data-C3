{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bf7572062eccfd4f35ba67505282f8f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7ca4b5092afddd5c1f5f03ecb40b588", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private void _bookmark()", "signatureAfterChange": "   private void _bookmark()", "diff": ["-    RegionManager<OrderedDocumentRegion> bm = _model.getBookmarkManager();", "+    RegionManager<MovingDocumentRegion> bm = _model.getBookmarkManager();", "-      Collection<OrderedDocumentRegion> conflictingRegions = ", "-        bm.getRegionsOverlapping(r.getDocument(), r.getStartOffset(), r.getEndOffset());", "-      for (OrderedDocumentRegion cr: conflictingRegions) bm.removeRegion(cr);", "-      OrderedDocumentRegion newR = new DocumentRegion(r.getDocument(), r.getStartPosition(), r.getEndPosition());", "-      bm.addRegion(newR);", "+      OpenDefinitionsDocument doc = r.getDocument();", "+      int start = r.getStartOffset();", "+      int end = r.getEndOffset();", "+      Collection<MovingDocumentRegion> conflictingRegions = bm.getRegionsOverlapping(doc, start, end);", "+      for (MovingDocumentRegion cr: conflictingRegions) bm.removeRegion(cr);", "+", "+      int lineStart = r.getLineStart();", "+      int lineEnd = r.getLineEnd();", "+      bm.addRegion(new MovingDocumentRegion(doc, start, end, lineStart, lineEnd));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb1bcbcffff8d88467ac3ea53fedfdb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/ComposedIterable.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public int size(int bound)", "signatureAfterChange": "      public int size(int bound)", "diff": ["-    int result = (_i1Size < 0 ? IterUtil.sizeOf(_i1, bound) : _i1Size) +", "-                 (_i2Size < 0 ? IterUtil.sizeOf(_i2, bound) : _i2Size);", "-    if (result < 0) { result = Integer.MAX_VALUE; } // overflow", "-    return result <= bound ? result : bound;", "+    int size1 = (_i1Size < 0) ? IterUtil.sizeOf(_i1, bound) :", "+                                (bound < _i1Size) ? bound : _i1Size;", "+    int bound2 = bound-size1;", "+    int size2 = (_i2Size < 0) ? IterUtil.sizeOf(_i2, bound2) :", "+                                (bound2 < _i2Size) ? bound2 : _i2Size;", "+    return size1+size2;"]}], "num": 11684}
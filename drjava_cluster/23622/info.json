{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0becd12081df9a0004d8b2c4efde1d11", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35887c6a7f46cb0f88d985f41b9aa4c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 36, "signatureBeforeChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "signatureAfterChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "diff": ["-    Token id;", "+    Token id = null;", "-    id = jj_consume_token(IDENTIFIER);", "-    if (jj_2_9(2147483647)) {", "-      typeArgs = TypeArguments();", "-    } else {", "-      ;", "-    }", "-      list.add(new TreeToken(id));", "-      allTypeArgs.add( typeArgs );", "-      typeArgs = new LinkedList<Type>();", "-    label_5:", "-    while (true) {", "-      if (jj_2_10(2147483647)) {", "-        ;", "-      } else {", "-        break label_5;", "-      }", "-      jj_consume_token(DOT);", "+    try {", "-      if (jj_2_11(2147483647)) {", "+      if (jj_2_9(2147483647)) {", "-      list.add(new TreeToken(id));", "-      allTypeArgs.add( typeArgs );", "-      typeArgs = new LinkedList<Type>();", "-    }", "-      IdentifierToken f  = list.get(0);", "-      IdentifierToken l  = list.get(list.size()-1);", "-      boolean Parameterized = false;", "-      for( int i = 0; i < allTypeArgs.size(); i++ ){", "-        List<? extends Type> targs = allTypeArgs.get(i);", "-        if(targs.size() > 0) {", "-          Parameterized = true;", "-          break;", "-        }", "-      }", "-      if(!Parameterized){", "-        if(TypeParamsMap.containsKey(TreeUtilities.listToName(list))){", "-          {if (true) return TypeParamsMap.get(TreeUtilities.listToName(list));}", "-        } else if(GenericTypesEnv.contains(TreeUtilities.listToName(list))){", "-          {if (true) return GenericTypesEnv.lookup(TreeUtilities.listToName(list));}", "+        list.add(new TreeToken(id));", "+        allTypeArgs.add( typeArgs );", "+        typeArgs = new LinkedList<Type>();", "+      label_5:", "+      while (true) {", "+        if (jj_2_10(2147483647)) {", "+          ;", "-          {if (true) return new ReferenceType(list,", "-                                   filename,", "-                                   f.beginLine(), f.beginColumn(),", "-                                   l.endLine(),   l.endColumn());}", "+          break label_5;", "-      } else {", "-        {if (true) return new GenericReferenceType(list,", "-                                        filename,", "-                                        f.beginLine(), f.beginColumn(),", "-                                        l.endLine(), l.endColumn(),", "-                                        allTypeArgs);}", "+        jj_consume_token(DOT);", "+        id = jj_consume_token(IDENTIFIER);", "+        if (jj_2_11(2147483647)) {", "+          typeArgs = TypeArguments();", "+        } else {", "+          ;", "+        }", "+        list.add(new TreeToken(id));", "+        allTypeArgs.add( typeArgs );", "+        typeArgs = new LinkedList<Type>();", "+        IdentifierToken f  = list.get(0);", "+        IdentifierToken l  = list.get(list.size()-1);", "+        boolean Parameterized = false;", "+        for( int i = 0; i < allTypeArgs.size(); i++ ){", "+          List<? extends Type> targs = allTypeArgs.get(i);", "+          if(targs.size() > 0) {", "+            Parameterized = true;", "+            break;", "+          }", "+        }", "+        if(!Parameterized){", "+          if(TypeParamsMap.containsKey(TreeUtilities.listToName(list))){", "+            {if (true) return TypeParamsMap.get(TreeUtilities.listToName(list));}", "+          } else if(GenericTypesEnv.contains(TreeUtilities.listToName(list))){", "+            {if (true) return GenericTypesEnv.lookup(TreeUtilities.listToName(list));}", "+          } else {", "+            {if (true) return new ReferenceType(list,", "+                                     filename,", "+                                     f.beginLine(), f.beginColumn(),", "+                                     l.endLine(),   l.endColumn());}", "+          }", "+        } else {", "+          {if (true) return new GenericReferenceType(list,", "+                                          filename,", "+                                          f.beginLine(), f.beginColumn(),", "+                                          l.endLine(), l.endColumn(),", "+                                          allTypeArgs);}", "+        }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid Reference name\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3cad28613ece11b0ad856c71102d787", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 78, "signatureBeforeChange": "   final public SwitchStatement switchStatement() throws ParseException", "signatureAfterChange": "   final public SwitchStatement switchStatement() throws ParseException", "diff": ["-    b = jj_consume_token(SWITCH);", "-    jj_consume_token(LPAREN);", "-    sel = expression();", "-    jj_consume_token(RPAREN);", "-    jj_consume_token(LBRACE);", "-    label_24:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case CASE:", "-      case _DEFAULT:", "-        ;", "-        break;", "-      default:", "-        jj_la1[69] = jj_gen;", "-        break label_24;", "-      }", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case CASE:", "-        jj_consume_token(CASE);", "-        val = expression();", "-        break;", "-      case _DEFAULT:", "-        t = jj_consume_token(_DEFAULT);", "-        break;", "-      default:", "-        jj_la1[70] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "-      }", "-      jj_consume_token(COLON);", "-      label_25:", "+    try {", "+      b = jj_consume_token(SWITCH);", "+      jj_consume_token(LPAREN);", "+      sel = expression();", "+      jj_consume_token(RPAREN);", "+      jj_consume_token(LBRACE);", "+      label_24:", "-        case BOOLEAN:", "-        case BREAK:", "-        case BYTE:", "-        case CHAR:", "-        case CLASS:", "-        case CONTINUE:", "-        case DO:", "-        case DOUBLE:", "-        case ENUM:", "-        case FALSE:", "-        case FINAL:", "-        case FLOAT:", "-        case FOR:", "-        case IF:", "-        case INT:", "-        case INTERFACE:", "-        case LONG:", "-        case NEW:", "-        case NULL:", "-        case RETURN:", "-        case SHORT:", "-        case SUPER:", "-        case SWITCH:", "-        case SYNCHRONIZED:", "-        case THIS:", "-        case THROW:", "-        case TRUE:", "-        case TRY:", "-        case VOID:", "-        case WHILE:", "-        case INTEGER_LITERAL:", "-        case LONG_LITERAL:", "-        case FLOAT_LITERAL:", "-        case DOUBLE_LITERAL:", "-        case CHARACTER_LITERAL:", "-        case STRING_LITERAL:", "-        case IDENTIFIER:", "-        case LPAREN:", "-        case LBRACE:", "-        case SEMICOLON:", "-        case INCREMENT:", "-        case DECREMENT:", "+        case CASE:", "+        case _DEFAULT:", "-          jj_la1[71] = jj_gen;", "-          break label_25;", "+          jj_la1[70] = jj_gen;", "+          break label_24;", "-        stat = blockStatement();", "-      list.addAll(stat);", "-      }", "-      int bl, bc, el, ec;", "-      if (t != null) {", "-        bl = t.beginLine;", "-        bc = t.beginColumn;", "-        el = t.endLine;", "-        ec = t.endColumn;", "-      } else {", "-        bl = val.getBeginLine();", "-        bc = val.getBeginColumn();", "-        el = val.getEndLine();", "-        ec = val.getEndColumn();", "-      }", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case CASE:", "+          jj_consume_token(CASE);", "+          val = expression();", "+          break;", "+        case _DEFAULT:", "+          t = jj_consume_token(_DEFAULT);", "+          break;", "+        default:", "+          jj_la1[71] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+        jj_consume_token(COLON);", "+        label_25:", "+        while (true) {", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case BOOLEAN:", "+          case BREAK:", "+          case BYTE:", "+          case CHAR:", "+          case CLASS:", "+          case CONTINUE:", "+          case DO:", "+          case DOUBLE:", "+          case ENUM:", "+          case FALSE:", "+          case FINAL:", "+          case FLOAT:", "+          case FOR:", "+          case IF:", "+          case INT:", "+          case INTERFACE:", "+          case LONG:", "+          case NEW:", "+          case NULL:", "+          case RETURN:", "+          case SHORT:", "+          case SUPER:", "+          case SWITCH:", "+          case SYNCHRONIZED:", "+          case THIS:", "+          case THROW:", "+          case TRUE:", "+          case TRY:", "+          case VOID:", "+          case WHILE:", "+          case INTEGER_LITERAL:", "+          case LONG_LITERAL:", "+          case FLOAT_LITERAL:", "+          case DOUBLE_LITERAL:", "+          case CHARACTER_LITERAL:", "+          case STRING_LITERAL:", "+          case IDENTIFIER:", "+          case LPAREN:", "+          case LBRACE:", "+          case SEMICOLON:", "+          case INCREMENT:", "+          case DECREMENT:", "+            ;", "+            break;", "+          default:", "+            jj_la1[72] = jj_gen;", "+            break label_25;", "+          }", "+          stat = blockStatement();", "+        list.addAll(stat);", "+        }", "+        int bl, bc, el, ec;", "+        if (t != null) {", "+          bl = t.beginLine;", "+          bc = t.beginColumn;", "+          el = t.endLine;", "+          ec = t.endColumn;", "+        } else {", "+          bl = val.getBeginLine();", "+          bc = val.getBeginColumn();", "+          el = val.getEndLine();", "+          ec = val.getEndColumn();", "+        }", "-      if (list.size() != 0) {", "-        Node n = (Node)list.get(list.size() - 1);", "-        el = n.getEndLine();", "-        ec = n.getEndColumn();", "-      }", "+        if (list.size() != 0) {", "+          Node n = (Node)list.get(list.size() - 1);", "+          el = n.getEndLine();", "+          ec = n.getEndColumn();", "+        }", "-      cases.add(new SwitchBlock(val, (list.size() != 0) ? list : null,", "-                                filename,", "-                                bl, bc, el, ec));", "-      val = null;", "-      t   = null;", "-      if (list.size() != 0) {", "-        list = new LinkedList<Node>();", "+        cases.add(new SwitchBlock(val, (list.size() != 0) ? list : null,", "+                                  filename,", "+                                  bl, bc, el, ec));", "+        val = null;", "+        t   = null;", "+        if (list.size() != 0) {", "+          list = new LinkedList<Node>();", "+        }", "+      e = jj_consume_token(RBRACE);", "+        {if (true) return new SwitchStatement(sel, cases,", "+                                   filename,", "+                                   b.beginLine, b.beginColumn,", "+                                   e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid switch statement\");", "-    e = jj_consume_token(RBRACE);", "-      {if (true) return new SwitchStatement(sel, cases,", "-                                 filename,", "-                                 b.beginLine, b.beginColumn,", "-                                 e.endLine,   e.endColumn);}"]}], "num": 23622}
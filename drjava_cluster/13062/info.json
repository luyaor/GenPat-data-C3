{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e57157d3177cbed033374a3318fad09", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3596430b4cd4aea11a99a2d08fabee88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public synchronized int findPrevCharPos(int pos, char[] whitespace)     throws BadLocationException", "signatureAfterChange": "   public int findPrevCharPos(int pos, char[] whitespace)     throws BadLocationException", "diff": ["-  public synchronized int findPrevCharPos(int pos, char[] whitespace)", "-    throws BadLocationException", "-  {", "-    throwErrorHuh();", "+  public int findPrevCharPos(int pos, char[] whitespace)", "+    throws BadLocationException {", "+    // throwErrorHuh();", "-    for (int i=0; i < whitespace.length; i++) {", "-      key += \":\" + whitespace[i];", "-    }", "+    for (int i = 0; i < whitespace.length; i++) { key += \":\" + whitespace[i]; }", "-    if (cached != null) {", "-      return cached.intValue();", "-    }", "-", "-    int j, i;", "-    char c;", "-    String text = getText(0, pos);", "-", "-    final int origLocation = _currentLocation;", "-    // Move reduced model to location pos", "-    _reduced.move(pos - origLocation);", "+    if (cached != null)  return cached.intValue();", "+    ", "-", "-    // Walk backward from specified position", "-    for (i = pos-1; i >= 0; i--) {", "-      boolean isWhitespace = false;", "-      c = text.charAt(i);", "-      // Check if character is whitespace", "-      for (j = 0; j < whitespace.length; j++) {", "-        if (c == whitespace[j]) {", "-          isWhitespace = true;", "+    int i = pos - 1;", "+    String text = getText(0, pos);", "+    ", "+    synchronized(_reduced) {", "+      ", "+      final int origLocation = _currentLocation;", "+      // Move reduced model to location pos", "+      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+      ", "+      // Walk backward from specified position", "+      ", "+      while (i >= 0) { ", "+        /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "+         * text[i+1:pos-1] contains invalid chars */", "+        ", "+        if (match(text.charAt(i), whitespace)) {", "+          // ith char is whitespace", "+          i--;", "+          continue;", "-      }", "-      if (!isWhitespace) {", "-        // Move reduced model to walker's location", "+        ", "+        // Found a non-whitespace char;  move reduced model to location i", "-        reducedPos = i;", "-", "-        // Check if matching char is in comment", "-        if((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-           (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "-          // Ignore matching char", "+        reducedPos = i;                  // reduced model points to i == reducedPos", "+        ", "+        // Check if matching char is within a comment (not including opening two characters)", "+        if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+            (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "+          i--;", "+          continue;", "-        else {", "-          if(_isEndOfComment(text, i)) {", "-            // Move i past the start of comment characters", "-            // and continue searching", "-            i = i - 1;", "-            _reduced.move(-1);", "-            reducedPos = i;", "-          }", "-          else {", "-            // Return position of matching char", "-            _reduced.move(origLocation - i);", "-            _storeInCache(key, new Integer(i));", "-            return i;", "-          }", "+        ", "+        if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "+          // Move i past the first comment character and continue searching", "+          i = i - 2;", "+          continue;", "+        ", "+        // Found valid previous character", "+        break;", "+      ", "+      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+      _reduced.move(origLocation - reducedPos);", "-    _reduced.move(origLocation - reducedPos);", "-    _storeInCache(key, new Integer(ERROR_INDEX));", "-    return ERROR_INDEX;", "+    ", "+    int result = reducedPos;", "+    if (i < 0) result = ERROR_INDEX;", "+    _storeInCache(key, new Integer(result));", "+    return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d633fdeec418d9875b30053ef0c84e05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public synchronized int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)     throws BadLocationException", "diff": ["-  public synchronized int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)", "-    throws BadLocationException", "-  {", "-    throwErrorHuh();", "+  public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)", "+    throws BadLocationException {", "+    // throwErrorHuh();", "-    for (int i=0; i < delims.length; i++) {", "-      key += \":\" + delims[i];", "-    }", "+    for (int i = 0; i < delims.length; i++) { key += \":\" + delims[i]; }", "-    if (cached != null) {", "-      return cached.intValue();", "-    }", "+    if (cached != null) return cached.intValue();", "-    int j, i;", "-    char c;", "+    int reducedPos = pos;", "+    int i;  // index of for loop below", "-    final int origLocation = _currentLocation;", "-    // Move reduced model to location pos", "-    _reduced.move(pos - origLocation);", "-    int reducedPos = pos;", "-    ", "-    // Walk backwards from specificed position", "-    for (i = pos-1; i >= DOCSTART; i--) {", "-      c = text.charAt(i);", "-      // Check if character is one of the delimiters", "-      for (j = 0; j < delims.length; j++) {", "-        if (c == delims[j]) {", "+    synchronized (_reduced) {", "+      ", "+      final int origLocation = _currentLocation;", "+      // Move reduced model to location pos", "+      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+      ", "+      // Walk backwards from specificed position", "+      for (i = pos-1; i >= DOCSTART; i--) {", "+        /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "+         * DOCSTART <= i < reducedPos <= pos */", "+        // Check if ith character is one of the delimiters", "+        if (match(text.charAt(i),delims)) {", "+           ", "-          _reduced.move(i - reducedPos);", "-          reducedPos = i;", "+          _reduced.move(i - reducedPos);  // reduced model points to i", "+          reducedPos = i;                 // reduced model points to reducedPos", "-          // Check if matching char is in comment or quotes", "+          // Check if matching char should be ignored because it is within a comment, ", "+          // quotes, or ignored paren phrase", "-          if (!state.equals(ReducedModelState.FREE)", "-                || _isStartOfComment(text, i)", "-                || ((i > 0) && _isStartOfComment(text, i - 1))) {", "-            // Ignore matching char", "-          } else {", "-            // Found a matching char, check if we should ignore it", "-            if (skipParenPhrases && posInParenPhrase()) {", "-              // In a paren phrase, so ignore", "-            }", "-            else {", "-              // Return position of matching char", "-              _reduced.move(origLocation - i);", "-              _storeInCache(key, new Integer(i));", "-              return i;", "-            }", "-          }", "-          //_reduced.move(pos - i);", "+          if (!state.equals(ReducedModelState.FREE) || _isStartOfComment(text, i)", "+                || ((i > 0) && _isStartOfComment(text, i - 1))", "+                || (skipParenPhrases && posInParenPhrase())) {", "+            continue; // ignore matching char", "+          } ", "+          break;  // found valid matching char", "+      /* Invariant: same as for loop except that DOCSTART-1 <= i <= reducedPos <= pos */", "+      ", "+        // Restore the state of the reduced model;", "+        _reduced.move(origLocation - reducedPos);", "-    _reduced.move(origLocation - reducedPos);", "-    _storeInCache(key, new Integer(ERROR_INDEX));", "-    return ERROR_INDEX;", "+    // Return position of matching char or ERROR_INDEX ", "+    ", "+    if (i == DOCSTART-1) reducedPos = ERROR_INDEX; // No matching char was found", "+    ", "+    _storeInCache(key, new Integer(reducedPos));", "+    return reducedPos;  "]}], "num": 13062}
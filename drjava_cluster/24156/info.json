{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39cc8523aea3fd4173cc443881b364e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06fa70d92d8532fcf70b253d627a51ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "   protected void handleSlaveConnected()", "signatureAfterChange": "   protected void handleSlaveConnected()", "diff": ["-  /** Called when the Interpreter JVM connects to us after being started. */", "+  /** Called when Interpreter JVM connects to us after being started. Assumes that _masterJVMLock is already held. */", "-    _log.logTime(\"thread in connected: \" + Thread.currentThread());", "+    _log.log(\"Main JVM Thread for slave connection is: \" + Thread.currentThread());", "-    synchronized(_interpreterLock) {", "-      // notify a thread that is waiting in ensureInterpreterConnected", "-      _interpreterLock.notify();", "-    }", "+    // notify a thread that is waiting in ensureInterpreterConnected", "+    synchronized(_interpreterLock) { _interpreterLock.notify(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08f11ed094ebd316e4bdd7a2e8ea6e96", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/ExecJVMTest.java", "commitBeforeChange": "8cfaf2efb8ae59b79b9538e0bd5eaf251c6db08b", "commitAfterChange": "b732820bc2f8849bda78001b782e555a753cad1e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testExecFileCreator() throws IOException, InterruptedException", "signatureAfterChange": "   public void testExecFileCreator() throws IOException, InterruptedException", "diff": ["-    Process jvm = ExecJVM.runJVMPropogateClassPath(className,", "+    Process jvm = ExecJVM.runJVMPropagateClassPath(className,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "179c54a3a3606a9514ce79276d2134b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "79727931e016d65bd6dc6c61b777e0998bf7636b", "commitAfterChange": "b0cd47f114771356118cb3166386257fa0295851", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void checkFile(File relativeFile, String funnyName) throws IOException, InvalidPackageException", "signatureAfterChange": "   private void checkFile(File relativeFile, String funnyName) throws IOException, InvalidPackageException", "diff": ["-    FileOps.writeStringToFile(relativeFile, \"package \" + funnyName + \"; class X { }\");", "+    IOUtil.writeStringToFile(relativeFile, \"package \" + funnyName + \"; class X { }\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18edfe48a8186d6f56794f15474eada7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/DisplayVisitor.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public Void visit(QualifiedName node)", "signatureAfterChange": "   public Void visit(AmbiguousName node)", "diff": ["-  public Void visit(QualifiedName node) {", "-    print(\"l.\"+node.getBeginLine()+\" QualifiedName {\");", "+  public Void visit(AmbiguousName node) {", "+    print(\"l.\"+node.getBeginLine()+\" AmbiguousName {\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c51aaa59ebebba3beb62b2f66ca8055", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TopLevelContext.java", "commitBeforeChange": "512658e6d0ae282068e705a86d988618e9ce9c5f", "commitAfterChange": "7d708b4318d2a7ffa9f01174e54dfcf52e139a3d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public TopLevelContext(TypeContext next, Options opt)", "signatureAfterChange": "   public TopLevelContext(TypeContext next, Options opt)", "diff": ["-    _importedMethods = new HashMap<String, DJClass>();", "+    _importedMethods = new IndexedRelation<String, DJClass>(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36cf48788a4bbf0b2a58a99e74b295e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InsertVariableDialog.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   private void initComponents()", "signatureAfterChange": "\r   private void initComponents()", "diff": ["-  /** Build the dialog. */", "-  private void initComponents() {", "-    super.getContentPane().setLayout(new GridLayout(1,1));", "-    ", "-    Action okAction = new AbstractAction(\"Select\") {", "-      public void actionPerformed(ActionEvent e) {", "-        _okCommand();", "-      }", "-    };", "-    _okBtn = new JButton(okAction);", "-    ", "-    Action cancelAction = new AbstractAction(\"Cancel\") {", "-      public void actionPerformed(ActionEvent e) {", "-        _cancelCommand();", "-      }", "-    };", "-    _cancelBtn = new JButton(cancelAction);", "-    ", "-    JPanel buttons = new JPanel();", "-    buttons.add(_okBtn);", "-    buttons.add(_cancelBtn);", "-    ", "-    _helpPane = new JTextPane();", "-    _helpPane.setToolTipText(\"Description of the variable.\");", "-    _helpPane.setEditable(false);", "-    _helpPane.setPreferredSize(new Dimension(500,150));", "-    _helpPane.setBorder(new javax.swing.border.EmptyBorder(0,10,0,10));", "-    JScrollPane helpPaneSP = new JScrollPane(_helpPane);", "-    helpPaneSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);", "-      ", "-    _varValueField = new JTextField();", "-    updatePanes();", "-    _tabbedPane.addChangeListener(new ChangeListener() {", "-      public void stateChanged(ChangeEvent e) {", "-        if (_tabbedPane.getSelectedIndex()<0) { return; }", "-        String category = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());", "-        Map<String, DrJavaProperty> properties = PropertyMaps.ONLY.getProperties(category);", "-        String key = _varTableModel.get(category).getValueAt(_varTable.get(category).getSelectedRow(),0).toString();", "-        DrJavaProperty value = properties.get(key);", "-        _varValueField.setText(value.toString());", "-        _helpPane.setText(value.getHelp());", "-        _helpPane.setCaretPosition(0);", "-        _selected = new edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty>(key, value);", "-      }", "-    });", "-    ", "-    JPanel main = new JPanel(new BorderLayout());", "-    ", "-    JPanel bottom = new JPanel(new BorderLayout());", "-    bottom.add(_varValueField, BorderLayout.CENTER);    ", "-    bottom.add(buttons, BorderLayout.SOUTH);", "-    main.add(bottom, BorderLayout.SOUTH);", "-", "-    GridBagLayout gridbag = new GridBagLayout();", "-    GridBagConstraints c = new GridBagConstraints();", "-    JPanel top = new JPanel(gridbag);", "-    Insets insets = new Insets(0, 10, 5, 10);", "-//    JPanel top = new JPanel(new GridLayout(2,1));", "-    ", "-    c.fill = GridBagConstraints.BOTH;", "-    c.weightx = 1.0;", "-    c.weighty = 3.0;", "-    c.gridwidth = GridBagConstraints.REMAINDER;", "-    gridbag.setConstraints(_tabbedPane, c);", "-    top.add(_tabbedPane);", "-", "-    c.fill = GridBagConstraints.BOTH;", "-    c.weighty = 1.0;", "-    c.insets = insets;", "-    gridbag.setConstraints(helpPaneSP, c);", "-    top.add(helpPaneSP);", "-    main.add(top, BorderLayout.CENTER);", "-    ", "-    //The following line enables to use scrolling tabs.", "-    _tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);", "-    ", "-    // do not allow preview to have focus", "-    _tabbedPane.addFocusListener(new FocusAdapter() {", "-      public void focusLost(FocusEvent e) {", "-        if (e.getOppositeComponent() == _varValueField) {", "-          _tabbedPane.getSelectedComponent().requestFocus();", "-        }", "-      }", "-    });", "-    ", "-    super.getContentPane().add(main);", "-    super.setResizable(false);", "-    pack();        ", "-", "-    MainFrame.setPopupLoc(InsertVariableDialog.this, _mainFrame);", "-  }", "+  /** Build the dialog. */\r", "+  private void initComponents() {\r", "+    super.getContentPane().setLayout(new GridLayout(1,1));\r", "+    \r", "+    Action okAction = new AbstractAction(\"Select\") {\r", "+      public void actionPerformed(ActionEvent e) {\r", "+        _okCommand();\r", "+      }\r", "+    };\r", "+    _okBtn = new JButton(okAction);\r", "+    \r", "+    Action cancelAction = new AbstractAction(\"Cancel\") {\r", "+      public void actionPerformed(ActionEvent e) {\r", "+        _cancelCommand();\r", "+      }\r", "+    };\r", "+    _cancelBtn = new JButton(cancelAction);\r", "+    \r", "+    JPanel buttons = new JPanel();\r", "+    buttons.add(_okBtn);\r", "+    buttons.add(_cancelBtn);\r", "+    \r", "+    _helpPane = new JTextPane();\r", "+    _helpPane.setToolTipText(\"Description of the variable.\");\r", "+    _helpPane.setEditable(false);\r", "+    _helpPane.setPreferredSize(new Dimension(500,150));\r", "+    _helpPane.setBorder(new javax.swing.border.EmptyBorder(0,10,0,10));\r", "+    JScrollPane helpPaneSP = new JScrollPane(_helpPane);\r", "+    helpPaneSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\r", "+      \r", "+    _varValueField = new JTextField();\r", "+    updatePanes();\r", "+    _tabbedPane.addChangeListener(new ChangeListener() {\r", "+      public void stateChanged(ChangeEvent e) {\r", "+        if (_tabbedPane.getSelectedIndex()<0) { return; }\r", "+        String category = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());\r", "+        Map<String, DrJavaProperty> properties = PropertyMaps.TEMPLATE.getProperties(category);\r", "+        String key = _varTableModel.get(category).getValueAt(_varTable.get(category).getSelectedRow(),0).toString();\r", "+        DrJavaProperty value = properties.get(key);\r", "+        _varValueField.setText(value.toString());\r", "+        _helpPane.setText(value.getHelp());\r", "+        _helpPane.setCaretPosition(0);\r", "+        _selected = new edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty>(key, value);\r", "+      }\r", "+    });\r", "+    \r", "+    JPanel main = new JPanel(new BorderLayout());\r", "+    \r", "+    JPanel bottom = new JPanel(new BorderLayout());\r", "+    bottom.add(_varValueField, BorderLayout.CENTER);    \r", "+    bottom.add(buttons, BorderLayout.SOUTH);\r", "+    main.add(bottom, BorderLayout.SOUTH);\r", "+\r", "+    GridBagLayout gridbag = new GridBagLayout();\r", "+    GridBagConstraints c = new GridBagConstraints();\r", "+    JPanel top = new JPanel(gridbag);\r", "+    Insets insets = new Insets(0, 10, 5, 10);\r", "+//    JPanel top = new JPanel(new GridLayout(2,1));\r", "+    \r", "+    c.fill = GridBagConstraints.BOTH;\r", "+    c.weightx = 1.0;\r", "+    c.weighty = 3.0;\r", "+    c.gridwidth = GridBagConstraints.REMAINDER;\r", "+    gridbag.setConstraints(_tabbedPane, c);\r", "+    top.add(_tabbedPane);\r", "+\r", "+    c.fill = GridBagConstraints.BOTH;\r", "+    c.weighty = 1.0;\r", "+    c.insets = insets;\r", "+    gridbag.setConstraints(helpPaneSP, c);\r", "+    top.add(helpPaneSP);\r", "+    main.add(top, BorderLayout.CENTER);\r", "+    \r", "+    //The following line enables to use scrolling tabs.\r", "+    _tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\r", "+    \r", "+    // do not allow preview to have focus\r", "+    _tabbedPane.addFocusListener(new FocusAdapter() {\r", "+      public void focusLost(FocusEvent e) {\r", "+        if (e.getOppositeComponent() == _varValueField) {\r", "+          _tabbedPane.getSelectedComponent().requestFocus();\r", "+        }\r", "+      }\r", "+    });\r", "+    \r", "+    super.getContentPane().add(main);\r", "+    super.setResizable(false);\r", "+    pack();        \r", "+\r", "+    MainFrame.setPopupLoc(InsertVariableDialog.this, _mainFrame);\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc8341e5001b5005e8d46fe1aa08de8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRulesTestCase.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected final void _setDocText(String text) throws BadLocationException", "signatureAfterChange": "   protected final void _setDocText(String text) throws BadLocationException", "diff": ["-      _doc.insertString(0, text, null);", "+      _doc._insertString(0, text, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c328621709a7ca14e7f0245a2b6ebe5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private void _ensureInterpreterConnected()", "signatureAfterChange": "   public void ensureInterpreterConnected()", "diff": ["-  private void _ensureInterpreterConnected() {", "+  public void ensureInterpreterConnected() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4222ac9ec14d8e396d79059faf83fe38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJavaRoot.java", "commitBeforeChange": "12067b12cea198f72f8758eab77d6f544c743a53", "commitAfterChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] _filesToOpen)", "signatureAfterChange": "     public static void main(String[] _filesToOpen)", "diff": ["-      // Make sure all uncaught exceptions are shown in an AWTExceptionHandler", "-      AWTExceptionHandler.setFrame(mf);", "-      System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.AWTExceptionHandler\");", "+      // Make sure all uncaught exceptions are shown in an DrJavaErrorHandler", "+      DrJavaErrorWindow.setFrame(mf);", "+      System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.DrJavaErrorHandler\");", "-      // Show any errors to the real System.err and in an AWTExceptionHandler", "+      // Show any errors to the real System.err and in an DrJavaErrorHandler", "-      new AWTExceptionHandler().handle(t);", "+      new DrJavaErrorHandler().handle(t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c1840654e947d4aff4248c5bb31600", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 41, "signatureBeforeChange": "   protected void handleSlaveQuit(int status)", "signatureAfterChange": "   protected void handleSlaveQuit(int status)", "diff": ["-    // Only restart the slave if _enabled is true", "-    if (_enabled) {", "+    // Only restart the slave if _restart is true", "+//    Utilities.showDebug(\"MainJVM: slaveJVM has quit with status \" + status + \" _restart = \" + _restart + \" _cleanlyRestarting = \" + _cleanlyRestarting);", "+    if (_restart) {", "-      if (!_cleanlyRestarting) {", "-        _interactionsModel.interpreterResetting();", "-      }", "+      if (!_cleanlyRestarting) _interactionsModel.interpreterResetting();", "+//      Utilities.showDebug(\"MainJVM: calling startInterpreterJVM()\");", "-    if (!_cleanlyRestarting) {", "-      _interactionsModel.replCalledSystemExit(status);", "-    }", "+    if (!_cleanlyRestarting) _interactionsModel.replCalledSystemExit(status);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "587475d9365679190e616b139741734b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsEditorKit.java", "commitBeforeChange": "ef8053d5a3d77032e160ea243be48b30918a9ff8", "commitAfterChange": "8a977371ad1fe621f24183ca1ab0253a154a0d13", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "    public Document createDefaultDocument()", "signatureAfterChange": "      public Document createDefaultDocument()", "diff": ["+  ", "-    return new InteractionsDocument();", "+    return new DefaultInteractionsDocument(_model);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59249fed0418386f6072d57d43c0a52b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   protected boolean isException(SymbolData sd)", "signatureAfterChange": "   protected boolean isException(SymbolData sd)", "diff": ["-      sd.isSubClassOf(getSymbolData(\"java.lang.Throwable\", new NullLiteral(SourceInfo.NO_INFO), false, false));", "+      sd.isSubClassOf(getSymbolData(\"java.lang.Throwable\", new NullLiteral(SourceInfo.NONE), false, false));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f73951fb2e4ea25887ca9f5df718ab0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "ed1069955672117b4c9aac0875c5704fb5071788", "commitAfterChange": "bd123d07912360358a1a9262bb626bfc554bdb6a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void addInterpreter(String name, Object thisVal, Class<?> thisClass, Object[] localVars,                              String[] localVarNames, Class<?>[] localVarClasses)", "signatureAfterChange": "   public void addInterpreter(String name, Object thisVal, Class<?> thisClass, Object[] localVars,                              String[] localVarNames, Class<?>[] localVarClasses)", "diff": ["-    TypeContext ctx = new TopLevelContext(_interpreterLoader);", "+    TypeContext ctx = new ImportContext(_interpreterLoader, _interpreterOptions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6573afce61c6b35f0d5e4c3108fe552d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "b1a009357ee38fae7ba4718d569db3d7d864b431", "commitAfterChange": "c18e1b711f51d63da82eefb4c4720e5a5f2e15db", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   private void _setupMiscPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.JAVAC_ALLOW_ASSERT, \"Allow Assert Keyword in Java 1.4\", this,", "-                                                  \"<html>Whether to allow the <code>assert</code> keyword when compiling in Java 1.4.</html>\"));", "+    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.RUN_WITH_ASSERT, \"Enable Assert Statement Execution\", this,", "+                                                  \"<html>Whether to execute <code>assert</code> statements in classes running in the interactions pane.</html>\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70e58f08faf0d1fcfc389948868665b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "1cb938b1998dc1cd68c3e4689c986e43001ea1ec", "commitAfterChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void tearDown() throws IOException", "signatureAfterChange": "   public void tearDown() throws Exception", "diff": ["-  public void tearDown() throws IOException {", "-    ", "-    super.tearDown();", "-    ", "+  public void tearDown() throws Exception {", "-    ", "+", "+", "+    super.tearDown();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7408082498e4657eadb1debbab44bf60", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "4ff3b419fc61aa60e60ddc360a0c79269d4527c2", "commitAfterChange": "b05444f0049567ef7fdf6f83b0e6e8f8afaaa2b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static void main(String[] args)", "signatureAfterChange": "   public static void main(String[] args)", "diff": ["-                ", "+        ", "-      catch (Exception e) {", "-        System.err.println(\"Exception while instantiation slave \" + args[1]);", "+      catch (Throwable e) {", "+        System.err.println(\"Exception while instantiating slave \" + args[1]);", "-    catch (Exception e) {", "+    catch (Throwable e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b32c1cb0e711b96f763209e04183389", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "      private int _findPrevKeyword(String text, String kw, int pos) throws BadLocationException", "signatureAfterChange": "      private int _findPrevKeyword(String text, String kw, int pos) throws BadLocationException", "diff": ["-        ReducedModelState state = _reduced.getStateAtCurrent();", "-        if (!state.equals(FREE) || _isStartOfComment(text, i)", "-              || ((i > 0) && _isStartOfComment(text, i - 1))) {", "+        ReducedModelState state = _reduced._getStateAtCurrent();", "+        if (!state.equals(FREE) || _isStartOfComment(text, i) || ((i > 0) && _isStartOfComment(text, i - 1))) {", "-        else {", "-          break; // found our keyword", "-        }        ", "+        else break; // found our keyword   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e4bc9c9a5b9a54599d5375e69ae9984", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "85538cb484722f3ee8b8f52d4f19defc02bd67d5", "commitAfterChange": "ec727abc662388138ad4bf94694974ef5e13db3c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": "   private void _setupMiscPanel( ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel( ConfigPanel panel)", "diff": ["-    panel.addComponent( new StringOptionComponent ( OptionConstants.WORKING_DIRECTORY, \"Working directory\", this));", "-    panel.addComponent( new IntegerOptionComponent ( OptionConstants.HISTORY_MAX_SIZE, \"Size of Interactions command history\", this));", "+    panel.addComponent( new FileOptionComponent ( OptionConstants.WORKING_DIRECTORY, \"Working directory\", this));", "+    panel.addComponent( new IntegerOptionComponent ( OptionConstants.HISTORY_MAX_SIZE, \"Size of Interactions Command History\", this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89fd656bc151589715b7fac783c9a7c8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "25355ecd0bc01ef2920944ee4f7366c5c45c1e55", "commitAfterChange": "4699abde87bcbebd544d0983c9f0898ff17ad46f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      public void xtestGranularUndo() throws BadLocationException", "signatureAfterChange": "      public void xtestGranularUndo() throws BadLocationException", "diff": ["-    final Action a = KeyBindingManager.Singleton.get(ks);", "+    final Action a = KeyBindingManager.ONLY.get(ks);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "906c985333ca58b5a0915f8f8df874f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "7bb32c28070a4b5d5697c7c88ea0d664289c76e8", "commitAfterChange": "b2ad80c49aaa09f293a5bc1f6664d4cc5243219e", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   private void _notifyListeners(EventNotifier n)", "signatureAfterChange": "   protected void notifyListeners(EventNotifier n)", "diff": ["-  private void _notifyListeners(EventNotifier n) {", "+  protected void notifyListeners(EventNotifier n) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91ad0748f39a1ac208bc077acb1e96a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "405bec7d97445f0020939e0560dc10393430aac1", "commitAfterChange": "070ce5905e33fc289f79bfc0035862d6493d03f5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void _calculatePositions()", "signatureAfterChange": "   private void _calculatePositions()", "diff": ["-              nextNewline = defsText.indexOf('\\n', offset);", "+              nextNewline = defsText.indexOf(newLine, offset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9817f5f2124c733916df5bc046b5033e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/Options.java", "commitBeforeChange": "bb37c635695368e8cc96440bd6b6d051918112f8", "commitAfterChange": "4ebd25942c79fb901c720903ad892355732a9230", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public boolean semicolonIsOptional()", "signatureAfterChange": "   public boolean requireSemicolon()", "diff": ["-  ", "-  public boolean semicolonIsOptional() { return true; }", "+  /** Require a semicolon at the end of statements. */", "+  public boolean requireSemicolon() { return false; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a1f9a06fde44942511008eb6d42771", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "8cfaf2efb8ae59b79b9538e0bd5eaf251c6db08b", "commitAfterChange": "b732820bc2f8849bda78001b782e555a753cad1e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private void checkFile(File relativeFile, String funnyName) throws IOException, InvalidPackageException", "signatureAfterChange": "   private void checkFile(File relativeFile, String funnyName) throws IOException, InvalidPackageException", "diff": ["-    String path = relativeFile.getPath();", "+    String path = relativeFile.getCanonicalPath();", "-    // The source root should be the current directory (as", "-    // a canonical path, of course).", "+    // The source root should be the current directory (as a canonical path, of course)."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a831e39377256429c47fb741d508ef52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public boolean saveSettings()", "signatureAfterChange": "   public boolean saveSettings()", "diff": ["-    _mainFrame.getModel().setJarMainClass(f);", "+    _mainFrame.getModel().setMainClass(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa2360796d7ad05ddd4cc6cc8ace8607", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelControl.java", "commitBeforeChange": "c36376a479e48347a90a7534812768b74b033816", "commitAfterChange": "1018be24b33ba74b1be6da8d72dc97e6545e20b1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public synchronized void resetLocation()", "signatureAfterChange": "   public synchronized void resetLocation()", "diff": ["-    rmc.resetLocation();", "+    rmc.resetWalkerLocationToCursor();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af78f8f3075dc0b4f4c08fe6ea82304f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "14164b6a15fd606e897810fd89f2e7edec0280c4", "commitAfterChange": "52c187d5d51895f0b58a56680e35117f80ff45ef", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   void beginListeningTo(DefinitionsPane defPane)", "signatureAfterChange": "   void beginListeningTo(DefinitionsPane defPane)", "diff": ["-      if (!_machine.isOnMatch() || _findField.getText().equals(\"\")) {", "+      if (!_machine.onMatch() || _findField.getText().equals(\"\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b39cd503930c1d4f4585d9268436b5dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "b20865d9a2ac76baa972c14a0f6e88b4dafc8ed0", "commitAfterChange": "97472913efee2f558cb839d549c0975d61cae86a", "methodNumberBeforeChange": 638, "methodNumberAfterChange": 625, "signatureBeforeChange": "    final private boolean jj_3R_100()", "signatureAfterChange": "    final private boolean jj_3R_100()", "diff": ["-    while (true) {", "-      xsp = jj_scanpos;", "-      if (jj_3_36()) { jj_scanpos = xsp; break; }", "-    }", "+    while (true) {", "+      xsp = jj_scanpos;", "+      if (jj_3_38()) { jj_scanpos = xsp; break; }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bad79f479f5a0a7d8d21e0329ba9f716", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/KeyStrokeOptionComponent.java", "commitBeforeChange": "364d0b19a9e3896eddcd174b6cb5aa4a53e74f1f", "commitAfterChange": "65d59a6eb5c83a25b9e6bfdf698fd61ca6d2f695", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "              public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "              public void processKeyEvent(KeyEvent e)", "diff": ["-            String name = KeyBindingManager.Singleton.getName(configKs._getConfigKeyStroke());", "+            String name = KeyBindingManager.Singleton.getName(configKs.getConfigKeyStroke());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfd2b6e80e86d9942b69af373b350eea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileBuilder.java", "commitBeforeChange": "e90dbd1bb170d6fe2e453ef725d9c5a3af468fcc", "commitAfterChange": "e653942b63325e47383bb429e833afeb308dbf22", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public String makeProjectFile()", "signatureAfterChange": "      public String makeProjectFile()", "diff": ["-    makeEntries(tbr, _miscfiles, \"Misc\", true);", "+    makeEntries(tbr, _builddirfiles, \"BuildDir\", true);", "-    ", "-    ", "-    ", "-    ", "-   ", "-      ", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2db3a7d0817423b0d154312754b0ebf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/UnexpectedException.java", "commitBeforeChange": "9ce808f40b6076339d815a22e65403b4a39abfe7", "commitAfterChange": "438fba41aa60c90aaef8c43e548f8ad5b5529943", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Exception getValue()", "signatureAfterChange": "   public Throwable getContainedThrowable()", "diff": ["-  public Exception getValue() {", "+  public Throwable getContainedThrowable() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c31327ee20c247cb07b19cd1655b6ef1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "997d67839eca4386dbc5f66cebcd8a080dee4cfc", "commitAfterChange": "6321c6a506dc33e42eaf8a2fcb096efc58a17cfa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void beginListeningTo(DefinitionsPane defPane)", "signatureAfterChange": "   public void beginListeningTo(DefinitionsPane defPane)", "diff": ["-      _open = true;", "+      _displayed = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7970c005723aa5cf5ec0b0a77421b04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public void testDancingUIFileOpened() throws IOException", "signatureAfterChange": "   public void testDancingUIFileOpened() throws IOException", "diff": ["-      System.err.println(\"Couldn't fully delete directory \" + _tempDir.getAbsolutePath() + \"\\nDo it by hand.\\n\");", "+      System.out.println(\"Couldn't fully delete directory \" + _tempDir.getAbsolutePath() + \"\\nDo it by hand.\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b10dac22fcc310ffc41532be3ac3b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "commitAfterChange": "b1b91197c778ee62ce767051b412c31f7bcdddb8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   protected synchronized void _resumeWithoutCopyingVariables()     throws DebugException", "signatureAfterChange": "   protected synchronized void _resumeFromStep()     throws DebugException", "diff": ["-  protected synchronized void _resumeWithoutCopyingVariables()", "+  protected synchronized void _resumeFromStep()", "-    _resumeHelper(false);", "+    _resumeHelper(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4f5eb9c38395c49cb8d56cc79edda77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "ea58ebfcec38aad3c446138f5dc29fb9b0bd55b4", "commitAfterChange": "a36f036fed8dd7a9755b2c0fd88168156b516121", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ConfigFrame(MainFrame frame)", "signatureAfterChange": "   public ConfigFrame(MainFrame frame)", "diff": ["-    _dirChooser.setTitle(\"Select\");", "+    _dirChooser.setDialogTitle(\"Select\");"]}], "num": 24156}
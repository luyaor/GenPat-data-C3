{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24f6cba84ed9ef7c17bf5eb8af592aef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0158db0368203500758349ad9aae769b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "signatureAfterChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "diff": ["-    // check to make sure it transitions from flat file mode to project mode well", "-    _frame.open(new FileOpenSelector() {", "-      public File[] getFiles() throws OperationCanceledException {", "-        return new File[] {_file2};", "-      }", "-    });", "+    // open a new file and make it an auxiliary file", "-    ", "+    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+    assertEquals(\"One empty document remaining\", 1, docs.size());", "+    assertEquals(\"Name is (Untitled)\", \"(Untitled)\", _model.getActiveDocument().toString());", "+    ", "+//    System.err.println(Arrays.toString(src));", "+//    System.err.println(Arrays.toString(aux));", "-    assertEquals(\"Wrong file name\", _file1.getCanonicalPath(), src[0].getCanonicalPath());", "+    assertEquals(\"wrong name for _file2\", _file2.getCanonicalPath(), src[0].getCanonicalPath()); // assumes reverse order", "+    assertEquals(\"Wrong name for _file1\", _file1.getCanonicalPath(), src[1].getCanonicalPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dc84c72180e61df27cb6bf3f0220c9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d187ef0ae751d72da55c4bc4f82be93731c1e46f", "commitAfterChange": "d8ed07c181201a238142caf2537f1e0f6da8bb42", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 152, "signatureBeforeChange": "    private void _setUpTabs()", "signatureAfterChange": "    private void _setUpTabs()", "diff": ["-    _outputPane = new OutputPane(_model);", "+    _consoleController = new ConsoleController(_model.getConsoleDocument(),", "+                                               _model.getSwingConsoleDocument());", "+    _consolePane = _consoleController.getPane();", "+    _model.setInputListener(_consoleController.getInputListener());", "+", "-    final JScrollPane outputScroll = ", "-      new BorderlessScrollPane(_outputPane);", "+    final JScrollPane consoleScroll = new BorderlessScrollPane(_consolePane);", "+    final JScrollPane interactionsScroll = new BorderlessScrollPane(_interactionsPane);", "-        if (_tabbedPane.getSelectedComponent() == outputScroll) {", "-          outputScroll.revalidate();", "-          outputScroll.repaint();", "+        if (_tabbedPane.getSelectedComponent() == interactionsScroll) {", "+          _interactionsPane.requestFocus();", "+        }", "+        else if (_tabbedPane.getSelectedComponent() == consoleScroll) {", "+//           consoleScroll.revalidate();", "+//           consoleScroll.repaint();", "+          _consolePane.requestFocus();", "-    _tabbedPane.add(\"Interactions\", new BorderlessScrollPane(_interactionsPane));", "-    _tabbedPane.add(\"Console\", outputScroll);", "+    _tabbedPane.add(\"Interactions\", interactionsScroll);", "+    _tabbedPane.add(\"Console\", consoleScroll);", "-    ", "-    // Select interactions pane when interactions tab is selected", "-    _tabbedPane.addChangeListener(new ChangeListener() {", "-      public void stateChanged(ChangeEvent e) {", "-      if (_tabbedPane.getSelectedIndex() == INTERACTIONS_TAB) {", "-        _interactionsPane.requestFocus();", "-      }", "-    }", "-    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cb4d5b94b58a58ea3718fabcf8034ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testNewFileDisallowAbandon() throws BadLocationException", "signatureAfterChange": "   public void testMultipleFiles() throws BadLocationException", "diff": ["+  public void testMultipleFiles() throws BadLocationException {", "+    assertNumOpenDocs(0);", "+    OpenDefinitionsDocument doc1 = setupDocument(FOO_TEXT);", "+    assertNumOpenDocs(1);", "+", "+    // Create a second, empty document", "+    OpenDefinitionsDocument doc2 = _model.newFile();", "+    assertNumOpenDocs(2);", "+    assertModified(true, doc1);", "+    assertModified(false, doc2);", "+    assertContents(FOO_TEXT, doc1);", "+    assertLength(0, doc2);", "+", "+    // Modify second document", "+    changeDocumentText(BAR_TEXT, doc2);", "+    assertModified(true, doc2);", "+    assertContents(FOO_TEXT, doc1);", "+    assertContents(BAR_TEXT, doc2);", "+  }", "-   */", "-  public void testNewFileDisallowAbandon() throws BadLocationException {", "-    setupDocument(FOO_TEXT);", "-", "-    TestListener listener = new TestListener() {", "-      public boolean canAbandonFile(File file) {", "-        canAbandonCount++;", "-        return false; // no, don't abandon our document!!!", "-    _model.newFile();", "-    listener.assertAbandonCount(1);", "-    assertModified(true);", "-    assertContents(FOO_TEXT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af2ef78e1cf972b9ae31e4c9f69c1ecb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 240, "methodNumberAfterChange": 234, "signatureBeforeChange": "      public StaticMethodInvocation lookupStaticMethod(Type t, String name,                                                     final Iterable<? extends Type> typeArgs,                                                     final Iterable<? extends Expression> args,                                                    final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "      public StaticMethodInvocation lookupStaticMethod(Type t, String name,                                                     final Iterable<? extends Type> typeArgs,                                                     final Iterable<? extends Expression> args,                                                    final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-    MethodFinder<StaticMethodInvocation> finder = new MethodFinder<StaticMethodInvocation>(name, true) {", "-      public StaticMethodInvocationCandidate makeInvocationCandidate(DJMethod m, ClassType declaringType) {", "-        return new StaticMethodInvocationCandidate(m, declaringType, typeArgs, args, expected);", "-      }", "-    };", "-    return finder.findSingleMethod(t);", "+    FunctionInvocationCandidate<DJMethod> result =", "+        new MethodFinder(name, true).findSingleMethod(t, typeArgs, args, expected);", "+    DJMethod m = result.function();", "+    SubstitutionMap sigma = result.substitution();", "+    return new StaticMethodInvocation(m, substitute(m.returnType(), sigma), result.typeArguments(),", "+                                      result.arguments(), substitute(m.thrownTypes(), sigma));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc86a3c321b68476dd8e8b6fc0209be8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "998d49ab48c08c55f388485512c281814a54c029", "commitAfterChange": "a8b8b0a5cb85063013adcdf9293d0c9c540b8baa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testInterpretCurrentInteraction() throws EditDocumentException", "signatureAfterChange": "   public void testInterpretCurrentInteraction() throws Exception", "diff": ["-  public void testInterpretCurrentInteraction() throws EditDocumentException {", "+  public void testInterpretCurrentInteraction() throws Exception {", "-    final String code = \"int x = 3;\";", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        model.interpretCurrentInteraction();", "-//        model.replReturnedVoid(); // pretend call completed", "-      } ", "-    });", "+    model._logInteractionStart();", "+    model.interpretCurrentInteraction();", "+    model._waitInteractionDone();", "+    final String code = \"int x = 3;\";", "-        model.interpretCurrentInteraction();", "-//        model.replReturnedVoid(); ", "+//    System.err.println(\"doc = '\" + doc.getText() + \"'\");", "+    assertTrue(\"Code appended correctly to interactions document\", doc.getText().endsWith(code));", "+//    System.err.println(\"currentInteraction = '\" + doc.getCurrentInteraction() + \"'\");", "+    Utilities.clearEventQueue();", "+    assertTrue(\"Current interaction text is correct\", doc.getCurrentInteraction().equals(code));", "+    ", "+    model._logInteractionStart();", "+    model.interpretCurrentInteraction(); // runs in the event queue ", "+    model._waitInteractionDone();", "+"]}], "num": 15896}
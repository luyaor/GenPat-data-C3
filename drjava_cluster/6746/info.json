{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cbada6a503cce280556ad64aa0feb9c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d960c6d1acc4c73bec769a1e0aa58db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "     public void breakpointSet(final Breakpoint bp)", "signatureAfterChange": "     public void breakpointSet(final Breakpoint bp)", "diff": ["-      // Only change GUI from event-dispatching thread", "-      Runnable doCommand = new Runnable() {", "-        public void run() {", "+//      // Only change GUI from event-dispatching thread", "+//      Runnable doCommand = new Runnable() {", "+//        public void run() {", "-          Enumeration documents = _breakpointRootNode.children();", "+          Enumeration<TreeNode> documents = _breakpointRootNode.children();", "-              Enumeration lineNumbers = doc.children();", "+              Enumeration<TreeNode> lineNumbers = doc.children();", "-                  _bpTreeModel.insertNodeInto(newBreakpoint,", "-                                              doc,", "-                                              doc.getIndex(lineNumber));", "+                  _bpTreeModel.insertNodeInto(newBreakpoint, doc, doc.getIndex(lineNumber));", "-              _bpTreeModel.insertNodeInto(newBreakpoint,", "-                                          doc,", "-                                          doc.getChildCount());", "+              _bpTreeModel.insertNodeInto(newBreakpoint, doc, doc.getChildCount());", "-          _bpTreeModel.insertNodeInto(bpDocNode,", "-                                      _breakpointRootNode,", "-                                      _breakpointRootNode.getChildCount());", "+          _bpTreeModel.insertNodeInto(bpDocNode, _breakpointRootNode, _breakpointRootNode.getChildCount());", "-          _bpTreeModel.insertNodeInto(newBreakpoint,", "-                                      bpDocNode,", "-                                      bpDocNode.getChildCount());", "+          _bpTreeModel.insertNodeInto(newBreakpoint, bpDocNode, bpDocNode.getChildCount());", "-        }", "-      };", "-      Utilities.invokeLater(doCommand);", "+//        }", "+//      };", "+//      Utilities.invokeLater(doCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f95b26c0d8fbcbc8f82fe0992e0ac4fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "17590567cb9f06269b33249dad955c39164a9028", "commitAfterChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "          public List filter(List threads)", "signatureAfterChange": "          public List<ThreadReference> filter(List<ThreadReference> threads)", "diff": ["-    public List filter(List threads) {", "-      LinkedList retList = new LinkedList();", "-      Enumeration keys = _theDeadThreads.keys();", "-      ", "-      /**", "-       * The following code removes dead threads from _theDeadThreads if", "-       * the threads do not appear in the list of threads threads.  This", "-       * must be done to make sure that _theDeadThreads doesn't grow too", "-       * large with useless info", "-       */", "-      while(keys.hasMoreElements()){", "-        Long key = (Long)keys.nextElement();", "-        ", "+    public List<ThreadReference> filter(List<ThreadReference> threads) {", "+      LinkedList<ThreadReference> retList = new LinkedList();", "+      Iterator<Long> keys = _theDeadThreads.keySet().iterator();", "+", "+      // The following code removes dead threads from _theDeadThreads if", "+      // the threads do not appear in the list of threads threads.  This", "+      // must be done to make sure that _theDeadThreads doesn't grow too", "+      // large with useless info.", "+      while(keys.hasNext()){", "+        Long key = keys.next();", "+", "-          if( ((ThreadReference)threads.get(i)).uniqueID() == key.longValue() ){", "+          if(threads.get(i).uniqueID() == key.longValue()){", "-        ", "+", "-      ", "-      Iterator iterator = threads.iterator();", "-      ThreadReference ref = null;", "-      ", "+", "+      Iterator<ThreadReference> iterator = threads.iterator();", "-        ref = (ThreadReference)iterator.next();", "-        if( _theDeadThreads.get(new Long(ref.uniqueID())) == null ){", "+        ThreadReference ref = iterator.next();", "+        if(_theDeadThreads.get(new Long(ref.uniqueID())) == null) {"]}], "num": 6746}
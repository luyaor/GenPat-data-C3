{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0267396f9f80a5acdf4e8f3a9b19bbba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6640243fd4b719fbbb186b6197c5db7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "527b327a81252940ede7723bc28a80b1911fdddb", "commitAfterChange": "60cd84614ab1a6d35590df8d34b30b47cae7364d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "   private void init(boolean info)", "signatureAfterChange": "   private void init(boolean info)", "diff": ["-    _buttonPressed = JOptionPane.CANCEL_OPTION;", "+    _buttonPressed = null;", "-        cancelButtonPressed();", "+        buttonPressed(_actions.get(_actions.size()-1));", "-    _okButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) { okButtonPressed(); }", "-    });", "+    int i = 0;", "+    for (final CloseAction<T> a: _actions) {", "+      _buttons[i] = new JButton(a.getName());", "+      _buttons[i].addActionListener(new ActionListener() {", "+        public void actionPerformed(ActionEvent e) { buttonPressed(a); }", "+      });", "+      ++i;", "+    }", "-    getRootPane().setDefaultButton(_okButton);", "+    getRootPane().setDefaultButton(_buttons[0]);", "-    final JButton cancelButton = new JButton(\"Cancel\");", "-    cancelButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        cancelButtonPressed();", "-      }", "-    });", "-    ", "-        if ((e.getOppositeComponent() != _textField) && ", "-            (e.getOppositeComponent() != _okButton) && ", "-            (e.getOppositeComponent() != cancelButton)) {", "+        boolean bf = false;", "+        for (JButton b: _buttons) { if (e.getOppositeComponent() == b) { bf = true; break; } }", "+        if ((e.getOppositeComponent() != _textField) && (!bf)) {", "-    ourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), new AbstractAction() {", "-      public void actionPerformed(ActionEvent e) {", "-//        System.out.println(\"esc!\");", "-        cancelButtonPressed();", "+    for (final CloseAction<T> a: _actions) {", "+      KeyStroke ks = a.getKeyStroke();", "+      if (ks!=null) {", "+        ourMap.addActionForKeyStroke(ks, new AbstractAction() {", "+          public void actionPerformed(ActionEvent e) {", "+            buttonPressed(a);", "+          }", "+        });", "-    });", "-    ourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), new AbstractAction() {", "-      public void actionPerformed(ActionEvent e) {", "-//        System.out.println(\"enter!\");", "-        okButtonPressed();", "-      }", "-    });", "+    }", "-    ", "-//    _textField.addKeyListener(new KeyAdapter() {", "-//      public void keyTyped(KeyEvent e) {", "-//        char c = e.getKeyChar();", "-//        if ((c != KeyEvent.VK_DELETE) && (c != KeyEvent.VK_BACK_SPACE) && (c >= 32)) {", "-//          String oldMask = _pim.getMask();", "-//          String newMask = oldMask.substring(0, _textField.getCaretPosition()) + c + ", "-//            oldMask.substring(_textField.getCaretPosition());", "-//          _pim.setMask(newMask);", "-//          if (_force && (_pim.getMatchingItems().size()==0)) {", "-//            Toolkit.getDefaultToolkit().beep();", "-//            e.consume();", "-//          }", "-//          _pim.setMask(oldMask);", "-//        }", "-//      }", "-//    });", "-        if ((e.getOppositeComponent() != _strategyBox) && ", "-            (e.getOppositeComponent() != _okButton) && ", "-            (e.getOppositeComponent() != cancelButton)) {", "+        boolean bf = false;", "+        for (JButton b: _buttons) { if (e.getOppositeComponent() == b) { bf = true; break; } }", "+        if ((e.getOppositeComponent() != _strategyBox) && (!bf)) {", "-    c.anchor = GridBagConstraints.SOUTH;", "+    c.anchor = GridBagConstraints.SOUTHWEST;", "+    c.weightx = 1.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER; // end row", "+    c.insets.top = 2;", "+    c.insets.left = 2;", "+    c.insets.bottom = 2;", "+    c.insets.right = 2;", "-    buttonPanel.add(_okButton, bc);", "-    buttonPanel.add(cancelButton, bc);", "+    for(JButton b: _buttons) { buttonPanel.add(b, bc); }", "-    Dimension parentDim = (_owner !=null) ? _owner.getSize() : getToolkit().getScreenSize();", "-    int xs = (int)parentDim.getWidth()/3;", "-    int ys = (int)parentDim.getHeight()/4;", "-    setSize(Math.max(xs,400), Math.max(ys, 300));", "+    // Dimension parentDim = (_owner !=null) ? _owner.getSize() : getToolkit().getScreenSize();", "+    // int xs = (int)parentDim.getWidth()/3;", "+    // int ys = (int)parentDim.getHeight()/4;", "+    // setSize(Math.max(xs,400), Math.max(ys, 300));", "+    pack();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd6d73c5db0daf81f8de93deb347a978", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "433b13a797196089fe338c13ae74a57a898d3d4c", "commitAfterChange": "dffb568c2302b16a97ba0780ebf9b8a7292012c9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, boolean isKSOC)", "signatureAfterChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames)", "diff": ["-    */", "-  public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, boolean isKSOC) {", "-    super(opt, text, parent);", "-    _columnNames = new String[0];", "-", "-    //set up table", "-    _ksData = new Vector<Object[]>();", "-    _data = null;", "-    ", "-    _tableModel = _makeTableModel();    ", "-    _table = new JTable(_tableModel) {", "-      {", "-        final TableCellRenderer renderer = getTableHeader().getDefaultRenderer();", "-        ", "-        //int w = renderer.getTableCellRendererComponent(this,getModel().getColumnName(0), false, false, 0, 0).getPreferredSize().width;", "-        //getColumnModel().getColumn(0).setMinWidth(30);", "-        getColumnModel().getColumn(1).setMinWidth(50);", "-        getColumnModel().getColumn(1).setMaxWidth(50);", "-      }", "-      ", "-      public Component prepareRenderer(final TableCellRenderer renderer,", "-                                       final int row, final int column) {", "-        final Component prepareRenderer = super.prepareRenderer(renderer, row, column);", "-        final TableColumn tableColumn = getColumnModel().getColumn(column);", "-        ", "-        tableColumn.setPreferredWidth(Math.max(prepareRenderer.getPreferredSize().width,tableColumn.getPreferredWidth()));", "-        ", "-        return prepareRenderer;", "-      }    ", "-    };", "-    _table.getColumnModel().getColumn(0).setCellRenderer(new AddButtonRenderer());", "-    _table.getColumnModel().getColumn(0).setCellEditor( new AddButtonEditor(new JCheckBox()));", "-    _table.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());", "-    _table.getColumnModel().getColumn(1).setCellEditor( new ButtonEditor(new JCheckBox()));", "-    _table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "-", "-    resetToCurrent();", "-", "-    //_addButton = new JButton(_getAddAction());", "-    ", "-    /* Only used in VectorFileOptionComponent subclass */", "-    _moveUpButton = new JButton(new AbstractAction(\"Move Up\") {", "-      public void actionPerformed(ActionEvent ae) {", "-        int[] rows = _table.getSelectedRows();", "-        if (rows.length>0) {", "-          _table.getSelectionModel().clearSelection();", "-          for(int i=0; i<rows.length; ++i) {", "-            if (rows[i]>0) {", "-              T el = _data.remove(rows[i]);", "-              _data.insertElementAt(el, rows[i]-1);", "-              _table.getSelectionModel().addSelectionInterval(rows[i]-1,rows[i]-1);", "-              _tableModel.fireTableRowsUpdated(rows[i]-1,rows[i]);", "-            }", "-          }", "-          notifyChangeListeners();", "-        }", "-      }", "-    });", "-", "-    /* Only used in VectorFileOptionComponent subclass */", "-    _moveDownButton = new JButton(new AbstractAction(\"Move Down\") {", "-      public void actionPerformed(ActionEvent ae) {", "-        int[] rows = _table.getSelectedRows();", "-        if (rows.length>0) {", "-          _table.getSelectionModel().clearSelection();", "-          for(int i=0; i<rows.length; ++i) {", "-            if (rows[i]<_data.size()-1) {", "-              T el = _data.remove(rows[i]);", "-              _data.insertElementAt(el, rows[i]+1);", "-              _table.getSelectionModel().addSelectionInterval(rows[i]+1,rows[i]+1);", "-              _tableModel.fireTableRowsUpdated(rows[i],rows[i]+1);", "-            }", "-          }", "-          notifyChangeListeners();", "-        }", "-      }", "-    });", "-    ", "-    _buttonPanel = new JPanel();", "-    _buttonPanel.setBorder(new EmptyBorder(15,15,15,15));", "-    _buttonPanel.setLayout(new BoxLayout(_buttonPanel, BoxLayout.X_AXIS));", "-    ", "-    _buttonPanel.add(Box.createHorizontalGlue());", "-    JLabel spaceFiller = new JLabel();", "-    spaceFiller.setMinimumSize(new Dimension(50,50));", "-    _buttonPanel.add(spaceFiller);", "-    //_addButtons(); // all buttons needs to be added consecutively as a group for glue to work properly               ", "-    _buttonPanel.add(Box.createHorizontalGlue());", "-", "-    _tableScrollPane = new JScrollPane(_table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "-                                       JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "-    _panel = new JPanel(new BorderLayout());", "-    _panel.add(_tableScrollPane, BorderLayout.CENTER);", "-    _panel.add(_buttonPanel, BorderLayout.SOUTH);", "-", "-    int rows = _tableModel.getRowCount();", "-    if (rows == 0) rows = 1;", "-    _tableScrollPane.setPreferredSize(new Dimension(0,  (rows * PIXELS_PER_ROW) - ((2*rows)-1)));", "-    if (_columnNames.length==0) {", "-      _table.setTableHeader(null);", "-      _tableScrollPane.setColumnHeaderView(null);", "-    }", "-  }"]}], "num": 2283}
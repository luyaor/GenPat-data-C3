{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf2f0dece6cd4efc6d33735c125cb0e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e82f3e91e50f94f74e9c37abbc2fd2b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 25, "signatureBeforeChange": "          public IncrementalThreadController(boolean start)", "signatureAfterChange": "   public static <I, R>       IncrementalTaskController<I, R> computeWithExecutor(IncrementalTask<? extends I, ? extends R> task,                                                           Executor exec)", "diff": ["-    ", "-    public IncrementalThreadController(boolean start) {", "-      _continueMonitor = new CompletionMonitor(start);", "-      _intermediateResults = new ConcurrentBox<List<I>>(new LinkedList<I>());", "-      if (start) { _status = Status.RUNNING; }", "-    }", "+   */", "+  public static <I, R>", "+      IncrementalTaskController<I, R> computeWithExecutor(IncrementalTask<? extends I, ? extends R> task,", "+                                                          Executor exec) {", "+    return computeWithExecutor(task, exec, true, false);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bf0fe7b001180b87c899488b7abe1cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "6f501e5fca95aec34d7430b68d9d987e33ec6129", "commitAfterChange": "f175bd951be0706c1171fa45b387f5428c58ddb3", "methodNumberBeforeChange": 206, "methodNumberAfterChange": 232, "signatureBeforeChange": "     public LambdaValue(T arg)", "signatureAfterChange": "   public static <T, R> SizedIterable<R> diagonalCrossFold(Iterable<? extends Iterable<? extends T>> iters, R base,                                                           Lambda2<? super R, ? super T, ? extends R> combiner)", "diff": ["+   */", "+  public static <T, R> SizedIterable<R> diagonalCrossFold(Iterable<? extends Iterable<? extends T>> iters, R base,", "+                                                          Lambda2<? super R, ? super T, ? extends R> combiner) {", "+    SizedIterable<R> result = singleton(base);", "+    for (Iterable<? extends T> iter : iters) {", "+      result = new DiagonalCartesianIterable<R, T, R>(result, iter, combiner);", "+    }", "+    return result;", "+  }", "-    private final T _arg;", "-    public LambdaValue(T arg) { _arg = arg; }"]}], "num": 28371}
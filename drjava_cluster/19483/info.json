{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfe9042659c13bf1d014acfa31202c15", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d0a232276d58fa811cba37c2b20cebe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "d177c7b252113934f48a076489797b39dc0f639d", "commitAfterChange": "a58ec688d3981da4575e2c6fb686db26b70ae68b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public Class visit(DoStatement node)", "signatureAfterChange": "   public Class visit(DoStatement node)", "diff": ["-    // Check the condition", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+    Expression exp = node.getCondition();", "+    Class type = exp.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "+    }", "+    ", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"exp.booleanValue();\"", "+      node.setCondition(_unbox(exp, type));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19a8b16d61b92bf9fdb509abc4cf9a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "   public Class visit(ConditionalExpression node)", "signatureAfterChange": "   public Class visit(ConditionalExpression node)", "diff": ["+    // Get the type of the conidition expression", "+    Expression condExp = node.getConditionExpression();", "+    Class type = condExp.acceptVisitor(this);", "+    ", "-    if (node.getConditionExpression().acceptVisitor(this) != boolean.class) {", "+    if (type != boolean.class && type != Boolean.class) {", "+    // Auto-unbox, if necessary", "+    if (type == Boolean.class) {", "+      node.setConditionExpression(_unbox(condExp, type));", "+    }", "+", "-    Node  n1 = node.getIfTrueExpression();", "-    Node  n2 = node.getIfFalseExpression();", "+    Node n1 = node.getIfTrueExpression();", "+    Node n2 = node.getIfFalseExpression();", "+    // See if the expression is typable", "-    } else if (c1 == null) {", "+    } ", "+    else if (c1 == null) {", "-    } else if (c2 == null) {", "+    }", "+    else if (c2 == null) {", "-    } else if (!c1.isPrimitive() && !c2.isPrimitive()) {", "+    }", "+    else if (!c1.isPrimitive() && !c2.isPrimitive()) {", "-      } else if (c2.isAssignableFrom(c1)) {", "+      }", "+      else if (c2.isAssignableFrom(c1)) {", "-      } else {", "+      }", "+      else {", "-    } else if (c1 == boolean.class || c2 == boolean.class ||", "-               c1 == void.class    || c2 == void.class) {", "+    } ", "+    else if (c1 == boolean.class || c2 == boolean.class ||", "+             c1 == void.class    || c2 == void.class) {", "-    } else if ((c1 == short.class && c2 == byte.class) ||", "-               (c1 == byte.class  && c2 == short.class)) {", "+    }", "+    else if ((c1 == short.class && c2 == byte.class) ||", "+             (c1 == byte.class  && c2 == short.class)) {", "-    } else if ((c2 == byte.class || c2 == short.class || c2 == char.class) &&", "-               n1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "-      Number n = (Number)n1.getProperty(NodeProperties.VALUE);", "+    }", "+    else if ((c2 == byte.class || c2 == short.class || c2 == char.class) &&", "+             n1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "+      Number n = (Number) n1.getProperty(NodeProperties.VALUE);", "-        } else {", "+        }", "+        else {", "-      } else if (n.intValue() == n.shortValue()) {", "+      } ", "+      else if (n.intValue() == n.shortValue()) {", "-      } else {", "+      }", "+      else {", "-    } else if ((c1 == byte.class || c1 == short.class || c1 == char.class) &&", "+    } ", "+    else if ((c1 == byte.class || c1 == short.class || c1 == char.class) &&", "-        } else {", "+        } ", "+        else {", "-      } else if (n.intValue() == n.shortValue()) {", "+      } ", "+      else if (n.intValue() == n.shortValue()) {", "-      } else {", "+      }", "+      else {", "-    } else if (c1 == double.class || c2 == double.class) {", "+    } ", "+    else if (c1 == double.class || c2 == double.class) {", "-    } else if (c1 == float.class || c2 == float.class) {", "+    }", "+    else if (c1 == float.class || c2 == float.class) {", "-    } else if (c1 == long.class || c2 == long.class) {", "+    } ", "+    else if (c1 == long.class || c2 == long.class) {", "-    } else {", "+    }", "+    else {"]}], "num": 19483}
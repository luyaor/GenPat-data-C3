{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e5e0edee96232aede0046eeb4468fb3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0aae37fc3351b78a80357a355daee065", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public TypeData forClassDef(ClassDef that)", "signatureAfterChange": "   public TypeData forClassDef(ClassDef that)", "diff": ["-    ClassBodyTypeChecker cbtc = null;", "+    ", "-        _addError(\"Class \" + sd.getName() + \" does not have any valid test methods.  Test methods must be declared public, must return void, and must start with the word \\\"test\\\"\", that); ", "+        _addError(\"Class \" + sd.getName() + \" does not have any valid test methods.  \" +", "+                    \"Test methods must be declared public, must return void, and must start with the word \\\"test\\\"\", ", "+                  that); ", "-//    //This is bad because it means that in this instance, the type checker is not language independent.", "-//    //However, until we get to this point, it is impossible to tell if the class is a subclass of", "-//    //TestCase that does not directly extend test case.  For instance, if class A extends", "-//    //class B and class B extends TestCase, we would not know until this pass that class A also extends", "-//    //test case.", "-//    else {//if it is not a test class, and we are at the intermediate or elementary level, void is not allowed", "-//      if (LanguageLevelConverter.isElementaryFile(_file)) {  ", "-//        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Elementary\");", "-//      }", "-//      else if (LanguageLevelConverter.isIntermediateFile(_file)) {", "-//        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Intermediate\");", "-//      }", "-//    } ", "+    ClassBodyTypeChecker cbtc = ", "+      new ClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), ", "+                               new LinkedList<Pair<SymbolData, JExpression>>());", "-    if (cbtc == null) {", "-      cbtc = new ClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>());", "-    }", "-    if (!cbtc.hasConstructor) {", "+    if (! cbtc.hasConstructor) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e0b18276c251f50b65eba0e665caa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public TypeData forClassDef(ClassDef that)", "signatureAfterChange": "   public TypeData forClassDef(ClassDef that)", "diff": ["-      if (!foundOne) {", "+      if (! foundOne) {", "-    //This is bad because it means that in this instance, the type checker is not language independent.", "-    //However, until we get to this point, it is impossible to tell if the class is a subclass of", "-    //TestCase that does not directly extend test case.  For instance, if class A extends", "-    //class B and class B extends TestCase, we would not know until this pass that class A also extends", "-    //test case.", "-    else {//if it is not a test class, and we are at the intermediate or elementary level, void is not allowed", "-      if (LanguageLevelConverter.isElementaryFile(_file)) {  ", "-        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Elementary\");", "-      }", "-      else if (LanguageLevelConverter.isIntermediateFile(_file)) {", "-        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Intermediate\");", "-      }", "-    } ", "+//    //This is bad because it means that in this instance, the type checker is not language independent.", "+//    //However, until we get to this point, it is impossible to tell if the class is a subclass of", "+//    //TestCase that does not directly extend test case.  For instance, if class A extends", "+//    //class B and class B extends TestCase, we would not know until this pass that class A also extends", "+//    //test case.", "+//    else {//if it is not a test class, and we are at the intermediate or elementary level, void is not allowed", "+//      if (LanguageLevelConverter.isElementaryFile(_file)) {  ", "+//        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Elementary\");", "+//      }", "+//      else if (LanguageLevelConverter.isIntermediateFile(_file)) {", "+//        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Intermediate\");", "+//      }", "+//    } "]}], "num": 21479}
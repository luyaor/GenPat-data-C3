{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b052a92f78f69005c4931552bc770a9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c0351b682b4d5c085865b06bc82d88f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": "     @Override public Type visit(ConstructorCall node)", "signatureAfterChange": "          @Override public Type visit(ConstructorCall node)", "diff": ["-     */", "-      if (node.getExpression() != null) {", "-        throw new ExecutionError(\"not.implemented\", node);", "-      }", "-      ", "-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "-      ", "-      // TODO: implement explict type arguments in constructor calls", "-      Iterable<Type> targs = IterUtil.empty();", "-      ", "-      Type result;", "-      if (node.isSuper()) { result = context.getSuperType(ts); }", "-      else { result = SymbolUtil.thisType(context.getThis()); }", "-      if (result == null) {", "-        throw new IllegalArgumentException(\"Can't check a ConstructorCall in this context\");", "-      }", "-      ", "-      try {", "-        ConstructorInvocation inv = ts.lookupConstructor(result, targs, args, expected);", "-        ", "-        // TODO: Check accessibility of constructor", "-        // Note that super constructor calls *have to* be accessible, even if accessibility", "-        // checking is turned off -- a call to a private constructor cannot be compiled", "-        // in a way that it will run successfully (since constructor calls are the only code", "-        // that is directly compiled rather than being interpreted, we don't have this problem", "-        // elsewhere)", "-        checkThrownExceptions(inv.thrown(), node);", "-        node.setArguments(CollectUtil.makeList(inv.args()));", "-        setConstructor(node, inv.constructor());", "-        return setType(node, result);", "-      }", "-      catch (InvalidTypeArgumentException e) {", "-        throw new ExecutionError(\"type.argument\", node);", "-      }", "-      catch (TypeSystemException e) {", "-        setErrorStrings(node, ts.userRepresentation(result), nodeTypesString(args));", "-        throw new ExecutionError(\"no.such.constructor\", node);", "-      }", "+      throw new ExecutionError(\"constructor.call\", node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a02c2d4ed88229fb4879b8a0ce60bbe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "commitAfterChange": "ff142f6bee221c65d8a36e94ac6a2e4478194666", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Object visit(ForStatement node)", "signatureAfterChange": "   public Object visit(ForEachStatement node)", "diff": ["+   */", "+  public Object visit(ForEachStatement node){", "+    /* to be filled in shortly */", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77cc235f99c27ad210b9ebcb68c0df8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "commitAfterChange": "850fd7d9c2b07bd8d8874ff715e83f1d390c4b0b", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 109, "signatureBeforeChange": "   final public Type type() throws ParseException", "signatureAfterChange": "   final public Type type() throws ParseException", "diff": ["-    List<IdentifierToken> ls  = null;", "-    List<Type> typeArgs = null;", "+    Type rt = null;", "-      ls = name();", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case LESS:", "-        typeArgs = TypeArguments();", "-        break;", "-      default:", "-        jj_la1[110] = jj_gen;", "-        ;", "-      }", "+      rt = ReferenceTypeName();", "-      jj_la1[111] = jj_gen;", "+      jj_la1[109] = jj_gen;", "-    label_40:", "+    label_41:", "-        jj_la1[112] = jj_gen;", "-        break label_40;", "+        jj_la1[110] = jj_gen;", "+        break label_41;", "-      Type rt;", "-      } else {", "-        IdentifierToken f  = ls.get(0);", "-        IdentifierToken l  = ls.get(ls.size()-1);", "-        if(typeArgs == null){", "-          if(TypeParamsMap.containsKey(TreeUtilities.listToName(ls))){", "-            rt = TypeParamsMap.get(TreeUtilities.listToName(ls));", "-          } else if(GenericTypesEnv.contains(TreeUtilities.listToName(ls))){", "-            rt = GenericTypesEnv.lookup(TreeUtilities.listToName(ls));", "-          } else {", "-            rt = new ReferenceType(ls,", "-                                   filename,", "-                                   f.beginLine(), f.beginColumn(),", "-                                   l.endLine(),   l.endColumn());", "-          }", "-        } else {", "-          rt = new GenericReferenceType(ls,", "-                                        filename,", "-                                        f.beginLine(), f.beginColumn(),", "-                                        l.endLine(), l.endColumn(),", "-                                        typeArgs);", "-        }"]}], "num": 12135}
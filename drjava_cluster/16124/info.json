{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "160acf3793a0f47f15d9aca49b0f9c5f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "120e9200c9f5a793be3d1bb9131e9a29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "eb8f1a08f585431afff35aec705cfd9169bfce44", "commitAfterChange": "b2d820b253c15b02ecb50e43e9a336a56dadd45e", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public ArrayList<DebugStackData> getCurrentStackFrameData() throws DebugException", "signatureAfterChange": "   public ArrayList<DebugStackData> getCurrentStackFrameData() throws DebugException", "diff": ["-      for (StackFrame f : thread.frames()) { frames.add(new JPDAStackData(f)); }", "+      // get a list of language level files whose line numbers need to be translated ", "+      final List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()){ files.add(odd.getRawFile()); }", "+      for (StackFrame f : thread.frames()) {", "+        // map Java line numbers to LL line numbers", "+        String method = JPDAStackData.methodName(f);", "+        int lineNum = f.location().lineNumber();", "+        String sourceName = null;", "+        try {", "+          sourceName = f.location().sourceName();", "+        }", "+        catch(com.sun.jdi.AbsentInformationException aie) { sourceName = null; }", "+        StackTraceElement ste = new StackTraceElement(f.location().declaringType().name(),", "+                                                      f.location().method().name(),", "+                                                      sourceName,", "+                                                      f.location().lineNumber());", "+        ste = getLLSTM().replaceStackTraceElement(ste, files);", "+        frames.add(new JPDAStackData(method, ste.getLineNumber()));", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3f0724c366dd7a77f35fab5f6422900", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "b2d820b253c15b02ecb50e43e9a336a56dadd45e", "commitAfterChange": "a80c6de11e537b6579c447ea812ef2f4f98b5f2f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public ArrayList<DebugStackData> getCurrentStackFrameData() throws DebugException", "signatureAfterChange": "   public ArrayList<DebugStackData> getCurrentStackFrameData() throws DebugException", "diff": ["-        int lineNum = f.location().lineNumber();", "-        String sourceName = null;", "-        try {", "-          sourceName = f.location().sourceName();", "-        }", "-        catch(com.sun.jdi.AbsentInformationException aie) { sourceName = null; }", "-        StackTraceElement ste = new StackTraceElement(f.location().declaringType().name(),", "-                                                      f.location().method().name(),", "-                                                      sourceName,", "-                                                      f.location().lineNumber());", "-        ste = getLLSTM().replaceStackTraceElement(ste, files);", "+        StackTraceElement ste = getLLStackTraceElement(f.location(), files);"]}], "num": 16124}
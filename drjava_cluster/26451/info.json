{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4af3f95d49865fd0dab84c5e1d7999b2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7533243d59f73a2ab2e1a0e157db474f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "b4cb953a15f76465c4fdfdd0a3efe47737f78efc", "commitAfterChange": "da8b20243b85298aada190df10fa721e07aae787", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 129, "signatureBeforeChange": "       public void run(final Type t)", "signatureAfterChange": "     @Override public void run(final Type t)", "diff": ["+     */", "+    @Override public void run(final Type t) {", "+//        String prefix = \"\"; for (int i = 0; i < _stack.size(); i++) { prefix += \"  \"; }", "+//        System.out.println(prefix + \"Running on id \" + System.identityHashCode(t) + \": \" + t);", "+      Runnable recur = new Runnable() { public void run() { t.apply(TypeWriter.this); } };", "+      Runnable dontRecur = new Runnable() { public void run() { _result.append(\"...\"); } };", "+      //Threshold of 2 causes the loop to be printed twice", "+      _stack.run(recur, dontRecur, t/*, 2*/); ", "+    }", "-       */", "-      public void run(final Type t) {", "-//        String prefix = \"\"; for (int i = 0; i < _stack.size(); i++) { prefix += \"  \"; }", "-//        System.out.println(prefix + \"Running on id \" + System.identityHashCode(t) + \": \" + t);", "-        Runnable recur = new Runnable() { public void run() { t.apply(DumpType.this); } };", "-        Runnable dontRecur = new Runnable() { public void run() { result.append(\"...\"); } };", "-        //Threshold of 2 causes the loop to be printed twice", "-        _stack.run(recur, dontRecur, t/*, 2*/); ", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dbd17486f4ef8db1ddfb28058d17a12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigatorTest.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testRenameDocument()", "signatureAfterChange": "   public void testRenameDocument()", "diff": ["-    String name = \"MyTest.dj0\";", "-    String newName = \"MyTest.dj0*\";", "-    DummyINavigatorItem item = new DummyINavigatorItem(name);", "-    DummyINavigatorItem newItem = new DummyINavigatorItem(newName);", "-//    Object _lock = new Object();", "-//    synchronized(_lock) {", "-      tree.addDocument(item, \"folder3\");", "-//    }", "+    final String name = \"MyTest.dj0\";", "+    final String newName = \"MyTest.dj0*\";", "+    final DummyINavigatorItem item = new DummyINavigatorItem(name);", "+    final DummyINavigatorItem newItem = new DummyINavigatorItem(newName);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { tree.addDocument(item, \"folder3\"); } });", "-//    synchronized(_lock) {", "-      tree.refreshDocument(item, \"folder3\");", "-//    }", "-//    synchronized(_lock) {", "-      assertEquals(\"folder3 should have 1 children\", 1, folder3.getChildCount());", "-      LeafNode<?> node = (LeafNode<?>)folder3.getChildAt(0);", "-      assertEquals(\"node should have correct name\", name, node.toString());", "-      tree.removeDocument(item);", "-      tree.addDocument(newItem, \"folder3\");", "-      folder3 = (InnerNode)source.getChildAt(2);", "-      LeafNode<?> newNode = (LeafNode<?>)folder3.getChildAt(0);", "-      ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { tree.refreshDocument(item, \"folder3\"); } });", "+    assertEquals(\"folder3 should have 1 children\", 1, folder3.getChildCount());", "+    LeafNode<?> node = (LeafNode<?>)folder3.getChildAt(0);", "+    assertEquals(\"node should have correct name\", name, node.toString());", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        tree.removeDocument(item);", "+        tree.addDocument(newItem, \"folder3\");", "+      }", "+    });", "+    folder3 = (InnerNode)source.getChildAt(2);", "+    LeafNode<?> newNode = (LeafNode<?>)folder3.getChildAt(0);", "+    ", "-      assertEquals(\"should have been renamed\", newName, newNode.toString());", "-      assertEquals(\"node should have same parent\", folder3, newNode.getParent());", "-      tree.removeDocument(newItem);", "-//    }", "+    assertEquals(\"should have been renamed\", newName, newNode.toString());", "+    assertEquals(\"node should have same parent\", folder3, newNode.getParent());", "+    Utilities.invokeAndWait(new Runnable() { public void run() { tree.removeDocument(newItem); } });"]}], "num": 26451}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9388ab5aa8a6537614bdd3a038f58d1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d88f04773e920ef415cd2078984b10c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "c07811a825e46f15913018c8f4b0427903961cb5", "commitAfterChange": "37ff27cd96cbab2c1d1fedd5b6fb9abe124be61d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r   public void addRegion(final R r)", "signatureAfterChange": "   public void addRegion(final R r)", "diff": ["-    */\r", "-  public void addRegion(final R r) {\r", "-    String name = \"\";\r", "-    try { name = r.getDocument().getQualifiedClassName(); }\r", "-    catch (ClassNameNotFoundException cnnfe) { name = r.getDocument().toString(); }\r", "-\r", "-    DefaultMutableTreeNode regDocNode = new DefaultMutableTreeNode(name);\r", "-    \r", "-    // Look for matching document node\r", "-    // Raw type here due to Swing's use of raw types.\r", "-    Enumeration documents = _regionRootNode.children();\r", "-    boolean done = false;\r", "-    while (!done && (documents.hasMoreElements())) {\r", "-      DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();\r", "-      if (doc.getUserObject().equals(regDocNode.getUserObject())) {\r", "-        \r", "-        // Create a new region in this node\r", "-        // Sort regions by start offset.\r", "-        // Raw type here due to Swing's use of raw types.\r", "-        Enumeration existingRegions = doc.children();\r", "-        while (existingRegions.hasMoreElements()) {\r", "-          DefaultMutableTreeNode existing = (DefaultMutableTreeNode)existingRegions.nextElement();\r", "-          \r", "-          // if start offset of indexed regions is less than new region, continue\r", "-          int ofs = r.getStartOffset();\r", "-          if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() == ofs) {\r", "-            // don't add, already there\r", "-            // just make sure this node is visible\r", "-            _regTree.scrollPathToVisible(new TreePath(existing));\r", "-            done = true;\r", "-            break;\r", "-          }\r", "-          else if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() > ofs) {\r", "-            \r", "-            // else, add to the list\r", "-            DefaultMutableTreeNode newRegion = new DefaultMutableTreeNode(makeRegionTreeUserObj(r));\r", "-            _regTreeModel.insertNodeInto(newRegion, doc, doc.getIndex(existing));\r", "-            \r", "-            // Make sure this node is visible\r", "-            _regTree.scrollPathToVisible(new TreePath(newRegion.getPath()));\r", "-            done = true;\r", "-            break;\r", "-          }\r", "-        }\r", "-        if (done) { break; }\r", "-        \r", "-        // if none are greater, add at the end\r", "-        DefaultMutableTreeNode newRegion = new DefaultMutableTreeNode(makeRegionTreeUserObj(r));\r", "-        _regTreeModel.insertNodeInto(newRegion, doc, doc.getChildCount());\r", "-        \r", "-        // Make sure this node is visible\r", "-        _regTree.scrollPathToVisible(new TreePath(newRegion.getPath()));\r", "-        done = true;\r", "-        break;\r", "-      }\r", "-    }\r", "-    \r", "-    if (!done) {\r", "-      // No matching document node was found, so create one\r", "-      _regTreeModel.insertNodeInto(regDocNode, _regionRootNode, _regionRootNode.getChildCount());\r", "-      DefaultMutableTreeNode newRegion = new DefaultMutableTreeNode(makeRegionTreeUserObj(r));\r", "-      _regTreeModel.insertNodeInto(newRegion, regDocNode, regDocNode.getChildCount());\r", "-      \r", "-      // Make visible\r", "-      TreePath pathToNewRegion = new TreePath(newRegion.getPath());\r", "-      _regTree.scrollPathToVisible(pathToNewRegion);\r", "-    }\r", "-    \r", "-    updateButtons();\r", "-  }\r", "+    */", "+  public void addRegion(final R r) {", "+    File file = r.getDocument().getRawFile();", "+//    try { name = r.getDocument().getQualifiedClassName(); }", "+//    catch (ClassNameNotFoundException cnnfe) { name = r.getDocument().toString(); }", "+", "+    DefaultMutableTreeNode regDocNode = new DefaultMutableTreeNode(file);", "+    ", "+    // Look for matching document node", "+    // Raw type here due to Swing's use of raw types.", "+    Enumeration documents = _regionRootNode.children();", "+    boolean done = false;", "+    while (!done && (documents.hasMoreElements())) {", "+      DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+      if (doc.getUserObject().equals(regDocNode.getUserObject())) {", "+        ", "+        // Create a new region in this node", "+        // Sort regions by start offset.", "+        // Raw type here due to Swing's use of raw types.", "+        Enumeration existingRegions = doc.children();", "+        while (existingRegions.hasMoreElements()) {", "+          DefaultMutableTreeNode existing = (DefaultMutableTreeNode)existingRegions.nextElement();", "+          ", "+          // if start offset of indexed regions is less than new region, continue", "+          int ofs = r.getStartOffset();", "+          if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() == ofs) {", "+            // don't add, already there", "+            // just make sure this node is visible", "+            _regTree.scrollPathToVisible(new TreePath(existing));", "+            done = true;", "+            break;", "+          }", "+          else if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() > ofs) {", "+            ", "+            // else, add to the list", "+            DefaultMutableTreeNode newRegion = new DefaultMutableTreeNode(makeRegionTreeUserObj(r));", "+            _regTreeModel.insertNodeInto(newRegion, doc, doc.getIndex(existing));", "+            ", "+            // Make sure this node is visible", "+            _regTree.scrollPathToVisible(new TreePath(newRegion.getPath()));", "+            done = true;", "+            break;", "+          }", "+        }", "+        if (done) { break; }", "+        ", "+        // if none are greater, add at the end", "+        DefaultMutableTreeNode newRegion = new DefaultMutableTreeNode(makeRegionTreeUserObj(r));", "+        _regTreeModel.insertNodeInto(newRegion, doc, doc.getChildCount());", "+        ", "+        // Make sure this node is visible", "+        _regTree.scrollPathToVisible(new TreePath(newRegion.getPath()));", "+        done = true;", "+        break;", "+      }", "+    }", "+    ", "+    if (!done) {", "+      // No matching document node was found, so create one", "+      _regTreeModel.insertNodeInto(regDocNode, _regionRootNode, _regionRootNode.getChildCount());", "+      DefaultMutableTreeNode newRegion = new DefaultMutableTreeNode(makeRegionTreeUserObj(r));", "+      _regTreeModel.insertNodeInto(newRegion, regDocNode, regDocNode.getChildCount());", "+      ", "+      // Make visible", "+      TreePath pathToNewRegion = new TreePath(newRegion.getPath());", "+      _regTree.scrollPathToVisible(pathToNewRegion);", "+    }", "+    ", "+    updateButtons();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "406b31b2de2a5a2302aaf852ac7afec4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "b9f87cd074abdafacdb2719b29e0803fd0f81cf0", "commitAfterChange": "04d7824a20eb03ad17793ba3198be21442313bdc", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r   public void addRegion(final R r)", "signatureAfterChange": "   public void addRegion(final R r)", "diff": ["-    */\r", "-  public void addRegion(final R r) {\r", "-    File file = r.getDocument().getRawFile();\r", "-//    try { name = r.getDocument().getQualifiedClassName(); }\r", "-//    catch (ClassNameNotFoundException cnnfe) { name = r.getDocument().toString(); }\r", "-    \r", "-    DefaultMutableTreeNode regDocNode = new DefaultMutableTreeNode(file);\r", "-    \r", "-    // Look for matching document node\r", "-    // Raw type here due to Swing's use of raw types.\r", "-    Enumeration documents = _regionRootNode.children();\r", "-    boolean done = false;\r", "-    while (! done && (documents.hasMoreElements())) {\r", "-      DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();\r", "-      if (doc.getUserObject().equals(regDocNode.getUserObject())) {\r", "-        \r", "-        // Create a new region in this node\r", "-        // Sort regions by start offset.\r", "-        // Raw type here due to Swing's use of raw types.\r", "-        Enumeration existingRegions = doc.children();\r", "-        while (existingRegions.hasMoreElements()) {\r", "-          DefaultMutableTreeNode existing = (DefaultMutableTreeNode)existingRegions.nextElement();\r", "-          \r", "-          // if start offset of indexed regions is less than new region, continue\r", "-          int ofs = r.getStartOffset();\r", "-          if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() == ofs) {\r", "-            _changeState.scrollPathToVisible(new TreePath(existing));\r", "-            _changeState.setLastAdded(existing);\r", "-            done = true;\r", "-            break;\r", "-          }\r", "-          else if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() > ofs) {\r", "-            \r", "-            // else, add to the list\r", "-            DefaultMutableTreeNode newRegion = new DefaultMutableTreeNode(makeRegionTreeUserObj(r));\r", "-            _regTreeModel.insertNodeInto(newRegion, doc, doc.getIndex(existing));\r", "-\r", "-            // Make sure this node is visible\r", "-            _changeState.scrollPathToVisible(new TreePath(newRegion.getPath()));\r", "-            _changeState.setLastAdded(newRegion);\r", "-            done = true;\r", "-            break;\r", "-          }\r", "-        }\r", "-        if (done) { break; }\r", "-        \r", "-        // if none are greater, add at the end\r", "-        DefaultMutableTreeNode newRegion = new DefaultMutableTreeNode(makeRegionTreeUserObj(r));\r", "-        _regTreeModel.insertNodeInto(newRegion, doc, doc.getChildCount());\r", "-        \r", "-        // Make sure this node is visible\r", "-        _changeState.scrollPathToVisible(new TreePath(newRegion.getPath()));\r", "-        _changeState.setLastAdded(newRegion);\r", "-        done = true;\r", "-        break;\r", "-      }\r", "-    }\r", "-    \r", "-    if (! done) {\r", "-      // No matching document node was found, so create one\r", "-      _regTreeModel.insertNodeInto(regDocNode, _regionRootNode, _regionRootNode.getChildCount());\r", "-      DefaultMutableTreeNode newRegion = new DefaultMutableTreeNode(makeRegionTreeUserObj(r));\r", "-      _regTreeModel.insertNodeInto(newRegion, regDocNode, regDocNode.getChildCount());\r", "-      \r", "-      // Make visible\r", "-      _changeState.scrollPathToVisible(new TreePath(newRegion.getPath()));\r", "-      _changeState.setLastAdded(newRegion);\r", "-    }\r", "-    \r", "-    _changeState.updateButtons();\r", "-  }\r", "+    */", "+  public void addRegion(final R r) {", "+    OpenDefinitionsDocument doc = r.getDocument();", "+    File file = doc.getRawFile();", "+    ", "+    DefaultMutableTreeNode docNode = _regionManager.getTreeNode(doc);", "+    if (docNode == null) {", "+      // No matching document node was found, so create one", "+      docNode = new DefaultMutableTreeNode(file);", "+      _regTreeModel.insertNodeInto(docNode, _rootNode, _rootNode.getChildCount());", "+      _regionManager.setTreeNode(doc, docNode);", "+    }", "+    ", "+    @SuppressWarnings(\"unchecked\")", "+    Enumeration<DefaultMutableTreeNode> regionNodes = (Enumeration<DefaultMutableTreeNode>) docNode.children();", "+    ", "+    // Create a new region node in this document node list, where regions are sorted by start offset.", "+    int offset = r.getStartOffset();", "+    ", "+    for (int index = 0; true ; index++) {  // infinite loop incrementing index on each iteration", "+  ", "+      if (! regionNodes.hasMoreElements()) { // exhausted all elements; insert new region node at end", "+        insertNewRegionNode(r, docNode, index);", "+        break;", "+      }", "+      DefaultMutableTreeNode node = regionNodes.nextElement();", "+      ", "+      @SuppressWarnings(\"unchecked\")", "+      RegionTreeUserObj<R> userObject = (RegionTreeUserObj<R>) node.getUserObject();", "+      R nodeRegion = userObject.region();", "+      int nodeOffset = nodeRegion.getStartOffset();", "+      ", "+      if (nodeOffset == offset) {", "+        // region with same start offset already exists", "+        if (nodeRegion.getEndOffset() == r.getEndOffset()) {", "+          // silently suppress inserting region; can this happen?  Caller should suppress it.", "+          _changeState.scrollPathToVisible(new TreePath(node));", "+          _changeState.setLastAdded(node);", "+          break;", "+        }", "+        else { // new region is distinct from nodeRegion", "+          insertNewRegionNode(r, docNode, index);", "+          break;", "+        }", "+      }", "+      else if (nodeOffset > offset) {", "+        insertNewRegionNode(r, docNode, index);", "+        break;", "+      }", "+    }    ", "+    _changeState.updateButtons();", "+  }"]}], "num": 10144}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89338f94182b250deb11ef2b5f283e1a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b9a0bbf10d244439374ade4e93357e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "42465b0c95801c83cae0d8e781c43cb17e95c775", "commitAfterChange": "dd7f7fbbfae186b155b4ab01f1629e1623154745", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "   private static void checkAssignmentStaticRules(Class lc, Class rc,                                                  Node node, Node v)", "signatureAfterChange": "   private static Expression checkAssignmentStaticRules(Class lc, Class rc,                                                  Node node, Expression v)", "diff": ["-  private static void checkAssignmentStaticRules(Class lc, Class rc,", "-                                                 Node node, Node v) {", "+  private static Expression checkAssignmentStaticRules(Class lc, Class rc,", "+                                                 Node node, Expression v) {", "+          if (rc == Boolean.class) {", "+            return _unbox(v,Boolean.class);", "+          }", "+          if (rc == Byte.class) {", "+            return _unbox(v,Byte.class);", "+          }", "-              return;", "+              return v;", "-        else if ((lc == short.class || rc == char.class) &&", "-                   (rc != byte.class && rc != short.class && rc != char.class)) {", "+        else if ((lc == short.class || lc == char.class) &&", "+                 (rc != byte.class && rc != short.class && rc != char.class)) {", "+          if (lc == short.class && rc == Short.class) {", "+            return _unbox(v, Short.class);", "+          }", "+          if (lc == char.class && rc == Character.class) {", "+            return _unbox(v, Character.class);", "+          }", "-              return;", "+              return v;", "-                   (rc != byte.class  &&", "-                    rc != short.class &&", "-                    rc != char.class  &&", "-                    rc != int.class)) {", "+                 (rc != byte.class  &&", "+                  rc != short.class &&", "+                  rc != char.class  &&", "+                  rc != int.class)) {", "+          if (rc == Byte.class      || rc == Short.class ||", "+              rc == Character.class || rc == Integer.class) {", "+            return _unbox(v, rc);", "+          }", "-                   (rc == null          ||", "-                    !rc.isPrimitive()   ||", "-                    rc == void.class    ||", "-                    rc == boolean.class ||", "-                    rc == float.class   ||", "-                    rc == double.class)) {", "+                 (rc == null          ||", "+                  !rc.isPrimitive()   ||", "+                  rc == void.class    ||", "+                  rc == boolean.class ||", "+                  rc == float.class   ||", "+                  rc == double.class)) {", "+          if (_isBoxingType(rc) && _isIntegralType(rc)) {", "+            return _unbox(v, rc);", "+          }", "-                   (rc == null          ||", "-                    !rc.isPrimitive()   ||", "-                    rc == void.class    ||", "-                    rc == boolean.class ||", "-                    rc == double.class)) {", "+                 (rc == null          ||", "+                  !rc.isPrimitive()   ||", "+                  rc == void.class    ||", "+                  rc == boolean.class ||", "+                  rc == double.class)) {", "+          if (_isBoxingType(rc) && rc != Boolean.class && rc != Double.class) {", "+            return _unbox(v, rc);", "+          }", "-                   (rc == null        ||", "-                    !rc.isPrimitive() ||", "-                    rc == void.class  ||", "-                    rc == boolean.class)) {", "+                 (rc == null        ||", "+                  !rc.isPrimitive() ||", "+                  rc == void.class  ||", "+                  rc == boolean.class)) {", "+          if (_isBoxingType(rc) && rc != Boolean.class) {", "+            return _unbox(v, rc);", "+          }", "+        if (_boxesTo(rc, lc)) { ", "+          return _box(v, rc);", "+        }", "+    return v;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de4b80ac864119d9a3d738bd6511b3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "1e77c64ba83c36855cc971f17dd702002ed1f841", "commitAfterChange": "7f1dfe0049dc6481ecb6545fa089b139bb9c72af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-      \"Remove the specified file or directory, recursively if desired. Evaluates to the empty string \\\"\\\" if successful.\\n\" +", "-      \"Required attributes:\\n\" +", "+      \"Remove the specified file or directory, recursively if desired. Evaluates to the empty string \\\"\\\" \" + ", "+      \"if successful.\\n\" + \"Required attributes:\\n\" +", "-      \"Returns the current time in milliseconds since 01/01/1970, unless other format is specified by the fmt attribute.\\n\" +", "-      \"Optional attributes:\\n\" +", "+      \"Returns the current time in milliseconds since 01/01/1970, \" + ", "+      \"unless other format is specified by the fmt attribute.\\n\" + \"Optional attributes:\\n\" + ", "-    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "-                                        <Double,Double,Double>(\"sub\",", "-                                                               \"Returns the difference between the two operands (op1-op2).\\n\" +", "-                                                               \"Required attributes:\\n\" +", "-                                                               \"\\top1=\\\"<string evaluating to a number>\\\"\\n\" +", "-                                                               \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                               lam27,", "-                                                               UnaryOpProperty.PARSE_DOUBLE,", "-                                                               UnaryOpProperty.PARSE_DOUBLE,", "-                                                               UnaryOpProperty.FORMAT_DOUBLE));", "+    PropertyMaps.TEMPLATE.", "+      setProperty(\"Misc\", new BinaryOpProperty", "+                    <Double,Double,Double>(\"sub\",", "+                                           \"Returns the difference between the two operands (op1-op2).\\n\" +", "+                                           \"Required attributes:\\n\" +", "+                                           \"\\top1=\\\"<string evaluating to a number>\\\"\\n\" +", "+                                           \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                           lam27,", "+                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                           UnaryOpProperty.FORMAT_DOUBLE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2862ff99e5dbcf60044bc444d0a1f0b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewVersionPopup.java", "commitBeforeChange": "69317eecda3235d4815eb5d9a5b9e536b8481c4a", "commitAfterChange": "3549437d3f0aec05949cb330cf74662cd269bb15", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 13, "signatureBeforeChange": "      protected void updateAction()", "signatureAfterChange": "      protected void updateAction()", "diff": ["-          final File targetFile = getTargetFile();", "-          LOG.log(\"\\ttargetFile = \" + targetFile);", "+          final File targetFile = FileOps.getDrJavaApplicationFile();", "+          LOG.log(\"\\ttargetFile = \"+targetFile);", "-          LOG.log(\"\\tfileName = \" + fileName);", "+          LOG.log(\"\\tfileName = \"+fileName);", "-          LOG.log(\"Downloading to \" + destFile);", "+          LOG.log(\"Downloading to \"+destFile);", "-            LOG.log(\"Searching for \" + macTarFile);", "+            LOG.log(\"Searching for \"+macTarFile);", "-                LOG.log(\"Searching for \" + macTarFile);", "+                LOG.log(\"Searching for \"+macTarFile);", "-          BufferedInputStream tempClassIn = new BufferedInputStream(new FileInputStream(getDrJavaFile()));", "+          BufferedInputStream tempClassIn = new BufferedInputStream(new FileInputStream(FileOps.getDrJavaFile()));", "-          LOG.log(\"Copied drjava.jar to \" + tempClassFile);", "+          LOG.log(\"Copied drjava.jar to \"+tempClassFile);", "-          LOG.log(\"fileURL = \" + fileURL);", "+          LOG.log(\"fileURL = \"+fileURL);", "-          ProgressMonitorInputStream pin = new ProgressMonitorInputStream(_mainFrame, \"Downloading \" + fileName + \" ...\", in);", "+          ProgressMonitorInputStream pin = new ProgressMonitorInputStream(_mainFrame, \"Downloading \"+fileName+\" ...\", in);", "-          LOG.log(\"Downloaded to \" + destFile);", "+          LOG.log(\"Downloaded to \"+destFile);", "-                LOG.log(\"Exception in shutdown hook: \" + e);", "+                LOG.log(\"Exception in shutdown hook: \"+e);", "-                                              \"A new version of DrJava was downloaded. However,\\n\" + ", "-                                              \"it could not be started automatically.\\n\\n\" + ", "-                                              \"The new copy is now installed at:\\n\" + ", "-                                              finalDestFile.getAbsolutePath() + \"\\n\\n\" + ", "-                                              \"The old copy is still installed at:\\n\" + ", "-                                              targetFile.getAbsolutePath() + \"\\n\\n\" + ", "+                                              \"A new version of DrJava was downloaded. However,\\n\"+", "+                                              \"it could not be started automatically.\\n\\n\"+", "+                                              \"The new copy is now installed at:\\n\"+", "+                                              finalDestFile.getAbsolutePath()+\"\\n\\n\"+", "+                                              \"The old copy is still installed at:\\n\"+", "+                                              targetFile.getAbsolutePath()+\"\\n\\n\"+", "-                                        \"A new version of DrJava was downloaded. However, you chose\\n\" + ", "-                                        \"not to restart DrJava, so the old version was not automatically\\n\" + ", "-                                        \"replaced.\\n\\n\" + ", "-                                        \"The new copy is now installed at:\\n\" + ", "-                                        finalDestFile.getAbsolutePath() + \"\\n\\n\" + ", "-                                        \"The old copy is still installed at:\\n\" + ", "+                                        \"A new version of DrJava was downloaded. However, you chose\\n\"+", "+                                        \"not to restart DrJava, so the old version was not automatically\\n\"+", "+                                        \"replaced.\\n\\n\"+", "+                                        \"The new copy is now installed at:\\n\"+", "+                                        finalDestFile.getAbsolutePath()+\"\\n\\n\"+", "+                                        \"The old copy is still installed at:\\n\"+", "-        catch(IOException e) { abortUpdate(\"Error installing update:\\n\" + e.getMessage()); return; }", "+        catch(IOException e) { abortUpdate(\"Error installing update:\\n\"+e.getMessage()); return; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af11e3c48b982415a99faa61cb254d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "diff": ["-                                                       \"Java Version for \\\"Open Java API Javadoc\\\"\", this,", "-                                                       \"The version of the Java API documentation to be used.\"));", "+                                                       \"Java Version for \\\"Open Java API Javadoc\\\"\", ", "+                                                       this,", "+                                                       \"Version of the Java API documentation to be used.\"));", "-                                                       \"Access Level\", this,", "+                                                       \"Access Level\", ", "+                                                       this,", "-                                                       \"Java Version for Javadoc Links\", this,", "-                                                       \"The version of Java for generating links to online Javadoc documentation.\"));", "+                                                       \"Java Version for Javadoc Links\", ", "+                                                       this,", "+                                                       \"Version of Java for generating links to online Javadoc documentation.\"));", "-                                                 \"Javadoc 1.3 URL\", this,", "-                                                 \"The URL to the Java 1.3 API, for generating links to library classes.\"));", "+                                                 \"Javadoc 1.3 URL\", ", "+                                                 this,", "+                                                 \"URL for the Java 1.3 API, for generating links to library classes.\"));", "-                                                 \"The URL to the Java 1.4 API, for generating links to library classes.\"));", "+                                                 \"URL for the Java 1.4 API, for generating links to library classes.\"));", "-                                                 \"The URL to the Java 1.5 API, for generating links to library classes.\"));", "+                                                 \"URL for the Java 1.5 API, for generating links to library classes.\"));", "-                                                 \"The URL to the Java 1.6 API, for generating links to library classes.\"));", "+                                                 \"URL for the Java 1.6 API, for generating links to library classes.\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "359ed63d00e311583c7d254f614ee495", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "f835199d645f480bb352cc51cff6dc5ae32e7dc4", "commitAfterChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 195, "signatureBeforeChange": "                          @Override public ConstraintSet forParameterizedClassType(final ParameterizedClassType arg)", "signatureAfterChange": "          public ConstraintFormula equivalentNorm(final Type arg, final Type param)", "diff": ["-            ", "-            @Override public ConstraintSet forParameterizedClassType(final ParameterizedClassType arg) {", "-              ConstraintSet matchConstraints = UNSATISFIABLE_CONSTRAINTS;", "-              if (param.ofClass().equals(arg.ofClass())) {", "-                Thunk<ConstraintSet> recurOnTargs = new Thunk<ConstraintSet>() {", "-                  public ConstraintSet value() {", "-                    ParameterizedClassType argCap = capture(arg);", "-                    ConstraintSet result = EMPTY_CONSTRAINTS;", "-                    for (Pair<Type, Type> pair : IterUtil.zip(argCap.typeArguments(), param.typeArguments())) {", "-                      final Type argArg = pair.first();", "-                      final Type paramArg = pair.second();", "-                      result = result.and(paramArg.apply(new TypeAbstractVisitor<ConstraintSet>() {", "-                        public ConstraintSet defaultCase(Type paramArg) { ", "-                          return inferFromEqual(argArg, paramArg, vars, stack);", "-                        }", "-                        @Override public ConstraintSet forWildcard(Wildcard paramArg) {", "-                          ConstraintSet cs = inferFromSupertype(argArg, paramArg.symbol().lowerBound(),", "-                                                                vars, stack);", "-                          if (cs.isSatisfiable()) {", "-                            cs = cs.and(inferFromSubtype(argArg, paramArg.symbol().upperBound(), vars, stack));", "-                          }", "-                          return cs;", "-                        }", "-                      }));", "-                      if (!result.isSatisfiable()) { break; }", "-                    }", "-                    return result;", "-                  }", "-                };", "-                matchConstraints = stack.apply(recurOnTargs, EMPTY_CONSTRAINTS, arg, param, ", "-                                               InferenceMode.SUBTYPE);", "-              }", "-              ", "-              ConstraintSet superConstraints = UNSATISFIABLE_CONSTRAINTS;", "-              Type argSuper = immediateSupertype(arg);", "-              if (argSuper != null) { superConstraints = inferFromSubtype(argSuper, param, vars, stack); }", "-              ", "-              return matchConstraints.or(superConstraints);", "-            }", "+    ", "+    public ConstraintFormula equivalentNorm(final Type arg, final Type param) {", "+      ConstraintFormula result = subtypeNorm(arg, param);", "+      if (result.isSatisfiable()) { result = result.and(supertypeNorm(arg, param)); }", "+      return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a818901e94ffca51d3ece6ebe01a5b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/BalancingStreamTokenizer.java", "commitBeforeChange": "6b690d7e50bc9f782260d6c38aaf261dfe0715e0", "commitAfterChange": "8b2531509cebe19f9248dfcfb27c6842d311bd33", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public String getNextToken() throws IOException", "signatureAfterChange": "   public String getNextToken() throws IOException", "diff": ["+            _token = Token.NORMAL;", "+            _token = Token.NORMAL;", "+          _token = Token.QUOTED;", "+            _token = Token.NORMAL;", "+          _token = Token.KEYWORD;", "+        }", "+        else {", "+          // there was an escape", "+          // see if whitespace or escape is coming up", "+          // System.err.println(\"There was an escape\");", "+          int cnext = nextToken();", "+          if ((cnext!=(int)_escape) && (!_state.whitespace.contains(cnext))) {", "+            // System.err.println(\"But it's not an escape or whitespace\");", "+            // see if a quote might be coming up", "+            String temp = findMatch(cnext, _state.quotes, new Lambda<String,String>() {", "+              public String apply(String in) { ", "+                // push the tokens back", "+                for(int i=in.length()-1; i>0; --i) {", "+                  pushToken(in.charAt(i));", "+                }", "+                return null;", "+              }", "+            });", "+            if (temp!=null) {", "+              // push the tokens back", "+              for(int i=temp.length()-1; i>0; --i) {", "+                pushToken(temp.charAt(i));", "+              }", "+              // System.err.println(\"It looks like a quote\");", "+            }", "+            else {", "+              // System.err.println(\"But it's not a quote\");", "+              // it wasn't a quote, see if it could be a keyword", "+              temp = findMatch(cnext, _state.keywords, new Lambda<String,String>() {", "+                public String apply(String in) {", "+                  // push the tokens back", "+                  for(int i=in.length()-1; i>0; --i) {", "+                    pushToken(in.charAt(i));", "+                  }", "+                  return null;", "+                }", "+              });", "+              if (temp!=null) {", "+                // push the tokens back", "+                for(int i=temp.length()-1; i>0; --i) {", "+                  pushToken(temp.charAt(i));", "+                }", "+                // System.err.println(\"It looks like a keyword\");", "+              }", "+              else {", "+                // System.err.println(\"But it's not a keyword ==> lone escape\");", "+                // neither a quote nor a keyword coming up", "+                // lone escape", "+                buf.append(String.valueOf(_escape));", "+                _isEscape = _wasEscape = false;", "+              }", "+            }", "+          }", "+          pushToken(cnext);", "+      _token = Token.NORMAL;", "+    _token = Token.END;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5065221d661eed71c1c98a16de536874", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "362905f63dbb4da65eed4f6ca60b6ce9eca3dd7d", "commitAfterChange": "3850150af41978c240def27dca112da787cdab55", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "   private void _setupInteractionsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupInteractionsPanel(ConfigPanel panel)", "diff": ["+    final DirectoryOptionComponent wdComponent =", "+      new DirectoryOptionComponent(OptionConstants.FIXED_INTERACTIONS_DIRECTORY,", "+                                   \"Interactions Working Directory\", this,", "+                                   \"<html>Working directory for the Interactions Pane (unless<br>\"+", "+                                   \"a project working directory has been set).</html>\",", "+                                   _dirChooser);", "+    addOptionComponent(panel, wdComponent);", "+    final BooleanOptionComponent stickyComponent = ", "+      new BooleanOptionComponent(OptionConstants.STICKY_INTERACTIONS_DIRECTORY,", "+                                 \"<html><p align=\\\"right\\\">\" + ", "+                                 StringOps.", "+                                   splitStringAtWordBoundaries(\"Restore last working directory of the Interactions pane on start up\",", "+                                                               33, \"<br>\", SEPS), this,", "+                                 \"<html>Whether to restore the last working directory of the Interaction pane on start up,<br>\" +", "+                                 \"or to always use the value of the \\\"user.home\\\" Java property<br>\"+", "+                                 \"(currently \"+System.getProperty(\"user.home\")+\").\");", "+    addOptionComponent(panel, stickyComponent);", "+    ", "+//    OptionComponent.ChangeListener wdListener = new OptionComponent.ChangeListener() {", "+//      public Object value(Object oc) {", "+//        File f = wdComponent.getComponent().getFileFromField();", "+//        boolean enabled = (f == null) || (f.equals(FileOps.NULL_FILE));", "+//        stickyComponent.getComponent().setEnabled(enabled);", "+//        return null;", "+//      }", "+//    };", "+//    wdListener.value(wdComponent);", "+    ", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "+      ", "-    addOptionComponent(panel, ", "-                       new BooleanOptionComponent(OptionConstants.STICKY_INTERACTIONS_DIRECTORY,", "-                                                  \"<html><p align=\\\"right\\\">\" + ", "-                                                  StringOps.", "-                                                    splitStringAtWordBoundaries(\"Restore last working directory of the Interactions pane on start up\",", "-                                                                                33, \"<br>\", SEPS), this,", "-                                                  \"<html>Whether to restore the last working directory of the Interaction pane on start up,<br>\" +", "-                                                  \"or to always use the value of the \\\"user.home\\\" Java property<br>\"+", "-                                                  \"(currently \"+System.getProperty(\"user.home\")+\").\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "530b146dbd462ff4d38152e18f4d5ce7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "dc44f2c291566cb82cbfcc08bb2e8d6ce606f7a0", "commitAfterChange": "e1cae1f7b6aae460aab41e86b032251abb119211", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["+                                        <Boolean,Boolean,Boolean>(\"and\",", "+                                                                \"If op1 and op2 are true, returns true,\"+", "+                                                                \"false otherwise.\\n\"+", "+                                                                \"Required attributes:\\n\"+", "+                                                                \"\\top1=\\\"<boolean>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<boolean>\\\"\",", "+                                                                new Lambda2<Boolean,Boolean,Boolean>() {", "+      public Boolean value(Boolean op1, Boolean op2) { return op1 && op2; }", "+    },", "+                                                                UnaryOpProperty.PARSE_BOOL,", "+                                                                UnaryOpProperty.PARSE_BOOL,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Boolean,Boolean,Boolean>(\"or\",", "+                                                                \"If at least one of op1, op2 is true, returns true,\"+", "+                                                                \"false otherwise.\\n\"+", "+                                                                \"Required attributes:\\n\"+", "+                                                                \"\\top1=\\\"<boolean>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<boolean>\\\"\",", "+                                                                new Lambda2<Boolean,Boolean,Boolean>() {", "+      public Boolean value(Boolean op1, Boolean op2) { return op1 || op2; }", "+    },", "+                                                                UnaryOpProperty.PARSE_BOOL,", "+                                                                UnaryOpProperty.PARSE_BOOL,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new UnaryOpProperty", "+                                        <Boolean,Boolean>(\"not\",", "+                                                          \"If op is true, returns false,\"+", "+                                                          \"true otherwise.\\n\"+", "+                                                          \"Required attributes:\\n\"+", "+                                                          \"\\top=\\\"<boolean>\\\"\",", "+                                                          new Lambda<Boolean,Boolean>() {", "+      public Boolean value(Boolean op) { return !op; }", "+    },", "+                                                          UnaryOpProperty.PARSE_BOOL,", "+                                                          UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55f0271efc083d04d5de6f9e14445c30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "e21c87a73c9cc18626d8ac0032c171af7d12b5c4", "commitAfterChange": "5c74c26bc0d0172fae7fedb4ceddf9beb8fb625d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   private void _setupMiscPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel(ConfigPanel panel)", "diff": ["-                                                  \"Specifies the indentation level DrJava's indenter should use.\"));", "+                                                  \"The number of spaces to use for each level of indentation.\"));", "-                              \"Specifies the directory that DrJava should consider the current working directory.\",", "+                              \"The directory that DrJava should consider the current working directory.\",", "-                                                  \"Specifies that maximum number of interactions that will be kept in the history.\"));", "+                                                  \"The number of interactions to remember in the history.\"));", "-                                                  \"<html>Specifies the number of files to remember<br>\" +", "-                                                  \"in the recently used files list in the File menu.</html>\"));", "+                                                  \"<html>The number of files to remember in<br>\" +", "+                                                  \"the recently used files list in the File menu.</html>\"));", "-                                                  \"<html>Specifies that the <code>assert</code> keyword should be allowed under Java 1.4.</html>\"));", "+                                                  \"<html>Whether to allow the <code>assert</code> keyword when compiling in Java 1.4.</html>\"));", "-                                                  \"<html>Specifies that DrJava should bring up a dialog<br>\" +", "-                                                  \"if the interactions pane is exits unexpectedly.</html>\"));", "+                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "+                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\"));", "-                                                  \"Specifies that DrJava should bring up a confirm dialog before exiting.\"));", "+                                                  \"Whether DrJava should prompt the user before quitting.\"));", "-                                                  \"<html>Specifies that DrJava should keep a backup copy of each<br>\" +", "-                                                  \"open file, named with a tilde (~) at the end of the filename.</html>\"));", "+                                                  \"<html>Whether DrJava should keep a backup copy of each file that<br>\" +", "+                                                  \"the user modifies, saved with a '~' at the end of the filename.</html>\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f82bec9a82aec3cbc8c62a88edd622b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": "     public boolean canAbandonFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "     public boolean canAbandonFile(OpenDefinitionsDocument doc)", "diff": ["-          boolean r = false;", "-          if (notFound) r = _saveAs(); else r = _save();", "+          boolean saved = false;", "+          if (notFound) saved = _saveAs(); ", "+          else saved = _save();", "-          if(r && (doc.isAuxiliaryFile() || ", "-                   (_model.isProjectActive() && doc.isInProjectPath()))) {", "+          if (! saved) return false;", "+          if (doc.isAuxiliaryFile() || (_model.isProjectActive() && doc.isInProjectPath())) {", "-            try{", "-              savedFilename = doc.getFile().getName();", "-            }", "+            try { savedFilename = doc.getFile().getName(); }", "-              //Shouldn't happen because this file was just saved", "+              // Shouldn't happen because this file was just saved", "-            catch(FileMovedException fme) {", "-              savedFilename = \"The current file\";", "+            catch(FileMovedException fme) { ", "+              // Shouldn't happend because this file was just saved", "+              throw new UnexpectedException(fme);", "+//              savedFilename = \"The current file\"; ", "-            rc = JOptionPane.showConfirmDialog(MainFrame.this,", "-                                               savedFilename + ", "-                                               \"  is now in the current project.\\n\" +", "-                                               \"If you close it, it will be permanently removed \"+", "-                                               \"from the project.\\n\" +", "-                                               \"Do you still wish to close it.\",", "-                                               \"Close Project File\",", "-                                               JOptionPane.YES_NO_CANCEL_OPTION);", "-            if(rc != JOptionPane.YES_OPTION)", "-              return false;", "-            else return true;", "+//            rc = JOptionPane.showConfirmDialog(MainFrame.this,", "+//                                               savedFilename + ", "+//                                               \"  is now in the current project.\\n\" +", "+//                                               \"If you close it, it will be permanently removed \"+", "+//                                               \"from the project.\\n\" +", "+//                                               \"Do you still wish to close it.\",", "+//                                               \"Close Project File\",", "+//                                               JOptionPane.YES_NO_CANCEL_OPTION);", "+//            if(rc != JOptionPane.YES_OPTION)", "+//              return false;", "+//            else return true;", "-          return r;", "+          return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "960acd112b9bb56481ca8f7ee0060086", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "commitAfterChange": "e753017eccbd872714e58c93831cb488b5045d2a", "methodNumberBeforeChange": 276, "methodNumberAfterChange": 276, "signatureBeforeChange": "   public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["-        long millis = System.currentTimeMillis();", "-        String f = _attributes.get(\"fmt\").toLowerCase();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "-    ", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.auto.refresh\",", "+                                                               \"Evaluates to true if project auto-refresh is enabled.\") {", "+      public void update() {", "+        Boolean b = _model.getAutoRefreshStatus();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "+        if (f.equals(\"int\")) _value = b ? \"1\" : \"0\";", "+        else if (f.equals(\"yes\")) _value = b ? \"yes\" : \"no\";", "+        else _value = b.toString();", "+      }", "+      ", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"fmt\", \"boolean\");", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.excluded.files\", File.pathSeparator, DEF_DIR,", "+                                                                       \"Returns a list of files that are excluded from DrJava's \"+", "+                                                                       \"project auto-refresh.\\n\"+", "+                                                                       \"Optional attributes:\\n\"+", "+                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(File f: _model.getExcludedFiles()) {", "+          l.add(f);", "+        }", "+        return l;", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.extra.class.path\", File.pathSeparator, DEF_DIR,", "+                                                                       \"Returns a list of files in the project's extra \"+", "+                                                                       \"class path.\\n\"+", "+                                                                       \"Optional attributes:\\n\"+", "+                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(File f: _model.getExtraClassPath()) {", "+          l.add(f);", "+        }", "+        return l;", "+      }", "+    });", "+", "+    // Actions"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a499be068349af628f0bb600671536e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "8e569af46a88cae172ec5b0bba88bf6a2db601b4", "commitAfterChange": "0e2962e67fbd4bb0610b6df816f609e60a33a28f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-    PropertyMaps.TEMPLATE.setProperty(\"Config\", new DrJavaProperty(\"config.master.jvm.args.combined\",", "-                                                                   \"This property contains all the JVM arguments passed \"+", "-                                                                   \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "-                                                                   \"programs in. The arguments from the \\\"JVM Args for \"+", "-                                                                   \"Main JVM\\\" and the special -X arguments from \\\"Maximum \"+", "-                                                                   \"Heap Size for Main JVM\\\" are combined.\") {", "+    PropertyMaps.TEMPLATE.setProperty(\"Config\", new EagerProperty(\"config.master.jvm.args.combined\",", "+                                                                  \"This property contains all the JVM arguments passed \"+", "+                                                                  \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "+                                                                  \"programs in. The arguments from the \\\"JVM Args for \"+", "+                                                                  \"Main JVM\\\" and the special -X arguments from \\\"Maximum \"+", "+                                                                  \"Heap Size for Main JVM\\\" are combined.\") {", "-        StringBuilder sb = new StringBuilder(DrJava.getConfig().getSetting(MASTER_JVM_XMX));", "-        if (sb.length()>0) { sb.append(\" \"); }", "+        StringBuilder sb = new StringBuilder();", "+        if (!DrJava.getConfig().getSetting(MASTER_JVM_XMX).equals(\"default\") &&", "+            !DrJava.getConfig().getSetting(MASTER_JVM_XMX).equals(\"\")) {", "+          sb.append(\"-Xmx\");", "+          sb.append(DrJava.getConfig().getSetting(MASTER_JVM_XMX));", "+          sb.append(\"M \");", "+        }", "-        _value = \"-Xmx\"+sb.toString().trim();", "+        _value = sb.toString().trim();", "-    PropertyMaps.TEMPLATE.setProperty(\"Config\", new DrJavaProperty(\"config.slave.jvm.args.combined\",", "-                                                                   \"This property contains all the JVM arguments passed \"+", "-                                                                   \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "-                                                                   \"programs in. The arguments from the \\\"JVM Args for \"+", "-                                                                   \"Slave JVM\\\" and the special -X arguments from \\\"Maximum \"+", "-                                                                   \"Heap Size for Main JVM\\\" are combined.\") {", "+    PropertyMaps.TEMPLATE.setProperty(\"Config\", new EagerProperty(\"config.slave.jvm.args.combined\",", "+                                                                  \"This property contains all the JVM arguments passed \"+", "+                                                                  \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "+                                                                  \"programs in. The arguments from the \\\"JVM Args for \"+", "+                                                                  \"Slave JVM\\\" and the special -X arguments from \\\"Maximum \"+", "+                                                                  \"Heap Size for Main JVM\\\" are combined.\") {", "-        StringBuilder sb = new StringBuilder(DrJava.getConfig().getSetting(SLAVE_JVM_XMX));", "-        if (sb.length()>0) { sb.append(\" \"); }", "+        StringBuilder sb = new StringBuilder();", "+        if (!DrJava.getConfig().getSetting(SLAVE_JVM_XMX).equals(\"default\") &&", "+            !DrJava.getConfig().getSetting(SLAVE_JVM_XMX).equals(\"\")) {", "+          sb.append(\"-Xmx\");", "+          sb.append(DrJava.getConfig().getSetting(SLAVE_JVM_XMX));", "+          sb.append(\"M \");", "+        }", "-        _value = \"-Xmx\"+sb.toString().trim();", "+        _value = sb.toString().trim();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c12ab865fda5d948150027a35eedc947", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "9b3d9c50193384b6879a006d53cc699b70b78101", "commitAfterChange": "18c065824a3025d62c2f6ca04849f79b162fb494", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public static boolean warnIfLinuxWithCompiz()", "signatureAfterChange": "   public static boolean warnIfLinuxWithCompiz()", "diff": ["-      if (!DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.WARN_IF_COMPIZ)) return false; // set to ignore", "+      if (!DrJava.getConfig().getSetting(OptionConstants.WARN_IF_COMPIZ)) return false; // set to ignore", "+      final JavaVersion.FullVersion ver160_20 = JavaVersion.parseFullVersion(\"1.6.0_20\");", "+      if (JavaVersion.CURRENT_FULL.compareTo(ver160_20)>=0) return false; // Java >= 1.6.0_20", "+      ", "-      int res = javax.swing.JOptionPane.showOptionDialog(null,", "-                                                         \"<html>DrJava has detected that you are using Compiz.<br>\" + ", "-                                                         \"<br>\" + ", "-                                                         \"Compiz and Java Swing are currently incompatible and can cause<br>\" + ", "-                                                         \"DrJava or your computer to crash.<br>\" + ", "-                                                         \"<br>\" + ", "-                                                         \"We recommend that you <b>disable Compiz</b>. On Ubuntu, go to<br>\" + ", "-                                                         \"System->Preferences->Appearence, display the Visual Effects tab,<br>\" + ", "-                                                         \"and select 'None'.<br>\" + ", "-                                                         \"<br>\" + ", "-                                                         \"For more information, please go to http://drjava.org/compiz<br>\" + ", "-                                                         \"<br>\" + ", "-                                                         \"Do you want to start DrJava anyway?</html>\",", "-                                                         \"Compiz detected\",", "-                                                         JOptionPane.DEFAULT_OPTION,", "-                                                         javax.swing.JOptionPane.WARNING_MESSAGE,", "-                                                         null,", "-                                                         options,", "-                                                         options[0]);", "+      int res = javax.swing.JOptionPane.", "+        showOptionDialog(null,", "+                         \"<html>DrJava has detected that you are using Compiz with a version<br>\" +", "+                         \"of Java that is older than \" + ver160_20 + \".<br>\" + ", "+                         \"<br>\" + ", "+                         \"Compiz and older versions of Java are incompatible and can cause<br>\" + ", "+                         \"DrJava or your computer to crash.<br>\" + ", "+                         \"<br>\" + ", "+                         \"We recommend that you <b>update to \" + ver160_20 + \" or newer</b>,<br>\" +", "+                         \"or that you disable Compiz if you still experience problems.<br>\" +", "+                         \"On Ubuntu, go to System->Preferences->Appearence, display the<br>\" +", "+                         \"Visual Effects tab, and select 'None'.<br>\" + ", "+                         \"<br>\" + ", "+                         \"For more information, please go to http://drjava.org/compiz<br>\" + ", "+                         \"<br>\" + ", "+                         \"Do you want to start DrJava anyway?</html>\",", "+                         \"Compiz detected\",", "+                         JOptionPane.DEFAULT_OPTION,", "+                         javax.swing.JOptionPane.WARNING_MESSAGE,", "+                         null,", "+                         options,", "+                         options[0]);", "-          DrJava.getConfig().setSetting(edu.rice.cs.drjava.config.OptionConstants.WARN_IF_COMPIZ, false);", "+          DrJava.getConfig().setSetting(OptionConstants.WARN_IF_COMPIZ, false);"]}], "num": 7826}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49f76aedad3e29ee078158be803da578", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e167804581740f5b47cb625c89ca034", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 40, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-      if (tempSd != null) {", "-        interfaces.addLast(tempSd);  ", "-      }", "-      ", "-      else if (qualifiedClassName.indexOf(\"$\") != -1) {", "-        //check to see if this is an inner class referencing an inner interface", "+      if (tempSd != null) interfaces.addLast(tempSd);  ", "+      else if (qualifiedClassName.indexOf(\"$\") != -1) { // class is inner", "+        // check to see if this is an inner class referencing an inner interface", "-        ", "-      ", "-      else if (tempSd == null) {", "-        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "-        // Couldn't resolve the interface.", "-        return null;", "+      else if (tempSd == null) {  // class is not inner; ith superinterface not yet defined", "+//        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "+//        // Couldn't resolve the interface.", "+        _log.log(\"CREATING continuation \" + rts[i].getName() + \" with SourceInfo \" + rts[i].getSourceInfo());", "+        continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));    ", "-      superClass = getSymbolData(superClassName, rt.getSourceInfo(), false); //TODO: change this back to true?", "+      SourceInfo si = rt.getSourceInfo();", "+      superClass = getSymbolData(superClassName, si, false); //TODO: change this back to true?", "-        superClass = getSymbolData(\"java.lang.Object\", typeDefBase.getSourceInfo(), false);", "+        superClass = new SymbolData(superClassName);", "+        symbolTable.put(superClassName, sd);", "+        continuations.put(superClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "+    _log.log(\"REMOVING continuation \" + sd.getName());", "-    if (!sd.isInterface()) {_newSDs.put(sd, this); }", "+    if (! sd.isInterface()) {_newSDs.put(sd, this); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9800985d4977b64e78aacc378775595e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData defineSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-  protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName) {", "-    String name = qualifiedClassName;", "+  protected SymbolData defineSymbolData(TypeDefBase typeDefBase, String qualifiedClassName) {", "+    String name = qualifiedClassName;  // may be an interface", "-    if (sd != null && !sd.isContinuation()) {", "-      _addAndIgnoreError(\"This class has already been defined.\", typeDefBase);", "+    if (sd != null && ! sd.isContinuation()) {", "+      _addAndIgnoreError(\"The class or interface \" + name + \" has already been defined.\", typeDefBase);", "+    ", "+    // Create SymbolDatas (continuations) for the interfaces if they do not already exist", "+    // Create a SymbolData for the superclass of typeDefBase", "+    ", "+//      if (superClassName.equals(\"TestCase\") || superClassName.equals(\"junit.framework.TestCase\")) {", "+//            System.out.println(\"WARNING! \" + superClassName + \" encountered as superclass\");", "+//            assert false;", "+//      }", "-      superClass = getSymbolData(superClassName, si, false); //TODO: change this back to true?", "+      // The following line generates an infinite recursion in some cases if resolve (the 3rd parm) is true.  Yet", "+      // when superclass is TestCase and TestCase is not imported", "+      superClass = getSymbolData(superClassName, si, false); //TODO: if true can generate infinite loop in helper", "+      }", "+      sd.setInterface(false);", "+    }", "+    ", "+    else { throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "+                                      \"  Please report this bug.\"); }", "+    ", "+    // get the SymbolData of the superclass which must be in the symbol table", "+    // since we visited the type in forClassDef() although it may be a continuation. ", "+    ", "+    // there is a continuation in the symbol table, update the fields", "+    sd.setMav(typeDefBase.getMav());", "+    sd.setTypeParameters(typeDefBase.getTypeParameters());", "+    sd.setSuperClass(superClass);", "+    sd.setInterfaces(interfaces);", "+    sd.setIsContinuation(false);", "+    _log.log(\"REMOVING continuation \" + sd.getName());", "+    continuations.remove(sd.getName());", "+    ", "+    if (! sd.isInterface()) { LanguageLevelConverter._newSDs.put(sd, this); }", "+    return sd;", "+  }", "-    ", "-    if (! sd.isInterface()) {_newSDs.put(sd, this); }"]}], "num": 15480}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f582fe33ec246bdab4bf700f5074324", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f88950942b1fed694fb580e9bcf99f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 35, "signatureBeforeChange": "       private String getPackageName(String classname)", "signatureAfterChange": "   private static String getPackageName(String classname)", "diff": ["+  /** Helper method used in subsequent anonymous inner class */", "+  private static String getPackageName(String classname){", "+    int index = classname.lastIndexOf(\".\");", "+    if (index != -1) return classname.substring(0, index);", "+    else return \"\";", "+  }", "-      private String getPackageName(String classname){", "-        int index = classname.lastIndexOf(\".\");", "-        if(index != -1){", "-          return classname.substring(0, index);", "-        }else{", "-          return \"\";", "-        }", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fa01b9afa38c50680aad40c99dccce9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "99e17181157667354a79af5fff7558664559fae9", "commitAfterChange": "0f014669daf60c46746e3e582159e95f94a3d43c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "       public Object visit(ThisExpression node)", "signatureAfterChange": "   protected Expression visitThis(ThisExpression node)", "diff": ["+   */", "+  protected Expression visitThis(ThisExpression node) {", "+    if (node.getClassName().equals(\"\")) {", "+      return _convertThisToName(node);", "+    }", "+    else {      ", "+      return _convertThisToObjectFieldAccess(node);", "+    }", "+  }", "-        return visit(_convertThisToName(node));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19e2b91245cd124565f2b4b4c67b4a16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ConsoleController.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "     public void actionPerformed(ActionEvent e)", "diff": ["-  AbstractAction enterAction = new AbstractAction() {", "+  private class EnterAction extends AbstractAction {", "-      if (_waiting) {", "-        _pane.setEditable(false);", "-        _pane.getCaret().setVisible(false);", "-        _doc.insertNewLine(_doc.getDocLength());", "-        synchronized(_inputWaitObject) {", "-          _inputWaitObject.notify();", "-          _waiting = false;", "+      synchronized(_inputWaitObject) {", "+        if (_blockedForConsoleInput) {", "+          _pane.setEditable(false);", "+          _pane.getCaret().setVisible(false);", "+          _doc.insertNewLine(_doc.getDocLength());", "+          _blockedForConsoleInput = false; ", "+          _inputWaitObject.notify();  // notify waiting thread that input is available"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cf74c2a86934830c37abe0fd25c15e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ConsoleController.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "     public void actionPerformed(ActionEvent e)", "diff": ["-  AbstractAction moveLeftAction = new AbstractAction() {", "+  private class LeftAction extends AbstractAction {", "-      if (position < _doc.getPromptPos()) {", "-        moveToPrompt();", "-      }", "-      else if (position == _doc.getPromptPos()) {", "-        _pane.getBeep().run();", "-      }", "-      else { // position > _doc.getPromptPos()", "+      if (position < _doc.getPromptPos()) moveToPrompt();", "+      else if (position == _doc.getPromptPos())_pane.getBeep().run();", "+      else // position > _doc.getPromptPos()", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "528eb2797ce8d10dc72db51582629855", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ConsoleController.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "     public void actionPerformed(ActionEvent e)", "diff": ["-  AbstractAction moveRightAction = new AbstractAction() {", "+  private class RightAction extends AbstractAction {", "-      if (position < _doc.getPromptPos()) {", "-        moveToEnd();", "-      }", "-      else if (position >= _doc.getDocLength()) {", "-        _pane.getBeep().run();", "-      }", "-      else { // position between prompt and end", "+      if (position < _doc.getPromptPos()) moveToEnd();", "+      else if (position >= _doc.getDocLength()) _pane.getBeep().run();", "+      else // position between prompt and end", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8283fc4b629d1c70dd33a029b4a5469e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ConsoleController.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "     public void actionPerformed(ActionEvent e)", "diff": ["-  AbstractAction moveUpDownAction = new AbstractAction() {", "+  private class UpDownAction extends AbstractAction {", "-      if (position < _doc.getPromptPos()) {", "-        moveToPrompt();", "-      }", "-      else {", "-        _pane.getBeep().run();", "-      }", "+      if (position < _doc.getPromptPos()) moveToPrompt();", "+      else _pane.getBeep().run();"]}], "num": 8256}
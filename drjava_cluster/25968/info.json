{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8fa0f7dd785a98ee71c1f3f01016948", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19d8c8db808fb9ba2f33ffdab875d133", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 70, "signatureBeforeChange": "   final public List<Node> blockStatement() throws ParseException", "signatureAfterChange": "   final public List<Node> blockStatement() throws ParseException", "diff": ["-    if (jj_2_29(2147483647)) {", "-      list = localVariableDeclaration();", "-      jj_consume_token(SEMICOLON);", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case FALSE:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case RETURN:", "-      case SHORT:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "-        node = statement();", "+    try {", "+      if (jj_2_40(2147483647)) {", "+        list = localVariableDeclaration();", "+        jj_consume_token(SEMICOLON);", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case RETURN:", "+        case SHORT:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case INCREMENT:", "+        case DECREMENT:", "+          node = statement();", "+        list.add(node);", "+          break;", "+        case CLASS:", "+          node = unmodifiedClassDeclaration(null);", "-        break;", "-      case CLASS:", "-        node = unmodifiedClassDeclaration(null);", "+          break;", "+        case ENUM:", "+          node = unmodifiedEnumDeclaration(null);", "-        break;", "-      case ENUM:", "-        node = unmodifiedEnumDeclaration(null);", "-           list.add(node);", "-        break;", "-      case INTERFACE:", "-        node = unmodifiedInterfaceDeclaration(null);", "-           list.add(node);", "-        break;", "-      default:", "-        jj_la1[60] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+          break;", "+        case INTERFACE:", "+          node = unmodifiedInterfaceDeclaration(null);", "+         list.add(node);", "+          break;", "+        default:", "+          jj_la1[61] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+         {if (true) return list;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid block statement\");", "-       {if (true) return list;}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e30107b3a40c6fde3b48f2b305dc99f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 77, "signatureBeforeChange": "   final public DoStatement doStatement() throws ParseException", "signatureAfterChange": "   final public DoStatement doStatement() throws ParseException", "diff": ["-    t1 = jj_consume_token(DO);", "-    stat = statement();", "-    jj_consume_token(WHILE);", "-    jj_consume_token(LPAREN);", "-    exp = expression();", "-    jj_consume_token(RPAREN);", "-    t2 = jj_consume_token(SEMICOLON);", "-      {if (true) return new DoStatement(exp, stat,", "-                             filename,", "-                             t1.beginLine, t1.beginColumn,", "-                             t2.endLine,   t2.endColumn);}", "+    try {", "+      t1 = jj_consume_token(DO);", "+      stat = statement();", "+      jj_consume_token(WHILE);", "+      jj_consume_token(LPAREN);", "+      exp = expression();", "+      jj_consume_token(RPAREN);", "+      t2 = jj_consume_token(SEMICOLON);", "+        {if (true) return new DoStatement(exp, stat,", "+                               filename,", "+                               t1.beginLine, t1.beginColumn,", "+                               t2.endLine,   t2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid do statement\");", "+    }"]}], "num": 25968}
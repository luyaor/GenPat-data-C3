{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "415243ea5c1c4e1f4b390c347ab13393", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "094b938fae4ec9fa3b6ae6d1718ea9b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void _updateWithErrors() throws BadLocationException", "signatureAfterChange": "     private void _updateWithErrors() throws BadLocationException", "diff": ["-", "-      // Show errors without source locations", "-      for (int i = 0; i < _errorsWithoutPositions.length; i++, errorNum++) {", "-        int startPos = doc.getLength();", "-        _insertErrorText(_errorsWithoutPositions, i, doc);", "-        // Note to user that there is no source info for this error", "+      // Show errors without files", "+      CompilerError[] errorsNoFiles = _model.getCompilerErrorsWithoutFiles();", "+      for (int i = 0; i < errorsNoFiles.length; i++, errorNum++) {", "+        int startPos = doc.getLength();", "+        _insertErrorText(errorsNoFiles, i, doc);", "+", "+        // Note to user that there is no file for this error", "-                         \" (no source location)\",", "+                         \"(no associated file)\",", "-", "-        _errorListPositions[errorNum] = doc.createPosition(startPos);", "+        Position pos = doc.createPosition(startPos);", "+        _errorListPositions[errorNum] = pos;", "+        _errorTable.put(pos, errorsNoFiles[i]);", "-      // Show errors with source locations", "-      for (int i = 0; i < _errors.length; i++, errorNum++) {", "-        int startPos = doc.getLength();", "-        _insertErrorText(_errors, i, doc);", "-        doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "-        _errorListPositions[errorNum] = doc.createPosition(startPos);", "+      // Show errors for each file", "+      ListModel defDocs = _model.getDefinitionsDocuments();", "+      for (int i = 0; i < defDocs.getSize(); i++) {", "+        // Get errors for this file", "+        OpenDefinitionsDocument openDoc = (OpenDefinitionsDocument)", "+          defDocs.getElementAt(i);", "+        CompilerErrorModel errorModel = openDoc.getCompilerErrorModel();", "+        CompilerError[] errorsWithoutPositions =", "+          errorModel.getErrorsWithoutPositions();", "+        CompilerError[] errorsWithPositions =", "+          errorModel.getErrorsWithPositions();", "+", "+        if ((errorsWithoutPositions.length > 0) ||", "+            (errorsWithPositions.length > 0)) {", "+", "+          // Grab filename for this set of errors", "+          String filename = \"(Untitled)\";", "+          try {", "+            File file = openDoc.getFile();", "+            filename = file.getAbsolutePath();", "+          }", "+          catch (IllegalStateException ise) {", "+            // Not possible: compiled documents must have files", "+            throw new UnexpectedException(ise);", "+          }", "+", "+          // Show errors without source locations", "+          for (int j = 0; j < errorsWithoutPositions.length; j++, errorNum++) {", "+            int startPos = doc.getLength();", "+            _insertErrorText(errorsWithoutPositions, j, doc);", "+", "+            // Note to user that there is no source info for this error", "+            doc.insertString(doc.getLength(),", "+                             \" (no source location)\",", "+                             NORMAL_ATTRIBUTES);", "+            doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "+", "+            Position pos = doc.createPosition(startPos);", "+            _errorListPositions[errorNum] = pos;", "+            _errorTable.put(pos, errorsWithoutPositions[j]);", "+          }", "+", "+          // Show errors with source locations", "+          for (int j = 0; j < errorsWithPositions.length; j++, errorNum++) {", "+            int startPos = doc.getLength();", "+", "+            // Show file", "+            doc.insertString(doc.getLength(), \"File: \", BOLD_ATTRIBUTES);", "+            doc.insertString(doc.getLength(), filename + \"\\n\", NORMAL_ATTRIBUTES);", "+", "+            // Show error", "+            _insertErrorText(errorsWithPositions, j, doc);", "+            doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "+            Position pos = doc.createPosition(startPos);", "+            _errorListPositions[errorNum] = pos;", "+            _errorTable.put(pos, errorsWithPositions[j]);", "+          }", "+        }", "-      _switchToError(0);", "+      _errorListPane.switchToError(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "819f64648809dbc7dfe3f5cac3df6cd1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void _updateWithErrors() throws BadLocationException", "signatureAfterChange": "      protected void _updateWithErrors() throws BadLocationException", "diff": ["+    protected void _updateWithErrors() throws BadLocationException {", "+      DefaultStyledDocument doc = new DefaultStyledDocument();", "+      _updateWithErrors(\"error\", \"found\", doc);", "-     */", "-    private void _updateWithErrors() throws BadLocationException {", "-      DefaultStyledDocument doc = new DefaultStyledDocument();", "-      ", "-      // Print how many errors", "-      StringBuffer numErrMsg = new StringBuffer(\"\" + _numErrors);", "-      numErrMsg.append(\" error\");", "-      if (_numErrors > 1) {", "-        numErrMsg.append(\"s\");", "-      }", "-      numErrMsg.append(\" found:\\n\");", "-      doc.insertString(doc.getLength(), numErrMsg.toString(), BOLD_ATTRIBUTES);", "-      ", "-      int errorNum = 0;", "-      // Show errors without files", "-      CompilerError[] errorsNoFiles = _model.getCompilerErrorsWithoutFiles();", "-      for (int i = 0; i < errorsNoFiles.length; i++, errorNum++) {", "-        int startPos = doc.getLength();", "-        _insertErrorText(errorsNoFiles, i, doc);", "-", "-        // Note to user that there is no file for this error", "-        doc.insertString(doc.getLength(),", "-                         \"(no associated file)\",", "-                         NORMAL_ATTRIBUTES);", "-        doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "-        Position pos = doc.createPosition(startPos);", "-        _errorListPositions[errorNum] = pos;", "-        _errorTable.put(pos, errorsNoFiles[i]);", "-      }", "-", "-      // Show errors for each file", "-      ListModel defDocs = _model.getDefinitionsDocuments();", "-      for (int i = 0; i < defDocs.getSize(); i++) {", "-        // Get errors for this file", "-        OpenDefinitionsDocument openDoc = (OpenDefinitionsDocument)", "-          defDocs.getElementAt(i);", "-        CompilerErrorModel errorModel = openDoc.getCompilerErrorModel();", "-        CompilerError[] errorsWithoutPositions =", "-          errorModel.getErrorsWithoutPositions();", "-        CompilerError[] errorsWithPositions =", "-          errorModel.getErrorsWithPositions();", "-", "-        if ((errorsWithoutPositions.length > 0) ||", "-            (errorsWithPositions.length > 0)) {", "-", "-          // Grab filename for this set of errors", "-          String filename = openDoc.getFilename();", "-", "-          // Show errors without source locations", "-          for (int j = 0; j < errorsWithoutPositions.length; j++, errorNum++) {", "-            int startPos = doc.getLength();", "-            _insertErrorText(errorsWithoutPositions, j, doc);", "-", "-            // Note to user that there is no source info for this error", "-            doc.insertString(doc.getLength(),", "-                             \" (no source location)\",", "-                             NORMAL_ATTRIBUTES);", "-            doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "-", "-            Position pos = doc.createPosition(startPos);", "-            _errorListPositions[errorNum] = pos;", "-            _errorTable.put(pos, errorsWithoutPositions[j]);", "-          }", "-", "-          // Show errors with source locations", "-          for (int j = 0; j < errorsWithPositions.length; j++, errorNum++) {", "-            int startPos = doc.getLength();", "-            CompilerError currError = errorsWithPositions[j];", "-            // Show file", "-            doc.insertString(doc.getLength(), \"File: \", BOLD_ATTRIBUTES);", "-            String fileAndLineNumber = filename + \"  [line: \" + (currError.lineNumber()+1) + \"]\";", "-            doc.insertString(doc.getLength(), fileAndLineNumber + \"\\n\", NORMAL_ATTRIBUTES);", "-", "-            // Show error", "-            _insertErrorText(errorsWithPositions, j, doc);", "-            doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "-            Position pos = doc.createPosition(startPos);", "-            _errorListPositions[errorNum] = pos;", "-            _errorTable.put(pos, errorsWithPositions[j]);", "-          }", "-        }", "-      }", "-", "-      setDocument(doc);", "-", "-      // Select the first error", "-      _errorListPane.switchToError(0);", "-    }"]}], "num": 6209}
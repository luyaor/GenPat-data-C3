{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83fded0b38186ac25342a0f64bacd2be", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "662457ebd7802b63c7a5fa86c6ed38a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 75, "signatureBeforeChange": "   synchronized void currThreadSuspended()", "signatureAfterChange": "   synchronized void currThreadSuspended()", "diff": ["-      try {", "-      // copy the variables in scope into an interpreter", "-      // and switch the current interpreter to that interpreter", "-        _dumpVariablesIntoInterpreterAndSwitch();", "-        _switchToSuspendedThread();", "-      }", "-      catch(AbsentInformationException aie) {", "-        // an AbsentInformationException can be thrown if the user does not", "-        // compile the classes to be debugged with the -g flag", "-        printMessage(\"No debug information available for this class.\\nMake sure to compile classes to be debugged with the -g flag.\");", "-        _hideWatches();", "-        // don't updateWatches in _switchToSuspendedThread since it will display the default", "-        // interpreter's watch information.", "-        _switchToSuspendedThread(false);", "-      }", "+      _dumpVariablesIntoInterpreterAndSwitch();", "+      _switchToSuspendedThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4c36819a0ae6676f9f17c1495b42d94", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "8a099b753fcfb83be248d39f70edd5788e8b1222", "commitAfterChange": "4701dc92d8eb3da9b7f829b98cf858de261361f6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testInsertToDoc()", "signatureAfterChange": "   public void testInsertToDoc() throws BadLocationException", "diff": ["-  public void testInsertToDoc() {", "-    try {", "-      defModel.insertString(0, \"a/*bc */\\\"\\\\{}()\", null);", "-      assertEquals(\"#0.0\", defModel.getText(0, 8), \"a/*bc */\");", "-      assertEquals(\"#0.1\", 14, defModel._currentLocation);", "-      defModel.insertString(0, \"Start:\", null);", "-      assertEquals(\"#1.0\", defModel.getText(0, 14), \"Start:a/*bc */\");", "-      assertEquals(\"#1.1\", 6, defModel._currentLocation);", "-      // document is:", "-      // Start:=>a/*bc */\"\\\\{}()", "-      BraceReduction rm = defModel._reduced;", "-      assertEquals(\"2.1\", FREE, rm.getStateAtCurrent());", "-      rm.move(2);", "-      // document is:", "-      // Start:a/=>*bc */\"\\\\{}()", "-      assertEquals(\"2.3\", \"/*\", rm.currentToken().getType());", "-      rm.move(2);", "-      // document is:", "-      // Start:a/*b=>c */\"\\\\{}()", "-      assertEquals(\"2.4\", true, rm.currentToken().isGap());", "-      assertEquals(\"2.5\", ReducedToken.INSIDE_BLOCK_COMMENT, rm.currentToken().getState());", "-      rm.move(2);", "-      // document is:", "-      // Start:a/*bc =>*/\"\\{}()", "-      assertEquals(\"2.6\", \"*/\", rm.currentToken().getType());", "-      rm.move(2);", "-      // document is:", "-      // Start:a/*bc */=>\"\\{}()", "-      assertEquals(\"2.7\", \"\\\"\", rm.currentToken().getType());", "-      rm.move(1);", "-      // document is:", "-      // Start:a/*bc */\"=>\\{}()", "-      assertEquals(\"2.8\", \"\\\\\", rm.currentToken().getType());", "-      rm.move(1);", "-      // document is:", "-      // Start:a/*bc */\"\\=>{}()", "-      assertEquals(\"2.9\", \"{\", rm.currentToken().getType());", "-      rm.move(1);", "-      // document is:", "-      // Start:a/*bc */\"\\{=>}()", "-      assertEquals(\"2.91\", \"}\", rm.currentToken().getType());", "-      rm.move(1);", "-      // document is:", "-      // Start:a/*bc */\"\\{}=>()", "-      assertEquals(\"2.92\", \"(\", rm.currentToken().getType());", "-      rm.move(1);", "-      // document is:", "-      // Start:a/*bc */\"\\\\{}(=>)", "-      assertEquals(\"2.93\", \")\", rm.currentToken().getType());", "-    } catch (javax.swing.text.BadLocationException e) {", "-      System.out.println(\"EXCEPTION\");", "-    }", "+  public void testInsertToDoc() throws BadLocationException {", "+    defModel.insertString(0, \"a/*bc */\\\"\\\\{}()\", null);", "+    assertEquals(\"#0.0\", defModel.getText(0, 8), \"a/*bc */\");", "+    assertEquals(\"#0.1\", 14, defModel._currentLocation);", "+    defModel.insertString(0, \"Start:\", null);", "+    assertEquals(\"#1.0\", defModel.getText(0, 14), \"Start:a/*bc */\");", "+    assertEquals(\"#1.1\", 6, defModel._currentLocation);", "+    // document is:", "+    // Start:=>a/*bc */\"\\\\{}()", "+    BraceReduction rm = defModel._reduced;", "+    assertEquals(\"2.1\", FREE, rm.getStateAtCurrent());", "+    rm.move(2);", "+    // document is:", "+    // Start:a/=>*bc */\"\\\\{}()", "+    assertEquals(\"2.3\", \"/*\", rm.currentToken().getType());", "+    rm.move(2);", "+    // document is:", "+    // Start:a/*b=>c */\"\\\\{}()", "+    assertEquals(\"2.4\", true, rm.currentToken().isGap());", "+    assertEquals(\"2.5\", ReducedToken.INSIDE_BLOCK_COMMENT, rm.currentToken().getState());", "+    rm.move(2);", "+    // document is:", "+    // Start:a/*bc =>*/\"\\{}()", "+    assertEquals(\"2.6\", \"*/\", rm.currentToken().getType());", "+    rm.move(2);", "+    // document is:", "+    // Start:a/*bc */=>\"\\{}()", "+    assertEquals(\"2.7\", \"\\\"\", rm.currentToken().getType());", "+    rm.move(1);", "+    // document is:", "+    // Start:a/*bc */\"=>\\{}()", "+    assertEquals(\"2.8\", \"\\\\\", rm.currentToken().getType());", "+    rm.move(1);", "+    // document is:", "+    // Start:a/*bc */\"\\=>{}()", "+    assertEquals(\"2.9\", \"{\", rm.currentToken().getType());", "+    rm.move(1);", "+    // document is:", "+    // Start:a/*bc */\"\\{=>}()", "+    assertEquals(\"2.91\", \"}\", rm.currentToken().getType());", "+    rm.move(1);", "+    // document is:", "+    // Start:a/*bc */\"\\{}=>()", "+    assertEquals(\"2.92\", \"(\", rm.currentToken().getType());", "+    rm.move(1);", "+    // document is:", "+    // Start:a/*bc */\"\\\\{}(=>)", "+    assertEquals(\"2.93\", \")\", rm.currentToken().getType());"]}], "num": 1550}
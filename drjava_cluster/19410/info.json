{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e6db0407f57854249c6166aae68f68e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8383a49b4cd555ac6cd4f174a460c1c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 35, "signatureBeforeChange": "   @Override public Type visit(ArrayAccess node)", "signatureAfterChange": "     @Override public Type visit(ArrayAccess node)", "diff": ["-   */", "-  @Override public Type visit(ArrayAccess node) {", "-    Type arrayType = node.getExpression().acceptVisitor(this);", "-    if (!ts.isArray(arrayType)) {", "-      setErrorStrings(node, ts.userRepresentation(arrayType));", "-      throw new ExecutionError(\"array.required\", node);", "-    }", "-    Type elementType = ts.arrayElementType(arrayType);", "-    node.getCellNumber().acceptVisitor(this);", "-    try {", "-      Expression cell = ts.unaryPromote(ts.makePrimitive(node.getCellNumber()));", "-      if (!(getType(cell) instanceof IntType)) {", "+     */", "+    @Override public Type visit(ArrayAccess node) {", "+      Type arrayType = check(node.getExpression());", "+      if (!ts.isArray(arrayType)) {", "+        setErrorStrings(node, ts.userRepresentation(arrayType));", "+        throw new ExecutionError(\"array.required\", node);", "+      }", "+      Type elementType = ts.arrayElementType(arrayType);", "+      ", "+      check(node.getCellNumber(), TypeSystem.INT);", "+      try {", "+        Expression cell = ts.unaryPromote(ts.makePrimitive(node.getCellNumber()));", "+        if (!(getType(cell) instanceof IntType)) {", "+          throw new ExecutionError(\"array.index.type\", node);", "+        }", "+        node.setCellNumber(cell);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      node.setCellNumber(cell);", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"array.index.type\", node);", "+      ", "+      setVariableType(node, elementType);", "+      return setType(node, ts.capture(elementType));", "+      // TODO: Does there need to be a runtime check here, as in field accesses?", "-    setVariableType(node, elementType);", "-    return setType(node, ts.capture(elementType));", "-    // TODO: Does there need to be a runtime check here, as in field accesses?", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1ed35d5aea7c9f8a4c974b0a4319063", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 37, "signatureBeforeChange": "   @Override public Type visit(NotExpression node)", "signatureAfterChange": "     @Override public Type visit(NotExpression node)", "diff": ["+     */", "+    @Override public Type visit(NotExpression node) {", "+      check(node.getExpression(), TypeSystem.BOOLEAN);", "+        Expression exp = ts.makePrimitive(node.getExpression());", "+        if (!(getType(exp) instanceof BooleanType)) {", "+          throw new ExecutionError(\"not.expression.type\", node);", "+        }", "+        node.setExpression(exp);", "+        return setType(node, getType(exp));", "-   */", "-  @Override public Type visit(NotExpression node) {", "-    node.getExpression().acceptVisitor(this);", "-    try {", "-      Expression exp = ts.makePrimitive(node.getExpression());", "-      if (!(getType(exp) instanceof BooleanType)) {", "-      node.setExpression(exp);", "-      return setType(node, getType(exp));", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"not.expression.type\", node);", "-    }", "-  }"]}], "num": 19410}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5276e5e43127dcb65b463d8518f45975", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31b086e0a22ad098a0800b193e0a2ea4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args,                                                  final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args,                                                  final Option<Type> expected, final Access.Module accessModule)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-                                                 final Option<Type> expected)", "+                                                 final Option<Type> expected, final Access.Module accessModule)", "-      ", "-    Iterable<FunctionInvocationCandidate<DJConstructor>> cs = bestInvocations(constructors, typeArgs, args, expected);", "+    ", "+    Iterable<DJConstructor> accessible = IterUtil.filter(constructors, new Predicate<DJConstructor>() {", "+      public boolean contains(DJConstructor k) { return accessible(k, accessModule); }", "+    });", "+    Iterable<FunctionInvocationCandidate<DJConstructor>> cs = bestInvocations(accessible, typeArgs, args, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3606dac90a1de91e8b249b372fee73c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setUp()", "signatureAfterChange": "      public void setUp()", "diff": ["-  public void setUp() {", "-    directory = new File(\"testFiles/forAdvancedLevelTest\");", "+  ", "+  public void setUp() { ", "+    dir1 = new File(\"testFiles/forAdvancedLevelTest\"); ", "+    dir2 = new File(\"testFiles/forAdvancedLevelTest/importedFiles\"); ", "+    dir3 = new File(\"testFiles/forAdvancedLevelTest/importedFiles2\"); ", "+    ", "+    dj2Filter = new FileFilter() {", "+      public boolean accept(File pathName) {", "+        String name = pathName.getAbsolutePath();", "+        return (name.endsWith(\".dj2\"));", "+      }", "+    };", "+    dj2JavaFilter = new FileFilter() {", "+      public boolean accept(File pathName) {", "+        String name = pathName.getAbsolutePath();", "+        return (name.endsWith(\".dj2\") || name.endsWith(\".java\"));", "+      }", "+    };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cccdbc04fde8ef74c485eab8ffbef29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "a7e3e055ae9aaae858bddacb7f1970b753865e99", "commitAfterChange": "d028ff865526d4b7b4597a44ca4c386e858c8df7", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 84, "signatureBeforeChange": "      public static void main(String[] args)", "signatureAfterChange": "      public static void main(String[] args)", "diff": ["+    d._showFiles = true;", "-        return f.getName().equals(\"foo\");", "+        try {", "+          return !f.isDirectory();", "+        }", "+        catch (Exception e) {", "+          System.out.println(f);", "+          throw new RuntimeException(e);", "+        }", "+    d.addFileFilter(new FileFilter() {", "+      public boolean accept(File f) {", "+        String name = f.getName();", "+        int idx = name.lastIndexOf(\".\");", "+        return (name.substring(idx+1).equalsIgnoreCase(\"java\"));", "+      }", "+      public String getDescription() { return \"Only allow java files\"; };", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5df336153891481f9e7f2948314cc782", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachineTest.java", "commitBeforeChange": "20a2512e394be5865ddd8dc1ebd648c5dfb08d0c", "commitAfterChange": "832e5dfbee9301c0432d02f86eab2d13af7f51bc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   protected void setUp()", "signatureAfterChange": "   protected void setUp()", "diff": ["-    frm = new FindReplaceMachine();", "+    docPrev = new PlainDocument();", "+    docNext = new PlainDocument();", "+    frm = new FindReplaceMachine(new DocumentIterator() {", "+      public Document getPrevDocument(Document d) {", "+        if (d == doc) {", "+          return docPrev;", "+        }", "+        else if (d == docPrev) {", "+          return docNext;", "+        }", "+        else {", "+          return doc;", "+        }", "+      }", "+      public Document getNextDocument(Document d) {", "+        if (d == doc) {", "+          return docNext;", "+        }", "+        else if (d == docPrev) {", "+          return doc;", "+        }", "+        else {", "+          return docPrev;", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "634f06f76762fc3e91c3344c0af4f613", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "f6810ad68cbb0aaa0d9f5ff0052437da87098ab7", "commitAfterChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 20, "signatureBeforeChange": "   private JPanel _makeMainClassSelectorPanel()", "signatureAfterChange": "   private JPanel _makeMainClassSelectorPanel()", "diff": ["-    _mainClassField = new FileSelectorStringComponent(this, null, 20, 12f) {", "-        public File convertStringToFile(String s) { ", "-          s = s.trim().replace('.', java.io.File.separatorChar) + \".class\";", "-          if (s.equals(\"\")) return null;", "-          else return new File(_rootFile, s);", "-        }", "-        ", "-        public String convertFileToString(File f) {", "-          if (f == null)  return \"\";", "-          else {", "-            try {", "-              String s = edu.rice.cs.util.FileOps.makeRelativeTo(f, _rootFile).toString();", "-              s = s.substring(0, s.lastIndexOf(\".class\"));", "-              s = s.replace(java.io.File.separatorChar, '.').replace('$', '.');", "-              int pos = 0;", "-              boolean ok = true;", "-              while((pos = s.indexOf('.', pos)) >= 0) {", "-                if ((s.length() <= pos + 1) || (Character.isDigit(s.charAt(pos + 1)))) {", "-                  ok = false;", "-                  break;", "-                }", "-                ++pos;", "+    ", "+    FileChooser chooser = new FileChooser(_rootFile);", "+    chooser.setDialogTitle(\"Select Main Class\");", "+//      chooser.setTopMessage(\"Select the main class for the executable jar file:\");", "+    chooser.setApproveButtonText(\"Select\");", "+    FileFilter filter = new FileFilter() {", "+      public boolean accept(File f) {", "+        String name = f.getName();", "+        return  !f.isDirectory() && name.endsWith(\".class\");", "+      }", "+      public String getDescription() { return \"Class Files (*.class)\"; }", "+    };", "+    chooser.addChoosableFileFilter(filter);", "+    ", "+    _mainClassField = new FileSelectorStringComponent(this, chooser, 20, 12f) {", "+      public File convertStringToFile(String s) { ", "+        s = s.trim().replace('.', java.io.File.separatorChar) + \".class\";", "+        if (s.equals(\"\")) return null;", "+        else return new File(_rootFile, s);", "+      }", "+      ", "+      public String convertFileToString(File f) {", "+        if (f == null)  return \"\";", "+        else {", "+          try {", "+            String s = edu.rice.cs.util.FileOps.makeRelativeTo(f, _rootFile).toString();", "+            s = s.substring(0, s.lastIndexOf(\".class\"));", "+            s = s.replace(java.io.File.separatorChar, '.').replace('$', '.');", "+            int pos = 0;", "+            boolean ok = true;", "+            while((pos = s.indexOf('.', pos)) >= 0) {", "+              if ((s.length() <= pos + 1) || (Character.isDigit(s.charAt(pos + 1)))) {", "+                ok = false;", "+                break;", "-              if (ok) return s;", "-              return \"\";", "+              ++pos;", "-            catch(Exception e) { return \"\"; }", "+            if (ok) return s;", "+            return \"\";", "+          catch(Exception e) { return \"\"; }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "784a3a07ae5897d64afad1c1cfeae042", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "d0727a77251489c271609794ef5d58d9b3aab593", "commitAfterChange": "e782d4da2d7bff038017015047af677bda357a17", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   private void _setupMiscPanel( ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel( ConfigPanel panel)", "diff": ["-    panel.addComponent( new FileOptionComponent ( OptionConstants.WORKING_DIRECTORY, \"Working Directory\", this));", "+    FileOptionComponent workDir = ", "+      new FileOptionComponent ( OptionConstants.WORKING_DIRECTORY, \"Working Directory\", this);", "+    workDir.setFileFilter(new FileFilter() {", "+      public boolean accept (File f) {", "+        if (f.isDirectory()) {", "+          return true;", "+        }", "+        return false;", "+      }", "+", "+      /**", "+       * @return A description of this filter to display", "+       */", "+      public String getDescription() {", "+        return \"Directories\";", "+      }", "+    });", "+    panel.addComponent( workDir );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9a99fe2b4a6c6f6a264eeefc2f240a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "12384109e03448701c98d404f37be617f6e32fee", "commitAfterChange": "7b8e61b54c444deec40202441181317a86727c3a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public static boolean promptForToolsJar(boolean needCompiler,                                           boolean needDebugger)", "signatureAfterChange": "   public static boolean promptForToolsJar(boolean needCompiler,                                           boolean needDebugger)", "diff": ["-    int result = JOptionPane.showConfirmDialog(null,", "-                                               text,", "-                                               \"Locate 'tools.jar'?\",", "+    int result = JOptionPane.showConfirmDialog(null, text, \"Locate 'tools.jar'?\",", "-      // TO DO: add a file filter", "+      chooser.setFileFilter(new ClasspathFilter() {", "+        public boolean accept(File f) {", "+          String ext = getExtension(f);", "+          return ext != null && ext.equals(\"jar\");", "+        }", "+        public String getName() {", "+          return \"Jar files\";", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6b1b1e534bd2d80e2cc6c56b3c075fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "395b2a102021edacb1427340196ea5475967dc87", "commitAfterChange": "51bfc4d668bc1673b008afd130ba536a07f9c69d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "    private void _setupDebugPanel ( ConfigPanel panel)", "signatureAfterChange": "    private void _setupDebugPanel ( ConfigPanel panel)", "diff": ["-    panel.addComponent( new VectorOptionComponent (OptionConstants.DEBUG_SOURCEPATH, \"Sourcepath\", this));", "-    panel.addComponent( new BooleanOptionComponent ( OptionConstants.DEBUG_STEP_DRJAVA, \"Step through DrJava Source\", this));", "+    VectorOptionComponent sourcePath = new VectorOptionComponent (OptionConstants.DEBUG_SOURCEPATH, ", "+                                                                  \"Sourcepath\", ", "+                                                                  this);", "+    sourcePath.setFileFilter(new FileFilter() {", "+      public boolean accept (File f) {", "+        if (f.isDirectory()) {", "+          return true;", "+        }", "+        return false;", "+      }", "+", "+      /**", "+       * @return A description of this filter to display", "+       */", "+      public String getDescription() {", "+        return \"Source Directories\";", "+      }", "+    });", "+    panel.addComponent( sourcePath );", "+    panel.addComponent( new BooleanOptionComponent ( OptionConstants.DEBUG_STEP_JAVA, ", "+                                                    \"Step Into Java Classes\", ", "+                                                    this));", "+    panel.addComponent( new BooleanOptionComponent ( OptionConstants.DEBUG_STEP_INTERPRETER, ", "+                                                    \"Step Into Interpreter Classes\", ", "+                                                    this));", "+    panel.addComponent( new BooleanOptionComponent ( OptionConstants.DEBUG_STEP_DRJAVA, ", "+                                                    \"Step Into DrJava Classes\", ", "+                                                    this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e085b2fb6dd9d8b96a3fe2bb42cb79ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "914e6ea1032a53755afef43e1e250cb1e0c1d993", "commitAfterChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 457, "signatureBeforeChange": "   public void openFolder(DirectoryChooser chooser)", "signatureAfterChange": "   public void openFolder(DirectoryChooser chooser)", "diff": ["-    String type = \"'\" + ext + \"' \";", "+    final String type = \"'\" + ext + \"' \";", "+    javax.swing.filechooser.FileFilter ff = new javax.swing.filechooser.FileFilter() {", "+      public boolean accept(File f) { return true; }", "+      public String getDescription() { return \"All \"+type+\" Files in Folder Selected\"; }", "+    };", "+    chooser.resetChoosableFileFilters();", "+    chooser.setAcceptAllFileFilterUsed(false);", "+    chooser.setFileFilter(ff);", "+    chooser.removeChoosableFileFilter(ff);"]}], "num": 21073}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d88f66118238d423e8480db964a1ec3f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca6e863d2335a39b63ec54620801e3ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "commitAfterChange": "fa5a46f3cc65ec85b9fa37599dc6542e75cee25e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      protected void _styleChanged()", "signatureAfterChange": "      protected void _styleChanged()", "diff": ["-    // throwErrorHuh();", "-    int length = getLength() - _currentLocation;", "-    //DrJava.consoleErr().println(\"Changed: \" + _currentLocation + \", \" + length);", "-    DocumentEvent evt = new DefaultDocumentEvent(_currentLocation,", "-                                                 length,", "-                                                 DocumentEvent.EventType.CHANGE);", "-    fireChangedUpdate(evt);", "+    writeLock();", "+    try {", "+      int length = getLength() - _currentLocation;", "+      //DrJava.consoleErr().println(\"Changed: \" + _currentLocation + \", \" + length);", "+      DocumentEvent evt = new DefaultDocumentEvent(_currentLocation,", "+                                                   length,", "+                                                   DocumentEvent.EventType.CHANGE);", "+      fireChangedUpdate(evt);", "+    }", "+    finally { writeUnlock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9431dfd1c202a705cfece41bd6ba3a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 86, "signatureBeforeChange": "   final public SynchronizedStatement synchronizedStatement() throws ParseException", "signatureAfterChange": "   final public SynchronizedStatement synchronizedStatement() throws ParseException", "diff": ["-    t = jj_consume_token(SYNCHRONIZED);", "-    jj_consume_token(LPAREN);", "-    exp = expression();", "-    jj_consume_token(RPAREN);", "-    stmt = block();", "-      {if (true) return new SynchronizedStatement(exp, stmt,", "-                                       filename,", "-                                       t.beginLine, t.beginColumn,", "-                                       stmt.getEndLine(), stmt.getEndColumn());}", "+    try {", "+      t = jj_consume_token(SYNCHRONIZED);", "+      jj_consume_token(LPAREN);", "+      exp = expression();", "+      jj_consume_token(RPAREN);", "+      stmt = block();", "+        {if (true) return new SynchronizedStatement(exp, stmt,", "+                                         filename,", "+                                         t.beginLine, t.beginColumn,", "+                                         stmt.getEndLine(), stmt.getEndColumn());}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid synchronized statement\");", "+    }"]}], "num": 13172}
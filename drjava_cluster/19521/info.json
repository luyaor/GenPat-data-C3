{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f383b9a2b76879b98f73a79496327478", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7420159547c367d3a8da2f72812d2855", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1b6ef7c7e1a6439fd1630b14326c67b0978e88ba", "commitAfterChange": "93cff9492f5f66f78081d1bfed6f05eaa775f999", "methodNumberBeforeChange": 266, "methodNumberAfterChange": 267, "signatureBeforeChange": "     public void fileOpened(final OpenDefinitionsDocument doc)", "signatureAfterChange": "     public void fileOpened(final OpenDefinitionsDocument doc)", "diff": ["+      ", "+      try {", "+        File f = doc.getFile();", "+        if(! _model.isProjectFile(f) && _model.isInProjectPath(doc))", "+          _saveProjectAction.setEnabled(true);", "+      }", "+      catch(FileMovedException fme) {", "+        //do nothing", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9609267d8de95b9278208e8b6df71ffb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JDKToolsLibrary.java", "commitBeforeChange": "101c103fed282ea73966b5bc0dce7152a188fba5", "commitAfterChange": "2bbdbef8ef11cd93c30f52236eee8443bfc75e9d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public static void msg(String s)", "signatureAfterChange": "      public static void msg(String s)", "diff": ["-    try {   ", "-      java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileWriter(new File(new File(System.getProperty(\"user.home\")),   ", "-                                                                                       \"mintcompiler.txt\").getAbsolutePath(),true));   ", "-      pw.println(s);", "+//    try {   ", "+//      java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileWriter(new File(new File(System.getProperty(\"user.home\")),   ", "+//                                                                                       \"mintcompiler.txt\").getAbsolutePath(),true));   ", "+//      pw.println(s);", "-      pw.close();   ", "-    }   ", "-    catch(java.io.IOException ioe) { }   ", "+//      pw.close();   ", "+//    }   ", "+//    catch(java.io.IOException ioe) { }   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a39a1e84ff0749185bbd53f39ec0fad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JDKToolsLibrary.java", "commitBeforeChange": "0de85ca2b785d7ad489463f9a174133a91014910", "commitAfterChange": "601a464d68d9614b980a0acf64c3c8928b17445c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public static void msg(String s)", "signatureAfterChange": "      public static void msg(String s)", "diff": ["-//    try {   ", "-//      java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileWriter(new File(new File(System.getProperty(\"user.home\")),   ", "-//                                                                                       \"mintcompiler.txt\").getAbsolutePath(),true));   ", "-//      pw.println(s);", "+    try {   ", "+      java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileWriter(new File(new File(System.getProperty(\"user.home\")),   ", "+                                                                                       \"mintcompiler.txt\").getAbsolutePath(),true));   ", "+      pw.println(s);", "-//      pw.close();   ", "-//    }   ", "-//    catch(java.io.IOException ioe) { }   ", "+      pw.close();   ", "+    }   ", "+    catch(java.io.IOException ioe) { }   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad9eb5413e47ebc04299a4f5c8362c33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "43b808b9e05f3378c0faae83fe4225562adc4c6e", "commitAfterChange": "723910d837b2fcdd9f4127559df4832f71fb62e8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void runTest(final String className, final String fileName)", "signatureAfterChange": "      public void runTest(final String className, final String fileName)", "diff": ["-    Thread t = new Thread() {", "+    Thread t = new Thread(\"JUnit Test Thread\") {", "-          t.printStackTrace();", "+          JUnitError[] errors = new JUnitError[1];", "+          errors[0] = new JUnitError(new File(fileName), -1, -1, t.getMessage(),", "+                                    false, className, StringOps.getStackTrace(t));", "+          _jvm.testSuiteFinished(errors);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbe93cb05e5bb4bef7482be980295f2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "05f7af6256ad9de7647a20e85e5cc81c388873cd", "commitAfterChange": "d2b9532b43d33848c589e184dd41f72fb998a545", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public String getIndentOfCurrStmt(int pos, char[] delims) throws BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(int pos, char[] delims) throws BadLocationException", "diff": ["+    boolean ignoreParens;", "-      prevDelimiter = findPrevDelimiter(prevDelimiter, delims);", "+      ignoreParens = posInParenPhrase(prevDelimiter);", "+      prevDelimiter = findPrevDelimiter(prevDelimiter, delims, ignoreParens);", "+      try {", "+      if (getText(prevDelimiter,1).charAt(0) == '{') {", "+        break;", "+      }", "+      } catch (BadLocationException e) { }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62d08ea72a8d8e4669807ccbed51df7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "diff": ["+      final boolean wasDebuggerEnabled = getDebugger().isReady();", "+      ", "+          // Restart debugger if it was previously enabled and is now off", "+          if (wasDebuggerEnabled && (!getDebugger().isReady())) {", "+            try { getDebugger().startup(); } catch(DebugException de) { /* ignore, continue without debugger */ }", "+          }"]}], "num": 19521}
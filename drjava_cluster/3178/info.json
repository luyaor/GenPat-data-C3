{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f46af902a643c1b33383f5103cfdf7e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "708899ae1b7c9dd887815b58e7214a7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "814284d39419cda17539ef3e84c25f9daceecb37", "commitAfterChange": "64a8c66e035bf38023367affc1e8d913a52663ca", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   void findNext()", "signatureAfterChange": "   void findNext()", "diff": ["-  void findNext() { if (_findField.getText().length() > 0) _doFind(); }", "+  void findNext() { ", "+    _machine.setSearchBackwards(false);", "+    _findLabelTop.setText(\"Find\");", "+    _findLabelBot.setText(\"Next\");", "+    _doFind();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "927caf49c7146f0d01432d486ccd0042", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "814284d39419cda17539ef3e84c25f9daceecb37", "commitAfterChange": "64a8c66e035bf38023367affc1e8d913a52663ca", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["-    _updateMachine();", "-    _machine.setFindWord(_findField.getText());", "-    _machine.setReplaceWord(_replaceField.getText());", "-    _mainframe.clearStatusMessage(); // _message.setText(\"\"); // JL", "-    ", "-    // FindResult contains the document that the result was found in, offset to the next occurrence of ", "-    // the string, and a flag indicating whether the end of the document was wrapped around while searching", "-    // for the string.", "-    FindResult fr = _machine.findNext();", "-    AbstractDocumentInterface doc = fr.getDocument();", "-    OpenDefinitionsDocument matchDoc = ((DefaultSingleDisplayModel) _model).getODDForDocument(doc);", "-    OpenDefinitionsDocument openDoc = _defPane.getOpenDefDocument();", "-", "-    final int pos = fr.getFoundOffset();", "-    ", "-    // If there actually *is* a match, then switch active documents. otherwise don't", "-    if (pos != -1) { // found a match", "-      Caret c = _defPane.getCaret();", "-      c.setDot(c.getDot());", "-      ", "-      if (! matchDoc.equals(openDoc)) _model.setActiveDocument(matchDoc);  // set active doc if matchDoc != openDoc", "-      else _model.refreshActiveDocument();  // re-establish openDoc (which is the _activeDocument) as active", "-   ", "-      _defPane.setCaretPosition(pos);", "-      _caretChanged = true;", "+    if (_findField.getText().length() > 0) {", "+      _machine.setFindWord(_findField.getText());", "+      _machine.setReplaceWord(_replaceField.getText());", "+      _mainframe.clearStatusMessage(); // _message.setText(\"\"); // JL", "+      ", "+      // FindResult contains the document that the result was found in, offset to the next occurrence of ", "+      // the string, and a flag indicating whether the end of the document was wrapped around while searching", "+      // for the string.", "+      FindResult fr = _machine.findNext();", "+      AbstractDocumentInterface doc = fr.getDocument();", "+      OpenDefinitionsDocument matchDoc = ((DefaultSingleDisplayModel) _model).getODDForDocument(doc);", "+      OpenDefinitionsDocument openDoc = _defPane.getOpenDefDocument();", "+      ", "+      final int pos = fr.getFoundOffset();", "+      ", "+      // If there actually *is* a match, then switch active documents. otherwise don't", "+      if (pos != -1) { // found a match", "+        Caret c = _defPane.getCaret();", "+        c.setDot(c.getDot());", "+        ", "+        if (! matchDoc.equals(openDoc)) _model.setActiveDocument(matchDoc);  // set active doc if matchDoc != openDoc", "+        else _model.refreshActiveDocument();  // re-establish openDoc (which is the _activeDocument) as active", "+        ", "+        _defPane.setCaretPosition(pos);", "+        _caretChanged = true;", "+        _updateMachine();", "+      }", "+      ", "+      if (fr.getWrapped() && !_machine.getSearchAllDocuments()) {", "+        Toolkit.getDefaultToolkit().beep();", "+        if (!_machine.getSearchBackwards()) _mainframe.setStatusMessage(\"Search wrapped to beginning.\");", "+        else  _mainframe.setStatusMessage(\"Search wrapped to end.\");", "+      }", "+      ", "+      if (fr.getAllDocsWrapped() && _machine.getSearchAllDocuments()) {", "+        Toolkit.getDefaultToolkit().beep();", "+        _mainframe.setStatusMessage(\"Search wrapped around all documents.\");", "+      }", "+      ", "+      if (pos >= 0) {", "+        _selectFoundItem();", "+        ", "+        _replaceAction.setEnabled(true);", "+        _replaceFindNextAction.setEnabled(true);", "+        _replaceFindPreviousAction.setEnabled(true);", "+        _machine.setLastFindWord();", "+      }", "+      // else the entire document was searched and no instance of the string", "+      // was found. display at most 50 characters of the non-found string", "+      else {", "+        Toolkit.getDefaultToolkit().beep();", "+        StringBuffer statusMessage = new StringBuffer(\"Search text \\\"\");", "+        if (_machine.getFindWord().length() <= 50) statusMessage.append(_machine.getFindWord());", "+        else statusMessage.append(_machine.getFindWord().substring(0, 49) + \"...\");", "+        statusMessage.append(\"\\\" not found.\");", "+        _mainframe.setStatusMessage(statusMessage.toString());", "+      }", "-", "-    if (fr.getWrapped() && !_machine.getSearchAllDocuments()) {", "-      Toolkit.getDefaultToolkit().beep();", "-      if (!_machine.getSearchBackwards()) _mainframe.setStatusMessage(\"Search wrapped to beginning.\");", "-      else  _mainframe.setStatusMessage(\"Search wrapped to end.\");", "-    }", "-    ", "-    if (fr.getAllDocsWrapped() && _machine.getSearchAllDocuments()) {", "-      Toolkit.getDefaultToolkit().beep();", "-      _mainframe.setStatusMessage(\"Search wrapped around all documents.\");", "-    }", "-    ", "-    if (pos >= 0) {", "-      _selectFoundItem();", "-", "-      _replaceAction.setEnabled(true);", "-      _replaceFindNextAction.setEnabled(true);", "-      _replaceFindPreviousAction.setEnabled(true);", "-      _machine.setLastFindWord();", "-    }", "-    // else the entire document was searched and no instance of the string", "-    // was found. display at most 50 characters of the non-found string", "-    else {", "-      Toolkit.getDefaultToolkit().beep();", "-      StringBuffer statusMessage = new StringBuffer(\"Search text \\\"\");", "-      if (_machine.getFindWord().length() <= 50) statusMessage.append(_machine.getFindWord());", "-      else statusMessage.append(_machine.getFindWord().substring(0, 49) + \"...\");", "-      statusMessage.append(\"\\\" not found.\");", "-      _mainframe.setStatusMessage(statusMessage.toString());", "-    }", "+    _findField.requestFocusInWindow();"]}], "num": 3178}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d72a3d541f938adf185c7bbd9a9f182", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f5bc89b9219d820e6d526b72c9fdaa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigProperty.java", "commitBeforeChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "commitAfterChange": "e753017eccbd872714e58c93831cb488b5045d2a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void update()", "signatureAfterChange": "   public void update()", "diff": ["-      if (_name.equals(\"config.\"+key)) { _value = value; return; }", "+      if (_name.equals(\"config.\"+key)) {", "+        if (op instanceof VectorOption) {", "+          @SuppressWarnings(\"unchecked\")", "+          Vector<?> vec = ((VectorOption)op).parse(value);", "+          StringBuilder sb = new StringBuilder();", "+          for(Object o: vec) {", "+            sb.append(_attributes.get(\"sep\"));", "+            sb.append(o.toString());", "+          }", "+          _value = sb.toString();", "+          if (_value.startsWith(_attributes.get(\"sep\"))) {", "+            _value= _value.substring(_attributes.get(\"sep\").length());", "+          }", "+        }", "+        else if (_name.equals(\"config.debug.step.exclude\")) {", "+          java.util.StringTokenizer tok = new java.util.StringTokenizer(value);", "+          StringBuilder sb = new StringBuilder();", "+          while(tok.hasMoreTokens()) {", "+            sb.append(_attributes.get(\"sep\"));", "+            sb.append(tok.nextToken());", "+          }", "+          _value = sb.toString();", "+          if (_value.startsWith(_attributes.get(\"sep\"))) {", "+            _value= _value.substring(_attributes.get(\"sep\").length());", "+          }", "+        }", "+        else {", "+          _value = value;", "+        }", "+        return;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a8eaac8942694ba67eb5bdb5fbbacf3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "55ffd5d461fa009444744f2527631191c6f9decc", "commitAfterChange": "0fed03351fa05790a48229380b62c5e4589b0332", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 83, "signatureBeforeChange": "   protected void renameFileForPath(File prev, TreePath tp)", "signatureAfterChange": "   protected void renameFileForPath(FileDisplay originalDisplay, TreePath tp)", "diff": ["-  protected void renameFileForPath(File prev, TreePath tp) {", "-    DefaultMutableTreeNode top = (DefaultMutableTreeNode) tp.getLastPathComponent();", "-    ", "-    File f = getFileForTreeNode(top);", "-    if (prev == null) {", "-      try {", "-        f.mkdir();", "-      }", "-      catch (SecurityException se) {", "-        top.removeFromParent(); // undo changes if not renamable", "-      }", "-    }", "-    else if (prev.equals(f)) {", "+  protected void renameFileForPath(FileDisplay originalDisplay, TreePath tp) {    ", "+    DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();", "+    File newFile = getFileForTreeNode(node);", "+    if (originalDisplay == null) {", "-    else if (f.equals(prev.getParentFile())) {", "-      top.setUserObject(_fdManager.makeFileDisplay(prev)); // undo changes if not renamable", "+    else if (originalDisplay.isNew()) { // finished process of naming new folder", "+      boolean couldCreate = true;", "+      try {", "+        couldCreate = newFile.mkdir();", "+      }", "+      catch (SecurityException se) { couldCreate = false; }", "+      finally {", "+        if (couldCreate) {", "+          resortNode(node); // resort into tree ", "+          updateChildFiles(node); // propagate to children.", "+          setSelectedDirectory(newFile);", "+        }", "+        else {", "+          String[] errMsg = new String[]{ \"Could not create the new directory\\n\",", "+            \"Please make sure you have sufficient access and that\",", "+            \"a directory does not already exist with the same name\" };", "+          JOptionPane.showMessageDialog(DirectoryChooser.this, errMsg, \"Could Not Create Directory\",", "+                                    JOptionPane.WARNING_MESSAGE);", "+          getModel().removeNodeFromParent(node); // undo changes", "+        }", "+      }", "+    }", "+    else if (originalDisplay.getFile().equals(newFile)) {", "+      return;", "+    }", "+    else if (newFile.equals(originalDisplay.getParentFile())) {", "+      // Error case: this would happen if the last part of the new FileDisplay's path", "+      // was the empty string (i.e. the user entered \"\" into the editor text field).", "+      // newFile.getFile() would return 'new File(parent, \"\")' which would cause newFile ", "+      // to equal prev.getParentFile(). This case is checked and avoided in the FileTextField.", "+      // This clause is here just in case.", "+      node.setUserObject(originalDisplay); // undo changes", "+      resortNode(node); // resort into tree", "+      boolean couldRename = true;", "-        prev.renameTo(f);", "+        couldRename = originalDisplay.getFile().renameTo(newFile);", "-      catch (SecurityException se) {", "-        top.setUserObject(_fdManager.makeFileDisplay(prev)); // undo changes if not renamable", "+      catch (SecurityException se) { couldRename = false; }", "+      finally {", "+        if (couldRename) {", "+          resortNode(node); // resort into tree ", "+          updateChildFiles(node); // propagate to children.", "+          setSelectedDirectory(newFile);", "+        }", "+        else {", "+          String[] errMsg = new String[]{ \"Could not rename this directory\\n\",", "+            \"Please make sure you have sufficient access and that\\n\",", "+            \"a directory does not already exist with the same name\" };", "+          JOptionPane.showMessageDialog(DirectoryChooser.this, errMsg, \"Could Not Rename Directory\",", "+                                    JOptionPane.WARNING_MESSAGE);", "+          node.setUserObject(originalDisplay); // undo changes", "+          resortNode(node); // resort into tree ", "+          updateChildFiles(node); // propagate to children.", "+        }", "-    // resort into tree", "-    resortNode(top);", "-    ", "+            ", "-    ", "-    ", "-    // propagate to children.", "-    updateChildFiles(top);"]}], "num": 11894}
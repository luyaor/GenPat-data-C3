{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "306c89bcea8a56f60565a93937dac78b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51c2f026cf32a272178a8b48b0e93235", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-nextgen/edu/rice/cs/drjava/model/compiler/NextGenCompiler.java", "commitBeforeChange": "e8a0105912243dc0845b7fe1aad605d049915d0a", "commitAfterChange": "f5dccb0b4004cfd3f184330e53ba101eca68857c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,\r                                                    java.util.List<? extends File> classPath, \r                                                    java.util.List<? extends File> sourcePath,\r                                                    File destination, \r                                                    java.util.List<? extends File> bootClassPath,\r                                                    String sourceVersion,\r                                                    boolean showWarnings)", "signatureAfterChange": "   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,                                                    java.util.List<? extends File> classPath,                                                     java.util.List<? extends File> sourcePath,                                                    File destination,                                                     java.util.List<? extends File> bootClassPath,                                                    String sourceVersion,                                                    boolean showWarnings)", "diff": ["-    */\r", "-  public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,\r", "-                                                   java.util.List<? extends File> classPath, \r", "-                                                   java.util.List<? extends File> sourcePath,\r", "-                                                   File destination, \r", "-                                                   java.util.List<? extends File> bootClassPath,\r", "-                                                   String sourceVersion,\r", "-                                                   boolean showWarnings) {\r", "-    LinkedList<DJError> errors = new LinkedList<DJError>();\r", "-    return errors;\r", "-  }\r", "+    */", "+  public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,", "+                                                   java.util.List<? extends File> classPath, ", "+                                                   java.util.List<? extends File> sourcePath,", "+                                                   File destination, ", "+                                                   java.util.List<? extends File> bootClassPath,", "+                                                   String sourceVersion,", "+                                                   boolean showWarnings) {", "+    debug.logStart(\"compile()\");", "+    debug.logValues(new String[]{ \"this\", \"files\", \"classPath\", \"sourcePath\", \"destination\", \"bootClassPath\", ", "+                                          \"sourceVersion\", \"showWarnings\" },", "+                    this, files, classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    ", "+    Context context = _createContext(classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    OurLog log = new OurLog(context);", "+    JavaCompiler compiler = _makeCompiler(context);", "+    ", "+    edu.rice.cs.nextgen2.compiler.util.List<String> filesToCompile = _emptyStringList();", "+    for (File f : files) {", "+      // TODO: Can we assume the files are canonical/absolute?  If not, we should use the util methods here.", "+      filesToCompile = filesToCompile.prepend(f.getAbsolutePath());", "+    }", "+    ", "+    try { compiler.compile(filesToCompile); }", "+    catch (Throwable t) {", "+      // GJ defines the compile method to throw Throwable?!", "+      //Added to account for error in javac whereby a variable that was not declared will", "+      //cause an out of memory error. This change allows us to output both errors and not", "+      //just the out of memory error", "+      ", "+      LinkedList<DJError> errors = log.getErrors();", "+      errors.addFirst(new DJError(\"Compile exception: \" + t, false));", "+      error.log(t);", "+      debug.logEnd(\"compile() (caught an exception)\");", "+      return errors;", "+    }", "+    ", "+    debug.logEnd(\"compile()\");", "+    return log.getErrors();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c58928a4497458d49d8fbeb786e1faa2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk14/edu/rice/cs/drjava/model/compiler/Javac141Compiler.java", "commitBeforeChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "commitAfterChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public CompilerError[] compile(File[] sourceRoots, File[] files)", "signatureAfterChange": "   public List compile(List files, List classPath,                                                     List sourcePath, File destination,                                                     List bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["+  */", "+  public List/*<? extends CompilerError>*/ compile(List/*<? extends File>*/ files, List/*<? extends File>*/ classPath, ", "+                                                   List/*<? extends File>*/ sourcePath, File destination, ", "+                                                   List/*<? extends File>*/ bootClassPath, String sourceVersion, boolean showWarnings) {", "+    Context context = _createContext(classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    OurLog log = new OurLog(context);", "+    JavaCompiler compiler = JavaCompiler.make(context);", "+    ", "+    com.sun.tools.javac.v8.util.List filesToCompile = new com.sun.tools.javac.v8.util.List();", "+    Iterator/*<? extends File>*/ filesI = files.iterator();", "+    while (filesI.hasNext()) {", "+      // TODO: Can we assume the files are canonical/absolute?  If not, we should use the util methods here.", "+      File f = (File) filesI.next();", "+      filesToCompile = filesToCompile.prepend(f.getAbsolutePath());", "+    }", "+", "+    try { compiler.compile(filesToCompile); }", "+    catch (Throwable t) {", "+      // GJ defines the compile method to throw Throwable?!", "+      //Added to account for error in javac whereby a variable that was not declared will", "+      //cause an out of memory error. This change allows us to output both errors and not", "+      //just the out of memory error", "+      ", "+      LinkedList/*<CompilerError>*/ errors = log.getErrors();", "+      errors.addFirst(new CompilerError(\"Compile exception: \" + t, false));", "+      return errors;", "+    }", "+", "+    return log.getErrors();", "+  }", "-   */", "-  public CompilerError[] compile(File[] sourceRoots, File[] files) {", "-    // We must re-initialize the compiler on each compile. Otherwise", "-    // it gets very confused.", "-    //DrJava.consoleOut().println(\"-- In JavacGJCompiler: SourceRoots:\");", "-    //for (int i = 0 ; i < sourceRoots.length; i ++) {", "-    //  DrJava.consoleOut().println(sourceRoots[i]);", "-    //}", "-    initCompiler(sourceRoots);", "-    List filesToCompile = new List();", "-", "-    for (int i = 0; i < files.length; i++) {", "-      filesToCompile = filesToCompile.prepend(files[i].getAbsolutePath());", "-    }", "-", "-    try {", "-      compiler.compile(filesToCompile);", "-    }", "-    catch (Throwable t) {", "-      // GJ defines the compile method to throw Throwable?!", "-      //System.err.println(\"Compile error: \" + t);", "-      //t.printStackTrace();", "-      ", "-      ", "-      //Added to account for error in javac whereby a variable that was not declared will", "-      //cause an out of memory error. This change allows us to output both errors and not", "-      //just the out of memory error", "-      ", "-      CompilerError[] errorArray = new CompilerError[compilerLog.getErrors().length + 1];", "-      for(int i = 0; i < compilerLog.getErrors().length; i++) {", "-        errorArray[i+1] = compilerLog.getErrors()[i];", "-      }", "-      errorArray[0] = new CompilerError(\"Compile exception: \" + t, false);", "-      return errorArray; ", "-      ", "-//      return compilerLog.getErrors();", "-//      return new CompilerError[] {", "-//        new CompilerError(\"Compile exception: \" + t, false)", "-//      };", "-    }", "-", "-    CompilerError[] errors = compilerLog.getErrors();", "-", "-    // null out things to not keep pointers to dead data", "-    compiler = null;", "-    compilerLog = null;", "-    return errors;", "-  }"]}], "num": 14695}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a7f6408fd26f70ed2a0b48811a5ae6a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bef8c54025af7c9fa84162350351f42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 366, "methodNumberAfterChange": 366, "signatureBeforeChange": "     public void activeDocumentChanged(final OpenDefinitionsDocument active)", "signatureAfterChange": "     public void activeDocumentChanged(final OpenDefinitionsDocument active)", "diff": ["+          ", "+          // update display (adding \"*\") in navigatgorPane", "+          if (isModified) _model.getDocumentNavigator().activeDocumentModified();", "-      if ( !SwingUtilities.isEventDispatchThread() && !inDebugMode() ) {", "-        // Can't invokeAndWait while in debug mode:", "-        //  UI thread might not respond, so DrJava locks up) {", "-        try { SwingUtilities.invokeAndWait(command); }", "-        catch(InterruptedException e) {", "-          /** we don't expect to be interrupted */", "-          throw new UnexpectedException(e);", "-        }", "-        catch(InvocationTargetException e2) {", "-          /** we don't expect _fileOpened() to throw any exceptions */", "-          throw new UnexpectedException(e2.getTargetException());", "-        }", "-      }", "-      else command.run();", "+      Utilities.invokeLater(command);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ee1e6e7de2890886b09ebfa9ecbcb3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DocumentDebugAction.java", "commitBeforeChange": "065b1e3954d46e1086ba2f867744163daf14462d", "commitAfterChange": "54ea28bb82d3e1f546423de8d56e416e257bade5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DocumentDebugAction (JPDADebugger manager,                               OpenDefinitionsDocument doc,                               int offset) throws DebugException", "signatureAfterChange": "   public DocumentDebugAction (JPDADebugger manager,                               OpenDefinitionsDocument doc,                               int offset) throws DebugException", "diff": ["+    _exactClassName = null;", "+//    try {", "+      if (offset >= 0) {", "+// getEnclosingClassName is incorrect right now and numbers anonymous inner classes incorrectly", "+//        if (doc.getNumberOfLines()<500) {", "+//          // only do this on short files", "+//          // in long files, getEnclosingClassName might take too long", "+//          _exactClassName = doc.getEnclosingClassName(offset, true);", "+//        }", "+      }", "+//    }", "+//    catch(ClassNameNotFoundException cnnfe) { /* ignore, we don't need the exact class name */ }", "+//    catch(BadLocationException ble) { /* ignore, we don't need the exact class name */ }", "-        _exactClassName = doc.getEnclosingClassName(offset, true);", "+        _className = doc.getQualifiedClassName(offset);", "-    }", "-    catch(ClassNameNotFoundException cnnfe) {", "-      _exactClassName = null;", "-    }", "-    catch(BadLocationException ble) {", "-      _exactClassName = null;", "-    }", "-    try {", "-      _className = doc.getQualifiedClassName(offset);", "-      // Couldn't find class name at offset, use the first class name", "-      // found.", "-      try {", "-        _className = doc.getQualifiedClassName();", "-      }", "-      catch (ClassNameNotFoundException cnnfe2) {", "-        // Still couldn't find a class name, use \"\"", "-        _className = \"\";", "-      }", "+      // Still couldn't find a class name, use \"\"", "+      _className = \"\";"]}], "num": 21257}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9c17a7b9a9fb69ff1a22cf221c6dded", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8383a49b4cd555ac6cd4f174a460c1c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 35, "signatureBeforeChange": "   @Override public Type visit(ArrayAccess node)", "signatureAfterChange": "     @Override public Type visit(ArrayAccess node)", "diff": ["-   */", "-  @Override public Type visit(ArrayAccess node) {", "-    Type arrayType = node.getExpression().acceptVisitor(this);", "-    if (!ts.isArray(arrayType)) {", "-      setErrorStrings(node, ts.userRepresentation(arrayType));", "-      throw new ExecutionError(\"array.required\", node);", "-    }", "-    Type elementType = ts.arrayElementType(arrayType);", "-    node.getCellNumber().acceptVisitor(this);", "-    try {", "-      Expression cell = ts.unaryPromote(ts.makePrimitive(node.getCellNumber()));", "-      if (!(getType(cell) instanceof IntType)) {", "+     */", "+    @Override public Type visit(ArrayAccess node) {", "+      Type arrayType = check(node.getExpression());", "+      if (!ts.isArray(arrayType)) {", "+        setErrorStrings(node, ts.userRepresentation(arrayType));", "+        throw new ExecutionError(\"array.required\", node);", "+      }", "+      Type elementType = ts.arrayElementType(arrayType);", "+      ", "+      check(node.getCellNumber(), TypeSystem.INT);", "+      try {", "+        Expression cell = ts.unaryPromote(ts.makePrimitive(node.getCellNumber()));", "+        if (!(getType(cell) instanceof IntType)) {", "+          throw new ExecutionError(\"array.index.type\", node);", "+        }", "+        node.setCellNumber(cell);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      node.setCellNumber(cell);", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"array.index.type\", node);", "+      ", "+      setVariableType(node, elementType);", "+      return setType(node, ts.capture(elementType));", "+      // TODO: Does there need to be a runtime check here, as in field accesses?", "-    setVariableType(node, elementType);", "-    return setType(node, ts.capture(elementType));", "-    // TODO: Does there need to be a runtime check here, as in field accesses?", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caade94c142d326176c796372fbc97ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 43, "signatureBeforeChange": "   @Override public Type visit(AddAssignExpression node)", "signatureAfterChange": "     @Override public Type visit(AddAssignExpression node)", "diff": ["+     */", "+    @Override public Type visit(AddAssignExpression node) { ", "+      Type leftT = check(node.getLeftExpression());", "+      Type rightT = check(node.getRightExpression());", "+      if (ts.isEqual(leftT, TypeSystem.STRING)) {", "+        try {", "+          Expression right = ts.makeReference(node.getRightExpression());", "+          node.setRightExpression(right);", "+          setOperation(node, ExpressionEvaluator.CONCATENATE);", "+        }", "+        catch (UnsupportedConversionException e) {", "+          throw new ExecutionError(\"addition.type\", node);", "+        }", "+      }", "+      else if (ts.isSubtype(leftT, TypeSystem.STRING) || ts.isSubtype(rightT, TypeSystem.STRING)) {", "+        throw new ExecutionError(\"addition.type\", node);", "+      }", "+      else {", "+        try {", "+          Expression left = ts.makePrimitive(node.getLeftExpression());", "+          Expression right = ts.makePrimitive(node.getRightExpression());", "+          Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "+          setLeftExpression(node, promoted.first()); // not to be confused with node.setLeftExpression(...)", "+          node.setRightExpression(promoted.second());", "+          setOperation(node, ExpressionEvaluator.ADD);", "+        }", "+        catch (UnsupportedConversionException e) {", "+          throw new ExecutionError(\"addition.type\", node);", "+        }", "+      }", "+      ", "+      if (!hasVariableType(node.getLeftExpression())) {", "+        throw new ExecutionError(\"addition.type\", node);", "+      }", "+      ", "+      return setType(node, leftT);", "+    }", "-   */", "-  @Override public Type visit(AddAssignExpression node) { ", "-    Type leftT = node.getLeftExpression().acceptVisitor(this);", "-    Type rightT = node.getRightExpression().acceptVisitor(this);", "-    if (ts.isEqual(leftT, TypeSystem.STRING)) {", "-      try {", "-        Expression right = ts.makeReference(node.getRightExpression());", "-        node.setRightExpression(right);", "-        setOperation(node, ExpressionEvaluator.CONCATENATE);", "-      }", "-      catch (UnsupportedConversionException e) {", "-        throw new ExecutionError(\"addition.type\", node);", "-      }", "-    }", "-    else if (ts.isSubtype(leftT, TypeSystem.STRING) || ts.isSubtype(rightT, TypeSystem.STRING)) {", "-      throw new ExecutionError(\"addition.type\", node);", "-    }", "-    else {", "-        setOperation(node, ExpressionEvaluator.ADD);", "-        throw new ExecutionError(\"addition.type\", node);", "-      }", "-    }", "-", "-    if (!hasVariableType(node.getLeftExpression())) {", "-      throw new ExecutionError(\"addition.type\", node);", "-    }", "-    ", "-    return setType(node, leftT);", "-  }"]}], "num": 25383}
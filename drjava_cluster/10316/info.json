{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bed0194dda64900dbffacbed0ddf399", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a160e7171d522902d47b0e313749a8d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public ClassPathVector getClassPath()", "signatureAfterChange": "   public Iterable<File> getClassPath()", "diff": ["-  public ClassPathVector getClassPath() {", "+  public Iterable<File> getClassPath() {", "-      try {", "-        ClassPathVector classPath = slave.getAugmentedClassPath();  // returns fresh copy", "-        for (File f : _startupClassPath) {", "-          try { classPath.add(FileOps.toURL(f)); }", "-          catch (MalformedURLException e) { /* just ignore bad classpath entry */ }", "-        }", "-        return classPath;", "-      }", "-      catch (RemoteException re) { _threwException(re); return new ClassPathVector(); }", "+      try { return IterUtil.compose(slave.getAugmentedClassPath(), _startupClassPath); }", "+      catch (RemoteException re) { _threwException(re); return IterUtil.empty(); }", "-    else { return new ClassPathVector(); }", "+    else { return IterUtil.empty(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ee1e6e7de2890886b09ebfa9ecbcb3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DocumentDebugAction.java", "commitBeforeChange": "065b1e3954d46e1086ba2f867744163daf14462d", "commitAfterChange": "54ea28bb82d3e1f546423de8d56e416e257bade5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DocumentDebugAction (JPDADebugger manager,                               OpenDefinitionsDocument doc,                               int offset) throws DebugException", "signatureAfterChange": "   public DocumentDebugAction (JPDADebugger manager,                               OpenDefinitionsDocument doc,                               int offset) throws DebugException", "diff": ["+    _exactClassName = null;", "+//    try {", "+      if (offset >= 0) {", "+// getEnclosingClassName is incorrect right now and numbers anonymous inner classes incorrectly", "+//        if (doc.getNumberOfLines()<500) {", "+//          // only do this on short files", "+//          // in long files, getEnclosingClassName might take too long", "+//          _exactClassName = doc.getEnclosingClassName(offset, true);", "+//        }", "+      }", "+//    }", "+//    catch(ClassNameNotFoundException cnnfe) { /* ignore, we don't need the exact class name */ }", "+//    catch(BadLocationException ble) { /* ignore, we don't need the exact class name */ }", "-        _exactClassName = doc.getEnclosingClassName(offset, true);", "+        _className = doc.getQualifiedClassName(offset);", "-    }", "-    catch(ClassNameNotFoundException cnnfe) {", "-      _exactClassName = null;", "-    }", "-    catch(BadLocationException ble) {", "-      _exactClassName = null;", "-    }", "-    try {", "-      _className = doc.getQualifiedClassName(offset);", "-      // Couldn't find class name at offset, use the first class name", "-      // found.", "-      try {", "-        _className = doc.getQualifiedClassName();", "-      }", "-      catch (ClassNameNotFoundException cnnfe2) {", "-        // Still couldn't find a class name, use \"\"", "-        _className = \"\";", "-      }", "+      // Still couldn't find a class name, use \"\"", "+      _className = \"\";"]}], "num": 10316}
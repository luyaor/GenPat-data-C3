{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "665f355572b8f9216129bc86c986a6c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0ac002074060789faba94fc34aeac3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "commitAfterChange": "0a07e9e014b16c2f39cd8c33e92a5be46fcf341e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "signatureAfterChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "diff": ["-      m = lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class});", "+      m = ReflectionUtilities.lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class});", "-      m = lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class, int.class, int.class});", "+      m = ReflectionUtilities.lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class, int.class, int.class});", "-    m = lookupMethod(LinkedList.class, \"add\", pTypes);", "+    m = ReflectionUtilities.lookupMethod(LinkedList.class, \"add\", pTypes);", "-    TigerUtilities.resetVersion();", "-    TigerUtilities.assertTigerEnabled(\"1.5 needed for this UnitTest\");", "+    TigerUtilities.setTigerEnabled(true);", "-    m = lookupMethod(Vector.class, \"add\", new Class[]{int.class});", "+    m = ReflectionUtilities.lookupMethod(Vector.class, \"add\", new Class[]{int.class});", "-    m = lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class});", "-    m = lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class, Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class, Integer.class});", "+    // test0(1) -> test0(int)", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test0\", new Class[]{int.class});", "+    assertEquals(\"Wrong number of arguments chosen for test0: \" + m, 1, m.getParameterTypes().length);", "+    result = ((Integer)m.invoke(null, new Object[]{ONE})).intValue();", "+    assertEquals(\"lookup with test0 found wrong method\", TestClass.test0(1), result);", "+    ", "-      m = lookupMethod(TestClass.class, \"test1\", new Class[]{int.class, int.class, int.class});", "+      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test1\", new Class[]{int.class, int.class, int.class});", "-    m = lookupMethod(TestClass.class, \"test2\", new Class[]{int.class, int.class, int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test2\", new Class[]{int.class, int.class, int.class});", "-    m = lookupMethod(TestClass.class, \"test3\", new Class[]{int.class, int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test3\", new Class[]{int.class, int.class});", "-    m = lookupMethod(TestClass.class, \"test4\", new Class[]{Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test4\", new Class[]{Integer.class});", "-    m = lookupMethod(TestClass.class, \"test5\", new Class[]{Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test5\", new Class[]{Integer.class});", "-      m = lookupMethod(TestClass.class, \"test5\", new Class[]{int.class, int.class});", "+      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test5\", new Class[]{int.class, int.class});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "371422e0f427801e7a1ebc96cdae459c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "signatureAfterChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "diff": ["-      m = ReflectionUtilities.lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class});", "+      m = ReflectionUtilities.lookupMethod(Integer.class, \"toString\", new Class<?>[]{Integer.class});", "-      m = ReflectionUtilities.lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class, int.class, int.class});", "+      m = ReflectionUtilities.lookupMethod(Integer.class, \"toString\", new Class<?>[]{Integer.class, int.class, int.class});", "-    Class[] pTypes = new Class[]{Object.class};", "+    Class<?>[] pTypes = new Class<?>[]{Object.class};", "-    m = ReflectionUtilities.lookupMethod(Vector.class, \"add\", new Class[]{int.class});", "-    assertTrue(\"Incorrect parameter types\", Arrays.equals(new Class[]{Object.class}, m.getParameterTypes()));", "+    m = ReflectionUtilities.lookupMethod(Vector.class, \"add\", new Class<?>[]{int.class});", "+    assertTrue(\"Incorrect parameter types\", Arrays.equals(new Class<?>[]{Object.class}, m.getParameterTypes()));", "-    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test\", new Class<?>[]{int.class, int.class});", "-    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class, Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test\", new Class<?>[]{int.class, int.class, Integer.class});", "-    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test0\", new Class[]{int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test0\", new Class<?>[]{int.class});", "-      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test1\", new Class[]{int.class, int.class, int.class});", "+      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test1\", new Class<?>[]{int.class, int.class, int.class});", "-    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test2\", new Class[]{int.class, int.class, int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test2\", new Class<?>[]{int.class, int.class, int.class});", "-    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test3\", new Class[]{int.class, int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test3\", new Class<?>[]{int.class, int.class});", "-    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test4\", new Class[]{Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test4\", new Class<?>[]{Integer.class});", "-    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test5\", new Class[]{Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test5\", new Class<?>[]{Integer.class});", "-      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test5\", new Class[]{int.class, int.class});", "+      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test5\", new Class<?>[]{int.class, int.class});", "-      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test6\", new Class[]{});", "+      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test6\", new Class<?>[]{});", "-    m = ReflectionUtilities.lookupMethod(java.util.Arrays.class, \"asList\", new Class[]{Integer[].class});", "+    m = ReflectionUtilities.lookupMethod(java.util.Arrays.class, \"asList\", new Class<?>[]{Integer[].class});", "-    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test7\", new Class[]{Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test7\", new Class<?>[]{Integer.class});"]}], "num": 28693}
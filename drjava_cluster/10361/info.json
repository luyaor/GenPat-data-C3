{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "229b2cfd65f1a8b5d70fb208c83757ea", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48d47fa52fa08cd5bf5fc3e32bb699db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "08dc50acc6315b4a29619a0eb44a9574f8e58999", "commitAfterChange": "fdb0eba529d65804f971cdb52c673713ef0d4616", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-                                                             \"Make the directory with the provided name inside the specified \"+", "-                                                             \"parent directory. Evaluates to the empty string \\\"\\\" if \"+", "-                                                             \"successful.\\n\"+", "+                                                             \"Make the directory with the provided file name. \"+", "+                                                             \"Evaluates to the empty string \\\"\\\" if successful.\\n\"+", "-                                                             \"\\tname=\\\"<name for the new directory>\\\"\"+", "-                                                             \"\\tfile=\\\"<parent directory>\\\"\\n\"+", "-                                                             \"Multiple names can be specified for the name attribute, each \"+", "+                                                             \"\\tfile=\\\"<directory to create>\\\"\\n\"+", "+                                                             \"Multiple files can be specified for the file attribute, each \"+", "-                                                             \" on this machine. If multiple names are specified, then DrJava \"+", "+                                                             \" on this machine. If multiple files are specified, then DrJava \"+", "-        s = StringOps.unescapeSpacesWith1bHex(s);", "-        File f = new File(s);", "-        s = _attributes.get(\"name\");", "-        if (s==null) {", "-          _value = \"(file.mkdir Error: name missing...)\";", "-          return;", "-        }", "-          File n = new File(f,fs);", "+          File n = new File(fs);", "-        _attributes.put(\"name\", null);", "+                                                             \" on this machine)\\n\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "663155217be201f4c18745d20493f4ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public synchronized void testStepIntoOverBreakpoint()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testStepIntoOverBreakpoint() throws Exception", "diff": ["-  public synchronized void testStepIntoOverBreakpoint()", "-    throws DebugException, BadLocationException, DocumentAdapterException,", "-    IOException, InterruptedException", "-  {", "+  public synchronized void testStepIntoOverBreakpoint() throws Exception {", "-    ", "-    // Compile the class", "-    File file = new File(_tempDir, \"DrJavaDebugClass.java\");", "-    OpenDefinitionsDocument doc = doCompile(DEBUG_CLASS, file);", "-    ", "-    // Start debugger", "-    synchronized(_notifierLock) {", "-      _debugger.startup();", "-      _waitForNotifies(1);  // startup", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertDebuggerStartedCount(1);", "+    ", "+    // Start up", "+    OpenDefinitionsDocument doc = _startupDebugger(\"DrJavaDebugClass.java\",", "+                                                   DEBUG_CLASS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7feefb261c82f97b61e2a66f105ba66d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/Breakpoint.java", "commitBeforeChange": "f1f97edd57f558d6d34abcd1fe039afc22f7a202", "commitAfterChange": "fc098bf0e8c385557d32ed3c183745582612add6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void _createBreakpointRequest(VirtualMachine vm) throws DebugException", "signatureAfterChange": "   protected void _createRequest(ReferenceType rt) throws DebugException", "diff": ["-  private void _createBreakpointRequest(VirtualMachine vm) throws DebugException {", "-    String packageName = \"\";", "-    try {", "-      packageName = _doc.getDocument().getPackageName();", "-    }", "-    catch (InvalidPackageException e) {", "-      // Couldn't find package, pretend there's none", "-    }", "-    _className = packageName + _doc.getClassName();", "-    _ref = _getReferenceType(_className, vm);", "-  }", "+   */", "+  protected void _createRequest(ReferenceType rt) throws DebugException {", "+    DrJava.consoleOut().println(\"Breakpoint._createRequest starting...\");", "+    /*", "+    DrJava.consoleOut().println(\"rt.isVerified: \" + rt.isVerified() +", "+                                \" rt.isInitialized: \" + rt.isInitialized() +", "+                                \" rt.isPrepared: \" + rt.isPrepared());", "+                                */", "+    // Get locations for the line number, use the first", "+    try {", "+      List lines = rt.locationsOfLine(_lineNumber);", "+      if (lines.size() == 0) {", "+        // Can't find a location on this line", "+        //System.out.println(\"No locations found.\");", "+        throw new DebugException(\"Could not find line number: \" + _lineNumber);", "+      }", "+      Location loc = (Location) lines.get(0);", "+      _request = _manager.getEventRequestManager().createBreakpointRequest(loc);", "+      DrJava.consoleOut().println(\"Created a breakpoint request: \" + _request);", "+      //DrJava.consoleOut().println(\"new Breakpoint: \" + toString());", "+      //_breakpointReq.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);", "+      //_breakpointReq.enable();", "+      //System.out.println(\"Breakpoint: \" + req);", "+      _manager.addBreakpointToMap(this);", "+    catch (AbsentInformationException aie) {", "+      throw new DebugException(\"Could not find line number: \" + aie);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51367060072914b57f8d770d326a838", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "e4a56b6f5c5a5ed8b4cfcfb1cb341d9273c45274", "commitAfterChange": "cd41b34cec4c099dc551839a16c1a804b7900ef0", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public JPanel _jarMainClassSelector()", "signatureAfterChange": "      public JPanel _jarMainClassPanel()", "diff": ["-  public JPanel _jarMainClassSelector() {", "-    File rootFile = _getProjRoot();", "-    try {", "-      rootFile = rootFile.getCanonicalFile();", "-    } catch(IOException e) { }", "+  public JPanel _jarMainClassPanel() {", "-    DirectoryChooser chooser = new DirectoryChooser(this,rootFile);", "-    chooser.setDialogTitle(\"Select Main Document\");", "+    JFileChooser mainChooser = new JFileChooser(_getProjRoot());", "+    mainChooser.setDialogTitle(\"Select Main Document for the project\");", "+    mainChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);", "-    chooser.setApproveButtonText(\"Select\");", "+    mainChooser.setApproveButtonText(\"Select\");", "-    FileFilter filter = new FileFilter() {", "+    _jarMainClassSelector = new FileSelectorComponent(this, mainChooser, 20, 12f);", "+    //toReturn.add(_builtDirSelector, BorderLayout.EAST);", "+    ", "+    _jarMainClassSelector.setFileFilter(new FileFilter() {", "-        return !f.isDirectory() &&", "+        return f.isDirectory() ||", "-    };", "-    ", "-    chooser.addChoosableFileFilter(filter);", "-//    chooser.addChoosableFileFilter(filter);", "-//    chooser.setShowFiles(true);", "-//    chooser.setFileDisplayManager(MainFrame.getFileDisplayManager20());", "-    _jarMainClassSelector = new DirectorySelectorComponent(this,chooser,20,12f);", "-    //toReturn.add(_builtDirSelector, BorderLayout.EAST);", "+    });", "+    "]}], "num": 10361}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d89f993dee1fec944fe661b57e982e3b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4383874b4b0baf47a6a06d728712ce6c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public int findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public int _findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException", "diff": ["-  public int findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException {", "+  /** Raw version of findPrevCharPos.  Assumes read lock is already held. */", "+  public int _findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException {", "+    ", "+    assert isReadLocked();", "+    ", "-    acquireReadLock();", "-    try { ", "-      text = getText(0, pos); ", "+//    acquireReadLock();", "+//    try { ", "+    text = getText(0, pos); ", "+    ", "+    synchronized(_reduced) {", "-      synchronized(_reduced) {", "+      final int oldPos = _currentLocation;", "+      // Move reduced model to location reducedPpos", "+      _setCurrentLocation(reducedPos);", "+      ", "+      // Walk backward from specified position", "+      ", "+      while (i >= 0) { ", "+        /* Invariant: reduced model points to reducedPos, 0 <= i < reducedPos <= pos, ", "+         * text[i+1:pos-1] contains invalid chars */", "-        final int oldPos = _currentLocation;", "-        // Move reduced model to location reducedPpos", "-        _setCurrentLocation(reducedPos);", "-        ", "-        // Walk backward from specified position", "-        ", "-        while (i >= 0) { ", "-          /* Invariant: reduced model points to reducedPos, 0 <= i < reducedPos <= pos, ", "-           * text[i+1:pos-1] contains invalid chars */", "-          ", "-          if (match(text.charAt(i), whitespace)) {", "-            // ith char is whitespace", "-            i--;", "-            continue;", "-          }", "-          ", "-          // Found a non-whitespace char;  move reduced model to location i", "-          _setCurrentLocation(i);", "-          reducedPos = i;                  // reduced model points to i == reducedPos", "-          ", "-          // Check if matching char is within a comment (not including opening two characters)", "-          if ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "-              (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT))) {", "-            i--;", "-            continue;", "-          }", "-          ", "-          if (i > 0 && _isStartOfComment(text, i - 1)) { /* char i is second character in opening comment marker */  ", "-            // Move i past the first comment character and continue searching", "-            i = i - 2;", "-            continue;", "-          }", "-          ", "-          // Found valid previous character", "-          break;", "+        if (match(text.charAt(i), whitespace)) {", "+          // ith char is whitespace", "+          i--;", "+          continue;", "-        /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "-        _setCurrentLocation(oldPos);", "+        // Found a non-whitespace char;  move reduced model to location i", "+        _setCurrentLocation(i);", "+        reducedPos = i;                  // reduced model points to i == reducedPos", "+        ", "+        // Check if matching char is within a comment (not including opening two characters)", "+        if ((_reduced._getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "+            (_reduced._getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT))) {", "+          i--;", "+          continue;", "+        }", "+        ", "+        if (i > 0 && _isStartOfComment(text, i - 1)) { /* char i is second character in opening comment marker */  ", "+          // Move i past the first comment character and continue searching", "+          i = i - 2;", "+          continue;", "+        }", "+        ", "+        // Found valid previous character", "+        break;", "-      int result = reducedPos;", "-      if (i < 0) result = -1;", "-      _storeInCache(key, result, pos - 1);", "-      return result;", "+      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+      _setCurrentLocation(oldPos);", "-    finally { releaseReadLock(); } ", "+    ", "+    int result = reducedPos;", "+    if (i < 0) result = -1;", "+    _storeInCache(key, result, pos - 1);", "+    return result;", "+//    }", "+//    finally { releaseReadLock(); } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "985440c69dc09a16ac70dca4eac65ab4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 63, "signatureBeforeChange": "   public int getLineFirstCharPos(final int pos) throws BadLocationException", "signatureAfterChange": "   public int _getLineFirstCharPos(final int pos) throws BadLocationException", "diff": ["-  public int getLineFirstCharPos(final int pos) throws BadLocationException {", "+  public int _getLineFirstCharPos(final int pos) throws BadLocationException {", "+    ", "+    assert isReadLocked();", "+    ", "-    acquireReadLock();", "-    try {", "-      final int startLinePos = getLineStartPos(pos);", "-      final int endLinePos = getLineEndPos(pos);", "-      int nonWSPos = endLinePos;", "-      ", "-      // Get all text on this line", "-      String text = getText(startLinePos, endLinePos - startLinePos);", "-      int walker = 0;", "-      while (walker < text.length()) {", "-        if (text.charAt(walker) == ' ' || text.charAt(walker) == '\\t') walker++;", "-        else {", "-          nonWSPos = startLinePos + walker;", "-          break;", "-        }", "+//    acquireReadLock();", "+//    try {", "+    final int startLinePos = _getLineStartPos(pos);", "+    final int endLinePos = _getLineEndPos(pos);", "+    int nonWSPos = endLinePos;", "+    ", "+    // Get all text on this line", "+    String text = getText(startLinePos, endLinePos - startLinePos);", "+    int walker = 0;", "+    while (walker < text.length()) {", "+      if (text.charAt(walker) == ' ' || text.charAt(walker) == '\\t') walker++;", "+      else {", "+        nonWSPos = startLinePos + walker;", "+        break;", "-      _storeInCache(key, nonWSPos, Math.max(pos - 1, nonWSPos));", "-      return nonWSPos;  // may equal lineEndPos", "-    finally { releaseReadLock(); }", "+    _storeInCache(key, nonWSPos, Math.max(pos - 1, nonWSPos));", "+    return nonWSPos;  // may equal lineEndPos", "+//    }", "+//    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf1d2c7334465a95ddd097b03dd0a9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 66, "signatureBeforeChange": "   public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws      BadLocationException", "signatureAfterChange": "   public int _getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws      BadLocationException", "diff": ["-  public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws ", "+  public int _getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws ", "+    ", "+    assert isReadLocked();", "+    ", "-    acquireReadLock();", "-    try {", "-      final int docLen = getLength();", "-      final int origPos = _currentLocation;", "-      final int endPos = getLineEndPos(pos);", "-      ", "-      synchronized(_reduced) {", "-        String line = getText(pos, endPos - pos);   // Get text from pos to end of line", "-        _setCurrentLocation(pos);  // Move reduced model to location pos", "-        try {", "-          int i = pos;", "-          int reducedPos = pos;", "-          // Walk forward from specificed position", "-          while (i < endPos) {", "-            ", "-            // Check if character is whitespace", "-            if (match(line.charAt(i-pos), whitespace)) {", "-              i++;", "-              continue;", "-            }", "-            // Found a non whitespace character", "-            // Move reduced model to walker's location for subsequent processing", "-            _setCurrentLocation(i);  // reduced model points to location i", "-            reducedPos = i;", "-            ", "-            // Check if non-ws char is within comment and if we want to ignore them.", "-            if (! acceptComments &&", "-                ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "-                 (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT)))) {", "-              i++;  // TODO: increment i to skip over entire comment", "-              continue;", "-            }", "-            ", "-            // Check if non-ws char is part of comment opening bracket and if we want to ignore them", "-            if (! acceptComments && _isStartOfComment(line, i - pos)) {", "-              // ith char is first char in comment open market; skip past this marker and continue searching", "-              i = i + 2;  // TODO: increment i to skip over entire comment", "-              continue;", "-            }", "-            ", "-            // Return position of matching char", "-            _storeInCache(key, reducedPos, reducedPos);  // Cached answer depends only on text(0:reducedPos]", "-//          _setCurrentLocation(origPos);", "-            return reducedPos;", "+//    acquireReadLock();", "+//    try {", "+    final int docLen = getLength();", "+    final int origPos = _currentLocation;", "+    final int endPos = _getLineEndPos(pos);", "+    ", "+    synchronized(_reduced) {", "+      String line = getText(pos, endPos - pos);   // Get text from pos to end of line", "+      _setCurrentLocation(pos);  // Move reduced model to location pos", "+      try {", "+        int i = pos;", "+        int reducedPos = pos;", "+        // Walk forward from specificed position", "+        while (i < endPos) {", "+          ", "+          // Check if character is whitespace", "+          if (match(line.charAt(i-pos), whitespace)) {", "+            i++;", "+            continue;", "+          }", "+          // Found a non whitespace character", "+          // Move reduced model to walker's location for subsequent processing", "+          _setCurrentLocation(i);  // reduced model points to location i", "+          reducedPos = i;", "+          ", "+          // Check if non-ws char is within comment and if we want to ignore them.", "+          if (! acceptComments &&", "+              ((_reduced._getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "+               (_reduced._getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT)))) {", "+            i++;  // TODO: increment i to skip over entire comment", "+            continue;", "-          // No matching char found on this line", "-          if (endPos + 1 >= docLen) { // No matching char found in doc", "-            _storeInCache(key, -1, Integer.MAX_VALUE);  // Any change to the document invalidates this result!", "-//          _setCurrentLocation(origPos);", "-            return -1;", "+          // Check if non-ws char is part of comment opening bracket and if we want to ignore them", "+          if (! acceptComments && _isStartOfComment(line, i - pos)) {", "+            // ith char is first char in comment open market; skip past this marker and continue searching", "+            i = i + 2;  // TODO: increment i to skip over entire comment", "+            continue;", "+          ", "+          // Return position of matching char", "+          _storeInCache(key, reducedPos, reducedPos);  // Cached answer depends only on text(0:reducedPos]", "+//          _setCurrentLocation(origPos);", "+          return reducedPos;", "-        finally { _setCurrentLocation(origPos); }  // restore _currentLocation", "-      }  // end sync", "-      // Search through remaining lines of document; recursion depth is bounded by number of blank lines following pos", "-      return getFirstNonWSCharPos(endPos + 1, whitespace, acceptComments);", "-    }", "-    finally { releaseReadLock(); }", "+        // No matching char found on this line", "+        if (endPos + 1 >= docLen) { // No matching char found in doc", "+          _storeInCache(key, -1, Integer.MAX_VALUE);  // Any change to the document invalidates this result!", "+//          _setCurrentLocation(origPos);", "+          return -1;", "+        }", "+      }", "+      finally { _setCurrentLocation(origPos); }  // restore _currentLocation", "+      ", "+    }  // end sync", "+    // Search through remaining lines of document; recursion depth is bounded by number of blank lines following pos", "+    return _getFirstNonWSCharPos(endPos + 1, whitespace, acceptComments);", "+//    }", "+//    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0cbd26b32ded8bcecb60f2f456d591c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public int findCharOnLine(final int pos, final char findChar)", "signatureAfterChange": "   public int findCharOnLine(final int pos, final char findChar)", "diff": ["+    ", "+    assert isReadLocked();", "+    ", "-    acquireReadLock();", "+//    acquireReadLock();", "-        int lineStart = getLineStartPos(pos);", "-        int lineEnd = getLineEndPos(pos);", "+        int lineStart = _getLineStartPos(pos);", "+        int lineEnd = _getLineEndPos(pos);", "-          if (_reduced.getStateAtCurrent().equals(FREE)) break; // found matching char", "+          if (_reduced._getStateAtCurrent().equals(FREE)) break; // found matching char", "-    catch (Throwable t) { throw new UnexpectedException(t); }", "-    finally { releaseReadLock(); }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+//    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e376d6fbb7f0001c885e7431c45dc22a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)     throws BadLocationException", "signatureAfterChange": "   public int _findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)     throws BadLocationException", "diff": ["-  public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)", "+  public int _findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)", "-//    System.err.println(\"findPrevDelimiter(\" + pos + \", \" + Arrays.toString(delims) + \", \" + skipBracePhrases);", "+    assert isReadLocked();", "+    ", "-    ", "-    acquireReadLock();", "-    try {", "-      int lineStartPos = getLineStartPos(pos);", "-      if (lineStartPos < 0) lineStartPos = 0;", "-      ", "-      if (lineStartPos >= pos) i = lineStartPos - 1;  // the line containing pos is empty  ", "-      else { ", "-        assert lineStartPos < pos;", "-        String line = getText(lineStartPos, pos - lineStartPos);  // the line containing pos", "-        synchronized(_reduced) {", "-          final int origPos = _currentLocation;", "-          ", "-          // Walk backwards from specificed position, scanning current line for a delimiter", "-          for (i = pos - 1; i >= lineStartPos; i--) {", "-            /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "-             * 0 <= i < reducedPos <= pos */", "-            // Move reduced model to location pos", "-            int irel = i - lineStartPos;", "-            _setCurrentLocation(i);  // reduced model points to i", "-            if (isShadowed() || isCommentOpen(line, irel)) {", "+//    acquireReadLock();", "+//    try {", "+    int lineStartPos = _getLineStartPos(pos);", "+    if (lineStartPos < 0) lineStartPos = 0;", "+    ", "+    if (lineStartPos >= pos) i = lineStartPos - 1;  // the line containing pos is empty  ", "+    else { ", "+      assert lineStartPos < pos;", "+      String line = getText(lineStartPos, pos - lineStartPos);  // the line containing pos", "+      synchronized(_reduced) {", "+        final int origPos = _currentLocation;", "+        ", "+        // Walk backwards from specificed position, scanning current line for a delimiter", "+        for (i = pos - 1; i >= lineStartPos; i--) {", "+          /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "+           * 0 <= i < reducedPos <= pos */", "+          // Move reduced model to location pos", "+          int irel = i - lineStartPos;", "+          _setCurrentLocation(i);  // reduced model points to i", "+          if (_isShadowed() || isCommentOpen(line, irel)) {", "-              continue;", "-            }", "-            char ch = line.charAt(irel);", "-            ", "-            if (match(ch, delims) /* && ! isShadowed() && (! skipParenPhrases || ! posInParenPhrase())*/) {", "-              reducedPos = i;    // record valid match                                                                              ", "+            continue;", "+          }", "+          char ch = line.charAt(irel);", "+          ", "+          if (match(ch, delims) /* && ! isShadowed() && (! skipParenPhrases || ! posInParenPhrase())*/) {", "+            reducedPos = i;    // record valid match                                                                              ", "+            break;", "+          }", "+          ", "+          if (skipBracePhrases && match(ch, CLOSING_BRACES) ) {  // note that delims have already been matched", "+//            Utilities.show(\"closing bracket is '\" + ch + \"' at pos \" + i);", "+            _setCurrentLocation(i + 1); // move cursor immediately to right of ch (a brace)", "+//            Utilities.show(\"_currentLocation = \" + _currentLocation);", "+            int dist = _balanceBackward();  // bypasses redundant read locking", "+            if (dist == -1) { // if braces do not balance, return failure", "+              i = -1;", "+//              Utilities.show(\"dist = \" + dist + \" No matching brace found\");", "-            ", "-            if (skipBracePhrases && match(ch, CLOSING_BRACES) ) {  // note that delims have already been matched", "-//            Utilities.show(\"closing bracket is '\" + ch + \"' at pos \" + i);", "-              _setCurrentLocation(i + 1); // move cursor immediately to right of ch (a brace)", "-//            Utilities.show(\"_currentLocation = \" + _currentLocation);", "-              int dist = balanceBackward();", "-              if (dist == -1) { // if braces do not balance, return failure", "-                i = -1;", "-//              Utilities.show(\"dist = \" + dist + \" No matching brace found\");", "-                break;", "-              }", "-              assert dist > 0;", "+            assert dist > 0;", "-              _setCurrentLocation(i + 1 - dist);  // skip over balanced brace text, decrementing _currentLocation", "-              i = _currentLocation;", "-              // Decrementing i skips over matching brace; could skip back into text preceding current line", "-              continue;", "-            }", "-          }  // end for", "-          ", "-          _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "-        }  // end synchronized", "-      } // end processing of text on same line as pos", "-      ", "-      /* Invariant: same as for loop except that lineStartPos-1 <= i <= reducedPos <= pos && 0 <= reducedPos */", "-      ", "-      if (i < lineStartPos) {  // No matching char was found on line containing pos; must look at preceding text", "-        if (i <= 0) reducedPos = -1;  // No preceding text left to search", "-        else reducedPos = findPrevDelimiter(i, delims, skipBracePhrases); ", "-      }", "-  ", "-      _storeInCache(key, reducedPos, pos - 1);", "+            _setCurrentLocation(i + 1 - dist);  // skip over balanced brace text, decrementing _currentLocation", "+            i = _currentLocation;", "+            // Decrementing i skips over matching brace; could skip back into text preceding current line", "+            continue;", "+          }", "+        }  // end for", "+        ", "+        _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "+      }  // end synchronized", "+    } // end processing of text on same line as pos", "+    ", "+    /* Invariant: same as for loop except that lineStartPos-1 <= i <= reducedPos <= pos && 0 <= reducedPos */", "+    ", "+    if (i < lineStartPos) {  // No matching char was found on line containing pos; must look at preceding text", "+      if (i <= 0) reducedPos = -1;  // No preceding text left to search", "+      else reducedPos = _findPrevDelimiter(i, delims, skipBracePhrases); ", "+    }", "+    ", "+    _storeInCache(key, reducedPos, pos - 1);", "-      ", "-      // Return position of matching char or ERROR_INDEX (-1) ", "-      return reducedPos;  ", "-    } // end try", "-    finally { releaseReadLock(); }", "+    ", "+    // Return position of matching char or ERROR_INDEX (-1) ", "+    return reducedPos;  ", "+//    } // end try", "+//    finally { releaseReadLock(); }"]}], "num": 24468}
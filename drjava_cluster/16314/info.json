{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efad28b2da45d7884abf1ae8820447a5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24d4c9d827de66217322b031a8e381d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "   private Type visitRelationalExpression(BinaryExpression node)", "signatureAfterChange": "   private Class<?> visitRelationalExpression(BinaryExpression node)", "diff": ["-  private Type visitRelationalExpression(BinaryExpression node) {", "+  private Class<?> visitRelationalExpression(BinaryExpression node) {", "-    Type lc1 = leftExp.acceptVisitor(this);", "-    Type rc1 = rightExp.acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = leftExp.acceptVisitor(this);", "+    Class<?> rc = rightExp.acceptVisitor(this);", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f895556f2ce6f9f6a17196f06c83409", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public Type visit(NotEqualExpression node)", "signatureAfterChange": "   public Class<?> visit(NotEqualExpression node)", "diff": ["-  public Type visit(NotEqualExpression node) {", "+  public Class<?> visit(NotEqualExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = rn.acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = rn.acceptVisitor(this);", "+", "-    ", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd21be561224595b3d933d96e705d70f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public Type visit(DivideAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(DivideAssignExpression node)", "diff": ["-  public Type visit(DivideAssignExpression node) {", "+  public Class<?> visit(DivideAssignExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = node.getRightExpression().acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "-        !(rc.isPrimitive()  || TigerUtilities.isBoxingType(rc))) {", "+        !(rc.isPrimitive()  || TigerUtilities.isBoxingType(rc)) ) {", "-    ", "+", "-    ", "+"]}], "num": 16314}
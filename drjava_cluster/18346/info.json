{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a1bddfffc1525e3cec0abb240ae60e9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e0d8a558dee82f79a101f4d129ab6bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectorySelectorComponent.java", "commitBeforeChange": "80b5b6b287ce1d96a643c73dcded8fef52ef99c0", "commitAfterChange": "5b5854a74ae4104fe98919ec137a82ddfe0b03d0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void setFileField(File file)", "signatureAfterChange": "   public void setFileField(File file)", "diff": ["-    if (file != null && file.exists()) {", "-      try {", "-        _file = file.getCanonicalFile();", "-      }", "-      catch(IOException e) {", "-        //handle it gracefully", "-        _file = file.getAbsoluteFile();", "-      }", "-      _fileField.setText(_file.toString());", "-      _fileField.setCaretPosition(_fileField.getText().length());", "-    ", "-    }", "+//    if (file != null && file.exists()) {", "+//      try {", "+//        _file = file.getCanonicalFile();", "+//      }", "+//      catch(IOException e) {", "+//        //handle it gracefully", "+//        _file = file.getAbsoluteFile();", "+//      }", "+    _file = file;", "+    resetFileField();", "+//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6287bb656dd9ca01f4152424005129cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 389, "methodNumberAfterChange": 392, "signatureBeforeChange": "   private void _setUpStatusBar()", "signatureAfterChange": "   private void _setUpStatusBar()", "diff": ["-   */", "+  /** Sets up the status bar with the filename field. Only called from MainFrame constructor. */", "-    // Set up the 3 labels:", "-    _fileNameField = new JLabel();", "-    _fileNameField.setFont(_fileNameField.getFont().deriveFont(Font.PLAIN));", "-    _sbMessage = new JLabel();//(\"This is the text for the center message\");", "+    // Initialize the 3 labels:", "+", "+    _fileNameField.setFont(_fileNameField.getFont().deriveFont(Font.PLAIN));", "-    ", "-    _currLocationField = new JLabel();", "+", "-    // Create the status bar panel", "+    // Initialize the status bar panel", "-    _statusBar = new JPanel(new BorderLayout());//( layout );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d8199edaab5ac4f4fab1771ce0019c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "b7d4cb04f4bb848380a14b3825abe047db8dc58f", "commitAfterChange": "101c103fed282ea73966b5bc0dce7152a188fba5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "signatureAfterChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "diff": ["+    Iterable<File> additionalCompilerFiles = IterUtil.empty();", "+      try {", "+        additionalCompilerFiles = desc.getAdditionalCompilerFiles(f);", "+      }", "+      catch(FileNotFoundException fnfe) {", "+        // not all additional compiler files were found", "+        isSupported = false;", "+      }", "-      Iterable<File> path = IterUtil.singleton(IOUtil.attemptAbsoluteFile(f));", "+      Iterable<File> path = IterUtil.map(IterUtil.compose(additionalCompilerFiles, f), new Lambda<File,File>() {", "+        public File value(File arg) { return IOUtil.attemptAbsoluteFile(arg); }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3c95518a81db0841206b1f8ed79139", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "68d14b52468e7fad6eb9d5f26ee2e88ac93b395f", "commitAfterChange": "eecd5bf659bbe102ef241e14507e30064ca6f329", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "signatureAfterChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "diff": ["-        else if (_isLanguageLevelFile(f)) {  /* a .dj0 or .dj1 file */  // WARNING: no support for .dj files here", "+        else if (_isLanguageLevelFile(f)) {  /* a .dj0 or .dj1 or .dj file */", "-        // Set up augmented file  WARNING: DOES NOT WORK FOR .DJ EXTENSION", "-        String augmentedFilePath = f.getAbsolutePath();", "-        augmentedFilePath = augmentedFilePath.substring(0, augmentedFilePath.length() - 4); //remove the .dj# extension", "-        ", "-        File augmentedFile = new File(augmentedFilePath + \".java\"); //replace it with .java", "+        // Set up augmented file", "+        File augmentedFile = getJavaForLLFile(f); //replace .dj? with .java"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb0aa75e7b7a766bd6f1fd6de45ea89e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "7ea53a2dfdcfb14d60683d433ef09ceeb7c764d3", "commitAfterChange": "e656613109a12add4ad6c51f7040ce36731c0f8b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void compile(OpenDefinitionsDocument doc) throws IOException", "signatureAfterChange": "   public void compile(OpenDefinitionsDocument doc) throws IOException", "diff": ["-    File[] files = { doc.getFile() };  ", "-    // throws a FileMovedException if file has moved, which is preferable to the InvalidPackageException produced", "-    // by getSourceRoot for the same circumstances", "-     ", "-    _rawCompile(new File[] { doc.getSourceRoot() }, files); ", "+    File f = doc.getFile();", "+    File[] files, excludedFiles;", "+    ", "+    if (endsWithExt(f, EXTENSIONS)) {", "+      files = new File[]{f};", "+      excludedFiles = new File[0];", "+    }", "+    else {", "+      files = new File[0];", "+      excludedFiles = new File[]{f};", "+    }", "+    _rawCompile(new File[] { doc.getSourceRoot() }, files, excludedFiles); "]}], "num": 18346}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ddc9f6054e8926f212f4041feac4f8a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0065fdefb89d19507222bb1c37da8a4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void testGreaterThanEqual()", "signatureAfterChange": "   public void testGreaterThanEqual() throws ExceptionReturnedException", "diff": ["-  public void testGreaterThanEqual() {", "-    Node exp = _parseCode(\"new Float(1) >= new Float(2);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testGreaterThanEqual() throws ExceptionReturnedException {", "+    String text = \"new Float(1) >= new Float(2);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: floatValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Float) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: floatValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Float) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "794a8a42c388bfc6a67024bcb3cc71a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public void testGreaterThan()", "signatureAfterChange": "   public void testGreaterThan() throws ExceptionReturnedException", "diff": ["-  public void testGreaterThan() {", "-    Node exp = _parseCode(\"new Double(1) > new Double(2);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testGreaterThan() throws ExceptionReturnedException {", "+    String text = \"new Double(1) > new Double(2);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: doubleValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Double) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: doubleValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Double) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}], "num": 14869}
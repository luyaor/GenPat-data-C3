{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08e845284ba6b5432f0f36245210e7bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "428497152ffcc5c973f03b1b68303a14", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected final void invokeSlave(String[] jvmArgs, String cp, File workDir) throws IOException, RemoteException", "signatureAfterChange": "   protected final void invokeSlave(String[] jvmArgs, String cp, File workDir) throws IOException, RemoteException", "diff": ["+    _log.log(this + \".invokeSlave(\" + Arrays.toString(jvmArgs) + \", \" + cp + \", \" + workDir + \") called\");", "+    ", "-      if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");", "-      if (_slave != null) throw new IllegalStateException(\"slave nonnull in invoke: \" + _slave);", "+      if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");      ", "+      if (_slave != null) throw new IllegalStateException(\"slave non-null in invoke: \" + _slave);", "+      ", "+      _stub = null;", "-          synchronized(_exportLock) {", "-            try {", "-              _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this);", "-              ", "-              // Debug: check that the IP address is 127.0.0.1", "-              // javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-            }", "-            catch (RemoteException re) {", "-              // javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-              throw new edu.rice.cs.util.UnexpectedException(re);", "-            }", "-            _exportLock.notify();", "+          _log.log(AbstractMasterJVM.this + \" starting creation of RMI stub for AbstractMasterJVM\");", "+          try { _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this); }", "+          ", "+          // Debug: check that the IP address is 127.0.0.1", "+          // javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "+          ", "+          catch (RemoteException re) {", "+            // javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+            throw new UnexpectedException(re);  // should never happen", "+          synchronized(_exportLock) { _exportLock.notify(); }", "+      ", "+      t.start();", "-        t.start();", "-        try { while (_stub == null) { _exportLock.wait(); } }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "+        try {", "+          while (_stub == null) { ", "+            _log.log(\"invokeSlave thread in \" + this + \" waiting for creation of AbstractMasterJVM RMI stub to complete\");", "+            _exportLock.wait(); ", "+          } ", "+        }", "+        catch (InterruptedException ie) { throw new UnexpectedException(ie); }  // should never happen", "+      ", "+      _log.log(this + \" completed creation of RMI stub for AbstractMasterJVM\");", "+    ", "+      ostream.close();", "+      ", "+      _log.log(this + \" completed writing RMI stub for AbstractMasterJVM to a file\");", "-      final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "+      final RemoteClassLoader _classLoader = new RemoteClassLoader(getClass().getClassLoader());", "+      _classLoaderStub = null;", "-          synchronized(_exportLock) {", "-            try {", "-              _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "-              ", "-              // Debug: check that the IP address is 127.0.0.1", "-              //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-            }", "-            catch (RemoteException re) {", "-              //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-              throw new edu.rice.cs.util.UnexpectedException(re);", "-            }", "-            _exportLock.notify();", "+          _log.log(AbstractMasterJVM.this + \" starting creation of RMI stub for RemoteClassLoader\");", "+          try {  _classLoaderStub = UnicastRemoteObject.exportObject(_classLoader); }", "+          ", "+          // Debug: check that the IP address is 127.0.0.1", "+          //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "+          ", "+          catch (RemoteException re) {", "+            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+            throw new UnexpectedException(re);  // should never happen", "+          synchronized(_exportLock) { _exportLock.notify(); }", "+      ", "+      t.start();", "-        t.start();", "-        try { while (_classLoaderStub == null) { _exportLock.wait(); } }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "+        try { ", "+          while (_classLoaderStub == null) { ", "+            _log.log(\"invokeSlave thread in \" + this + \" waiting for creation of RemoteClassLoader RMI stub to complete\");", "+            _exportLock.wait(); ", "+          } ", "+        }", "+        catch (InterruptedException ie) { throw new UnexpectedException(ie); }  // should never happen", "+      ", "+      _log.log(this + \" completed creation of RMI stub for RemoteClassLoader\");", "+      ostream.close();", "+      _log.log(this + \" completed writing RMI stub for RemoteClassLoader to a file\");", "+        ", "-      /* Create the slave JVM. */      ", "+      /* Create the slave JVM. */  ", "+      _log.log(this + \" is starting a slave JVM\");", "-      // Start a thread to wait for the slave to die.  When it dies, restart it.", "-      Thread thread = new Thread(_waitForQuitThreadName) {", "+      // Start a thread to wait for the slave to die.  When it dies, delegate what to do (restart?) to subclass", "+      Thread restartThread = new Thread(_waitForQuitThreadName) {", "+          _log.log(this + \"has started a Slave monitor thread waiting on process \" + process);", "-            ", "-            synchronized(AbstractMasterJVM.this) {", "+            _log.log(\"Process \" + process + \" died under control of \" + AbstractMasterJVM.this + \" with status \" + status);", "+            synchronized(_masterJVMLock) {", "-                // If we get here, the process died without registering.", "-                //  (This might be the case if something was wrong with the", "-                //   classpath, or if the new JVM couldn't acquire a port", "-                //   for debugging.)", "-                //", "-                // Proper behavior in this case is unclear, so we'll let", "-                //  our subclasses decide.  By default, we print a stack", "-                //  trace and do not proceed, to avoid going into a loop.", "+                _log.log(\"Process \" + process + \" died while starting up\");", "+                /* If we get here, the process died without registering. (This might be the case if something was wrong", "+                 * with the classpath, or if the new JVM couldn't acquire a port for debugging.)  Proper behavior in ", "+                 * this case is unclear, so we'll let our subclasses decide.  By default, we print a stack trace and ", "+                 * do not proceed, to avoid going into a loop. */", "-              UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "-//              Utilities.showDebug(\"calling handleSlaveQuit(\" + status + \")\");", "+              final boolean masterWithdrawn = UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "+              final boolean loaderWithdrawn = UnicastRemoteObject.unexportObject(_classLoader, true);", "+              if (! masterWithdrawn || ! loaderWithdrawn) {", "+                _log.log(\"unexport step failed in \" + AbstractMasterJVM.this);", "+                throw new UnexpectedException(\"remote objects exported by Master JVM could not be withdrawn!\");", "+              }", "+              ", "+              _log.log(AbstractMasterJVM.this + \" calling handleSlaveQuit(\" + status + \")\");", "-          catch (NoSuchObjectException e) {", "-            throw new edu.rice.cs.util.UnexpectedException(e);", "-          }", "-          catch (InterruptedException ie) {", "-            throw new edu.rice.cs.util.UnexpectedException(ie);", "-          }", "+          catch (NoSuchObjectException e) { throw new UnexpectedException(e); }", "+          catch (InterruptedException ie) { throw new UnexpectedException(ie); }", "-      thread.start();", "+      _log.log(this + \" is starting a slave monitor thread to detect when the Slave JVM dies\");", "+      restartThread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f00b9dca4e33931cf23df0ba30d2c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected final void invokeSlave(String[] jvmArgs, String cp, File workDir) throws IOException, RemoteException", "signatureAfterChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "diff": ["-  protected final void invokeSlave(String[] jvmArgs, String cp, File workDir) throws IOException, RemoteException {", "+  protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException, ", "+    RemoteException {", "-    _log.log(this + \".invokeSlave(\" + edu.rice.cs.util.StringOps.toString(jvmArgs) + \", \" + cp + \", \" + workDir + \") called\");", "-    ", "-    synchronized(_masterJVMLock) {", "+    synchronized(_masterJVMLock) { // synchronization prelude only lets one thread at a time execute the sequel", "-      if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");      ", "-      if (_slave != null) throw new IllegalStateException(\"slave non-null in invoke: \" + _slave);", "-      ", "+      try { while (_startupInProgress || _monitorThread != null) _masterJVMLock.wait(); }", "+      catch(InterruptedException e) { throw new UnexpectedException(e); }", "-      _stub = null;", "-    /**********************************************", "-     * First, we we export ourselves to a file... *", "-     **********************************************/", "-//      Thread t = new Thread(_exportMasterThreadName) {", "-//        public void run() {", "-    _log.log(AbstractMasterJVM.this + \" starting creation of RMI stub for AbstractMasterJVM\");", "-    try { _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this); }", "+    _log.log(this + \".invokeSlave(...) called\");", "+    assert (_slave != null);", "-    // Debug: check that the IP address is 127.0.0.1", "-    // javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-    ", "-    catch (RemoteException re) {", "-      // javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-      throw new UnexpectedException(re);  // should never happen", "+    /******************************************************************************************************", "+     * First, we we export ourselves to a file, if it has not already been done on a previous invocation. *", "+     *****************************************************************************************************/", "+", "+    if (_masterStub == null) {", "+      try { _masterStub = (MasterRemote) UnicastRemoteObject.exportObject(this); }", "+      catch (RemoteException re) {", "+        javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+        _log.log(this + \" threw \" + re);", "+        throw new UnexpectedException(re);  // should never happen", "+      }", "+      _log.log(this + \" EXPORTed Master JVM\");", "+      ", "+      _masterStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+      _masterStubFile.deleteOnExit();", "+      ", "+      // serialize stub to _masterStubFile", "+      FileOutputStream fstream = new FileOutputStream(_masterStubFile);", "+      ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "+      ostream.writeObject(_masterStub);", "+      ostream.flush();", "+      fstream.close();", "+      ostream.close();", "-//          synchronized(_exportLock) { _exportLock.notify(); }", "-//        }", "-//      };", "-//      t.start();", "-//      synchronized(_exportLock) {", "-//        try {", "-//          while (_stub == null) { ", "-//            _log.log(\"invokeSlave thread in \" + this + \" waiting for creation of AbstractMasterJVM RMI stub to complete\");", "-//            _exportLock.wait(); ", "-//          } ", "-//        }", "-//        catch (InterruptedException ie) { throw new UnexpectedException(ie); }  // should never happen", "-    ", "-    _log.log(this + \" completed creation of RMI stub for AbstractMasterJVM\");", "-    _stubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _stubFile.deleteOnExit();", "-    ", "-    // serialize stub to _stubFile", "-    FileOutputStream fstream = new FileOutputStream(_stubFile);", "-    ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_stub);", "-    ostream.flush();", "-    fstream.close();", "-//      ostream.close();", "-    ", "-    _log.log(this + \" completed writing RMI stub for AbstractMasterJVM to a file\");", "-    ", "-    /***********************************************************************************", "-     * Done exporting ourselves to a file ...  Now let's export our classloader        *", "-     * This will be used to handle classloading requests from the slave jvm.           *", "-     ***********************************************************************************/", "-    ", "-    final RemoteClassLoader _classLoader = new RemoteClassLoader(getClass().getClassLoader());", "-    _classLoaderStub = null;", "-//      t = new Thread(_exportMasterThreadName) {", "-//        public void run() {", "-    _log.log(AbstractMasterJVM.this + \" starting creation of RMI stub for RemoteClassLoader\");", "-    try {  _classLoaderStub = UnicastRemoteObject.exportObject(_classLoader); }", "-    ", "-    // Debug: check that the IP address is 127.0.0.1", "-    //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-    ", "-    catch (RemoteException re) {", "-      //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-      throw new UnexpectedException(re);  // should never happen", "-    }", "-//          synchronized(_exportLock) { _exportLock.notify(); }", "-//        }", "-//      };", "-    ", "-//      t.start();", "-//      synchronized(_exportLock) {", "-//        try { ", "-//          while (_classLoaderStub == null) { ", "-//            _log.log(\"invokeSlave thread in \" + this + \" waiting for creation of RemoteClassLoader RMI stub to complete\");", "-//            _exportLock.wait(); ", "-//          } ", "-//        }", "-//        catch (InterruptedException ie) { throw new UnexpectedException(ie); }  // should never happen", "-//      }", "-    ", "-    _log.log(this + \" completed creation of RMI stub for RemoteClassLoader\");", "-    _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _classLoaderStubFile.deleteOnExit();", "-    // serialize stub to _classLoaderStubFile", "-    fstream = new FileOutputStream(_classLoaderStubFile);", "-    ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_classLoaderStub);", "-    ostream.flush();", "-    fstream.close();", "-    ostream.close();", "-    ", "-    _log.log(this + \" completed writing RMI stub for RemoteClassLoader to a file\");", "-    ", "-    String[] args = ", "-      new String[] { _stubFile.getAbsolutePath(), _slaveClassName, _classLoaderStubFile.getAbsolutePath() };", "-    ", "-    /* Create the slave JVM. */  ", "-    _log.log(this + \" is starting a slave JVM\");", "-    final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs, workDir);", "+    final String[] args = ", "+      new String[] { _masterStubFile.getAbsolutePath(), _slaveClassName };", "-    Thread restartThread = new Thread(_waitForQuitThreadName) {", "+    _monitorThread = new Thread(_waitForQuitThreadName) {", "-        _log.log(this + \"has started a Slave monitor thread waiting on process \" + process);", "-        try {", "+        try { /* Create the slave JVM. */ ", "+          ", "+          _log.log(AbstractMasterJVM.this + \" is STARTING a Slave JVM with args \" + Arrays.toString(args));", "+          ", "+          final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs, workDir);", "+          _log.log(AbstractMasterJVM.this + \" CREATED Slave JVM process \" + process + \" with \" + asString());", "+          ", "-          _log.log(\"Process \" + process + \" died under control of \" + AbstractMasterJVM.this + \" with status \" + status);", "+          _log.log(process + \" DIED under control of \" + asString() + \" with status \" + status);", "-              /* If we get here, the process died without registering. (This might be the case if something was wrong", "-               * with the classpath, or if the new JVM couldn't acquire a port for debugging.)  Proper behavior in ", "-               * this case is unclear, so we'll let our subclasses decide.  By default, we print a stack trace and ", "-               * do not proceed, to avoid going into a loop. */", "+              /* If we get here, the process died without registering.  One possible cause is the intermittent funky 3 minute", "+               * pause in readObject in RUNNER.  Other possible causes are errors in the classpath or the absence of a ", "+               * debug port.  Proper behavior in this case is unclear, so we'll let our subclasses decide. */", "-            _slave = null;", "-            final boolean masterWithdrawn = UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "-            final boolean loaderWithdrawn = UnicastRemoteObject.unexportObject(_classLoader, true);", "-            if (! masterWithdrawn || ! loaderWithdrawn) {", "-              _log.log(\"unexport step failed in \" + AbstractMasterJVM.this);", "-              throw new UnexpectedException(\"remote objects exported by Master JVM could not be withdrawn!\");", "+            if (_slave != null) { // Slave JVM quit spontaneously", "+              _slave = null; ", "-            ", "-            _log.log(AbstractMasterJVM.this + \" calling handleSlaveQuit(\" + status + \")\");", "-            handleSlaveQuit(status);", "+            _monitorThread = null;", "+            _masterJVMLock.notifyAll();  // signal that Slave JVM died to any thread waiting for _monitorThread == null", "+            ", "+//          _log.log(asString() + \" calling handleSlaveQuit(\" + status + \")\");", "+          handleSlaveQuit(status);", "+", "-        catch (NoSuchObjectException e) { throw new UnexpectedException(e); }", "-        catch (InterruptedException ie) { throw new UnexpectedException(ie); }", "+        catch(NoSuchObjectException e) { throw new UnexpectedException(e); }", "+        catch(InterruptedException e) { throw new UnexpectedException(e); }", "+        catch(IOException e) { throw new UnexpectedException(e); }", "+      private String asString() { return \"MonitorThread@\" + Integer.toHexString(hashCode()); }", "-    _log.log(this + \" is starting a slave monitor thread to detect when the Slave JVM dies\");", "-    restartThread.start();", "+//    _log.log(this + \" is starting a slave monitor thread to detect when the Slave JVM dies\");", "+    _monitorThread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dadd293852eff5d0d32f4cbce30aa8d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "af0fc1431a7909c247b6b6799db5232d12cbecb2", "commitAfterChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected synchronized final void invokeSlave(String[] jvmArgs, String cp) throws IOException,      RemoteException", "signatureAfterChange": "   protected final void invokeSlave(String[] jvmArgs, String cp) throws IOException, RemoteException", "diff": ["-  protected synchronized final void invokeSlave(String[] jvmArgs, String cp) throws IOException, ", "-    RemoteException {", "-    if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");", "+  protected final void invokeSlave(String[] jvmArgs, String cp) throws IOException, RemoteException {", "-    if (_slave != null) throw new IllegalStateException(\"slave nonnull in invoke: \" + _slave);", "-    _startupInProgress = true;", "-    ", "-    //*******************************************", "-    // first, we we export ourselves to a file...", "-    //*******************************************", "-    ", "-    Thread t = new Thread(_exportMasterThreadName) {", "-      public void run() {", "-        synchronized(lock) {", "-          try {", "-            _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this);", "-            ", "-            // Debug: check that the IP address is 127.0.0.1", "-            //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-          }", "-          catch (RemoteException re) {", "-            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-            throw new edu.rice.cs.util.UnexpectedException(re);", "-          }", "-          lock.notify();", "-        }", "-      }", "-    };", "-    synchronized (lock) {", "-      t.start();", "-      while (_stub == null) {", "-        try { lock.wait(); }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "-      }", "-    }", "-    _stubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _stubFile.deleteOnExit();", "-    // serialize stub to _stubFile", "-    FileOutputStream fstream = new FileOutputStream(_stubFile);", "-    ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_stub);", "-    ostream.flush();", "-    fstream.close();", "-", "-    //*******************************************", "-    // done exporting ourselves to a file...", "-    // now lets export our classloader", "-    // this will be used to handle classloading ", "-    // requests from the slave jvm", "-    //*******************************************", "-    final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "-    t = new Thread(_exportMasterThreadName) {", "-      public void run() {", "-        synchronized(lock) {", "-          try {", "-            _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "-            ", "-            // Debug: check that the IP address is 127.0.0.1", "-            //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-          }", "-          catch (RemoteException re) {", "-            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-            throw new edu.rice.cs.util.UnexpectedException(re);", "-          }", "-          lock.notify();", "-        }", "-      }", "-    };", "-    synchronized(lock){", "-      t.start();", "-      while (_classLoaderStub == null) {", "-        try { lock.wait(); }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "-      }", "-    }", "-    _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _classLoaderStubFile.deleteOnExit();", "-    // serialize stub to _stubFile", "-    fstream = new FileOutputStream(_classLoaderStubFile);", "-    ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_classLoaderStub);", "-    ostream.flush();", "-    fstream.close();", "-    ", "-    String[] args = new String[] { ", "-      _stubFile.getAbsolutePath(),", "-      _slaveClassName,", "-      _classLoaderStubFile.getAbsolutePath()", "-    };", "-    ", "-    final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs);", "-    ", "-    // Start a thread to wait for the slave to die.  When it dies, restart it.", "-    Thread thread = new Thread(_waitForQuitThreadName) {", "-      public void run() {", "-        try {", "-          int status = process.waitFor();", "-          synchronized(AbstractMasterJVM.this) {", "-            if (_startupInProgress) {", "-              // If we get here, the process died without registering.", "-              //  (This might be the case if something was wrong with the", "-              //   classpath, or if the new JVM couldn't acquire a port", "-              //   for debugging.)", "-              //", "-              // Proper behavior in this case is unclear, so we'll let", "-              //  our subclasses decide.  By default, we print a stack", "-              //  trace and do not proceed, to avoid going into a loop.", "-              slaveQuitDuringStartup(status);", "+    synchronized(_masterJVMLock) {", "+      if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");", "+      ", "+      if (_slave != null) throw new IllegalStateException(\"slave nonnull in invoke: \" + _slave);", "+      _startupInProgress = true;", "+      ", "+      //*******************************************", "+      // first, we we export ourselves to a file...", "+      //*******************************************", "+      ", "+      Thread t = new Thread(_exportMasterThreadName) {", "+        public void run() {", "+          synchronized(lock) {", "+            try {", "+              _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this);", "+              ", "+              // Debug: check that the IP address is 127.0.0.1", "+              //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-            _slave = null;", "-            UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "-            handleSlaveQuit(status);", "+            catch (RemoteException re) {", "+              //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+              throw new edu.rice.cs.util.UnexpectedException(re);", "+            }", "+            lock.notify();", "-        catch (NoSuchObjectException e) {", "-          throw new edu.rice.cs.util.UnexpectedException(e);", "-        }", "-        catch (InterruptedException ie) {", "-          throw new edu.rice.cs.util.UnexpectedException(ie);", "+      };", "+      synchronized (lock) {", "+        t.start();", "+        while (_stub == null) {", "+          try { lock.wait(); }", "+          catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "-    };", "-    ", "-    thread.start();", "+      _stubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+      _stubFile.deleteOnExit();", "+      // serialize stub to _stubFile", "+      FileOutputStream fstream = new FileOutputStream(_stubFile);", "+      ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "+      ostream.writeObject(_stub);", "+      ostream.flush();", "+      fstream.close();", "+      ", "+      //*******************************************", "+      // done exporting ourselves to a file...", "+      // now lets export our classloader", "+      // this will be used to handle classloading ", "+      // requests from the slave jvm", "+      //*******************************************", "+      final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "+      t = new Thread(_exportMasterThreadName) {", "+        public void run() {", "+          synchronized(lock) {", "+            try {", "+              _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "+              ", "+              // Debug: check that the IP address is 127.0.0.1", "+              //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "+            }", "+            catch (RemoteException re) {", "+              //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+              throw new edu.rice.cs.util.UnexpectedException(re);", "+            }", "+            lock.notify();", "+          }", "+        }", "+      };", "+      synchronized(lock){", "+        t.start();", "+        while (_classLoaderStub == null) {", "+          try { lock.wait(); }", "+          catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "+        }", "+      }", "+      _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+      _classLoaderStubFile.deleteOnExit();", "+      // serialize stub to _stubFile", "+      fstream = new FileOutputStream(_classLoaderStubFile);", "+      ostream = new ObjectOutputStream(fstream);", "+      ostream.writeObject(_classLoaderStub);", "+      ostream.flush();", "+      fstream.close();", "+      ", "+      String[] args = new String[] { ", "+        _stubFile.getAbsolutePath(),", "+          _slaveClassName,", "+          _classLoaderStubFile.getAbsolutePath()", "+      };", "+      ", "+      final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs);", "+      ", "+      // Start a thread to wait for the slave to die.  When it dies, restart it.", "+      Thread thread = new Thread(_waitForQuitThreadName) {", "+        public void run() {", "+          try {", "+            int status = process.waitFor();", "+            synchronized(AbstractMasterJVM.this) {", "+              if (_startupInProgress) {", "+                // If we get here, the process died without registering.", "+                //  (This might be the case if something was wrong with the", "+                //   classpath, or if the new JVM couldn't acquire a port", "+                //   for debugging.)", "+                //", "+                // Proper behavior in this case is unclear, so we'll let", "+                //  our subclasses decide.  By default, we print a stack", "+                //  trace and do not proceed, to avoid going into a loop.", "+                slaveQuitDuringStartup(status);", "+              }", "+              _slave = null;", "+              UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "+              handleSlaveQuit(status);", "+            }", "+          }", "+          catch (NoSuchObjectException e) {", "+            throw new edu.rice.cs.util.UnexpectedException(e);", "+          }", "+          catch (InterruptedException ie) {", "+            throw new edu.rice.cs.util.UnexpectedException(ie);", "+          }", "+        }", "+      };", "+      ", "+      thread.start();", "+    }"]}], "num": 4724}
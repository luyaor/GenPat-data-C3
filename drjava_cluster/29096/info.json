{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8032ba84e9326b8b4a73455067ae0e5f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fa01703a982316a1c7135dd79805645", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 28, "signatureBeforeChange": "        public void breakpointAdded(Breakpoint bp)", "signatureAfterChange": "     public void breakpointSet(final Breakpoint bp)", "diff": ["-   ", "-   public void breakpointAdded(Breakpoint bp) {", "-     ", "-     DefaultMutableTreeNode bpDoc = new DefaultMutableTreeNode(bp.getClassName());", "-     ", "-     Enumeration documents = _breakpointNode.children();", "-     while (documents.hasMoreElements()) {", "-       DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-       if (doc.getUserObject().equals(bpDoc.getUserObject())) {", "-         //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "-         DefaultMutableTreeNode newBreakpoint = new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "-         _bpTreeModel.insertNodeInto(newBreakpoint,", "-                                     doc,", "-                                     doc.getChildCount());", "-                                     ", "-         _bpTree.scrollPathToVisible(new TreePath(newBreakpoint.getPath()));", "-         ", "-         return;", "-       }", "-     }", "-     _bpTreeModel.insertNodeInto(bpDoc,", "-                                 _breakpointNode,", "-                                 _breakpointNode.getChildCount());", "-                                ", "-     _bpTreeModel.insertNodeInto(new DefaultMutableTreeNode(new Integer(bp.getLineNumber())),", "-                                 bpDoc,", "-                                 bpDoc.getChildCount());", "-     ", "-     TreePath pathToNewBreakpoint = ", "-       new TreePath(((DefaultMutableTreeNode)bpDoc.getChildAt(bpDoc.getChildCount() - 1)).getPath());", "-     ", "-     _bpTree.scrollPathToVisible(pathToNewBreakpoint);", "-     _bpTree.setSelectionPath(pathToNewBreakpoint);", "-   }", "+     */", "+    public void breakpointSet(final Breakpoint bp) {", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          DefaultMutableTreeNode bpDocNode = new DefaultMutableTreeNode(bp.getClassName());", "+          ", "+          // Look for matching document node", "+          Enumeration documents = _breakpointRootNode.children();", "+          while (documents.hasMoreElements()) {", "+            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+            if (doc.getUserObject().equals(bpDocNode.getUserObject())) {", "+              //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "+              ", "+              // Create a new breakpoint in this node", "+              // TO DO: Sort by line number!", "+              DefaultMutableTreeNode newBreakpoint = ", "+                new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "+              _bpTreeModel.insertNodeInto(newBreakpoint,", "+                                          doc,", "+                                          doc.getChildCount());", "+              ", "+              // Make sure this node is visible", "+              _bpTree.scrollPathToVisible(new TreePath(newBreakpoint.getPath()));", "+              return;", "+            }", "+          }", "+          ", "+          // No matching document node was found, so create one", "+          _bpTreeModel.insertNodeInto(bpDocNode,", "+                                      _breakpointRootNode,", "+                                      _breakpointRootNode.getChildCount());", "+          DefaultMutableTreeNode newBreakpoint = ", "+            new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "+          _bpTreeModel.insertNodeInto(newBreakpoint,", "+                                      bpDocNode,", "+                                      bpDocNode.getChildCount());", "+          ", "+          // Make visible", "+          TreePath pathToNewBreakpoint = new TreePath(newBreakpoint.getPath());", "+          _bpTree.scrollPathToVisible(pathToNewBreakpoint);", "+          //_bpTree.setSelectionPath(pathToNewBreakpoint);", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd507c0987087b7ddf07eaabdd26c49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 142, "signatureBeforeChange": "          public void threadLocationUpdated(OpenDefinitionsDocument doc,                                        final int lineNumber)", "signatureAfterChange": "          public void threadLocationUpdated(final OpenDefinitionsDocument doc,                                        final int lineNumber)", "diff": ["-    ", "-    public void threadLocationUpdated(OpenDefinitionsDocument doc, ", "-                                      final int lineNumber) {", "-      ActionListener setSizeListener = new ActionListener() {", "-        public void actionPerformed(ActionEvent ae) {", "-          _currentDefPane.centerViewOnLine(lineNumber);", "-          _docList.revalidate();", "-          _docList.repaint();", "-          _docSplitPane.revalidate();", "-          _docSplitPane.repaint();", "-      _currentDefPane.addSetSizeListener(setSizeListener);", "-      if (!_model.getActiveDocument().equals(doc)) {", "-        //DrJava.consoleOut().println(\"Don't need to setActiveDocument here\");", "-        _model.setActiveDocument(doc);", "-      }", "-      ", "-      if (_currentDefPane.getSize().getWidth() > 0 &&", "-          _currentDefPane.getSize().getHeight() > 0) {", "-        _currentDefPane.centerViewOnLine(lineNumber); ", "-        _docList.revalidate();", "-        _docList.repaint();", "-        _docSplitPane.revalidate();", "-        _docSplitPane.repaint();", "-      }", "-", "-      if (_currentThreadLocationHighlight != null) {", "-        _currentThreadLocationHighlight.remove();", "-        _currentThreadLocationHighlight = null;", "-        _currentDefPane.revalidate();", "-        _currentDefPane.repaint();", "-      }", "-      DefinitionsDocument defDoc = doc.getDocument();", "-      int startOffset = defDoc.getOffset(lineNumber);", "-      _currentThreadLocationHighlight = _currentDefPane.getHighlightManager().addHighlight(startOffset,", "-                                                         defDoc.getLineEndPos(startOffset),", "-                                                         DefinitionsPane.THREAD_PAINTER);", "+    public void threadLocationUpdated(final OpenDefinitionsDocument doc, ", "+                                      final int lineNumber) {", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          //DrJava.consoleOut().println(\"MF: thread location updated\");", "+          ", "+          ActionListener setSizeListener = new ActionListener() {", "+            public void actionPerformed(ActionEvent ae) {", "+              //DrJava.consoleOut().println(\"MF: in setSizeListener.actionPerformed\");", "+              _currentDefPane.centerViewOnLine(lineNumber);", "+              _docList.revalidate();", "+              _docList.repaint();", "+              _docSplitPane.revalidate();", "+              _docSplitPane.repaint();", "+            }", "+          };", "+          _currentDefPane.addSetSizeListener(setSizeListener);", "+          ", "+          if (!_model.getActiveDocument().equals(doc)) {", "+            //DrJava.consoleOut().println(\"Don't need to setActiveDocument here\");", "+            _model.setActiveDocument(doc);", "+          }", "+      ", "+          if (_currentDefPane.getSize().getWidth() > 0 &&", "+              _currentDefPane.getSize().getHeight() > 0) {", "+            //DrJava.consoleOut().println(\"MF: centering view\");", "+            _currentDefPane.centerViewOnLine(lineNumber); ", "+            //_docList.revalidate();", "+            //_docList.repaint();", "+            //_docSplitPane.revalidate();", "+            //_docSplitPane.repaint();", "+          }", "+", "+          if (_currentThreadLocationHighlight != null) {", "+            _currentThreadLocationHighlight.remove();", "+            _currentThreadLocationHighlight = null;", "+            //_currentDefPane.revalidate();", "+            //_currentDefPane.repaint();", "+          }", "+          DefinitionsDocument defDoc = doc.getDocument();", "+          int startOffset = defDoc.getOffset(lineNumber);", "+          int endOffset = defDoc.getLineEndPos(startOffset);", "+          _currentThreadLocationHighlight = ", "+            _currentDefPane.getHighlightManager().addHighlight(startOffset,", "+                                                               endOffset,", "+                                                               DefinitionsPane.THREAD_PAINTER);", "+          //DrJava.consoleOut().println(\"MF: done with thread loc update\");", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);", "+    }"]}], "num": 29096}
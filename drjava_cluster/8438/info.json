{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d259e5f0dba057f3d5f6944b707f8f96", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28d2de97caa83017fbd21fe40666241f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "          public void testGetQualifiedSymbolData()", "signatureAfterChange": "          public void testGetQualifiedSymbolData()", "diff": ["-                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false, true));", "+                   _llv._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false, true));", "-      SymbolData sd2 = _llv._getQualifiedSymbolData(\"java.lang.Integer\", JExprParser.NO_SOURCE_INFO, true, true, true);", "+      SymbolData sd2 = _llv._getQualifiedSymbolData(\"java.lang.Integer\", SourceInfo.NO_INFO, true, true, true);", "-      SymbolData sd3 = _llv._getQualifiedSymbolData(\"Wow\", JExprParser.NO_SOURCE_INFO, true, true, true);", "+      SymbolData sd3 = _llv._getQualifiedSymbolData(\"Wow\", SourceInfo.NO_INFO, true, true, true);", "-//                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, false, false, true));", "+//                   _llv._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, false, false, true));", "-                   _llv._getQualifiedSymbolData(\"testPackage.File\", JExprParser.NO_SOURCE_INFO, true, false,  true));", "+                   _llv._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false,  true));", "-                   _llv._getQualifiedSymbolData(\"java.lang.String\", JExprParser.NO_SOURCE_INFO, true, false, true));", "+                   _llv._getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NO_INFO, true, false, true));", "-                                                   JExprParser.NO_SOURCE_INFO, true, false, true));", "+                                                   SourceInfo.NO_INFO, true, false, true));", "-                                                 JExprParser.NO_SOURCE_INFO, false, false, false));", "+                                                 SourceInfo.NO_INFO, false, false, false));", "-                 _llv._getQualifiedSymbolData(\"notRightPackage\", JExprParser.NO_SOURCE_INFO, false, false, false));", "+                 _llv._getQualifiedSymbolData(\"notRightPackage\", SourceInfo.NO_INFO, false, false, false));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9139d779d4d280e43b3276c0fc96b220", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "          public void testGetFieldOrVariable()", "signatureAfterChange": "          public void testGetFieldOrVariable()", "diff": ["-      VariableData vd3 = new VariableData(\"variable1\", new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[0]), _sd3, true, _sd3);", "+      VariableData vd3 = new VariableData(\"variable1\", new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[0]), _sd3, true, _sd3);", "-      assertEquals(\"Should find field0\", vd0, _btc.getFieldOrVariable(\"field0\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should find field1\", vd1, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should find field2\", vd2, _btc.getFieldOrVariable(\"field2\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should not find field7\", null, _btc.getFieldOrVariable(\"field7\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should find variable1\", vd3, _btc.getFieldOrVariable(\"variable1\", md, _sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should find field0\", vd0, _btc.getFieldOrVariable(\"field0\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find field1\", vd1, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find field2\", vd2, _btc.getFieldOrVariable(\"field2\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should not find field7\", null, _btc.getFieldOrVariable(\"field7\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find variable1\", vd3, _btc.getFieldOrVariable(\"variable1\", md, _sd3, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should not find field1\", null, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO), new LinkedList<VariableData>()));", "+      assertEquals(\"Should not find field1\", null, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO), new LinkedList<VariableData>()));"]}], "num": 8438}
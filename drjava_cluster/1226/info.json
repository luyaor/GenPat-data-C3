{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "782358cbb87c0beeca7a5746c1017e53", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27d27960cb1557e0accefc882d32184f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/AnonymousAllocation.java", "commitBeforeChange": "d7e29fae36890273cb02f65a4dcc06babb1b1e53", "commitAfterChange": "40502fe8d6d2aa924af9e28579518088d3c23148", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public AnonymousAllocation(ReferenceTypeName tp, List<? extends Expression> args, List<Node> memb,                              String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public AnonymousAllocation(ReferenceTypeName tp, List<? extends Expression> args, List<Node> memb, SourceInfo si)", "diff": ["-  public AnonymousAllocation(ReferenceTypeName tp, List<? extends Expression> args, List<Node> memb,", "-                             String fn, int bl, int bc, int el, int ec) {", "-    super(tp, args, fn, bl, bc, el, ec);", "+  public AnonymousAllocation(ReferenceTypeName tp, List<? extends Expression> args, List<Node> memb, SourceInfo si) {", "+    super(tp, args, si);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90dd452312e3b165041fe19f65e7e19c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/SimpleAllocation.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public SimpleAllocation(ReferenceTypeName tp, List<? extends Expression> args,                           SourceInfo si)", "signatureAfterChange": "   public SimpleAllocation(ReferenceTypeName tp, List<? extends Expression> args, SourceInfo si)", "diff": ["-  public SimpleAllocation(ReferenceTypeName tp, List<? extends Expression> args,", "-                          SourceInfo si) {", "+   */", "+  public SimpleAllocation(ReferenceTypeName tp, List<? extends Expression> args, SourceInfo si) {", "+    this(Option.<List<TypeName>>none(), tp, args, si);", "+  }", "-", "-    if (tp == null) throw new IllegalArgumentException(\"tp == null\");"]}], "num": 1226}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bab88f238a54a4150f5988328511b010", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d86598e454f3d3c3fbaa0a8c2bda756", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 429, "methodNumberAfterChange": 429, "signatureBeforeChange": "\r \r   public void forBitwiseOrExpression(BitwiseOrExpression that)", "signatureAfterChange": "    public void forBitwiseOrExpression(BitwiseOrExpression that)", "diff": ["-\r", "-  public void forBitwiseOrExpression(BitwiseOrExpression that) {\r", "-    forBitwiseOrExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forBitwiseOrExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseOrExpression(BitwiseOrExpression that) {", "+    forBitwiseOrExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forBitwiseOrExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82dfb52ff113a043e649290e3ef46d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 431, "methodNumberAfterChange": 431, "signatureBeforeChange": "\r \r   public void forBitwiseAndExpression(BitwiseAndExpression that)", "signatureAfterChange": "    public void forBitwiseAndExpression(BitwiseAndExpression that)", "diff": ["-\r", "-  public void forBitwiseAndExpression(BitwiseAndExpression that) {\r", "-    forBitwiseAndExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forBitwiseAndExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseAndExpression(BitwiseAndExpression that) {", "+    forBitwiseAndExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forBitwiseAndExpressionOnly(that);", "+  }"]}], "num": 3043}
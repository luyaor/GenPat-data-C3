{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df34b2e203f382970c6f6fbba9c48893", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "886ecc5e81b1bff51f889a11d43f6c03", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "7fd25882874ad9a06ac74fda13ef9cc77e52813e", "commitAfterChange": "028b13db63615f9cda7227ddd738bbfc3e1c04ec", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   protected void readText(final boolean finish)", "signatureAfterChange": "   protected void readText(final boolean finish)", "diff": ["-        if (_is==null) { _sb.append(\"\\nInput stream suddenly became null.\"); }", "-        if (_erris==null) { _sb.append(\"\\nError input stream suddenly became null.\"); }", "+        if ((_p!=null) && (_is==null)) {", "+          try {", "+            // try to get exitValue() to see if process has terminated; exit value is not otherwise important", "+            int ignored = _p.exitValue();", "+            // if no exception is thrown, then the process has finished, and the stream may be null", "+          }", "+          catch(IllegalThreadStateException e) {", "+            // process has NOT finished yet, but the stream is null; this is a problem", "+            _sb.append(\"\\nInput stream suddenly became null.\");", "+          }", "+        }", "+        if ((_p!=null) && (_erris==null)) { ", "+          try {", "+            // try to get exitValue() to see if process has terminated; exit value is not otherwise important", "+            int ignored = _p.exitValue();", "+            // if no exception is thrown, then the process has finished, and the stream may be null", "+          }", "+          catch(IllegalThreadStateException e) {", "+            // process has NOT finished yet, but the stream is null; this is a problem", "+            _sb.append(\"\\nError input stream suddenly became null.\");", "+          }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54e35800b711b96c7ea3637eef391a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineEmpty.java", "commitBeforeChange": "42669dc5656697beebfecb16842ba181e2bab301", "commitAfterChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    // one solution: if startOfLine somehow tells you when ", "-    //   there's no first WS char on this line", "-    //   (i.e. the line is empty), just use that.", "-    // otherwise:", "-    // START = findPrevDelimiter(start of statement)   --START", "-    // END = go forward to find first \\n or EOF", "-    // return true if there's only WS between START and END    ", "-", "-    throw new RuntimeException(\"Not yet implemented!\");", "+    try {", "+      // Determine if there are only whitespace chars by seeing if the", "+      //  first non-WS char is the endOfLine", "+      int here = doc.getCurrentLocation();", "+      int endOfLine = doc.getLineEndPos(here);", "+      int firstNonWS = doc.getLineFirstCharPos(here);", "+      return (endOfLine == firstNonWS);", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f158ac8a519d7b897cedb690b41c8ddd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "b68b258fee7c24e8a8c68fc2e7d3d99ccd585753", "commitAfterChange": "ec06880aa408b928b2f252538b208a76154d8334", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   protected void updateButtons()", "signatureAfterChange": "   protected void updateButtons()", "diff": ["-    _abortButton.setEnabled((_is!=null) || (_erris!=null));", "-    _updateNowButton.setEnabled((_is!=null) || (_erris!=null));", "-    _runAgainButton.setEnabled((_is==null) || (_erris==null));", "+    boolean ended = true;", "+    if (_p!=null) {", "+      try {", "+        // try to get exitValue() to see if process has terminated; exit value is not otherwise important", "+        int ignored = _p.exitValue();", "+        // if no exception is thrown, then the process has finished", "+        ended = true;", "+      }", "+      catch(IllegalThreadStateException e) {", "+        // process has NOT finished yet", "+        ended = false;", "+      }", "+    }", "+    _abortButton.setEnabled((_is!=null) && (_erris!=null) && (!ended));", "+    _updateNowButton.setEnabled((_is!=null) && (_erris!=null) && (!ended));", "+    _runAgainButton.setEnabled((_is==null) || (_erris==null) || (ended));"]}], "num": 14510}
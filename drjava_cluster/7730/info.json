{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0edcbee8ebd82199c84316d27b3e0483", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f2310774a7584e7bb14f0539229ff5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "03dd354632fbfc12bf279640160bfd934404dc39", "commitAfterChange": "2714f88d04f312c23b21ec6a440193d44b7121ba", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 171, "signatureBeforeChange": "      public void fileSaved(OpenDefinitionsDocument doc)", "signatureAfterChange": "      public void fileSaved(OpenDefinitionsDocument doc)", "diff": ["-      _recentFileManager.updateOpenFiles(doc.getFile());", "+      try {", "+        _recentFileManager.updateOpenFiles(doc.getFile());", "+      }", "+      catch (IllegalStateException ise) {", "+        // Impossible: saved => has a file", "+        throw new UnexpectedException(ise);", "+      }", "+      catch (FileMovedException fme) {", "+        // Recover, show it in the list anyway", "+        _recentFileManager.updateOpenFiles(fme.getFile());", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1288cb1c251e6e07fe3b8bc2f86ef0fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/swing/SwingUtil.java", "commitBeforeChange": "a8bdfee12d75aa9a066652d8f975838df6021bb2", "commitAfterChange": "73b7f0a42ebcf824c132189e958d58c40bbacf0e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public static void clearEventQueue()", "signatureAfterChange": "   public static void clearEventQueue() throws InterruptedException", "diff": ["-  /** Wait for all items in the event queue to be handled.  This may be called by any thread. */", "-  public static void clearEventQueue() {", "-    invokeAndWait(LambdaUtil.NO_OP);", "+   */", "+  public static void clearEventQueue() throws InterruptedException {", "+    if (SwingUtilities.isEventDispatchThread()) {", "+      throw new IllegalStateException(\"Can't clear the event queue from within the event dispatch thread\");", "+    }", "+    try { SwingUtilities.invokeAndWait(LambdaUtil.NO_OP); }", "+    catch (InvocationTargetException e) {", "+      // Should never happen: Runnable is a no-op.", "+      error.log(e);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b00385bbfb3a972dc364570f63e8252", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "cf0a1f75cafbcb8e83a2946957d5a8ff29201984", "commitAfterChange": "4797c88df085350f20017e12376c628dfb0cbb07", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "     private File _getSourceRoot(String packageName)       throws InvalidPackageException", "signatureAfterChange": "     private File _getSourceRoot(String packageName)       throws InvalidPackageException", "diff": ["-      File parentDir = sourceFile;", "-      while (!packageStack.empty()) {", "-        String part = (String) packageStack.pop();", "+      // Must use the canonical path, in case there are dots in the path", "+      //  (which will conflict with the package name)", "+      try {", "+        File parentDir = sourceFile.getCanonicalFile();", "+        while (!packageStack.empty()) {", "+          String part = (String) packageStack.pop();", "+          parentDir = parentDir.getParentFile();", "+          ", "+          if (parentDir == null) {", "+            throw new RuntimeException(\"parent dir is null?!\");", "+          }", "+          ", "+          // Make sure the package piece matches the directory name", "+          if (! part.equals(parentDir.getName())) {", "+            String msg = \"The source file \" + sourceFile.getAbsolutePath() +", "+              \" is in the wrong directory or in the wrong package. \" +", "+              \"The directory name \" + parentDir.getName() +", "+              \" does not match the package component \" + part + \".\";", "+            ", "+            throw new InvalidPackageException(-1, msg);", "+          }", "+        }", "+", "+        // OK, now parentDir points to the directory of the first component of the", "+        // package name. The parent of that is the root.", "-", "-          throw new RuntimeException(\"parent dir is null?!\");", "+          throw new RuntimeException(\"parent dir of first component is null?!\");", "-        // Make sure the package piece matches the directory name", "-        if (! part.equals(parentDir.getName())) {", "-          String msg = \"The source file \" + sourceFile.getAbsolutePath() +", "-            \" is in the wrong directory or in the wrong package. \" +", "-            \"The directory name \" + parentDir.getName() +", "-            \" does not match the package component \" + part + \".\";", "-", "-          throw new InvalidPackageException(-1, msg);", "-        }", "+        return parentDir;", "-", "-      // OK, now parentDir points to the directory of the first component of the", "-      // package name. The parent of that is the root.", "-      parentDir = parentDir.getParentFile();", "-      if (parentDir == null) {", "-        throw new RuntimeException(\"parent dir of first component is null?!\");", "+      catch (IOException ioe) {", "+        String msg = \"Could not locate directory of the source file: \" + ioe;", "+        throw new InvalidPackageException(-1, msg);", "-", "-      return parentDir;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a24550e3c2e6c0a897b74dedf147681d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "18e16fa33368c591f3ff38462373a1f8b2d32e42", "commitAfterChange": "444072402330e6ce74be177e8877c1371f53a074", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "   private void _javadocAll()", "signatureAfterChange": "   private void _javadocAll()", "diff": ["-        returnVal = _javadocChooser.showOpenDialog(MainFrame.this);", "+        returnVal = _javadocChooser.showDialog(this, \"Select\");", "-      ", "+", "+    catch (InvalidPackageException ipe) {", "+      _showError(ipe, \"JavaDoc Error\",", "+                 \"JavaDoc encountered an invalid package name.\");", "+    }", "+    catch (JavadocException jde) {", "+      _showError(jde, \"JavaDoc Error\",", "+                 \"There was an error generating the javadoc.\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7dff5f5decad3cc03e2ec4d052a4320", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "03dd354632fbfc12bf279640160bfd934404dc39", "commitAfterChange": "2714f88d04f312c23b21ec6a440193d44b7121ba", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 172, "signatureBeforeChange": "      public void fileOpened(final OpenDefinitionsDocument doc)", "signatureAfterChange": "      public void fileOpened(final OpenDefinitionsDocument doc)", "diff": ["-      _recentFileManager.updateOpenFiles(doc.getFile());", "+      try {", "+        _recentFileManager.updateOpenFiles(doc.getFile());", "+      }", "+      catch (IllegalStateException ise) {", "+        // Impossible: opened => has a file", "+        throw new UnexpectedException(ise);", "+      }", "+      catch (FileMovedException fme) {", "+        // Recover, show it in the list anyway", "+        _recentFileManager.updateOpenFiles(fme.getFile());", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d579ee2d7dbdad08389dd05182186143", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "5402d816f4ee865f7ec73de4093cafaa0c215bb0", "commitAfterChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   synchronized boolean setCurrentThread(ThreadReference thread)", "signatureAfterChange": "   synchronized boolean setCurrentThread(ThreadReference thread)", "diff": ["-    if (_suspendedThreads.isEmpty() || _suspendedThreads.peek() != thread) {", "-      _suspendedThreads.push(thread);", "-      return true;", "+    try {", "+      if ((_suspendedThreads.isEmpty() || !_suspendedThreads.contains(thread.uniqueID()))", "+            && (thread.isSuspended() && thread.frameCount() > 0)) {", "+        _suspendedThreads.push(thread);", "+        return true;", "+      }", "+      else {", "+        return false;", "+      }", "-    else {", "-      return false;", "+    catch (IncompatibleThreadStateException itse) {", "+      // requesting stack frames should be fine, since the thread must be", "+      // suspended or frameCount() is not called", "+      throw new UnexpectedException(itse);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7039628e741aa0ea83a891d70192d7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public void saveFile(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public void saveFile(FileSaveSelector com) throws IOException", "diff": ["-  public void saveFile(FileSaveSelector com) throws IOException {", "-    FileSaveSelector realCommand;", "-    final File file = _definitionsDoc.getFile();", "-    if (file == null) {", "-      realCommand = com;", "-    }", "-    else {", "-      realCommand = new FileSaveSelector() {", "-        public File getFile() throws OperationCanceledException {", "-          return file;", "-        }", "-      };", "-    }", "-    saveFileAs(realCommand);", "-  }", "+     */", "+    public void saveFile(FileSaveSelector com) throws IOException {", "+      FileSaveSelector realCommand;", "+      final File file;", "+", "+      try {", "+        if (_doc.isUntitled()) {", "+          realCommand = com;", "+        }", "+        else {", "+          file = _doc.getFile();", "+          realCommand = new FileSaveSelector() {", "+            public File getFile() throws OperationCanceledException {", "+              return file;", "+            }", "+          };", "+        }", "+", "+        saveFileAs(realCommand);", "+      }", "+      catch (IllegalStateException ise) {", "+        // No file; this should be caught by isUntitled()", "+        throw new UnexpectedException(ise);", "+      }", "+    }"]}], "num": 7730}
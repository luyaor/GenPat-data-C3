{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bb5f364814418f1cafdde1403ca81bf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "609715cff08ab6173a10ff2f02225b64", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 57, "signatureBeforeChange": "   private String _getValue(Value value)", "signatureAfterChange": "   private String _getValue(Value value) throws DebugException", "diff": ["-  private String _getValue(Value value) {", "+  private String _getValue(Value value) throws DebugException {", "-    /*try {", "-      thread = object.owningThread();", "-    }", "-    catch (IncompatibleThreadStateException itse) {", "-      DrJava.consoleOut().println(\"thread is not suspended\");", "-      return DebugWatchUndefinedValue.ONLY.toString();", "-    }*/", "-    Value stringValue = null;", "-      stringValue = object.invokeMethod(thread, method, new LinkedList(), ObjectReference.INVOKE_SINGLE_THREADED);", "+      Value stringValue = object.invokeMethod(thread, method, new LinkedList(),", "+                                              ObjectReference.INVOKE_SINGLE_THREADED);", "+      return stringValue.toString();", "+      throw new UnexpectedException(ite);", "+      throw new UnexpectedException(cnle);", "-      DrJava.consoleOut().println(\"thread is not suspended\");", "-      return DebugWatchUndefinedValue.ONLY.toString();", "+      throw new DebugException(\"Cannot determine value from thread: \" + itse);", "-      DrJava.consoleOut().println(\"invocation exception\");", "-      return DebugWatchUndefinedValue.ONLY.toString();", "+      throw new DebugException(\"Could not invoke toString: \" + ie);", "-    return stringValue.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f8aef8d6dce70783925faa18dbbdb49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/NewJVMTest.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 26, "signatureBeforeChange": "    public void testStackTraceEmptyTrace() throws Throwable", "signatureAfterChange": "              public Void forUnexpectedException(Throwable t)", "diff": ["-", "-  public void testStackTraceEmptyTrace() throws Throwable {", "-    _log.log(\"NewJVMTest.testStackTraceEmptyTrace executing\");", "-    synchronized(_testLock) {", "-      _jvm.interpret(\"null.toString()\");", "-", "-      while (_jvm.exceptionClassBuf == null) {", "-        _testLock.wait();", "-      }", "-", "-      assertEquals(\"exception class\",", "-                   \"java.lang.NullPointerException\",", "-                   _jvm.exceptionClassBuf);", "-      assertEquals(\"stack trace\",", "-                   InterpreterJVM.EMPTY_TRACE_TEXT.trim(),", "-                   _jvm.exceptionTraceBuf.trim());", "-    }", "-  }", "+      ", "+      public Void forUnexpectedException(Throwable t) {", "+        debug.log();", "+        throw new UnexpectedException(t);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa9e2d75d51f6a0b0169c350f36fb5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 120, "signatureBeforeChange": "   public static SizedIterable<?> arrayIterable(Object array)", "signatureAfterChange": "   public static SizedIterable<?> arrayAsIterable(Object array)", "diff": ["+   */", "+  public static SizedIterable<?> arrayAsIterable(Object array) {", "+    if (array instanceof Object[]) { return new ObjectArrayWrapper<Object>((Object[]) array); }", "+    else if (array instanceof int[]) { return new IntArrayWrapper((int[]) array); }", "+    else if (array instanceof char[]) { return new CharArrayWrapper((char[]) array); }", "+    else if (array instanceof byte[]) { return new ByteArrayWrapper((byte[]) array); }", "+    else if (array instanceof double[]) { return new DoubleArrayWrapper((double[]) array); }", "+    else if (array instanceof boolean[]) { return new BooleanArrayWrapper((boolean[]) array); }", "+    else if (array instanceof short[]) { return new ShortArrayWrapper((short[]) array); }", "+    else if (array instanceof long[]) { return new LongArrayWrapper((long[]) array); }", "+    else if (array instanceof float[]) { return new FloatArrayWrapper((float[]) array); }", "+    else { throw new IllegalArgumentException(\"Non-array argument\"); }", "+  }", "-   */", "-  public static SizedIterable<?> arrayIterable(Object array) {", "-    if (!array.getClass().isArray()) { throw new IllegalArgumentException(\"Non-array argument\"); }", "-    if (array instanceof Object[]) { return arrayIterable((Object[]) array); }", "-    else if (array instanceof int[]) { return arrayIterable((int[]) array); }", "-    else if (array instanceof char[]) { return arrayIterable((char[]) array); }", "-    else if (array instanceof byte[]) { return arrayIterable((byte[]) array); }", "-    else if (array instanceof double[]) { return arrayIterable((double[]) array); }", "-    else if (array instanceof boolean[]) { return arrayIterable((boolean[]) array); }", "-    else if (array instanceof short[]) { return arrayIterable((short[]) array); }", "-    else if (array instanceof long[]) { return arrayIterable((long[]) array); }", "-    else if (array instanceof float[]) { return arrayIterable((float[]) array); }", "-    else { throw new IllegalArgumentException(\"Unrecognized array type\"); }", "-  }"]}], "num": 8002}
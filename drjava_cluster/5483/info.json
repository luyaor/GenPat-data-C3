{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a88af35a55b33347a22af0c69c8dfffb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0376d18693d82371c9a7e554b86ff5d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 53, "signatureBeforeChange": "   private void _runCommand()", "signatureAfterChange": "   private void _runCommand()", "diff": ["+    GeneralProcessCreator.LOG.log(\"_runCommand(): ${drjavajar.file} = \"+_commandDrJavaJarFileLine.getText());", "-      runCommand(\"\", _commandLine.getText(), _commandWorkDirLine.getText());", "+      try { ", "+        _props = PropertyMaps.TEMPLATE.clone();", "+        PropertyMaps pm = _props.clone();", "+        String s = _commandDrJavaJarFileLine.getText().trim();", "+        ((MutableFileProperty)pm.getProperty(\"drjavajar.file\")).setFile(s.length()>0?new File(s):null);", "+        runCommand(\"\", _commandLine.getText(), _commandWorkDirLine.getText(), _commandDrJavaJarFileLine.getText(), pm);", "+      } catch(CloneNotSupportedException e) {", "+        throw new edu.rice.cs.util.UnexpectedException(e);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3db4e547cbd20efd832ba01de708db40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsComment.java", "commitBeforeChange": "ef72bde352b18dc4ba661aa460f476829dae95cc", "commitAfterChange": "42669dc5656697beebfecb16842ba181e2bab301", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    // return ", "-    //   (stateAtRelLocation(dist. to PREVSTART) != INSIDE_BLOCK_COMMENT)", "-    // NB: not always accurate.  No false positives, but may give false", "-    // negative.  Example:", "-    // * /  foo  / *", "-    // bar", "-    // Indenting at \"bar\" will not notice that its comment begins on the", "-    // \"foo\" line.  But it will be treated as a continuation of the comment", "-    // before \"foo\", so I think this is acceptable.", "-    throw new RuntimeException(\"Not yet implemented!\");", "+    int cursor;", "+", "+    // Move back to start of current line", "+    cursor = doc.getLineStartPos(doc.getCurrentLocation());", "+    ", "+    // If the start of the current line is the start of the", "+    // document, there was no previous line and so this", "+    // line must have started the comment", "+    if(cursor == DefinitionsDocument.DOCSTART) {", "+      return false;", "+    } else {", "+      // Move the cursor to the previous line", "+      cursor = cursor - 1;", "+      ", "+      // Move it to the start of the previous line", "+      cursor = doc.getLineStartPos(cursor);", "+      ", "+      // Return if the start of the previous line is", "+      // in a comment.", "+      BraceReduction reduced = doc.getReduced();", "+      reduced.resetLocation();", "+      ReducedModelState state = reduced.stateAtRelLocation(cursor -", "+\t\t\t\t\t\t\t   reduced.absOffset());", "+      return !state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT);", "+    }"]}], "num": 5483}
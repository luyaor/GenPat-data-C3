{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "438350dc6bb353868bd0a0c1b2a9fbf6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20bf7d3a7b09e7c98f0231d7bb64b66c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9fafa675e1abc1585dda269f9d8ec93edeb3135d", "commitAfterChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void testDividingTwoIntegers()", "signatureAfterChange": "   public void testDividingTwoIntegers() throws ExceptionReturnedException", "diff": ["-  public void testDividingTwoIntegers() {", "-    Node exp = _parseCode(\"new Integer(1) / new Integer(2);\").get(0);", "+  public void testDividingTwoIntegers() throws ExceptionReturnedException {", "+    String text = \"new Integer(1) / new Integer(2);\";", "+    BinaryExpression exp = (BinaryExpression)_parseCode(text).get(0);", "+    ", "+    String expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    String actual = exp.getLeftExpression().toString();", "+    assertEquals(\"Should have unboxed correctly.\", expected, actual);", "+    ", "+    expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "+    actual = exp.getRightExpression().toString();", "+    assertEquals(\"Should have unboxed correctly.\", expected, actual);", "+    ", "+    _interpreter.interpret(text);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cb2fae866541bf3f4293fdac357f95a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9fafa675e1abc1585dda269f9d8ec93edeb3135d", "commitAfterChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testModingTwoIntegers()", "signatureAfterChange": "   public void testModingTwoIntegers() throws ExceptionReturnedException", "diff": ["-  public void testModingTwoIntegers() {", "-    Node exp = _parseCode(\"new Integer(1) % new Integer(2);\").get(0);", "+  public void testModingTwoIntegers() throws ExceptionReturnedException {", "+    String text = \"new Integer(1) % new Integer(2);\";", "+    BinaryExpression exp = (BinaryExpression)_parseCode(text).get(0);", "+    ", "+    String expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    String actual = exp.getLeftExpression().toString();", "+    assertEquals(\"Should have unboxed correctly.\", expected, actual);", "+    ", "+    expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "+    actual = exp.getRightExpression().toString();", "+    assertEquals(\"Should have unboxed correctly.\", expected, actual);", "+    ", "+    _interpreter.interpret(text);"]}], "num": 4749}
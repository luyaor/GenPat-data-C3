{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dbf31ffdbd4c36b880f2f1c1eb067e3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a9578e811f9b864f92d10e348acac97", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d57a4715eeda5394b496008be220f6252b47b950", "commitAfterChange": "ac02f569f5916c295bec9f11458dcf6db5964244", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 250, "signatureBeforeChange": "     protected void removeMoreRecentThanCurrent()", "signatureAfterChange": "     public void setCurrentRegion(R region)", "diff": ["-    /** Remove regions more recent than the current region. */", "-    protected void removeMoreRecentThanCurrent() {", "-      if (_current != null) {", "-        int index = getIndexOf(_current);", "-        if (index < 0) return;", "-        while (index < _regions.size() - 1) { removeRegion(_regions.lastElement()); }  // remove last element", "-      }", "-    }", "+      if (_regions.contains(region)) _current = region;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c64c023bf72fe32a3fd3b6e9a53eac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7bb32c28070a4b5d5697c7c88ea0d664289c76e8", "commitAfterChange": "b2ad80c49aaa09f293a5bc1f6664d4cc5243219e", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 59, "signatureBeforeChange": "      public void fileClosed(OpenDefinitionsDocument doc)", "signatureAfterChange": "      public void fileClosed(OpenDefinitionsDocument doc)", "diff": ["-      int index = _definitionsDocs.indexOf(doc);", "-      _definitionsDocs.remove(index);", "-      _defScrollPanes.remove(index);", "+      _defScrollPanes.remove(doc);", "+      //_setDocListDividerLocation();", "+    }", "-      // Get next document", "-      int len = _definitionsDocs.size();", "-      if (len > 0) {", "-        if (_currentDocIndex >= len) {", "-          _currentDocIndex = len - 1;", "-        }", "-        _docList.setSelectedValue(_definitionsDocs.get(_currentDocIndex),", "-                                  true);", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "499332270814bd449663d3f92df83224", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": "    public static boolean arrayEquals(Object[] array1, Object[] array2)", "signatureAfterChange": "    public static boolean arrayEquals(Object[] array1, Object[] array2)", "diff": ["-  public static boolean arrayEquals(Object[] array1, Object[] array2) {", "-    if (array1 == null && array2 == null) { return true; }", "-    if (array1 == null || array2 == null) { return false; }", "-    if (array1.length != array2.length) { return false; }", "-    for (int i = 0; i < array1.length; i++) {", "-      if (!array1[i].equals(array2[i])) { return false;}", "-    }", "-    return true;", "-  }", "+  public static boolean arrayEquals(Object[] array1, Object[] array2) { return Arrays.equals(array1, array2); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "901e30f2fccd6a33da28da35f6280565", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "92062677ca813cb9ab44428a0d2d54f0c3309b04", "commitAfterChange": "274f7defc49003e66c942e814c9ce22958b3814c", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": "          public void caretUpdate(final CaretEvent ce )", "signatureAfterChange": "     public void caretUpdate(final CaretEvent ce)", "diff": ["-    public void caretUpdate(final CaretEvent ce ) {", "-      final OpenDefinitionsDocument doc = _model.getActiveDocument();", "-      // The following block of code does not appear to require running in the event thread", "-//      Utilities.invokeLater(new Runnable() { ", "-//        public void run() { ", "-          doc.acquireReadLock();", "-          try {", "-            doc.setCurrentLocation(ce.getDot());  ", "-            int line = doc.getCurrentLine();", "-            int col = doc.getCurrentCol();", "-            updateLocation(line, col);", "-          }", "-          finally { doc.releaseReadLock(); }", "-//        } ", "-//      });", "-    }", "+    // The following method does not need to run in the event thread", "+    public void caretUpdate(final CaretEvent ce) { updateLocation(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a83a86e7b9656f3af7b09278af044646", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "f890e4f390e6dffdf4acc5a20fdfaf842af067ae", "commitAfterChange": "7ea76f9d0ba4fdeba8f11e0e1f676da0dad79852", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   String _removeTabs(String source)", "signatureAfterChange": "   String _removeTabs(final String source)", "diff": ["+  String _removeTabs(final String source) {", "+    return source.replace('\\t', ' ');", "+  }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af70a1d25602373fdfa0d6cce42ec5e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileSuccessTestCase.java", "commitBeforeChange": "0ceee5d462dea01e571a97507c2d04495b971db0", "commitAfterChange": "ab9e3c17a5a3c5f93e2194242f915fa2f6bda14a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected boolean _isGenericCompiler()", "signatureAfterChange": "   protected boolean _isGenericCompiler()", "diff": ["-  protected boolean _isGenericCompiler() {", "-    String name = _model.getCompilerModel().getActiveCompiler().getClass().getName();", "-    for (int i=0; i < CompilerRegistry.GENERIC_JAVA_COMPILERS.length; i++) {", "-      if (name.equals(CompilerRegistry.GENERIC_JAVA_COMPILERS[i])) {", "-        //System.out.println(name + \" supports generics\");", "-        return true;", "-      }", "-    }", "-    //System.out.println(name + \" doesn't support generics\");", "-    return false;", "-  }", "+  protected boolean _isGenericCompiler() { return ! CompilerProxy.VERSION.equals(\"1.4\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9d9ec1aa4373447ccd71ba58606ee4c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 62, "signatureBeforeChange": "   protected void advanceCaret(final int n)", "signatureAfterChange": "      protected void scrollToCaret()", "diff": ["-  /** Advances the caret in the interactions pane by n characters and scrolls the pane to make it visible. */", "-  protected void advanceCaret(final int n) {", "-    /* In legacy unit tests, _pane can apparently be null in some cases.  It can also be mutated in the middle of run() ", "-       in InteractionsDJDocumentTest.testStylesListContentAndReset. */", "-    final InteractionsPane pane = _pane;  ", "-    if (Utilities.TEST_MODE && pane == null) return;  // Some legacy unit tests do not set up an interactions pane", "-    ", "-    Utilities.invokeLater(new Runnable() {  // initialize caret in the interactions pane ", "+  ", "+  protected void scrollToCaret() {", "+    Utilities.invokeLater(new Runnable() {", "-//        pane.validate();", "-        int caretPos = pane.getCaretPosition();", "-        int newCaretPos = Math.min(caretPos + n, _document.getLength());", "-        pane.setCaretPos(newCaretPos);", "+        final InteractionsPane pane = _pane; ", "+        if (pane == null) return;  // Can be called in tests when component has not been realized", "-      } ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c01c405d77cab5cb9564207d00dcf614", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException, InterruptedException", "signatureAfterChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException, InterruptedException", "diff": ["-    doc.acquireWriteLock();", "-    ", "-    try { doc.indentLines(0, doc.getLength()); }", "-    finally { doc.releaseWriteLock(); }", "+//    doc.acquireWriteLock();", "+//    try { ", "+    doc.indentLines(0, doc.getLength()); ", "+//    }", "+//    finally { doc.releaseWriteLock(); }", "-    final int oldPos = pane.getCaretPosition();", "-//    System.err.println(\"Old position is: \" + oldPos);", "-    ", "-        pane.setCaretPosition(newPos);", "+        doc.getUndoManager().undo();", "-    Utilities.clearEventQueue();", "-    // Moving this statement to the event thread breaks \"Undo should have restored ...\"  Why?  Timing.  ", "-    // Inserting Thread.sleep(500) does the same thing", "-    doc.getUndoManager().undo();", "-    ", "+", "-    int rePos = pane.getCaretPosition();", "+    int rePos = doc.getCurrentLocation();", "-    assertEquals(\"Undo should have restored caret position.\", oldPos, rePos);", "+    // cursor will be located at beginning of first line that is changed", "+//    assertEquals(\"Undo should have restored cursor position.\", oldPos, rePos);", "-    assertEquals(\"redo restores caret position\", oldPos, pane.getCaretPosition());", "+//    assertEquals(\"redo restores caret position\", oldPos, pane.getCaretPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb2d84a7b992ce9eda9c5cef3cc9e3aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/LineEnumRule.java", "commitBeforeChange": "ad6842e7f3f5b3d0f8c5827298c4ec26a70a9f28", "commitAfterChange": "3b8045fd172adb1b641557166ba819c94a41813a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void paintComponent(Graphics g)", "signatureAfterChange": "   public void paintComponent(Graphics g)", "diff": ["-    final OpenDefinitionsDocument odd = _pane.getOpenDefDocument();", "-    final int endOffset = odd.getEndPosition().getOffset()-1;", "-    int lastLine = odd.getNumberOfLines();", "-", "-    if (odd.getLineStartPos(endOffset)!=odd.getLineEndPos(endOffset)) { ++lastLine; }", "+//    final OpenDefinitionsDocument odd = _pane.getOpenDefDocument();", "+//    final int endOffset = odd.getEndPosition().getOffset()-1;", "+//    int lastLine = odd.getDefaultRootElement().getElementIndex(endOffset);", "+//    ", "+//    if (odd.getLineStartPos(endOffset)!=odd.getLineEndPos(endOffset)) { ++lastLine; }", "-      final int lineNo = i/_increment +1;", "-      if (lineNo>lastLine) break;", "-      String text = Integer.toString(lineNo);", "+//      final int lineNo = i/_increment +1;", "+//      if (lineNo>lastLine) break;", "+//      String text = Integer.toString(lineNo);", "+      String text = Integer.toString(i/_increment +1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc6951885cd0c66f2d28d5f77863cd2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d57a4715eeda5394b496008be220f6252b47b950", "commitAfterChange": "ac02f569f5916c295bec9f11458dcf6db5964244", "methodNumberBeforeChange": 239, "methodNumberAfterChange": 239, "signatureBeforeChange": "     public void addRegion(final R r)", "signatureAfterChange": "     public void addRegion(final R r)", "diff": ["-          try {", "-            for (RegionManagerListener<R> l: _listeners) { l.regionAdded(r); }", "-          } finally { _lock.endRead(); }", "+          try { for (RegionManagerListener<R> l: _listeners) { l.regionAdded(r); } } ", "+          finally { _lock.endRead(); }", "-      else {", "-        int index = getIndexOf(_current);", "-        // if next was the region to be added, make that the current region", "-        if (index < _regions.size() - 1 && r.equals(_regions.get(index + 1))) nextCurrentRegion();", "-        // if previous was the region to be added, make that the current region", "-        else if (index > 0 && r.equals(_regions.get(index - 1))) prevCurrentRegion();", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee09e72c0d19e042c5aeeb7a2b8eb6b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": "     public void viewInteractionsClassPath()", "signatureAfterChange": "     public void viewInteractionsClassPath()", "diff": ["-    final StringBuilder cpBuf = new StringBuilder();", "-    ClassPathVector classPathElements = _model.getInteractionsClassPath();", "-    for(int i = 0; i < classPathElements.size(); i++) {", "-      cpBuf.append(classPathElements.get(i).getPath());", "-      if (i + 1 < classPathElements.size()) cpBuf.append(\"\\n\");", "-    }", "-    String classPath = cpBuf.toString();", "-    ", "-    new DrJavaScrollableDialog(this, \"Interactions Classpath\", \"Current Interpreter Classpath\", classPath).show();", "+    String cp = IterUtil.multilineToString(_model.getInteractionsClassPath());", "+    new DrJavaScrollableDialog(this, \"Interactions Classpath\", \"Current Interpreter Classpath\", cp).show();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef62c38dc48f1506198cce58369eda6d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "12384109e03448701c98d404f37be617f6e32fee", "commitAfterChange": "7b8e61b54c444deec40202441181317a86727c3a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public Vector<String> getClasspath()", "signatureAfterChange": "   public Vector<String> getClasspath()", "diff": ["-        Vector<String> classpath = new Vector<String>();", "-//        classpath.addAll(_startupClasspathVector);", "-//        classpath.addAll(_interpreterJVM().getAugmentedClasspath());", "-        for(int i = 0; i < _startupClasspathVector.size(); i++) {", "-          classpath.addElement(_startupClasspathVector.elementAt(i));", "-        }", "-        Vector<String> augmentedClasspath = _interpreterJVM().getAugmentedClasspath();", "-        for(int i = 0; i < augmentedClasspath.size(); i++) {", "-          classpath.addElement(augmentedClasspath.elementAt(i));", "-        }", "+        Vector<String> classpath = new Vector<String>(_startupClasspathVector);", "+        classpath.addAll(_interpreterJVM().getAugmentedClasspath());", "+//        for(int i = 0; i < _startupClasspathVector.size(); i++) {", "+//          classpath.addElement(_startupClasspathVector.elementAt(i));", "+//        }", "+//        Vector<String> augmentedClasspath = _interpreterJVM().getAugmentedClasspath();", "+//        for(int i = 0; i < augmentedClasspath.size(); i++) {", "+//          classpath.addElement(augmentedClasspath.elementAt(i));", "+//        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6879e728a564ed1b16baa94926a612d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   synchronized public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "signatureAfterChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "diff": ["+  /** Compiles all documents in the list of opendefinitionsdocuments sent as input. */", "+  public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException {", "+    ", "+    File buildDir = null;", "+    if (_getter.getFileGroupingState().isProjectActive()) {", "+      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "+    }", "+    ", "+    // Only compile if all are saved", "+    if (_hasModifiedFiles(defDocs)) {", "+      //System.out.println(\"Has modified files\");", "+      _notifier.saveBeforeCompile();", "+    }", "+    ", "+    ", "+    // check for modified project files, in case they didn't save when prompted", "+    if (_hasModifiedFiles(defDocs)) return;", "+    // if any files haven't been saved after we told our", "+    // listeners to do so, don't proceed with the rest", "+    // of the compile.", "+    ", "+    // Get sourceroots and all files", "+    File[] sourceRoots = getSourceRootSet();", "+    ArrayList<File> filesToCompile = new ArrayList<File>();", "+    ", "+    File f;", "+    String[] exts = getCompilableExtensions();", "+    for (OpenDefinitionsDocument doc : defDocs) {", "+        f = doc.getFile();", "+        if (endsWithExt(f, exts)) filesToCompile.add(f);", "+      catch (IllegalStateException ise) {", "+        // No file for this document; skip it", "+    }", "+    File[] files = filesToCompile.toArray(new File[0]);", "+    ", "+    _notifier.compileStarted();", "+    ", "+    try {", "+      // Compile the files", "+      _compileFiles(sourceRoots, files, buildDir);", "+    }", "+    catch (Throwable t) {", "+      CompilerError err = new CompilerError(t.toString(), false);", "+      CompilerError[] errors = new CompilerError[] { err };", "+      _distributeErrors(errors);", "+    }", "+    finally {", "+      // Fire a compileEnded event", "+      _notifier.compileEnded();", "-   */", "-  synchronized public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException {", "-    File buildDir = null;", "-    if (_getter.getFileGroupingState().isProjectActive()) {", "-      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "-    }", "-    // Only compile if all are saved", "-    if (_hasModifiedFiles(defDocs)) {", "-      //System.out.println(\"Has modified files\");", "-      _notifier.saveBeforeCompile();", "-    }", "-", "-    // check for modified project files, in case they didn't save when prompted", "-    if (_hasModifiedFiles(defDocs)) {", "-      // if any files haven't been saved after we told our", "-      // listeners to do so, don't proceed with the rest", "-      // of the compile.", "-    }", "-    else {", "-", "-      // Get sourceroots and all files", "-      File[] sourceRoots = getSourceRootSet();", "-      ArrayList<File> filesToCompile = new ArrayList<File>();", "-", "-      File f;", "-      String[] exts = getCompilableExtensions();", "-      boolean okToAdd;", "-      for (int i = 0; i < defDocs.size(); i++) {", "-        OpenDefinitionsDocument doc = defDocs.get(i);", "-        try {", "-          f = doc.getFile();", "-          okToAdd = false;", "-          for(String ext: exts){", "-            if(f.getName().endsWith(ext)){", "-              okToAdd = true;", "-            }", "-          }", "-          if(okToAdd){", "-            filesToCompile.add(f);", "-          }", "-        }", "-        catch (IllegalStateException ise) {", "-          // No file for this document; skip it", "-        }", "-      }", "-      File[] files = filesToCompile.toArray(new File[0]);", "-", "-      _notifier.compileStarted();", "-", "-      try {", "-        // Compile the files", "-        _compileFiles(sourceRoots, files, buildDir);", "-      }", "-      catch (Throwable t) {", "-        CompilerError err = new CompilerError(t.toString(), false);", "-        CompilerError[] errors = new CompilerError[] { err };", "-        _distributeErrors(errors);", "-      }", "-      finally {", "-        // Fire a compileEnded event", "-        _notifier.compileEnded();", "-      }", "-    }", "-  }  "]}], "num": 5876}
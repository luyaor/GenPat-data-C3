{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c181cc1411bcdbdbc35d0a1a2dbf47fc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "384d02c15964f78ed00823a310744fad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBraceTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testIsIn2DArray() throws BadLocationException", "signatureAfterChange": "   public void testIsIn2DArray() throws BadLocationException", "diff": ["-    assertTrue(\"At 0.\", ! rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.IndentReason.OTHER));", "-    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At 0.\", ! rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At identifier.\",  ! rule.testApplyRule(_doc, 10, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At start of outer array\", !rule.testApplyRule(_doc, 25, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Before start of inner array\", rule.applyRule(_doc, 50, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Before start of inner array\", rule.testApplyRule(_doc, 50, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Same line as inner {.\", rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Same line as inner {.\", rule.testApplyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line after inner {.\", !rule.testApplyRule(_doc, 75, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is stil in first.\", !rule.testApplyRule(_doc, 180, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Second pseudo array element.\",  rule.applyRule(_doc, 230, Indenter.IndentReason.OTHER));", "-    assertTrue(\"In multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Second pseudo array element.\",  rule.testApplyRule(_doc, 230, Indenter.IndentReason.OTHER));", "+    assertTrue(\"In multi-line comment.\", ! rule.testApplyRule(_doc, 260, Indenter.IndentReason.OTHER));", "-    assertTrue(\"multi-line comment w/ = {.\",  ! rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "+    assertTrue(\"multi-line comment w/ = {.\",  ! rule.testApplyRule(_doc, 275, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line closes multi-line comment.\", !rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.testApplyRule(_doc, 300, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", !rule.testApplyRule(_doc, 399, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Last close brace\",  rule.applyRule(_doc, 400, Indenter.IndentReason.OTHER));", "-    assertTrue(\"At end of document.\",  rule.applyRule(_doc, 401, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Last close brace\",  rule.testApplyRule(_doc, 400, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At end of document.\",  rule.testApplyRule(_doc, 401, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38a30a07fb7dec4561ca76391f51cca3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testCurly() throws BadLocationException", "signatureAfterChange": "      public void testCurly() throws BadLocationException", "diff": ["-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 20, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is curly brace.\", !_rule.applyRule(_doc, 21, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is close brace.\", !_rule.applyRule(_doc, 23, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 20, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is curly brace.\", !_rule.testApplyRule(_doc, 21, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is close brace.\", !_rule.testApplyRule(_doc, 23, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 20, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is curly brace.\", !_rule.applyRule(_doc, 21, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is curly brace.\", !_rule.applyRule(_doc, 23, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is close curly brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 20, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is curly brace.\", !_rule.testApplyRule(_doc, 21, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is curly brace.\", !_rule.testApplyRule(_doc, 23, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is close curly brace.\", !_rule.testApplyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 20, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is open curly brace.\", !_rule.applyRule(_doc, 21, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 24, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is open curly brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 20, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is open curly brace.\", !_rule.testApplyRule(_doc, 21, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 24, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is open curly brace.\", !_rule.testApplyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));"]}], "num": 15146}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c909006f0bc0db3f40b87678a5bd6ccc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09beb0563459722780ba1e3eb9a354c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "591ec87995880046281596623701cb5a561fc66e", "commitAfterChange": "ce73fdb27a8e7aa886580e240ca54bfd98e64031", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private void notifyOfCollapse(int leftPos, int rightPos, Node<T> rightPoint)", "signatureAfterChange": "     private void notifyOfCollapse(int leftPos, int rightPos, Node<T> rightPoint)", "diff": ["-     */", "+    /** Notifies the iterators in _listeners that a range of nodes has been collapsed. */", "-      for (Iterator listener : ModelList.this._listeners) {", "-        if ( listener._pos <= leftPos ) {", "-          // do nothing", "-        }", "-        else if (( listener._pos > leftPos ) && ( listener._pos <= rightPos )) {", "+      for (Iterator listener : _listeners) {", "+        int lisPos = listener._pos;", "+        if (lisPos <= leftPos) continue;", "+        if (lisPos < rightPos) {", "-        else { // next._pos > rightPos", "-          listener._pos -= (rightPos - leftPos - 1);", "+        else { // lisPos >+ rightPos", "+          listener._pos = lisPos - (rightPos - leftPos - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e60818da6639e41f731a4cf9d6132d55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "58507a81b298eda1c95791a37194e9f75288a8af", "commitAfterChange": "d752877ce93bbc024f3929677c06eafffafcc3e8", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 62, "signatureBeforeChange": "   public static String replaceVariables(String str, Hashtable<Object, Object> table)", "signatureAfterChange": "   public static String replaceVariables(String str, Hashtable<Object, Object> table)", "diff": ["+    // LOG.log(\"========================\");", "-      // if this is str single %, not an escaped %%...", "-      if((pos==str.length()-1) || (str.charAt(pos+1)!='%')) {", "+      // see if this is an escaped % (\"%%\")", "+      // LOG.log(\"str = '\"+str+\"'\");", "+      // LOG.log(\"pos = \"+pos);", "+      if((pos<str.length()-1) && (str.charAt(pos+1)=='%')) {", "+        // skip the second % as well", "+        // LOG.log(\"\\t%%\");", "+        str = str.substring(0, pos+1) + str.substring(pos+2);", "+      }", "+      else {", "+        // LOG.log(\"\\t%\");", "-      else {", "-        if (pos<str.length()-1) {", "-          // skip the second % as well", "-          ++pos;", "-        }", "-      }", "+    // LOG.log(\"end str = '\"+str+\"'\");"]}], "num": 9927}
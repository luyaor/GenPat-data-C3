{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be0f5b9a79e4b8f1890733c69399e12d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30075384589fb08671c2a5f10a8ddd9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/IntegerLiteral.java", "commitBeforeChange": "26668262ef01a77108768ef35014f0c42dcfcb10", "commitAfterChange": "29c3a48aaad146d1b60a0606bb1625984a770c41", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Integer parse(String s)", "signatureAfterChange": "   private static Integer parse(String s)", "diff": ["-    if (s.startsWith(\"0x\")) { radix = 16; start += 2; }", "-    else if (s.startsWith(\"0\") && s.length() > 1) { radix = 8; start++; }", "-    else if (s.startsWith(\"-\")) { start++; negate = true; }", "+    int end = s.length();", "+    // only consider 0x or 0 or - if this doesn't make the string empty", "+    if ((end-start>1) && (s.startsWith(\"-\"))) { start++; negate = true; }", "+    if ((end-start>2) && (s.startsWith(\"0x\",start))) { radix = 16; start += 2; }", "+    else if ((end-start>1) && (s.startsWith(\"0\",start)) && (s.length() > 1)) { radix = 8; start++; }", "-      throw new NumberFormatException(\"Literal is out of range\");", "+      throw new ParseError(new NumberFormatException(\"Literal is out of range: \"+s));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "effcf229a9d2c879ec73535c4b63c8b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/LongLiteral.java", "commitBeforeChange": "26668262ef01a77108768ef35014f0c42dcfcb10", "commitAfterChange": "29c3a48aaad146d1b60a0606bb1625984a770c41", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Long parse(String s)", "signatureAfterChange": "   private static Long parse(String s)", "diff": ["-    if (s.startsWith(\"0x\")) { radix = 16; start += 2; }", "-    else if (s.startsWith(\"0\") && s.length() > 1) { radix = 8; start++; }", "-    else if (s.startsWith(\"-\")) { start++; negate = true; }", "+    // only consider 0x or 0 or - if this doesn't make the string empty", "+    if ((end-start>1) && (s.startsWith(\"-\"))) { start++; negate = true; }", "+    if ((end-start>2) && (s.startsWith(\"0x\",start))) { radix = 16; start += 2; }", "+    else if ((end-start>1) && (s.startsWith(\"0\",start)) && (s.length() > 1)) { radix = 8; start++; }", "-      throw new NumberFormatException(\"Literal is out of range\");", "+      throw new ParseError(new NumberFormatException(\"Literal is out of range: \"+s));"]}], "num": 8186}
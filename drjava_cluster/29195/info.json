{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18fab7580d84067677411c58d295f876", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cddc96d0c65a76a2a8713b271cfac0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 420, "methodNumberAfterChange": 369, "signatureBeforeChange": "     public void breakpointRemoved(final Breakpoint bp)", "signatureAfterChange": "         public void regionRemoved(final Breakpoint bp)", "diff": ["+        /** Called when a breakpoint is removed. Must be executed in event thread. */", "+        public void regionRemoved(final Breakpoint bp) {      ", "+          HighlightManager.HighlightInfo highlight = _documentRegionHighlights.get(bp);", "+          if (highlight != null) highlight.remove();", "+          _documentRegionHighlights.remove(bp);", "+        }", "-    /* Must be executed in event thread. */", "-    public void breakpointRemoved(final Breakpoint bp) {", "-      ", "-      HighlightManager.HighlightInfo highlight = _breakpointHighlights.get(bp);", "-      if (highlight != null) highlight.remove();", "-      _breakpointHighlights.remove(bp);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ba2d14829a65727499a7cbfd96df50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/BrowserHistoryManager.java", "commitBeforeChange": "7abad9d4d237e1759bd098868c3fc80eb6e4365f", "commitAfterChange": "dcd05db97717868f3a1bba07cb5b1b9106d93c65", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "   private BrowserDocumentRegion next(BrowserDocumentRegion r)", "signatureAfterChange": "        public void run()", "diff": ["+    Utilities.invokeLater(new Runnable() { ", "+      public void run() {", "+        _lock.startRead();", "+        try { for (RegionManagerListener<BrowserDocumentRegion> l: _listeners) { l.regionRemoved(r); } } ", "+        finally { _lock.endRead(); }", "+      } ", "-  /** @return the region immediately higher than r and last (highest) if no higher region exists). */", "-  private BrowserDocumentRegion next(BrowserDocumentRegion r) {", "-    BrowserDocumentRegion next = _higher(_regions, r);", "-    if (next == null && ! _regions.isEmpty()) next = _regions.last();", "-    return next;"]}], "num": 29195}
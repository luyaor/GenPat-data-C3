{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "226f260f6aa2ef0e7cb97d4c1dda57af", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0349832b6316c039d7a8dfd0cd8e4225", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "4276346051c6ab89c146c0041be28826e7dfbe12", "commitAfterChange": "86bed99990f6eb7fff2cb31d595e17b49135df26", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testNoJUnitErrors() throws Exception", "signatureAfterChange": "   public void testNoJUnitErrors() throws Exception", "diff": ["+    ", "-    if (printMessages) System.out.println(\"after test\");", "+    if (printMessages) {", "+      System.out.println(\"after test\");", "+      System.out.println(\"erros: \"+_model.getJUnitModel().getJUnitErrorModel());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1399848d5b5e8118345cf7b68a357286", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "cdddd415c8ee9888478b5a253ffbb086fce1ed57", "commitAfterChange": "f1f97edd57f558d6d34abcd1fe039afc22f7a202", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "   private void _printBreakpoints()", "signatureAfterChange": "   private void _printBreakpoints()", "diff": ["-    //_model.getDebugManager().printBreakpoints();", "+    System.out.println(_model.getDebugManager().getBreakpoints());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d122af41ec30e3f71ac52b361ae3221", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "aff4ca7a048d3be1e2f863c90bf8f2bfe09306fd", "commitAfterChange": "7636e2659b4b69c586b657836319e825c9bf35fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "signatureAfterChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "diff": ["+    System.out.println(\"-----> file = \"+file+\" -- canWrite() = \"+file.canWrite()+\" -- exists() = \"+file.exists());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b40247353c4d4d82cf1fb552f226699", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "diff": ["-    ", "+    System.out.println(\"builder.getAuxiliaryFiles().length = \"+builder.getAuxiliaryFiles().length);", "+    ", "+//    synchronized(_auxiliaryFiles) {", "+//      _auxiliaryFiles = new LinkedList<File>();", "+//      for (File f: builder.getAuxiliaryFiles()) { _auxiliaryFiles.add(f); }", "+//    }", "+    ", "+    setFileGroupingState(makeProjectFileGroupingState(builder.getProjectRoot(), builder.getMainClass (), ", "+                                                      builder.getBuildDirectory(), builder.getWorkingDirectory(), file,", "+                                                      builder.getSourceFiles(), builder.getAuxiliaryFiles(),", "+                                                      builder.getClassPaths(), builder.getCreateJarFile(), ", "+                                                      builder.getCreateJarFlags()));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "763b3f64220ff23283c8a296ebd77dd0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "1de5cb95fee280565741d04f9d0c9ba9427f28c2", "commitAfterChange": "c12f68e3bc37fa5484d2cfb01f6ad9fc1d626551", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 193, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["+          System.out.println(fixPathForNavigator(file.getCanonicalPath()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8add7c4c71e1e7ff60a519b6bc546be3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 48, "signatureBeforeChange": "      public void testForVariableDeclaration()", "signatureAfterChange": "     public void xtestForVariableDeclaration()", "diff": ["-    public void testForVariableDeclaration() {", "+    /* NOTE: the following test is excluded because the anonymous class helper functions are now no-ops. */", "+    public void xtestForVariableDeclaration() {", "-                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "+                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), ", "-     VariableDeclarator[] d1 = {", "-       new InitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                         new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), ", "-                                         new Word(SourceInfo.NO_INFO, \"b\"), basic)", "-     };", "-     VariableDeclaration vd1 = new VariableDeclaration(SourceInfo.NO_INFO,_publicMav, d1); ", "-     ", "-     ClassBodyFullJavaVisitor cbav = ", "-       new ClassBodyFullJavaVisitor(_sd1, \"\", _fv._file, _fv._package, _fv._importedFiles, _fv._importedPackages, ", "-                                    _fv._classNamesInThisFile, _fv.continuations);", "-     vd1.visit(cbav);", "-     assertEquals(\"Should be 1 inner class of _sd1\", 1, _sd1.getInnerClasses().size());", "-     ", "+      VariableDeclarator[] d1 = {", "+        new InitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                          new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), ", "+                                          new Word(SourceInfo.NO_INFO, \"b\"), basic)", "+      };", "+      VariableDeclaration vd1 = new VariableDeclaration(SourceInfo.NO_INFO,_publicMav, d1); ", "+      ", "+      ClassBodyFullJavaVisitor cbav = ", "+        new ClassBodyFullJavaVisitor(_sd1, _sd1.getName(), _fv._file, _fv._package, _fv._importedFiles, _fv._importedPackages, ", "+                                     _fv._classesInThisFile, _fv.continuations, _fv.fixUps);", "+      vd1.visit(cbav);", "+      assertEquals(\"Should be 1 inner class of _sd1\", 1, _sd1.getInnerClasses().size());", "+      System.err.println(\"**** Completed testForVariableDeclaration\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c36b1050dda2fe7d503bcfa7cdd9d418", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 569, "methodNumberAfterChange": 569, "signatureBeforeChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile)", "signatureAfterChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile)", "diff": ["-     *  dialog to ask if all open source files should be compiled in order to test the program. */", "+      */", "-      if (DrJava.getConfig().getSetting(ALWAYS_COMPILE_BEFORE_JUNIT).booleanValue() || ! MainFrame.this.isVisible()) {", "+      System.err.println(\"in compileBeforeJUnit, TEST_MODE = \" + Utilities.TEST_MODE);", "+      if (DrJava.getConfig().getSetting(ALWAYS_COMPILE_BEFORE_JUNIT).booleanValue() || Utilities.TEST_MODE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c734936321baf406647a150df9d166a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileIOTest.java", "commitBeforeChange": "80b5fb6a38e815634acd75afbaca24da4d11be21", "commitAfterChange": "dea430b985112dc86310f3cdaf8b15a8dea3799c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testClassFileSynchronizationAfterRename() throws BadLocationException, IOException, IllegalStateException,     InterruptedException", "signatureAfterChange": "   public void testClassFileSynchronizationAfterRename() throws BadLocationException, IOException, IllegalStateException,     InterruptedException", "diff": ["-    assertTrue(\"Class file should not exist before compile\",", "-               doc.getCachedClassFile() == null);", "-    assertTrue(\"should not be in sync before compile\",", "-               !doc.checkIfClassFileInSync());", "+    System.err.println(\"cached class file is \" + doc.getCachedClassFile());", "+    assertTrue(\"Class file should not exist before compile\", doc.getCachedClassFile() == FileOps.NULL_FILE);", "+    assertTrue(\"should not be in sync before compile\", !doc.checkIfClassFileInSync());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdd8ebd849fca0b0159ddf1be801d55c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BreakpointsPanel.java", "commitBeforeChange": "c1462f7ce0a3f1454f1dfa5e0426218ea77c9146", "commitAfterChange": "7ea53a2dfdcfb14d60683d433ef09ceeb7c764d3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public void breakpointSet(final Breakpoint bp)", "signatureAfterChange": "     public void breakpointSet(final Breakpoint bp)", "diff": ["-            if (((Integer)lineNumber.getUserObject()).intValue() > bp.getLineNumber()) {", "+            if (((BPTreeUserObj)lineNumber.getUserObject()).lineNumber() > bp.getLineNumber()) {", "-                new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "+                new DefaultMutableTreeNode(new BPTreeUserObj(bp.getLineNumber(), bp.isEnabled()));", "-            new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "+            new DefaultMutableTreeNode(new BPTreeUserObj(bp.getLineNumber(), bp.isEnabled()));", "-        new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "+        new DefaultMutableTreeNode(new BPTreeUserObj(bp.getLineNumber(), bp.isEnabled()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e471c1306a06151ad12452998abeab24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "72640b96195bd3a76d41155bd95709f872408979", "commitAfterChange": "d2d33e1e8b9909063f71a6d427f45f269775bf94", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static String memSizeToString(long l)", "signatureAfterChange": "   public static String memSizeToString(long l)", "diff": ["-    if (i >= sizes.length) { i = sizes.length - 1; }", "+    if (i >= sizes.length) { i = sizes.length - 1; d *= 1024; /* undo last division by 1024 */ }", "+    System.out.println(\"l=\"+l+\" -> \"+sb.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f26803ab290366bcc0832e58adc18415", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BreakpointsPanel.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private void _updateButtons()", "signatureAfterChange": "   private void _updateButtons()", "diff": ["-        // TODO: check for enabled/disabled", "-        if (true) {", "+        System.out.println(\"breakpoint enabled = \"+bp.isEnabled());", "+        if (bp.isEnabled()) {"]}], "num": 20070}
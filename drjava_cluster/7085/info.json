{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "249f5b653fe15b15055258a93d57d2ea", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03c5f3520cc1da9b1f36c583bb953e4c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "a81421c85ea0de5b8b8c763de6071719d4028205", "commitAfterChange": "4d8af7b22d385acd73bbe5523f05ab749ba45ce4", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "   private void _switchDefScrollPane()", "signatureAfterChange": "   private void _switchDefScrollPane()", "diff": ["-  private void _switchDefScrollPane() {    ", "+  private void _switchDefScrollPane() {", "+    ", "-    _currentDefPane = (DefinitionsPane) scroll.getViewport().getView();", "-", "+    ", "+    // if the current def pane is uneditable, that means", "+    // we arrived here from a compile with errors.  We're", "+    // guaranteed to make it editable again when we ", "+    // return from the compilation, so we take the state", "+    // with us.  We guarantee only one definitions pane", "+    // is un-editable at any time.", "+    if ( _currentDefPane.isEditable() ){", "+      _currentDefPane = (DefinitionsPane) scroll.getViewport().getView();", "+    }", "+    else {", "+      _currentDefPane.setEditable(true);", "+      _currentDefPane = (DefinitionsPane) scroll.getViewport().getView();", "+      _currentDefPane.setEditable(false);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bd5ffcd927a02f8bdea5ab2fd416a4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "8b39e36f223ab70cac21c18457bdd21f1978e8e2", "commitAfterChange": "65f321398af60af439b02583f002515a69ff1dba", "methodNumberBeforeChange": 551, "methodNumberAfterChange": 551, "signatureBeforeChange": "   private void _setUpActions()", "signatureAfterChange": "   private void _setUpActions()", "diff": ["-    _setUpAction(_javadocAllAction, \"Javadoc\", \"Create and save Javadoc for the packages of all open documents\");", "-    _setUpAction(_javadocCurrentAction, \"Preview Javadoc Current\", \"Preview the Javadoc for the current document\");", "+    if (_model.getJavadocModel().isAvailable()) {", "+      _setUpAction(_javadocAllAction, \"Javadoc\", \"Create and save Javadoc for the packages of all open documents\");", "+      _setUpAction(_javadocCurrentAction, \"Preview Javadoc Current\", \"Preview the Javadoc for the current document\");", "+    }", "+    else {", "+      _javadocAllAction.setEnabled(false);", "+      _setUpAction(_javadocAllAction, \"Javadoc\",", "+                   \"Note: DrJava cannot run Javadoc because no JDK was found. Please install a JDK.\");", "+      _javadocCurrentAction.setEnabled(false);", "+      _setUpAction(_javadocCurrentAction, \"Preview Javadoc Current\",", "+                   \"Note: DrJava cannot run Javadoc because no JDK was found.  Please install a JDK.\");", "+    }"]}], "num": 7085}
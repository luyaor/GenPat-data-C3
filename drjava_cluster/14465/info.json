{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43568acba5413effa800e4d3276a81e9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "866b2cf12611f8433c1609cb59fc605f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected final void quitSlave() throws RemoteException", "signatureAfterChange": "   protected final void quitSlave()", "diff": ["+   */", "+  protected final void quitSlave() {", "+    if (isDisposed()) { throw new IllegalStateException(); }", "+", "+    // verify that we're in the right state, and that only one thread will quit at a time", "+    while (!_monitor.compareAndSet(State.RUNNING, State.QUITTING)) {", "+      debug.logValue(\"Waiting for RUNNING state\", \"current state\", _monitor.value());", "+      try { _monitor.ensureState(State.RUNNING); }", "+      catch (InterruptedException e) { throw new UnexpectedException(e); }", "+    }", "+    debug.log(\"Entered QUITTING state\");", "+    attemptQuit(_slave);", "+    _slave = null;", "+    _monitor.set(State.FRESH);", "+  }", "-    */", "-  protected final void quitSlave() throws RemoteException {", "-    SlaveRemote dyingSlave;", "-    synchronized(_masterJVMLock) {", "-      if (isStartupInProgress()) {", "-        /* There is a slave to be quit, but _slave == null, so we cannot contact it yet. Instead we set _quitOnStartup", "-         * and tell the slave to quit when it registers in registerSlave. */", "-        _quitOnStartup = true;", "-        return;", "-      }", "-      else if (_slave == null)  {", "-        _log.log(this + \" called quitSlave() when no slave was running\");", "-        return;", "-      }", "-      else {", "-        dyingSlave = _slave;", "-        _slave = null;", "-      }", "-    }", "-    dyingSlave.quit();  // remote operation is not synchronized!", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f47411339636463e0b6a6a622b3e265c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected void augmentVariableDeclarationModifiers(VariableDeclaration that)", "signatureAfterChange": "   protected void augmentVariableDeclarationModifiers(VariableDeclaration that)", "diff": ["-  /** Writes out implicit variableDeclarationModfiers that must be added to augmented file. */", "+    */", "-    String variableDeclarationModifiers = \"\";", "-    if (_isElementaryFile()) { variableDeclarationModifiers = \"private final \"; }", "-    else if (_isIntermediateFile()) { ", "-      //make static fields public final, make instance fields private final", "-      variableDeclarationModifiers = \"private final \";", "-      String[] mavs = that.getMav().getModifiers();", "-      for (int i = 0; i<mavs.length; i++) {", "-        if (mavs[i].equals(\"static\")) { variableDeclarationModifiers = \"public final \"; break; }", "-      }", "-    }", "-      ", "-    _writeToFileOut(variableDeclarationModifiers);", "+    ", "+    // make static fields public final, make instance fields private final", "+    StringBuilder modifierString = new StringBuilder();", "+    String[] modifiers = that.getMav().getModifiers();", "+    if (! Utilities.hasVisibilityModifier(modifiers)) {", "+      if (Utilities.isStatic(modifiers)) modifierString.append(\"public \");", "+      else modifierString.append(\"private \");", "+    }                                ", "+    if (! Utilities.isFinal(modifiers)) modifierString.append(\"final \"); ", "+    _writeToFileOut(modifierString.toString());"]}], "num": 14465}
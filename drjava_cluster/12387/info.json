{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9fb90a580146c28ce399410e373afba", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41bd399af64d2d040ac9c4e11813f2fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 135, "signatureBeforeChange": "   public void configNewProject() throws IOException", "signatureAfterChange": "   public void configNewProject() throws IOException", "diff": ["-   */", "+  /** Configures a new project (created by createNewProject) and writes it to disk; only runs in event thread. */", "-    ArrayList<File> srcFileList = new ArrayList<File>();", "-    LinkedList<File> auxFileList = new LinkedList<File>();", "+    ArrayList<DocFile> srcFileList = new ArrayList<DocFile>();", "+    LinkedList<DocFile> auxFileList = new LinkedList<DocFile>();", "-        builder.addSourceFile(new DocFile(f));", "-        srcFileList.add(f);", "+        DocFile file = new DocFile(f);", "+        file.setPackage(doc.getPackageName());  // must save _packageName so it is correct when project is loaded", "+        builder.addSourceFile(file);", "+        srcFileList.add(file);", "+        DocFile file = new DocFile(f);", "+        file.setPackage(doc.getPackageName());  // must save _packageName so it is correct when project is loaded", "-        auxFileList.add(f);", "+        auxFileList.add(file);", "-    File[] srcFiles = srcFileList.toArray(new File[srcFileList.size()]);", "-    File[] extFiles = extFileList.toArray(new File[extFileList.size()]);", "+    DocFile[] srcFiles = srcFileList.toArray(new DocFile[srcFileList.size()]);", "+    DocFile[] extFiles = extFileList.toArray(new DocFile[extFileList.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a2adc1dbca73cbe62e93ad313edf74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsController.java", "commitBeforeChange": "201b599e7e14dfbbe8e927af829c37bc841f5d12", "commitAfterChange": "21fabb90978768abb803c1055129fe3f21f171fa", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   protected void _setupMenu()", "signatureAfterChange": "   protected void _setupMenu()", "diff": ["-    final Action copyAction = new CopyAction(_view.getTextPane(), _clipboard);", "+    IWorkbenchWindow window = _view.getSite().getWorkbenchWindow();", "+    final IAction copyAction = ActionFactory.COPY.create(window);", "-    ", "-    _view.addAction(IWorkbenchActionConstants.COPY, copyAction);", "-    ", "-    _view.addAction(IWorkbenchActionConstants.PASTE, ", "-                    new PasteAction(_view.getTextPane(), _clipboard));", "-        //System.out.println(\"About to Show:\" + ", "-        //     _view.getTextPane().getSelectionCount());", "-        copyAction.setEnabled(", "-                              (_view.getTextPane().getSelectionCount() > 0));", "+        copyAction.setEnabled(_view.getTextPane().getSelectionCount() > 0);", "+    _view.addMenuItem(copyAction);", "-    Action resetInteractionsAction = new Action() {", "+    IAction resetInteractionsAction = new Action() {", "-        String message = \"Are you sure you want to reset the Interactions Pane?\";", "+        String message = \"Are you sure you want to reset the Interactions View?\";", "-    resetInteractionsAction.setToolTipText(\"Resets the Interactions Pane\");", "+    resetInteractionsAction.setToolTipText(\"Reset the Interactions View\");", "+    resetInteractionsAction.setImageDescriptor(_getStandardIcon(ActionFactory.DELETE, window));", "+    _view.addToolbarItem(resetInteractionsAction);", "-    Action showClasspathAction = new Action() {", "+    IAction showClasspathAction = new Action() {", "-    showClasspathAction.setToolTipText(\"Shows the classpath used in the interactions pane.\");", "+    showClasspathAction.setToolTipText(\"Show the classpath used in the Interactions View\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de52baa08602552b1ad01530507307c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "177aff0c1233111bf8cb30c3e7597adc87b04587", "commitAfterChange": "a37574604ff4a3d36ac0046c2a1565869d8a1596", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public DocFile[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["-  public DocFile[] openProject(File projectFile) throws IOException, MalformedProjectFileException {", "+  public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException {", "-    ArrayList<DocFile> al = new ArrayList<DocFile>();", "+    ArrayList<File> al = new ArrayList<File>();", "+      File file = f;", "+      if(f.lastModified() > f.getSavedModDate()){", "+        file = new File(f.getPath());", "+      }", "-        al.add(f); // add to end", "+        al.add(file); // add to end", "-        al.add(0,f); // add to beginning", "+        al.add(0,file); // add to beginning", "+      File file = f;", "+      if(f.lastModified() > f.getSavedModDate()){", "+        file = new File(f.getPath());", "+      }", "-        al.add(f); // add to end", "+        al.add(file); // add to end", "-        al.add(0,f); // add to beginning", "+        al.add(0,file); // add to beginning", "-    return al.toArray(new DocFile[0]);", "+    return al.toArray(new File[0]);"]}], "num": 12387}
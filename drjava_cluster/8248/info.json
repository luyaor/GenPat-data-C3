{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbd8f0c54a943891c5d3a7ba3cb0805b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bce3d60820fca006452c4f6eebedc6eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "2fc1b48ae47904f12ff70a4157426a6f949b079b", "commitAfterChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Log makeLog(String type, String tag)", "signatureAfterChange": "   private static Log makeLog(String type, String tag)", "diff": ["-  /** Produce a log corresponding to the given type string.  {@code type} may be {@code null}. */", "+  /** Produce a log corresponding to the given type string. */", "-    if (type == null) { return VoidLog.INSTANCE; }", "-    else if (TextUtil.contains(type, ',')) {", "+    if (type != null && TextUtil.contains(type, ',')) {", "-      if (types.length == 0) { return VoidLog.INSTANCE; }", "+      if (types.length == 0) { return makeLog(null, tag); }", "-    else if (type.equals(\"System.out\")) { return new SystemOutLog(); }", "-    else if (type.equals(\"stdout\")) { return new SystemOutLog(); }", "-    else if (type.equals(\"System.err\")) { return new SystemErrLog(); }", "-    else if (type.equals(\"stderr\")) { return new SystemErrLog(); }", "-    else if (type.equals(\"file\")) { return new FileLog(new File(tag.toLowerCase() + \"-log.txt\")); }", "-    else if (type.equals(\"assert\")) { return new AssertEmptyLog(); }", "-    else if (type.equals(\"popup\")) { return new PopupLog(tag + \" Log\"); }", "-    else { return VoidLog.INSTANCE; }", "+    else {", "+      Log result = null;", "+      String factoryName = System.getProperty(\"plt.log.factory\");", "+      if (factoryName != null) {", "+        int dot = factoryName.lastIndexOf('.');", "+        if (dot >= 0) {", "+          String className = factoryName.substring(0, dot);", "+          String methodName = factoryName.substring(dot+1);", "+          try { result = (Log) ReflectUtil.invokeStaticMethod(className, methodName); }", "+          catch (ReflectException e) {", "+            System.err.println(\"Unable to invoke plt.log.factory: \" + e.getCause());", "+          }", "+          catch (ClassCastException e) {", "+            System.err.println(\"Unable to invoke plt.log.factory: \" + e);", "+          }", "+        }", "+      }", "+      if (result == null) {", "+        if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "+        else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "+        else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "+        else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "+        else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "+        else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "+        else if (type.startsWith(\"file:\")) { result = makeFileLog(type.substring(5)); }", "+        else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "+        else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "+        else { result = VoidLog.INSTANCE; }", "+      }", "+      return result;", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbf805030aef3f9818988ae3841ca4e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 39, "signatureBeforeChange": "              public static void main(String... args)", "signatureAfterChange": "      public static void main(String... args)", "diff": ["-    ", "-  public static void main(String... args) {", "-    ArgumentParser argParser = new ArgumentParser();", "-    argParser.supportOption(\"classpath\", \"\");", "-    argParser.supportAlias(\"cp\", \"classpath\");", "-    argParser.supportOption(\"jls\");", "-    argParser.requireParams(1);", "-    final ArgumentParser.Result parsedArgs = argParser.parse(args);", "-    ", "-    Options opt = new Options() {", "-        TypeSystem result = parsedArgs.hasOption(\"jls\") ? new JLSTypeSystem(this) : new ExtendedTypeSystem(this);", "-    };", "+  ", "+  public static void main(String... args) {", "+    debug.logStart();", "+", "+    ArgumentParser argParser = new ArgumentParser();", "+    argParser.supportOption(\"classpath\", \"\");", "+    argParser.supportAlias(\"cp\", \"classpath\");", "+    argParser.supportOption(\"opt\", 1);", "+    argParser.requireParams(1);", "+    final ArgumentParser.Result parsedArgs = argParser.parse(args);", "+    if (parsedArgs.hasOption(\"opt\")) {", "+      Options opt = _options.get(parsedArgs.getUnaryOption(\"opt\"));", "+      if (opt == null) { System.out.println(\"Unrecognized options name: \" + parsedArgs.getUnaryOption(\"opt\")); }", "+      else { processFiles(sources, cp, opt); }", "+    }", "+      ", "+    else {", "+      Iterator<String> optNames = _options.keySet().iterator();", "+      String canonicalName = optNames.next();", "+      Iterable<CompilationUnit> canonical = processFiles(sources, cp, _options.get(canonicalName));", "+      Map<String, Iterable<CompilationUnit>> others = new LinkedHashMap<String, Iterable<CompilationUnit>>();", "+      while (optNames.hasNext()) {", "+        String n = optNames.next();", "+        others.put(n, processFiles(sources, cp, _options.get(n)));", "+      }", "+      NodeDiff diff = new NodeDiff();", "+      for (Map.Entry<String, Iterable<CompilationUnit>> e : others.entrySet()) {", "+        diff.compare(canonicalName, canonical, e.getKey(), e.getValue());", "+      }", "+    }", "+    ", "+    debug.logEnd();", "+  }", "-      new SourceChecker(opt, false).check(sources, cp);"]}], "num": 8248}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6ffb292ff0331d10ef4269e71acff83", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "857fc4cf6f6315b7b09f04303506b035", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     public Object visit(ArrayType node)", "signatureAfterChange": "   public Class visit(ArrayType node)", "diff": ["-     */", "-    public Object visit(ArrayType node) {", "-        Node eType = node.getElementType();", "-        Class c = (Class)eType.acceptVisitor(this);", "-        Class ac = Array.newInstance(c, 0).getClass();", "-        ", "-        // Set the type property of this node", "-        node.setProperty(NodeProperties.TYPE, ac);", "-        return ac;", "+   */", "+  public Class visit(ArrayType node) {", "+    Node eType = node.getElementType();", "+    Class c = (Class)eType.acceptVisitor(this);", "+    Class ac = Array.newInstance(c, 0).getClass();", "+    ", "+    // Set the type property of this node", "+    node.setProperty(NodeProperties.TYPE, ac);", "+    return ac;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4d5054f75d92807725c66caa11235e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "     public Object visit(CastExpression node)", "signatureAfterChange": "   public Class visit(CastExpression node)", "diff": ["+   */", "+  public Class visit(CastExpression node) {", "+    Class c = (Class)node.getTargetType().acceptVisitor(this);", "+    checkCastStaticRules(c, (Class)node.getExpression().acceptVisitor(this), node);", "+    ", "+    node.setProperty(NodeProperties.TYPE, c);", "+    return c;", "+  }", "-     */", "-    public Object visit(CastExpression node) {", "-        Class c = (Class)node.getTargetType().acceptVisitor(this);", "-        checkCastStaticRules(c, (Class)node.getExpression().acceptVisitor(this), node);", "-", "-        node.setProperty(NodeProperties.TYPE, c);", "-        return c;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0048e44fe05a2b9e7cc9776c48322a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 5, "signatureBeforeChange": "   @Override public Type visit(HookTypeName node)", "signatureAfterChange": "      public Iterable<Type> checkList(Iterable<? extends Expression> l, Type expected)", "diff": ["+  ", "+  public Iterable<Type> checkList(Iterable<? extends Expression> l, Type expected) {", "+    return IterUtil.mapSnapshot(l, new ExpressionVisitor(Option.some(expected)));", "+  }", "-   */", "-  @Override public Type visit(HookTypeName node) {", "-    Type bound = node.getHookedType().acceptVisitor(this);", "-    if (node.isSupered()) {", "-      return setType(node, new Wildcard(new BoundedSymbol(node, TypeSystem.OBJECT, bound)));", "-    }", "-    else { return setType(node, new Wildcard(new BoundedSymbol(node, bound, TypeSystem.NULL))); }", "-  }"]}], "num": 18786}
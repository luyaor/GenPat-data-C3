{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c245d3ffc1000a528f692ded4590712", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b49c1137156d0857884766dec49b3a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 15, "signatureBeforeChange": "   synchronized public void setCurrentThread(DebugThreadData threadData) throws DebugException", "signatureAfterChange": "   public synchronized void setCurrentThread(DebugThreadData threadData)     throws DebugException", "diff": ["-  synchronized public void setCurrentThread(DebugThreadData threadData) throws DebugException {", "-    if (!isReady()) {", "-      return;", "+  public synchronized void setCurrentThread(DebugThreadData threadData)", "+    throws DebugException", "+  {", "+    _ensureReady();", "+    ", "+    if (threadData == null) {", "+      throw new IllegalArgumentException(\"Cannot set current thread to null.\");", "-    if ( threadData == null) {", "-      return;", "-    }", "+    ThreadReference threadRef = _getThreadFromDebugThreadData(threadData);", "-    ThreadReference thread_ref = getThreadFromDebugThreadData(threadData);", "-    ", "-    /** ", "-     * Special case to avoid overhead of scrollToSource() if we", "-     * are selecting the thread we have already selected currently", "-     */", "-    if(_suspendedThreads.size() > 0 && ", "-       _suspendedThreads.peek().uniqueID() == thread_ref.uniqueID() ){", "+    // Special case to avoid overhead of scrollToSource() if we", "+    // are selecting the thread we have already selected currently", "+    if ( _suspendedThreads.size() > 0 && ", "+       _suspendedThreads.peek().uniqueID() == threadRef.uniqueID() ) {", "-    if( _suspendedThreads.contains(thread_ref.uniqueID()) ) {", "-      _suspendedThreads.remove(thread_ref.uniqueID());", "+    if ( _suspendedThreads.contains(threadRef.uniqueID()) ) {", "+      _suspendedThreads.remove(threadRef.uniqueID());", "-    if( !thread_ref.isSuspended() ){", "-//       thread_ref.suspend();", "+    if ( !threadRef.isSuspended() ) {", "+      throw new IllegalArgumentException(\"Given thread must be suspended.\");", "+//       threadRef.suspend();", "-//         if( thread_ref.frameCount() <= 0 ) {", "-//           printMessage(thread_ref.name() + \" could not be suspended. It had no stackframes.\");", "-//           _suspendedThreads.push(thread_ref);", "+//         if( threadRef.frameCount() <= 0 ) {", "+//           printMessage(threadRef.name() + \" could not be suspended. It had no stackframes.\");", "+//           _suspendedThreads.push(threadRef);", "-//       /** ", "-//        * Step now so that we can get an interpreter, ", "-//        * do not notify (hence the false argument) ", "-//        */", "+//       // ", "+//       // Step now so that we can get an interpreter, ", "+//       // do not notify (hence the false argument) ", "-      return;", "+      //return;", "-    _suspendedThreads.push(thread_ref);", "+    _suspendedThreads.push(threadRef);", "+", "-      if( thread_ref.frameCount() <= 0 ) {", "-        printMessage(thread_ref.name() + \" could not be suspended. It had no stackframes.\");", "+      if ( threadRef.frameCount() > 0 ) {", "+        scrollToSource(threadRef.frame(0).location());", "+      }", "+      else {", "+        printMessage(threadRef.name() + ", "+                     \" could not be suspended since it has no stackframes.\");", "-      scrollToSource(thread_ref.frame(0).location());", "-    catch(IncompatibleThreadStateException e){", "-      throw new UnexpectedException(e);", "-    }    ", "-    ", "-    // also uncomment lines in currThreadSuspended() and in currThreadResumed() to make new functionality work", "-    _switchToInterpreterForThreadReference(thread_ref);", "+    catch (IncompatibleThreadStateException e) {", "+      throw new DebugException(\"Could not suspend thread: \" + e);", "+    }", "+", "+    // Activate the debug interpreter for interacting with this thread", "+    _switchToInterpreterForThreadReference(threadRef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a812279752412072b5dd3320d524d75e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public synchronized Vector<DebugStackData> getCurrentStackFrameData()", "signatureAfterChange": "   public synchronized Vector<DebugStackData> getCurrentStackFrameData()     throws DebugException", "diff": ["-  public synchronized Vector<DebugStackData> getCurrentStackFrameData() {", "-    if (!isReady()) {", "-      return null;", "+  public synchronized Vector<DebugStackData> getCurrentStackFrameData()", "+    throws DebugException", "+  {", "+    _ensureReady();", "+    ", "+    if (_runningThread != null || _suspendedThreads.size() <= 0) {", "+      throw new DebugException(\"No suspended thread to obtain stack frames.\");", "-    if(_runningThread != null || _suspendedThreads.size() <= 0)", "-    {", "-      return new Vector<DebugStackData>();", "-    }", "-    ", "-    Iterator iter = null;", "-      iter = _suspendedThreads.peek().frames().iterator();", "+      ThreadReference thread = _suspendedThreads.peek();", "+      Iterator iter = thread.frames().iterator();", "-      return null;", "+      throw new DebugException(\"Unable to obtain stack frame: \" + itse);"]}], "num": 10262}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bdd2148a454bd5c26e35009b3ca837a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "141e1af84791a5bd277dfadbdc6e8f56", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "7cfeec5d0573a05afa60f045397b7528ba2aa086", "commitAfterChange": "b155114812a8cbcc9237269e7062e3599ab1f574", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "signatureAfterChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "diff": ["-    if (propagate.containsKey(\"plt.debug.log\") || propagate.containsKey(\"plt.error.log\") || ", "-        propagate.containsKey(\"plt.log.factory\")) {", "+    if (!propagate.containsKey(\"plt.log.working.dir\") &&", "+        (propagate.containsKey(\"plt.debug.log\") || propagate.containsKey(\"plt.error.log\") || ", "+         propagate.containsKey(\"plt.log.factory\"))) {", "+          debug.logValues(\"Starting slave JVM\",", "+                          new String[]{\"RUNNER\", \"args\", \"cp\", \"jvmArgsArray\", \"workDir\"},", "+                          RUNNER, args, cp, jvmArgsArray, workDir);", "+              error.log(\"Slave process died without registering\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f2a85399d396d4826911b9edad60b23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": "   private void _registerOptionListeners()", "signatureAfterChange": "   private void _registerOptionListeners()", "diff": ["-    // The following is unnecessary because the DefaultFileSaver constructor directly uses BACKUP_FILES", "-//    DrJava.getConfig().addOptionListener(BACKUP_FILES, new BackUpFileOptionListener());", "-//    Boolean makeBackups = DrJava.getConfig().getSetting(BACKUP_FILES);", "-//    FileOps.DefaultFileSaver.setBackupsEnabled(makeBackups.booleanValue ());", "+    DrJava.getConfig().addOptionListener(BACKUP_FILES, new BackUpFileOptionListener());", "+    Boolean makeBackups = DrJava.getConfig().getSetting(BACKUP_FILES);", "+    FileOps.DefaultFileSaver.setBackupsEnabled(makeBackups.booleanValue ());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5282c4e31b806927d7af822a2295a636", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "18853ae3d062d9694905fb3ffaa507db78319f52", "commitAfterChange": "450507c939c3ed95ff1a6e22f6a119365bf3977f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void addWatch(String field) throws DebugException", "signatureAfterChange": "   public void addWatch(String field) throws DebugException", "diff": ["+    if (!(DrJava.getConfig().getSetting(OptionConstants.DEBUG_EXPRESSIONS_AND_METHODS_IN_WATCHES).booleanValue()) &&", "+        !isSimpleVariableOrFieldAccess(field)) {", "+      Utilities.showMessageBox(\"Expressions and method calls are not allowed.\\n\"+", "+                               \"See the 'Debugger' category in the Preferences.\",", "+                               \"Error Adding Watch\");", "+      return;", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cbf200bc668c32b0a6f6277697cd4e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "c9e80bbae1d05915842b741e3f824da56b5b7a57", "commitAfterChange": "ecfa1b8571cf84d3fda1f3d6d93d5a8cea78d32a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public static void restartIfNecessary(boolean forToolsJar, String[] args)", "signatureAfterChange": "   public static void restartIfNecessary(boolean forToolsJar, String[] args)", "diff": ["+    //JOptionPane.showMessageDialog(null, \"forToolsJar = \" + forToolsJar);", "-      // Don't need to restart: just continue normally", "-      return;", "+      if (!_usingJSR14v20 || bootClasspathHasJSR14v20()) {", "+        return;", "+      }", "-    ", "+", "-    ", "+", "-    String[] jvmArgs = new String[0];", "+    String[] jvmArgs;", "+    ", "+    if (_usingJSR14v20) {", "+      //System.out.println(\"Using JSR14v20, appending bootclasspath\");", "+      String jsr14 = _config.getSetting(JSR14_LOCATION).getAbsolutePath();", "+      jvmArgs = new String[] { \"-Xbootclasspath/p:\" + jsr14 };", "+    }", "+    else {", "+      jvmArgs = new String[0];", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "788eb09bc94ac0ea852275cb1410f41a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "aabf32dfcb159caa0bf37490cd0936b3ae5f1fb6", "commitAfterChange": "32543485a6c30402f49deaf8c43253937744fd6f", "methodNumberBeforeChange": 162, "methodNumberAfterChange": 167, "signatureBeforeChange": "   private void _resetNavigatorPane()", "signatureAfterChange": "   private void _resetNavigatorPane()", "diff": ["+    if (_model.getDocumentNavigator() instanceof JTreeSortNavigator) {", "+      JTreeSortNavigator nav = (JTreeSortNavigator)_model.getDocumentNavigator();", "+      nav.setDisplayManager(getNavPaneDisplayManager());", "+      nav.setRootIcon(_djProjectIcon);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a160c1973b8a103632cf5095ca84e1aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/MultiThreadedTestCase.java", "commitBeforeChange": "936df97bedea66175f36cae49ba74b17abf11e8a", "commitAfterChange": "d43c6d20ec903cbbb4ee5291a112b3b3ae570823", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected static void listenerFail(String s)", "signatureAfterChange": "   protected static void listenerFail(String s)", "diff": ["-    System.out.println(\"TEST FAILED: \" + s);", "-    new AssertionFailedError(s).printStackTrace(System.out);", "+    StackTraceElement[] trace = Thread.getAllStackTraces().get(Thread.currentThread());", "+    System.out.println(\"TEST FAILED in a listener thread\");", "+    System.out.println(\"Failing thread stack trace:\\n \" + Log.traceToString(trace));", "+//    new AssertionFailedError(s).printStackTrace(System.out);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e49a6d565c6855578e4490e7d6fa3f11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "c9e80bbae1d05915842b741e3f824da56b5b7a57", "commitAfterChange": "ecfa1b8571cf84d3fda1f3d6d93d5a8cea78d32a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void startInterpreterJVM()", "diff": ["+    if (DrJava.usingJSR14v20()) {", "+      // System.out.println(\"using jsr14 v2.0\");", "+      File jsr14 = DrJava.getConfig().getSetting(OptionConstants.JSR14_LOCATION);", "+      jvmArgs.addElement(\"-Xbootclasspath/p:\" + jsr14.getAbsolutePath());", "+    }", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec03a80af88aa8dd3816c82be31c1197", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir, DocFileListVisitor flv) throws IOException", "signatureAfterChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir, DocFileListVisitor flv) throws IOException", "diff": ["+    }", "+    else if (name.compareToIgnoreCase(\"bookmarks\") == 0) {", "+       List<DocumentRegion> bmList = exp.getRest().accept(bookmarkListVisitor);", "+       pfir.setBookmarks(bmList);"]}], "num": 7828}
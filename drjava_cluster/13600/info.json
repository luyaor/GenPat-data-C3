{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d78b5e5685f4c804aee2cea3e4a0c053", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03090770638e32c946cc4938a0328dc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint)", "signatureAfterChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint)      throws DebugException", "diff": ["-  public synchronized void removeBreakpoint(final Breakpoint breakpoint) {", "-    if (!isReady()) return;", "+  public synchronized void removeBreakpoint(final Breakpoint breakpoint) ", "+    throws DebugException", "+  {", "+    _ensureReady();", "-    if ( requests.size() > 0 && _eventManager != null) {", "+    if (requests.size() > 0 && _eventManager != null) {", "+      // Remove all event requests for this breakpoint", "+        _log(\"VMMismatch when removing breakpoint.\", vme);", "+        _log(\"VMDisconnected when removing breakpoint.\", vmde);", "-    //else {", "-    // Now always remove from pending request, since it's always there", "+", "+    // Always remove from pending request, since it's always there", "-    //}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb687066d41d1e635c95b91275fd5dc4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "530cb3b64455d081e962324602750973729aa1fb", "commitAfterChange": "edb6c56f8ad5495255b4157f1e495f302271cd2d", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint)", "signatureAfterChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint)", "diff": ["-    if ( breakpoint.getRequest() != null && _eventManager != null) {", "+    Vector<BreakpointRequest> requests = breakpoint.getRequests();", "+    if ( requests.size() > 0 && _eventManager != null) {", "-        _eventManager.deleteEventRequest(breakpoint.getRequest());", "+        for (int i=0; i < requests.size(); i++) {", "+          _eventManager.deleteEventRequest(requests.elementAt(i));", "+        }", "-    else {", "-      _pendingRequestManager.removePendingRequest(breakpoint);", "-    }", "+    //else {", "+    // Now always remove from pending request, since it's always there", "+    _pendingRequestManager.removePendingRequest(breakpoint);", "+    //}"]}], "num": 13600}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c4306ab877c7fab6dc896711b06786a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "021f9dcb96407491224aa89749bf3173", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testOldDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["-  public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException {", "-    // The documents should not be activated upon creation ", "-    assertEquals(\"There should be 4 documents in the cache\", 0, _cache.getNumInCache());", "-    // Activate all documents and make sure that the right ones get kicked out", "-    // Front of LRU -> a b c d | e f <- out of LRU", "+  ", "+  public void testOldDocumentsInAndOutOfTheCache() throws BadLocationException, IOException {", "+    ", "+    File file1 = tempFile(1);", "+    File file2 = tempFile(2);", "+    File file3 = tempFile(3);", "+    File file4 = tempFile(4);", "+    File file5 = tempFile(5);", "+    File file6 = tempFile(6);", "+    ", "+    // opening a document makes it active", "+    OpenDefinitionsDocument doc1 = openFile(file1);", "+    assertEquals(\"There should be 1 document in the cache\", 1, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc2 = openFile(file2);", "+    assertEquals(\"There should be 2 documents in the cache\", 2, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc3 = openFile(file3);", "+    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc4 = openFile(file4);", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc5 = openFile(file5);", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc6 = openFile(file6);", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    ", "+    assertEquals(\"Wrong Cache Size\", 4, _cache.getCacheSize());", "+", "+    // cache = [3 4 5 6]", "+    // This tests that isModifiedSinceSave does not cause the document to load into the cache,", "+    // so the two that should have been kicked out, 1 & 2 should not be loaded uppon calling isModified.", "+", "+    assertFalse(\"Document 1 shouldn't be modified\", doc1.isModifiedSinceSave());", "+    assertFalse(\"Document 2 shouldn't be modified\", doc2.isModifiedSinceSave());", "+    assertFalse(\"Document 3 shouldn't be modified\", doc3.isModifiedSinceSave());", "+    assertFalse(\"Document 4 shouldn't be modified\", doc4.isModifiedSinceSave());", "+    assertFalse(\"Document 5 shouldn't be modified\", doc5.isModifiedSinceSave());", "+    assertFalse(\"Document 6 shouldn't be modified\", doc6.isModifiedSinceSave());", "+    ", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    ", "-    assertTrue(\"Document 3 shouldn't be ready\", _adapterTable.get(doc3).isReady());", "-    assertTrue(\"Document 4 shouldn't be ready\", _adapterTable.get(doc4).isReady());", "-    assertTrue(\"Document 5 shouldn't be ready\", _adapterTable.get(doc5).isReady());", "-    assertTrue(\"Document 6 shouldn't be ready\", _adapterTable.get(doc6).isReady());", "-        ", "-    doc1.getLength(); // 1 6 5 4 | 3 2", "+    assertTrue(\"Document 3 should be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 should be ready\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"Document 5 should be ready\", _adapterTable.get(doc5).isReady());", "+    assertTrue(\"Document 6 should be ready\", _adapterTable.get(doc6).isReady());", "+    ", "+    ", "+    // Rectivate all documents and make sure that the right ones get kicked out", "+ ", "+    doc1.getLength();", "+    doc2.getLength();", "+    doc3.getLength();", "+    doc4.getLength();", "+    ", "+   // cache = [1 2 3 4]", "+    ", "+    assertTrue(\"Document 1 should be ready\", _adapterTable.get(doc1).isReady());", "+    assertTrue(\"Document 2 should be ready\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"Document 3 should be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 should be ready\", _adapterTable.get(doc4).isReady());", "+    ", "+    doc5.getLength();", "+    // cache -> 2 3 4 5", "+    assertFalse(\"Document 1 is not longer ready\", _adapterTable.get(doc1).isReady());", "+    assertTrue(\"Document 5 should be ready\", _adapterTable.get(doc5).isReady());", "+    ", "+    doc6.getLength();", "+    // cache -> 3 4 5 6", "+    assertFalse(\"Document 2 is not longer ready\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"Document 6 should be ready\", _adapterTable.get(doc6).isReady());", "+    assertTrue(\"Document 3 should be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 should be ready\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"Document 5 should be ready\", _adapterTable.get(doc5).isReady());", "+    ", "+    doc1.getLength(); // 4 5 6 1", "-    assertEquals(\"There should still be 1 documents in the cache\", 4, _cache.getNumInCache()); ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache()); ", "-    doc2.getLength(); // 2 1 6 5 | 4 3", "+    doc2.getLength(); // 5 6 1 2", "-    assertEquals(\"There should still be 2 documents in the cache\", 4, _cache.getNumInCache());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    doc3.getLength(); // 3 2 1 6 | 5 4", "+    doc3.getLength(); // 6 1 2 3", "-    assertEquals(\"There should still be 3 documents in the cache\", 4, _cache.getNumInCache());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    doc4.getLength(); // 4 3 2 1 | 6 5", "+    doc4.getLength(); // 1 2 3 4", "-    doc5.getLength(); // 5 4 3 2 | 1 6", "+    doc5.getLength(); // 2 3 4 5", "-    doc6.getLength(); // 6 5 4 3 | 2 1", "+    doc6.getLength(); // 3 4 5 6", "-    doc4.getLength(); // 4 6 5 3 | 2 1", "+    doc4.getLength(); // 3 4 5 6", "-    doc5.getLength(); // 5 4 6 3 | 2 1", "+    doc5.getLength(); // 3 4 5 6", "-    doc3.getLength(); // 3 5 4 6 | 2 1", "+    doc3.getLength(); // 3 4 5 6", "-    doc4.getLength(); // 4 3 5 6 | 2 1", "+    doc4.getLength(); // 3 4 5 6", "-    _cache.setCacheSize(5); // 4 3 5 6 | 2 1 ", "+    _cache.setCacheSize(5); // 3 4 5 6", "-    doc2.getLength(); // 2 4 3 5 6 | 1", "+    doc2.getLength(); // 3 4 5 6 2", "-    _cache.setCacheSize(3); // 2 4 3 | 5 6 1", "+    _cache.setCacheSize(3); // 5 6 2", "-    assertTrue(\"The document 4 should be in the cache\", _adapterTable.get(doc4).isReady());", "-    assertTrue(\"The document 3 should be in the cache\", _adapterTable.get(doc3).isReady());", "-    assertFalse(\"The document 5 should now be out of the cache\", _adapterTable.get(doc5).isReady());", "-    assertFalse(\"The document 6 should now be out of the cache\", _adapterTable.get(doc6).isReady());", "+    assertTrue(\"The document 6 should be in the cache\", _adapterTable.get(doc6).isReady());", "+    assertTrue(\"The document 5 should be in the cache\", _adapterTable.get(doc5).isReady());", "+    assertFalse(\"The document 3 should now be out of the cache\", _adapterTable.get(doc3).isReady());", "+    assertFalse(\"The document 4 should now be out of the cache\", _adapterTable.get(doc4).isReady());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d32627f3df3c39090f8795ad07c5dd5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["-    // The model already has an active empty document", "-    OpenDefinitionsDocument doc1 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc1));", "-    assertEquals(\"There should be 2 documents in the cache\", 2, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc2 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc2));", "-    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc3 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc3));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc4 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc4));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc5 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc5));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc6 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc6));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    // The documents should not be activated upon creation ", "-    // checkin isModifiedSinceSave shouldn't activate the documents", "+    OpenDefinitionsDocument doc1 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc2 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc3 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc4 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc5 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc6 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    // This tests that isModifiedSinceSave does not cause the document to load into the cache,", "+    // so the two that should have been kicked out, 1 & 2 should not be loaded uppon calling isModified.", "+", "+    assertEquals(\"There should be 4 documents in the cache\", 0, _cache.getNumInCache());", "-    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"Document 1 shouldn't be ready\", _adapterTable.get(doc1).isReady());", "+    assertFalse(\"Document 2 shouldn't be ready\", _adapterTable.get(doc2).isReady());", "+    assertFalse(\"Document 3 shouldn't be ready\", _adapterTable.get(doc3).isReady());", "+    assertFalse(\"Document 4 shouldn't be ready\", _adapterTable.get(doc4).isReady());", "+    assertFalse(\"Document 5 shouldn't be ready\", _adapterTable.get(doc5).isReady());", "+    assertFalse(\"Document 6 shouldn't be ready\", _adapterTable.get(doc6).isReady());", "+    ", "+    // Front of LRU -> a b c d | e f <- out of LRU", "-    doc1.getLength();", "-    doc2.getLength();", "-    doc3.getLength();", "-    doc4.getLength();", "-    assertFalse(\"The document 5 should have been kicked out of the cache\", _cache.isDDocInCache(doc5));", "-    assertFalse(\"The document 6 should have been kicked out of the cache\", _cache.isDDocInCache(doc6));", "+    ", "+    // 6 5 4 3 | 2 1", "+    assertFalse(\"Document 1 shouldn't be ready\", _adapterTable.get(doc1).isReady());", "+    assertFalse(\"Document 2 shouldn't be ready\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"Document 3 shouldn't be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 shouldn't be ready\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"Document 5 shouldn't be ready\", _adapterTable.get(doc5).isReady());", "+    assertTrue(\"Document 6 shouldn't be ready\", _adapterTable.get(doc6).isReady());", "+        ", "+    doc1.getLength(); // 1 6 5 4 | 3 2", "+    assertTrue(\"The document 1 should should now be in the cache\", _adapterTable.get(doc1).isReady());    ", "+    assertEquals(\"There should still be 1 documents in the cache\", 4, _cache.getNumInCache()); ", "+    assertFalse(\"The document 3 should have been kicked out of the cache\", _adapterTable.get(doc3).isReady());", "+    ", "+    doc2.getLength(); // 2 1 6 5 | 4 3", "+    assertTrue(\"The document 2 should should now be in the cache\", _adapterTable.get(doc2).isReady());", "+    assertEquals(\"There should still be 2 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 4 should have been kicked out of the cache\", _adapterTable.get(doc4).isReady());", "+    ", "+    doc3.getLength(); // 3 2 1 6 | 5 4", "+    assertTrue(\"The document 3 should should now be in the cache\", _adapterTable.get(doc3).isReady());", "+    assertEquals(\"There should still be 3 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 5 should have been kicked out of the cache\", _adapterTable.get(doc5).isReady());", "+    ", "+    doc4.getLength(); // 4 3 2 1 | 6 5", "+    assertTrue(\"The document 4 should should now be in the cache\", _adapterTable.get(doc4).isReady());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 6 should have been kicked out of the cache\", _adapterTable.get(doc6).isReady());", "+    ", "+    doc5.getLength(); // 5 4 3 2 | 1 6", "+    assertTrue(\"The document 5 should should now be in the cache\", _adapterTable.get(doc5).isReady());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 1 should have been kicked out of the cache\", _adapterTable.get(doc1).isReady());", "+    ", "+    doc6.getLength(); // 6 5 4 3 | 2 1", "+    assertTrue(\"The document 6 should should now be in the cache\", _adapterTable.get(doc6).isReady());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 2 should have been kicked out of the cache\", _adapterTable.get(doc2).isReady());", "+    ", "+    // Load documents out of order", "+    doc4.getLength(); // 4 6 5 3 | 2 1", "+    assertTrue(\"The document 3 should should still be in the cache\", _adapterTable.get(doc3).isReady());    ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    doc5.getLength(); // 5 4 6 3 | 2 1", "+    assertTrue(\"The document 3 should should still be in the cache\", _adapterTable.get(doc3).isReady());    ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    doc3.getLength(); // 3 5 4 6 | 2 1", "+    assertTrue(\"The document 6 should should still be in the cache\", _adapterTable.get(doc6).isReady());    ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    doc4.getLength(); // 4 3 5 6 | 2 1", "+    assertTrue(\"The document 6 should should still be in the cache\", _adapterTable.get(doc6).isReady());    ", "+    assertFalse(\"The document 1 should still be out of the cache\", _adapterTable.get(doc1).isReady());", "+    assertFalse(\"The document 2 should still be out of the cache\", _adapterTable.get(doc2).isReady());", "-    // Test the LRU to make sure the documents are kicked out in the right order", "-    doc5.getLength();", "-    assertFalse(\"doc1 should have been kicked out first\", _cache.isDDocInCache(doc1));", "-    doc6.getLength();", "-    assertFalse(\"doc2 should have been kicked out first\", _cache.isDDocInCache(doc2));"]}], "num": 23813}
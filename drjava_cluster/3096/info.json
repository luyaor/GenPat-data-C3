{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81e706c28222d0282c9edc07048f9597", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e7456a2f86de5839e60768deef4171", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 75, "signatureBeforeChange": "   final public Statement ifStatement() throws ParseException", "signatureAfterChange": "   final public Statement ifStatement() throws ParseException", "diff": ["-    t = jj_consume_token(IF);", "-    jj_consume_token(LPAREN);", "-    exp = expression();", "-    jj_consume_token(RPAREN);", "-    stat1 = statement();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case ELSE:", "-      jj_consume_token(ELSE);", "-      stat2 = statement();", "-      break;", "-    default:", "-      jj_la1[68] = jj_gen;", "-      ;", "-    }", "-      if (stat2 == null) {", "-        {if (true) return new IfThenStatement(exp, stat1,", "-                                   filename,", "-                                   t.beginLine,       t.beginColumn,", "-                                   stat1.getEndLine(), stat1.getEndColumn());}", "-      } else {", "-        {if (true) return new IfThenElseStatement(exp, stat1, stat2,", "-                                       filename,", "-                                       t.beginLine,       t.beginColumn,", "-                                       stat2.getEndLine(), stat2.getEndColumn());}", "+    try {", "+      t = jj_consume_token(IF);", "+      jj_consume_token(LPAREN);", "+      exp = expression();", "+      jj_consume_token(RPAREN);", "+      stat1 = statement();", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ELSE:", "+        jj_consume_token(ELSE);", "+        stat2 = statement();", "+        break;", "+      default:", "+        jj_la1[69] = jj_gen;", "+        ;", "+        if (stat2 == null) {", "+          {if (true) return new IfThenStatement(exp, stat1,", "+                                     filename,", "+                                     t.beginLine,       t.beginColumn,", "+                                     stat1.getEndLine(), stat1.getEndColumn());}", "+        } else {", "+          {if (true) return new IfThenElseStatement(exp, stat1, stat2,", "+                                         filename,", "+                                         t.beginLine,       t.beginColumn,", "+                                         stat2.getEndLine(), stat2.getEndColumn());}", "+        }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid if statement\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81531c7f42916c248f78702fbbdbfa22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 32, "signatureBeforeChange": "   final public PackageDeclaration packageDeclaration() throws ParseException", "signatureAfterChange": "   final public PackageDeclaration packageDeclaration() throws ParseException", "diff": ["-    t1 = jj_consume_token(PACKAGE);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case IDENTIFIER:", "-      name = ReferenceTypeName();", "-      break;", "-    default:", "-      jj_la1[10] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case SEMICOLON:", "-      t2 = jj_consume_token(SEMICOLON);", "-      break;", "-    case 0:", "-      t2 = jj_consume_token(0);", "-      break;", "-    default:", "-      jj_la1[11] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "-    }", "-      if(name instanceof GenericReferenceType){", "-        {if (true) throw new ParseException(\"Package names cannot be parameterized.\");}", "+    try {", "+      t1 = jj_consume_token(PACKAGE);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case IDENTIFIER:", "+        name = ReferenceTypeName();", "+        break;", "+      default:", "+        jj_la1[10] = jj_gen;", "+        ;", "-      {if (true) return new PackageDeclaration(name.getRepresentation(),", "-                                    filename,", "-                                    t1.beginLine, t1.beginColumn,", "-                                    t2.endLine,   t2.endColumn);}", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case SEMICOLON:", "+        t2 = jj_consume_token(SEMICOLON);", "+        break;", "+      case 0:", "+        t2 = jj_consume_token(0);", "+        break;", "+      default:", "+        jj_la1[11] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+        if(name instanceof GenericReferenceType){", "+          _throwParseException(\"Package names cannot be parameterized.\");", "+        }", "+        if(name == null) {", "+          _throwParseException(\"Empty Package name\");", "+        }", "+        {if (true) return new PackageDeclaration(name.getRepresentation(),", "+                                      filename,", "+                                      t1.beginLine, t1.beginColumn,", "+                                      t2.endLine,   t2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid Package Declaration\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfd97fcaae149c6c643bbd6492e7c84b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "signatureAfterChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "diff": ["-    mf = modifiers();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LESS:", "-      typeParameters = TypeParameters();", "-      break;", "-    default:", "-      jj_la1[28] = jj_gen;", "-      ;", "-    }", "-    typ = resultType();", "-    id = jj_consume_token(IDENTIFIER);", "-    params = formalParameters();", "-    label_12:", "-    while (true) {", "+    try {", "+      mf = modifiers();", "-      case LBRACKET:", "-        ;", "+      case LESS:", "+        typeParameters = TypeParameters();", "-        break label_12;", "+        ;", "-      jj_consume_token(LBRACKET);", "-      jj_consume_token(RBRACKET);", "-                  dim++;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case THROWS:", "-      jj_consume_token(THROWS);", "-      exceptions = ReferenceTypeNameList();", "-      break;", "-    default:", "-      jj_la1[30] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LBRACE:", "-      body = block();", "-      break;", "-    case SEMICOLON:", "-      body = emptyStatement();", "-      break;", "-    default:", "-      jj_la1[31] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "-    }", "-        if (mf != null) {", "-          bl    = mf.beginLine;", "-          bc    = mf.beginColumn;", "-          flags = mf.accessFlags;", "-        } else {", "-          bl = typ.getBeginLine();", "-          bc = typ.getBeginColumn();", "+      typ = resultType();", "+      id = jj_consume_token(IDENTIFIER);", "+      params = formalParameters();", "+      label_12:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LBRACKET:", "+          ;", "+          break;", "+        default:", "+          jj_la1[30] = jj_gen;", "+          break label_12;", "-        if (dim > 0) {", "-          typ = new ArrayType(typ, dim,", "-                              filename,", "-                              typ.getBeginLine(), typ.getBeginColumn(),", "-                              typ.getEndLine(),   typ.getEndColumn());", "-        }", "-        if(lastFormalParameterIsVarArgs) flags |= 0x00000080; // Modifier.VARARGS == 0x00000080 /**/", "+        jj_consume_token(LBRACKET);", "+        jj_consume_token(RBRACKET);", "+                    dim++;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case THROWS:", "+        jj_consume_token(THROWS);", "+        exceptions = ReferenceTypeNameList();", "+        break;", "+      default:", "+        jj_la1[31] = jj_gen;", "+        ;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case LBRACE:", "+        body = block();", "+        break;", "+      case SEMICOLON:", "+        body = emptyStatement();", "+        break;", "+      default:", "+        jj_la1[32] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+          if (mf != null) {", "+            bl    = mf.beginLine;", "+            bc    = mf.beginColumn;", "+            flags = mf.accessFlags;", "+          } else {", "+            bl = typ.getBeginLine();", "+            bc = typ.getBeginColumn();", "+          }", "+          if (dim > 0) {", "+            typ = new ArrayType(typ, dim,", "+                                filename,", "+                                typ.getBeginLine(), typ.getBeginColumn(),", "+                                typ.getEndLine(),   typ.getEndColumn());", "+          }", "+          if(lastFormalParameterIsVarArgs) flags |= 0x00000080; // Modifier.VARARGS == 0x00000080 /**/", "-        if (typeParameters == null){", "+          if (typeParameters == null){", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid method declaration\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f15df9f277889ffd3b450780ff78dfde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": "   final public ImportDeclaration importDeclaration() throws ParseException", "signatureAfterChange": "   final public ImportDeclaration importDeclaration() throws ParseException", "diff": ["-    t1 = jj_consume_token(IMPORT);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case STATIC:", "-      sttic = jj_consume_token(STATIC);", "-      break;", "-    default:", "-      jj_la1[12] = jj_gen;", "-      ;", "-    }", "-    name = ReferenceTypeName();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case DOT:", "-      jj_consume_token(DOT);", "-      star = jj_consume_token(STAR);", "-      break;", "-    default:", "-      jj_la1[13] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case SEMICOLON:", "-      t2 = jj_consume_token(SEMICOLON);", "-      break;", "-    case 0:", "-      t2 = jj_consume_token(0);", "-      break;", "-    default:", "-      jj_la1[14] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "-    }", "-      if(name instanceof GenericReferenceType){", "-        {if (true) throw new ParseException(\"Import names cannot be parameterized.\");}", "+    try {", "+      t1 = jj_consume_token(IMPORT);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case STATIC:", "+        sttic = jj_consume_token(STATIC);", "+        break;", "+      default:", "+        jj_la1[12] = jj_gen;", "+        ;", "-      {if (true) return new ImportDeclaration(name.getRepresentation(), star != null, sttic != null,", "-                                   filename,", "-                                   t1.beginLine, t1.beginColumn,", "-                                   t2.endLine,   t2.endColumn);}", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case IDENTIFIER:", "+        name = ReferenceTypeName();", "+        break;", "+      default:", "+        jj_la1[13] = jj_gen;", "+        ;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case DOT:", "+        jj_consume_token(DOT);", "+        star = jj_consume_token(STAR);", "+        break;", "+      default:", "+        jj_la1[14] = jj_gen;", "+        ;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case SEMICOLON:", "+        t2 = jj_consume_token(SEMICOLON);", "+        break;", "+      case 0:", "+        t2 = jj_consume_token(0);", "+        break;", "+      default:", "+        jj_la1[15] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+        if(name instanceof GenericReferenceType){", "+          _throwParseException(\"Import names cannot be parameterized.\");", "+        }", "+        if(name == null) {", "+            _throwParseException(\"missing name; cannot import\");", "+        }", "+", "+//        if((dot == null) != (star==null))", "+//          _throwParseException(\"Invalid Import Declaration\");", "+//        ", "+        {if (true) return new ImportDeclaration(name.getRepresentation(), star != null, sttic != null,", "+                                     filename,", "+                                     t1.beginLine, t1.beginColumn,", "+                                     t2.endLine,   t2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid Import Declaration\");", "+    }"]}], "num": 3096}
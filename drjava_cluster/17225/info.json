{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "544321bc1f46aafa4c128669bf421b87", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d2dab79708c75d63976fdc0b2e2e936", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "6cb46de79da79c0083594703f676ab24368c9724", "commitAfterChange": "ce9868c401197893c2350342d3a4d99ed1f30047", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   static boolean handleCommandLineArgs(String[] args)", "signatureAfterChange": "   static boolean handleCommandLineArgs(String[] args)", "diff": ["+      else if (arg.equals(\"-delete-after-restart\")) {", "+        File deleteAfterRestart = new File(args[argIndex++]);", "+        deleteAfterRestart.delete();", "+      }", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243c377e32d7ec520e6b0f94ab0bf85f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "signatureAfterChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "diff": ["+        List<OpenDefinitionsDocument> auxDocs = _model.getAuxiliaryDocuments();", "+        assertEquals(\"One auxiliary document\", 1, auxDocs.size());", "-    ProjectFileIR pfir = ProjectFileParser.ONLY.parse(_projFile);", "+    ProjectFileIR pfir = ProjectFileParserFacade.ONLY.parse(_projFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dbda3cf5029a3454eb57ea66c471270", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "7bcdd967752ffe549506dba1c9c4f60803462779", "commitAfterChange": "af1d1f7c09d0639a913d397da4b034d6533c94dd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void testCompileWithPackageStatementInsideClass()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileWithPackageStatementInsideClass()     throws BadLocationException, IOException", "diff": ["+    ", "+    // check that model.resetCompilerErrors works", "+    _model.resetCompilerErrors();", "+    CompilerErrorModel cem = _model.getCompilerErrorModel();", "+    assertEquals(\"CompilerErrorModel has errors after reset\", ", "+                 0,", "+                 cem.getNumErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ec60354440a6c7e1e7925175cf62ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "ede26ceaad5c407d940ac773a5e7f457dc1f5187", "commitAfterChange": "734866577ba652e258c158eef25bcbc68a43749a", "methodNumberBeforeChange": 297, "methodNumberAfterChange": 298, "signatureBeforeChange": "     public FunctionInvocationCandidate<DJMethod>         findSingleMethod(Type t, Iterable<? extends Type> targs, Iterable<? extends Expression> args,                          Option<Type> expected) throws UnmatchedLookupException", "signatureAfterChange": "     public FunctionInvocationCandidate<DJMethod>         findSingleMethod(Type t, Iterable<? extends Type> targs, Iterable<? extends Expression> args,                          Option<Type> expected) throws UnmatchedLookupException", "diff": ["+      if (_name.equals(\"entrySet\")) {", "+        Type foo = candidates.iterator().next().returnType();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa57d516ee735da53e945e295160ffa6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "9d11311a2c8fe69828f38bf3b0da9037a3e51914", "commitAfterChange": "d86f285f67e4f6710d1cc904d1f552e6a6a92520", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": "            private void _openProjectHelper(File projectFile)", "signatureAfterChange": "            private void _openProjectHelper(File projectFile)", "diff": ["+    IDocumentNavigator new_nav;", "-      ", "+      new_nav = _model.getDocumentNavigator();", "-      _model.getDocumentNavigator().setTopLevelPath(tlp);", "+      new_nav.setTopLevelPath(tlp);", "+", "+    ", "+    List<OpenDefinitionsDocument> old_lod =  _model.getDefinitionsDocuments();", "+", "+    /* i have to copy the list, but i can't use clone, since List is an interface", "+     * so i need to manually copy the list.", "+     * ", "+     * i have to copy it, becase when i close all the files, i have to keep a reference to the currently open files", "+     */", "+    /*", "+    LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "+    for(int i=0;i<old_lod.size();i++){", "+      lod.add(old_lod.get(i));", "+    }", "+    */", "+    ", "+    ", "+    // XXX", "+    _closeAll();", "+", "+/*    ", "+    OpenDefinitionsDocument odd;", "+    INavigatorItem item;", "+", "+    System.out.println(lod.size());", "+    System.out.println(\"-------------\");", "+    for(int i=0;i<lod.size();i++){", "+      odd = lod.get(i);", "+      item = _model.getIDocGivenODD(odd);", "+      try{", "+        new_nav.addDocument(item, odd.getFile().getParent());", "+        System.out.println(\"adding \" + item + \" at \" + odd.getFile().getParent());", "+      }catch(IllegalStateException e){", "+        ", "+      }catch(FileMovedException e){", "+        ", "+      }", "+      ", "+    }", "+    System.out.println(\"-------------\");", "+", "+  */  ", "+", "-    ", "-    _closeAll();"]}], "num": 17225}
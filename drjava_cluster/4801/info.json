{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15012cee1fd739adf874958f87138f67", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a00da6cb8272ed6350bfa3ec1b86b7d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   private int _updateFree(ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private int _updateFree(ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private int _updateFree(ModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\treturn -1;", "-", "-\t\t\t_combineCurrentAndNextIfFind(\"/\", \"*\", copyCursor);", "-\t\t\t//_combineCurrentAndNextIfFind(\"*\", \"/\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"/\", \"/\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "-\t\t\t//if a / preceeds a /* or a // combine them.", "-\t\t\t_combineCurrentAndNextIfFind(\"/\",\"/*\",copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"/\",\"//\",copyCursor);", "-\t\t\t", "-\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "-\t\t\t", "-\t\t\t\t\t\t", "-\t\t\t\tString type = copyCursor.current().getType();", "-\t\t\t\tif (type.equals(\"*/\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t_splitCurrentIfCommentBlock(true,false,copyCursor);", "-\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\treturn -1;", "-\t\t\t\t\t\t//_updateBasedOnCurrentStateHelper(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse if (type.equals(\"//\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// open comment blocks are not set commented, they're set free", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_LINE_COMMENT;", "-\t\t\t\t\t\t//_updateInsideLineComment(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse if (type.equals(\"/*\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// open comment blocks are not set commented, they're set free", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_BLOCK_COMMENT;", "-\t\t\t\t\t\t//_updateInsideBlockComment(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse if (type.equals(\"\\\"\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// make sure this is a OPEN quote", "-\t\t\t\t\t\tif (copyCursor.current().isClosed())", "-\t\t\t\t\t\t\tcopyCursor.current().flip();", "-", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_QUOTE;", "-\t\t\t\t\t\t//_updateInsideQuote(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t}", "+  private int _updateFree(ModelList<ReducedToken>.Iterator copyCursor) {", "+    if (copyCursor.atEnd()) {", "+      return -1;", "+    }", "+    ", "+    _combineCurrentAndNextIfFind(\"/\", \"*\", copyCursor);", "+    //_combineCurrentAndNextIfFind(\"*\", \"/\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"/\", \"/\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "+    //if a / preceeds a /* or a // combine them.", "+    _combineCurrentAndNextIfFind(\"/\",\"/*\",copyCursor);", "+    _combineCurrentAndNextIfFind(\"/\",\"//\",copyCursor);", "+    ", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "+    ", "+    ", "+    String type = copyCursor.current().getType();", "+    if (type.equals(\"*/\")) {", "+      _splitCurrentIfCommentBlock(true,false,copyCursor);", "+      copyCursor.prev();", "+      return -1;", "+      //_updateBasedOnCurrentStateHelper(copyCursor);", "+    }", "+    else if (type.equals(\"//\")) {", "+      // open comment blocks are not set commented, they're set free", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.INSIDE_LINE_COMMENT;", "+      //_updateInsideLineComment(copyCursor);", "+    }", "+    else if (type.equals(\"/*\")) {", "+      // open comment blocks are not set commented, they're set free", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.INSIDE_BLOCK_COMMENT;", "+      //_updateInsideBlockComment(copyCursor);", "+    }", "+    else if (type.equals(\"\\\"\")) {", "+      // make sure this is a OPEN quote", "+      if (copyCursor.current().isClosed()) {", "+        copyCursor.current().flip();", "+      }", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.INSIDE_QUOTE;", "+      //_updateInsideQuote(copyCursor);", "+    }", "+    else {", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3442a31a0a18ef1fd272dc85cec615", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   private int _updateFree(ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private int _updateFree(ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private int _updateFree(ModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-\t\t\tif (copyCursor.atEnd())", "-\t\t\t\treturn -1;", "-", "-\t\t\t_combineCurrentAndNextIfFind(\"/\", \"*\", copyCursor);", "-\t\t\t//_combineCurrentAndNextIfFind(\"*\", \"/\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"/\", \"/\", copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "-\t\t\t//if a / preceeds a /* or a // combine them.", "-\t\t\t_combineCurrentAndNextIfFind(\"/\",\"/*\",copyCursor);", "-\t\t\t_combineCurrentAndNextIfFind(\"/\",\"//\",copyCursor);", "-\t\t\t", "-\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "-\t\t\t\t_combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "-\t\t\t", "-\t\t\t\t\t\t", "-\t\t\t\tString type = copyCursor.current().getType();", "-\t\t\t\tif (type.equals(\"*/\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t_splitCurrentIfCommentBlock(true,false,copyCursor);", "-\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\treturn -1;", "-\t\t\t\t\t\t//_updateBasedOnCurrentStateHelper(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse if (type.equals(\"//\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// open comment blocks are not set commented, they're set free", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_LINE_COMMENT;", "-\t\t\t\t\t\t//_updateInsideLineComment(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse if (type.equals(\"/*\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// open comment blocks are not set commented, they're set free", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_BLOCK_COMMENT;", "-\t\t\t\t\t\t//_updateInsideBlockComment(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse if (type.equals(\"\\\"\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// make sure this is a OPEN quote", "-\t\t\t\t\t\tif (copyCursor.current().isClosed())", "-\t\t\t\t\t\t\tcopyCursor.current().flip();", "-", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.INSIDE_QUOTE;", "-\t\t\t\t\t\t//_updateInsideQuote(copyCursor);", "-\t\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tcopyCursor.current().setState(Brace.FREE);", "-\t\t\t\t\t\tcopyCursor.next();", "-\t\t\t\t\t\treturn Brace.FREE;", "-\t\t\t\t\t\t//_updateFree(copyCursor);", "-\t\t\t\t\t}", "-\t\t}", "+  private int _updateFree(ModelList<ReducedToken>.Iterator copyCursor) {", "+    if (copyCursor.atEnd()) {", "+      return -1;", "+    }", "+    ", "+    _combineCurrentAndNextIfFind(\"/\", \"*\", copyCursor);", "+    //_combineCurrentAndNextIfFind(\"*\", \"/\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"/\", \"/\", copyCursor);", "+    _combineCurrentAndNextIfFind(\"\",\"\", copyCursor);", "+    //if a / preceeds a /* or a // combine them.", "+    _combineCurrentAndNextIfFind(\"/\",\"/*\",copyCursor);", "+    _combineCurrentAndNextIfFind(\"/\",\"//\",copyCursor);", "+    ", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\",copyCursor);  // \\-\\", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\"\",copyCursor);  // \\-\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\"\",copyCursor);// \\-\\\"", "+    _combineCurrentAndNextIfFind(\"\\\\\",\"\\\\\\\\\",copyCursor);// \\-\\\\", "+    ", "+    ", "+    String type = copyCursor.current().getType();", "+    if (type.equals(\"*/\")) {", "+      _splitCurrentIfCommentBlock(true,false,copyCursor);", "+      copyCursor.prev();", "+      return -1;", "+      //_updateBasedOnCurrentStateHelper(copyCursor);", "+    }", "+    else if (type.equals(\"//\")) {", "+      // open comment blocks are not set commented, they're set free", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.INSIDE_LINE_COMMENT;", "+      //_updateInsideLineComment(copyCursor);", "+    }", "+    else if (type.equals(\"/*\")) {", "+      // open comment blocks are not set commented, they're set free", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.INSIDE_BLOCK_COMMENT;", "+      //_updateInsideBlockComment(copyCursor);", "+    }", "+    else if (type.equals(\"\\\"\")) {", "+      // make sure this is a OPEN quote", "+      if (copyCursor.current().isClosed()) {", "+        copyCursor.current().flip();", "+      }", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.INSIDE_QUOTE;", "+      //_updateInsideQuote(copyCursor);", "+    }", "+    else {", "+      copyCursor.current().setState(Brace.FREE);", "+      copyCursor.next();", "+      return Brace.FREE;", "+      //_updateFree(copyCursor);", "+    }", "+  }"]}], "num": 4801}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0710183eec34eec8c4ac97aadd48fc0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e6f5b7baf7ea3d671612e676d53b23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 405, "methodNumberAfterChange": 402, "signatureBeforeChange": "      public void nonTestCase(boolean isTestAll)", "signatureAfterChange": "      public void nonTestCase(boolean isTestAll)", "diff": ["+    /** Event that is fired with there is nothing to test.  JUnit is never started. */ ", "-      String message = isTestAll ?", "+      final String message = isTestAll ?", "+      ", "+      // Not necessarily invoked from event-handling thread!", "-      JOptionPane.showMessageDialog(MainFrame.this, message,", "-                                    \"Test Works Only On JUnit TestCases\",", "-                                    JOptionPane.ERROR_MESSAGE);", "-", "-", "+      SwingUtilities.invokeLater(new Runnable() {", "+        public void run() {", "+          JOptionPane.showMessageDialog(MainFrame.this, message,", "+                                        \"Test Works Only On JUnit TestCases\",", "+                                        JOptionPane.ERROR_MESSAGE);", "+          // clean up as junitEnded except hourglassOff (should factored into a private method)", "+           showTab(_junitErrorPanel);", "+            _junitAction.setEnabled(true);", "+            _junitAllAction.setEnabled(true);", "+            _junitErrorPanel.reset();", "+        }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b966a83b6480e83666a9f8012d1f46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "202fe65b6d19b63d8f3941f6eff8e18c68fa7232", "commitAfterChange": "b7e7dc26985115a0b1d39562458d043f05ace9bb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean searchSelectedText, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm, MovingDocumentRegion region,                       final FindResultsPanel panel)", "signatureAfterChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean searchSelectedText, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm, final MovingDocumentRegion region,                       final FindResultsPanel panel)", "diff": ["-                      final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm, MovingDocumentRegion region,", "+                      final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm, final MovingDocumentRegion region,", "-      }, region.getStartOffset(), region.getEndOffset());", "+      }, region);", "-          if (count > 0) _frame.showFindResultsPanel(panel);", "-          else { ", "-            Toolkit.getDefaultToolkit().beep();", "-            panel.freeResources(); ", "-          }", "-          _frame.setStatusMessage(\"Found \" + count + \" occurrence\" + ((count == 1) ? \"\" : \"s\") + \".\");", "+      if (count > 0) _frame.showFindResultsPanel(panel);", "+      else { ", "+        Toolkit.getDefaultToolkit().beep();", "+        panel.freeResources(); ", "+      }", "+      _frame.setStatusMessage(\"Found \" + count + \" occurrence\" + ((count == 1) ? \"\" : \"s\") + \".\");", "+          ", "+      if (searchSelectedText) {", "+        EventQueue.invokeLater(new Runnable() { public void run() { ", "+          if (_defPane!=null) {", "+            _defPane.requestFocusInWindow();", "+            _defPane.setSelectionStart(region.getStartOffset());", "+            _defPane.setSelectionEnd(region.getEndOffset());", "+          }", "+        } });", "+      }          "]}], "num": 1300}
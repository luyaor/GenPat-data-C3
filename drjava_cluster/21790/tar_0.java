/* Generated By:JavaCC: Do not edit this line. Parser.java */
  package koala.dynamicjava.parser;

//import java.lang.reflect.*;
import java.lang.reflect.Modifier;
import java.util.*;
import java.io.File;

import koala.dynamicjava.SourceInfo;
import koala.dynamicjava.parser.wrapper.*;
import koala.dynamicjava.tree.*;
import koala.dynamicjava.tree.visitor.*;
import koala.dynamicjava.util.*;
import koala.dynamicjava.tree.tiger.generic.*;

/**
 * This class represents a (interpreted) Java 1.1 language parser
 * adapted for 1.5 language extensions.
 * Note that for the current version of JavaCC it is needed to
 * run the "fixparser" script after generating the parser so that
 * the parser code has proper generic code. Current version of
 * JavaCC does not support generics. Hopefully the next version
 * would recognize them and the need to run the fix script, and
 * to include generic code in comments is not needed.
 */

public class Parser implements ParserConstants {
  /**
   * The name of the file currently interpreted
   */
  private String filename;

  /**
   * An environment that has the generic type parameters defined
   * at any point.
   *
   * Used as a stack, pushed if TypeParameters are parsed (in
   * a class/interface/method declaration), and popped after
   * parsing whole scope (class, interface, or method).
   */
  private Environment<String, TypeParameter> GenericTypesEnv =
    new EmptyEnv<String, TypeParameter>();

  private Map<String, TypeParameter> TypeParamsMap = new HashMap<String, TypeParameter>();
  // contains the latest defined type parameters list whose
  // full declaration has not finished yet. That is to take
  // care of the fact that the scope of a type parameter
  // covers the rest of the definition of the type parameters
  // list beyond a parameter's own definition (for example,
  // class Enum<E extends Enum<E>>, in Java 1.5 API). When
  // checking for a type parameter, this Map has to be checked
  // first before the GenericTypesEnv environment.

  boolean lastFormalParameterIsVarArgs = false;

  /**
   * The message reader
   */
  private LocalizedMessageReader reader =
    new LocalizedMessageReader("koala.dynamicjava.parser.resources.messages");

  /**
   * Sets the current filename
   * @param fname the name of the input file
   */
  public void setFilename(String fname) {
    filename = fname;
  }

  /**
   * Creates a source location that starts at the given first token
   * and ends in the last token yet read.
   */
  private SourceInfo _loc(Token first) {
    return new SourceInfo(new File(filename),
                          first.beginLine,
                          first.beginColumn,
                          token.endLine,
                          token.endColumn);
  }

  /**
   * Throws a parse exception with the given message at the current token
   * @param message - the message to be thrown
   */

  private void _throwParseException(String message) throws ParseException {
    // The error typically occurs on the next token.
    Token t = token;
    if (token.next != null) {
      t = token.next;
    }
    // If a certain token or sequence of tokens is expected, display it.
    ParseException pe = generateParseException();
    throw new ParseException(message, t, pe.expectedTokenSequences, tokenImage);
  }

  /**
   * Throws a parse exception with the given message at the current token, if the given
   * parse exception was one auto generated by the parser (not one of ours), but not if the
   * message is an <EOF> message, which is passed up to allow continuation of typing
   * @param pe - the previous parse exception thrown
   * @param message - the message to be thrown
   */
  private void _throwParseException(ParseException pe, String message) throws ParseException {
    // Use the embedded error message if thrown from our code, or if ends in EOF
    if (pe.customConstructor) {
      message = pe.getMessage();
    }
    if(pe.getMessage().indexOf("<EOF>\"") != -1) {
      message = "Encountered Unexpected \"<EOF>\"";
    }
    _throwParseException(message);
  }

  /**
   * Creates a primary expression from a refix and a list of suffixes
   * @param prefix   the prefix expression
   * @param suffixes the suffix list built in reverse order
   */
  private static Expression createPrimaryExpression(Expression prefix, List<ExpressionSuffix> suffixes) {
    Iterator<ExpressionSuffix> it = suffixes.iterator();
    if (it.hasNext()) {
      return it.next().createExpression(prefix, it);
    } else {
      if (prefix instanceof CompileTimeQualifiedName) {
        return ((CompileTimeQualifiedName)prefix).createFieldAccess();
      } else if (prefix instanceof CompileTimeExpression) {
        return ((CompileTimeExpression)prefix).createRuntimeExpression();
      } else {
        return prefix;
      }
    }
  }

  /**
   * Creates a field declaration
   */
  private FieldDeclaration createFieldDeclaration(ModifierFlags  mf,
                                                  Type           typ,
                                                  Token          name,
                                                  Expression     exp,
                                                  int            dim) {

    int bl, bc, el, ec, flags = 0;

    // Compute the position of the declaration in the source code
    if (mf != null) {
      bl    = mf.beginLine;
      bc    = mf.beginColumn;
      flags = mf.accessFlags;
    } else {
      bl = typ.getBeginLine();
      bc = typ.getBeginColumn();
    }

    if (exp != null) {
      el = exp.getEndLine();
      ec = exp.getEndColumn();
    } else {
      el = name.endLine;
      ec = name.endColumn;
    }

    // If the field is an array, create an array type node
    if (dim > 0) {
      typ = new ArrayType(typ, dim,
                          filename,
                          typ.getBeginLine(), typ.getBeginColumn(),
                          typ.getEndLine(),   typ.getEndColumn());
    }

    return new FieldDeclaration(flags, typ, name.image, exp,
                                filename, bl, bc, el, ec);
  }

  /**
   * Creates a variable declaration
   */
  private VariableDeclaration createVariableDeclaration(Token          mf,
                                                        Type           typ,
                                                        Token          name,
                                                        Expression     exp,
                                                        int            dim) {
    int bl, bc, el, ec;
    boolean isFinal = false;

    // Compute the position of the declaration in the source code
    if (mf != null) {
      bl      = mf.beginLine;
      bc      = mf.beginColumn;
      isFinal = true;
    } else {
      bl = typ.getBeginLine();
      bc = typ.getBeginColumn();
    }

    if (exp != null) {
      el = exp.getEndLine();
      ec = exp.getEndColumn();
    } else {
      el = name.endLine;
      ec = name.endColumn;
    }

    // If the variable contains an array, create an array type node
    if (dim > 0) {
      typ = new ArrayType(typ, dim,
                          filename,
                          typ.getBeginLine(), typ.getBeginColumn(),
                          typ.getEndLine(),   typ.getEndColumn());
    }

    return new VariableDeclaration(isFinal, typ, name.image, exp,
                                   filename, bl, bc, el, ec);
  }


  private void checkModifiers(int flags, int notAllowed) throws ParseException {
    if(Modifier.isPublic(flags) && Modifier.isPublic(notAllowed))
      _throwParseException("Modifier public is not allowed here");
    if(Modifier.isPrivate(flags) && Modifier.isPrivate(notAllowed))
      _throwParseException("Modifier private is not allowed here");
    if(Modifier.isProtected(flags) && Modifier.isProtected(notAllowed))
      _throwParseException("Modifier protected is not allowed here");
    if(Modifier.isAbstract(flags) && Modifier.isAbstract(notAllowed))
      _throwParseException("Modifier abstract is not allowed here");
    if(Modifier.isFinal(flags) && Modifier.isFinal(notAllowed))
      _throwParseException("Modifier final is not allowed here");
    if(Modifier.isStatic(flags) && Modifier.isStatic(notAllowed))
      _throwParseException("Modifier static is not allowed here");
    if(Modifier.isNative(flags) && Modifier.isNative(notAllowed))
      _throwParseException("Modifier native is not allowed here");
    if(Modifier.isSynchronized(flags) && Modifier.isSynchronized(notAllowed))
      _throwParseException("Modifier synchronized is not allowed here");
    if(Modifier.isTransient(flags) && Modifier.isTransient(notAllowed))
      _throwParseException("Modifier transient is not allowed here");
    if(Modifier.isVolatile(flags) && Modifier.isVolatile(notAllowed))
      _throwParseException("Modifier volatile is not allowed here");
  }


  /*
   * The classes derived from this one are used for parsing only
   */

  abstract class ExpressionSuffix {
    /**
     * Creates an expression node
     * @param prefix the prefix expression
     * @param it     an iterator over the suffixes
     */
    public abstract Expression createExpression(Expression prefix, Iterator<ExpressionSuffix> it);
  }

  class DotAllocationSuffix extends ExpressionSuffix {
    /**
     * The allocation expression
     */
    public Allocation expression;

    /**
     * Creates a new suffix
     * @param exp the expression
     */
    public DotAllocationSuffix(Allocation exp) {
      expression = exp;
    }

    /**
     * Creates an expression node
     * @param prefix the prefix expression
     * @param it     an iterator over the suffixes
     */
    public Expression createExpression(Expression prefix, Iterator<ExpressionSuffix> it) {
      Expression exp = prefix;
      if (it.hasNext()) {
        exp = (it.next()).createExpression(prefix, it);
      } else {
        if (prefix instanceof CompileTimeExpression) {
          exp = ((CompileTimeExpression)prefix).createRuntimeExpression();
        }
      }
      if (expression instanceof SimpleAllocation) {
        SimpleAllocation sa = (SimpleAllocation)expression;
        if(sa instanceof PolymorphicSimpleAllocation){
          return new PolymorphicInnerAllocation
            (exp, sa.getCreationType(), sa.getArguments(), ((PolymorphicSimpleAllocation)sa).getTypeArguments(),
             filename,
             exp.getBeginLine(), exp.getBeginColumn(),
             sa.getEndLine(),    sa.getEndColumn());
        }
        else {
          return new InnerAllocation
            (exp, sa.getCreationType(), sa.getArguments(),
             filename,
             exp.getBeginLine(), exp.getBeginColumn(),
             sa.getEndLine(),    sa.getEndColumn());
        }
      } else {
        ClassAllocation ca = (ClassAllocation)expression;
        if(ca instanceof PolymorphicClassAllocation){
          return new PolymorphicInnerClassAllocation
            (exp, ca.getCreationType(), ca.getArguments(), ca.getMembers(), ((PolymorphicClassAllocation)ca).getTypeArguments(),
             filename,
             exp.getBeginLine(), exp.getBeginColumn(),
             ca.getEndLine(),    ca.getEndColumn());
        }
        else {
          return new InnerClassAllocation
            (exp, ca.getCreationType(), ca.getArguments(), ca.getMembers(),
             filename,
             exp.getBeginLine(), exp.getBeginColumn(),
             ca.getEndLine(),    ca.getEndColumn());
        }
      }
    }
  }

  class DotIdentifierSuffix extends ExpressionSuffix {
    /**
     * The identifier
     */
    public Token identifier;

    /**
     * Creates a new suffix
     * @param ident the identifier
     */
    public DotIdentifierSuffix(Token ident) {
      identifier = ident;
    }

    /**
     * Creates an expression node
     * @param prefix the prefix expression
     * @param it     an iterator over the suffixes
     */
    public Expression createExpression(Expression prefix, Iterator<ExpressionSuffix> it) {
      Expression exp = prefix;
      if (it.hasNext()) {
        exp = it.next().createExpression(prefix, it);
      } else {
        if (prefix instanceof CompileTimeExpression) {
          exp = ((CompileTimeExpression)prefix).createRuntimeExpression();
        }
      }
      return new ObjectFieldAccess
        (exp, identifier.image,
         filename,
         exp.getBeginLine(), exp.getBeginColumn(),
         identifier.endLine, identifier.endColumn);
    }
  }

  class ArrayReferenceSuffix extends ExpressionSuffix {
    /**
     * The expression
     */
    public Expression expression;

    /**
     * The end line
     */
    public int endLine;

    /**
     * The end column
     */
    public int endColumn;

    /**
     * Creates a new suffix
     * @param exp the expression
     * @param el  the end line
     * @param ec  the end column
     */
    public ArrayReferenceSuffix(Expression exp, int el, int ec) {
      expression = exp;
      endLine    = el;
      endColumn  = ec;
    }

    /**
     * Creates an expression node
     * @param prefix the prefix expression
     * @param it     an iterator over the suffixes
     */
    public Expression createExpression(Expression prefix, Iterator<ExpressionSuffix> it) {
      Expression exp = prefix;
      if (it.hasNext()) {
        exp = it.next().createExpression(prefix, it);
      } else {
        if (prefix instanceof CompileTimeExpression) {
          exp = ((CompileTimeExpression)prefix).createRuntimeExpression();
        }
      }
      return new ArrayAccess
        (exp, expression,
         filename,
         exp.getBeginLine(), exp.getBeginColumn(),
         endLine, endColumn);
    }
  }

  class DotThisSuffix extends ExpressionSuffix {
    /**
     * The end line
     */
    public int endLine;

    /**
     * The end column
     */
    public int endColumn;

    /**
     * Creates a new suffix
     * @param el  the end line
     * @param ec  the end column
     * @param fn  the file name
     */
    public DotThisSuffix(int el, int ec) {
      endLine    = el;
      endColumn  = ec;
    }

    /**
     * Creates an expression node
     * @param prefix the prefix expression
     * @param it     an iterator over the suffixes
     */
    public Expression createExpression(Expression prefix, Iterator<ExpressionSuffix> it) {
      Expression exp = prefix;
      if (it.hasNext()) {
        exp = (it.next()).createExpression(prefix, it);
      } else {
        if (prefix instanceof CompileTimeExpression) {
          exp = ((CompileTimeExpression)prefix).createRuntimeExpression();
        }
      }
      if (exp instanceof QualifiedName) {
        return new ThisExpression
          (((QualifiedName)exp).getIdentifiers(),
           filename,
           exp.getBeginLine(), exp.getBeginColumn(),
           endLine, endColumn);
      } else {
        throw new ParseError(reader.getMessage("this.prefix", null),
                             filename,
                             exp.getBeginLine(), exp.getBeginColumn());
      }
    }
  }

  class ArgumentsSuffix extends ExpressionSuffix {
    /**
     * The arguments
     */
    public List<Expression> arguments;

    /**
     * The type arguments
     */
    public List<Type> typeArgs;

    /**
     * The end line
     */
    public int endLine;

    /**
     * The end column
     */
    public int endColumn;

    /**
     * Creates a new argument suffix
     * @param args  the list of argument
     * @param el    the end line
     * @param ec    the end column
     */
    public ArgumentsSuffix(List<Expression> args, List<Type> tArgs, int el, int ec) {
      arguments = args;
      typeArgs = tArgs;
      endLine   = el;
      endColumn = ec;
    }

    /**
     * Creates an expression node
     * @param prefix the prefix expression
     * @param it     an iterator over the suffixes
     */
    public Expression createExpression(Expression prefix, Iterator<ExpressionSuffix> it) {
      if (it.hasNext()) {
        ExpressionSuffix es = it.next();
        if (es instanceof DotIdentifierSuffix) {
          DotIdentifierSuffix dis = (DotIdentifierSuffix)es;
          Expression exp = prefix;
          if (it.hasNext()) {
            exp = it.next().createExpression(prefix, it);
          } else if (prefix instanceof CompileTimeExpression) {
            exp = ((CompileTimeExpression)prefix).createRuntimeExpression();
          }
          if(typeArgs != null && typeArgs.size() > 0)
            return new PolymorphicObjectMethodCall
            (exp, dis.identifier.image, arguments, typeArgs,
             filename,
             exp.getBeginLine(), exp.getBeginColumn(),
             endLine, endColumn);
          else
            return new ObjectMethodCall
            (exp, dis.identifier.image, arguments,
             filename,
             exp.getBeginLine(), exp.getBeginColumn(),
             endLine, endColumn);
        } else {
          throw new ParseError(reader.getMessage("parameter.list", null),
                               filename,
                               endLine, endColumn);
        }
      } else {
        if (prefix instanceof CompileTimeQualifiedName) {
          // Remove the last identifier from the qualified name
          List<IdentifierToken>  l = ((CompileTimeQualifiedName)prefix).identifiers;
          Token f = (l.get(0)).getToken();
          Token t = (l.remove(l.size()-1)).getToken();
          Expression exp = null;
          if (l.size() >= 1) {
            exp = ((CompileTimeQualifiedName)prefix).
              createRuntimeExpression();
          }
          if(typeArgs != null && typeArgs.size() > 0)
            return new PolymorphicObjectMethodCall(exp, t.image, arguments, typeArgs,
                                                   filename,
                                                   f.beginLine, f.beginColumn,
                                                   endLine,   endColumn);
          else
            return new ObjectMethodCall(exp, t.image, arguments,
                                        filename,
                                        f.beginLine, f.beginColumn,
                                        endLine,   endColumn);
        } else if (prefix instanceof CompileTimeSuperExpression) {
          // Transform the super expression into a super method call
          CompileTimeSuperExpression se = (CompileTimeSuperExpression)prefix;
          if(typeArgs != null && typeArgs.size() > 0)
            return new PolymorphicSuperMethodCall(se.identifier, arguments, typeArgs,
                                                  filename,
                                                  se.getBeginLine(), se.getBeginColumn(),
                                                  endLine,           endColumn);
          else
            return new SuperMethodCall(se.identifier, arguments,
                                       filename,
                                       se.getBeginLine(), se.getBeginColumn(),
                                       endLine,           endColumn);
        } else {
          throw new ParseError(reader.getMessage("parameter.list", null),
                               filename,
                               endLine, endColumn);
        }
      }
    }
  }

  interface CompileTimeExpression {
    /**
     * Builds a runtime expression from this compile-time one.
     * This method must only be called when the expression has no suffix.
     */
    Expression createRuntimeExpression();

  }

  class CompileTimeSuperExpression
    extends Expression implements CompileTimeExpression {
    /**
     * The identifier from the superclass
     */
    public String identifier;

    /**
     * Initializes the expression
     * @param ident the identifier from the super class
     * @param bl    the begin line
     * @param bc    the begin column
     * @param el    the end line
     * @param ec    the end column
     */
    public CompileTimeSuperExpression(String ident, int bl, int bc, int el, int ec) {
      super("", bl, bc, el, ec);
      identifier = ident;
    }

    /**
     * Builds a runtime expression from this compile-time one.
     * This method must be called when the expression has no suffix
     */
    public Expression createRuntimeExpression() {
      return new SuperFieldAccess(identifier,
                                  filename,
                                  getBeginLine(), getBeginColumn(),
                                  getEndLine(),   getEndColumn());
    }

    /**
     * Not used
     */
    public <T> T acceptVisitor(Visitor<T> visitor) {
      return null;
    }
  }

  class CompileTimeQualifiedName extends Expression implements CompileTimeExpression {
    /**
     * The identifiers (tokens)
     */
    public List<IdentifierToken> identifiers;

    /**
     * Initializes the expression
     * @param ids a list of token
     */
    public CompileTimeQualifiedName(List<IdentifierToken> ids) {
      super("", 0, 0, 0, 0);
      identifiers = ids;
    }

    /**
     * Creates a runtime qualified name
     */
    public Expression createFieldAccess() {
      if (identifiers.size() == 1) {
        Token t = (identifiers.get(0)).getToken();
        return new QualifiedName(identifiers,
                                 filename,
                                 t.beginLine, t.beginColumn,
                                 t.endLine,   t.endColumn);
      } else {
        Token f = (identifiers.get(0)).getToken();
        Token t = (identifiers.remove(identifiers.size()-1)).getToken();;
        Token l = (identifiers.get(identifiers.size()-1)).getToken();
        return new ObjectFieldAccess(new QualifiedName(identifiers,
                                                       filename,
                                                       f.beginLine, f.beginColumn,
                                                       l.endLine,   l.endColumn),
                                     t.image, filename,
                                     f.beginLine, f.beginColumn,
                                     t.endLine,   t.endColumn);
      }
    }

    /**
     * Builds a runtime expression from this compile-time one.
     * This method must be called when the expression has no suffix
     */
    public Expression createRuntimeExpression() {
      Token first = (identifiers.get(0)).getToken();
      Token last  = (identifiers.get(identifiers.size()-1)).getToken();
      return new QualifiedName(identifiers,
                               filename,
                               first.beginLine, first.beginColumn,
                               last.endLine,    last.endColumn);
    }

    /**
     * Not used
     */
    public <T> T acceptVisitor(Visitor<T> visitor) {
      return null;
    }
  }

  /**
   * To store modifier flags
   */
  static class ModifierFlags {
    int accessFlags;
    int beginLine;
    int beginColumn;

    ModifierFlags(int flags, int bl, int bc) {
      accessFlags = flags;
      beginLine   = bl;
      beginColumn = bc;
    }
  }

  /**
   * To store a class body
   */
  static class ClassBody {
    List<Node> list;
    int  endLine;
    int  endColumn;

    ClassBody(List<Node> l, int el, int ec) {
      list      = l;
      endLine   = el;
      endColumn = ec;
    }
  }

  void _errorChar(char c) throws ParseException {
    _throwParseException("'" + c + "' expected.");
  }

  /*
   * The syntactic grammar
   */

  // Productions for the intepreter ////////////////////////////////////////////////

  /**
   * Parses input stream. This production is
   * not a Java language rule. It is used by DynamicJava.
   * @return a list of nodes (possibly empty)
   * @see koala.dynamicjava.tree.Node
   */
  final public List<Node> parseStream() throws ParseException {
    List<Node> list = new LinkedList<Node>();
    List<Node> l = new LinkedList<Node>();
    Node root = null;
    label_1:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_1;
      }
      l = topLevelStatement();
         list.addAll(l);  l.clear();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LESS:
    case BANG:
    case TILDE:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
      root = expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
                                    list.add(root);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(0);
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses an item of the input stream. This production is
   * not a Java language rule. It is used by DynamicJava.
   * @return a list of nodes (possibly empty)
   * @see koala.dynamicjava.tree.Node
   */
  final public List<Node> topLevelStatement() throws ParseException {
    Node root = null;
    List<Node> l = new LinkedList<Node>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BREAK:
      case CONTINUE:
      case DO:
      case FOR:
      case IF:
      case IMPORT:
      case PACKAGE:
      case RETURN:
      case SWITCH:
      case THROW:
      case TRY:
      case WHILE:
      case LBRACE:
      case SEMICOLON:
        root = singleLookaheadStatement();
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_2(2)) {
          root = synchronizedStatement();
        } else if (jj_2_3(2)) {
          root = labeledStatement();
        } else if (jj_2_4(2147483647)) {
          root = methodDeclaration();
        } else if (jj_2_5(2147483647)) {
          l = localVariableDeclaration();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          case 0:
            jj_consume_token(0);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_6(2147483647)) {
          root = typeDeclaration();
        } else if (jj_2_7(2147483647)) {
          root = expression();
          jj_consume_token(SEMICOLON);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        if (root != null) {
          l.add(root);
        }
        {if (true) return l;}
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid Stream Item");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses one top level statement which requires a lookahed of one.
   * This production is not a Java language rule. It is used by DynamicJava.
   *
   * @return a node
   * @see koala.dynamicjava.tree.Node
   */
  final public Node singleLookaheadStatement() throws ParseException {
    Node node;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        /** Originally separate, added as they are top level statements that require lookahead of one */
               node = packageDeclaration();
        break;
      case IMPORT:
        node = importDeclaration();
        break;
      case LBRACE:
        node = block();
        break;
      case SEMICOLON:
        node = emptyStatement();
        break;
      case IF:
        node = ifStatement();
        break;
      case ASSERT:
        node = assertStatement();
        break;
      case WHILE:
        node = whileStatement();
        break;
      case DO:
        node = doStatement();
        break;
      case SWITCH:
        node = switchStatement();
        break;
      case FOR:
        node = forStatement();
        break;
      case BREAK:
        node = breakStatement();
        break;
      case CONTINUE:
        node = continueStatement();
        break;
      case RETURN:
        node = returnStatement();
        break;
      case THROW:
        node = throwStatement();
        break;
      case TRY:
        node = tryStatement();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return node;}
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid statement");
    }
    throw new Error("Missing return statement in function");
  }

  // Productions for Packages ////////////////////////////////////////////////////////

  /**
   * Parses a Java compilation unit
   * @return a list of nodes (possibly empty)
   * @see koala.dynamicjava.tree.Node
   */
  final public List<Node> parseCompilationUnit() throws ParseException {
    List<Node> list = new LinkedList<Node>();
    Node node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      node = packageDeclaration();
      list.add(node);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      node = importDeclaration();
       list.add(node);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
        node = typeDeclaration();
       list.add(node);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
            {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a package declaration
   * @see koala.dynamicjava.tree.PackageDeclaration
   */
  final public PackageDeclaration packageDeclaration() throws ParseException {
    ReferenceType name = null;
    Token t1, t2;
    try {
      t1 = jj_consume_token(PACKAGE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name = ReferenceTypeName();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        t2 = jj_consume_token(SEMICOLON);
        break;
      case 0:
        t2 = jj_consume_token(0);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        if(name instanceof GenericReferenceType){
          _throwParseException("Package names cannot be parameterized.");
        }
        if(name == null) {
          _throwParseException("Empty Package name");
        }
        {if (true) return new PackageDeclaration(name.getRepresentation(),
                                      filename,
                                      t1.beginLine, t1.beginColumn,
                                      t2.endLine,   t2.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid Package Declaration");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses an import declaration
   * @see koala.dynamicjava.tree.ImportDeclaration
   */
  final public ImportDeclaration importDeclaration() throws ParseException {
    ReferenceType name = null;
    Token star = null;
    Token t1, t2;
    Token sttic = null;
    try {
      t1 = jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        sttic = jj_consume_token(STATIC);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name = ReferenceTypeName();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        star = jj_consume_token(STAR);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        t2 = jj_consume_token(SEMICOLON);
        break;
      case 0:
        t2 = jj_consume_token(0);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        if(name instanceof GenericReferenceType){
          _throwParseException("Import names cannot be parameterized.");
        }
        if(name == null) {
          _throwParseException("Missing name - Cannot import");
        }
        {if (true) return new ImportDeclaration(name.getRepresentation(), star != null, sttic != null,
                                     filename,
                                     t1.beginLine, t1.beginColumn,
                                     t2.endLine,   t2.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid Import Declaration");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a top level type declaration
   * @see koala.dynamicjava.tree.TypeDeclaration
   */
  final public TypeDeclaration typeDeclaration() throws ParseException {
    TypeDeclaration node;
    int modifiers;
    try {
      if (jj_2_8(2147483647)) {
        node = classDeclaration();
      } else if (jj_2_9(2147483647)) {
        node = enumDeclaration();
      } else if (jj_2_10(2147483647)) {
        node = interfaceDeclaration();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        //Handles modifiers not allowed at the top level
        checkModifiers(node.getAccessFlags(), Modifier.STATIC | Modifier.PRIVATE | Modifier.PROTECTED);
        {if (true) return node;}
    } catch (ParseException pe) {
      _throwParseException(pe,"invalid declaration");
    }
    throw new Error("Missing return statement in function");
  }

  // Productions for Names ////////////////////////////////////////////////////////

  /**
   * Parses a name
   * @return a list of tree token
   * @see koala.dynamicjava.parser.wrapper.TreeToken
   */
  final public List<IdentifierToken> name() throws ParseException {
    Token id;
    List<IdentifierToken>  list = new LinkedList<IdentifierToken>();
    id = jj_consume_token(IDENTIFIER);
      list.add(new TreeToken(id));
    label_4:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(DOT);
      id = jj_consume_token(IDENTIFIER);
      list.add(new TreeToken(id));
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  // Production for a ReferenceType ////////////////////////////////////////////////////////
  final public ReferenceType ReferenceTypeName() throws ParseException {
    Token id = null;
    List<IdentifierToken> list = new LinkedList<IdentifierToken>();
    List<Type> typeArgs = new LinkedList<Type>();
    List<List<? extends Type>> allTypeArgs = new LinkedList<List<? extends Type>>();
    try {
      id = jj_consume_token(IDENTIFIER);
      if (jj_2_12(2147483647)) {
        typeArgs = TypeArguments();
      } else {
        ;
      }
        list.add(new TreeToken(id));
        allTypeArgs.add( typeArgs );
        typeArgs = new LinkedList<Type>();
      label_5:
      while (true) {
        if (jj_2_13(2147483647)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(DOT);
        id = jj_consume_token(IDENTIFIER);
        if (jj_2_14(2147483647)) {
          typeArgs = TypeArguments();
        } else {
          ;
        }
        list.add(new TreeToken(id));
        allTypeArgs.add( typeArgs );
        typeArgs = new LinkedList<Type>();
      }
        IdentifierToken f  = list.get(0);
        IdentifierToken l  = list.get(list.size()-1);
        boolean Parameterized = false;
        for( int i = 0; i < allTypeArgs.size(); i++ ){
          List<? extends Type> targs = allTypeArgs.get(i);
          if(targs.size() > 0) {
            Parameterized = true;
            break;
          }
        }
        if(!Parameterized){
          if(TypeParamsMap.containsKey(TreeUtilities.listToName(list))){
            {if (true) return TypeParamsMap.get(TreeUtilities.listToName(list));}
          } else if(GenericTypesEnv.contains(TreeUtilities.listToName(list))){
            {if (true) return GenericTypesEnv.lookup(TreeUtilities.listToName(list));}
          } else {
            {if (true) return new ReferenceType(list,
                                     filename,
                                     f.beginLine(), f.beginColumn(),
                                     l.endLine(),   l.endColumn());}
          }
        } else {
          {if (true) return new GenericReferenceType(list,
                                          filename,
                                          f.beginLine(), f.beginColumn(),
                                          l.endLine(), l.endColumn(),
                                          allTypeArgs);}
        }
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid Reference name");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a comma separated list of ReferenceType names
   * @return a list of ReferenceType
   * @see koala.dynamicjava.tree.ReferenceType
   */
  final public List<? extends ReferenceType> ReferenceTypeNameList() throws ParseException {
    List<ReferenceType> list = new LinkedList<ReferenceType>();
    ReferenceType obj;
    obj = ReferenceTypeName();
      list.add(obj);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      obj = ReferenceTypeName();
      list.add(obj);
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  // Productions for Classes //////////////////////////////////////////////////////

  // Productions for Class Declaration ============================================

  /**
   * Parses a class declaration
   * @see koala.dynamicjava.tree.ClassDeclaration
   */
  final public ClassDeclaration classDeclaration() throws ParseException {
    ClassDeclaration cd;
    ModifierFlags    md;
    md = modifiers();
    cd = unmodifiedClassDeclaration(md);
      if(md != null)
        checkModifiers(md.accessFlags, Modifier.NATIVE | Modifier.SYNCHRONIZED | Modifier.TRANSIENT | Modifier.VOLATILE);
      {if (true) return cd;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse a modifier
   */
  final public ModifierFlags modifiers() throws ParseException {
    Token t;
    int   flags = 0;
    Token ft    = null;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        t = jj_consume_token(ABSTRACT);
      if (ft == null) {
        ft = t;
      } else if ((flags & Modifier.ABSTRACT) != 0) {
        {if (true) throw new ParseError(reader.getMessage("abstract.abstract", null),
                             filename,
                             t.beginLine, t.beginColumn);}
      } else if ((flags & Modifier.FINAL) != 0) {
        {if (true) throw new ParseError(reader.getMessage("abstract.final", null),
                             filename,
                             t.beginLine, t.beginColumn);}
      }
      flags |= Modifier.ABSTRACT;
        break;
      case FINAL:
        t = jj_consume_token(FINAL);
       if (ft == null) {
         ft = t;
       } else if ((flags & Modifier.FINAL) != 0) {
         {if (true) throw new ParseError(reader.getMessage("final.final", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       } else if ((flags & Modifier.ABSTRACT) != 0) {
         {if (true) throw new ParseError(reader.getMessage("abstract.final", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }
       flags |= Modifier.FINAL;
        break;
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
       if (ft == null) {
         ft = t;
       } else if ((flags & Modifier.PUBLIC) != 0) {
         {if (true) throw new ParseError(reader.getMessage("public.public", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       } else if ((flags & Modifier.PROTECTED) != 0) {
         {if (true) throw new ParseError(reader.getMessage("public.protected", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       } else if ((flags & Modifier.PRIVATE) != 0) {
         {if (true) throw new ParseError(reader.getMessage("public.private", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }

       flags |= Modifier.PUBLIC;
        break;
      case PROTECTED:
        t = jj_consume_token(PROTECTED);
       if (ft == null) {
         ft = t;
       } else if ((flags & Modifier.PROTECTED) != 0) {
         {if (true) throw new ParseError(reader.getMessage("protected.protected", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       } else if ((flags & Modifier.PUBLIC) != 0) {
         {if (true) throw new ParseError(reader.getMessage("public.protected", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       } else if ((flags & Modifier.PRIVATE) != 0) {
         {if (true) throw new ParseError(reader.getMessage("protected.private", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }
       flags |= Modifier.PROTECTED;
        break;
      case PRIVATE:
        t = jj_consume_token(PRIVATE);
       if (ft == null) {
         ft = t;
       }  else if ((flags & Modifier.PRIVATE) != 0) {
         {if (true) throw new ParseError(reader.getMessage("private.private", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       } else if ((flags & Modifier.PUBLIC) != 0) {
         {if (true) throw new ParseError(reader.getMessage("public.private", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       } else if ((flags & Modifier.PROTECTED) != 0) {
         {if (true) throw new ParseError(reader.getMessage("protected.private", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }
       flags |= Modifier.PRIVATE;
        break;
      case TRANSIENT:
        t = jj_consume_token(TRANSIENT);
       if (ft == null) {
         ft = t;
       } else if ((flags & Modifier.TRANSIENT) != 0) {
         {if (true) throw new ParseError(reader.getMessage("transient.transient", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }
       flags |= Modifier.TRANSIENT;
        break;
      case VOLATILE:
        t = jj_consume_token(VOLATILE);
       if (ft == null) {
         ft = t;
       } else if ((flags & Modifier.VOLATILE) != 0) {
         {if (true) throw new ParseError(reader.getMessage("volatile.volatile", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }
       flags |= Modifier.VOLATILE;
        break;
      case NATIVE:
        t = jj_consume_token(NATIVE);
       if (ft == null) {
         ft = t;
       } else if ((flags & Modifier.NATIVE) != 0) {
         {if (true) throw new ParseError(reader.getMessage("native.native", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }  else if ((flags & Modifier.ABSTRACT) != 0) {
         {if (true) throw new ParseError(reader.getMessage("abstract.native", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }
       flags |= Modifier.NATIVE;
        break;
      case STATIC:
        t = jj_consume_token(STATIC);
       if (ft == null) {
         ft = t;
       } else if ((flags & Modifier.STATIC) != 0) {
         {if (true) throw new ParseError(reader.getMessage("static.static", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }
       flags |= Modifier.STATIC;
        break;
      case SYNCHRONIZED:
        t = jj_consume_token(SYNCHRONIZED);
       if (ft == null) {
         ft = t;
       } else if ((flags & Modifier.SYNCHRONIZED) != 0) {
         {if (true) throw new ParseError(reader.getMessage("synchronized.synchronized", null),
                              filename,
                              t.beginLine, t.beginColumn);}
       }
       flags |= Modifier.SYNCHRONIZED;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return (ft == null)
         ? null
         : new ModifierFlags(flags, ft.beginLine, ft.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a class declaration without modifier
   * @see koala.dynamicjava.tree.ClassDeclaration
   */
  final public ClassDeclaration unmodifiedClassDeclaration(ModifierFlags mf) throws ParseException {
    Token t;
    Token id;
    TypeParameter[] typeParameters = null;
    ReferenceType  ext  = null;
    List<? extends ReferenceType> impl = null;
    ClassBody body;
    t = jj_consume_token(CLASS);
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      typeParameters = TypeParameters();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      ext = ReferenceTypeName();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      impl = ReferenceTypeNameList();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    body = classBody();
      if (typeParameters != null){
        GenericTypesEnv = GenericTypesEnv.getRest(); // pop added type params
        if (mf == null) {
          {if (true) return new GenericClassDeclaration(0, id.image, ext, impl, body.list,
                                             filename,
                                             t.beginLine,  t.beginColumn,
                                             body.endLine, body.endColumn, typeParameters);}
        } else {
          {if (true) return new GenericClassDeclaration(mf.accessFlags, id.image, ext, impl, body.list,
                                             filename,
                                             mf.beginLine, mf.beginColumn,
                                             body.endLine, body.endColumn, typeParameters);}
        }
      }
      else {
        if (mf == null) {
          {if (true) return new ClassDeclaration(0, id.image, ext, impl, body.list,
                                      filename,
                                      t.beginLine,  t.beginColumn,
                                      body.endLine, body.endColumn);}
        } else {
          {if (true) return new ClassDeclaration(mf.accessFlags, id.image, ext, impl, body.list,
                                      filename,
                                      mf.beginLine, mf.beginColumn,
                                      body.endLine, body.endColumn);}
        }
      }
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse the body of a class
   */
  final public ClassBody classBody() throws ParseException {
    Token t;
    List<Node> list = new LinkedList<Node>();
    List<Node> decl;
    try {
      jj_consume_token(LBRACE);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case LESS:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
        decl = classBodyDeclaration();
        list.addAll(decl);
      }
      t = jj_consume_token(RBRACE);
        {if (true) return new ClassBody(list, t.endLine, t.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid class body");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses one declaration in the body of a class.
   * @return a list of node because one field declaration can
   *         contain multiple declarations.
   * @see koala.dynamicjava.tree.Node
   */
  final public List<Node> classBodyDeclaration() throws ParseException {
    Node node = null;
    List<Node> list = new LinkedList<Node>();
    try {
      if (jj_2_15(2)) {
        node = initializer();
      } else if (jj_2_16(2147483647)) {
        node = classDeclaration();
      } else if (jj_2_17(2147483647)) {
        node = enumDeclaration();
      } else if (jj_2_18(2147483647)) {
        node = interfaceDeclaration();
      } else if (jj_2_19(2147483647)) {
        node = constructorDeclaration();
      } else if (jj_2_20(2147483647)) {
        node = methodDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
          list = fieldDeclaration();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        if (node != null) {
          list.add(node);
        }
        {if (true) return list;}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid Member Declaration");
    }
    throw new Error("Missing return statement in function");
  }

  // Productions for Field Declaration ============================================

  /**
   * Parses a field declaration.
   * @return a list of field declaration because one field declaration can
   *         contain multiple declarations.
   * @see koala.dynamicjava.tree.FieldDeclaration
   */
  final public List<Node> fieldDeclaration() throws ParseException {
    ModifierFlags mf;
    Type          typ;
    Token         id;
    int           dim  = 0;
    Expression    exp  = null;
    List<Node>    list = new LinkedList<Node>();
    try {
      mf = modifiers();
      typ = type();
      id = jj_consume_token(IDENTIFIER);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                    dim++;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        exp = variableInitializer();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
          if(mf != null)
            checkModifiers(mf.accessFlags,Modifier.ABSTRACT | Modifier.NATIVE | Modifier.SYNCHRONIZED);
          list.add(createFieldDeclaration(mf, typ, id, exp, dim));
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
                dim = 0; exp = null;
        id = jj_consume_token(IDENTIFIER);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_11;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                     dim++;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          exp = variableInitializer();
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
           list.add(createFieldDeclaration(mf, typ, id, exp, dim));
      }
      jj_consume_token(SEMICOLON);
           {if (true) return list;}
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid Field Declaration");
    }
    throw new Error("Missing return statement in function");
  }

  // Productions for Method Declaration ===========================================

  /**
   * Parses a method declaration
   * @see koala.dynamicjava.tree.MethodDeclaration
   */
  final public MethodDeclaration methodDeclaration() throws ParseException {
    MethodDeclaration md;
    ModifierFlags     mf;
    int               bl;
    int               bc;
    int               flags = 0;
    TypeParameter[]   typeParameters = null;
    Type              typ;
    Token             id;
    int               dim = 0;
    List<FormalParameter> params;
    List<? extends ReferenceType> exceptions = new LinkedList<ReferenceType>();
    Node              body = null;
    try {
      mf = modifiers();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        typeParameters = TypeParameters();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      typ = resultType();
      id = jj_consume_token(IDENTIFIER);
      params = formalParameters();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_12;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                    dim++;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        exceptions = ReferenceTypeNameList();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        body = block();
        break;
      case SEMICOLON:
        body = emptyStatement();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          if (mf != null) {
            checkModifiers(mf.accessFlags, Modifier.TRANSIENT | Modifier.VOLATILE);
            bl    = mf.beginLine;
            bc    = mf.beginColumn;
            flags = mf.accessFlags;
          } else {
            bl = typ.getBeginLine();
            bc = typ.getBeginColumn();
          }
          if (dim > 0) {
            typ = new ArrayType(typ, dim,
                                filename,
                                typ.getBeginLine(), typ.getBeginColumn(),
                                typ.getEndLine(),   typ.getEndColumn());
          }
          if(lastFormalParameterIsVarArgs) flags |= 0x00000080; // java.lang.reflect.Modifier.VARARGS == 0x00000080 /**/

          if (typeParameters == null){
            {if (true) return new MethodDeclaration(flags, typ, id.image, params,
                                         exceptions,
                                         (body instanceof BlockStatement) ?
                                           (BlockStatement)body : null,
                                         filename,
                                         bl, bc, body.getEndLine(), body.getEndColumn());}
          } else {
            GenericTypesEnv = GenericTypesEnv.getRest(); // pop added type params
            {if (true) return new PolymorphicMethodDeclaration(flags, typ, id.image, params,
                                                    exceptions,
                                                    (body instanceof BlockStatement) ?
                                                      (BlockStatement)body : null,
                                                    filename,
                                                    bl, bc, body.getEndLine(), body.getEndColumn(),
                                                    typeParameters);}
          }
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid method declaration");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses formal parameters of the form '(param, param, ...)'
   * @see koala.dynamicjava.tree.FormalParameter
   */
  final public List<FormalParameter> formalParameters() throws ParseException {
    List<FormalParameter> list = new LinkedList<FormalParameter>();
    FormalParameter node;
    FormalParameter lastParam = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        label_13:
        while (true) {
          if (jj_2_21(2147483647)) {
            ;
          } else {
            break label_13;
          }
          node = formalParameter();
          jj_consume_token(COMMA);
        list.add(node);
        }
        if (jj_2_22(2147483647)) {
          lastParam = varArgsFormalParameter();
              lastFormalParameterIsVarArgs = true;
        } else if (jj_2_23(2147483647)) {
          lastParam = formalParameter();
              lastFormalParameterIsVarArgs = false;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
              if(lastParam != null) {
                list.add(lastParam);
              }
              {if (true) return list;}
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid formal parameters");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses one formal parameter
   * @see koala.dynamicjava.tree.FormalParameter
   */
  final public FormalParameter formalParameter() throws ParseException {
    Type  typ;
    Token id;
    Token f   = null;
    int   dim = 0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        f = jj_consume_token(FINAL);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      typ = type();
      id = jj_consume_token(IDENTIFIER);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_14;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                                           dim++;
      }
        if (dim > 0) {
          typ = new ArrayType(typ, dim,
                              filename,
                              typ.getBeginLine(), typ.getBeginColumn(),
                              typ.getEndLine(),   typ.getEndColumn());
        }
        {if (true) return new FormalParameter(f != null, typ, id.image,
                                   filename,
                                   (f != null) ? f.beginLine   : typ.getBeginLine(),
                                   (f != null) ? f.beginColumn : typ.getBeginColumn(),
                                   id.endLine, id.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid formal parameter");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a varargs formal parameter
   * @see koala.dynamicjava.tree.FormalParameter
   */
  final public FormalParameter varArgsFormalParameter() throws ParseException {
    Type  typ;
    Token id;
    Token f   = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        f = jj_consume_token(FINAL);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      typ = type();
      jj_consume_token(VAR_ARGS);
      id = jj_consume_token(IDENTIFIER);
        // convert the type of the formal parameter to be an array
        typ = new ArrayType(typ, 1,
                            filename,
                            typ.getBeginLine(), typ.getBeginColumn(),
                            typ.getEndLine(),   typ.getEndColumn());
        {if (true) return new FormalParameter(f != null, typ, id.image,
                                   filename,
                                   (f != null) ? f.beginLine   : typ.getBeginLine(),
                                   (f != null) ? f.beginColumn : typ.getBeginColumn(),
                                   id.endLine, id.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid variable arguments formal parameter");
    }
    throw new Error("Missing return statement in function");
  }

  // Production for Initializer ===================================================

  /**
   * Parses one initializer
   * @see koala.dynamicjava.tree.Initializer
   */
  final public Initializer initializer() throws ParseException {
    Token t = null;
    BlockStatement node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      t = jj_consume_token(STATIC);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    node = block();
      if (t == null) {
        {if (true) return new InstanceInitializer(node,
                                       filename,
                                       node.getBeginLine(), node.getEndColumn(),
                                       node.getEndLine(), node.getEndColumn());}
      } else {
        {if (true) return new ClassInitializer(node,
                                    filename,
                                    t.beginLine, t.beginColumn,
                                    node.getEndLine(), node.getEndColumn());}
      }
    throw new Error("Missing return statement in function");
  }

  // Productions for Constructor Declaration ======================================

  /**
   * Parses a constructor declaration
   * @see koala.dynamicjava.tree.ConstructorDeclaration
   */
  final public ConstructorDeclaration constructorDeclaration() throws ParseException {
    Token                 t = null;
    ModifierFlags         mf;
    int                   flag = 0;
    Token                 id;
    TypeParameter[]   typeParameters = null;
    List<FormalParameter> params;
    List<? extends ReferenceType> exceptions = new LinkedList<ReferenceType>();
    ConstructorInvocation ci = null;
    List<Node>            stmt;
    List<Node>            stmts = new LinkedList<Node>();
    int                   bl, bc;
    Token                 e;
    try {
      mf = modifiers();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        typeParameters = TypeParameters();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      id = jj_consume_token(IDENTIFIER);
      params = formalParameters();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        exceptions = ReferenceTypeNameList();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      if (jj_2_24(2147483647)) {
        ci = explicitConstructorInvocation();
      } else {
        ;
      }
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case ENUM:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case LESS:
        case INCREMENT:
        case DECREMENT:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_15;
        }
        stmt = blockStatement();
        stmts.addAll(stmt);
      }
      e = jj_consume_token(RBRACE);
        if(mf !=null) //Modifiers not allowed in a constructor declaration
          checkModifiers(mf.accessFlags, Modifier.STATIC | Modifier.FINAL | Modifier.NATIVE | Modifier.ABSTRACT
                           | Modifier.SYNCHRONIZED | Modifier.TRANSIENT | Modifier.VOLATILE);
        if (t == null) {
          bl = id.beginLine;
          bc = id.beginColumn;
        } else {
          bl = t.beginLine;
          bc = t.beginColumn;
        }
        if(lastFormalParameterIsVarArgs) flag |= 0x00000080; // Modifier.VARARGS == 0x00000080 /**/
        if (typeParameters == null){
          {if (true) return new ConstructorDeclaration(flag, id.image, params, exceptions, ci, stmts,
                                            filename, bl, bc, e.endLine, e.endColumn);}
        } else {
          GenericTypesEnv = GenericTypesEnv.getRest(); // pop added type params
          {if (true) return new PolymorphicConstructorDeclaration(flag, id.image, params,
                                                       exceptions, ci, stmts,
                                                       filename, bl, bc, e.endLine, e.endColumn, typeParameters);}
        }
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid constructor declaration");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a constructor invocation
   * @see koala.dynamicjava.tree.ConstructorInvocation
   */
  final public ConstructorInvocation explicitConstructorInvocation() throws ParseException {
    Token           b, e;
    ArgumentsSuffix args;
    Expression      exp = null;
    List<Type> typeArgs = new LinkedList<Type>();
    try {
      if (jj_2_27(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESS:
          typeArgs = TypeArguments();
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        b = jj_consume_token(THIS);
        args = arguments(typeArgs);
        e = jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LESS:
          if (jj_2_25(2)) {
            exp = primaryExpression();
            jj_consume_token(DOT);
          } else {
            ;
          }
          if (jj_2_26(2147483647)) {
            typeArgs = TypeArguments();
          } else {
            ;
          }
          b = jj_consume_token(SUPER);
          args = arguments(typeArgs);
          e = jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        {if (true) return new ConstructorInvocation(exp, args.arguments, b.image.equals("super"),
                                         filename,
                                         b.beginLine, b.beginColumn,
                                         e.endLine,   e.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid constructor invocation");
    }
    throw new Error("Missing return statement in function");
  }

  // Productions for Interfaces ///////////////////////////////////////////////////

  /**
   * Parses a interface declaration
   * @see koala.dynamicjava.tree.InterfaceDeclaration
   */
  final public InterfaceDeclaration interfaceDeclaration() throws ParseException {
    InterfaceDeclaration id;
    ModifierFlags        md;
    md = modifiers();
    id = unmodifiedInterfaceDeclaration(md);
      if(md != null) {
        checkModifiers(md.accessFlags, Modifier.FINAL | Modifier.NATIVE | Modifier.SYNCHRONIZED | Modifier.TRANSIENT | Modifier.VOLATILE);
      }
      {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a interface declaration without modifier
   * @see koala.dynamicjava.tree.InterfaceDeclaration
   */
  final public InterfaceDeclaration unmodifiedInterfaceDeclaration(ModifierFlags mf) throws ParseException {
    Token t;
    Token id;
    Token e;
    TypeParameter[] typeParameters = null;
    List<? extends ReferenceType> impl = null;
    List<Node> list = new LinkedList<Node>();
    List<Node>  decl;
    int   m = 0;
    try {
      t = jj_consume_token(INTERFACE);
      id = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        typeParameters = TypeParameters();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        impl = ReferenceTypeNameList();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LESS:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_16;
        }
        decl = interfaceMemberDeclaration();
        list.addAll(decl);
      }
      e = jj_consume_token(RBRACE);
        if (mf != null) {
          m = mf.accessFlags;
        }
        if (typeParameters == null){
          {if (true) return new InterfaceDeclaration(m, id.image, impl, list,
                                          filename,
                                          t.beginLine, t.beginColumn,
                                          e.endLine,   e.endColumn);}
        } else {
          GenericTypesEnv = GenericTypesEnv.getRest(); // pop added type params
          {if (true) return new GenericInterfaceDeclaration(m, id.image, impl, list,
                                                 filename,
                                                 t.beginLine, t.beginColumn,
                                                 e.endLine, e.endColumn,
                                                 typeParameters);}
        }
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid interface declaration");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses one declaration in the body of an interface.
   * @return a list of node because one field declaration can
   *         contain multiple declarations.
   * @see koala.dynamicjava.tree.Node
   */
  final public List<Node> interfaceMemberDeclaration() throws ParseException {
    Node node = null;
    List<Node> list = new LinkedList<Node>();
    try {
      if (jj_2_28(2147483647)) {
        node = classDeclaration();
      } else if (jj_2_29(2147483647)) {
        node = enumDeclaration();
      } else if (jj_2_30(2147483647)) {
        node = interfaceDeclaration();
      } else if (jj_2_31(2147483647)) {
        node = methodDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
          list = fieldDeclaration();
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        if (node != null) {
          list.add(node);
        }
        {if (true) return list;}
    } catch (ParseException pe) {
      _throwParseException(pe, "Invalid interface member declaration");
    }
    throw new Error("Missing return statement in function");
  }

  // Productions for Enums ////////////////////////////////////////////////////////

  /**
   * Parses an enum declaration
   * @see koala.dynamicjava.tree.EnumDeclaration
   */
  final public EnumDeclaration enumDeclaration() throws ParseException {
    EnumDeclaration  ed;
    ModifierFlags    md;
    md = modifiers();
    ed = unmodifiedEnumDeclaration(md);
      if(md != null) {
        checkModifiers(md.accessFlags, Modifier.FINAL | Modifier.ABSTRACT | Modifier.NATIVE | Modifier.SYNCHRONIZED | Modifier.TRANSIENT | Modifier.VOLATILE);
      }
      {if (true) return ed;}
    throw new Error("Missing return statement in function");
  }

  final public EnumDeclaration unmodifiedEnumDeclaration(ModifierFlags mf) throws ParseException {
    Token            t, e;
    Token            id;
    List<? extends ReferenceType> impl = null;
    EnumDeclaration.EnumBody   body;
    int   m = 0;
    t = jj_consume_token(ENUM);
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      impl = ReferenceTypeNameList();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    body = enumBody();
    e = jj_consume_token(RBRACE);
      if (mf != null) m = mf.accessFlags;
      {if (true) return new EnumDeclaration(m, id.image, impl, body,
                                 filename,
                                 t.beginLine, t.beginColumn,
                                 e.endLine,   e.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses the body of an enum
   * @see koala.dynamicjava.tree.Node
   */
  final public EnumDeclaration.EnumBody enumBody() throws ParseException {
    List<EnumDeclaration.EnumConstant> consts = new LinkedList<EnumDeclaration.EnumConstant>();
    List<Node>         decl = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      consts = enumConstants();
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      decl = enumBodyDeclarations();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
      {if (true) return new EnumDeclaration.EnumBody(consts, ((decl==null)? new LinkedList<Node>() : decl));}
    throw new Error("Missing return statement in function");
  }

  final public List<EnumDeclaration.EnumConstant> enumConstants() throws ParseException {
    List<EnumDeclaration.EnumConstant> list = new LinkedList<EnumDeclaration.EnumConstant>();
    EnumDeclaration.EnumConstant individual = null;
    individual = enumConstant();
      list.add(individual);
    label_17:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_17;
      }
      jj_consume_token(COMMA);
      individual = enumConstant();
         list.add(individual);
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public EnumDeclaration.EnumConstant enumConstant() throws ParseException {
    List<Node>       body = new LinkedList<Node>();
    ArgumentsSuffix args = null;
    Token                id;
    ClassBody            _classBody = null;
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      args = arguments(null);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      _classBody = classBody();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
      {if (true) return new EnumDeclaration.EnumConstant(id.image, (args==null) ? null : args.arguments, (_classBody == null)? null : _classBody.list);}
    throw new Error("Missing return statement in function");
  }

  final public List<Node> enumBodyDeclarations() throws ParseException {
    List<Node> body = new LinkedList<Node>();
    List<Node> decl = null;
    jj_consume_token(SEMICOLON);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case LESS:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_18;
      }
      decl = classBodyDeclaration();
           body.addAll(decl);
    }
      {if (true) return body;}
    throw new Error("Missing return statement in function");
  }

  // Productions for Arrays ////////////////////////////////////////////////////////

  /**
   * Parses an array initializer
   * @see koala.dynamicjava.tree.ArrayInitializer
   */
  final public ArrayInitializer arrayInitializer() throws ParseException {
    Expression init;
    Token      t = null, b, e;
    List<Expression> list = new LinkedList<Expression>();
    b = jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LESS:
    case BANG:
    case TILDE:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
      init = variableInitializer();
      list.add(init);
      label_19:
      while (true) {
        if (jj_2_33(2)) {
          ;
        } else {
          break label_19;
        }
        jj_consume_token(COMMA);
        init = variableInitializer();
             list.add(init);
      }
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      t = jj_consume_token(COMMA);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    e = jj_consume_token(RBRACE);
             {if (true) return new ArrayInitializer(list,
                                         filename,
                                         b.beginLine, b.beginColumn,
                                         e.endLine,   e.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a variable initializer (ie. an expression or an array initializer)
   * @see koala.dynamicjava.tree.Expression
   */
  final public Expression variableInitializer() throws ParseException {
    Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      exp = arrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LESS:
    case BANG:
    case TILDE:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
      exp = expression();
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  // Productions for Blocks And Statements ////////////////////////////////////////////

  /**
   * Parses a block
   * @see koala.dynamicjava.tree.BlockStatement
   */
  final public BlockStatement block() throws ParseException {
    Token p1;
    Token p2;
    List<Node> nodes;
    List<Node> list = new LinkedList<Node>();
    try {
      p1 = jj_consume_token(LBRACE);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case ENUM:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case LESS:
        case INCREMENT:
        case DECREMENT:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_20;
        }
        nodes = blockStatement();
        list.addAll(nodes);
      }
      p2 = jj_consume_token(RBRACE);
        {if (true) return new BlockStatement(list,
                                  filename,
                                  p1.beginLine, p1.beginColumn,
                                  p2.endLine,   p2.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid block statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses one block statement.
   * @return a list of node because one variable declaration can
   *         contain multiple declarations.
   * @see koala.dynamicjava.tree.Node
   */
  final public List<Node> blockStatement() throws ParseException {
    Node node = null;
    List<Node> list = new LinkedList<Node>();
    try {
      if (jj_2_34(2147483647)) {
        list = localVariableDeclaration();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case LESS:
        case INCREMENT:
        case DECREMENT:
          node = statement();
        list.add(node);
          break;
        case CLASS:
          node = unmodifiedClassDeclaration(null);
         list.add(node);
          break;
        case ENUM:
          node = unmodifiedEnumDeclaration(null);
         list.add(node);
          break;
        case INTERFACE:
          node = unmodifiedInterfaceDeclaration(null);
         list.add(node);
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
         {if (true) return list;}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid block statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses one variable declaration
   * @return a list of node because one variable declaration can
   *         contain multiple declarations.
   * @see koala.dynamicjava.tree.VariableDeclaration
   */
  final public List<Node> localVariableDeclaration() throws ParseException {
    Token      t    = null;
    Expression init = null;
    Type       typ;
    Token      id;
    int        dim  = 0;
    List<Node>       list = new LinkedList<Node>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      t = jj_consume_token(FINAL);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    typ = type();
    id = jj_consume_token(IDENTIFIER);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_21;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                             dim++;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      init = variableInitializer();
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
        list.add(createVariableDeclaration(t, typ, id, init, dim));
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_22;
      }
          init = null; dim = 0;
      jj_consume_token(COMMA);
      id = jj_consume_token(IDENTIFIER);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_23;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                        dim++;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        init = variableInitializer();
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
         list.add(createVariableDeclaration(t, typ, id, init, dim));
    }
         {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses one statement
   * @see koala.dynamicjava.tree.Node
   */
  final public Node statement() throws ParseException {
    Node node = null;
    if (jj_2_35(2)) {
      node = labeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        node = block();
        break;
      case SEMICOLON:
        node = emptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LESS:
      case INCREMENT:
      case DECREMENT:
        node = statementExpression();
        jj_consume_token(SEMICOLON);
        break;
      case IF:
        node = ifStatement();
        break;
      case ASSERT:
        node = assertStatement();
        break;
      case WHILE:
        node = whileStatement();
        break;
      case DO:
        node = doStatement();
        break;
      case SWITCH:
        node = switchStatement();
        break;
      case FOR:
        node = forStatement();
        break;
      case BREAK:
        node = breakStatement();
        break;
      case CONTINUE:
        node = continueStatement();
        break;
      case RETURN:
        node = returnStatement();
        break;
      case THROW:
        node = throwStatement();
        break;
      case SYNCHRONIZED:
        node = synchronizedStatement();
        break;
      case TRY:
        node = tryStatement();
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a labeled statement
   * @see koala.dynamicjava.tree.ContinueTarget
   * @see koala.dynamicjava.tree.LabeledStatement
   */
  final public Statement labeledStatement() throws ParseException {
    Token id;
    Node  node;
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    node = statement();
      if (node instanceof ContinueTarget) {
        ((ContinueTarget)node).addLabel(id.image);
        {if (true) return (Statement)node;}
      } else {
        {if (true) return new LabeledStatement(id.image, node,
                                    filename,
                                    id.beginLine,      id.beginColumn,
                                    node.getEndLine(), node.getEndColumn());}
      }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses an empty statement
   * @see koala.dynamicjava.tree.EmptyStatement
   */
  final public EmptyStatement emptyStatement() throws ParseException {
    Token t;
    t = jj_consume_token(SEMICOLON);
      {if (true) return new EmptyStatement(filename, t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses an if statement
   * @see koala.dynamicjava.tree.IfThenStatement
   * @see koala.dynamicjava.tree.IfThenElseStatement
   */
  final public Statement ifStatement() throws ParseException {
    Token t;
    Expression exp;
    Node       stat1;
    Node       stat2 = null;
    try {
      t = jj_consume_token(IF);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      default:
        jj_la1[65] = jj_gen;
        _errorChar('(');
      }
      exp = expression();
      jj_consume_token(RPAREN);
      stat1 = statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        stat2 = statement();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
        if (stat2 == null) {
          {if (true) return new IfThenStatement(exp, stat1,
                                     filename,
                                     t.beginLine,       t.beginColumn,
                                     stat1.getEndLine(), stat1.getEndColumn());}
        } else {
          {if (true) return new IfThenElseStatement(exp, stat1, stat2,
                                         filename,
                                         t.beginLine,       t.beginColumn,
                                         stat2.getEndLine(), stat2.getEndColumn());}
        }
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid if statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses an assert statement
   * @see koala.dynamicjava.tree.AssertStatement
   */
  final public AssertStatement assertStatement() throws ParseException {
    Token t, t2;
    Expression exp, falseString = null;
    try {
      t = jj_consume_token(ASSERT);
      exp = expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        falseString = expression();
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        t2 = jj_consume_token(SEMICOLON);
        break;
      case 0:
        t2 = jj_consume_token(0);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return new AssertStatement(exp, falseString, filename,
                                   t.beginLine,      t.beginColumn,
                                   t2.endLine, t2.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid assert statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a while statement
   * @see koala.dynamicjava.tree.WhileStatement
   */
  final public WhileStatement whileStatement() throws ParseException {
    Token      t;
    Expression exp;
    Node       stat;
    try {
      t = jj_consume_token(WHILE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      default:
        jj_la1[69] = jj_gen;
        _errorChar('(');
      }
      exp = expression();
      jj_consume_token(RPAREN);
      stat = statement();
        {if (true) return new WhileStatement(exp, stat,
                                  filename,
                                  t.beginLine,       t.beginColumn,
                                  stat.getEndLine(), stat.getEndColumn());}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid while statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a do statement
   * @see koala.dynamicjava.tree.DoStatement
   */
  final public DoStatement doStatement() throws ParseException {
    Token      t1, t2;
    Expression exp;
    Node       stat;
    try {
      t1 = jj_consume_token(DO);
      stat = statement();
      jj_consume_token(WHILE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      default:
        jj_la1[70] = jj_gen;
        _errorChar('(');
      }
      exp = expression();
      jj_consume_token(RPAREN);
      t2 = jj_consume_token(SEMICOLON);
        {if (true) return new DoStatement(exp, stat,
                               filename,
                               t1.beginLine, t1.beginColumn,
                               t2.endLine,   t2.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid do statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a switch statement
   * @see koala.dynamicjava.tree.SwitchStatement
   */
  final public SwitchStatement switchStatement() throws ParseException {
    Token      b, e;
    Expression sel;
    Expression val         = null;
    List<Node>        stat        = null;
    List<SwitchBlock> cases       = new LinkedList<SwitchBlock>();
    List<Node>       list        = new LinkedList<Node>();
    Token      t           = null;
    try {
      b = jj_consume_token(SWITCH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      default:
        jj_la1[71] = jj_gen;
        _errorChar('(');
      }
      sel = expression();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        break;
      default:
        jj_la1[72] = jj_gen;
        _errorChar('{');
      }
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          jj_consume_token(CASE);
          val = expression();
          break;
        case _DEFAULT:
          t = jj_consume_token(_DEFAULT);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          break;
        default:
          jj_la1[75] = jj_gen;
          _errorChar(':');
        }
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSERT:
          case BOOLEAN:
          case BREAK:
          case BYTE:
          case CHAR:
          case CLASS:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case ENUM:
          case FALSE:
          case FINAL:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case INTERFACE:
          case LONG:
          case NEW:
          case NULL:
          case RETURN:
          case SHORT:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRUE:
          case TRY:
          case VOID:
          case WHILE:
          case INTEGER_LITERAL:
          case LONG_LITERAL:
          case FLOAT_LITERAL:
          case DOUBLE_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case LESS:
          case INCREMENT:
          case DECREMENT:
            ;
            break;
          default:
            jj_la1[76] = jj_gen;
            break label_25;
          }
          stat = blockStatement();
        list.addAll(stat);
        }
        int bl, bc, el, ec;
        if (t != null) {
          bl = t.beginLine;
          bc = t.beginColumn;
          el = t.endLine;
          ec = t.endColumn;
        } else {
          bl = val.getBeginLine();
          bc = val.getBeginColumn();
          el = val.getEndLine();
          ec = val.getEndColumn();
        }

        if (list.size() != 0) {
          Node n = (Node)list.get(list.size() - 1);
          el = n.getEndLine();
          ec = n.getEndColumn();
        }

        cases.add(new SwitchBlock(val, (list.size() != 0) ? list : null,
                                  filename,
                                  bl, bc, el, ec));
        val = null;
        t   = null;
        if (list.size() != 0) {
          list = new LinkedList<Node>();
        }
      }
      e = jj_consume_token(RBRACE);
        {if (true) return new SwitchStatement(sel, cases,
                                   filename,
                                   b.beginLine, b.beginColumn,
                                   e.endLine,   e.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid switch statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a for statement (with standard or foreach syntax)
   * @see koala.dynamicjava.tree.ForStatement
   * Modified by Adam Wulf and David Peters
   * March 2004: Dr. Java team.
   * @see koala.dynamicjava.tree.ForSlashEachStatement
   * @see koala.dynamicjava.tree.ForEachStatement
   */
  final public ForSlashEachStatement forStatement() throws ParseException {
    Token      t;
    FormalParameter forEachInit = null;
    List<Node>       init   = null;
    Expression exp    = null;
    List<Node>       update = null;
    Node       stmt;
    Token      colon  = null;
    try {
      t = jj_consume_token(FOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      default:
        jj_la1[77] = jj_gen;
        _errorChar('(');
      }
      if (jj_2_36(2147483647)) {
        forEachInit = formalParameter();
        colon = jj_consume_token(COLON);
        exp = expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case SEMICOLON:
        case LESS:
        case INCREMENT:
        case DECREMENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case LONG_LITERAL:
          case FLOAT_LITERAL:
          case DOUBLE_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LESS:
          case INCREMENT:
          case DECREMENT:
            init = forInit();
            break;
          default:
            jj_la1[78] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case LONG_LITERAL:
          case FLOAT_LITERAL:
          case DOUBLE_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LESS:
          case BANG:
          case TILDE:
          case INCREMENT:
          case DECREMENT:
          case PLUS:
          case MINUS:
            exp = expression();
            break;
          default:
            jj_la1[79] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case LONG_LITERAL:
          case FLOAT_LITERAL:
          case DOUBLE_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LESS:
          case INCREMENT:
          case DECREMENT:
            update = statementExpressionList();
            break;
          default:
            jj_la1[80] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      stmt = statement();
        if(colon != null){
          {if (true) return new ForEachStatement(forEachInit, exp, stmt,
                                      filename,
                                      t.beginLine, t.beginColumn,
                                      stmt.getEndLine(), stmt.getEndColumn());}
        }else{
          {if (true) return new ForStatement(init, exp, update, stmt,
                                  filename,
                                  t.beginLine, t.beginColumn,
                                  stmt.getEndLine(), stmt.getEndColumn());}

        }
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid for statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse a 'for' statement
   */
  final public List<Node> forInit() throws ParseException {
    List<Node> list;
    if (jj_2_37(2147483647)) {
      list = localVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LESS:
      case INCREMENT:
      case DECREMENT:
        list = statementExpressionList();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a comma separated list of expression
   */
  final public List<Node> statementExpressionList() throws ParseException {
    List<Node> list = new LinkedList<Node>();
    Node node;
    node = statementExpression();
      list.add(node);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
      node = statementExpression();
      list.add(node);
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a break statement
   * @see koala.dynamicjava.tree.BreakStatement
   */
  final public BreakStatement breakStatement() throws ParseException {
    Token b, e;
    Token id = null;
    try {
      b = jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      e = jj_consume_token(SEMICOLON);
        {if (true) return new BreakStatement((id != null) ? id.image : null,
                                  filename,
                                  b.beginLine, b.beginColumn,
                                  e.endLine,   e.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid break statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a continue statement
   * @see koala.dynamicjava.tree.ContinueStatement
   */
  final public ContinueStatement continueStatement() throws ParseException {
    Token b, e;
    Token id = null;
    try {
      b = jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      e = jj_consume_token(SEMICOLON);
        {if (true) return new ContinueStatement((id != null) ? id.image : null,
                                     filename,
                                     b.beginLine, b.beginColumn,
                                     e.endLine,   e.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid continue statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a return statement
   * @see koala.dynamicjava.tree.ReturnStatement
   */
  final public ReturnStatement returnStatement() throws ParseException {
    Token b, e;
    Expression exp = null;
    try {
      b = jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LESS:
      case BANG:
      case TILDE:
      case INCREMENT:
      case DECREMENT:
      case PLUS:
      case MINUS:
        exp = expression();
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      e = jj_consume_token(SEMICOLON);
        {if (true) return new ReturnStatement(exp,
                                   filename,
                                   b.beginLine, b.beginColumn,
                                   e.endLine,   e.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid return statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a throw statement
   * @see koala.dynamicjava.tree.ThrowStatement
   */
  final public ThrowStatement throwStatement() throws ParseException {
    Token b, e;
    Expression exp;
    try {
      b = jj_consume_token(THROW);
      exp = expression();
      e = jj_consume_token(SEMICOLON);
        {if (true) return new ThrowStatement(exp,
                                  filename,
                                  b.beginLine, b.beginColumn,
                                  e.endLine,   e.endColumn);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid throw statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a synchronized statement
   * @see koala.dynamicjava.tree.SynchronizedStatement
   */
  final public SynchronizedStatement synchronizedStatement() throws ParseException {
    Token      t;
    Expression exp;
    Node       stmt;
    try {
      t = jj_consume_token(SYNCHRONIZED);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      default:
        jj_la1[87] = jj_gen;
        _errorChar('(');
      }
      exp = expression();
      jj_consume_token(RPAREN);
      stmt = block();
        {if (true) return new SynchronizedStatement(exp, stmt,
                                         filename,
                                         t.beginLine, t.beginColumn,
                                         stmt.getEndLine(), stmt.getEndColumn());}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid synchronized statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses a try statement
   * @see koala.dynamicjava.tree.TryStatement
   */
  final public TryStatement tryStatement() throws ParseException {
    Token           t, u;
    Node            tryBlock;
    Node            catchBlock;
    List<CatchStatement>      catches = new LinkedList<CatchStatement>();
    FormalParameter formal;
    Node            finallyBlock = null;
    int             el = 0, ec = 0;
    try {
      t = jj_consume_token(TRY);
      tryBlock = block();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_27;
        }
        u = jj_consume_token(CATCH);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        default:
          jj_la1[89] = jj_gen;
          _errorChar('(');
        }
        formal = formalParameter();
        jj_consume_token(RPAREN);
        catchBlock = block();
        el = catchBlock.getEndLine();
        ec = catchBlock.getEndColumn();
        catches.add(new CatchStatement(formal, catchBlock,
                                       filename,
                                       u.beginLine, u.beginColumn,
                                       el, ec));
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        finallyBlock = block();
        el = finallyBlock.getEndLine();
        ec = finallyBlock.getEndColumn();
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
           if (finallyBlock == null && catches.size() == 0) {
             {if (true) throw new ParseError(reader.getMessage("try.without.catch", null),
                                  filename,
                                  t.beginLine, t.beginColumn);}
           }
           {if (true) return new TryStatement(tryBlock, catches, finallyBlock,
                                   filename,
                                   t.beginLine, t.beginColumn,
                                   el, ec);}
    } catch (ParseException pe) {
      _throwParseException(pe,"Invalid try statement");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Parses one statement expression
   * @see koala.dynamicjava.tree.Expression
   */
  final public Node statementExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    Expression exp3 = null;
    Token      t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
      exp = preIncrementExpression();
      break;
    case DECREMENT:
      exp = preDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LESS:
      exp = primaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCREMENT:
      case DECREMENT:
      case PLUS_ASSIGN:
      case MINUS_ASSIGN:
      case STAR_ASSIGN:
      case SLASH_ASSIGN:
      case AND_ASSIGN:
      case OR_ASSIGN:
      case XOR_ASSIGN:
      case REMAINDER_ASSIGN:
      case LEFT_SHIFT_ASSIGN:
      case RIGHT_SIGNED_SHIFT_ASSIGN:
      case RIGHT_UNSIGNED_SHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCREMENT:
          t = jj_consume_token(INCREMENT);
      exp = new PostIncrement(exp,
                              filename,
                              exp.getBeginLine(), exp.getBeginColumn(),
                              t.endLine,          t.endColumn);
          break;
        case DECREMENT:
          t = jj_consume_token(DECREMENT);
          exp = new PostDecrement(exp,
                                  filename,
                                  exp.getBeginLine(), exp.getBeginColumn(),
                                  t.endLine,          t.endColumn);
          break;
        case ASSIGN:
        case PLUS_ASSIGN:
        case MINUS_ASSIGN:
        case STAR_ASSIGN:
        case SLASH_ASSIGN:
        case AND_ASSIGN:
        case OR_ASSIGN:
        case XOR_ASSIGN:
        case REMAINDER_ASSIGN:
        case LEFT_SHIFT_ASSIGN:
        case RIGHT_SIGNED_SHIFT_ASSIGN:
        case RIGHT_UNSIGNED_SHIFTASSIGN:
          exp = expressionSuffix(exp);
          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if (exp instanceof ExpressionStatement) {
            {if (true) return exp;}
          } else {
            {if (true) throw new ParseError(reader.getMessage("expression.statement", null),
                                 filename,
                                 exp.getBeginLine(), exp.getBeginColumn());}
          }
    throw new Error("Missing return statement in function");
  }

  // Productions for Statements /////////////////////////////////////////////////////////

  /**
   * Parses an expression
   * @see koala.dynamicjava.tree.Expression
   */
  final public Expression expression() throws ParseException {
    Expression exp;
    exp = conditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUS_ASSIGN:
    case MINUS_ASSIGN:
    case STAR_ASSIGN:
    case SLASH_ASSIGN:
    case AND_ASSIGN:
    case OR_ASSIGN:
    case XOR_ASSIGN:
    case REMAINDER_ASSIGN:
    case LEFT_SHIFT_ASSIGN:
    case RIGHT_SIGNED_SHIFT_ASSIGN:
    case RIGHT_UNSIGNED_SHIFTASSIGN:
      exp = expressionSuffix(exp);
      break;
    default:
      jj_la1[94] = jj_gen;
      ;
    }
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression expressionSuffix(Expression pre) throws ParseException {
    Expression exp2;
    Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      exp2 = expression();
      exp = new SimpleAssignExpression(pre, exp2,
                                       filename,
                                       pre.getBeginLine(), pre.getBeginColumn(),
                                       exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case STAR_ASSIGN:
      jj_consume_token(STAR_ASSIGN);
      exp2 = expression();
       exp = new MultiplyAssignExpression(pre, exp2,
                                          filename,
                                          pre.getBeginLine(), pre.getBeginColumn(),
                                          exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case SLASH_ASSIGN:
      jj_consume_token(SLASH_ASSIGN);
      exp2 = expression();
       exp = new DivideAssignExpression(pre, exp2,
                                        filename,
                                        pre.getBeginLine(), pre.getBeginColumn(),
                                        exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case REMAINDER_ASSIGN:
      jj_consume_token(REMAINDER_ASSIGN);
      exp2 = expression();
       exp = new RemainderAssignExpression(pre, exp2,
                                           filename,
                                           pre.getBeginLine(), pre.getBeginColumn(),
                                           exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case PLUS_ASSIGN:
      jj_consume_token(PLUS_ASSIGN);
      exp2 = expression();
       exp = new AddAssignExpression(pre, exp2,
                                     filename,
                                     pre.getBeginLine(), pre.getBeginColumn(),
                                     exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case MINUS_ASSIGN:
      jj_consume_token(MINUS_ASSIGN);
      exp2 = expression();
       exp = new SubtractAssignExpression(pre, exp2,
                                          filename,
                                          pre.getBeginLine(), pre.getBeginColumn(),
                                          exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case LEFT_SHIFT_ASSIGN:
      jj_consume_token(LEFT_SHIFT_ASSIGN);
      exp2 = expression();
       exp = new ShiftLeftAssignExpression(pre, exp2,
                                           filename,
                                           pre.getBeginLine(), pre.getBeginColumn(),
                                           exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case RIGHT_SIGNED_SHIFT_ASSIGN:
      jj_consume_token(RIGHT_SIGNED_SHIFT_ASSIGN);
      exp2 = expression();
       exp = new ShiftRightAssignExpression
         (pre, exp2,
          filename,
          pre.getBeginLine(), pre.getBeginColumn(),
          exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case RIGHT_UNSIGNED_SHIFTASSIGN:
      jj_consume_token(RIGHT_UNSIGNED_SHIFTASSIGN);
      exp2 = expression();
       exp = new UnsignedShiftRightAssignExpression
         (pre, exp2,
          filename,
          pre.getBeginLine(), pre.getBeginColumn(),
          exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case AND_ASSIGN:
      jj_consume_token(AND_ASSIGN);
      exp2 = expression();
       exp = new BitAndAssignExpression(pre, exp2,
                                        filename,
                                        pre.getBeginLine(), pre.getBeginColumn(),
                                        exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case XOR_ASSIGN:
      jj_consume_token(XOR_ASSIGN);
      exp2 = expression();
       exp = new ExclusiveOrAssignExpression(pre, exp2,
                                             filename,
                                             pre.getBeginLine(), pre.getBeginColumn(),
                                             exp2.getEndLine(),  exp2.getEndColumn());
      break;
    case OR_ASSIGN:
      jj_consume_token(OR_ASSIGN);
      exp2 = expression();
       exp = new BitOrAssignExpression(pre, exp2,
                                       filename,
                                       pre.getBeginLine(), pre.getBeginColumn(),
                                       exp2.getEndLine(),  exp2.getEndColumn());
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       if (!(pre instanceof LeftHandSide)) {
         {if (true) throw new ParseError(reader.getMessage("left.expression.in.assignment",
                                                null),
                              filename,
                              pre.getBeginLine(), pre.getBeginColumn());}
       }
       {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression conditionalExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    Expression exp3;
    exp = conditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      exp2 = expression();
      jj_consume_token(COLON);
      exp3 = conditionalExpression();
      exp = new ConditionalExpression(exp, exp2, exp3,
                                      filename,
                                      exp.getBeginLine(), exp.getBeginColumn(),
                                      exp3.getEndLine(),  exp3.getEndColumn());
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression conditionalOrExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = conditionalAndExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITIONAL_OR:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_28;
      }
      jj_consume_token(CONDITIONAL_OR);
      exp2 = conditionalAndExpression();
      exp = new OrExpression(exp, exp2,
                             filename,
                             exp.getBeginLine(), exp.getBeginColumn(),
                             exp2.getEndLine(),  exp2.getEndColumn());
    }
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression conditionalAndExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = inclusiveOrExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITIONAL_AND:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_29;
      }
      jj_consume_token(CONDITIONAL_AND);
      exp2 = inclusiveOrExpression();
      exp = new AndExpression(exp, exp2,
                              filename,
                              exp.getBeginLine(), exp.getBeginColumn(),
                              exp2.getEndLine(),  exp2.getEndColumn());
    }
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression inclusiveOrExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = exclusiveOrExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BITWISE_OR:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_30;
      }
      jj_consume_token(BITWISE_OR);
      exp2 = exclusiveOrExpression();
      exp = new BitOrExpression(exp, exp2,
                                filename,
                                exp.getBeginLine(), exp.getBeginColumn(),
                                exp2.getEndLine(),  exp2.getEndColumn());
    }
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression exclusiveOrExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = andExpression();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_31;
      }
      jj_consume_token(XOR);
      exp2 = andExpression();
      exp = new ExclusiveOrExpression(exp, exp2,
                                      filename,
                                      exp.getBeginLine(), exp.getBeginColumn(),
                                      exp2.getEndLine(),  exp2.getEndColumn());
    }
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression andExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = equalityExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BITWISE_AND:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_32;
      }
      jj_consume_token(BITWISE_AND);
      exp2 = equalityExpression();
      exp = new BitAndExpression(exp, exp2,
                                 filename,
                                 exp.getBeginLine(), exp.getBeginColumn(),
                                 exp2.getEndLine(),  exp2.getEndColumn());
    }
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression equalityExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = instanceOfExpression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOT_EQUAL:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        exp2 = instanceOfExpression();
      exp = new EqualExpression(exp, exp2,
                                filename,
                                exp.getBeginLine(), exp.getBeginColumn(),
                                exp2.getEndLine(),  exp2.getEndColumn());
        break;
      case NOT_EQUAL:
        jj_consume_token(NOT_EQUAL);
        exp2 = instanceOfExpression();
         exp = new NotEqualExpression(exp, exp2,
                                      filename,
                                      exp.getBeginLine(), exp.getBeginColumn(),
                                      exp2.getEndLine(),  exp2.getEndColumn());
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression instanceOfExpression() throws ParseException {
    Expression exp;
    Type       typ = null;
    exp = relationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      typ = type();
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
      if (typ != null) {
        {if (true) return new InstanceOfExpression(exp, typ,
                                        filename,
                                        exp.getBeginLine(), exp.getBeginColumn(),
                                        typ.getEndLine(),   typ.getEndColumn());}
      } else {
        {if (true) return exp;}
      }
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression relationalExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = shiftExpression();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER_THAN:
      case LESS:
      case LESS_OR_EQUAL:
      case GREATER_OR_EQUAL:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        jj_consume_token(LESS);
        exp2 = shiftExpression();
      exp = new LessExpression(exp, exp2,
                               filename,
                               exp.getBeginLine(), exp.getBeginColumn(),
                               exp2.getEndLine(),  exp2.getEndColumn());
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        exp2 = shiftExpression();
         exp = new GreaterExpression(exp, exp2,
                                     filename,
                                     exp.getBeginLine(), exp.getBeginColumn(),
                                     exp2.getEndLine(),  exp2.getEndColumn());
        break;
      case LESS_OR_EQUAL:
        jj_consume_token(LESS_OR_EQUAL);
        exp2 = shiftExpression();
         exp = new LessOrEqualExpression(exp, exp2,
                                         filename,
                                         exp.getBeginLine(), exp.getBeginColumn(),
                                         exp2.getEndLine(),  exp2.getEndColumn());
        break;
      case GREATER_OR_EQUAL:
        jj_consume_token(GREATER_OR_EQUAL);
        exp2 = shiftExpression();
         exp = new GreaterOrEqualExpression(exp, exp2,
                                            filename,
                                            exp.getBeginLine(), exp.getBeginColumn(),
                                            exp2.getEndLine(),  exp2.getEndColumn());
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression shiftExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = additiveExpression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SHIFT:
      case RSSHIFT1:
      case RUSHIFT1:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SHIFT:
        jj_consume_token(LEFT_SHIFT);
        exp2 = additiveExpression();
      exp = new ShiftLeftExpression(exp, exp2,
                                    filename,
                                    exp.getBeginLine(), exp.getBeginColumn(),
                                    exp2.getEndLine(),  exp2.getEndColumn());
        break;
      case RSSHIFT1:
        jj_consume_token(RSSHIFT1);
        jj_consume_token(RSSHIFT2);
        exp2 = additiveExpression();
         exp = new ShiftRightExpression(exp, exp2,
                                        filename,
                                        exp.getBeginLine(), exp.getBeginColumn(),
                                        exp2.getEndLine(),  exp2.getEndColumn());
        break;
      case RUSHIFT1:
        jj_consume_token(RUSHIFT1);
        jj_consume_token(RUSHIFT2);
        jj_consume_token(RUSHIFT3);
        exp2 = additiveExpression();
         exp = new UnsignedShiftRightExpression
           (exp, exp2,
            filename,
            exp.getBeginLine(), exp.getBeginColumn(),
            exp2.getEndLine(),  exp2.getEndColumn());
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression additiveExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = multiplicativeExpression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_36;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        exp2 = multiplicativeExpression();
      exp = new AddExpression(exp, exp2,
                              filename,
                              exp.getBeginLine(), exp.getBeginColumn(),
                              exp2.getEndLine(),  exp2.getEndColumn());
        break;
      case MINUS:
        jj_consume_token(MINUS);
        exp2 = multiplicativeExpression();
         exp = new SubtractExpression(exp, exp2,
                                      filename,
                                      exp.getBeginLine(), exp.getBeginColumn(),
                                      exp2.getEndLine(),  exp2.getEndColumn());
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression multiplicativeExpression() throws ParseException {
    Expression exp;
    Expression exp2;
    exp = unaryExpression();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REMAINDER:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_37;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        exp2 = unaryExpression();
      exp = new MultiplyExpression(exp, exp2,
                                   filename,
                                   exp.getBeginLine(), exp.getBeginColumn(),
                                   exp2.getEndLine(),  exp2.getEndColumn());
        break;
      case SLASH:
        jj_consume_token(SLASH);
        exp2 = unaryExpression();
         exp = new DivideExpression(exp, exp2,
                                    filename,
                                    exp.getBeginLine(), exp.getBeginColumn(),
                                    exp2.getEndLine(),  exp2.getEndColumn());
        break;
      case REMAINDER:
        jj_consume_token(REMAINDER);
        exp2 = unaryExpression();
         exp = new RemainderExpression(exp, exp2,
                                       filename,
                                       exp.getBeginLine(), exp.getBeginColumn(),
                                       exp2.getEndLine(),  exp2.getEndColumn());
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression unaryExpression() throws ParseException {
    Expression exp = null;
    Token      t,tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      exp = unaryExpression();
      {if (true) return new PlusExpression(exp,
                                filename,
                                t.beginLine,      t.beginColumn,
                                exp.getEndLine(), exp.getEndColumn());}
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        tk = jj_consume_token(INTEGER_LITERAL);
                                             {if (true) return new IntegerLiteral("-"+tk.image,
                                  filename,
                                  t.beginLine, t.beginColumn,
                                                           tk.endLine,   tk.endColumn);}
        break;
      case LONG_LITERAL:
        tk = jj_consume_token(LONG_LITERAL);
              if(tk.image.endsWith("L")) tk.image=tk.image.substring(0,tk.image.length()-1);
              {if (true) return new LongLiteral("-"+tk.image, filename, t.beginLine, t.beginColumn,
                                                   tk.endLine,   tk.endColumn);}
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LESS:
      case BANG:
      case TILDE:
      case INCREMENT:
      case DECREMENT:
      case PLUS:
      case MINUS:
        exp = unaryExpression();
               {if (true) return new MinusExpression(exp, filename,
                                          t.beginLine,      t.beginColumn,
                                          exp.getEndLine(), exp.getEndColumn());}
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case INCREMENT:
      exp = preIncrementExpression();
      break;
    case DECREMENT:
      exp = preDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LESS:
    case BANG:
    case TILDE:
      exp = unaryExpressionNotPlusMinus();
      break;
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression unaryExpressionNotPlusMinus() throws ParseException {
    Expression exp;
    Token      t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      t = jj_consume_token(TILDE);
      exp = unaryExpression();
      {if (true) return new ComplementExpression(exp,
                                      filename,
                                      t.beginLine,      t.beginColumn,
                                      exp.getEndLine(), exp.getEndColumn());}
      break;
    case BANG:
      t = jj_consume_token(BANG);
      exp = unaryExpression();
       {if (true) return new NotExpression(exp,
                                filename,
                                t.beginLine,      t.beginColumn,
                                exp.getEndLine(), exp.getEndColumn());}
      break;
    default:
      jj_la1[115] = jj_gen;
      if (jj_2_38(2147483647)) {
        exp = castExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LESS:
          exp = postfixExpression();
          break;
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
       {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression castExpression() throws ParseException {
    Type       typ;
    Token      t;
    Expression exp;
    if (jj_2_39(2147483647)) {
      t = jj_consume_token(LPAREN);
      typ = type();
      jj_consume_token(RPAREN);
      exp = unaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        t = jj_consume_token(LPAREN);
        typ = type();
        jj_consume_token(RPAREN);
        exp = unaryExpressionNotPlusMinus();
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return new CastExpression(typ, exp,
                                filename,
                                t.beginLine, t.beginColumn,
                                exp.getEndLine(), exp.getEndColumn());}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression preIncrementExpression() throws ParseException {
    Expression pe;
    Token      t;
    t = jj_consume_token(INCREMENT);
    pe = primaryExpression();
      {if (true) return new PreIncrement(pe,
                              filename,
                              pe.getBeginLine(), pe.getBeginColumn(),
                              t.endLine,         t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression preDecrementExpression() throws ParseException {
    Expression pe;
    Token      t;
    t = jj_consume_token(DECREMENT);
    pe = primaryExpression();
      {if (true) return new PreDecrement(pe,
                              filename,
                              pe.getBeginLine(), pe.getBeginColumn(),
                              t.endLine,         t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression postfixExpression() throws ParseException {
    Expression pe;
    Token      t;
    pe = primaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
    case DECREMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENT:
        t = jj_consume_token(INCREMENT);
      {if (true) return new PostIncrement(pe,
                               filename,
                               pe.getBeginLine(), pe.getBeginColumn(),
                               t.endLine,         t.endColumn);}
        break;
      case DECREMENT:
        t = jj_consume_token(DECREMENT);
         {if (true) return new PostDecrement(pe,
                                  filename,
                                  pe.getBeginLine(), pe.getBeginColumn(),
                                  t.endLine,         t.endColumn);}
        break;
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
         {if (true) return pe;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression primaryExpression() throws ParseException {
    Expression       pp;
    ExpressionSuffix es;
    List<ExpressionSuffix> list = new LinkedList<ExpressionSuffix>();
    List<Type> typeArgs = new LinkedList<Type>();
    if (jj_2_40(2147483647)) {
      typeArgs = TypeArguments();
    } else {
      ;
    }
    pp = primaryPrefix();
    label_38:
    while (true) {
      if (jj_2_41(2)) {
        ;
      } else {
        break label_38;
      }
      es = primarySuffix(typeArgs);
      // Build the list of suffixes in reverse order
      list.add(0, es);
    }
      {if (true) return createPrimaryExpression(pp, list);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression primaryPrefix() throws ParseException {
    Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      exp = literal();
      break;
    case THIS:
      exp = thisExpression();
      break;
    case SUPER:
      exp = superExpression();
      break;
    case NEW:
      exp = allocationExpression();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      exp = expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[120] = jj_gen;
      if (jj_2_42(2147483647)) {
        exp = classExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          exp = qualifiedName();
          break;
        default:
          jj_la1[121] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public ExpressionSuffix primarySuffix(List<Type> typeArgs) throws ParseException {
    ExpressionSuffix es;
    if (jj_2_43(2)) {
      es = dotThis();
    } else if (jj_2_44(2)) {
      es = dotAllocationExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        es = arrayReference();
        break;
      case DOT:
        es = dotIdentifier();
        break;
      case LPAREN:
        es = arguments(typeArgs);
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return es;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public ExpressionSuffix dotThis() throws ParseException {
    Token t;
    jj_consume_token(DOT);
    t = jj_consume_token(THIS);
      {if (true) return new DotThisSuffix(t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public ExpressionSuffix dotAllocationExpression() throws ParseException {
    Allocation a;
    jj_consume_token(DOT);
    a = simpleAllocationExpression();
      {if (true) return new DotAllocationSuffix(a);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Allocation simpleAllocationExpression() throws ParseException {
    Token           t;
    ReferenceType   rt;
    ArgumentsSuffix as;
    ClassBody       cb = null;
    List<Type> typeArgs = new LinkedList<Type>();
    t = jj_consume_token(NEW);
    if (jj_2_45(2147483647)) {
      typeArgs = TypeArguments();
    } else {
      ;
    }
    rt = ReferenceTypeName();
    as = arguments(typeArgs);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      cb = classBody();
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
      if (cb == null) {
        if(typeArgs.size() > 0)
          {if (true) return new PolymorphicSimpleAllocation(rt,
                                                 as.arguments,
                                                 typeArgs,
                                                 filename,
                                                 t.beginLine, t.beginColumn,
                                                 as.endLine, as.endColumn);}
        {if (true) return new SimpleAllocation(rt,
                                    as.arguments,
                                    filename,
                                    t.beginLine, t.beginColumn,
                                    as.endLine,  as.endColumn);}
      } else {
        if(typeArgs.size() > 0)
          {if (true) return new PolymorphicClassAllocation(rt,
                                                as.arguments,
                                                cb.list,
                                                typeArgs,
                                                filename,
                                                t.beginLine, t.beginColumn,
                                                as.endLine, as.endColumn);}
        {if (true) return new ClassAllocation(rt,
                                   as.arguments,
                                   cb.list,
                                   filename,
                                   t.beginLine, t.beginColumn,
                                   cb.endLine,  cb.endColumn);}
      }
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public ExpressionSuffix dotIdentifier() throws ParseException {
    Token id;
    jj_consume_token(DOT);
    id = jj_consume_token(IDENTIFIER);
      {if (true) return new DotIdentifierSuffix(id);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public ExpressionSuffix arrayReference() throws ParseException {
    Expression exp;
    Token      t;
    jj_consume_token(LBRACKET);
    exp = expression();
    t = jj_consume_token(RBRACKET);
      {if (true) return new ArrayReferenceSuffix(exp, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public ArgumentsSuffix arguments(List<Type> typeArgs) throws ParseException {
    List<Expression> list = null;
    Token t;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LESS:
    case BANG:
    case TILDE:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
      list = argumentList();
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    t = jj_consume_token(RPAREN);
      {if (true) return new ArgumentsSuffix(list, typeArgs, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public List<Expression> argumentList() throws ParseException {
    List<Expression> list = new LinkedList<Expression>();
    Expression exp;
    exp = expression();
      list.add(exp);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[125] = jj_gen;
        break label_39;
      }
      jj_consume_token(COMMA);
      exp = expression();
      list.add(exp);
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression literal() throws ParseException {
    Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
        // if(t.image.equals("2147483648")){t.image = "-2147483648";} // Introduced an error with int x = 2147483648


        {if (true) return new IntegerLiteral(t.image,
                                  filename,
                                  t.beginLine, t.beginColumn,
                                  t.endLine,   t.endColumn);}
        break;
      case LONG_LITERAL:
        t = jj_consume_token(LONG_LITERAL);
        if(t.image.endsWith("L")) t.image=t.image.substring(0,t.image.length()-1);
           {if (true) return new LongLiteral(t.image, filename,
                                  t.beginLine, t.beginColumn,
                                  t.endLine,   t.endColumn);}
        break;
      case FLOAT_LITERAL:
        t = jj_consume_token(FLOAT_LITERAL);
        {if (true) return new FloatLiteral(t.image,
                                filename,
                                t.beginLine, t.beginColumn,
                                t.endLine,   t.endColumn);}
        break;
      case DOUBLE_LITERAL:
        t = jj_consume_token(DOUBLE_LITERAL);
        {if (true) return new DoubleLiteral(t.image,
                                 filename,
                                 t.beginLine, t.beginColumn,
                                 t.endLine,   t.endColumn);}
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
        {if (true) return new CharacterLiteral(t.image,
                                    filename,
                                    t.beginLine, t.beginColumn,
                                    t.endLine,   t.endColumn);}
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
        {if (true) return new StringLiteral(t.image,
                                 filename,
                                 t.beginLine, t.beginColumn,
                                 t.endLine,   t.endColumn);}
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
        {if (true) return new BooleanLiteral(true,
                                  filename,
                                  t.beginLine, t.beginColumn,
                                  t.endLine,   t.endColumn);}
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        {if (true) return new BooleanLiteral(false,
                                  filename,
                                  t.beginLine, t.beginColumn,
                                  t.endLine,   t.endColumn);}
        break;
      case NULL:
        t = jj_consume_token(NULL);
        {if (true) return new NullLiteral(filename,
                               t.beginLine, t.beginColumn,
                               t.endLine,   t.endColumn);}
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
      _throwParseException(pe, "This is an illegal literal!");
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression thisExpression() throws ParseException {
    Token t;
    t = jj_consume_token(THIS);
      {if (true) return new ThisExpression(new LinkedList<IdentifierToken>(),
                                filename,
                                t.beginLine, t.beginColumn,
                                t.endLine,   t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression superExpression() throws ParseException {
    Token t;
    Token id;
    t = jj_consume_token(SUPER);
    jj_consume_token(DOT);
    id = jj_consume_token(IDENTIFIER);
      {if (true) return new CompileTimeSuperExpression(id.image,
                                            t.beginLine,  t.beginColumn,
                                            id.endLine,   id.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression qualifiedName() throws ParseException {
    List<IdentifierToken> list;
    list = name();
      {if (true) return new CompileTimeQualifiedName(list);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression classExpression() throws ParseException {
    Type  typ;
    Token t;
    typ = resultType();
    jj_consume_token(DOT);
    t = jj_consume_token(CLASS);
      {if (true) return new TypeExpression(typ,
                                filename,
                                typ.getBeginLine(), typ.getBeginColumn(),
                                t.endLine,   t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public Expression allocationExpression() throws ParseException {
    Token t;
    ArrayAllocation.TypeDescriptor td;
    Type            pt;
    ArgumentsSuffix as;
    ClassBody       cb = null;
    List<Type> typeArgs = new LinkedList<Type>();
    if (jj_2_47(2)) {
      t = jj_consume_token(NEW);
      pt = primitiveType();
      td = arrayDimsAndInits();
      {if (true) return new ArrayAllocation(pt, td,
                                 filename,
                                 t.beginLine, t.beginColumn,
                                 td.endLine,  td.endColumn);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        t = jj_consume_token(NEW);
        if (jj_2_46(2147483647)) {
          typeArgs = TypeArguments();
        } else {
          ;
        }
        pt = ReferenceTypeName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          td = arrayDimsAndInits();
       {if (true) return new ArrayAllocation(pt, td,
                                  filename,
                                  t.beginLine, t.beginColumn,
                                  td.endLine, td.endColumn);}
          break;
        case LPAREN:
          as = arguments(typeArgs);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            cb = classBody();
            break;
          default:
            jj_la1[127] = jj_gen;
            ;
          }
          if (cb == null) {
            {if (true) return new SimpleAllocation(pt, as.arguments,
                                        filename,
                                        t.beginLine, t.beginColumn,
                                        as.endLine,  as.endColumn);}
          } else {
            {if (true) return new ClassAllocation(pt, as.arguments, cb.list,
                                       filename,
                                       t.beginLine, t.beginColumn,
                                       cb.endLine,  cb.endColumn);}
          }
          break;
        default:
          jj_la1[128] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse an expression
   */
  final public ArrayAllocation.TypeDescriptor arrayDimsAndInits() throws ParseException {
    List<Expression>  dims = new LinkedList<Expression>();
    int   dim  = 0;
    Token t;
    Expression exp;
    ArrayInitializer ai;
    if (jj_2_50(2)) {
      label_40:
      while (true) {
        jj_consume_token(LBRACKET);
        exp = expression();
        t = jj_consume_token(RBRACKET);
      dims.add(exp);
        if (jj_2_48(2)) {
          ;
        } else {
          break label_40;
        }
      }
      label_41:
      while (true) {
        if (jj_2_49(2)) {
          ;
        } else {
          break label_41;
        }
        jj_consume_token(LBRACKET);
        t = jj_consume_token(RBRACKET);
      dim++;
      }
      {if (true) return new ArrayAllocation.TypeDescriptor(dims, dim+dims.size(), null,
                                                t.endLine, t.endColumn);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_42:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
       dim++;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[130] = jj_gen;
            break label_42;
          }
        }
        ai = arrayInitializer();
       {if (true) return new ArrayAllocation.TypeDescriptor
         (dims, dim, ai,
          ai.getEndLine(), ai.getEndColumn());}
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  // Productions for Types ///////////////////////////////////////////////////////////

  /**
   * Used internally to parse types
   */
  final public Type type() throws ParseException {
    int   dim = 0;
    Type  pt  = null;
    Token t   = null;
    Type rt = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      pt = primitiveType();
      break;
    case IDENTIFIER:
      rt = ReferenceTypeName();
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_43;
      }
      jj_consume_token(LBRACKET);
      t = jj_consume_token(RBRACKET);
      dim++;
    }
      if (pt != null) {
        rt = pt;
      }
      if (dim == 0) {
        {if (true) return rt;}
      } else {
        {if (true) return new ArrayType(rt, dim,
                             filename,
                             rt.getBeginLine(), rt.getBeginColumn(),
                             t.endLine,         t.endColumn);}
      }
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse types
   */
  final public Type resultType() throws ParseException {
    Type  typ;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      t = jj_consume_token(VOID);
      {if (true) return new VoidType(filename,
                          t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      typ = type();
      {if (true) return typ;}
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * Used internally to parse types
   */
  final public Type primitiveType() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      {if (true) return new BooleanType(filename,
                             t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      {if (true) return new CharType(filename,
                          t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
      break;
    case BYTE:
      t = jj_consume_token(BYTE);
      {if (true) return new ByteType(filename,
                          t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
      break;
    case SHORT:
      t = jj_consume_token(SHORT);
      {if (true) return new ShortType(filename,
                           t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
      break;
    case INT:
      t = jj_consume_token(INT);
      {if (true) return new IntType(filename,
                         t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
      break;
    case LONG:
      t = jj_consume_token(LONG);
      {if (true) return new LongType(filename,
                          t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      {if (true) return new FloatType(filename,
                           t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      {if (true) return new DoubleType(filename,
                            t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
      break;
    default:
      jj_la1[135] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  // Lookahead productions ////////////////////////////////////////////////////////

  /**
   * Looks ahead for one top level statement
   */
  final public void topLevelStatementLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      jj_consume_token(PACKAGE);
      break;
    case IMPORT:
      jj_consume_token(IMPORT);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case IF:
      jj_consume_token(IF);
      break;
    case ASSERT:
      jj_consume_token(ASSERT);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      break;
    case DO:
      jj_consume_token(DO);
      break;
    case SWITCH:
      jj_consume_token(SWITCH);
      break;
    case FOR:
      jj_consume_token(FOR);
      break;
    case BREAK:
      jj_consume_token(BREAK);
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      break;
    case THROW:
      jj_consume_token(THROW);
      break;
    case TRY:
      jj_consume_token(TRY);
      break;
    default:
      jj_la1[137] = jj_gen;
      if (jj_2_51(2)) {
        jj_consume_token(SYNCHRONIZED);
        jj_consume_token(LPAREN);
      } else if (jj_2_52(2)) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
      } else if (jj_2_53(2147483647)) {
        methodDeclarationLookahead();
      } else if (jj_2_54(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
          jj_consume_token(FINAL);
          break;
        default:
          jj_la1[136] = jj_gen;
          ;
        }
        typeLookahead();
        jj_consume_token(IDENTIFIER);
      } else if (jj_2_55(2147483647)) {
        typeDeclarationLookahead();
      } else if (jj_2_56(2147483647)) {
        expression();
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /**
   * Looks ahead for a type declatarion
   */
  final public void typeDeclarationLookahead() throws ParseException {
    if (jj_2_57(2147483647)) {
      classDeclarationLookahead();
    } else if (jj_2_58(2147483647)) {
      enumDeclarationLookahead();
    } else if (jj_2_59(2147483647)) {
      interfaceDeclarationLookahead();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void castLookahead() throws ParseException {
    if (jj_2_60(2)) {
      jj_consume_token(LPAREN);
      primitiveTypeLookahead();
    } else if (jj_2_61(2147483647)) {
      jj_consume_token(LPAREN);
      nameLookahead();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        nameLookahead();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          literalLookahead();
          break;
        default:
          jj_la1[138] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void typeLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      primitiveTypeLookahead();
      break;
    case IDENTIFIER:
      nameLookahead();
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[141] = jj_gen;
        break label_44;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void resultTypeLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      typeLookahead();
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void nameLookahead() throws ParseException {
    jj_consume_token(IDENTIFIER);
    if (jj_2_62(2147483647)) {
      TypeArguments();
    } else {
      ;
    }
    label_45:
    while (true) {
      if (jj_2_63(2)) {
        ;
      } else {
        break label_45;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      if (jj_2_64(2147483647)) {
        TypeArguments();
      } else {
        ;
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void primitiveTypeLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void literalLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case LONG_LITERAL:
      jj_consume_token(LONG_LITERAL);
      break;
    case FLOAT_LITERAL:
      jj_consume_token(FLOAT_LITERAL);
      break;
    case DOUBLE_LITERAL:
      jj_consume_token(DOUBLE_LITERAL);
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case NULL:
      jj_consume_token(NULL);
      break;
    default:
      jj_la1[144] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void explicitConstructorInvocationLookahead() throws ParseException {
    if (jj_2_66(2147483647)) {
      jj_consume_token(THIS);
      argumentsLookahead();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        if (jj_2_65(2)) {
          primaryExpressionLookahead();
          jj_consume_token(DOT);
        } else {
          ;
        }
        jj_consume_token(SUPER);
        argumentsLookahead();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void argumentsLookahead() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
      expressionLookahead();
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[146] = jj_gen;
          break label_46;
        }
        jj_consume_token(COMMA);
        expressionLookahead();
      }
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  /**
   * Used internally for lookahead
   */
  final public void expressionLookahead() throws ParseException {
    conditionalExpressionLookahead();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUS_ASSIGN:
    case MINUS_ASSIGN:
    case STAR_ASSIGN:
    case SLASH_ASSIGN:
    case AND_ASSIGN:
    case OR_ASSIGN:
    case XOR_ASSIGN:
    case REMAINDER_ASSIGN:
    case LEFT_SHIFT_ASSIGN:
    case RIGHT_SIGNED_SHIFT_ASSIGN:
    case RIGHT_UNSIGNED_SHIFTASSIGN:
      assignmentOperatorLookahead();
      expressionLookahead();
      break;
    default:
      jj_la1[148] = jj_gen;
      ;
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void assignmentOperatorLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STAR_ASSIGN:
      jj_consume_token(STAR_ASSIGN);
      break;
    case SLASH_ASSIGN:
      jj_consume_token(SLASH_ASSIGN);
      break;
    case REMAINDER_ASSIGN:
      jj_consume_token(REMAINDER_ASSIGN);
      break;
    case PLUS_ASSIGN:
      jj_consume_token(PLUS_ASSIGN);
      break;
    case MINUS_ASSIGN:
      jj_consume_token(MINUS_ASSIGN);
      break;
    case LEFT_SHIFT_ASSIGN:
      jj_consume_token(LEFT_SHIFT_ASSIGN);
      break;
    case RIGHT_SIGNED_SHIFT_ASSIGN:
      jj_consume_token(RIGHT_SIGNED_SHIFT_ASSIGN);
      break;
    case RIGHT_UNSIGNED_SHIFTASSIGN:
      jj_consume_token(RIGHT_UNSIGNED_SHIFTASSIGN);
      break;
    case AND_ASSIGN:
      jj_consume_token(AND_ASSIGN);
      break;
    case XOR_ASSIGN:
      jj_consume_token(XOR_ASSIGN);
      break;
    case OR_ASSIGN:
      jj_consume_token(OR_ASSIGN);
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void conditionalExpressionLookahead() throws ParseException {
    conditionalOrExpressionLookahead();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      expressionLookahead();
      jj_consume_token(COLON);
      conditionalExpressionLookahead();
      break;
    default:
      jj_la1[150] = jj_gen;
      ;
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void conditionalOrExpressionLookahead() throws ParseException {
    conditionalAndExpressionLookahead();
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITIONAL_OR:
        ;
        break;
      default:
        jj_la1[151] = jj_gen;
        break label_47;
      }
      jj_consume_token(CONDITIONAL_OR);
      conditionalAndExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void conditionalAndExpressionLookahead() throws ParseException {
    inclusiveOrExpressionLookahead();
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITIONAL_AND:
        ;
        break;
      default:
        jj_la1[152] = jj_gen;
        break label_48;
      }
      jj_consume_token(CONDITIONAL_AND);
      inclusiveOrExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void inclusiveOrExpressionLookahead() throws ParseException {
    exclusiveOrExpressionLookahead();
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BITWISE_OR:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_49;
      }
      jj_consume_token(BITWISE_OR);
      exclusiveOrExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void exclusiveOrExpressionLookahead() throws ParseException {
    andExpressionLookahead();
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[154] = jj_gen;
        break label_50;
      }
      jj_consume_token(XOR);
      andExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void andExpressionLookahead() throws ParseException {
    equalityExpressionLookahead();
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BITWISE_AND:
        ;
        break;
      default:
        jj_la1[155] = jj_gen;
        break label_51;
      }
      jj_consume_token(BITWISE_AND);
      equalityExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void equalityExpressionLookahead() throws ParseException {
    instanceOfExpressionLookahead();
    label_52:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOT_EQUAL:
        ;
        break;
      default:
        jj_la1[156] = jj_gen;
        break label_52;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case NOT_EQUAL:
        jj_consume_token(NOT_EQUAL);
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      instanceOfExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void instanceOfExpressionLookahead() throws ParseException {
    relationalExpressionLookahead();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      typeLookahead();
      break;
    default:
      jj_la1[158] = jj_gen;
      ;
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void relationalExpressionLookahead() throws ParseException {
    shiftExpressionLookahead();
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER_THAN:
      case LESS:
      case LESS_OR_EQUAL:
      case GREATER_OR_EQUAL:
        ;
        break;
      default:
        jj_la1[159] = jj_gen;
        break label_53;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        jj_consume_token(LESS);
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        break;
      case LESS_OR_EQUAL:
        jj_consume_token(LESS_OR_EQUAL);
        break;
      case GREATER_OR_EQUAL:
        jj_consume_token(GREATER_OR_EQUAL);
        break;
      default:
        jj_la1[160] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      shiftExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void shiftExpressionLookahead() throws ParseException {
    additiveExpressionLookahead();
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[161] = jj_gen;
        break label_54;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SHIFT:
        jj_consume_token(LEFT_SHIFT);
        break;
      case RSIGNEDSHIFT:
        jj_consume_token(RSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFT:
        jj_consume_token(RUNSIGNEDSHIFT);
        break;
      default:
        jj_la1[162] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      additiveExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void additiveExpressionLookahead() throws ParseException {
    multiplicativeExpressionLookahead();
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[163] = jj_gen;
        break label_55;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[164] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      multiplicativeExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void multiplicativeExpressionLookahead() throws ParseException {
    unaryExpressionLookahead();
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REMAINDER:
        ;
        break;
      default:
        jj_la1[165] = jj_gen;
        break label_56;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case REMAINDER:
        jj_consume_token(REMAINDER);
        break;
      default:
        jj_la1[166] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unaryExpressionLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void unaryExpressionLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[167] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unaryExpressionLookahead();
      break;
    case INCREMENT:
      preIncrementExpressionLookahead();
      break;
    case DECREMENT:
      preDecrementExpressionLookahead();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      unaryExpressionNotPlusMinusLookahead();
      break;
    default:
      jj_la1[168] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void preIncrementExpressionLookahead() throws ParseException {
    jj_consume_token(INCREMENT);
    primaryExpressionLookahead();
  }

  /**
   * Used internally for lookahead
   */
  final public void preDecrementExpressionLookahead() throws ParseException {
    jj_consume_token(DECREMENT);
    primaryExpressionLookahead();
  }

  /**
   * Used internally for lookahead
   */
  final public void unaryExpressionNotPlusMinusLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_la1[169] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unaryExpressionLookahead();
      break;
    default:
      jj_la1[170] = jj_gen;
      if (jj_2_67(2147483647)) {
        castExpressionLookahead();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOAT_LITERAL:
        case DOUBLE_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          postfixExpressionLookahead();
          break;
        default:
          jj_la1[171] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void postfixExpressionLookahead() throws ParseException {
    primaryExpressionLookahead();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
    case DECREMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENT:
        jj_consume_token(INCREMENT);
        break;
      case DECREMENT:
        jj_consume_token(DECREMENT);
        break;
      default:
        jj_la1[172] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[173] = jj_gen;
      ;
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void castExpressionLookahead() throws ParseException {
    if (jj_2_68(2147483647)) {
      jj_consume_token(LPAREN);
      typeLookahead();
      jj_consume_token(RPAREN);
      unaryExpressionLookahead();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        typeLookahead();
        jj_consume_token(RPAREN);
        unaryExpressionNotPlusMinusLookahead();
        break;
      default:
        jj_la1[174] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void primaryExpressionLookahead() throws ParseException {
    primaryPrefixLookahead();
    label_57:
    while (true) {
      if (jj_2_69(2)) {
        ;
      } else {
        break label_57;
      }
      primarySuffixLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void primaryPrefixLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      literalLookahead();
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      expressionLookahead();
      jj_consume_token(RPAREN);
      break;
    case NEW:
      allocationExpressionLookahead();
      break;
    default:
      jj_la1[175] = jj_gen;
      if (jj_2_70(2147483647)) {
        resultTypeLookahead();
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          nameLookahead();
          break;
        default:
          jj_la1[176] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void primarySuffixLookahead() throws ParseException {
    if (jj_2_71(2)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    } else if (jj_2_72(2)) {
      jj_consume_token(DOT);
      allocationExpressionLookahead();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        expressionLookahead();
        jj_consume_token(RBRACKET);
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case LPAREN:
        argumentsLookahead();
        break;
      default:
        jj_la1[177] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void allocationExpressionLookahead() throws ParseException {
    if (jj_2_73(2)) {
      jj_consume_token(NEW);
      primitiveTypeLookahead();
      arrayDimsAndInitsLookahead();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        nameLookahead();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          arrayDimsAndInitsLookahead();
          break;
        case LPAREN:
          argumentsLookahead();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            jj_consume_token(LBRACE);
            break;
          default:
            jj_la1[178] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[179] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[180] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void initializerLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      jj_la1[181] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
  }

  /**
   * Used internally for lookahead
   */
  final public void modifiersLookahead() throws ParseException {
    label_58:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[182] = jj_gen;
        break label_58;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      default:
        jj_la1[183] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void constructorDeclarationLookahead() throws ParseException {
    modifiersLookahead();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      TypeParametersLookahead();
      break;
    default:
      jj_la1[184] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
  }

  /**
   * Used internally for lookahead
   */
  final public void methodDeclarationLookahead() throws ParseException {
    modifiersLookahead();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      TypeParametersLookahead();
      break;
    default:
      jj_la1[185] = jj_gen;
      ;
    }
    resultTypeLookahead();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
  }

  /**
   * Used internally for lookahead
   */
  final public void nameListLookahead() throws ParseException {
    nameLookahead();
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[186] = jj_gen;
        break label_59;
      }
      jj_consume_token(COMMA);
      nameLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void methodDeclaratorLookahead() throws ParseException {
    jj_consume_token(IDENTIFIER);
    formalParametersLookahead();
    label_60:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[187] = jj_gen;
        break label_60;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void formalParametersLookahead() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      formalParameterLookahead();
      label_61:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[188] = jj_gen;
          break label_61;
        }
        jj_consume_token(COMMA);
        formalParameterLookahead();
      }
      break;
    default:
      jj_la1[189] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  /**
   * Used internally for lookahead
   */
  final public void formalParameterLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      jj_la1[190] = jj_gen;
      ;
    }
    typeLookahead();
    variableDeclaratorIdLookahead();
  }

  final public void varArgsFormalParameterLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      jj_la1[191] = jj_gen;
      ;
    }
    typeLookahead();
    jj_consume_token(VAR_ARGS);
    variableDeclaratorIdLookahead();
  }

  /**
   * Used internally for lookahead
   */
  final public void fieldDeclarationLookahead() throws ParseException {
    modifiersLookahead();
    typeLookahead();
    variableDeclaratorLookahead();
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[192] = jj_gen;
        break label_62;
      }
      jj_consume_token(COMMA);
      variableDeclaratorLookahead();
    }
    jj_consume_token(SEMICOLON);
  }

  /**
   * Used internally for lookahead
   */
  final public void variableDeclaratorLookahead() throws ParseException {
    variableDeclaratorIdLookahead();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      variableInitializerLookahead();
      break;
    default:
      jj_la1[193] = jj_gen;
      ;
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void variableDeclaratorIdLookahead() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_63:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[194] = jj_gen;
        break label_63;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void localVariableDeclarationLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      jj_la1[195] = jj_gen;
      ;
    }
    typeLookahead();
    variableDeclaratorLookahead();
    label_64:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[196] = jj_gen;
        break label_64;
      }
      jj_consume_token(COMMA);
      variableDeclaratorLookahead();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void arrayDimsAndInitsLookahead() throws ParseException {
    if (jj_2_76(2)) {
      label_65:
      while (true) {
        jj_consume_token(LBRACKET);
        expressionLookahead();
        jj_consume_token(RBRACKET);
        if (jj_2_74(2)) {
          ;
        } else {
          break label_65;
        }
      }
      label_66:
      while (true) {
        if (jj_2_75(2)) {
          ;
        } else {
          break label_66;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_67:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[197] = jj_gen;
            break label_67;
          }
        }
        arrayInitializerLookahead();
        break;
      default:
        jj_la1[198] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void arrayInitializerLookahead() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
      variableInitializerLookahead();
      label_68:
      while (true) {
        if (jj_2_77(2)) {
          ;
        } else {
          break label_68;
        }
        jj_consume_token(COMMA);
        variableInitializerLookahead();
      }
      break;
    default:
      jj_la1[199] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[200] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  /**
   * Used internally for lookahead
   */
  final public void variableInitializerLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      arrayInitializerLookahead();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOAT_LITERAL:
    case DOUBLE_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
      expressionLookahead();
      break;
    default:
      jj_la1[201] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /**
   * Used internally for lookahead
   */
  final public void classDeclarationLookahead() throws ParseException {
    modifiersLookahead();
    jj_consume_token(CLASS);
  }

  /**
   * Used internally for lookahead
   */
  final public void enumDeclarationLookahead() throws ParseException {
    modifiersLookahead();
    jj_consume_token(ENUM);
  }

  /**
   * Used internally for lookahead
   */
  final public void interfaceDeclarationLookahead() throws ParseException {
    modifiersLookahead();
    jj_consume_token(INTERFACE);
  }

  /* Additions to DynamicJava grammar to parse Generics */
  final public TypeParameter[] TypeParameters() throws ParseException {
    List<TypeParameter> list = new LinkedList<TypeParameter>();
    TypeParameter temp;
    jj_consume_token(LESS);
    temp = TypeParameter();
                               list.add(temp); TypeParamsMap.put(temp.getName(), temp);
    label_69:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[202] = jj_gen;
        break label_69;
      }
      jj_consume_token(COMMA);
      temp = TypeParameter();
                              list.add(temp); TypeParamsMap.put(temp.getName(), temp);
    }
    RightAngledBracket();
      GenericTypesEnv = GenericTypesEnv.extend(TypeParamsMap); // push the map of typename/typeparam to the generic types env
      TypeParamsMap = new HashMap<String, TypeParameter>(); // flush old map
      {if (true) return (TypeParameter[]) list.toArray(new TypeParameter[0]);}
    throw new Error("Missing return statement in function");
  }

  // Does not add the peeked type params to the type environment
  final public TypeParameter[] TypeParametersLookahead() throws ParseException {
    List<TypeParameter> list = new LinkedList<TypeParameter>();
    TypeParameter temp;
    jj_consume_token(LESS);
    temp = TypeParameter();
                               list.add(temp);
    label_70:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[203] = jj_gen;
        break label_70;
      }
      jj_consume_token(COMMA);
      temp = TypeParameter();
                              list.add(temp);
    }
    RightAngledBracket();
      {if (true) return (TypeParameter[]) list.toArray(new TypeParameter[0]);}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameter TypeParameter() throws ParseException {
    List<IdentifierToken> name;
    Type bound = new ReferenceType("Object");
    Token first = getToken(1);
    List<ReferenceType> interfaceBoundsList = new LinkedList<ReferenceType>();
    ReferenceType interf;
    name = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      bound = type();
      label_71:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BITWISE_AND:
          ;
          break;
        default:
          jj_la1[204] = jj_gen;
          break label_71;
        }
        jj_consume_token(BITWISE_AND);
        interf = ReferenceTypeName();
      interfaceBoundsList.add(interf);
      }
      break;
    default:
      jj_la1[205] = jj_gen;
      ;
    }
      if(bound instanceof ReferenceType){
        {if (true) return new TypeParameter(_loc(first), name, (ReferenceType)bound, interfaceBoundsList);}
      } else {
        {if (true) throw new ParseException("Primitives are not allowed as bound"+
                                 "types, and array types are temporarily disabled due to a "+
                                 "DynamicJava AST hierarchy bug!");}
      }
    throw new Error("Missing return statement in function");
  }

  final public List<Type> TypeArguments() throws ParseException {
    List<Type> typeArgs = new LinkedList<Type>();
    ReferenceType hookedType = new ReferenceType("java.lang.Object");
    Type temp = new HookType(hookedType, false);
    Token hook = null;
    Token supered = null;
    jj_consume_token(LESS);
    if (jj_2_78(2147483647)) {
      hook = jj_consume_token(HOOK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          jj_consume_token(EXTENDS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        default:
          jj_la1[206] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        hookedType = ReferenceTypeName();
        break;
      default:
        jj_la1[207] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        temp = type();
        break;
      default:
        jj_la1[208] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      if(hook!= null)
        temp = new HookType(hookedType, (supered!=null));
      typeArgs.add(temp);
    label_72:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[209] = jj_gen;
        break label_72;
      }
      jj_consume_token(COMMA);
      if (jj_2_79(2147483647)) {
        hook = jj_consume_token(HOOK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
        case SUPER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXTENDS:
            jj_consume_token(EXTENDS);
            break;
          case SUPER:
            jj_consume_token(SUPER);
            break;
          default:
            jj_la1[210] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          hookedType = ReferenceTypeName();
          break;
        default:
          jj_la1[211] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
          temp = type();
          break;
        default:
          jj_la1[212] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if(hook!= null)
        temp = new HookType(hookedType, (supered!=null));
      typeArgs.add(temp);
    }
    RightAngledBracket();
      {if (true) return typeArgs;}
    throw new Error("Missing return statement in function");
  }

  final public Token RightAngledBracket() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATER_THAN:
      t = jj_consume_token(GREATER_THAN);
      break;
    case RSSHIFT1:
      t = jj_consume_token(RSSHIFT1);
      break;
    case RSSHIFT2:
      t = jj_consume_token(RSSHIFT2);
      break;
    case RUSHIFT1:
      t = jj_consume_token(RUSHIFT1);
      break;
    case RUSHIFT2:
      t = jj_consume_token(RUSHIFT2);
      break;
    case RUSHIFT3:
      t = jj_consume_token(RUSHIFT3);
      break;
    default:
      jj_la1[213] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_71() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_69() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_445() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_97()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_121()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_387() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_444() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_68() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_505() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_384() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_368()) return true;
    return false;
  }

  final private boolean jj_3R_504() {
    if (jj_scan_token(DECREMENT)) return true;
    return false;
  }

  final private boolean jj_3R_378() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_383()) {
    jj_scanpos = xsp;
    if (jj_3R_384()) return true;
    }
    return false;
  }

  final private boolean jj_3R_383() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_347()) return true;
    return false;
  }

  final private boolean jj_3R_443() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3_67() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_503() {
    if (jj_scan_token(INCREMENT)) return true;
    return false;
  }

  final private boolean jj_3R_495() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_503()) {
    jj_scanpos = xsp;
    if (jj_3R_504()) {
    jj_scanpos = xsp;
    if (jj_3R_505()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_495()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_379() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_387()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_3R_317()) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_3R_316()) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_3R_379()) return true;
    return false;
  }

  final private boolean jj_3R_442() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_374() {
    if (jj_3R_378()) return true;
    return false;
  }

  final private boolean jj_3R_368() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_373()) {
    jj_scanpos = xsp;
    if (jj_3R_374()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_373() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    if (jj_3R_347()) return true;
    return false;
  }

  final private boolean jj_3R_367() {
    if (jj_scan_token(DECREMENT)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_426() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_441()) {
    jj_scanpos = xsp;
    if (jj_3R_442()) {
    jj_scanpos = xsp;
    if (jj_3R_443()) {
    jj_scanpos = xsp;
    if (jj_3R_444()) {
    jj_scanpos = xsp;
    if (jj_3R_445()) {
    jj_scanpos = xsp;
    if (jj_3R_446()) {
    jj_scanpos = xsp;
    if (jj_3R_447()) {
    jj_scanpos = xsp;
    if (jj_3R_448()) {
    jj_scanpos = xsp;
    if (jj_3R_449()) {
    jj_scanpos = xsp;
    if (jj_3R_450()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_441() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_412() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_426()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_365() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    }
    if (jj_3R_347()) return true;
    return false;
  }

  final private boolean jj_3R_502() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_scan_token(INCREMENT)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_494() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_3R_368()) return true;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_3R_367()) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_3R_366()) return true;
    return false;
  }

  final private boolean jj_3R_406() {
    if (jj_3R_412()) return true;
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_357() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    if (jj_3R_347()) return true;
    return false;
  }

  final private boolean jj_3R_493() {
    if (jj_scan_token(CATCH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3R_502()) return true;
    }
    if (jj_3R_468()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_493()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_494()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_3R_347()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_365()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_112() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    if (jj_3R_341()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_3R_341()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_356()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_458() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_324() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    if (jj_3R_311()) return true;
    return false;
  }

  final private boolean jj_3R_346() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) return true;
    }
    }
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3R_437() {
    if (jj_3R_211()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_458()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_3R_334()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_scan_token(BITWISE_AND)) return true;
    if (jj_3R_301()) return true;
    return false;
  }

  final private boolean jj_3R_340() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    }
    }
    if (jj_3R_325()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    if (jj_3R_79()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_3R_325()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_340()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_3R_320()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_scan_token(BITWISE_OR)) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_3R_311()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_324()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_scan_token(CONDITIONAL_AND)) return true;
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(CONDITIONAL_OR)) return true;
    if (jj_3R_226()) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_3R_301()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_319()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_492() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_284()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_310()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_265()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_300()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_492()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_251()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_283()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_226()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_264()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_193()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_250() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_250()) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_159()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_192()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_63() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_66() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_510() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_288()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3R_507() {
    if (jj_3R_288()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_510()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_509() {
    if (jj_3R_507()) return true;
    return false;
  }

  final private boolean jj_3R_508() {
    if (jj_3R_256()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_506() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_508()) {
    jj_scanpos = xsp;
    if (jj_3R_509()) return true;
    }
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_489() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_86()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_501() {
    if (jj_3R_507()) return true;
    return false;
  }

  final private boolean jj_3R_500() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_499() {
    if (jj_3R_506()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    return false;
  }

  final private boolean jj_3R_491() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_499()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_500()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_501()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_490() {
    if (jj_3R_468()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3R_489()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_490()) {
    jj_scanpos = xsp;
    if (jj_3R_491()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_486() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_497() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_487() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_498() {
    if (jj_3R_216()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_496() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_488() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_496()) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_3R_497()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_498()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(SWITCH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3R_486()) return true;
    }
    if (jj_3R_79()) return true;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_3R_487()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_488()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_485() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_257()) return true;
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3R_485()) return true;
    }
    if (jj_3R_79()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_484() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    return false;
  }

  final private boolean jj_3R_483() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3R_484()) return true;
    }
    if (jj_3R_79()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_214()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_483()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    }
    return false;
  }

  final private boolean jj_3R_481() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_395() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_391() {
    Token xsp;
    if (jj_3R_395()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_395()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_482() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3R_481()) return true;
    }
    if (jj_3R_79()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_257()) return true;
    xsp = jj_scanpos;
    if (jj_3R_482()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_50() {
    Token xsp;
    if (jj_3_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_392() {
    if (jj_3R_396()) return true;
    return false;
  }

  final private boolean jj_3R_388() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3R_391()) return true;
    }
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_390() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_3R_388()) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    xsp = jj_scanpos;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_3R_390()) return true;
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_100()) return true;
    if (jj_3R_388()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) return true;
    }
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_299()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_298()) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_3R_297()) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_3R_296()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_3R_295()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_3R_294()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_3R_293()) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_3R_292()) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_3R_291()) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_3R_288()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_3R_287()) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_479() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_474() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_3R_248()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_227()) return true;
    return false;
  }

  final private boolean jj_3R_480() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_476() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_479()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_480()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_475() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_474()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_475()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_476()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_256()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_216()) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_397() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_397()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_223()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_472() {
    if (jj_3R_399()) return true;
    return false;
  }

  final private boolean jj_3R_462() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_472()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_478() {
    if (jj_3R_396()) return true;
    return false;
  }

  final private boolean jj_3R_477() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_394() {
    if (jj_3R_396()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_477()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_478()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_461() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_452() {
    if (jj_3R_462()) return true;
    return false;
  }

  final private boolean jj_3R_451() {
    if (jj_3R_461()) return true;
    return false;
  }

  final private boolean jj_3R_431() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_451()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_452()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_393() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_393()) jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    if (jj_3R_91()) return true;
    xsp = jj_scanpos;
    if (jj_3R_394()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_430() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_437()) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_430()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_431()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_407() {
    if (jj_3R_412()) return true;
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_467() {
    if (jj_3R_411()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_97()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_466() {
    if (jj_3R_410()) return true;
    return false;
  }

  final private boolean jj_3R_465() {
    if (jj_3R_408()) return true;
    return false;
  }

  final private boolean jj_3R_464() {
    if (jj_3R_407()) return true;
    return false;
  }

  final private boolean jj_3R_463() {
    if (jj_3R_406()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_222()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_221()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_220()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3R_453() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_463()) {
    jj_scanpos = xsp;
    if (jj_3R_464()) {
    jj_scanpos = xsp;
    if (jj_3R_465()) {
    jj_scanpos = xsp;
    if (jj_3R_466()) {
    jj_scanpos = xsp;
    if (jj_3R_467()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_218()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_217()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_434() {
    if (jj_3R_453()) return true;
    return false;
  }

  final private boolean jj_3R_433() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_437()) return true;
    return false;
  }

  final private boolean jj_3R_432() {
    if (jj_3R_435()) return true;
    return false;
  }

  final private boolean jj_3R_386() {
    if (jj_scan_token(DECREMENT)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_432()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_433()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_434()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_382() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) return true;
    }
    return false;
  }

  final private boolean jj_3R_385() {
    if (jj_scan_token(INCREMENT)) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_408() {
    if (jj_3R_412()) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_scan_token(DECREMENT)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_471() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_scan_token(INCREMENT)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_470() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_460() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_471()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_459() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_470()) jj_scanpos = xsp;
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_438() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_459()) {
    jj_scanpos = xsp;
    if (jj_3R_460()) return true;
    }
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_168()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_364()) return true;
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_168()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) {
    jj_scanpos = xsp;
    if (jj_3R_381()) return true;
    }
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_3R_377()) return true;
    return false;
  }

  final private boolean jj_3R_371() {
    if (jj_3R_376()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  final private boolean jj_3R_417() {
    if (jj_3R_216()) return true;
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  final private boolean jj_3R_416() {
    if (jj_3R_438()) return true;
    return false;
  }

  final private boolean jj_3R_364() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_415() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_437()) return true;
    return false;
  }

  final private boolean jj_3R_413() {
    if (jj_3R_435()) return true;
    return false;
  }

  final private boolean jj_3R_409() {
    if (jj_3R_412()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_414()) return true;
    xsp = jj_scanpos;
    if (jj_3R_415()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_416()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_417()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_3R_364()) return true;
    return false;
  }

  final private boolean jj_3R_351() {
    if (jj_3R_317()) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_3R_342()) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_3R_316()) return true;
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_361() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_scan_token(REMAINDER)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  final private boolean jj_3R_473() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_342()) return true;
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_3R_342()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_343()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_469() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    if (jj_scan_token(VAR_ARGS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) return true;
    }
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_3R_335()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_468() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_473()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_scan_token(RUSHIFT1)) return true;
    if (jj_scan_token(RUSHIFT2)) return true;
    if (jj_scan_token(RUSHIFT3)) return true;
    if (jj_3R_326()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_87()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_86()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_scan_token(RSSHIFT1)) return true;
    if (jj_scan_token(RSSHIFT2)) return true;
    if (jj_3R_326()) return true;
    return false;
  }

  final private boolean jj_3R_457() {
    if (jj_3R_468()) return true;
    return false;
  }

  final private boolean jj_3R_456() {
    if (jj_3R_469()) return true;
    return false;
  }

  final private boolean jj_3R_455() {
    if (jj_3R_468()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_scan_token(LEFT_SHIFT)) return true;
    if (jj_3R_326()) return true;
    return false;
  }

  final private boolean jj_3R_436() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_455()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_456()) {
    jj_scanpos = xsp;
    if (jj_3R_457()) return true;
    }
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_3R_326()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_327()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_414() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_436()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_scan_token(GREATER_OR_EQUAL)) return true;
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_scan_token(LESS_OR_EQUAL)) return true;
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3_79() {
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_scan_token(GREATER_THAN)) return true;
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_422() {
    if (jj_3R_287()) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) {
    jj_scanpos = xsp;
    if (jj_3R_331()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_3R_321()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_322()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_78() {
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_421() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_420() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_437()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_419() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(LESS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_125()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_418() {
    if (jj_3R_435()) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_3R_312()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_313()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_410() {
    if (jj_3R_412()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_418()) jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_414()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_419()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_420()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_421()) {
    jj_scanpos = xsp;
    if (jj_3R_422()) return true;
    }
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(BITWISE_AND)) return true;
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    if (jj_3R_302()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_168()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_252()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_227()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_303() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) return true;
    }
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_302()) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_3R_302()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_303()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_440() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_439() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_425() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_439()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_440()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_424() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_196()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_423() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_scan_token(BITWISE_AND)) return true;
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_3R_285()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_411() {
    if (jj_3R_412()) return true;
    if (jj_3R_168()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_423()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_424()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_425()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_454() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_435() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_454()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_266()) return true;
    return false;
  }

  final private boolean jj_3_75() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_113()) return true;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_266()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_113()) return true;
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  final private boolean jj_3R_405() {
    if (jj_3R_411()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_404() {
    if (jj_3R_410()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_403() {
    if (jj_3R_409()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_113()) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(BITWISE_OR)) return true;
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_402() {
    if (jj_3R_408()) return true;
    return false;
  }

  final private boolean jj_3R_401() {
    if (jj_3R_407()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_253()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_254()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_400() {
    if (jj_3R_406()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3_77() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_399() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_400()) {
    jj_scanpos = xsp;
    if (jj_3R_401()) {
    jj_scanpos = xsp;
    if (jj_3R_402()) {
    jj_scanpos = xsp;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) {
    jj_scanpos = xsp;
    if (jj_3R_405()) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(CONDITIONAL_AND)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_74() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    Token xsp;
    if (jj_3R_323()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_323()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_229()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_76() {
    Token xsp;
    if (jj_3_74()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_74()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_307() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) return true;
    }
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_398() {
    if (jj_3R_399()) return true;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_398()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_429() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_437()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(CONDITIONAL_OR)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_197()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_198()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_164()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    if (jj_scan_token(VAR_ARGS)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_428() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_427() {
    if (jj_3R_435()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_427()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_428()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_429()) jj_scanpos = xsp;
    if (jj_3R_396()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_scan_token(OR_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(XOR_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(AND_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_450() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(RIGHT_UNSIGNED_SHIFTASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_449() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(RIGHT_SIGNED_SHIFT_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(LEFT_SHIFT_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(MINUS_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_448() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(PLUS_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_3R_103()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_447() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_3R_307()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(REMAINDER_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) return true;
    }
    return false;
  }

  final private boolean jj_3_73() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_95()) return true;
    if (jj_3R_307()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(SLASH_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_446() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(STAR_ASSIGN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_72() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3_70() {
    if (jj_3R_97()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  public ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[214];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x88250000,0x1,0x5028000,0x5028000,0x0,0x0,0x20404000,0x20404000,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x4000,0x4000,0x0,0x40000000,0x0,0x28654000,0x8254000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8250000,0x0,0x0,0x0,0x0,0x0,0x0,0xad678000,0x0,0x88250000,0x0,0x40000000,0x28654000,0x8254000,0x0,0x0,0x0,0x0,0x0,0x0,0x28654000,0x88250000,0x0,0x88250000,0xad678000,0xad678000,0x0,0x0,0x0,0x0,0x0,0x0,0x8d278000,0x0,0x10000000,0x0,0x1,0x0,0x0,0x0,0x0,0x2080000,0x2080000,0x0,0xad678000,0x0,0x88250000,0x88250000,0x88250000,0x88250000,0x88250000,0x0,0x0,0x0,0x88250000,0x0,0x100000,0x0,0x0,0x0,0x0,0x88250000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x88250000,0x88250000,0x0,0x88250000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x88250000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x8250000,0x0,0x8250000,0x8250000,0x0,0x5028000,0x80000000,0x0,0x8250000,0x0,0x8250000,0x8250000,0x80000000,0x88250000,0x0,0x88250000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x88250000,0x0,0x0,0x88250000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x0,0x0,0x8250000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x88250000,0x0,0x88250000,0x0,0x0,0x0,0x40000000,0x40000000,0x40000000,0x8250000,0x0,0x40000000,0x40000000,0x8250000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0xa2506a04,0x0,0x448880a8,0x448880a8,0x8000,0x80,0x11271401,0x11271401,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x11271001,0x11271001,0x0,0x0,0x40,0x91371e05,0x11371a05,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x100a05,0x1,0x0,0x1,0x200000,0x0,0x8000000,0xe7d86e2d,0x0,0xa2506a04,0x0,0x0,0x91371e05,0x11371a05,0x40,0x0,0x0,0x0,0x0,0x0,0x91371e05,0xa2506a04,0x0,0xa2506a04,0xe7d86e2d,0xe7d86e2c,0x1,0x0,0x0,0x0,0x0,0x0,0xe7d86a2c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe7d86e2d,0x0,0xa2506a05,0xa2506a04,0xa2506a04,0xa2506a05,0xa2506a04,0x0,0x0,0x0,0xa2506a04,0x0,0x0,0x0,0x2,0x0,0x0,0xa2506a04,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa2506a04,0xa2506a04,0x0,0xa2506a04,0x0,0x0,0x0,0x22406000,0x0,0x0,0x0,0xa2506a04,0x0,0x20004000,0x0,0x0,0x2000,0x0,0x0,0x100a04,0x0,0x80100a04,0x100a04,0x1,0x448880a8,0x22406000,0x0,0x100a04,0x0,0x80100a04,0x100a04,0x20004000,0xa2506a04,0x0,0xa2506a04,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa2506a04,0x0,0x0,0xa2506a04,0x0,0x0,0x0,0x22406000,0x0,0x0,0x0,0x0,0x2000,0x200000,0x11271001,0x11271001,0x0,0x0,0x0,0x0,0x0,0x100a05,0x1,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xa2506a04,0x0,0xa2506a04,0x0,0x0,0x0,0x0,0x400000,0x400000,0x100a04,0x0,0x400000,0x400000,0x100a04,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x200000,0x1c009d8c,0x200000,0x220002,0x220002,0x0,0x0,0x200001,0x200001,0x1000,0x200000,0x0,0x1000,0x800000,0x200000,0x400000,0x1,0x1,0x4000000,0x0,0x0,0x4221001,0x201001,0x80000,0x1000000,0x400000,0x80000,0x1000000,0x4000000,0x80000,0x0,0x220000,0x1000,0x0,0x80000,0x0,0x0,0x4000000,0x0,0x4229d8e,0x4000000,0x4009d8c,0x4000000,0x0,0x4001001,0x1001,0x0,0x1000,0x400000,0x200000,0x8000,0x20000,0x4221001,0x1c029d8c,0x400000,0x1c029d8c,0x4229d8e,0x4229d8e,0x0,0x80000,0x1000000,0x400000,0x80000,0x1000000,0x4229d8e,0x8000,0x0,0x40000000,0x200000,0x8000,0x8000,0x8000,0x20000,0x0,0x0,0x40000000,0x4229d8e,0x8000,0x4009d8c,0x1c009d8c,0x4009d8c,0x4209d8c,0x4009d8c,0x400000,0x1000,0x1000,0x1c009d8c,0x8000,0x0,0x8000,0x0,0x1000000,0x1000000,0x4009d8c,0x1000000,0x1000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1c009d8c,0x1c009d8c,0x18000000,0x4009d8c,0x8000,0x0,0x0,0x8d8c,0x1000,0x888000,0x20000,0x1c009d8c,0x400000,0xd8c,0x20000,0x88000,0x0,0x80000,0x80000,0x1000,0x80000,0x1000,0x0,0x0,0x220002,0x18009d8c,0x8000,0x1000,0x80000,0x1000,0x0,0xd8c,0x9d8c,0x400000,0x18009d8c,0x1000000,0x1000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18009d8c,0x18000000,0x18000000,0x9d8c,0x0,0x0,0x8000,0x8d8c,0x1000,0x888000,0x20000,0x88000,0x0,0x0,0x1,0x1,0x4000000,0x4000000,0x400000,0x80000,0x400000,0x1000,0x0,0x0,0x400000,0x1000000,0x80000,0x0,0x400000,0x80000,0x80000,0x18029d8c,0x400000,0x18029d8c,0x400000,0x400000,0x0,0x0,0x0,0x0,0x1000,0x400000,0x0,0x0,0x1000,0x2000000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x1e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e0,0x0,0x1e0,0x60,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x60,0x1e0,0x60,0x60,0x60,0x0,0x0,0x0,0x1e0,0x0,0x0,0x0,0x0,0x7ff0060,0x7ff0060,0x60,0x7ff0000,0x7ff0000,0x0,0x8,0x10,0x1000,0x2000,0x800,0x4,0x4,0x0,0x3,0x3,0x40008000,0x40008000,0x180,0x180,0x4600,0x4600,0x1e0,0x1e0,0x0,0x0,0x0,0x60,0x60,0x0,0x0,0x0,0x0,0x1e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e0,0x7ff0000,0x7ff0000,0x0,0x8,0x10,0x1000,0x2000,0x800,0x4,0x4,0x0,0x3,0x3,0x30008000,0x30008000,0x180,0x180,0x4600,0x4600,0x180,0x1e0,0x0,0x0,0x0,0x60,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e0,0x0,0x1e0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[79];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 214; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 214; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 214; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 214; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 214; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 214; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<Object> jj_expentries = new java.util.Vector<Object>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[131];
    for (int i = 0; i < 131; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 214; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 131; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 79; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec63bf2a654275cf64bff66c3e9c6424", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d98c8c18d59f4f32aa0993be88f49a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "8de007bf6be2b43ee2e0404f529aa96c640a30ed", "commitAfterChange": "4b5efbc2650bf8411daae8d8fd509fcb4fe26da2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   private void init(boolean info)", "signatureAfterChange": "   private void init(boolean info)", "diff": ["+          for(JComponent c: _optionalComponents) {", "+            if (e.getOppositeComponent() == c) { return; }", "+          }", "+          for(JComponent c: _optionalComponents) {", "+            if (e.getOppositeComponent() == c) { return; }", "+          }", "+    _optionalComponents = makeOptions();", "+    if (_optionalComponents.length>0) {", "+      _optionsPanel = new JPanel(new BorderLayout());", "+      _setupOptionsPanel(_optionalComponents);", "+      contentPane.add(_optionsPanel, c);", "+    }", "+    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6f2eb19739b59af2f55290961d80a5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "6595282fd67e77d6079df1ee1647ba51751bbcec", "commitAfterChange": "de0f38d123822794b2970bd8e5814e75677feb46", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "signatureAfterChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "diff": ["-    List<Type> typeArgs = null;", "+    List<Type> typeArgs = new LinkedList<Type>();", "+    List<List<? extends Type>> allTypeArgs = new LinkedList<List<? extends Type>>();", "+      allTypeArgs.add( typeArgs );", "+      typeArgs = new LinkedList<Type>();", "+      allTypeArgs.add( typeArgs );", "+      typeArgs = new LinkedList<Type>();", "-      if(typeArgs == null){", "+      boolean Parameterized = false;", "+      for( int i = 0; i < allTypeArgs.size(); i++ ){", "+        List<? extends Type> targs = allTypeArgs.get(i);", "+        if(targs.size() > 0) {", "+          Parameterized = true;", "+          break;", "+        }", "+      }", "+      if(!Parameterized){", "-                                        typeArgs);}", "+                                        allTypeArgs);}"]}], "num": 21342}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7776ba246f285b5fa788860e7a3113e7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b5d662b11836ada7b711e98836db1ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "         public void testForIfThenStatement()", "signatureAfterChange": "         public void testForIfThenStatement()", "diff": ["-      Expression te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, ", "-                                             new SimpleNameReference(JExprParser.NO_SOURCE_INFO, ", "-                                                                     new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-                                             new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "+      Expression te = new LessThanExpression(SourceInfo.NO_INFO, ", "+                                             new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                     new Word(SourceInfo.NO_INFO, \"j\")),", "+                                             new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, ", "-                                                               new SimpleNameReference(JExprParser.NO_SOURCE_INFO, ", "-                                                                                       new Word(JExprParser.NO_SOURCE_INFO, \"i\")), ", "-                                                               new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      IfThenStatement ift = new IfThenStatement(JExprParser.NO_SOURCE_INFO, te, ts);", "+        new ExpressionStatement(SourceInfo.NO_INFO, ", "+                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "+                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      IfThenStatement ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "-      PrimitiveType intt = new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\");", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "-        new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                            new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, ", "-                                                                new Word(JExprParser.NO_SOURCE_INFO, \"j\")), false);", "-      BracedBody bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] { ", "-        new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+        new FormalParameter(SourceInfo.NO_INFO, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, ", "+                                                                new Word(SourceInfo.NO_INFO, \"j\")), false);", "+      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { ", "+        new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, ", "-                                  new SimpleNameReference(JExprParser.NO_SOURCE_INFO, ", "-                                                          new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-                                  new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "+      te = new LessThanExpression(SourceInfo.NO_INFO, ", "+                                  new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                          new Word(SourceInfo.NO_INFO, \"j\")),", "+                                  new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, ", "-                                                               new SimpleNameReference(JExprParser.NO_SOURCE_INFO, ", "-                                                                                       new Word(JExprParser.NO_SOURCE_INFO, \"i\")), ", "-                                                               new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "+        new ExpressionStatement(SourceInfo.NO_INFO, ", "+                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "+                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-        new ValueReturnStatement(JExprParser.NO_SOURCE_INFO, ", "-                                 new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")));", "-      ts = new Block(JExprParser.NO_SOURCE_INFO, new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "-      ift = new IfThenStatement(JExprParser.NO_SOURCE_INFO, te, ts);", "+        new ValueReturnStatement(SourceInfo.NO_INFO, ", "+                                 new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "+      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "+      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      ts = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      ift = new IfThenStatement(JExprParser.NO_SOURCE_INFO, te, ts);", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new PlusAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      ts = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      ift = new IfThenStatement(JExprParser.NO_SOURCE_INFO, te, ts);", "+      te = new PlusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52b3c7eb3286243b3c80098924222b91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "       public void testForSwitchStatement()", "signatureAfterChange": "       public void testForSwitchStatement()", "diff": ["-      SwitchStatement ss = new SwitchStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"dan\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5)), new SwitchCase[0]);", "+      SwitchStatement ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)), new SwitchCase[0]);", "-      ss = new SwitchStatement(JExprParser.NO_SOURCE_INFO, new DoubleLiteral(JExprParser.NO_SOURCE_INFO, 4.2), new SwitchCase[0]);", "+      ss = new SwitchStatement(SourceInfo.NO_INFO, new DoubleLiteral(SourceInfo.NO_INFO, 4.2), new SwitchCase[0]);", "-      UnbracedBody emptyBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "+      UnbracedBody emptyBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "-      LabeledCase l1 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), emptyBody);", "-      LabeledCase l2 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), emptyBody);", "-      LabeledCase l3 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 7), emptyBody);", "+      LabeledCase l1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), emptyBody);", "+      LabeledCase l2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), emptyBody);", "+      LabeledCase l3 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 7), emptyBody);", "-      ss = new SwitchStatement(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"dan\")), new SwitchCase[] {l1, l2, l3});", "+      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {l1, l2, l3});", "-      DefaultCase dc1 = new DefaultCase(JExprParser.NO_SOURCE_INFO, emptyBody);", "-      ss = new SwitchStatement(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"dan\")), new SwitchCase[] {dc1, dc1});", "+      DefaultCase dc1 = new DefaultCase(SourceInfo.NO_INFO, emptyBody);", "+      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {dc1, dc1});", "-      ExpressionStatement assignX = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"x\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5)));", "-      UnbracedBody returnBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignX, new ValueReturnStatement(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5))});", "-      UnbracedBody breakBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignX, new UnlabeledBreakStatement(JExprParser.NO_SOURCE_INFO)});", "-      UnbracedBody breakNoAssignBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new UnlabeledBreakStatement(JExprParser.NO_SOURCE_INFO)});", "-      UnbracedBody fallThroughBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignX});", "-      UnbracedBody fallThroughNoAssignBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "+      ExpressionStatement assignX = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"x\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)));", "+      UnbracedBody returnBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignX, new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5))});", "+      UnbracedBody breakBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignX, new UnlabeledBreakStatement(SourceInfo.NO_INFO)});", "+      UnbracedBody breakNoAssignBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new UnlabeledBreakStatement(SourceInfo.NO_INFO)});", "+      UnbracedBody fallThroughBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignX});", "+      UnbracedBody fallThroughNoAssignBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "-      SwitchCase c1 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), returnBody);", "-      SwitchCase c2 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 6), breakBody);", "-      SwitchCase c3 = new DefaultCase(JExprParser.NO_SOURCE_INFO, breakBody);", "+      SwitchCase c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), returnBody);", "+      SwitchCase c2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), breakBody);", "+      SwitchCase c3 = new DefaultCase(SourceInfo.NO_INFO, breakBody);", "-      ss = new SwitchStatement(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "-      c1 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), fallThroughNoAssignBody);", "-      c2 = new DefaultCase(JExprParser.NO_SOURCE_INFO, breakBody);", "-      c3 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 6), breakBody);", "-      ss = new SwitchStatement(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), fallThroughNoAssignBody);", "+      c2 = new DefaultCase(SourceInfo.NO_INFO, breakBody);", "+      c3 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), breakBody);", "+      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "-      c1 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), fallThroughNoAssignBody);", "-      c2 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 6), breakNoAssignBody);", "-      c3 = new DefaultCase(JExprParser.NO_SOURCE_INFO, breakBody);", "-      ss = new SwitchStatement(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), fallThroughNoAssignBody);", "+      c2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), breakNoAssignBody);", "+      c3 = new DefaultCase(SourceInfo.NO_INFO, breakBody);", "+      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "-      c1 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), fallThroughNoAssignBody);", "-      c2 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 6), fallThroughNoAssignBody);", "-      c3 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 7), breakBody);", "-      ss = new SwitchStatement(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), fallThroughNoAssignBody);", "+      c2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), fallThroughNoAssignBody);", "+      c3 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 7), breakBody);", "+      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "-      c1 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), fallThroughNoAssignBody);", "-      c2 = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 6), fallThroughNoAssignBody);", "-      c3 = new DefaultCase(JExprParser.NO_SOURCE_INFO, fallThroughBody);", "-      ss = new SwitchStatement(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), fallThroughNoAssignBody);", "+      c2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), fallThroughNoAssignBody);", "+      c3 = new DefaultCase(SourceInfo.NO_INFO, fallThroughBody);", "+      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});"]}], "num": 3513}
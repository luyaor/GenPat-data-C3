{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "829407919aaccc34d249cd842572d103", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24f14a8250c3a6add5cc32cdaae519c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public List<String> runTest(final List<String> classNames, final List<File> files,                               final boolean isTestAll)", "signatureAfterChange": "   public List<String> runTest(final List<String> classNames, final List<File> files,                               final boolean isTestAll)", "diff": ["-    final ArrayList<String> stuff = new ArrayList<String>();", "-    synchronized (stuff) {", "+    final ArrayList<String> testClassNames = new ArrayList<String>();", "+    synchronized (testClassNames) {", "-            synchronized (stuff) {", "+            synchronized (testClassNames) {", "-                    stuff.add(className);", "+                    testClassNames.add(className);", "-              finally {", "-                stuff.notify();", "-              }", "+              finally { testClassNames.notify(); }", "-        stuff.wait();", "+        testClassNames.wait();", "-    return stuff;", "+    return testClassNames;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b3f8640ff7e5023e6633ba6c10b608", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "a2ecf7f1dd3c4baa5e86a7675beca418200c8154", "commitAfterChange": "aedcb983e991914df596045d19b04323f01312ad", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>   convert(File[] files, Options options)", "signatureAfterChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>   convert(File[] files, Options options, Map<File,List<String>> sourceToTopLevelClassMap)", "diff": ["+    *        an empty map should be passed in; it will be filled out by this method */", "+  public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>", "+  convert(File[] files, Options options, Map<File,List<String>> sourceToTopLevelClassMap) {", "+            final List<String> topLevelClasses = new ArrayList<String>();", "+            for (TypeDefBase t: sf.getTypes()) {", "+              t.visit(new JExpressionIFAbstractVisitor_void() {", "+                public void forClassDef(ClassDef that) {", "+                  topLevelClasses.add(that.getName().getText());", "+                }", "+              });", "+            }", "+            sourceToTopLevelClassMap.put(f,topLevelClasses);"]}], "num": 26081}
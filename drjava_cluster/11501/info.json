{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e2a7e84445973c679008ab06c85287b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5738e9e3fce1d6a9c8183d79e9703fd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/LanguageLevelStackTraceMapper.java", "commitBeforeChange": "cc814c34f96bfde67f8ae465727b510fa3ed34c9", "commitAfterChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public TreeMap<Integer, Integer> readLLLineBlock(File LLFile)", "signatureAfterChange": "   public TreeMap<Integer, Integer> readLLLineBlock(File LLFile)", "diff": ["-    if (!rdLine.startsWith(\"// Language Level Converter line number map: dj*->java. Entries:\")) {", "+    if (! rdLine.startsWith(\"// Language Level Converter line number map: dj*->java. Entries:\")) {", "+    // Process header line of block", "-    if (rdLine.indexOf(\"//\") != 0) mapSize = 0;  //Kills the for loop if read line is not of correct format", "-    ", "-    String temp = \"\";", "-    String numRnum = \"\";", "+    if (rdLine.indexOf(\"//\") != 0) mapSize = 0;  // Kills the for loop if read line is not of correct format", "+   ", "+    // Create the LL map", "-    temp = rdLine.substring(2).trim() + \" \";", "+    // Process block lines containing map entries; rdLine is first such line", "+    // Invariant for text: text has no leading whitespace and trailing whitespace consisting of a single blank", "+    String text = rdLine.substring(2).trim() + \" \";", "-      if (temp.length() < 2)  temp = readLLLineBlockHelper(bufReader);", "-      if (temp == null) break;", "-//      Utilities.show(\"i = \" + i + \"     temp = '\" + temp + \"'\");", "-      numRnum = temp.substring(0, temp.indexOf(\" \"));", "+      if (text.length() < 2)  text = readNextLLBlockLine(bufReader);", "+      if (text == null) break;  // no more entries in block; mapSize is wrong  // ERROR should be raised !!!", "+", "+      int firstBlankPos = text.indexOf(\" \");", "+      String numRnum = text.substring(0, firstBlankPos);", "+      text = text.substring(firstBlankPos).trim() + \" \";  // Only need to trim leading blanks here; String API is clumsy", "-      temp = temp.substring(temp.indexOf(\" \")).trim() + \" \";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfd5e99b80af6c54f2dd42f176c5c860", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/LanguageLevelStackTraceMapper.java", "commitBeforeChange": "cc814c34f96bfde67f8ae465727b510fa3ed34c9", "commitAfterChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public TreeMap<Integer, Integer> ReadLanguageLevelLineBlockRev(File LLFile)", "signatureAfterChange": "   public TreeMap<Integer, Integer> readLLBlock(File LLFile)", "diff": ["-  public TreeMap<Integer, Integer> ReadLanguageLevelLineBlockRev(File LLFile) {", "+  public TreeMap<Integer, Integer> readLLBlock(File LLFile) {", "-    if (!rdLine.startsWith(\"// Language Level Converter line number map: dj*->java. Entries:\")) {", "+    if (! rdLine.startsWith(\"// Language Level Converter line number map: dj*->java. Entries:\")) {", "-    try{ rdLine = bufReader.readLine(); } catch(java.io.IOException e){ }", "+    try { rdLine = bufReader.readLine(); } catch(java.io.IOException e){ }", "-    String temp = rdLine.substring(2).trim() + \" \";  // invariant: temp has no leading spaces and a single trailing space", "+    String text = rdLine.substring(2).trim() + \" \";  // invariant: temp has no leading spaces and a single trailing space", "-      if (temp.length() < 2)  temp = readLLLineBlockHelper(bufReader);", "-      if (temp == null) break;", "+      if (text.length() < 2)  text = readNextLLBlockLine(bufReader);", "+      if (text == null) break;", "-      numRnum = temp.substring(0, temp.indexOf(\" \"));", "+      numRnum = text.substring(0, text.indexOf(\" \"));", "-      temp = temp.substring(temp.indexOf(\" \")).trim() + \" \";  // slices off first non-blank section", "+      text = text.substring(text.indexOf(\" \")).trim() + \" \";  // slices off first non-blank section"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f43719a2f93a49ea5236ac2b6b901e66", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public Void forClassImportStatementOnly(ClassImportStatement that)", "signatureAfterChange": "   public Void forClassImportStatementOnly(ClassImportStatement that)", "diff": ["-    //Make sure that this specific imported class has not already been specifically imported", "+    // Make sure that this specific imported class has not already been specifically imported", "-    StringBuffer tempBuff = new StringBuffer(words[0].getText());", "-    for (int i = 1; i < words.length; i++) {tempBuff.append(\".\" + words[i].getText());}", "+    StringBuilder nameBuff = new StringBuilder(words[0].getText());", "+    for (int i = 1; i < words.length; i++) {nameBuff.append(\".\" + words[i].getText());}", "-    String temp = tempBuff.toString();", "+    String qualifiedTypeName = nameBuff.toString();", "-    //Make sure that this imported class does not dupliate the package.", "-    //Although this is allowed in full java, we decided to not allow it at any LanguageLevel.", "-    int indexOfLastDot = temp.lastIndexOf(\".\");", "+    // Make sure that this imported class does not duplicate the package.  WHY? FIX THIS.", "+    // Although this is allowed in full java, we decided to not allow it at any LanguageLevel.", "+    int indexOfLastDot = qualifiedTypeName.lastIndexOf(\".\");", "-      if (_package.equals(temp.substring(0, indexOfLastDot))) {", "-        _addAndIgnoreError(\"You do not need to import \" + temp + \".  It is in your package so it is already visible\", that);", "+      if (_package.equals(qualifiedTypeName.substring(0, indexOfLastDot))) {", "+        _addAndIgnoreError(\"You do not need to import \" + qualifiedTypeName + \".  It is in your package so it is already visible\", that);", "-    _importedFiles.addLast(temp);  ", "+    _importedFiles.addLast(qualifiedTypeName);  ", "-    SymbolData sd = symbolTable.get(temp);", "+    // Create a continuation for imported class (named temp) if one does not already exist", "+    SymbolData sd = symbolTable.get(qualifiedTypeName);", "-      sd = addSymbolData(that.getSourceInfo(), temp);", "+      sd = addSymbolData(that.getSourceInfo(), qualifiedTypeName);"]}], "num": 11501}
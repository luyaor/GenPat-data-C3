{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "226c1380d04cdd623d5f2803c9b53ffe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4853c7a1d9f05752bbb46e15d01053ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "signatureAfterChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "diff": ["-    assertTrue(\"line after open paren\", rule.applyRule(_doc, 7));", "-    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 18));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 25));", "-    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 28));", "+    assertTrue(\"line after open paren\", rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 18, Indenter.OTHER));", "+    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 25, Indenter.OTHER));", "+    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 28, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b4829adc308777b7497a2af3bc03ff4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testPrefixOnCurrLine() throws BadLocationException", "signatureAfterChange": "   public void testPrefixOnCurrLine() throws BadLocationException", "diff": ["-    assertTrue(\"before brace\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"after brace\", !rule.applyRule(_doc, 2));", "+    assertTrue(\"before brace\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"after brace\", !rule.applyRule(_doc, 2, Indenter.OTHER));", "-    assertTrue(\"before brace\", !rule.applyRule(_doc, 7));", "-    assertTrue(\"after brace\", !rule.applyRule(_doc, 18));", "+    assertTrue(\"before brace\", !rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"after brace\", !rule.applyRule(_doc, 18, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "618fbc68478bde3e8bc47830a15a65ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testMultipleCharPrefix() throws BadLocationException", "signatureAfterChange": "   public void testMultipleCharPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"star\", !rule.applyRule(_doc, 2));", "-    assertTrue(\"space star\", !rule.applyRule(_doc, 5));", "-    assertTrue(\"space star space\", rule.applyRule(_doc, 11));", "-    assertTrue(\"space star space text\", rule.applyRule(_doc, 16));", "+    assertTrue(\"star\", !rule.applyRule(_doc, 2, Indenter.OTHER));", "+    assertTrue(\"space star\", !rule.applyRule(_doc, 5, Indenter.OTHER));", "+    assertTrue(\"space star space\", rule.applyRule(_doc, 11, Indenter.OTHER));", "+    assertTrue(\"space star space text\", rule.applyRule(_doc, 16, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97d5143fcab8f709cf7549b652961798", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "   public void testNoPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"no open brace\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"line of close brace (no open brace)\", !rule.applyRule(_doc, 7));", "-    assertTrue(\"line after close brace (no open brace)\", !rule.applyRule(_doc, 8));", "+    assertTrue(\"no open brace\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"line of close brace (no open brace)\", !rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"line after close brace (no open brace)\", !rule.applyRule(_doc, 8, Indenter.OTHER));", "-    assertTrue(\"no close brace\", !rule.applyRule(_doc, 0));", "+    assertTrue(\"no close brace\", !rule.applyRule(_doc, 0, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2d97b739b08433b96101abdf26c155f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testDoesNotStartWithPrefix() throws BadLocationException", "signatureAfterChange": "   public void testDoesNotStartWithPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"before brace\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"just before brace\", !rule.applyRule(_doc, 7));", "-    assertTrue(\"just after brace\", !rule.applyRule(_doc, 8));", "-    assertTrue(\"line after brace\", !rule.applyRule(_doc, 10));", "+    assertTrue(\"before brace\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"just before brace\", !rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"just after brace\", !rule.applyRule(_doc, 8, Indenter.OTHER));", "+    assertTrue(\"line after brace\", !rule.applyRule(_doc, 10, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ee2623516ac1992332c77262a2eced", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testCommentedPrefix() throws BadLocationException", "signatureAfterChange": "   public void testCommentedPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"just before star\", !rule.applyRule(_doc, 4));", "-    assertTrue(\"just after star\", !rule.applyRule(_doc, 6));", "-    assertTrue(\"line after star\", rule.applyRule(_doc, 7));", "-    assertTrue(\"line after star\", !rule.applyRule(_doc, 15));", "+    assertTrue(\"just before star\", !rule.applyRule(_doc, 4, Indenter.OTHER));", "+    assertTrue(\"just after star\", !rule.applyRule(_doc, 6, Indenter.OTHER));", "+    assertTrue(\"line after star\", rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"line after star\", !rule.applyRule(_doc, 15, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c12c1b6bd986d26bb5bf843ba49edabb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlusTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testComment() throws BadLocationException", "signatureAfterChange": "      public void testComment() throws BadLocationException", "diff": ["-    _action.indentLine(_doc, 14); // line 3", "-    _action.indentLine(_doc, 27); // line 4", "-    _action.indentLine(_doc, 43); // line 5", "+    _action.indentLine(_doc, 14, Indenter.OTHER); // line 3", "+    _action.indentLine(_doc, 27, Indenter.OTHER); // line 4", "+    _action.indentLine(_doc, 43, Indenter.OTHER); // line 5", "-    _action.indentLine(_doc, 54); // after baz()", "+    _action.indentLine(_doc, 54, Indenter.OTHER); // after baz()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c26674182ead56fdd288af08cffcf550", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testMultipleBlankLinesBack() throws BadLocationException", "signatureAfterChange": "   public void testMultipleBlankLinesBack() throws BadLocationException", "diff": ["-    assertTrue(\"line after open paren\", rule.applyRule(_doc, 5));", "-    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 6));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 13));", "-    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 16));", "+    assertTrue(\"line after open paren\", rule.applyRule(_doc, 5, Indenter.OTHER));", "+    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 6, Indenter.OTHER));", "+    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 13, Indenter.OTHER));", "+    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 16, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6af2ffeb5b4fe0a1506866f23212136", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testCommentedPrefixSearchComment() throws BadLocationException", "signatureAfterChange": "   public void testCommentedPrefixSearchComment() throws BadLocationException", "diff": ["-    assertTrue(\"line before star\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"just before star\", rule.applyRule(_doc, 4));", "-    assertTrue(\"just after star\", rule.applyRule(_doc, 6));", "-    assertTrue(\"line after star\", !rule.applyRule(_doc, 7));", "+    assertTrue(\"line before star\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"just before star\", rule.applyRule(_doc, 4, Indenter.OTHER));", "+    assertTrue(\"just after star\", rule.applyRule(_doc, 6, Indenter.OTHER));", "+    assertTrue(\"line after star\", !rule.applyRule(_doc, 7, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c80f0174e3bf5da998690a12c2b765b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "   public void testNoPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"line after close brace (no open brace)\", !rule.applyRule(_doc, 2));", "-    assertTrue(\"line after text (no open brace)\", !rule.applyRule(_doc, 9));", "-    assertTrue(\"line after text (no open brace)\", !rule.applyRule(_doc, 10));", "+    assertTrue(\"line after close brace (no open brace)\", !rule.applyRule(_doc, 2, Indenter.OTHER));", "+    assertTrue(\"line after text (no open brace)\", !rule.applyRule(_doc, 9, Indenter.OTHER));", "+    assertTrue(\"line after text (no open brace)\", !rule.applyRule(_doc, 10, Indenter.OTHER));", "-    assertTrue(\"no star\", !rule.applyRule(_doc, 6));", "+    assertTrue(\"no star\", !rule.applyRule(_doc, 6, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16269fd91e995954f4c24b1b647e8d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testPrefixAtEnd() throws BadLocationException", "signatureAfterChange": "   public void testPrefixAtEnd() throws BadLocationException", "diff": ["-    assertTrue(\"first line\", !rule.applyRule(_doc, 3));", "-    assertTrue(\"end of first line\", !rule.applyRule(_doc, 12));", "-    assertTrue(\"beginning of second line\", rule.applyRule(_doc, 13));", "-    assertTrue(\"end of second line\", rule.applyRule(_doc, 14));", "+    assertTrue(\"first line\", !rule.applyRule(_doc, 3, Indenter.OTHER));", "+    assertTrue(\"end of first line\", !rule.applyRule(_doc, 12, Indenter.OTHER));", "+    assertTrue(\"beginning of second line\", rule.applyRule(_doc, 13, Indenter.OTHER));", "+    assertTrue(\"end of second line\", rule.applyRule(_doc, 14, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c0c00eaa9d802dfabf1cd59a1bd669", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testWSAfterBrace() throws BadLocationException", "signatureAfterChange": "      public void testWSAfterBrace() throws BadLocationException", "diff": ["-    assertTrue(\"START immediatly follows an open brace.\", _rule.applyRule(_doc, 14));     ", "-    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 15));     ", "-    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23));     ", "-    assertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25));     ", "+    assertTrue(\"START immediatly follows an open brace.\", _rule.applyRule(_doc, 14, Indenter.OTHER));", "+    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 15, Indenter.OTHER));", "+    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23, Indenter.OTHER));", "+    assertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5d49ac2ba81297b248938aaa63dee14", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testMultipleCharPrefix() throws BadLocationException", "signatureAfterChange": "   public void testMultipleCharPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"star\", !rule.applyRule(_doc, 0));", "-    assertTrue(\"dot star\", !rule.applyRule(_doc, 2));", "-    assertTrue(\"dot star dot\", rule.applyRule(_doc, 7));", "-    assertTrue(\"dot star dot text\", rule.applyRule(_doc, 9));", "+    assertTrue(\"star\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"dot star\", !rule.applyRule(_doc, 2, Indenter.OTHER));", "+    assertTrue(\"dot star dot\", rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"dot star dot text\", rule.applyRule(_doc, 9, Indenter.OTHER));"]}], "num": 8962}
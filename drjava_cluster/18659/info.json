{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90a8fb149deddbd614b6e8c2fa8e983d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dde6f63eba911f413ef10b9cde53aa6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "   private static void checkCastStaticRules(Class tc, Class ec, Node n)", "signatureAfterChange": "   private static void checkCastStaticRules(Class tc, Class ec, CastExpression castExp)", "diff": ["-  private static void checkCastStaticRules(Class tc, Class ec, Node n) {", "+  private static void checkCastStaticRules(Class tc, Class ec, CastExpression castExp) {", "-        if (tc == null || !ec.isPrimitive() ||", "-            ec == boolean.class || ec == void.class) {", "-          throw new ExecutionError(\"cast\", n);", "+        boolean isBoxingType = _isBoxingType(ec);", "+        if (ec == null          || ", "+            ec == boolean.class || ", "+            (tc == boolean.class && ec != Boolean.class) ||", "+            !(ec.isPrimitive()  || isBoxingType) ||", "+            ec == void.class) {", "+          throw new ExecutionError(\"cast\", castExp);", "-      } else if (ec != null) {", "+        ", "+        if (isBoxingType) {", "+          castExp.setExpression(_unbox(castExp.getExpression(), ec));", "+        }        ", "+      } ", "+      else if (ec != null) {", "-                throw new ExecutionError(\"cast\", n);", "+                throw new ExecutionError(\"cast\", castExp);", "-            } else {", "-              checkCastStaticRules(tec, eec, n);", "+            } ", "+            else {", "+              checkCastStaticRules(tec, eec, castExp);", "-          } else if (tc.isInterface() && tc != Cloneable.class) {", "-            throw new ExecutionError(\"cast\", n);", "-          } else if (tc != Object.class) {", "-            throw new ExecutionError(\"cast\", n);", "+          } ", "+          else if (tc.isInterface() && tc != Cloneable.class) {", "+            throw new ExecutionError(\"cast\", castExp);", "-        } else if (ec.isInterface()) {", "+          else if (tc != Object.class) {", "+            throw new ExecutionError(\"cast\", castExp);", "+          }", "+        }", "+        else if (ec.isInterface()) {", "-          } else if (tc.isArray()) {", "+          } ", "+          else if (tc.isArray()) {", "-              throw new ExecutionError(\"cast\", n);", "+              throw new ExecutionError(\"cast\", castExp);", "-          } else if (Modifier.isFinal(tc.getModifiers())) {", "+          } ", "+          else if (Modifier.isFinal(tc.getModifiers())) {", "-              throw new ExecutionError(\"cast\", n);", "+              throw new ExecutionError(\"cast\", castExp);", "-        } else if (tc.isInterface()) {", "+        } ", "+        else if (tc.isInterface()) {", "-              throw new ExecutionError(\"cast\", n);", "+              throw new ExecutionError(\"cast\", castExp);", "-        } else if (!ec.isAssignableFrom(tc) && !tc.isAssignableFrom(ec)) {", "-          throw new ExecutionError(\"cast\", n);", "+        }", "+        else if (ec.isPrimitive() && _isBoxingType(tc) && ec != boolean.class) {", "+          castExp.setExpression(_box(castExp.getExpression(), tc));", "+        }", "+        else if (!ec.isAssignableFrom(tc) && !tc.isAssignableFrom(ec)) {", "+          throw new ExecutionError(\"cast\", castExp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "950817e42abc55afb51977514211c94a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "      private static boolean _boxesTo(Class prim, Class ref)", "signatureAfterChange": "      private static boolean _boxesTo(Class prim, Class ref)", "diff": ["-      (prim == int.class     && ref == Integer.class)   ||", "-      (prim == long.class    && ref == Long.class)      ||", "-      (prim == byte.class    && ref == Byte.class)      ||", "-      (prim == char.class    && ref == Character.class) ||", "-      (prim == short.class   && ref == Short.class)     ||", "+      (prim == int.class     && (ref == Integer.class   || ", "+                                 ref == Long.class      || ", "+                                 ref == Double.class    || ", "+                                 ref == Float.class))   ||", "+      (prim == long.class    && (ref == Long.class      || ", "+                                 ref == Double.class    || ", "+                                 ref == Float.class))   ||", "+      (prim == byte.class    && (ref == Byte.class      || ", "+                                 ref == Short.class     || ", "+                                 ref == Integer.class   || ", "+                                 ref == Long.class      || ", "+                                 ref == Double.class    || ", "+                                 ref == Float.class))   ||", "+      (prim == char.class    && (ref == Character.class || ", "+                                 ref == Integer.class   || ", "+                                 ref == Long.class      || ", "+                                 ref == Double.class    || ", "+                                 ref == Float.class))   ||", "+      (prim == short.class   && (ref == Short.class     || ", "+                                 ref == Integer.class   || ", "+                                 ref == Long.class      || ", "+                                 ref == Double.class    || ", "+                                 ref == Float.class))   ||", "-      (prim == float.class   && ref == Float.class)     ||", "+      (prim == float.class   && (ref == Float.class     || ", "+                                 ref == Double.class))  ||", "+  }"]}], "num": 18659}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "838bb6ec1fc41290df50b15e72b468a2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf990e9950ee2383b07a46c093ca21b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "536c00239bf186b1c81bb087b131d4cbb6302c23", "commitAfterChange": "ed1069955672117b4c9aac0875c5704fb5071788", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "         private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["-    Map<JavaVersion.FullVersion, JDKToolsLibrary> results = new TreeMap<JavaVersion.FullVersion, JDKToolsLibrary>();", "+    Map<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>> results =", "+      new TreeMap<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>>();", "-      if (fromConfig.isValid()) { results.put(fromConfig.version().majorVersion().fullVersion(), fromConfig); }", "+      if (fromConfig.isValid()) { ", "+        JarJDKToolsLibrary.msg(\"From config: \"+fromConfig);", "+        putLib(results,", "+               fromConfig.version().vendor(),", "+               fvOnly(fromConfig.version()),", "+               fromConfig);", "+      }", "+      else { JarJDKToolsLibrary.msg(\"From config: invalid \"+fromConfig); }", "+    else { JarJDKToolsLibrary.msg(\"From config: not set\"); }", "-    if (fromRuntime.isValid() && !results.containsKey(runtimeVersion)) { results.put(runtimeVersion, fromRuntime); }", "+    if (fromRuntime.isValid()) {", "+      if ((getLib(results, runtimeVersion.vendor(), fvOnly(runtimeVersion))==null)) {", "+        JarJDKToolsLibrary.msg(\"From runtime: \"+fromRuntime);", "+        putLib(results,", "+               runtimeVersion.vendor(),", "+               fvOnly(runtimeVersion),", "+               fromRuntime);", "+      }", "+      else { JarJDKToolsLibrary.msg(\"From runtime: duplicate \"+fromRuntime); }", "+    }", "+    else { JarJDKToolsLibrary.msg(\"From runtime: invalid \"+fromRuntime); }", "-      BooleanOption displayAllOption = edu.rice.cs.drjava.config.OptionConstants.DISPLAY_ALL_COMPILER_VERSIONS;", "-      if (!DrJava.getConfig().getSetting(displayAllOption).booleanValue()) {", "-        tVersion = tVersion.majorVersion().fullVersion();", "+      if (getLib(results, tVersion.vendor(), fvOnly(tVersion))==null) {", "+        JarJDKToolsLibrary.msg(\"From search: \"+t);", "+        putLib(results,", "+               tVersion.vendor(),", "+               fvOnly(tVersion),", "+               t);", "-      if (!results.containsKey(tVersion)) { results.put(tVersion, t); }", "+      else { JarJDKToolsLibrary.msg(\"From search: duplicate \"+t); }", "-    return IterUtil.reverse(results.values());", "+    Iterable<JDKToolsLibrary> acc = IterUtil.empty();", "+    for(Map<JavaVersion.FullVersion, JDKToolsLibrary> vmap: results.values()) {", "+      acc = IterUtil.compose(acc, vmap.values());", "+    }", "+    return IterUtil.reverse(acc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd21e583cc9703ac3d5e77cc14028129", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileBuilder.java", "commitBeforeChange": "314c962d7f6ed2c6b00f5edc6e764b582b016016", "commitAfterChange": "3b2b8c4279d3d3c19a0254256362d4d46aeeddaf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private void makeEntries(StringBuffer buffer, Vector<File> files, String roottag, boolean checkrelpath)", "signatureAfterChange": "   private String encodeDocFile(DocFile df, String prefix, boolean relative) throws IOException", "diff": ["-  ", "-  private void makeEntries(StringBuffer buffer, Vector<File> files, String roottag, boolean checkrelpath)", "-  {", "-    buffer.append(\"(\" + roottag + \"\\n\");", "-    ", "-    for(int i = 0; i<files.size(); i++)", "-    {", "-      //System.out.println(files.get(i).getName());", "-      try", "-      {", "-        String path = files.elementAt(i).getCanonicalPath();", "-        path = path.replace('\\\\', '/');", "-        if(path.startsWith(_projectPath) || !checkrelpath)", "-        {", "-          if(checkrelpath)", "-          {", "-            path = path.substring(_projectPath.length());", "-          }", "-          buffer.append(\"  (\" + path + \")\\n\");", "-        }", "-      catch(IOException e)", "-      {", "-      ", "-    buffer.append(\")\\n\");", "+   */", "+  private String encodeDocFile(DocFile df, String prefix, boolean relative) throws IOException {", "+    String ret = \"\";", "+    String path;", "+    if (relative) {", "+      path = makeRelative(df);", "+    }", "+    else {", "+      path = df.getCanonicalPath();", "+    }", "+    ret += prefix + \"(file (name \" + convertToLiteral(path) + \")\";", "+    ", "+    Pair<Integer,Integer> p1 = df.getSelection();", "+    Pair<Integer,Integer> p2 = df.getScroll();", "+    boolean active = df.isActive();", "+    ", "+    // Add prefix to the next line if any tags exist", "+    if (p1 != null || p2 != null || active) {", "+      ret += \"\\n\" + prefix + \"      \";", "+    }", "+    // The next three tags go on the same line (if they exist)", "+    if (p1 != null) {", "+      ret += \"(select \" + p1.getFirst() + \" \" + p1.getSecond() + \")\";", "+    }", "+    if (p2 != null) {", "+      ret += \"(scroll \" + p2.getFirst() + \" \" + p2.getSecond() + \")\";", "+    }", "+    if (active) {", "+      ret += \"(active)\";", "+    }", "+    // the next tag goes on the next line if at all", "+    String pack = df.getPackage();", "+    if (pack != null) {", "+      ret += \"\\n\" + prefix + \"      \"; // add prefix", "+      ret += \"(package \" + pack + \")\";", "+    }", "+    ", "+    ret += \")\"; // close the file expression", "+    ", "+    return ret;", "+  }"]}], "num": 13374}
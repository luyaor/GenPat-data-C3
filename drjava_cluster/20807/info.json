{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e9b1ac80347566bdb95dea17649ebc4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c77bfe06b244593563c84300c6c534", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "commitAfterChange": "72ee238f22e4ae6534ad887ff5bcbab9970c036e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   private void _setupDisplayPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupDisplayPanel(ConfigPanel panel)", "diff": ["+   ", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "+        ", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_FULLY_QUALIFIED,", "-                                                  \"Display Fully-Qualified Class Names in \\\"Go to File\\\" Dialog\", this,", "-                                                  \"<html>Whether to also display fully-qualified class names in the \\\"Go to File\\\" dialog.<br>\"+", "-                                                         \"Enabling this option on network drives might cause the dialog to display after a slight delay.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES,", "-                                                  \"Scan Class Files After Each Compile For Auto-Completion and Auto-Import\", this,", "-                                                  \"<html>Whether to scan the class files after a compile to generate class names<br>\"+", "-                                                         \"used for auto-completion and auto-import.<br>\"+", "-                                                         \"Enabling this option will slow compiles down.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_JAVAAPI,", "-                                                  \"Consider Java API Classes for Auto-Completion\", this,", "-                                                  \"Whether to use the names of the Java API classes for auto-completion as well.\"));", "+    ", "+    LabelComponent label = new LabelComponent(\" \", this);", "+    label.setEntireColumn(true);", "+    addOptionComponent(panel, label);", "+    BooleanOptionComponent checkbox = ", "+      new BooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_FULLY_QUALIFIED,", "+                                 \"<html><p align=\\\"right\\\">\"+StringOps.splitStringAtWordBoundaries(\"Display Fully-Qualified Class Names in \\\"Go to File\\\" Dialog\",", "+                                                                                                   27, \"<br>\", SEPS)+\"</p></html>\", this,", "+                                 \"<html>Whether to also display fully-qualified class names in the \\\"Go to File\\\" dialog.<br>\"+", "+                                 \"Enabling this option on network drives might cause the dialog to display after a slight delay.</html>\");", "+    addOptionComponent(panel, checkbox);", "+    ", "+    label = new LabelComponent(\" \", this);", "+    label.setEntireColumn(true);", "+    addOptionComponent(panel, label);", "+    checkbox =", "+      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES,", "+                                 \"<html><p align=\\\"right\\\">\"+StringOps.splitStringAtWordBoundaries(\"Scan Class Files After Each Compile for Auto-Completion and Auto-Import\",", "+                                                                                                   27, \"<br>\", SEPS)+\"</p></html>\", this,", "+                                 \"<html>Whether to scan the class files after a compile to generate class names<br>\"+", "+                                 \"used for auto-completion and auto-import.<br>\"+", "+                                 \"Enabling this option will slow compiles down.</html>\");", "+    addOptionComponent(panel, checkbox);", "+    ", "+    label = new LabelComponent(\" \", this);", "+    label.setEntireColumn(true);", "+    addOptionComponent(panel, label);", "+    checkbox =", "+      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_JAVAAPI,", "+                                 \"<html><p align=\\\"right\\\">\"+StringOps.splitStringAtWordBoundaries(\"Consider Java API Classes for Auto-Completion\",", "+                                                                                                   27, \"<br>\", SEPS)+\"</p></html>\", this,", "+                                 \"Whether to use the names of the Java API classes for auto-completion as well.\");", "+    addOptionComponent(panel, checkbox);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75fc5480899e7c7f0d10ecd68034d8f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "commitAfterChange": "0b53b816728d7888dd8424a695754000657f778a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public void testSaveAlreadySaved() throws BadLocationException, IOException", "signatureAfterChange": "   public void testSaveAlreadySaved() throws BadLocationException, IOException", "diff": ["+    //disable file backups, remember original setting", "+    Boolean backupStatus = DrJava.getConfig().getSetting(BACKUP_FILES);", "+    DrJava.getConfig().setSetting(BACKUP_FILES, Boolean.FALSE);", "+    ", "-    // Listener to use on future save", "+    // Listener to use on future saves", "+", "+    File backup = new File(file.getPath() + \"~\");", "+    backup.delete();", "-    ", "+", "-    assertEquals(\"contents of saved file\",", "+    assertEquals(\"contents of saved file 2nd write\",", "+", "+    assertEquals(\"no backup was made\", false, backup.exists());", "+", "+    ", "+    //enable file backups", "+    DrJava.getConfig().setSetting(BACKUP_FILES, Boolean.TRUE);", "+    ", "+    // Muck up the document", "+    changeDocumentText(FOO_TEXT, doc);", "+", "+    // Save over top of the previous file", "+    doc.saveFile(new FileSelector(file));", "+    listener.assertSaveCount(2);", "+    ", "+    assertEquals(\"contents of saved file 3rd write\",", "+                 FOO_TEXT,", "+                 FileOps.readFileAsString(file));", "+    assertEquals(\"contents of backup file 3rd write\",", "+\t\t BAR_TEXT,", "+\t\t FileOps.readFileAsString(backup));", "+", "+    /* Set the config back to the original option */", "+    DrJava.getConfig().setSetting(BACKUP_FILES, backupStatus);"]}], "num": 20807}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afb0a62ad42d4ec3edab49088ccf2ee2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a95212544d9f9cc9518a44c7eb4e85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    public void setSearchBackwards(boolean searchBackwards)", "signatureAfterChange": "    public void setSearchBackwards(boolean searchBackwards)", "diff": ["-    if (_searchBackwards != searchBackwards) {", "+    if (_isForward == searchBackwards) {", "-      // same as the _lastFindWord, we know the user just found _findWord, so skip one find.", "-      if (isOnMatch() && _findWord.equals(_lastFindWord)) _skipOneFind = true;", "-      else _skipOneFind = false;", "+      // same as the _lastFindWord, we know the user just found _findWord, so skip over this match.", "+      if (isOnMatch() && _findWord.equals(_lastFindWord)) _skipText = true;", "+      else _skipText = false;", "-    _searchBackwards = searchBackwards;", "+    _isForward = ! searchBackwards;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff5013057784971d575506ee05c749bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void setSearchBackwards(boolean searchBackwards)", "signatureAfterChange": "    public void setSearchBackwards(boolean searchBackwards)", "diff": ["+  public void setSearchBackwards(boolean searchBackwards) {", "+    if (_searchBackwards != searchBackwards) {", "+      // If we switch from searching forward to searching backwards or viceversa,", "+      // isOnMatch is true, and _findword is the same as the _lastFindWord,", "+      // we know the user just found _findWord, so skip one find.", "+      if (isOnMatch() && _findWord.equals(_lastFindWord))  _skipOneFind = true;", "+      else _skipOneFind = false;", "+    _searchBackwards = searchBackwards;", "+  }", "-    public void setSearchBackwards(boolean searchBackwards) { _state.setSearchBackwards(searchBackwards); }"]}], "num": 24172}
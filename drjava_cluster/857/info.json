{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f78b7925a04e5830f52d63d5b8234ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50fe3b7386c5332d91cc470090aeeaee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "5c04353ab7b698c453865873d8b52819717956e7", "commitAfterChange": "30a085f8fe1392fe66c465a0e90bdaac3e7000b4", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "   protected static PrimitiveType _correspondingPrimType(Class<?> refType)", "signatureAfterChange": "   protected static PrimitiveType _correspondingPrimType(Class<?> refClass)", "diff": ["-  protected static PrimitiveType _correspondingPrimType(Class<?> refType) {", "-    if (refType == Boolean.class) {", "+  protected static PrimitiveType _correspondingPrimType(Class<?> refClass) {", "+    if (refClass == Boolean.class) {", "-    else if (refType == Byte.class) {", "+    else if (refClass == Byte.class) {", "-    else if (refType == Character.class) {", "+    else if (refClass == Character.class) {", "-    else if (refType == Short.class) {", "+    else if (refClass == Short.class) {", "-    else if (refType == Integer.class) {", "+    else if (refClass == Integer.class) {", "-    else if (refType == Long.class) {", "+    else if (refClass == Long.class) {", "-    else if (refType == Float.class) {", "+    else if (refClass == Float.class) {", "-    else if (refType == Double.class) {", "+    else if (refClass == Double.class) {", "-      throw new RuntimeException(\"No corresponding primitive type for reference type \" + ", "-                                 refType + \".\");", "+      throw new RuntimeException(\"No corresponding primitive type for reference class \" + ", "+                                 refClass + \".\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "831132eabf3cda2a4d48935bd17492fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public TypeData forValueReturnStatementOnly(ValueReturnStatement that, TypeData value_result)", "signatureAfterChange": "   public TypeData forValueReturnStatementOnly(ValueReturnStatement that, TypeData valueRes)", "diff": ["-  public TypeData forValueReturnStatementOnly(ValueReturnStatement that, TypeData value_result) {", "+  public TypeData forValueReturnStatementOnly(ValueReturnStatement that, TypeData valueRes) {", "-      return value_result;", "+      return valueRes;", "-    if (value_result == null || ! assertFound(value_result, that)) { ", "+    if (valueRes == null || ! assertFound(valueRes, that)) { ", "-    if (value_result != null && !value_result.isInstanceType()) {", "-     _addError(\"You cannot return a class or interface name.  Perhaps you meant to say \" + value_result.getName() +", "+    if (valueRes != null && !valueRes.isInstanceType()) {", "+     _addError(\"You cannot return a class or interface name.  Perhaps you meant to say \" + valueRes.getName() +", "-     return value_result.getInstanceData();", "+     return valueRes.getInstanceData();", "-    else if (!_isAssignableFrom(expected, value_result.getSymbolData())) {", "+    else if (!_isAssignableFrom(expected, valueRes.getSymbolData())) {", "-                  + \" but here returned type: \" + '\"' + value_result.getName() + '\"', ", "+                  + \" but here returned type: \" + '\"' + valueRes.getName() + '\"', ", "-    return value_result;", "+    return valueRes;"]}], "num": 857}
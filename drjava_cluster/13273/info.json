{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d11265938df9e6ddd47ad28d9e1789e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4e93df18298ebd362cf04be58f16dc3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PathClassLoader.java", "commitBeforeChange": "69e7e19a5f68434c93c1b25008cd74aa5c333824", "commitAfterChange": "50d7405dbdeb05d9fc0520b24d57e1f92428ff65", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "      protected Enumeration<URL> findResources(String name) throws IOException", "signatureAfterChange": "      protected Enumeration<URL> findResources(String name) throws IOException", "diff": ["-    Iterator<URL> result = EmptyIterator.make();", "-    for (File f : _path) {", "-      try {", "-        URL url = f.toURI().toURL();", "-        Enumeration<URL> newResults = new URLClassLoader(new URL[]{ url }).findResources(name);", "-        if (newResults.hasMoreElements()) {", "-          result = ComposedIterator.make(result, IterUtil.asIterator(newResults));", "-        }", "-      }", "-      catch (IllegalArgumentException e) { error.log(e); }", "-      catch (MalformedURLException e) { error.log(e); }", "-      // just skip the path element if there's an error", "-    }", "-    return IterUtil.asEnumeration(result);", "+    if (!IterUtil.isEqual(_path, _urlLoaderPath)) { updateURLLoader(); }", "+    return _urlLoader.findResources(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb41000c7bdba0c4c8dc19c0a1e745bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PathClassLoader.java", "commitBeforeChange": "69e7e19a5f68434c93c1b25008cd74aa5c333824", "commitAfterChange": "50d7405dbdeb05d9fc0520b24d57e1f92428ff65", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "      protected URL findResource(String name)", "signatureAfterChange": "      protected URL findResource(String name)", "diff": ["-    for (File f : _path) {", "-      //debug.logValues(new String[]{\"searching for resource\",\"in file\"}, name, _path);", "-      try {", "-        // We use URLClassLoader to find the resource, not because we care about", "-        // most of that class's functionality, but because it implements the core", "-        // functionality we need in URLClassLoader.findResource()", "-        URL url = f.toURI().toURL();", "-        // TODO: would it be useful to cache created URLClassLoaders for better performance?", "-        URL result = new URLClassLoader(new URL[]{ url }, EmptyClassLoader.INSTANCE).findResource(name);", "-        if (result != null) { return result; }", "-      }", "-      catch (IllegalArgumentException e) { error.log(e); }", "-      catch (MalformedURLException e) { error.log(e); }", "-      // just skip the path element if there's an error", "-    }", "-    return null;", "+    if (!IterUtil.isEqual(_path, _urlLoaderPath)) { updateURLLoader(); }", "+    return _urlLoader.findResource(name);"]}], "num": 13273}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09872559d7d43f50fca085abe19ab64a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28eb3a0d4779e51f62212c80dfe0aca6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtilTest.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public void testArrayIterable()", "signatureAfterChange": "    public void testArrayIterable()", "diff": ["-    assertTrue(isEmpty(arrayIterable(new String[0])));", "-    assertTrue(isEmpty(arrayIterable(new boolean[0])));", "-    assertTrue(isEmpty(arrayIterable(new char[0])));", "-    assertTrue(isEmpty(arrayIterable(new byte[0])));", "-    assertTrue(isEmpty(arrayIterable(new short[0])));", "-    assertTrue(isEmpty(arrayIterable(new int[0])));", "-    assertTrue(isEmpty(arrayIterable(new long[0])));", "-    assertTrue(isEmpty(arrayIterable(new float[0])));", "-    assertTrue(isEmpty(arrayIterable(new double[0])));", "+    assertTrue(isEmpty(asIterable(new String[0])));", "+    assertTrue(isEmpty(asIterable(new boolean[0])));", "+    assertTrue(isEmpty(asIterable(new char[0])));", "+    assertTrue(isEmpty(asIterable(new byte[0])));", "+    assertTrue(isEmpty(asIterable(new short[0])));", "+    assertTrue(isEmpty(asIterable(new int[0])));", "+    assertTrue(isEmpty(asIterable(new long[0])));", "+    assertTrue(isEmpty(asIterable(new float[0])));", "+    assertTrue(isEmpty(asIterable(new double[0])));", "-    assertTrue(isEmpty(arrayIterable((Object) new String[0])));", "-    assertTrue(isEmpty(arrayIterable((Object) new boolean[0])));", "-    assertTrue(isEmpty(arrayIterable((Object) new char[0])));", "-    assertTrue(isEmpty(arrayIterable((Object) new byte[0])));", "-    assertTrue(isEmpty(arrayIterable((Object) new short[0])));", "-    assertTrue(isEmpty(arrayIterable((Object) new int[0])));", "-    assertTrue(isEmpty(arrayIterable((Object) new long[0])));", "-    assertTrue(isEmpty(arrayIterable((Object) new float[0])));", "-    assertTrue(isEmpty(arrayIterable((Object) new double[0])));", "+    assertTrue(isEmpty(arrayAsIterable((Object) new String[0])));", "+    assertTrue(isEmpty(arrayAsIterable((Object) new boolean[0])));", "+    assertTrue(isEmpty(arrayAsIterable((Object) new char[0])));", "+    assertTrue(isEmpty(arrayAsIterable((Object) new byte[0])));", "+    assertTrue(isEmpty(arrayAsIterable((Object) new short[0])));", "+    assertTrue(isEmpty(arrayAsIterable((Object) new int[0])));", "+    assertTrue(isEmpty(arrayAsIterable((Object) new long[0])));", "+    assertTrue(isEmpty(arrayAsIterable((Object) new float[0])));", "+    assertTrue(isEmpty(arrayAsIterable((Object) new double[0])));", "-      arrayIterable(new Object());", "+      arrayAsIterable(new Object());", "-    Iterator<Integer> intIter = arrayIterable(ints).iterator();", "+    Iterator<Integer> intIter = asIterable(ints).iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd737c2ae03bc4ae87d7a6badc55f86b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["-    CompoundUndoManager undoManager = _defModel.getUndoManager();", "+    CompoundUndoManager undoManager = _doc.getUndoManager();", "-    _defModel.addUndoableEditListener(undoManager);", "+    _doc.addUndoableEditListener(undoManager);", "-    _defModel.insertString(0, text, null);", "-    assertEquals(\"Should have inserted the text properly.\", text, _defModel.getText());", "+    _doc.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, _doc.getText());", "-    _defModel.indentLines(0, _defModel.getLength());", "-    assertEquals(\"Should have indented correctly.\", indented,  _defModel.getText());", "+    indentLines(0, _doc.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented,  _doc.getText());", "-    assertEquals(\"Should have undone correctly.\", \"\",  _defModel.getText());", "+    assertEquals(\"Should have undone correctly.\", \"\",  _doc.getText());", "-    key = _defModel.getUndoManager().startCompoundEdit();", "+    key = _doc.getUndoManager().startCompoundEdit();", "-    _defModel.insertString(0, text, null);", "+    _doc.insertString(0, text, null);", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.indentLines(0, _defModel.getLength());", "+    indentLines(0, _doc.getLength());", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.commentLines(0, _defModel.getLength());", "+    _doc.commentLines(0, _doc.getLength());", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.getUndoManager().undo();", "+    _doc.getUndoManager().undo();", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.getUndoManager().undo();", "+    _doc.getUndoManager().undo();", "-                 _defModel.getText());", "+                 _doc.getText());", "-    key = _defModel.getUndoManager().startCompoundEdit();", "+    key = _doc.getUndoManager().startCompoundEdit();", "-    _defModel.insertString(0, text, null);", "+    _doc.insertString(0, text, null);", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.indentLines(0, _defModel.getLength());", "+    indentLines(0, _doc.getLength());", "-                 _defModel.getText());", "+                 _doc.getText());", "-//      _defModel.getUndoManager().undo();", "+//      _doc.getUndoManager().undo();", "-//      _defModel.getUndoManager().redo();", "+//      _doc.getUndoManager().redo();", "-      _defModel.getUndoManager().endCompoundEdit(key + 2);", "+      _doc.getUndoManager().endCompoundEdit(key + 2);", "-    _defModel.indentLines(0, _defModel.getLength());", "-    assertEquals(\"Should have indented correctly.\", indented, _defModel.getText());", "+    indentLines(0, _doc.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, _doc.getText());", "-//      _defModel.getUndoManager().undo();", "+//      _doc.getUndoManager().undo();", "-//    _defModel.getUndoManager().endCompoundEdit(key);", "-    _defModel.getUndoManager().undo();", "-    assertEquals(\"Should have undone the indenting and inserting.\", \"\", _defModel.getText());", "+//    _doc.getUndoManager().endCompoundEdit(key);", "+    _doc.getUndoManager().undo();", "+    assertEquals(\"Should have undone the indenting and inserting.\", \"\", _doc.getText());"]}], "num": 26405}
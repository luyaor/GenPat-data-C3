{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f811747149f87a6f39a4cd97c4120616", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "403dcb2209487c2cf21d28805736618c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testParenDelimsWithText() throws BadLocationException", "signatureAfterChange": "   public void testParenDelimsWithText() throws BadLocationException", "diff": ["-    assertTrue(\"line after paren\", rule.applyRule(_doc, 9, Indenter.OTHER));", "-    assertTrue(\"line after comma\", rule.applyRule(_doc, 12, Indenter.OTHER));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 15, Indenter.OTHER));", "-    assertTrue(\"line after bracket\", rule.applyRule(_doc, 18, Indenter.OTHER));", "-    assertTrue(\"line after close paren\", !rule.applyRule(_doc, 24, Indenter.OTHER));", "+    assertTrue(\"line after paren\", rule.applyRule(_doc, 9, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after comma\", rule.applyRule(_doc, 12, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 15, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after bracket\", rule.applyRule(_doc, 18, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after close paren\", !rule.applyRule(_doc, 24, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49ce41cebb59f36e7b86cb6fb1f03f1b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testParenDelimsNoText() throws BadLocationException", "signatureAfterChange": "   public void testParenDelimsNoText() throws BadLocationException", "diff": ["-    assertTrue(\"line after paren\", rule.applyRule(_doc, 2, Indenter.OTHER));", "-    assertTrue(\"line after comma\", rule.applyRule(_doc, 4, Indenter.OTHER));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 6, Indenter.OTHER));", "-    assertTrue(\"line after bracket\", rule.applyRule(_doc, 8, Indenter.OTHER));", "-    assertTrue(\"line after text\", !rule.applyRule(_doc, 12, Indenter.OTHER));", "+    assertTrue(\"line after paren\", rule.applyRule(_doc, 2, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after comma\", rule.applyRule(_doc, 4, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 6, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after bracket\", rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after text\", !rule.applyRule(_doc, 12, Indenter.IndentReason.OTHER));"]}], "num": 22864}
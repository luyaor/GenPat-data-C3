{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a9ea61482ebd060a91944d7e58b89a4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34d44bdd508436d8f3f5d6d3008e94c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 111, "signatureBeforeChange": "   public static <S, T, U> Lambda<S, U> compose(final Lambda<? super S, ? extends T> l1,                                                 final Lambda<? super T, ? extends U> l2)", "signatureAfterChange": "   public static <S, T, U> Lambda<S, U> compose(Lambda<? super S, ? extends T> l1,                                                 Lambda<? super T, ? extends U> l2)", "diff": ["-  /** @return  A lambda that executes {@code l2} with the result of {@code l1} */", "-  public static <S, T, U> Lambda<S, U> compose(final Lambda<? super S, ? extends T> l1, ", "-                                               final Lambda<? super T, ? extends U> l2) {", "-    return new Lambda<S, U>() {", "-      public U value(S arg) { return l2.value(l1.value(arg)); }", "-    };", "+  /** Create a lambda that executes {@code l2} with the result of {@code l1}. */", "+  public static <S, T, U> Lambda<S, U> compose(Lambda<? super S, ? extends T> l1, ", "+                                               Lambda<? super T, ? extends U> l2) {", "+    return new ComposedLambda<S, T, U>(l1, l2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf749efab9f96e357a47ec28a5eaa63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 114, "signatureBeforeChange": "   public static <S1, S2, T, U> Lambda2<S1, S2, U>      compose(final Lambda2<? super S1, ? super S2, ? extends T> l1,              final Lambda<? super T, ? extends U> l2)", "signatureAfterChange": "   public static <S1, S2, T, U> Lambda2<S1, S2, U> compose(Lambda2<? super S1, ? super S2, ? extends T> l1,                                                            Lambda<? super T, ? extends U> l2)", "diff": ["-  /** @return  A lambda that executes {@code l2} with the result of {@code l1} */", "-  public static <S1, S2, T, U> Lambda2<S1, S2, U> ", "-    compose(final Lambda2<? super S1, ? super S2, ? extends T> l1, ", "-            final Lambda<? super T, ? extends U> l2) {", "-    return new Lambda2<S1, S2, U>() {", "-      public U value(S1 arg1, S2 arg2) { return l2.value(l1.value(arg1, arg2)); }", "-    };", "+  /** Create a lambda that executes {@code l2} with the result of {@code l1}. */", "+  public static <S1, S2, T, U> Lambda2<S1, S2, U> compose(Lambda2<? super S1, ? super S2, ? extends T> l1, ", "+                                                          Lambda<? super T, ? extends U> l2) {", "+    return new ComposedLambda2<S1, S2, T, U>(l1, l2);", "+  }"]}], "num": 22557}
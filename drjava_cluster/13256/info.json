{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6548052e0d9014e152a0659c35c971b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "353278b3741331bb713005b7c035b21f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testShouldBeErrors()", "signatureAfterChange": "   public void testShouldBeErrors()", "diff": ["-        return pathName.getAbsolutePath().endsWith(\".dj1\");", "+//        return pathName.getAbsolutePath().endsWith(\".dj1\");", "+        return pathName.getAbsolutePath().endsWith(\"BadClass.dj1\");", "-      ", "+//    System.err.println(\"In testShouldBeErrors, testFiles = \" + Arrays.toString(testFiles));", "-      llc = new LanguageLevelConverter();", "-      result = llc.convert(new File[] {testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "-      assertTrue(\"should be parse exceptions or visitor exceptions in file \" + testFiles[i].getName(), !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+//      System.err.println(\"TESTING \" + testFiles[i]);", "+      LanguageLevelConverter llc1 = new LanguageLevelConverter();", "+      result = llc1.convert(new File[] {testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+      assertTrue(\"should be parse exceptions or visitor exceptions in file \" + testFiles[i].getName(), ", "+                 ! result.getFirst().isEmpty() || ! result.getSecond().isEmpty());", "-    llc = new LanguageLevelConverter();", "+    LanguageLevelConverter llc2 = new LanguageLevelConverter();", "-    result = llc.convert(new File[] { f }, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "-    assertTrue(\"should be parse exceptions or visitor exceptions in file \" + f.getName(), !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+    result = llc2.convert(new File[] { f }, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    assertTrue(\"should be parse exceptions or visitor exceptions in file \" + f.getName(), ", "+               ! result.getFirst().isEmpty() || ! result.getSecond().isEmpty());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65b0d052b03e4dd7fd6bedc190ac1eb8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsView.java", "commitBeforeChange": "d2486bb242e4127e9ef18191ee729a7dd368e35a", "commitAfterChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void createPartControl(Composite parent)", "signatureAfterChange": "   public void createPartControl(Composite parent)", "diff": ["-    _styledText = new StyledText(parent, SWT.WRAP | SWT.V_SCROLL);", "+    setTextPane(new StyledText(parent, SWT.WRAP | SWT.V_SCROLL));", "+    ", "-    SimpleInteractionsDocument doc = new SimpleInteractionsDocument(adapter);", "-    _controller = new InteractionsController(adapter, doc, this);", "+    EclipseInteractionsModel model = new EclipseInteractionsModel(adapter);", "+    setController(new InteractionsController(model, adapter, this));", "+    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a93b2eb4e9d9efe5b157c6ab95b6b684", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static File makeRelativeTo(File abs, File base) throws IOException, SecurityException", "signatureAfterChange": "   public static File makeRelativeTo(File f, File b) throws IOException, SecurityException", "diff": ["-  public static File makeRelativeTo(File abs, File base) throws IOException, SecurityException{", "-    base = base.getCanonicalFile();", "-    abs  = abs.getCanonicalFile();", "-    if (!base.isDirectory()) base = base.getParentFile();", "+  public static File makeRelativeTo(File f, File b) throws IOException, SecurityException {", "+    File base = b.getCanonicalFile();", "+    File abs  = f.getCanonicalFile();  // If  f is relative, uses current working directory (\"user.dir\")", "+    if (! base.isDirectory()) base = base.getParentFile();", "-    if (!abs.isDirectory()) {", "+    if (! abs.isDirectory()) {", "-      last = tmp.substring(tmp.lastIndexOf(File.separator)+1);", "+      last = tmp.substring(tmp.lastIndexOf(File.separator) + 1);", "+//    System.err.println(\"makeRelativeTo called; f = \" + f + \" = \" + abs + \"; b = \" + b + \" = \" + base);", "+//    System.err.println(\"makeRelativeTo(\" + f + \", \" + b + \") = \" + result);"]}], "num": 13256}
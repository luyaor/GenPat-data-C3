{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6803817aee7087b0d0047415f60987a4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "945c304fee123cf570439841be0b37f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 257, "signatureBeforeChange": "      public StaticFieldReference lookupStaticField(Type t, final String name)     throws UnmatchedLookupException", "signatureAfterChange": "      public StaticFieldReference lookupStaticField(Type t, String name, Access.Module accessModule)     throws UnmatchedLookupException", "diff": ["-  public StaticFieldReference lookupStaticField(Type t, final String name)", "+  public StaticFieldReference lookupStaticField(Type t, String name, Access.Module accessModule)", "-    FieldFinder<StaticFieldReference> finder = new FieldFinder<StaticFieldReference>(name, true) {", "+    FieldFinder<StaticFieldReference> finder = new FieldFinder<StaticFieldReference>(name, accessModule, true) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac794d99bf5143944a7195c70b06690d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 262, "methodNumberAfterChange": 263, "signatureBeforeChange": "      public boolean containsClass(Type t, final String name)", "signatureAfterChange": "      public boolean containsClass(Type t, String name, Access.Module accessModule)", "diff": ["-  public boolean containsClass(Type t, final String name) {", "-    return new ClassFinder(name, EMPTY_TYPE_ITERABLE, false).hasMatch(t);", "+  public boolean containsClass(Type t, String name, Access.Module accessModule) {", "+    return new ClassFinder(name, EMPTY_TYPE_ITERABLE, accessModule, false).hasMatch(t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae5a7a20e8a55757572e41ff001ee64c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 263, "methodNumberAfterChange": 264, "signatureBeforeChange": "      public boolean containsStaticClass(Type t, final String name)", "signatureAfterChange": "      public boolean containsStaticClass(Type t, String name, Access.Module accessModule)", "diff": ["-  public boolean containsStaticClass(Type t, final String name) {", "-    return new ClassFinder(name, EMPTY_TYPE_ITERABLE, true).hasMatch(t);", "+  public boolean containsStaticClass(Type t, String name, Access.Module accessModule) {", "+    return new ClassFinder(name, EMPTY_TYPE_ITERABLE, accessModule, true).hasMatch(t);"]}], "num": 11945}
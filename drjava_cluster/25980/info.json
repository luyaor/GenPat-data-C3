{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af8c008ac00e5333fc254fb135230e8b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a1510272b74513e25c4590ecea7ab29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 463, "methodNumberAfterChange": 463, "signatureBeforeChange": "   protected OpenDefinitionsDocument _getOpenDocument(File file)", "signatureAfterChange": "   protected OpenDefinitionsDocument _getOpenDocument(File file)", "diff": ["-    ", "-//    System.err.println(\"_getOpenDocument(\" + file + \") called\");", "-    ", "-    for (OpenDefinitionsDocument doc: getOpenDefinitionsDocuments()) {", "-      try {", "-        File thisFile = null;", "-        try { thisFile = doc.getFile(); }", "-        catch (FileMovedException fme) { thisFile = fme.getFile(); } // File is invalid, but compare anyway", "-        finally {", "-          // Always do the comparison", "-          if (thisFile != null) {", "-            try {", "-              // Compare canonical paths if possible", "-              if (thisFile.getCanonicalFile().equals(file.getCanonicalFile())) return doc;", "-            }", "-            catch (IOException ioe) {", "-              // Can be thrown from getCanonicalFile. If so, compare the files themselves", "-              if (thisFile.equals(file)) return doc;", "-            }", "-          }", "-        }", "-      }", "-      catch (IllegalStateException ise) { /* No file in doc; fail silently */ }", "-    }", "-    return null;", "+    synchronized(_documentsRepos) { return _documentsRepos.get(file); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a181812e56572263a534b39a5f8a1cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testReopenFile() throws BadLocationException, IOException", "signatureAfterChange": "   public void testReopenFile() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestListener() {", "-      public void fileOpened(OpenDefinitionsDocument doc) {", "-        File file = null;", "-        try { file = doc.getFile(); }", "-        catch (FileMovedException fme) {", "-          // We know file should exist", "-          fail(\"file does not exist\");", "-        }", "-        try {", "-          assertEquals(\"file to open\", tempFile.getCanonicalPath(),", "-                       file.getCanonicalPath());", "-        }", "-        catch (IOException ioe) {", "-          throw new UnexpectedException(ioe);", "-        }", "-        openCount++;", "-      }", "-      ", "-      public void fileClosed(OpenDefinitionsDocument doc) {", "-        /* opening a file closes the empty document created on startup [Corky: 10-8-04]*/", "-//        assertTrue(doc.isUntitled());", "-//        assertFalse(doc.isModifiedSinceSave());", "-      }", "-    };", "+    TestListener listener = new TestFileIOListener(tempFile);", "+      listener.assertCloseCount(1);  //  Untitled document closed when doc is opened", "+      listener.assertCloseCount(1);  "]}], "num": 25980}
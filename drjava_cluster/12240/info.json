{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc638678133e882d0ad6c39fb5d5c9fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d513e12f91dfc435fc387b8d1e7ac78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void insertNodeSortedInto(LeafNode child, InnerNode parent)", "signatureAfterChange": "   private void insertNodeSortedInto(LeafNode child, InnerNode parent)", "diff": ["-    /**", "-     * check to make sure that the parent, if a top level group, is", "-     * added to the tree model group", "-     */", "-    if (((DefaultMutableTreeNode)_model.getRoot()).getIndex(parent) == -1 && ", "-        _roots.contains(parent)){", "-      addTopLevelGroupToRoot(parent);", "+    /** Make sure that if the parent is a top level group, it is added to the tree model group. */", "+    synchronized (_model) {", "+      if (((DefaultMutableTreeNode)_model.getRoot()).getIndex(parent) == -1 && _roots.contains(parent)) {", "+        addTopLevelGroupToRoot(parent);", "+      }", "+      int i;", "+      for (i = 0; i < numChildren; i++ ) {", "+        parentsKid = ((DefaultMutableTreeNode) parent.getChildAt(i));", "+        if (parentsKid instanceof InnerNode) {", "+          // do nothing, it's a folder", "+        } else if(parentsKid instanceof LeafNode) {", "+          oldName = ((LeafNode)parentsKid).getData().getName();", "+          if ((newName.toUpperCase().compareTo(oldName.toUpperCase()) < 0)) break;", "+        } else throw new IllegalStateException(\"found a node in navigator that is not an InnerNode or LeafNode\");", "+      }", "+      _model.insertNodeInto(child, parent, i);", "-    int i;", "-    for (i = 0; i < numChildren; i++ ) {", "-      parentsKid = ((DefaultMutableTreeNode)parent.getChildAt(i));", "-      if (parentsKid instanceof InnerNode) {", "-        // do nothing, it's a folder", "-      } else if(parentsKid instanceof LeafNode) {", "-        oldName = ((LeafNode)parentsKid).getData().getName();", "-        if ((newName.toUpperCase().compareTo(oldName.toUpperCase()) < 0)) break;", "-      } else throw new IllegalStateException(\"found a node in navigator that is not an InnerNode or LeafNode\");", "-    }", "-    ", "-    _model.insertNodeInto(child, parent, i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf1ee1d5925c4765dcbf180655405d10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void insertFolderSortedInto(InnerNode child, InnerNode parent)", "signatureAfterChange": "   private void insertFolderSortedInto(InnerNode child, InnerNode parent)", "diff": ["-    if (((DefaultMutableTreeNode)_model.getRoot()).getIndex(parent) == -1 && ", "-       _roots.contains(parent)) {", "-      addTopLevelGroupToRoot(parent);", "+    synchronized (_model) {", "+      if (((DefaultMutableTreeNode)_model.getRoot()).getIndex(parent) == -1 && _roots.contains(parent)) {", "+        addTopLevelGroupToRoot(parent);", "+      }", "+      ", "+      int countFolders = 0;", "+      int i;", "+      for (i = 0; i < numChildren; i++) {", "+        parentsKid = ((DefaultMutableTreeNode)parent.getChildAt(i));", "+        if (parentsKid instanceof InnerNode) {", "+          countFolders++;", "+          oldName = ((InnerNode)parentsKid).toString();", "+          if ((newName.toUpperCase().compareTo(oldName.toUpperCase()) < 0)) break;", "+        } ", "+        else if (parentsKid instanceof LeafNode) break;", "+        // we're out of folders, and starting into the files, so just break out.", "+        else throw new IllegalStateException(\"found a node in navigator that is not an InnerNode or LeafNode\");", "+      }", "+      _model.insertNodeInto(child, parent, i);", "-    ", "-    int countFolders = 0;", "-    int i;", "-    for (i = 0; i < numChildren; i++) {", "-      parentsKid = ((DefaultMutableTreeNode)parent.getChildAt(i));", "-      if (parentsKid instanceof InnerNode) {", "-        countFolders++;", "-        oldName = ((InnerNode)parentsKid).toString();", "-        if ((newName.toUpperCase().compareTo(oldName.toUpperCase()) < 0)) break;", "-      } else if (parentsKid instanceof LeafNode) break;", "-      // we're out of folders, and starting into the files, so just break out.", "-      else throw new IllegalStateException(\"found a node in navigator that is not an InnerNode or LeafNode\");", "-    }", "-    _model.insertNodeInto(child, parent, i);"]}], "num": 12240}
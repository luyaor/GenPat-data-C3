{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "904e8baf4ef8900bdc51cf50bffb1928", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "011e20f65584b2111102b77b8f490e0b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "          public void testForSimpleUninitializedArrayInstantiation()", "signatureAfterChange": "          public void testForSimpleUninitializedArrayInstantiation()", "diff": ["-      SourceInfo si = SourceInfo.NO_INFO;", "+      SourceInfo si = SourceInfo.NONE;", "-      //Test one that works", "+      // Test one that works", "-      //Test one with a bad index", "-      SimpleUninitializedArrayInstantiation sa2 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {i1, i2, badIndexD}));", "+      // Test one with a bad index", "+      SimpleUninitializedArrayInstantiation sa2 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", ", "+                                                                    new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {i1, i2, badIndexD}));", "-      assertEquals(\"The error message should be correct\", \"The dimensions of an array instantiation must all be ints.  You have specified something of type double\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The dimensions of an array instantiation must all be ints.  You have specified something of type double\", ", "+                   errors.getLast().getFirst());", "-      SimpleUninitializedArrayInstantiation sa3 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"Jonathan[]\", new ClassOrInterfaceType(si, \"Jonathan\", new Type[0])), ", "-                                                                                            new DimensionExpressionList(si, new Expression[]{i1}));", "+      SimpleUninitializedArrayInstantiation sa3 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"Jonathan[]\", ", "+                                                                    new ClassOrInterfaceType(si, \"Jonathan\", new Type[0])), ", "+                                                  new DimensionExpressionList(si, new Expression[]{i1}));", "-      assertEquals(\"Error message should be correct\", \"Class or variable Jonathan[] not found.\", errors.getLast().getFirst());", "-      ", "-      //Test one with wrong dimensions--too many", "-      SimpleUninitializedArrayInstantiation sa4 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\"))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {i1, i2, i3}));", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Class or variable Jonathan[] not found.\", ", "+                   errors.getLast().getFirst());", "+      // Test one with wrong dimensions--too many", "+      SimpleUninitializedArrayInstantiation sa4 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][]\", ", "+                                                                    new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\"))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {i1, i2, i3}));", "-      assertEquals(\"Error message should be correct\", \"You are trying to initialize an array of type int[][] which requires 2 dimensions, but you have specified 3 dimensions--the wrong number\", errors.getLast().getFirst());", "-      ", "-      ", "-      //Test one with wrong dimensions--too few--should be no additional errors", "-      SimpleUninitializedArrayInstantiation sa5 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {i1, i2}));", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You are trying to initialize an array of type int[][] which requires 2 dimensions, but you have \"", "+                     + \"specified 3 dimensions--the wrong number\", ", "+                   errors.getLast().getFirst());", "+      // Test one with wrong dimensions--too few--should be no additional errors", "+      SimpleUninitializedArrayInstantiation sa5 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", ", "+                                                                    new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", ", "+                                                                                                               new PrimitiveType(si, \"int\")))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {i1, i2}));", "-      assertEquals(\"There should be no errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The class or interface int[][][] is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"There should be one new error\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface int[][][] in int[][][] is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24ca3bd589f267b751a41790615c9316", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "          public void testForEmptyExpressionOnly()", "signatureAfterChange": "          public void testForEmptyExpressionOnly()", "diff": ["-      EmptyExpression ee = new EmptyExpression(SourceInfo.NO_INFO);", "+      EmptyExpression ee = new EmptyExpression(SourceInfo.NONE);", "-        assertEquals(\"Error message should be correct\", \"Internal Program Error: EmptyExpression encountered.  Student is missing something.  Should have been caught before TypeChecker.  Please report this bug.\", e.getMessage());", "+        assertEquals(\"Error message should be correct\", ", "+                     \"Internal Program Error: EmptyExpression encountered.  Student is missing something.  \"", "+                       + \"Should have been caught before TypeChecker.  Please report this bug.\", ", "+                     e.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "befb5d255e28375dacdc3b1b3aa32bf2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r     \r     public void testForAbstractMethodDef()", "signatureAfterChange": "          public void testForAbstractMethodDef()", "diff": ["-    \r", "-    public void testForAbstractMethodDef() {\r", "-      // Test one that works but needs to be augmented with public.\r", "-      MethodDef mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                             _abstractMav, \r", "-                                             new TypeParameter[0], \r", "-                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), \r", "-                                             new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),\r", "-                                             new FormalParameter[0],\r", "-                                             new ReferenceType[0]);\r", "-      _cbiv._symbolData.setMav(_abstractMav);\r", "-\r", "-      mdef.visit(_cbiv);\r", "-      assertEquals(\"There should not be any errors\", 0, errors.size());\r", "-      assertEquals(\"_sd1 should contain 1 methods\", 1, _sd1.getMethods().size());\r", "-      assertTrue(\"The method should be public\", _sd1.getMethods().getFirst().hasModifier(\"public\"));\r", "-\r", "-      \r", "-      \r", "-      \r", "-      // Test one that doesn't work.\r", "-      mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                             _abstractMav, \r", "-                                             new TypeParameter[0], \r", "-                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), \r", "-                                             new Word(JExprParser.NO_SOURCE_INFO, \"monkey\"),\r", "-                                             new FormalParameter[0],\r", "-                                             new ReferenceType[0]);\r", "-      mdef.visit(_cbiv);\r", "-      assertEquals(\"There should be one error.\", 1, errors.size());\r", "-      assertEquals(\"The error message should be correct.\", \r", "-                   \"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",\r", "-                   errors.get(0).getFirst());\r", "-    }\r", "+    ", "+    public void testForAbstractMethodDef() {", "+      // Test one that works but needs to be augmented with public.", "+      MethodDef mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                             _abstractMav, ", "+                                             new TypeParameter[0], ", "+                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "+                                             new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                             new FormalParameter[0],", "+                                             new ReferenceType[0]);", "+      _cbiv._classData.setMav(_abstractMav);", "+", "+      mdef.visit(_cbiv);", "+      assertEquals(\"There should not be any errors\", 0, errors.size());", "+      assertEquals(\"_sd1 should contain 1 methods\", 1, _sd1.getMethods().size());", "+      assertTrue(\"The method should be default public\", _sd1.getMethods().getFirst().hasModifier(\"public\"));", "+", "+      ", "+      ", "+      ", "+      // Test one that doesn't work.", "+      mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                             _abstractMav, ", "+                                             new TypeParameter[0], ", "+                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "+                                             new Word(JExprParser.NO_SOURCE_INFO, \"monkey\"),", "+                                             new FormalParameter[0],", "+                                             new ReferenceType[0]);", "+      mdef.visit(_cbiv);", "+      assertEquals(\"There should be one error.\", 1, errors.size());", "+      assertEquals(\"The error message should be correct.\", ", "+                   \"Only constructors can have the same name as the class they appear in, \" +", "+                   \"and constructors do not have an explicit return type\",", "+                   errors.get(0).getFirst());", "+    }"]}], "num": 15770}
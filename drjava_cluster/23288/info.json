{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2bf17e87744b9fbd15699dd83481755", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53670a86b0c896167bb8b5de0c86a1a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "d33d42f5f56aa9f97fa7ee5954a0170706bf34dc", "commitAfterChange": "d94a1a3c2d24d89ea1f580460a5e45b2a0d432b1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _init(Component owner, File root, boolean allowMultiple, boolean showHidden)", "signatureAfterChange": "   private void _init(Component owner, final File root, boolean allowMultiple, boolean showHidden)", "diff": ["-  private void _init(Component owner, File root, boolean allowMultiple, boolean showHidden) {", "+  private void _init(Component owner, final File root, boolean allowMultiple, boolean showHidden) {", "-    if (root != null && ! root.isDirectory()) setCurrentDirectory(root.getAbsoluteFile().getParentFile());", "+    ", "+//    if (root != null && root.exists()) {", "+//      setFileView(new FileView() { ", "+//                    public Boolean isTraversable(File f) { ", "+//                      return Boolean.valueOf(f.isDirectory() && FileOps.isInFileTree(f, root)); ", "+//                    }});", "+//    }", "-    ", "+    _root = root; // may be null", "+    if (root != null) {", "+      if (! root.exists()) _root = null;", "+      else if (! root.isDirectory()) _root = root.getParentFile();", "+    }", "+", "-    setApproveButtonText(\"Choose\");", "+    setApproveButtonText(\"Select\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff5013057784971d575506ee05c749bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void setSearchBackwards(boolean searchBackwards)", "signatureAfterChange": "    public void setSearchBackwards(boolean searchBackwards)", "diff": ["+  public void setSearchBackwards(boolean searchBackwards) {", "+    if (_searchBackwards != searchBackwards) {", "+      // If we switch from searching forward to searching backwards or viceversa,", "+      // isOnMatch is true, and _findword is the same as the _lastFindWord,", "+      // we know the user just found _findWord, so skip one find.", "+      if (isOnMatch() && _findWord.equals(_lastFindWord))  _skipOneFind = true;", "+      else _skipOneFind = false;", "+    _searchBackwards = searchBackwards;", "+  }", "-    public void setSearchBackwards(boolean searchBackwards) { _state.setSearchBackwards(searchBackwards); }"]}], "num": 23288}
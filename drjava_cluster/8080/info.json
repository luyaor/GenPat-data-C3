{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c421f50a810ca15160b1e979b29efb83", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab3a2b2ec290fed8a7890dc272a424ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "92fd06b34796984853343dde64251cfdd2a0ce25", "commitAfterChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public int getLineFirstCharPos(int pos) throws BadLocationException", "signatureAfterChange": "   public int getLineFirstCharPos(int pos) throws BadLocationException", "diff": ["-   */", "+    */", "-      int startLinePos = getLineStartPos(pos);", "-      int endLinePos = getLineEndPos(pos);", "+      final int startLinePos = getLineStartPos(pos);", "+      final int endLinePos = getLineEndPos(pos);", "+      int nonWSPos = endLinePos;", "-          _storeInCache(key, startLinePos + walker);", "-          return startLinePos + walker;", "+          nonWSPos = startLinePos + walker;", "+          break;", "-      // No non-WS char found, so return last position on line", "-      _storeInCache(key, endLinePos);", "-      return endLinePos;", "+      _storeInCache(key, nonWSPos, nonWSPos);", "+      return nonWSPos;  // may equal lineEndPos"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c02be247ed194ca17232c5c7f1637255", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "92fd06b34796984853343dde64251cfdd2a0ce25", "commitAfterChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public int findNextEnclosingBrace(int pos, char opening, char closing) throws BadLocationException", "signatureAfterChange": "   public int findNextEnclosingBrace(int pos, char opening, char closing) throws BadLocationException", "diff": ["-   */", "+    */", "-    if (pos>=getLength()-1) { return ERROR_INDEX; }", "+    if (pos >= getLength()-1) { return ERROR_INDEX; }", "-            // Check if matching char should be ignored because it is within a comment, ", "-            // quotes, or ignored paren phrase", "+            // Check if matching char should be ignored because it is within a comment, quotes, or ignored paren phrase", "-      _storeInCache(key, reducedPos);", "+      _storeInCache(key, reducedPos, reducedPos);", "+      // Return position of matching char or ERROR_INDEX     ", "+      return reducedPos;  ", "-    // Return position of matching char or ERROR_INDEX     ", "-    return reducedPos;  ", "+    "]}], "num": 8080}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1b87080b95b428a03af29b59e0cd1d0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19833345761f406265e633f707301b5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeClassLoader.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public Class<?> loadTree(TreeClass treeClass)", "signatureAfterChange": "    protected Class<?> findClass(String name) throws ClassNotFoundException", "diff": ["-  public Class<?> loadTree(TreeClass treeClass) {", "-    TreeCompiler compiler = new TreeCompiler(treeClass, _opt);", "-    byte[] bytes = compiler.bytecode();", "-    _adapters.put(treeClass.fullName(), compiler.evaluationAdapter());", "-    return defineClass(treeClass.fullName(), bytes, 0, bytes.length);", "+", "+  protected Class<?> findClass(String name) throws ClassNotFoundException {", "+    TreeClass treeClass = _registeredTrees.get(name);", "+    if (treeClass == null) { throw new ClassNotFoundException(); }", "+    else {", "+      TreeCompiler compiler = new TreeCompiler(treeClass, _opt);", "+      byte[] bytes = compiler.bytecode();", "+      _adapters.put(name, compiler.evaluationAdapter());", "+      return defineClass(name, bytes, 0, bytes.length);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1b8b1916134d1c8669b087f910ddf19", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "dff1e78708d1fc8c89ac7283a8a2c5db6fd8ed74", "commitAfterChange": "545baa1c63b7ee7d993e35e240105f7970f7c2d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void putKeyToMenuItemMap (KeyStroke ks, JMenuItem tmpItem)", "signatureAfterChange": "          private void _updateMenuItem (KeyStrokeData data)", "diff": ["-   */", "-  public void putKeyToMenuItemMap (KeyStroke ks, JMenuItem tmpItem) {", "-    _keyToMenuItemMap.put(ks, tmpItem);", "-  } ", "+    private void _updateMenuItem (KeyStrokeData data) {", "+      JMenuItem jmi = data.getJMenuItem();", "+      ", "+      //Check associated Menu Item", "+      if (jmi != null) { // otherwise this keystroke should map to an action that isn't in the menu", "+        KeyStroke ks = data.getKeyStroke();", "+        jmi.setAccelerator(ks);", "+      }", "+    }"]}], "num": 14419}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9602d3c0c414110f0b7a287e427093b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7accf086299ec3485ff583164ee3e2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "b59ea5c5062a947f96790df7fe854009e693434a", "commitAfterChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected JList _makeList(ListModel lm)", "signatureAfterChange": "      protected void _addValue(T value)", "diff": ["-  /** Make the list component. */", "-  protected JList _makeList(ListModel lm) {", "-    JList l = new JList(lm);", "-    l.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "-    return l;", "+  protected void _addValue(T value) {", "+    _data.add(value);", "+    _tableModel.fireTableRowsInserted(_data.size()-1, _data.size()-1);", "+    _table.getSelectionModel().setSelectionInterval(_data.size()-1,_data.size()-1);    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caffeb43cd4aab3d68f86fa8ceb620df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private SymbolData _getArraySymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                           boolean addError, boolean checkImportedPackages)", "signatureAfterChange": "   private SymbolData _getArraySymbolData(String eltClassName, SourceInfo si, boolean addError, boolean checkImports)", "diff": ["+    */", "+  private SymbolData _getArraySymbolData(String eltClassName, SourceInfo si, boolean addError, boolean checkImports/*, ", "+                                         HashSet<String> classesInThisFile*/) {", "+    // resolve should only be true when post-visitation resolution is performed", "+    if (eltClassName.equals(\"String[]\")) System.err.println(\"String[] passed to getArraySymbolData\");", "+    if (eltClassName.equals(\"String\")) System.err.println(\"String passed to getArraySymbolData\");", "+    SymbolData eltSD =  getSymbolData(eltClassName, si, addError, checkImports/*, classesInThisFile*/);", "+    if (eltSD != null) {", "+      if (eltSD.getName().equals(\"java.lang.String\")) System.err.println(\"java.lang.String FOUND\");", "+      SymbolData sd = symbolTable.get(eltSD.getName() + \"[]\");  // Look up fully qualified name", "+      if (sd != null) return sd;", "+      else return defineArraySymbolData(eltSD, this, si /*, classesInThisFile*/);", "+    }", "+    else return null;", "+  }", "-  private SymbolData _getArraySymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "-                                         boolean addError, boolean checkImportedPackages) {", "-    // shouldn't be resolving an array type since you can't extend one, so resolve should be false", "-    SymbolData innerSd = getSymbolDataHelper(className.substring(0, className.length() - 2), si, resolve, fromClassFile, ", "-                                             addError, checkImportedPackages);", "-    if (innerSd != null) {", "-      SymbolData sd = symbolTable.get(innerSd.getName() + \"[]\");", "-      if (sd != null) { return sd; }", "-      else { return defineArraySymbolData(innerSd, this, si); }", "-    else { return null; }"]}], "num": 13621}
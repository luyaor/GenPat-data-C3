{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf43c3600deb39c957ada459770cf00d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "297bed7921dc26f59999b3f5bbf20287", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/XMLProjectFileParser.java", "commitBeforeChange": "2c8ce62ae485e784b2bec820cb7bf72ad52ae36f", "commitAfterChange": "b59ea5c5062a947f96790df7fe854009e693434a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "    protected List<File> readFiles(String path)", "signatureAfterChange": "\r   \r   protected List<AbsRelFile> readFiles(String path, String rootPath)", "diff": ["-", "-  protected List<File> readFiles(String path) {", "-    List<File> fList = new ArrayList<File>();", "-    List<Node> defs = _xc.getNodes(path+\"/file\");", "-    for(Node n: defs) {", "-      // now all path names are relative to node n...", "-      String name = _xc.get(\".name\",n);", "-      fList.add(new File(name).getAbsoluteFile());", "-    }", "-    return fList;", "-  }", "+  \r", "+  protected List<AbsRelFile> readFiles(String path, String rootPath) {\r", "+    List<AbsRelFile> fList = new ArrayList<AbsRelFile>();\r", "+    List<Node> defs = _xc.getNodes(path+\"/file\");\r", "+    for(Node n: defs) {\r", "+      // now all path names are relative to node n...\r", "+      String name = _xc.get(\".name\",n);\r", "+      boolean abs = _xc.getBool(\".absolute\",n,true); // default to true for backward compatibility\r", "+\r", "+      /* added to check if file path name refers to absolute. Intended to eliminate project errors over network paths */\r", "+      abs |= (new File(name)).isAbsolute();   \r", "+      \r", "+      AbsRelFile f = new AbsRelFile(((rootPath.length()>0 && !abs)?\r", "+                                       new File(rootPath,name):\r", "+                                       new File(name)).getAbsoluteFile(),abs);\r", "+      fList.add(f);\r", "+    }\r", "+    return fList;\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39fd34272e352c3a1060dbf7352461e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "dff1e78708d1fc8c89ac7283a8a2c5db6fd8ed74", "commitAfterChange": "545baa1c63b7ee7d993e35e240105f7970f7c2d1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void putActionToNameMap (Action a, String name)", "signatureAfterChange": "      public void put(Option<KeyStroke> kso, Action a, JMenuItem jmi, String name)", "diff": ["+  ", "+  public void put(Option<KeyStroke> kso, Action a, JMenuItem jmi, String name)  {", "+    KeyStroke ks = DrJava.CONFIG.getSetting(kso);", "+    KeyStrokeData ksd = new KeyStrokeData(ks, a, jmi, name, kso);", "+    _keyToDataMap.put(ks, ksd);", "+    _actionToDataMap.put(a, ksd);", "+    ", "+    if (kso != null) // check for shift-actions", "+      DrJava.CONFIG.addOptionListener(kso, new KeyStrokeOptionListener(jmi, a, ks));", "-   */", "-  public void putActionToNameMap (Action a, String name) {", "-    _actionToNameMap.put(a, name);", "-  } "]}], "num": 6517}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d5e27bdbbbe4a458f76e2f5c2337164", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "260e1e704eaa300e095b67cd3da6b1b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "9953c5f787113bb8bfb39d4af2a2ba9a2a873081", "commitAfterChange": "cf43b71b7afba8ecd60ed8b71f23b327139aa802", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,                                                        boolean start)", "signatureAfterChange": "   public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, JVMBuilder jvmBuilder,                                                        boolean start, Runnable1<? super Process> onExit)", "diff": ["-  public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,", "-                                                       boolean start) {", "+  public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, JVMBuilder jvmBuilder,", "+                                                       boolean start, Runnable1<? super Process> onExit) {", "-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(factory));", "+    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(factory), onExit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d0ef90c87b2d6c6d8d89199acf317f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "9953c5f787113bb8bfb39d4af2a2ba9a2a873081", "commitAfterChange": "cf43b71b7afba8ecd60ed8b71f23b327139aa802", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder)       throws InterruptedException, InvocationTargetException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, InvocationTargetException, IOException", "diff": ["-    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder).value(); }", "+   */", "+  public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,", "+                                       Runnable1<? super Process> onExit)", "+      throws InterruptedException, InvocationTargetException, IOException {", "+    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder, onExit).value(); }"]}], "num": 19653}
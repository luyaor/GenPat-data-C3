{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26d2464025f79eaf5135cc2df2b52ef3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b39a4e39690fee5e2620557879fc27b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public String getNextTopLevelClassName(int startPos, int endPos) throws ClassNameNotFoundException", "signatureAfterChange": "   public String getNextTopLevelClassName(int startPos, int endPos) throws ClassNameNotFoundException", "diff": ["-          throw new ClassNameNotFoundException(\"No top level class name found\");", "+          throw ClassNameNotFoundException.DEFAULT;", "-        //if we make it here we have a valid index", "-        //first find index of first non whitespace (from the index in document)", "-        index = getFirstNonWSCharPos(startPos + index) - startPos;", "-        if (index == -1) throw new ClassNameNotFoundException(\"No top level class name found\");", "-        ", "-        int endIndex = textLength; //just in case no whitespace at end of file", "-        ", "-        //find index of next delimiter or whitespace", "-        char c;", "-        for (int i = index; i < textLength; i++) {", "-          c = text.charAt(i);", "-          if (!Character.isJavaIdentifierPart(c)) {", "-            endIndex = i;", "-            break;", "-          }", "-        }", "-        return text.substring(index,endIndex);", "+        // we have a valid index", "+        return getNextIdentifier(startPos + index);", "+      catch (IllegalStateException e) { throw new ClassNameNotFoundException(\"No top level class name found\"); }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4172c4c2f65726be1e6cd235b7a65c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecurUtil.java", "commitBeforeChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "commitAfterChange": "34d03e4ba66c612a034017381b72d822fe9c84d0", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 87, "signatureBeforeChange": "   public static String simpleNameOf(Class<?> c)", "signatureAfterChange": "       protected ArrayStringMode nestedMode()", "diff": ["-   */", "-  public static String simpleNameOf(Class<?> c) {", "-    if (c.isArray()) { return simpleNameOf(c.getComponentType()) + \"[]\"; }", "-    else if (isAnonymousClass(c)) {", "-      if (c.getInterfaces().length > 0) { return \"anonymous \" + simpleNameOf(c.getInterfaces()[0]); }", "-      else { return \"anonymous \" + simpleNameOf(c.getSuperclass()); }", "-    }", "-    else {", "-      String fullName = c.getName();", "-      return fullName.substring(fullName.lastIndexOf('.') + 1);", "-    }", "-  }", "+      protected String suffix() { return \"\"; }", "+      protected ArrayStringMode nestedMode() { return DEEP_BRACED; }"]}], "num": 5173}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb86ae9f3b9a3e0b5d2b41e0c7a7b3eb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "142fefe55d4a8371d743120e5c271ba5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ConstructorDeclaration.java", "commitBeforeChange": "480277542c22ee726328704403a3f512c72cbc44", "commitAfterChange": "a7174554906b671f62d483cb1503079ad4cf43ea", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public String toString()", "signatureAfterChange": "      public String toStringHelper()", "diff": ["-    return \"(\"+getClass().getName()+\": \"+java.lang.reflect.Modifier.toString(getAccessFlags())+\" \"+getName()+\" \"+getParameters()+\" \"+getExceptions()+\" \"+getConstructorInvocation()+\" \"+getStatements()+\")\";", "+  ", "+  public String toStringHelper() {", "+    return java.lang.reflect.Modifier.toString(getAccessFlags())+\" \"+getName()+\" \"+getParameters()+\" \"+getExceptions()+\" \"+getConstructorInvocation()+\" \"+getStatements();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5bc47d29201972237b010392ccf09c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testFindPrevDelimiter() throws BadLocationException", "signatureAfterChange": "   public void testFindPrevDelimiter() throws BadLocationException", "diff": ["-    assertEquals(\"Check that delimiters in multi-line \" +", "-                 \"comments are ignored\",", "+    assertEquals(\"Check that delimiters in multi-line comments are ignored\",", "-    assertEquals(\"Check that delimiters in single-line \" +", "-                 \"comments are ignored\",", "+    assertEquals(\"Check that delimiters in single-line comments are ignored\",", "-    assertEquals(\"Check that delimiters in single-quotes \" +", "-                 \"are ignored\",", "+    assertEquals(\"Check that delimiters in single-quotes are ignored\",", "-    assertEquals(\"Check that delimiters in double-quotes \" +", "-                 \"are ignored\",", "+    assertEquals(\"Check that delimiters in double-quotes are ignored\",", "-    assertEquals(\"Check that delimiters in paren phrases \" +", "-                 \"are usually ignored\",", "+    assertEquals(\"Check that delimiters in paren phrases are usually ignored\",", "-    assertEquals(\"Check that delimiter is not found if \" + ", "-                 \"it is at cursor's position\",", "+    assertEquals(\"Check that delimiter is not found if it is at cursor's position\",", "-    _setDocText(\"foo *\\n\" +", "-                \"// comment\\n\" +", "-                \"bar\\n\");", "-    assertEquals(\"Check that findprevDelimiter ignores comments even\" +", "-                 \"when delimiters include * and / (1)\",", "+    _setDocText(\"foo *\\n\" + \"// comment\\n\" + \"bar\\n\");", "+    assertEquals(\"Check that findprevDelimiter ignores comments even when delimiters include * and / (1)\",", "-    _setDocText(\"foo /\\n\" +", "-                \"/* comment */\\n\" +", "-                \"bar\\n\");", "-    assertEquals(\"Check that findprevDelimiter ignores comments even\" +", "-                 \"when delimiters include * and / (2)\",", "+    _setDocText(\"foo /\\n\" + \"/* comment */\\n\" + \"bar\\n\");", "+    assertEquals(\"Check that findprevDelimiter ignores comments even when delimiters include * and / (2)\",", "-    assertEquals(\"Check that position in reduced model is unaffected \" +", "-                 \"after call to findPrevDelimiter\",", "+    assertEquals(\"Check that position in reduced model is unaffected after call to findPrevDelimiter\",", "-"]}], "num": 31354}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3858d1d4a0a94324e16bba99a83449d1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a5f0c6a2aab7cb1fcef8421383bf11c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "c7d2e1d461dd66a96eb2ddd00e3e54ea051914ee", "commitAfterChange": "1a20ac05e52f9ee0a88d470513f2a7fe1aa1939e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "    private static URL[] _getURLs()", "signatureAfterChange": "   public static String getToolsJarClasspath()", "diff": ["-", "-  private static URL[] _getURLs() {", "-      return new URL[] {", "-        new File(libDir, \"tools.jar\").toURL(),", "-        new File(libDir2, \"tools.jar\").toURL()", "-      };", "+   */", "+  public static String getToolsJarClasspath() {", "+    File[] files = getToolsJarFiles();", "+    String classpath = \"\";", "+    String pathSep = System.getProperty(\"path.separator\");", "+    ", "+    for (int i=0; i < files.length; i++) {", "+      if (i > 0) classpath += pathSep;", "+      classpath += files[i].getAbsolutePath();", "+    }", "+    return classpath;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2635e8a3ef7738d3501b34d4aaafdcff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void dispose() throws RemoteException", "signatureAfterChange": "   protected void dispose()", "diff": ["+   */", "+  protected void dispose() {", "+    while (!_monitor.compareAndSet(State.FRESH, State.DISPOSED)) {", "+      debug.logValue(\"Waiting for FRESH state\", \"current state\", _monitor.value());", "+      try { _monitor.ensureState(State.FRESH); }", "+      catch (InterruptedException e) { throw new UnexpectedException(e); }", "+    }", "+    debug.log(\"Entered DISPOSED state\");", "+    try { UnicastRemoteObject.unexportObject(this, true); }", "+    catch (NoSuchObjectException e) { error.log(e); }", "-  /** Withdraws RMI exports for this. */", "-  public void dispose() throws RemoteException {", "-    _log.log(this + \".dispose() called; slaveRemote is \" + _slave);", "-    if (_startupInProgress) _log.log(this + \".dispose() is KILLing startUp in process; dying slave reference does not yet exist\");", "-    SlaveRemote dyingSlave;", "-    synchronized(_masterJVMLock) {", "-      _masterStub = null;", "-      if (_monitorThread != null) _monitorThread = null;", "-      dyingSlave = _slave;  // save value of _slave in case it is not null", "-      _slave = null;", "-      ", "-      // Withdraw RMI exports", "-      // Slave in process of starting will die because master is inaccessible.", "-      _log.log(this + \".dispose() UNEXPORTing \" + this);", "-      UnicastRemoteObject.unexportObject(this, true);", "-    }", "-    if (dyingSlave != null) { ", "-      _log.log(this + \".dispose() QUITing \" + dyingSlave);", "-      dyingSlave.quit();  // unsynchronized; may hasten the death of dyingSlave", "-    }", "-  }"]}], "num": 20970}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71c1c7f09f926e9364b5e55dfd89a672", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "551fb64b0c3c35d510d160b9b178a15c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "             public void actionPerformed(ActionEvent e)", "signatureAfterChange": "   protected void handleSlaveConnected()", "diff": ["-            int count = 0;", "-            public void actionPerformed(ActionEvent e) {", "-              synchronized(MainJVM.this) {", "-                if (!_shouldReset) {", "-                  _stopTimerThread();", "-                  return;", "-                }", "-                if (count < 2) {", "-                  _model.printDebugMessage(\"Could not connect to Interpreter JVM, trying again...\");", "-                  restartInterpreterJVM();", "-                  count++;", "-                  return;", "-                }", "-                _model.printDebugMessage(\"Unable to connect to Interpreter JVM, so the Interactions Pane is unavailable.\");", "-                _stopTimerThread();", "-              }", "-            }", "+   */", "+  protected void handleSlaveConnected() {", "+    // we reset the enabled flag since, unless told otherwise via", "+    // killInterpreter(false), we want to automatically respawn", "+    _enabled = true;", "+    _cleanlyRestarting = false;", "+    ", "+    // _model may be null if we're running a test on this", "+    if (_model != null) {", "+      _model.interactionsReady();", "+    }", "+", "+    _log.log(\"thread in connected: \" + Thread.currentThread());", "+", "+    synchronized(this) {", "+      // notify so that if we were waiting (in ensureConnected)", "+      // this will wake em up", "+      notify();", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98ae636f075bca98ceb0515ec04cca98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "92062677ca813cb9ab44428a0d2d54f0c3309b04", "commitAfterChange": "274f7defc49003e66c942e814c9ce22958b3814c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 34, "signatureBeforeChange": "         public void run()", "signatureAfterChange": "   void moveToEnd()", "diff": ["-      Utilities.invokeLater(new Runnable() {", "-        public void run() { ", "-          ConsoleDocument doc = getConsoleDoc();", "-          doc.acquireReadLock();", "-          try {", "-            int len = doc.getLength();", "-            if (_pane.getCaretPosition() > len) _pane.setCaretPosition(len);", "-          }", "-          finally { doc.releaseReadLock(); }", "-        }", "+  /** Moves the pane's caret to the end of the document. Only affects reduced_model not the document model.  */", "+  void moveToEnd() { ", "+    assert EventQueue.isDispatchThread();", "+    ConsoleDocument doc = getConsoleDoc();", "+    doc.acquireReadLock();", "+    try { _pane.setCaretPosition(getConsoleDoc().getLength()); }", "+    finally {doc.releaseReadLock(); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd5cf20908d31a459717be89961eac0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 248, "signatureBeforeChange": "                 public void run()", "signatureAfterChange": "      public void simpleHourglassOn()", "diff": ["-              SwingUtilities.invokeLater(new Runnable() {", "-                public void run() {", "-                  addToBrowserHistory();", "-                }", "+  ", "+  public void simpleHourglassOn() {", "+    assert EventQueue.isDispatchThread();", "+    hourglassNestLevel++;", "+    if (hourglassNestLevel == 1) {", "+    getGlassPane().setVisible(true);", "+    _currentDefPane.setEditable(false);", "+    setAllowKeyEvents(false); "]}], "num": 21335}
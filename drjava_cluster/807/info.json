{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f913cbfa87b2a308e27a4d92db2918d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "318764eb160022ad8279df48bd3c5b32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "      @Override public TypeContext visit(ExpressionStatement node)", "signatureAfterChange": "      @Override public TypeContext visit(BreakStatement node)", "diff": ["+  @Override public TypeContext visit(BreakStatement node) {", "+    return context; // TODO: check control-flow context, labels", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd8ea64568566cc658af03e9bfd54898", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "15e62c4c6cc17bdc9cb202b4c5c58df163a8f8cf", "commitAfterChange": "6b388fb1877469cd91350296fabdf9fe8d522b74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "diff": ["-        ", "-        // A hack to allow declarations without types: (TODO: fix this)", "-        if (n instanceof SimpleAssignExpression) {", "-          SimpleAssignExpression assign = (SimpleAssignExpression) n;", "-          if (assign.getLeftExpression() instanceof AmbiguousName) {", "-            AmbiguousName ambigName = (AmbiguousName) assign.getLeftExpression();", "-            if (ambigName.getIdentifiers().size() == 1) {", "-              String name = ambigName.getRepresentation();", "-              if (!newContext.variableExists(name, _opt.typeSystem())) {", "-                SourceInfo si = n.getSourceInfo();", "-                n = new VariableDeclaration(false, null, name, assign.getRightExpression(),", "-                                            si.getFilename(), si.getStartLine(), si.getStartColumn(),", "-                                            si.getEndLine(), si.getEndColumn());", "-                assign.setProperty(\"assignmentAsDeclaration\", n);", "-              }", "-            }", "-          }", "-        }", "-        ", "-        if (n instanceof Expression) { n.acceptVisitor(new ExpressionChecker(newContext, _opt)); }", "-        else { newContext = n.acceptVisitor(new StatementChecker(newContext, _opt)); }", "+        newContext = n.acceptVisitor(new StatementChecker(newContext, _opt));"]}], "num": 807}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc743090e00dfb4c55bd22bceaf3f082", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ada6c5a4a65e8d1ef4d9c73a6d1dfd1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 32, "signatureBeforeChange": "          public void breakpointRemoved(Breakpoint bp)", "signatureAfterChange": "     public void breakpointRemoved(final Breakpoint bp)", "diff": ["-     ", "-   public void breakpointRemoved(Breakpoint bp) {", "-     ", "-     DefaultMutableTreeNode bpDoc = new DefaultMutableTreeNode(bp.getClassName());", "-     ", "-     Enumeration documents = _breakpointNode.children();", "-     while (documents.hasMoreElements()) {", "-       DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-       if (doc.getUserObject().equals(bpDoc.getUserObject())) {", "-         // have to remove the correct line number", "-         //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "-         Enumeration lineNumbers = doc.children();", "-         while (lineNumbers.hasMoreElements()) {", "-           DefaultMutableTreeNode lineNumber = ", "-             (DefaultMutableTreeNode)lineNumbers.nextElement();", "-           if (lineNumber.getUserObject().equals(new Integer (bp.getLineNumber()))) {", "-             //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "-             //doc.remove(lineNumber);", "-             _bpTreeModel.removeNodeFromParent(lineNumber);", "-             if (doc.getChildCount() == 0) {", "-               // this document has no more breakpoints, remove it", "-               //_breakpointNode.remove(doc);", "-               _bpTreeModel.removeNodeFromParent(doc);", "-             }        ", "-             //_bpTree.scrollPathToVisible(new TreePath(childNode.getPath()));", "-             //_bpTreeModel.reload();", "-             return;", "-           }", "-         }", "-       }", "-     }    ", "-   }", "+     */", "+    public void breakpointRemoved(final Breakpoint bp) {", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          DefaultMutableTreeNode bpDocNode = new DefaultMutableTreeNode(bp.getClassName());", "+          ", "+          // Find the document node for this breakpoint", "+          Enumeration documents = _breakpointRootNode.children();", "+          while (documents.hasMoreElements()) {", "+            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+            if (doc.getUserObject().equals(bpDocNode.getUserObject())) {", "+              //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "+              ", "+              // Find the correct line number node for this breakpoint", "+              Enumeration lineNumbers = doc.children();", "+              while (lineNumbers.hasMoreElements()) {", "+                DefaultMutableTreeNode lineNumber = ", "+                  (DefaultMutableTreeNode)lineNumbers.nextElement();", "+                if (lineNumber.getUserObject().equals(new Integer(bp.getLineNumber()))) {", "+                  //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "+                  _bpTreeModel.removeNodeFromParent(lineNumber);", "+                  if (doc.getChildCount() == 0) {", "+                    // this document has no more breakpoints, remove it", "+                    _bpTreeModel.removeNodeFromParent(doc);", "+                  }        ", "+                  return;", "+                }", "+              }", "+            }", "+          }", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d016fd95016e42299973514a0f969ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 152, "signatureBeforeChange": "          public void currThreadResumed()", "signatureAfterChange": "          public void currThreadResumed()", "diff": ["-      //DrJava.consoleOut().println(\"hiding resume, etc\");", "-      _setThreadDependentDebugMenuItems(false);", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          //DrJava.consoleOut().println(\"hiding resume, etc\");", "+          _setThreadDependentDebugMenuItems(false);", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f0e1eb664d06b9c9aaee4971e3be50a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 138, "signatureBeforeChange": "          public void debuggerStarted()", "signatureAfterChange": "          public void debuggerStarted()", "diff": ["-      showDebugger();", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          showDebugger();", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c37208d645b3eb86dd60f9373b13190", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "commitAfterChange": "530cb3b64455d081e962324602750973729aa1fb", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 185, "signatureBeforeChange": "      public void compileEnded()", "signatureAfterChange": "      public void compileEnded()", "diff": ["-      hourglassOff();", "-      updateErrorListeners();", "-      _errorPanel.reset();", "-      if (inDebugMode()) _updateDebugStatus();", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          hourglassOff();", "+          updateErrorListeners();", "+          _errorPanel.reset();", "+          _junitPanel.reset();", "+          if (inDebugMode()) _updateDebugStatus();", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85e010b7f1c71bab64b91c3de7a4acde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "commitAfterChange": "530cb3b64455d081e962324602750973729aa1fb", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 183, "signatureBeforeChange": "      public void compileStarted()", "signatureAfterChange": "      public void compileStarted()", "diff": ["-      showTab(_errorPanel);", "-      _errorPanel.setCompilationInProgress();", "-      _saveAction.setEnabled(false);", "-      hourglassOn();", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          // Is this necessary?", "+          //ErrorListPane elp = _errorPanel.getErrorListPane();", "+          //elp.setSize(_tabbedPane.getMinimumSize());", "+          //_setDividerLocation();", "+", "+          showTab(_errorPanel);", "+          _errorPanel.setCompilationInProgress();", "+          _saveAction.setEnabled(false);", "+          hourglassOn();", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87de901f8975e74c738f03b2f1dd0237", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 140, "signatureBeforeChange": "          public void debuggerShutdown()", "signatureAfterChange": "          public void debuggerShutdown()", "diff": ["-      hideDebugger();", "-      if (_currentThreadLocationHighlight != null) {", "-        _currentThreadLocationHighlight.remove();", "-      }", "-      _currentThreadLocationHighlight = null;", "-    }", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          hideDebugger();", "+          if (_currentThreadLocationHighlight != null) {", "+            _currentThreadLocationHighlight.remove();", "+          }", "+          _currentThreadLocationHighlight = null;", "+      SwingUtilities.invokeLater(doCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6bae7382386dc536f5d75c6005a4ed3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "commitAfterChange": "530cb3b64455d081e962324602750973729aa1fb", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 179, "signatureBeforeChange": "          public void interactionStarted()", "signatureAfterChange": "          public void interactionStarted()", "diff": ["-      _interactionsPane.setEditable(false);", "-      _interactionsPane.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));", "-      //_abortInteractionAction.setEnabled(true);", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          _interactionsPane.setEditable(false);", "+          _interactionsPane.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5b134f0bfbde151716623bf6e0dd634", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "        public void breakpointReached(Breakpoint bp)", "signatureAfterChange": "     public void breakpointReached(final Breakpoint bp)", "diff": ["-   ", "-   public void breakpointReached(Breakpoint bp) {", "-     DefaultMutableTreeNode bpDoc = new DefaultMutableTreeNode(bp.getClassName());", "-     ", "-     Enumeration documents = _breakpointNode.children();", "-     while (documents.hasMoreElements()) {", "-       DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-       if (doc.getUserObject().equals(bpDoc.getUserObject())) {", "-         // have to remove the correct line number", "-         //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "-         Enumeration lineNumbers = doc.children();", "-         while (lineNumbers.hasMoreElements()) {", "-           DefaultMutableTreeNode lineNumber = ", "-             (DefaultMutableTreeNode)lineNumbers.nextElement();", "-           if (lineNumber.getUserObject().equals(new Integer (bp.getLineNumber()))) {", "-             //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "-             ", "-             //DefaultMutableTreeNode hitBreakpoint = new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "-             TreePath pathToNewBreakpoint = new TreePath(lineNumber.getPath());", "-             ", "-             _bpTree.scrollPathToVisible(pathToNewBreakpoint);", "-             _bpTree.setSelectionPath(pathToNewBreakpoint);", "-             //DrJava.consoleOut().println(\"Set selection to new hit breakpoint.\");", "-           }", "-         }", "-       }", "-     }", "-   }", "+     */", "+    public void breakpointReached(final Breakpoint bp) {", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          DefaultMutableTreeNode bpDoc = new DefaultMutableTreeNode(bp.getClassName());", "+          ", "+          // Find the document node for this breakpoint", "+          Enumeration documents = _breakpointRootNode.children();", "+          while (documents.hasMoreElements()) {", "+            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+            if (doc.getUserObject().equals(bpDoc.getUserObject())) {", "+              //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "+              ", "+              // Find the correct line number node for this breakpoint", "+              Enumeration lineNumbers = doc.children();", "+              while (lineNumbers.hasMoreElements()) {", "+                DefaultMutableTreeNode lineNumber = ", "+                  (DefaultMutableTreeNode)lineNumbers.nextElement();", "+                if (lineNumber.getUserObject().equals(new Integer(bp.getLineNumber()))) {", "+                  //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "+                  ", "+                  // Select the node which has been hit", "+                  TreePath pathToNewBreakpoint = new TreePath(lineNumber.getPath());", "+                  _bpTree.scrollPathToVisible(pathToNewBreakpoint);", "+                  _bpTree.setSelectionPath(pathToNewBreakpoint);", "+                  //DrJava.consoleOut().println(\"Set selection to new hit breakpoint.\");", "+                }", "+              }", "+            }", "+          }", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);", "+    }"]}], "num": 6494}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e21696c0f5e999e4cae3ff1520952cc5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "450439887162189fd899098af718e873", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CompilerErrorPanel.java", "commitBeforeChange": "42453ef03053968f9ca85cc1f502a43bd9378c76", "commitAfterChange": "84ce5397e59f2c9953a60bb68d966b69ec59ad8c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "    public void resetErrors(CompilerError[] errors)", "signatureAfterChange": "    public void resetErrors(CompilerError[] errors)", "diff": ["+    for (int i = 0; i < errors.length; i++) {", "+      DrJava.consoleErr().println(\"#\" + i + \": \" + errors[i]);", "+    }", "+", "-    _errors = errors;", "-", "-    Arrays.sort(_errors);", "+    Arrays.sort(errors);", "+", "+    // Filter out those with invalid source info.", "+    // They will be first since errors are sorted by line number,", "+    // and invalid source info is for negative line numbers.", "+    int numInvalid = 0;", "+    for (int i = 0; i < errors.length; i++) {", "+      if (errors[i].lineNumber() < 0) {", "+        numInvalid++;", "+      }", "+      else {", "+        // Since they were sorted, we must be done looking ", "+        // for invalid source coordinates, since we found this valid one.", "+        break;", "+      }", "+    }", "+", "+    _errorsWithoutPositions = new CompilerError[numInvalid];", "+    System.arraycopy(errors,", "+                     0,", "+                     _errorsWithoutPositions,", "+                     0,", "+                     numInvalid);", "+", "+    int numValid = errors.length - numInvalid;", "+    _errors = new CompilerError[numValid];", "+    System.arraycopy(errors,", "+                     numInvalid,", "+                     _errors,", "+                     0,", "+                     numValid);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9b58deaf8f90aea8f94409dd82ca49c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModel.java", "commitBeforeChange": "facb31d52d0108009578d6a1708ac1dfc68b98b8", "commitAfterChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void _groupErrors(JUnitError[] errors)", "signatureAfterChange": "   private void _groupErrors(JUnitError[] errors)", "diff": ["+    // Filter out errors with invalid source info.", "+    // They will be first since errors are sorted by line number,", "+    // and invalid source info is for negative line numbers.", "+    int numInvalid = 0;", "+    for (int i = 0; i < errors.length; i++) {", "+      if (errors[i].lineNumber() < 0) {", "+        numInvalid++;", "+      }", "+      else {", "+        // Since they were sorted, we must be done looking", "+        // for invalid source coordinates, since we found this valid one.", "+        break;", "+      }", "+    }", "+", "+    _errorsWithoutPositions = new JUnitError[numInvalid];", "+    System.arraycopy(errors,", "+                     0,", "+                     _errorsWithoutPositions,", "+                     0,", "+                     numInvalid);", "+", "+    int numValid = errors.length - numInvalid;", "+    _errors = new JUnitError[numValid];", "+    System.arraycopy(errors,", "+                     numInvalid,", "+                     _errors,", "+                     0,", "+                     numValid);", "+", "-", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbbdfdd5c29c621730237a1495f3a9be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "42453ef03053968f9ca85cc1f502a43bd9378c76", "commitAfterChange": "84ce5397e59f2c9953a60bb68d966b69ec59ad8c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "    public void resetErrors(CompilerError[] errors)", "signatureAfterChange": "    public void resetErrors(CompilerError[] errors)", "diff": ["+    for (int i = 0; i < errors.length; i++) {", "+      DrJava.consoleErr().println(\"#\" + i + \": \" + errors[i]);", "+    }", "+", "-    _errors = errors;", "-", "-    Arrays.sort(_errors);", "+    Arrays.sort(errors);", "+", "+    // Filter out those with invalid source info.", "+    // They will be first since errors are sorted by line number,", "+    // and invalid source info is for negative line numbers.", "+    int numInvalid = 0;", "+    for (int i = 0; i < errors.length; i++) {", "+      if (errors[i].lineNumber() < 0) {", "+        numInvalid++;", "+      }", "+      else {", "+        // Since they were sorted, we must be done looking ", "+        // for invalid source coordinates, since we found this valid one.", "+        break;", "+      }", "+    }", "+", "+    _errorsWithoutPositions = new CompilerError[numInvalid];", "+    System.arraycopy(errors,", "+                     0,", "+                     _errorsWithoutPositions,", "+                     0,", "+                     numInvalid);", "+", "+    int numValid = errors.length - numInvalid;", "+    _errors = new CompilerError[numValid];", "+    System.arraycopy(errors,", "+                     numInvalid,", "+                     _errors,", "+                     0,", "+                     numValid);"]}], "num": 19204}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "850afad3ba0f4138a7df2cb6981f9ba2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53911022bee222a1600436f6320118f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "8b24a954c4ca31d0bfd4e6cf29968bdfd85074dd", "commitAfterChange": "7a16360ed3db92a5068288b3b626cc549d236342", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "diff": ["-    for (i = pos-1; i != DOCSTART-1; i--) {", "+    for (i = pos-1; i >= DOCSTART; i--) {", "-          if((state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-             (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) ||", "-             (state.equals(ReducedModelState.INSIDE_SINGLE_QUOTE)) ||", "-             (state.equals(ReducedModelState.INSIDE_DOUBLE_QUOTE))) {", "-               // Ignore matching char", "-             } else {", "-               // Found a matching char, check if we should ignore it", "-               if (skipParenPhrases && posInParenPhrase(i)) {", "-                 // In a paren phrase, so ignore", "-               }", "-               else {", "-                 // Return position of matching char", "-                 _reduced.move(origLocation - i);", "-                 return i;", "-               }", "-             }", "+          if (!state.equals(ReducedModelState.FREE)", "+                || _isStartOfComment(text, i)", "+                || ((i > 0) && _isStartOfComment(text, i - 1))) {", "+            // Ignore matching char", "+          } else {", "+            // Found a matching char, check if we should ignore it", "+            if (skipParenPhrases && posInParenPhrase(i)) {", "+              // In a paren phrase, so ignore", "+            }", "+            else {", "+              // Return position of matching char", "+              _reduced.move(origLocation - i);", "+              return i;", "+            }", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "997d10d4334603e7aa062f3cf619e41a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "3ae07c734e21c585f4b81ef537238b0207c86b68", "commitAfterChange": "dc16d558e30fdf5c4421a95496c4eb2730e1f929", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "   private void checkCastStaticRules(Class<?> tc, Class<?> ec, CastExpression castExp)", "signatureAfterChange": "   private void checkCastStaticRules(Class<?> tc, Class<?> ec, CastExpression castExp)", "diff": ["-          if (tc.isInterface()) {", "-            // !!! TODO : tests the signatures ?", "-          } ", "-          else if (tc.isArray()) {", "-            if (!Cloneable.class.isAssignableFrom(ec)) {", "-              throw new ExecutionError(\"cast\", castExp);", "-            }", "-          } ", "-          else if (Modifier.isFinal(tc.getModifiers())) {", "-            if (!tc.isAssignableFrom(ec)) {", "-              throw new ExecutionError(\"cast\", castExp);", "+           if (tc.isArray()) {", "+             if (!Cloneable.class.isAssignableFrom(ec)) {", "+               throw new ExecutionError(\"cast\", castExp);", "+             }", "+           }", "+          else if (!tc.isInterface()) { // ec is an interface, tc is not", "+            if (isFinal(tc) && !ec.isAssignableFrom(tc)) {", "+                throw new ExecutionError(\"cast\", castExp);", "-        } ", "-        else if (tc.isInterface()) {", "-          if (Modifier.isFinal(tc.getModifiers())) {", "-            if (!tc.isAssignableFrom(ec)) {", "+        } // ec is not an interface type", "+        else if (tc.isInterface()) { // tc is an interface, ec is not", "+          if (isFinal(ec) && !tc.isAssignableFrom(ec)) {", "-          }", "-        }", "+          } // both ec and tc are classes or primitives"]}], "num": 28378}
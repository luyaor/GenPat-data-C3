{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d772db5d606325dafad0541b606c4887", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ade8d74c2a65c7d7bbcc1687f5c10837", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "e0e31ba24598b43b7fcb25119cc7b2c151c3e7c0", "commitAfterChange": "b25e1764d5b4aa3e174628947c02047c67664960", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                     boolean leaf, int row, boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                     boolean leaf, int row, boolean hasFocus)", "diff": ["-      if (leaf) {", "-        DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "-        if (node.getUserObject() instanceof RegionTreeUserObj) {", "-          @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();", "-          ", "-          OpenDefinitionsDocument doc = r.getDocument();", "-          doc.acquireReadLock();", "-          try {", "-            int lnr = doc.getLineOfOffset(r.getStartOffset())+1;", "-            int startOffset = doc.getOffset(lnr-3);", "-            if (startOffset<0) { startOffset = 0; }", "-            int endOffset = doc.getOffset(lnr+3);", "-            if (endOffset<0) { endOffset = doc.getLength()-1; }", "+      if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {", "+        if (leaf) {", "+          DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "+          if (node.getUserObject() instanceof RegionTreeUserObj) {", "+            @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();", "-            // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "-            String s = doc.getText(startOffset, endOffset-startOffset);", "-            ", "-            // this highlights the actual region in red", "-            int rStart = r.getStartOffset()-startOffset;", "-            if (rStart<0) { rStart = 0; }", "-            int rEnd = r.getEndOffset()-startOffset;", "-            if (rEnd>s.length()) { rEnd = s.length(); }", "-            if ((rStart<=s.length()) && (rEnd>=rStart)) {", "-              String t1 = StringOps.encodeHTML(s.substring(0,rStart));", "-              String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "-              String t3 = StringOps.encodeHTML(s.substring(rEnd));", "-              s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+            OpenDefinitionsDocument doc = r.getDocument();", "+            doc.acquireReadLock();", "+            try {", "+              int lnr = doc.getLineOfOffset(r.getStartOffset())+1;", "+              int startOffset = doc.getOffset(lnr-3);", "+              if (startOffset<0) { startOffset = 0; }", "+              int endOffset = doc.getOffset(lnr+3);", "+              if (endOffset<0) { endOffset = doc.getLength()-1; }", "+              ", "+              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "+              String s = doc.getText(startOffset, endOffset-startOffset);", "+              ", "+              // this highlights the actual region in red", "+              int rStart = r.getStartOffset()-startOffset;", "+              if (rStart<0) { rStart = 0; }", "+              int rEnd = r.getEndOffset()-startOffset;", "+              if (rEnd>s.length()) { rEnd = s.length(); }", "+              if ((rStart<=s.length()) && (rEnd>=rStart)) {", "+                String t1 = StringOps.encodeHTML(s.substring(0,rStart));", "+                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "+                String t3 = StringOps.encodeHTML(s.substring(rEnd));", "+                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+              }", "+              else {", "+                s = StringOps.encodeHTML(s);", "+              }", "+              tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "-            else {", "-              s = StringOps.encodeHTML(s);", "-            }", "-            tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "+            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "+            finally { doc.releaseReadLock(); }", "+            setText(node.getUserObject().toString());", "+            renderer = this;", "-          catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "-          finally { doc.releaseReadLock(); }", "-          setText(node.getUserObject().toString());", "-          renderer = this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1348d9df6dc4543565f9ab697cedf55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "9a420cdf119356be865ba1cf1fc123a155b1b47c", "commitAfterChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "diff": ["-      // set tooltip", "-      String tooltip = null;", "+      // set tooltip as thunk", "+      Thunk<String> tooltip = null;", "-          Object o = node.getUserObject();", "+          final Object o = node.getUserObject();", "-            @SuppressWarnings(\"unchecked\")", "-            RegionTreeUserObj<R> userObject = (RegionTreeUserObj<R>) o;", "-            R r = userObject.region();", "+            tooltip = new Thunk<String>() {", "+              public String value() {", "+                @SuppressWarnings(\"unchecked\")", "+                RegionTreeUserObj<R> userObject = (RegionTreeUserObj<R>) o;", "+                R r = userObject.region();", "-            OpenDefinitionsDocument doc = r.getDocument();", "-            try {", "-              int lnr = doc.getLineOfOffset(r.getStartOffset()) + 1;", "-              int startOffset = doc._getOffset(lnr - 3);", "-              if (startOffset < 0) { startOffset = 0; }", "-              int endOffset = doc._getOffset(lnr + 3);", "-              if (endOffset < 0) { endOffset = doc.getLength() - 1; }", "-              ", "-              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "-              String s = doc.getText(startOffset, endOffset - startOffset);", "-              ", "-              // this highlights the actual region in red", "-              int rStart = r.getStartOffset() - startOffset;", "-              if (rStart < 0) { rStart = 0; }", "-              int rEnd = r.getEndOffset() - startOffset;", "-              if (rEnd > s.length()) { rEnd = s.length(); }", "-              if ((rStart <= s.length()) && (rEnd >= rStart)) {", "-                String t1 = StringOps.encodeHTML(s.substring(0, rStart));", "-                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "-                String t3 = StringOps.encodeHTML(s.substring(rEnd));", "-                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+                OpenDefinitionsDocument doc = r.getDocument();", "+                try {", "+                  int lnr = doc.getLineOfOffset(r.getStartOffset()) + 1;", "+                  int startOffset = doc._getOffset(lnr - 3);", "+                  if (startOffset < 0) { startOffset = 0; }", "+                  int endOffset = doc._getOffset(lnr + 3);", "+                  if (endOffset < 0) { endOffset = doc.getLength() - 1; }", "+                  ", "+                  // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "+                  String s = doc.getText(startOffset, endOffset - startOffset);", "+                  ", "+                  // this highlights the actual region in red", "+                  int rStart = r.getStartOffset() - startOffset;", "+                  if (rStart < 0) { rStart = 0; }", "+                  int rEnd = r.getEndOffset() - startOffset;", "+                  if (rEnd > s.length()) { rEnd = s.length(); }", "+                  if ((rStart <= s.length()) && (rEnd >= rStart)) {", "+                    String t1 = StringOps.encodeHTML(s.substring(0, rStart));", "+                    String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "+                    String t3 = StringOps.encodeHTML(s.substring(rEnd));", "+                    s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+                  }", "+                  else {", "+                    s = StringOps.encodeHTML(s);", "+                  }", "+                  return \"<html><pre>\"+s+\"</pre></html>\";", "+                }", "+                catch(javax.swing.text.BadLocationException ble) { return \"\"; /* just display an empty tool tip*/ }", "-              else {", "-                s = StringOps.encodeHTML(s);", "-              }", "-              tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "-            }", "-            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "+            };"]}], "num": 17737}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a75bf850e109289e85dc6801b287b685", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2024ba07f0931646549019758b6e18b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JLSTypeSystem.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "          @Override public Boolean forVariableType(VariableType t)", "signatureAfterChange": "          @Override public Boolean forVariableType(final VariableType t)", "diff": ["-    @Override public Boolean forVariableType(VariableType t) {", "+    @Override public Boolean forVariableType(final VariableType t) {", "-        Type lower = t.symbol().lowerBound();", "-        Type upper = t.symbol().upperBound();", "-        return lower.apply(this) && upper.apply(this) && isSubtype(lower, upper) && !containsVar(lower, t);", "+        Thunk<Boolean> recur = new Thunk<Boolean>() {", "+          public Boolean value() {", "+            Type lower = t.symbol().lowerBound();", "+            Type upper = t.symbol().upperBound();", "+            return lower.apply(WellFormedTester.this) && upper.apply(WellFormedTester.this) &&", "+                    isSubtype(lower, upper) && !containsVar(lower, t);", "+          }", "+        };", "+        // assume it's well-formed if we're already checking it", "+        return _stack.apply(recur, true, t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edacd6944f1bf7b5c39fb92ec84ab451", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "a1c288a48316b1c91a6ebecbbeffc93089c5ebaa", "commitAfterChange": "df01c8be1037a04090a700d45d88a837db8c2901", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     @Override public Boolean forVariableType(VariableType t)", "signatureAfterChange": "     @Override public Boolean forVariableType(final VariableType t)", "diff": ["-    @Override public Boolean forVariableType(VariableType t) {", "-      return checkBoundedSymbol(t.symbol());", "+    @Override public Boolean forVariableType(final VariableType t) {", "+      Thunk<Boolean> checkVar = new Thunk<Boolean>() {", "+        public Boolean value() { return checkBoundedSymbol(t.symbol()); }", "+      };", "+      return _stack.apply(checkVar, true, t);"]}], "num": 20428}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dca7e0b82071bd8d6052c3e90f27e3c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "136508eb198362f59177e4f6afbb9204", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fb8ddcbfd71bd75d2b307b4e83f7a834ec364082", "commitAfterChange": "be84679bc73e85f88d6958fbfdf8b35be73855ab", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,      IncompatibleThreadStateException, AbsentInformationException,      InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,      IncompatibleThreadStateException, AbsentInformationException,      InvocationException, DebugException", "diff": ["+      if( printMessages ) System.out.println(\"Iterating through vars\");        ", "-      if( printMessages ) DrJava.consoleOut().println(\"Copying \" + localVar.name());", "-      List args = new LinkedList();", "-      args.add(_vm.mirrorOf(localVar.name()));", "-      if( printMessages ) DrJava.consoleOut().println(\"Getting getVariableMethod()\");", "-      if( printMessages ) DrJava.consoleOut().println(\"Invoking \" + method2Call.name());", "-      Value v = interpreter.invokeMethod(threadRef, method2Call, args, ", "-                                         ObjectReference.INVOKE_SINGLE_THREADED);", "-      if (v != null) {", "-        v = _convertToActualType(threadRef, localVar, v);", "+      ", "+      // invokeMethod would throw an ObjectCollectedException if the StringReference ", "+      // declared by _vm.mirrorOf(name) had been garbage collected before ", "+      // invokeMethod could execute. This happened infrequently so by trying this", "+      // multiple times, the chance of failure each time should be acceptably low.", "+      ", "+      int tries = 0;", "+      while (tries < MAXINVOKETRIES) {    ", "+        List args = new LinkedList();          ", "+        args.add(_vm.mirrorOf(localVar.name()));", "+        try {", "+          Value v = interpreter.invokeMethod(threadRef, method2Call, args, ", "+                                             ObjectReference.INVOKE_SINGLE_THREADED);", "+          if (v != null) {", "+            v = _convertToActualType(threadRef, localVar, v);", "+          }", "+          frame = threadRef.frame(0);           ", "+          frame.setValue(localVar, v);", "+          break;", "+        }", "+        catch (ObjectCollectedException oce) {", "+          if (printMessages) System.out.println(\"Got ObjectCollectedException\");", "+          tries++;", "+        }        ", "+        catch (ClassNotLoadedException cnle) {", "+          printMessage(\"Could not update the value of '\" + localVar.name() + \"' (class not loaded)\");", "+          break;", "+        }", "-      frame = threadRef.frame(0);", "-      frame.setValue(localVar, v);", "+      if (tries >= MAXINVOKETRIES)", "+        throw new DebugException(\"The value of the variable: \" + localVar.name() + \" could not be obtained from interpreterJVM\");", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7bb8926d8850a34b6ae1309664e7328", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "e783b76611d7e152e89196e486dc2b772b1c80a9", "commitAfterChange": "b796c376864058d232f1be02ccfb0bd7548b3f89", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 79, "signatureBeforeChange": "      private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "      private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["+  ", "-    List args = new LinkedList();", "-    args.add(_vm.mirrorOf(var.name()));", "-    Value v = interpreter.invokeMethod(thread, method2Call, args,", "-                                       ObjectReference.INVOKE_SINGLE_THREADED);", "+    Value v = null;", "+    ", "+    // invokeMethod would throw an ObjectCollectedException if the StringReference", "+    // declared by _vm.mirrorOf(name) had been garbage collected before", "+    // invokeMethod could execute. This happened infrequently so by trying this", "+    // multiple times, the chance of failure each time should be acceptably low.", "+    int tries = 0;", "+    while (tries < MAXINVOKETRIES) {", "+      try {", "+        List args = new LinkedList();", "+        args.add(_vm.mirrorOf(var.name()));", "+        v = interpreter.invokeMethod(thread, method2Call, args,", "+                                           ObjectReference.INVOKE_SINGLE_THREADED);", "+        break;", "+      }", "+      catch (ObjectCollectedException oce) {", "+        if (printMessages) System.out.println(\"Got ObjectCollectedException\");", "+        tries++;      ", "+      }", "+    }"]}], "num": 12832}
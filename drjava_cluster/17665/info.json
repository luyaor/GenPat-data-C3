{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bec30fe6114d0dfd413499f15c163667", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "111c9adffb4996280004905f46e8e6aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/XMLConfigTest.java", "commitBeforeChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "commitAfterChange": "58507a81b298eda1c95791a37194e9f75288a8af", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r   \r   public void getNodePath1() throws Exception", "signatureAfterChange": "      public void getNodePath1() throws Exception", "diff": ["-  \r", "-  public void getNodePath1() throws Exception {\r", "-    XMLConfig xc = new XMLConfig(new StringReader(\r", "-                                                  \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><concutest>\\n\"\r", "-                                                    +\"  <threadcheck:def>\\n\"\r", "-                                                    +\"    <invariant>\\n\"\r", "-                                                    +\"      <name type=\\\"only\\\" value=\\\"childclass1\\\"/>\\n\"\r", "-                                                    +\"    </invariant>\\n\"\r", "-                                                    +\"    <class name=\\\"sample.threadCheck.ThreadCheckSample4\\\"/>\\n\"\r", "-                                                    +\"  </threadcheck:def>\\n\"\r", "-                                                    +\"  <threadcheck:def>\\n\"\r", "-                                                    +\"    <invariant>\\n\"\r", "-                                                    +\"      <name type=\\\"only\\\" value=\\\"childclass-method1\\\"/>\\n\"\r", "-                                                    +\"    </invariant>\\n\"\r", "-                                                    +\"    <method name=\\\"sample.threadCheck.ThreadCheckSample4\\\" sig=\\\"run()V\\\"/>\\n\"\r", "-                                                    +\"    <method name=\\\"sample.threadCheck.ThreadCheckSample4\\\" sig=\\\"run2()V\\\"/>\\n\"\r", "-                                                    +\"  </threadcheck:def>\\n\"\r", "-                                                    +\"</concutest>\"));\r", "-    assertEquals(\"Path of null is wrong\", \"\", XMLConfig.getNodePath(null));\r", "-    \r", "-    List<Node> roots = xc.getNodes(\"concutest\");\r", "-    Assert.assertEquals(1, roots.size());\r", "-    assertEquals(\"Path of \"+roots.get(0).getNodeName()+\" is wrong\", \"concutest\", XMLConfig.getNodePath(roots.get(0)));\r", "-    \r", "-    List<Node> defs = xc.getNodes(\"concutest/threadcheck:def\");\r", "-    Assert.assertEquals(2, defs.size());\r", "-    \r", "-    for(Node def: defs) {\r", "-      assertEquals(\"Path of \"+def.getNodeName()+\" is wrong\", \"concutest/threadcheck:def\", XMLConfig.getNodePath(def));\r", "-      List<Node> invs = xc.getNodes(\"invariant\", def);\r", "-      Assert.assertEquals(1, invs.size());\r", "-      Node inv = invs.get(0);\r", "-      assertEquals(\"Path of \"+inv.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/invariant\", XMLConfig.getNodePath(inv));\r", "-      List<Node> annots = xc.getNodes(\"*\", inv);\r", "-      Assert.assertEquals(1, annots.size());\r", "-      assertEquals(\"Path of \"+annots.get(0).getNodeName()+\" is wrong\", \"concutest/threadcheck:def/invariant/name\", XMLConfig.getNodePath(annots.get(0)));\r", "-      List<Node> classes = xc.getNodes(\"class\", def);\r", "-      List<Node> methods = xc.getNodes(\"method\", def);\r", "-      Assert.assertTrue(\"There must be at least one class or method per definition\", (classes.size()+methods.size()>0));\r", "-      List<Node> all = xc.getNodes(\"*\", def);\r", "-      Assert.assertEquals(0, all.size()-invs.size()-classes.size()-methods.size());\r", "-      for(Node target: classes) {\r", "-        assertEquals(\"Path of \"+target.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/class\", XMLConfig.getNodePath(target));\r", "-      }\r", "-      for(Node target: methods) {\r", "-        assertEquals(\"Path of \"+target.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/method\", XMLConfig.getNodePath(target));\r", "-      }\r", "-    }\r", "-  }\r", "+  ", "+  public void getNodePath1() throws Exception {", "+    XMLConfig xc = new XMLConfig(new StringReader(", "+                                                  \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?><concutest>\\n\"", "+                                                    +\"  <threadcheck:def>\\n\"", "+                                                    +\"    <invariant>\\n\"", "+                                                    +\"      <name type=\\\"only\\\" value=\\\"childclass1\\\"/>\\n\"", "+                                                    +\"    </invariant>\\n\"", "+                                                    +\"    <class name=\\\"sample.threadCheck.ThreadCheckSample4\\\"/>\\n\"", "+                                                    +\"  </threadcheck:def>\\n\"", "+                                                    +\"  <threadcheck:def>\\n\"", "+                                                    +\"    <invariant>\\n\"", "+                                                    +\"      <name type=\\\"only\\\" value=\\\"childclass-method1\\\"/>\\n\"", "+                                                    +\"    </invariant>\\n\"", "+                                                    +\"    <method name=\\\"sample.threadCheck.ThreadCheckSample4\\\" sig=\\\"run()V\\\"/>\\n\"", "+                                                    +\"    <method name=\\\"sample.threadCheck.ThreadCheckSample4\\\" sig=\\\"run2()V\\\"/>\\n\"", "+                                                    +\"  </threadcheck:def>\\n\"", "+                                                    +\"</concutest>\"));", "+    assertEquals(\"Path of null is wrong\", \"\", XMLConfig.getNodePath(null));", "+    ", "+    List<Node> roots = xc.getNodes(\"concutest\");", "+    Assert.assertEquals(1, roots.size());", "+    assertEquals(\"Path of \"+roots.get(0).getNodeName()+\" is wrong\", \"concutest\", XMLConfig.getNodePath(roots.get(0)));", "+    ", "+    List<Node> defs = xc.getNodes(\"concutest/threadcheck:def\");", "+    Assert.assertEquals(2, defs.size());", "+    ", "+    for(Node def: defs) {", "+      assertEquals(\"Path of \"+def.getNodeName()+\" is wrong\", \"concutest/threadcheck:def\", XMLConfig.getNodePath(def));", "+      List<Node> invs = xc.getNodes(\"invariant\", def);", "+      Assert.assertEquals(1, invs.size());", "+      Node inv = invs.get(0);", "+      assertEquals(\"Path of \"+inv.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/invariant\", XMLConfig.getNodePath(inv));", "+      List<Node> annots = xc.getNodes(\"*\", inv);", "+      Assert.assertEquals(1, annots.size());", "+      assertEquals(\"Path of \"+annots.get(0).getNodeName()+\" is wrong\", \"concutest/threadcheck:def/invariant/name\", XMLConfig.getNodePath(annots.get(0)));", "+      List<Node> classes = xc.getNodes(\"class\", def);", "+      List<Node> methods = xc.getNodes(\"method\", def);", "+      Assert.assertTrue(\"There must be at least one class or method per definition\", (classes.size()+methods.size()>0));", "+      List<Node> all = xc.getNodes(\"*\", def);", "+      Assert.assertEquals(0, all.size()-invs.size()-classes.size()-methods.size());", "+      for(Node target: classes) {", "+        assertEquals(\"Path of \"+target.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/class\", XMLConfig.getNodePath(target));", "+      }", "+      for(Node target: methods) {", "+        assertEquals(\"Path of \"+target.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/method\", XMLConfig.getNodePath(target));", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d090bddde3218c6d3cc1cc967d4f8d50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r     \r     public void testForAbstractMethodDefDoFirst()", "signatureAfterChange": "          public void testForAbstractMethodDefDoFirst()", "diff": ["-    \r", "-    public void testForAbstractMethodDefDoFirst() {\r", "-      // Check one that doesn't work\r", "-      AbstractMethodDef amd = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                                    _abstractMav, \r", "-                                                    new TypeParameter[0], \r", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), \r", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),\r", "-                                                    new FormalParameter[0],\r", "-                                                    new ReferenceType[0]);\r", "-      amd.visit(_cbiv);\r", "-      assertEquals(\"There should be one error.\", 1, errors.size());\r", "-      assertEquals(\"The error message should be correct.\", \"Abstract methods can only be declared in abstract classes\", errors.get(0).getFirst());\r", "-      \r", "-      // Check one that works\r", "-      _cbiv._symbolData.setMav(_abstractMav);\r", "-      AbstractMethodDef amd2 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                                     _abstractMav, \r", "-                                                     new TypeParameter[0], \r", "-                                                     new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), \r", "-                                                     new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),\r", "-                                                     new FormalParameter[0],\r", "-                                                     new ReferenceType[0]);\r", "-      amd2.visit(_cbiv);\r", "-      assertEquals(\"There should still be one error\", 1, errors.size());\r", "-      \r", "-      // Check one that doesn't work because it is static\r", "-      AbstractMethodDef amd3 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, \r", "-                                                     _abstractStaticMav, \r", "-                                                     new TypeParameter[0], \r", "-                                                     new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), \r", "-                                                     new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),\r", "-                                                     new FormalParameter[0],\r", "-                                                     new ReferenceType[0]);\r", "-      amd3.visit(_cbiv);\r", "-      assertEquals(\"There should be two errors\", 2, errors.size());\r", "-      assertEquals(\"The error message should be correct\", \"Static methods cannot be used at the Intermediate level\", errors.get(1).getFirst());\r", "-    }\r", "+    ", "+    public void testForAbstractMethodDefDoFirst() {", "+      // Check one that doesn't work", "+      AbstractMethodDef amd = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                                    _abstractMav, ", "+                                                    new TypeParameter[0], ", "+                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "+                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                    new FormalParameter[0],", "+                                                    new ReferenceType[0]);", "+      amd.visit(_cbiv);", "+      assertEquals(\"There should be one error.\", 1, errors.size());", "+      assertEquals(\"The error message should be correct.\", \"Abstract methods can only be declared in abstract classes\", ", "+                   errors.get(0).getFirst());", "+      ", "+      // Check one that works", "+      _cbiv._classData.setMav(_abstractMav);", "+      AbstractMethodDef amd2 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                                     _abstractMav, ", "+                                                     new TypeParameter[0], ", "+                                                     new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "+                                                     new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                     new FormalParameter[0],", "+                                                     new ReferenceType[0]);", "+      amd2.visit(_cbiv);", "+      assertEquals(\"There should still be one error\", 1, errors.size());", "+      ", "+      // Check one that doesn't work because it is static", "+      AbstractMethodDef amd3 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+                                                     _abstractStaticMav, ", "+                                                     new TypeParameter[0], ", "+                                                     new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "+                                                     new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                     new FormalParameter[0],", "+                                                     new ReferenceType[0]);", "+      amd3.visit(_cbiv);", "+      assertEquals(\"There should be two errors\", 2, errors.size());", "+      assertEquals(\"The error message should be correct\", \"Static methods cannot be used at the Intermediate level\", errors.get(1).getFirst());", "+    }"]}], "num": 17665}
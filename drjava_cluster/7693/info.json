{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46bbf7b94eb970891b1db2a6c497d83b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb1412216b7351258cf031f09bb1538", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testAddTwoIntegers() throws ExceptionReturnedException", "signatureAfterChange": "   public void testAddTwoIntegers() throws ExceptionReturnedException", "diff": ["+    ", "-    AddExpression exp = (AddExpression) _parseCode(text).get(0);", "-    exp.acceptVisitor(_typeChecker);", "-    ", "-    String expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "-    String actual = exp.getLeftExpression().toString();", "-    assertEquals(\"Should have unboxed correctly.\", expected, actual);", "-    ", "-    expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "-    actual = exp.getRightExpression().toString();", "-    assertEquals(\"Should have unboxed correctly.\", expected, actual);", "-    ", "-    _interpreter.interpret(text);", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "219d79c5e67307c3b72ecd3a355af26e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void testMultiplyingTwoIntegers() throws ExceptionReturnedException", "signatureAfterChange": "   public void testMultiplyingTwoIntegers() throws ExceptionReturnedException", "diff": ["-    BinaryExpression exp = (BinaryExpression)_parseCode(text).get(0);", "-    exp.acceptVisitor(_typeChecker);", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "-    String expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "-    String actual = exp.getLeftExpression().toString();", "-    assertEquals(\"Should have unboxed correctly.\", expected, actual);", "-    ", "-    expected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "-    actual = exp.getRightExpression().toString();", "-    assertEquals(\"Should have unboxed correctly.\", expected, actual);", "-    ", "-    _interpreter.interpret(text);", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}], "num": 7693}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "adaea8b6a234a28b4e6e72335379c4b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad3a5cb0fb4fd663f1297dacb35d2355", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "signatureAfterChange": "   public void registerInterpreterJVM(InterpreterJVMRemoteI remote)     throws RemoteException", "diff": ["-      //System.out.println(\"interpreter jvm registered: \" + remote);", "-      _interpreterJVM = remote;", "-      //_startupInProgress = false;", "+      if (_interpreterJVM != null) { ", "+        try {", "+          //DrJava.consoleOut().println(\"killing jvm! \" + i);", "+          remote.exitJVM();", "+        }", "+        catch (RemoteException re) {", "+        }", "+        return;", "+      }", "+      _timerThread.disable();", "+      _interpreterJVM = remote;    ", "+      // _model may be null if we're running a test on this", "+      if (_model != null) {", "+        _model.interactionsReady();", "+      }", "+      _startupInProgress = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce259f5c86ebda516d3e7c711078beca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "6f37af6087e88b55d504fabdb6eee22be7ba1948", "commitAfterChange": "7fcdc5820c7f1c50a17a282e38bc904783e87e7f", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 124, "signatureBeforeChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "diff": ["+    // add create jar file", "+    File createJarFile = getCreateJarFile();", "+    if (createJarFile != null) builder.setCreateJarFile(createJarFile);", "+    ", "+    int createJarFlags = getCreateJarFlags();", "+    if (createJarFlags != 0) builder.setCreateJarFlags(createJarFlags);", "+    ", "-    setFileGroupingState(makeProjectFileGroupingState(mainClass, bd, wd, file, srcFiles, exCp));", "+    setFileGroupingState(makeProjectFileGroupingState(mainClass, bd, wd, file, srcFiles, exCp, createJarFile, createJarFlags));"]}], "num": 28285}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d498535669e8b1037c5477a61974aa7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69a57936719d62349dd6d997a6222854", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "5d8a3bdb2b4d5525535575f357c7961c2851e09a", "commitAfterChange": "2d393792d3779835588c185ebb45db67c3e34dc4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   private void _findAll()", "signatureAfterChange": "   private void _findAll()", "diff": ["-    if (title.length() > 10) { title = title.substring(0,10) + \"...\"; }", "-    title = \"Find: \" + title;", "+    StringBuilder tabLabel = new StringBuilder(\"Find: \");", "+    if (title.length() <= 10) tabLabel.append(title);", "+    else tabLabel.append(title.substring(0,10)).append(\"...\");", "-      _frame.createFindResultsPanel(rm, title, searchStr, searchAll, _machine.getMatchCase(), ", "+      _frame.createFindResultsPanel(rm, tabLabel.toString(), searchStr, searchAll, _machine.getMatchCase(), "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cb203128d6d57f5426390b128111552", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static File makeRelativeTo(File abs, File base) throws IOException, SecurityException", "signatureAfterChange": "   public static File makeRelativeTo(File abs, File base) throws IOException, SecurityException", "diff": ["-    if (!base.isDirectory()) {", "-      base = base.getParentFile();", "-    }", "+    if (!base.isDirectory()) base = base.getParentFile();", "-    String result = \"\";", "+    StringBuffer result = new StringBuffer();", "-      if (different) {", "-        result += \"..\" + File.separator;", "-      }", "+      if (different) result.append(\"..\").append(File.separator);", "-    if (diffIndex < 0) {", "-      diffIndex = basParts.length;", "-    }", "+    if (diffIndex < 0) diffIndex = basParts.length;", "-      result += absParts[i] + File.separator;", "+      result.append(absParts[i]).append(File.separator);", "-    result += last;", "-    return new File(result);", "+    result.append(last);", "+    return new File(result.toString());"]}], "num": 18079}
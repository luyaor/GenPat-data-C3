{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "657bc93bce908af941ab37342e685c2c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3320318ae4f12a4c0d94220018f16b50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "4276346051c6ab89c146c0041be28826e7dfbe12", "commitAfterChange": "86bed99990f6eb7fff2cb31d595e17b49135df26", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public boolean isClosingAllFiles()", "signatureAfterChange": "   private void _ensureNotActive(List<OpenDefinitionsDocument> docs)", "diff": ["-   */", "-  public boolean isClosingAllFiles() {", "-    return _isClosingAllDocs;", "-  }", "+   */", "+  private void _ensureNotActive(List<OpenDefinitionsDocument> docs) {", "+    if (docs.contains(getActiveDocument())) {", "+      // Find the one that should be the new active document", "+      IDocumentNavigator nav = getDocumentNavigator();", "+      ", "+      INavigatorItem item = getIDocGivenODD(docs.get(docs.size()-1));", "+      INavigatorItem nextActive = nav.getNext(item);", "+      if (!nextActive.equals(item)) {", "+        nav.setActiveDoc(nextActive); ", "+        return;", "+      }", "+      ", "+      item = getIDocGivenODD(docs.get(0));", "+      nextActive = nav.getPrevious(item);", "+      if (!nextActive.equals(item)) { ", "+        nav.setActiveDoc(nextActive);", "+        return;", "+      }", "+      ", "+      throw new RuntimeException(\"No document to set active before closing\");", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fde6bd68a1d0a8a11f7b8980c70942e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "303ddb2c47275a1e2c25f273f6ed234a39d50962", "commitAfterChange": "05170b9ac5bef61612128757c005ac85c724ec32", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public Document getPrevDocument(Document doc)", "signatureAfterChange": "   public Document getPrevDocument(Document doc)", "diff": ["-    OpenDefinitionsDocument prev = null;", "-    while(odds.hasNext())", "-    {", "-      OpenDefinitionsDocument odd = odds.next();", "-      if(doc == odd.getDocument())", "-      {", "-        if(prev != null)", "-        {", "-          return prev.getDocument();", "-        }", "-        else", "-        {", "-          while(odds.hasNext())", "-          {", "-            prev = odds.next();", "-          }", "-          return prev.getDocument();", "-        }", "-      }", "-      prev = odd;", "+    INavigatorItem item = getIDocGivenODD(getODDForDocument(doc));", "+    INavigatorItem nextitem = _documentNavigator.getPrevious(item);", "+    if(nextitem == item){", "+      // we're at the end, so we need to rewind", "+      // and return doc at the very beginning", "+      int i = -1;", "+      do{", "+        item=nextitem;", "+        nextitem = _documentNavigator.getNext(item);", "+        i++;", "+      }while(nextitem != item);", "+      return getODDGivenIDoc(nextitem).getDocument();", "+    }else{", "+      return getODDGivenIDoc(nextitem).getDocument();", "-    throw new UnexpectedException(new IllegalStateException(\"Could not get the previous Document for Document: \" + doc));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a7cf7612b3bc6eec1b720a3cfe67cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "303ddb2c47275a1e2c25f273f6ed234a39d50962", "commitAfterChange": "05170b9ac5bef61612128757c005ac85c724ec32", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public Document getNextDocument(Document doc)", "signatureAfterChange": "   public Document getNextDocument(Document doc)", "diff": ["-    while(odds.hasNext())", "-    {", "-      OpenDefinitionsDocument odd = odds.next();", "-      if(doc == odd.getDocument())", "-      {", "-        if(odds.hasNext())", "-        {", "-          return odds.next().getDocument();", "-        }", "-        else", "-        {", "-          return _documentsRepos.valuesIterator().next().getDocument();", "-        }", "-      }", "+    INavigatorItem item = getIDocGivenODD(getODDForDocument(doc));", "+    INavigatorItem nextitem = _documentNavigator.getNext(item);", "+    if(nextitem == item){", "+      // we're at the end, so we need to rewind", "+      // and return doc at the very beginning", "+      int i = -1;", "+      do{", "+        item=nextitem;", "+        nextitem = _documentNavigator.getPrevious(item);", "+        i++;", "+      }while(nextitem != item);", "+      return getODDGivenIDoc(nextitem).getDocument();", "+    }else{", "+      return getODDGivenIDoc(nextitem).getDocument();", "-    throw new UnexpectedException(new IllegalStateException(\"Could not get the next Document for Document: \" + doc));"]}], "num": 12535}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc8516515ac8090c52001b21c9567500", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0309e9d0f484b25978561fdc4ec61fca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/HashMultiset.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public Iterator<T> iterator()", "signatureAfterChange": "      public Iterator<T> iterator()", "diff": ["-    final Iterator<Map.Entry<T, Integer>> mapIter = _counts.entrySet().iterator();", "+    final Iterator<Map.Entry<T, Integer>> entries = _counts.entrySet().iterator();", "-      ", "-      private Map.Entry<T, Integer> currentEntry = null;", "-      private int i;", "-      private boolean removed = false;", "+      private Map.Entry<T, Integer> _current = null;", "+      private int _currentCount = 0;", "+      private boolean _removed = false;", "-      public boolean hasNext() { ", "-        return mapIter.hasNext() || (currentEntry != null && i < currentEntry.getValue());", "-      }", "+      public boolean hasNext() { return _currentCount > 0 || entries.hasNext(); }", "-        if (currentEntry == null || i >= currentEntry.getValue()) { ", "-          currentEntry = mapIter.next(); ", "-          i = 0;", "+        if (_currentCount == 0) {", "+          _current = entries.next();", "+          _currentCount = _current.getValue();", "-        removed = false;", "-        i++; // i will never be 0 at this point", "-        return currentEntry.getKey();", "+        _removed = false;", "+        _currentCount--;", "+        return _current.getKey();", "-        if (currentEntry == null || removed) { throw new IllegalStateException(); }", "+        if (_current == null || _removed) { throw new IllegalStateException(); }", "-          removed = true;", "+          _removed = true;", "-          int oldCount = currentEntry.getValue();", "-          if (oldCount == 1) {", "-            currentEntry = null;", "-            mapIter.remove();", "-          }", "-          else {", "-            currentEntry.setValue(oldCount - 1);", "-            i--; // guaranteed to be at least 1 before decrementing", "-          }", "+          int oldCount = _current.getValue();", "+          if (oldCount == 1) { entries.remove(); }", "+          else { _current.setValue(oldCount - 1); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6837f026245c1c951bafc523c6970ed1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "signatureAfterChange": "   public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws      BadLocationException", "diff": ["-  public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments) throws BadLocationException {", "+  public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws ", "+    BadLocationException {", "-    final StringBuilder keyBuf = new StringBuilder(\"getFirstNonWSCharPos:\").append(pos).append(':').append(whitespace);", "-    final String key = keyBuf.toString();", "-    ", "+    final Query key = new Query.FirstNonWSCharPos(pos, whitespace, acceptComments);", "-    int result = ERROR_INDEX;  // correct result if no non-whitespace chars are found", "+    int result = -1;  // correct result if no non-whitespace chars are found", "-          // Return position of matching char (reducedPos)", "-          break;", "+          // Return position of matching char", "+          _storeInCache(key, reducedPos, reducedPos);", "+          _reduced.move(origLocation - reducedPos);", "+          return reducedPos;", "-        _reduced.move(origLocation - reducedPos);", "-        result = (i == endPos) ? ERROR_INDEX : reducedPos;", "+        // No matching char found", "+        _storeInCache(key, -1, endPos - 1);", "+        _reduced.move(origLocation - reducedPos);", "+        return -1;", "-      _storeInCache(key, result, reducedPos);", "-      return result;"]}], "num": 25692}
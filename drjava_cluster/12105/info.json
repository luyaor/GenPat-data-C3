{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31c56115e89ca10906e4580099a273f2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36219e1358d243e6480b3882068dafe6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e02b291d62bdaa0ea7b37dd3f2ab84515aaa6d58", "commitAfterChange": "8d09927a54fdf6b15f8ba5f6b7e80366b0cf24be", "methodNumberBeforeChange": 239, "methodNumberAfterChange": 239, "signatureBeforeChange": "      public void setUpDrJavaProperties()", "signatureAfterChange": "      public void setUpDrJavaProperties()", "diff": ["+    final String DEF_DIR = _model.getInteractionsModel().getWorkingDirectory().toString();", "-        _value = edu.rice.cs.util.StringOps.escapeSpacesWith1bHex(_model.getActiveDocument().getRawFile().toString());", "+        try {", "+          File f = FileOps.makeRelativeTo(_model.getActiveDocument().getRawFile(),", "+                                          new File(_attributes.get(\"dir\")));", "+          _value = edu.rice.cs.util.StringOps.escapeSpacesWith1bHex(f.toString());", "+        }", "+        catch(IOException e) { _value = \"Error.\"; }", "+        catch(SecurityException e) { _value = \"Error.\"; }", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"dir\", DEF_DIR);", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.working.dir\") {", "+      public void update() {", "+        try {", "+          File f;", "+          if (_attributes.get(\"dir\").equals(\"/\")) {", "+            f = _model.getInteractionsModel().getWorkingDirectory().getAbsoluteFile();", "+            _value = edu.rice.cs.util.StringOps.escapeSpacesWith1bHex(f.toString());", "+          }", "+          else {", "+            f = FileOps.makeRelativeTo(_model.getInteractionsModel().getWorkingDirectory(),", "+                                       new File(_attributes.get(\"dir\")));", "+            _value = edu.rice.cs.util.StringOps.escapeSpacesWith1bHex(f.toString());", "+          }", "+        }", "+        catch(IOException e) { _value = \"Error.\"; }", "+        catch(SecurityException e) { _value = \"Error.\"; }", "+      }    ", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"dir\", \"/\");", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.all.files\", File.pathSeparator) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.all.files\", File.pathSeparator, DEF_DIR) {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.project.files\", File.pathSeparator) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.project.files\", File.pathSeparator, DEF_DIR) {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.included.files\", File.pathSeparator) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.included.files\", File.pathSeparator, DEF_DIR) {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.external.files\", File.pathSeparator) {", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.external.files\", File.pathSeparator, DEF_DIR) {", "-    ", "-    // Files with spaces", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.all.files.space\", \" \") {", "-      protected List<OpenDefinitionsDocument> getList() { return _model.getOpenDefinitionsDocuments(); }", "-    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"DrJava\", \"drjava.all.files\"));", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.project.files.space\", \" \") {", "-      protected List<OpenDefinitionsDocument> getList() { return _model.getProjectDocuments(); }", "-    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"DrJava\", \"drjava.all.files\"));", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.included.files.space\", \" \") {", "-      protected List<OpenDefinitionsDocument> getList() { return _model.getAuxiliaryDocuments(); }", "-    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"DrJava\", \"drjava.all.files\"));", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.external.files.space\", \" \") {", "-      protected List<OpenDefinitionsDocument> getList() { return _model.getNonProjectDocuments(); }", "-    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"DrJava\", \"drjava.all.files\"));    ", "-        _value = String.valueOf(System.currentTimeMillis());", "+        long millis = System.currentTimeMillis();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "+        if (f.equals(\"full\")) {", "+          _value = java.text.DateFormat.getDateInstance(java.text.DateFormat.FULL).format(new java.util.Date(millis));", "+        }", "+        else if (f.equals(\"long\")) {", "+          _value = java.text.DateFormat.getDateInstance(java.text.DateFormat.LONG).format(new java.util.Date(millis));", "+        }", "+        else if (f.equals(\"medium\")) {", "+          _value = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM).format(new java.util.Date(millis));", "+        }", "+        else if (f.equals(\"short\")) {", "+          _value = java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT).format(new java.util.Date(millis));", "+        }", "+        else {", "+          _value = String.valueOf(millis);", "+        }", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"fmt\", \"millis\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ee5977f3bcb8546a26e940ebdce2b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "ecec455630699fb47e48815ed0e8ff7ef49584c1", "commitAfterChange": "09b707cda41d2d3c82d34a50c8dbebc9d7cd95a2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "\r   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["-    \r", "+\r", "-                                                 LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d + \"),\r", "+                                                 LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\"),\r", "+      msg(\"root: \"+root);\r", "+        msg(\"\\tsubdir: \"+subdir);\r", "+    // JavaMint\r", "+    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/classes.jar\"), jars);\r", "+    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/tools.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/soylatte/lib/classes.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/soylatte/lib/tools.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/classes.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/tools.jar\"), jars);\r", "+    try {\r", "+      String mint_home = System.getenv(\"MINT_HOME\");\r", "+      if (mint_home!=null) {\r", "+        addIfFile(new File(new File(mint_home), \"dist/lib/classes.jar\"), jars);\r", "+        addIfFile(new File(new File(mint_home), \"dist/lib/tools.jar\"), jars);\r", "+      }\r", "+    }\r", "+    catch(Exception e) { /* ignore MINT_HOME variable */ }\r", "+    \r", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> mintResults =\r", "+      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();\r", "+    \r", "-        if (results.containsKey(v)) { results.put(v, IterUtil.compose(lib, results.get(v))); }\r", "-        else { results.put(v, IterUtil.singleton(lib)); }\r", "+        Map<FullVersion, Iterable<JarJDKToolsLibrary>> mapToAddTo = results;\r", "+        if (v.vendor().equals(JavaVersion.VendorType.MINT)) { mapToAddTo = mintResults; }\r", "+        \r", "+        if (mapToAddTo.containsKey(v)) { mapToAddTo.put(v, IterUtil.compose(lib, mapToAddTo.get(v))); }\r", "+        else { mapToAddTo.put(v, IterUtil.singleton(lib)); }\r", "-    return IterUtil.reverse(IterUtil.collapse(results.values()));\r", "+    \r", "+    Iterable<JarJDKToolsLibrary> collapsed = IterUtil.reverse(IterUtil.collapse(results.values()));\r", "+    Iterable<JarJDKToolsLibrary> mintCollapsed = IterUtil.reverse(IterUtil.collapse(mintResults.values()));\r", "+    \r", "+    for(JarJDKToolsLibrary javaLib: collapsed) {\r", "+      msg(\"JDK: \"+javaLib.version());\r", "+    }\r", "+    for(JarJDKToolsLibrary mintLib: mintCollapsed) {\r", "+      msg(\"Mint: \"+mintLib.version());\r", "+    }\r", "+    \r", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> javaMintResults =\r", "+      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();\r", "+    // now we have the JDK libraries in collapsed and the Mint libraries in mintCollapsed\r", "+    for(JarJDKToolsLibrary mintLib: mintCollapsed) {\r", "+      FullVersion mintVersion = mintLib.version();\r", "+      msg(\"Mint version \"+mintVersion.majorVersion()+\": \"+mintVersion);\r", "+      JarJDKToolsLibrary found = null;\r", "+      // try to find a JDK in results that matches mintVersion exactly, except for vendor\r", "+      for(JarJDKToolsLibrary javaLib: collapsed) {\r", "+        FullVersion javaVersion = javaLib.version();\r", "+        msg(\"\\tlooking for exact version: Java version \"+javaVersion.majorVersion()+\": \"+javaVersion);\r", "+        if ((javaVersion.majorVersion().equals(mintVersion.majorVersion())) &&\r", "+            (javaVersion.maintenance()==mintVersion.maintenance()) &&\r", "+            (javaVersion.update()==mintVersion.update()) &&\r", "+            (javaVersion.release()==mintVersion.release())) {\r", "+          found = javaLib;\r", "+          break;\r", "+        }\r", "+      }\r", "+      // if we didn't find one, take the best JDK that matches the major version\r", "+      if (found==null) {\r", "+        for(JarJDKToolsLibrary javaLib: collapsed) {\r", "+          FullVersion javaVersion = javaLib.version();\r", "+          msg(\"\\tlooking for major version Java version \"+javaVersion.majorVersion()+\": \"+javaVersion);\r", "+          if (javaVersion.majorVersion().equals(mintVersion.majorVersion())) {\r", "+            found = javaLib;\r", "+            break;\r", "+          }\r", "+        }\r", "+      }\r", "+      // if we found a JDK, then create a new Mint library\r", "+      if (found!=null) {\r", "+        msg(\"\\t#### picked \"+found.version());\r", "+        JarJDKToolsLibrary lib = makeFromFile(mintLib.location(), model, found.bootClassPath());\r", "+        if (lib.isValid()) {\r", "+          FullVersion v = lib.version();\r", "+          if (javaMintResults.containsKey(v)) { javaMintResults.put(v, IterUtil.compose(lib, javaMintResults.get(v))); }\r", "+          else { javaMintResults.put(v, IterUtil.singleton(lib)); }\r", "+        }\r", "+      }\r", "+    }\r", "+    Iterable<JarJDKToolsLibrary> composed =\r", "+      IterUtil.compose(collapsed,IterUtil.reverse(IterUtil.collapse(javaMintResults.values())));\r", "+\r", "+    for(JarJDKToolsLibrary composedLib: composed) {\r", "+      msg(\"Composed: \"+composedLib.version());\r", "+    }\r", "+    return composed;\r"]}], "num": 12105}
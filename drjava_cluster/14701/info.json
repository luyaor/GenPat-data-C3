{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86b957ec67a22864b0ed1884f6e71f62", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "500c00e90c111fb110cb3327ac66c120", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private static MethodData _selectTheMostSpecificMethod(List<MethodData> list, InstanceData[] arguments, JExpression jexpr)", "signatureAfterChange": "   private static MethodData selectMostSpecificMethod(List<MethodData> list, InstanceData[] arguments,                                                           JExpression jexpr)", "diff": ["-   */", "-  private static MethodData _selectTheMostSpecificMethod(List<MethodData> list, InstanceData[] arguments, JExpression jexpr) {", "+    */", "+  private static MethodData selectMostSpecificMethod(List<MethodData> list, InstanceData[] arguments, ", "+                                                         JExpression jexpr) {", "-        if (fromBestToCurr && !fromCurrToBest) {// best's parameter[i] is more specific than curr's", "+        if (fromBestToCurr && ! fromCurrToBest) { // best's parameter[i] is more specific than curr's", "-        if (fromCurrToBest && !fromBestToCurr) {// curr's parameter[i] is more specific than best's", "+        if (fromCurrToBest && ! fromBestToCurr) { // curr's parameter[i] is more specific than best's", "-      _addError(best.getName() + invokeArgs.toString() + \" is an ambiguous invocation.  It matches both \" + best.getName() + bestArgs.toString() + \" and \" + ambiguous.getName() + ambigArgs.toString(), jexpr);", "+      _addError(best.getName() + invokeArgs.toString() + \" is an ambiguous invocation.  It matches both \" ", "+                  + best.getName() + bestArgs.toString() + \" and \" + ambiguous.getName() + ambigArgs.toString(), ", "+                jexpr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6953448d1b4946d62278972d0ca44dd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected Pair<LinkedList<MethodData>, LinkedList<MethodData>> _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr, boolean isConstructor, SymbolData thisSD)", "signatureAfterChange": "     protected Pair<LinkedList<MethodData>, LinkedList<MethodData>>      _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr,                          boolean isConstructor, SymbolData thisSD)", "diff": ["-   */  ", "-  protected Pair<LinkedList<MethodData>, LinkedList<MethodData>> _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr, boolean isConstructor, SymbolData thisSD) {", "+    */  ", "+  protected Pair<LinkedList<MethodData>, LinkedList<MethodData>> ", "+    _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr, ", "+                        boolean isConstructor, SymbolData thisSD) {", "-          if (matches == false) {break;}", "+          if (matches == false) break;", "-        if (matches == false) { //it didn't match the method directly, but let's see if we can add it to the list of methods done through autoboxing", "+        if (matches == false) { // Didn't match the method directly; try to match it with autoboxing", "-          //Now check to see if any methods exist that match the invocation while using autoboxing.", "+          // Now check to see if any methods exist that match the invocation while using autoboxing.", "-            if (matches == false) {break;}", "+            if (matches == false) break;", "-          "]}], "num": 14701}
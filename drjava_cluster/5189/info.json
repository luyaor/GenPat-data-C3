{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e258ae28987638f8eb205acee622d73a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89745dd2ec9113a51fa28e74cc645621", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testCompileMissingCloseSquiggly() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileMissingCloseSquiggly() throws BadLocationException, IOException, InterruptedException", "diff": ["-  public void testCompileMissingCloseSquiggly() throws BadLocationException, IOException {", "+  public void testCompileMissingCloseSquiggly() throws BadLocationException, IOException, InterruptedException {", "-    _compileDone = false;", "-    _model.addListener(_failListener);", "+    CompileShouldFailListener listener = new CompileShouldFailListener();", "+    _model.addListener(listener);", "+    ", "-    _waitCompileDone();", "+    listener.waitCompileDone();", "-    _failListener.checkCompileOccurred();", "+    listener.checkCompileOccurred();", "-    _model.removeListener(_failListener);", "+    _model.removeListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "984bd2cf4456eb365023de1d839e1021", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testCompileWithPackageStatementInsideClass() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileWithPackageStatementInsideClass() throws BadLocationException, IOException,      InterruptedException", "diff": ["-  public void testCompileWithPackageStatementInsideClass() throws BadLocationException, IOException {", "+  public void testCompileWithPackageStatementInsideClass() throws BadLocationException, IOException, ", "+    InterruptedException {", "+    ", "-    _compileDone = false;", "-    _model.addListener(_failListener);", "+    CompileShouldFailListener listener = new CompileShouldFailListener();", "+    _model.addListener(listener);", "+    ", "-    _waitCompileDone();", "+    listener.waitCompileDone();", "-    _failListener.checkCompileOccurred();", "+    listener.checkCompileOccurred();", "-    _model.removeListener(_failListener);", "+    _model.removeListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a03f8e9855c3628e9aea8789948b1525", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "commitAfterChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testCompileMissingCloseSquiggly()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileMissingCloseSquiggly() throws BadLocationException, IOException", "diff": ["-   */", "-  public void testCompileMissingCloseSquiggly()", "-    throws BadLocationException, IOException", "-  {", "+  /** Tests compiling an invalid file and checks to make sure the class file was not created.  */", "+  public void testCompileMissingCloseSquiggly() throws BadLocationException, IOException {", "-    CompileShouldFailListener listener = new CompileShouldFailListener();", "-    _model.addListener(listener);", "+   ", "+    _compileDone = false;", "+    _model.addListener(_failListener);", "+    _waitCompileDone();", "-    listener.checkCompileOccurred();", "+    _failListener.checkCompileOccurred();", "-    _model.removeListener(listener);", "+    _model.removeListener(_failListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0572427aaaa097f43e96544719bda8f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void testCompileReferenceToNonPublicClass() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileReferenceToNonPublicClass() throws BadLocationException, IOException, InterruptedException", "diff": ["-  public void testCompileReferenceToNonPublicClass() throws BadLocationException, IOException {", "+  public void testCompileReferenceToNonPublicClass() throws BadLocationException, IOException, InterruptedException {", "-    doc.startCompile();", "-    doc2.startCompile();", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }", "+    _model.removeListener(listener);", "+    CompileShouldSucceedListener listener2 = new CompileShouldSucceedListener();", "+    _model.addListener(listener2);", "+    synchronized(listener2) {", "+      doc2.startCompile();", "+      listener2.wait();", "+    }", "+    listener2.checkCompileOccurred();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9eee0bdc5facaf7e9554f2efdab798a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException, InterruptedException", "diff": ["-  public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException {", "+  public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException, InterruptedException {", "-    doc2.saveFile(new FileSelector(file2));    ", "-    _compileDone = false;", "-    _model.addListener(_failListener);", "+    doc2.saveFile(new FileSelector(file2));", "+    ", "+   ", "+    // do compile -- should fail since package decl is not valid!", "+    CompileShouldFailListener listener = new CompileShouldFailListener();", "+    _model.addListener(listener);", "+", "-    _waitCompileDone();", "+    listener.waitCompileDone();", "-    _failListener.checkCompileOccurred();", "-    _model.removeListener(_failListener);", "+    listener.checkCompileOccurred();", "+    _model.removeListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9a41c798b9ba1b516450427fc76cd09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException, InterruptedException", "diff": ["-  public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException {", "+  public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException, InterruptedException {", "+    ", "+    CompileShouldFailListener listener = new CompileShouldFailListener();", "-    _compileDone = false;", "-    _model.addListener(_failListener);", "+    _model.addListener(listener);", "-    _waitCompileDone();", "+    listener.waitCompileDone();", "-    _failListener.checkCompileOccurred();", "+    listener.checkCompileOccurred();", "-    _model.removeListener(_failListener);", "+    _model.removeListener(listener);"]}], "num": 5189}
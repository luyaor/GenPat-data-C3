{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3295925463dc7022caf52422beda9b0e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "036792d05b0ca54a5f7f3765d8476bd8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public Class<?> visit(SynchronizedStatement node)", "signatureAfterChange": "   public Type visit(SynchronizedStatement node)", "diff": ["-  public Class<?> visit(SynchronizedStatement node) {", "+  public Type visit(SynchronizedStatement node) {", "-    if ((node.getLock().acceptVisitor(this)).isPrimitive()) {", "+    Type c1 = node.getLock().acceptVisitor(this);", "+    Class<?> c = (Class<?>)c1;", "+    if (c.isPrimitive()) {", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81e77dd63fa634fd7545e61be55cd6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public Class<?> visit(StaticMethodCall node)", "signatureAfterChange": "   public Type visit(StaticMethodCall node)", "diff": ["-  public Class<?> visit(StaticMethodCall node) {", "+  public Type visit(StaticMethodCall node) {", "-        cargs[i++] = it.next().acceptVisitor(this);", "+        cargs[i++] = (Class<?>)it.next().acceptVisitor(this);", "-    Class<?>  c = n.acceptVisitor(this);", "-", "-    try {", "-      m = context.lookupMethod(n, node.getMethodName(), cargs);", "-    } catch (NoSuchMethodException e) {", "+    Type  c1 = n.acceptVisitor(this);", "+    Class<?> c = (Class<?>)c1;", "+    ", "+    try { m = context.lookupMethod(n, node.getMethodName(), cargs); } ", "+    catch (NoSuchMethodException e) {", "-      if (cargs.length > 0) {", "-        sargs += cargs[cargs.length-1].getName();", "-      }", "+      if (cargs.length > 0) sargs += cargs[cargs.length-1].getName();", "+      ", "-", "+    "]}], "num": 5626}
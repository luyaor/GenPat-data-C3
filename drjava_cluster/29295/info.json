{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4aaebeb3ee1b405408381ac1fc146172", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a2edf5e3667ab7002449bbec96978f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "2fc4395eb72dbc8caeb586fbd5d1fef990083e71", "commitAfterChange": "a2262b2230c42b5cda2b42cb16829b87b361f597", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["-          } else { // Pass an array with all the remaining arguments", "-            assert(typs[typs.length-1].isArray());", "-            Class componentType = typs[typs.length-1].getComponentType();", "-            Object argArray = Array.newInstance(componentType,new int[]{(larg.size()-typs.length+1)});", "-            for(int j = 0; j < larg.size()-typs.length+1; j++){", "-              Object p  = it.next().acceptVisitor(this);", "-              Array.set(argArray, j, performCast(componentType, p));", "-            }", "-            args[typs.length-1] = argArray;", "+          } else { // Pass an array with all the remaining arguments of 'it'", "+            args[typs.length-1] = buildArrayOfRemainingArgs(typs, larg.size(), it );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1afbbf8402a889c745b14d34f8d4daa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   private int _uncommentLine() throws BadLocationException", "signatureAfterChange": "   private int _uncommentLine() throws BadLocationException", "diff": ["-    int curCol = getCurrentCol();", "-    int lineStart = _currentLocation - curCol;", "-    String text = getText(lineStart, curCol + _reduced.getDistToNextNewline());", "-    int pos = text.indexOf(\"//\");", "+//    Utilities.show(\"Uncomment line at location \" + _currentLocation);", "+//    Utilities.show(\"Preceding char = '\" + getText().charAt(_currentLocation - 1) + \"'\");", "+//    Utilities.show(\"Line = \\n\" + getText(_currentLocation, getLineEndPos(_currentLocation) - _currentLocation + 1));", "+    int pos1 = getText().indexOf(\"//\", _currentLocation);", "+    int pos2 = getFirstNonWSCharPos(_currentLocation, true);", "+//    Utilities.show(\"Pos1 = \" + pos1 + \" Pos2 = \" + pos2);", "+    if (pos1 != pos2) return NO_COMMENT_OFFSET;", "-    //      System.out.println(\"\" + _currentLocation + \" \" + curCol + \" \"", "-    //                           + text + \" \" + pos + \" \" + _reduced.getDistToNextNewline());", "-    ", "-    // Look for any non-whitespace chars before the \"//\" on the line.", "-    boolean goodWing = true;", "-    for (int i = pos-1; i >= 0; i--) {", "-      char c = text.charAt(i);", "-      // If a previous char is not whitespace, we're not looking at a wing comment.", "-      if (c != ' ') {", "-        goodWing = false;", "-        return NO_COMMENT_OFFSET;", "-      }", "-    }", "-    ", "-    // If a wing comment wasn't found, or if the wings aren't the first", "-    // non-whitespace characters on the line, do nothing.", "-    if (pos >= 0 && goodWing) {", "-      // Otherwise, remove the wings.", "-      remove(lineStart + pos, 2);", "-      //_indentLine(Indenter.IndentReason.OTHER);", "-      return WING_COMMENT_OFFSET;", "-    }", "-    return NO_COMMENT_OFFSET;", "+    remove(pos1, 2);", "+    return WING_COMMENT_OFFSET;"]}], "num": 29295}
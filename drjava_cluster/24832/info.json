{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba04de2a5453ec0b7ee02d2ee5dc177f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc4f9ac26d4d4c7d0804a94067721ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static <T> LinkedList<T> asLinkedList(Iterable<T> iter)", "signatureAfterChange": "   public static boolean isStatic(Iterable<?> iter)", "diff": ["+   */", "+  public static boolean isStatic(Iterable<?> iter) {", "+    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).isStatic(); }", "+    else if (iter instanceof Collection<?>) { return isStaticCollection((Collection<?>) iter); }", "+    else { return false; }", "+  }", "-   */", "-  public static <T> LinkedList<T> asLinkedList(Iterable<T> iter) {", "-    if (iter instanceof LinkedList<?>) { return (LinkedList<T>) iter; }", "-    else if (iter instanceof Collection<?>) { return new LinkedList<T>((Collection<T>) iter); }", "-    else {", "-      LinkedList<T> result = new LinkedList<T>();", "-      for (T e : iter) { result.add(e); }", "-      return result;", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "117ca1ca7ce17fcd863517ef8f009846", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 66, "signatureBeforeChange": "      public static <T> Set<T> asSet(Iterable<T> iter)", "signatureAfterChange": "   public static <T> Set<T> asSet(Iterable<T> iter)", "diff": ["+   */", "+  public static <T> Set<T> asSet(Iterable<T> iter) {", "+    if (iter instanceof Set<?>) { return (Set<T>) iter; }", "+    else { return new IterableSet<T>(iter); }", "+  }", "-  ", "-  public static <T> Set<T> asSet(Iterable<T> iter) {", "-    if (iter instanceof Set<?>) { return (Set<T>) iter; }", "-    else if (iter instanceof Collection<?>) { return new HashSet<T>((Collection<T>) iter); }", "-    else if (iter instanceof SizedIterable<?>) {", "-      SizedIterable<T> si = (SizedIterable<T>) iter;", "-      Set<T> result = new HashSet<T>(si.size());", "-      for (T elt : si) { result.add(elt); }", "-      return result;", "-    else {", "-      Set<T> result = new HashSet<T>();", "-      for (T elt : iter) { result.add(elt); }", "-      return result;", "-    }", "-  }"]}], "num": 24832}
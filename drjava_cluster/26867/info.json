{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a69e9fba5aab3ea7598d786e8912a54a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "088481e92f537d36632aa9ebbb049a57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "aac5f34523ac0f0412292e9d65f671aa46b752f4", "commitAfterChange": "10c44767bf3d5eefd230820d6106fe1ea2534e6f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "diff": ["-    panel.addComponent", "-      (new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_ACCESS_LEVEL,", "-                                       \"Access Level\", this,", "-                                       \"<html>Fields and methods with access modifiers at this level<br>\" +", "-                                       \"or higher will be included in the generated Javadoc.</html>\"));", "-    panel.addComponent", "-      (new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_LINK_VERSION,", "-                                       \"Java Version for Javadoc Links\", this,", "-                                       \"The version of Java for generating links to online Javadoc documentation.\"));", "-    panel.addComponent", "-      (new StringOptionComponent(OptionConstants.JAVADOC_1_3_LINK,", "-                                 \"Javadoc 1.3 URL\", this,", "-                                 \"The URL to the Java 1.3 API, for generating links to library classes.\"));", "-    panel.addComponent", "-      (new StringOptionComponent(OptionConstants.JAVADOC_1_4_LINK,", "-                                 \"Javadoc 1.4 URL\", this,", "-                                 \"The URL to the Java 1.4 API, for generating links to library classes.\"));", "-    panel.addComponent", "-      (new StringOptionComponent(OptionConstants.JAVADOC_1_5_LINK,", "-                                 \"Javadoc 1.5 URL\", this,", "-                                 \"The URL to the Java 1.5 API, for generating links to library classes.\"));", "-", "-    panel.addComponent", "-      (new DirectoryOptionComponent(OptionConstants.JAVADOC_DESTINATION,", "-                                    \"Default Destination Directory\", this,", "-                                    \"Optional default directory for saving Javadoc documentation.\",", "-                                    _dirChooser));", "-", "-    panel.addComponent", "-      (new StringOptionComponent(OptionConstants.JAVADOC_CUSTOM_PARAMS,", "-                                 \"Custom Javadoc Parameters\", this,", "-                                 \"Any extra flags or parameters to pass to Javadoc.\"));", "-", "-    panel.addComponent", "-      (new BooleanOptionComponent(OptionConstants.JAVADOC_FROM_ROOTS,", "-                                  \"Generate Javadoc From Source Roots\", this,", "-                                  \"<html>Whether 'Javadoc All' should generate Javadoc for all packages<br>\" +", "-                                  \"in an open document's source tree, rather than just the document's<br>\" +", "-                                  \"own package and sub-packages.</html>\"));", "-", "+    addOptionComponent(panel, ", "+                       new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_ACCESS_LEVEL,", "+                                                       \"Access Level\", this,", "+                                                       \"<html>Fields and methods with access modifiers at this level<br>\" +", "+                                                       \"or higher will be included in the generated Javadoc.</html>\"));", "+    addOptionComponent(panel, ", "+                       new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_LINK_VERSION,", "+                                                       \"Java Version for Javadoc Links\", this,", "+                                                       \"The version of Java for generating links to online Javadoc documentation.\"));", "+    addOptionComponent(panel, ", "+                       new StringOptionComponent(OptionConstants.JAVADOC_1_3_LINK,", "+                                                 \"Javadoc 1.3 URL\", this,", "+                                                 \"The URL to the Java 1.3 API, for generating links to library classes.\"));", "+    addOptionComponent(panel, ", "+                       new StringOptionComponent(OptionConstants.JAVADOC_1_4_LINK,", "+                                                 \"Javadoc 1.4 URL\", this,", "+                                                 \"The URL to the Java 1.4 API, for generating links to library classes.\"));", "+    addOptionComponent(panel, ", "+                       new StringOptionComponent(OptionConstants.JAVADOC_1_5_LINK,", "+                                                 \"Javadoc 1.5 URL\", this,", "+                                                 \"The URL to the Java 1.5 API, for generating links to library classes.\"));", "+    ", "+    addOptionComponent(panel, ", "+                       new DirectoryOptionComponent(OptionConstants.JAVADOC_DESTINATION,", "+                                                    \"Default Destination Directory\", this,", "+                                                    \"Optional default directory for saving Javadoc documentation.\",", "+                                                    _dirChooser));", "+    ", "+    addOptionComponent(panel, ", "+                       new StringOptionComponent(OptionConstants.JAVADOC_CUSTOM_PARAMS,", "+                                                 \"Custom Javadoc Parameters\", this,", "+                                                 \"Any extra flags or parameters to pass to Javadoc.\"));", "+    ", "+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.JAVADOC_FROM_ROOTS,", "+                                                  \"Generate Javadoc From Source Roots\", this,", "+                                                  \"<html>Whether 'Javadoc All' should generate Javadoc for all packages<br>\" +", "+                                                  \"in an open document's source tree, rather than just the document's<br>\" +", "+                                                  \"own package and sub-packages.</html>\"));", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "258c9c370f5523fd368976e70911c028", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private void _setupDisplayPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupDisplayPanel(ConfigPanel panel)", "diff": ["-      new ForcedChoiceOptionComponent(OptionConstants.LOOK_AND_FEEL, \"Look and Feel\", this,", "-                                      \"Changes the general appearance of DrJava.\");", "+      newForcedChoiceOptionComponent(OptionConstants.LOOK_AND_FEEL);", "-      new ForcedChoiceOptionComponent(OptionConstants.PLASTIC_THEMES, \"Plastic Theme\", this,", "-                                      \"Pick the theme to be used by the Plastic family of Look and Feels\");", "+      newForcedChoiceOptionComponent(OptionConstants.PLASTIC_THEMES);", "-        plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().startsWith(\"com.jgoodies.looks.plastic.\"));", "+        plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().", "+                                                     startsWith(\"com.jgoodies.looks.plastic.\"));", "-    plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().startsWith(\"com.jgoodies.looks.plastic.\"));", "+    plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().", "+                                                 startsWith(\"com.jgoodies.looks.plastic.\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.LINEENUM_ENABLED,", "-                                                  \"Show All Line Numbers\", this,", "-                                                  \"Whether to show line numbers on the left side of the Definitions Pane.\"));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.LINEENUM_ENABLED));", "-                       new BooleanOptionComponent(OptionConstants.SHOW_SOURCE_WHEN_SWITCHING, ", "-                                                  \"Show sample of source code when fast switching\", ", "-                                                  this,", "-                                                  \"Whether to show a sample of the source code under the document's filename when fast switching documents.\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.SHOW_CODE_PREVIEW_POPUPS, ", "-                                                  \"Show Code Preview Popups\", this,", "-                                                  \"<html>Whether to show a popup window with a code preview when the mouse is hovering<br>\"+", "-                                                  \"over an item in the Breakpoints, Bookmarks and Find All panes.</html>\"));", "-        ", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.CLIPBOARD_HISTORY_SIZE,", "-                                                  \"Size of Clipboard History\", this,", "-                                                         \"Determines how many entries are kept in the clipboard history.\"));", "+                       newBooleanOptionComponent(OptionConstants.SHOW_SOURCE_WHEN_SWITCHING));", "+    ", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.SHOW_CODE_PREVIEW_POPUPS));", "+    ", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.CLIPBOARD_HISTORY_SIZE));", "-      new BooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_FULLY_QUALIFIED,", "-                                 \"<html><p align=\\\"right\\\">\" + ", "-                                 StringOps.", "-                                   splitStringAtWordBoundaries(\"Display Fully-Qualified Class Names in \\\"Go to File\\\" Dialog\",", "-                                                               40, \"<br>\", SEPS)+\"</p></html>\", this,", "-                                 \"<html>Whether to also display fully-qualified class names in the \\\"Go to File\\\" dialog.<br>\"+", "-                                 \"Enabling this option on network drives might cause the dialog to display after a slight delay.</html>\");", "+      newBooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_FULLY_QUALIFIED);", "-      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES,", "-                                 \"<html><p align=\\\"right\\\">\" + ", "-                                 StringOps.", "-                                   splitStringAtWordBoundaries(\"Scan Class Files After Each Compile for Auto-Completion and Auto-Import\",", "-                                                               40, \"<br>\", SEPS)+\"</p></html>\", this,", "-                                 \"<html>Whether to scan the class files after a compile to generate class names<br>\"+", "-                                 \"used for auto-completion and auto-import.<br>\"+", "-                                 \"Enabling this option will slow compiles down.</html>\");", "+      newBooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES);", "-      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_JAVAAPI,", "-                                 \"<html><p align=\\\"right\\\">\" + ", "-                                 StringOps.", "-                                   splitStringAtWordBoundaries(\"Consider Java API Classes for Auto-Completion\",", "-                                                               40, \"<br>\", SEPS)+\"</p></html>\", this,", "-                                 \"Whether to use the names of the Java API classes for auto-completion as well.\");", "+      newBooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_JAVAAPI);", "-      new BooleanOptionComponent(OptionConstants.DISPLAY_RIGHT_MARGIN, \"Display right margin\", this,", "-                                 \"Whether to display a line at the right margin.\");", "+      newBooleanOptionComponent(OptionConstants.DISPLAY_RIGHT_MARGIN);", "-      new IntegerOptionComponent(OptionConstants.RIGHT_MARGIN_COLUMNS,", "-                                 \"Right Margin Position\", this,", "-                                 \"The number of columns after which the right margin is displayed.\");", "+      newIntegerOptionComponent(OptionConstants.RIGHT_MARGIN_COLUMNS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c77bfe06b244593563c84300c6c534", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "commitAfterChange": "72ee238f22e4ae6534ad887ff5bcbab9970c036e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   private void _setupDisplayPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupDisplayPanel(ConfigPanel panel)", "diff": ["+   ", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "+        ", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_FULLY_QUALIFIED,", "-                                                  \"Display Fully-Qualified Class Names in \\\"Go to File\\\" Dialog\", this,", "-                                                  \"<html>Whether to also display fully-qualified class names in the \\\"Go to File\\\" dialog.<br>\"+", "-                                                         \"Enabling this option on network drives might cause the dialog to display after a slight delay.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES,", "-                                                  \"Scan Class Files After Each Compile For Auto-Completion and Auto-Import\", this,", "-                                                  \"<html>Whether to scan the class files after a compile to generate class names<br>\"+", "-                                                         \"used for auto-completion and auto-import.<br>\"+", "-                                                         \"Enabling this option will slow compiles down.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_JAVAAPI,", "-                                                  \"Consider Java API Classes for Auto-Completion\", this,", "-                                                  \"Whether to use the names of the Java API classes for auto-completion as well.\"));", "+    ", "+    LabelComponent label = new LabelComponent(\" \", this);", "+    label.setEntireColumn(true);", "+    addOptionComponent(panel, label);", "+    BooleanOptionComponent checkbox = ", "+      new BooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_FULLY_QUALIFIED,", "+                                 \"<html><p align=\\\"right\\\">\"+StringOps.splitStringAtWordBoundaries(\"Display Fully-Qualified Class Names in \\\"Go to File\\\" Dialog\",", "+                                                                                                   27, \"<br>\", SEPS)+\"</p></html>\", this,", "+                                 \"<html>Whether to also display fully-qualified class names in the \\\"Go to File\\\" dialog.<br>\"+", "+                                 \"Enabling this option on network drives might cause the dialog to display after a slight delay.</html>\");", "+    addOptionComponent(panel, checkbox);", "+    ", "+    label = new LabelComponent(\" \", this);", "+    label.setEntireColumn(true);", "+    addOptionComponent(panel, label);", "+    checkbox =", "+      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES,", "+                                 \"<html><p align=\\\"right\\\">\"+StringOps.splitStringAtWordBoundaries(\"Scan Class Files After Each Compile for Auto-Completion and Auto-Import\",", "+                                                                                                   27, \"<br>\", SEPS)+\"</p></html>\", this,", "+                                 \"<html>Whether to scan the class files after a compile to generate class names<br>\"+", "+                                 \"used for auto-completion and auto-import.<br>\"+", "+                                 \"Enabling this option will slow compiles down.</html>\");", "+    addOptionComponent(panel, checkbox);", "+    ", "+    label = new LabelComponent(\" \", this);", "+    label.setEntireColumn(true);", "+    addOptionComponent(panel, label);", "+    checkbox =", "+      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_JAVAAPI,", "+                                 \"<html><p align=\\\"right\\\">\"+StringOps.splitStringAtWordBoundaries(\"Consider Java API Classes for Auto-Completion\",", "+                                                                                                   27, \"<br>\", SEPS)+\"</p></html>\", this,", "+                                 \"Whether to use the names of the Java API classes for auto-completion as well.\");", "+    addOptionComponent(panel, checkbox);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65c3134c314cfa98afdc7b4242a96684", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "77b08b2c2aecee48e010895d99d03539a1aa19da", "commitAfterChange": "8c0220c285239f624657ec2660b265363e131e14", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   private void _setupMiscPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, ", "-                       new ForcedChoiceOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION,", "-                                                       \"Check for new versions?\", this,", "-                                                       \"Whether DrJava should check for new versions on drjava.org.\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION_DAYS,", "-                                                         \"Days between new version check\", this,", "-                                                         \"The number of days between automatic new version checks.\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.HISTORY_MAX_SIZE, \"Size of Interactions History\", this,", "-                                                  \"The number of interactions to remember in the history.\"));", "-    addOptionComponent(panel, ", "-                       new ForcedChoiceOptionComponent(OptionConstants.MASTER_JVM_XMX, ", "-                                                       \"Maximum Heap Size for Main JVM in MB\", ", "-                                                       this,", "-                                                       \"The maximum heap the Main JVM can use. Select blank for default.\"));", "-    addOptionComponent(panel, ", "-                       new StringOptionComponent(OptionConstants.MASTER_JVM_ARGS, \"JVM Args for Main JVM\", ", "-                                                 this,", "-                                                 \"The command-line arguments to pass to the Main JVM.\"));", "-    addOptionComponent(panel, ", "-                       new ForcedChoiceOptionComponent(OptionConstants.SLAVE_JVM_XMX, ", "-                                                       \"Maximum Heap Size for Interactions JVM in MB\", ", "-                                                       this,", "-                                                       \"The maximum heap the Interactions JVM can use. Select blank for default\"));", "-    addOptionComponent(panel, ", "-                       new StringOptionComponent(OptionConstants.SLAVE_JVM_ARGS, \"JVM Args for Interactions JVM\", ", "-                                                 this,", "-                                                 \"The command-line arguments to pass to the Interactions JVM.\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.BROWSER_HISTORY_MAX_SIZE,", "-                                                         \"Maximum Size of Browser History\", ", "-                                                         this,", "-                                                         \"Determines how many entries are kept in the browser history.\"));", "-                       new BooleanOptionComponent(OptionConstants.SHOW_SOURCE_WHEN_SWITCHING, ", "-                                                  \"Show sample of source code when fast switching\", ", "-                                                  this,", "-                                                  \"Whether to show a sample of the source code under the document's filename when fast switching documents.\"));", "-    addOptionComponent(panel, ", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.SHOW_CODE_PREVIEW_POPUPS, ", "-                                                  \"Show Code Preview Popups\", this,", "-                                                  \"<html>Whether to show a popup window with a code preview when the mouse is hovering<br>\"+", "-                                                  \"over an item in the Breakpoints, Bookmarks and Find All panes.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_AUTOIMPORT_ENABLED, ", "-                                                         \"Enable the \\\"Auto Import\\\" Dialog\", this,", "-                                                         \"<html>Whether DrJava should open the \\\"Auto Import\\\" dialog when<br>\"+", "-                                                         \"an undefined class is encountered in the Interactions Pane.</html>\"));", "-    VectorStringOptionComponent autoImportClasses =", "-      new VectorStringOptionComponent(OptionConstants.INTERACTIONS_AUTO_IMPORT_CLASSES, \"Classes to Auto-Import\", this,", "-                                      \"<html>List of classes to auto-import every time the<br>\"+", "-                                      \"Interaction Pane is reset or started. Examples:<br><br>\"+", "-                                      \"java.io.File<br>\"+", "-                                      \"java.util.*</html>\") {", "-      protected boolean verify(String s) {", "-        boolean result = true;", "-        // verify that the string contains only Java identifier characters, dots and stars", "-        for(int i=0; i<s.length(); ++i) {", "-          char ch = s.charAt(i);", "-          if ((ch!='.') && (ch!='*') && (!Character.isJavaIdentifierPart(ch))) {", "-            result = false;", "-            break;", "-          }", "-        }", "-        if (!result) {", "-          JOptionPane.showMessageDialog(ConfigFrame.this,", "-                                        \"This is not a valid class name:\\n\"+", "-                                        s,", "-                                        \"Error Adding Class Name\",", "-                                        JOptionPane.ERROR_MESSAGE); ", "-        }", "-        return result;", "-      }", "-    };", "-    addOptionComponent(panel, autoImportClasses);", "-    ", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.WARN_IF_COMPIZ, ", "-                                                         \"Warn If Compiz Detected\", this,", "-                                                         \"<html>Whether DrJava should warn the user if Compiz is running.<br>\"+", "-                                                         \"Compiz and Java Swing are incompatible and can lead to crashes.</html>\"));", "-    ", "+    panel.displayComponents();", "+  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5d6ea626a7dcc62a1b23a22e32a6214", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 67, "signatureBeforeChange": "   private void _setupInteractionsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupInteractionsPanel(ConfigPanel panel)", "diff": ["-      new DirectoryOptionComponent(OptionConstants.FIXED_INTERACTIONS_DIRECTORY,", "-                                   \"Interactions Working Directory\", this,", "-                                   \"<html>Working directory for the Interactions Pane (unless<br>\"+", "-                                   \"a project working directory has been set).</html>\",", "-                                   _dirChooser);", "+      newDirectoryOptionComponent(OptionConstants.FIXED_INTERACTIONS_DIRECTORY, _dirChooser);", "-      new BooleanOptionComponent(OptionConstants.STICKY_INTERACTIONS_DIRECTORY,", "-                                 \"<html><p align=\\\"right\\\">\" + ", "-                                 StringOps.", "-                                   splitStringAtWordBoundaries(\"Restore last working directory of the Interactions pane on start up\",", "-                                                               33, \"<br>\", SEPS), this,", "-                                 \"<html>Whether to restore the last working directory of the Interaction pane on start up,<br>\" +", "-                                 \"or to always use the value of the \\\"user.home\\\" Java property<br>\"+", "-                                 \"(currently \"+System.getProperty(\"user.home\")+\").\");", "+      newBooleanOptionComponent(OptionConstants.STICKY_INTERACTIONS_DIRECTORY);", "-    addOptionComponent(panel, new BooleanOptionComponent", "-                         (OptionConstants.SMART_RUN_FOR_APPLETS_AND_PROGRAMS, ", "-                          \"Smart Run Command\", this,", "-                          \"<html>Whether the Run button and meni item should automatically detect<br>\"+", "-                          \"applets and ACM Java Task Force programs (subclasses of acm.program.Program).</html>\"));", "+    addOptionComponent(panel, newBooleanOptionComponent", "+                         (OptionConstants.SMART_RUN_FOR_APPLETS_AND_PROGRAMS));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.HISTORY_MAX_SIZE, \"Size of Interactions History\", this,", "-                                                  \"The number of interactions to remember in the history.\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_AUTOIMPORT_ENABLED, ", "-                                                         \"Enable the \\\"Auto Import\\\" Dialog\", this,", "-                                                         \"<html>Whether DrJava should open the \\\"Auto Import\\\" dialog when<br>\"+", "-                                                         \"an undefined class is encountered in the Interactions Pane.</html>\"));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.HISTORY_MAX_SIZE));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DIALOG_AUTOIMPORT_ENABLED));", "-      new VectorStringOptionComponent(OptionConstants.INTERACTIONS_AUTO_IMPORT_CLASSES, \"Classes to Auto-Import\", this,", "-                                      \"<html>List of classes to auto-import every time the<br>\"+", "-                                      \"Interaction Pane is reset or started. Examples:<br><br>\"+", "-                                      \"java.io.File<br>\"+", "-                                      \"java.util.*</html>\") {", "+      new VectorStringOptionComponent(OptionConstants.INTERACTIONS_AUTO_IMPORT_CLASSES,", "+                                      CONFIG_DESCRIPTIONS.get(OptionConstants.INTERACTIONS_AUTO_IMPORT_CLASSES),", "+                                      this,", "+                                      CONFIG_LONG_DESCRIPTIONS.get(OptionConstants.INTERACTIONS_AUTO_IMPORT_CLASSES)) {", "-                       new ForcedChoiceOptionComponent(OptionConstants.DYNAMICJAVA_ACCESS_CONTROL,", "-                                                       \"Enforce access control\", ", "-                                                       this,", "-                                                       \"What kind of access control should DrJava enforce in the Interactions Pane?\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DYNAMICJAVA_REQUIRE_SEMICOLON, ", "-                                                         \"Require Semicolon\", this,", "-                                                         \"<html>Whether DrJava should require a semicolon at the<br>\"+", "-                                                         \"end of a statement in the Interactions Pane.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DYNAMICJAVA_REQUIRE_VARIABLE_TYPE, ", "-                                                         \"Require Variable Type\", this,", "-                                                         \"<html>Whether DrJava should require a variable type for<br>\"+", "-                                                         \"variable declarations in the Interactions Pane.</html>\"));", "+                       newForcedChoiceOptionComponent(OptionConstants.DYNAMICJAVA_ACCESS_CONTROL));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DYNAMICJAVA_REQUIRE_SEMICOLON));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DYNAMICJAVA_REQUIRE_VARIABLE_TYPE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cedd5a74d416edf736dd52263228aac2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 54, "signatureBeforeChange": "   private void _setupDebugPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupDebugPanel(ConfigPanel panel)", "diff": ["-      new VectorFileOptionComponent(OptionConstants.DEBUG_SOURCEPATH, \"Sourcepath\", this,", "-                                    \"<html>Any directories in which to search for source<br>\" +", "-                                    \"files when stepping in the Debugger.</html>\", true);", "+      newVectorFileOptionComponent(OptionConstants.DEBUG_SOURCEPATH, true);", "-                       new BooleanOptionComponent(OptionConstants.DEBUG_STEP_JAVA,", "-                                                  \"Step Into Java Classes\", ", "-                                                  this,", "-                                                  \"<html>Whether the Debugger should step into Java library classes,<br>\" +", "-                                                  \"including java.*, javax.*, sun.*, com.sun.*, com.apple.eawt.*, and com.apple.eio.*</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DEBUG_STEP_INTERPRETER,", "-                                                  \"Step Into Interpreter Classes\", this,", "-                                                  \"<html>Whether the Debugger should step into the classes<br>\" +", "-                                                  \"used by the Interactions Pane (DynamicJava).</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DEBUG_STEP_DRJAVA,", "-                                                  \"Step Into DrJava Classes\", this,", "-                                                  \"Whether the Debugger should step into DrJava's own class files.\"));", "+                       newBooleanOptionComponent(OptionConstants.DEBUG_STEP_JAVA));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DEBUG_STEP_INTERPRETER));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DEBUG_STEP_DRJAVA));", "-                       new VectorStringOptionComponent(OptionConstants.DEBUG_STEP_EXCLUDE,", "-                                                       \"Classes/Packages To Exclude\", ", "-                                                       this,", "-                                                       \"<html>Any classes that the debuggger should not step into.<br>\" +", "-                                                       \"Should be a list of fully-qualified class names.<br>\" +", "-                                                       \"To exclude a package, add <code>packagename.*</code> to the list.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DEBUG_AUTO_IMPORT,", "-                                                  \"Auto-Import after Breakpoint/Step\", this,", "-                                                  \"<html>Whether the Debugger should automatically import packages<br>\"+", "-                                                  \"and classes again after a breakpoint or step.</html>\"));", "+                       newVectorStringOptionComponent(OptionConstants.DEBUG_STEP_EXCLUDE, false));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DEBUG_AUTO_IMPORT));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.AUTO_STEP_RATE,", "-                                                         \"Auto-Step Rate in ms\",", "-                                                         this,", "-                                                         \"<html>A defined rate in ms at which the debugger automatically steps into/over each line of code.<br>\" +", "-                                                         \"Value entered must be an integer value. </html>\"));                                                            ", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DEBUG_EXPRESSIONS_AND_METHODS_IN_WATCHES,", "-                                                         \"Allow Expressions and Method Calls in Watches\", this,", "-                                                         \"<html>Whether the Debugger should allow expressions and method<br>\"+", "-                                                         \"calls in watches. These may have side effects and can cause<br>\"+", "-                                                         \"delays during the debug process.</html>\"));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.AUTO_STEP_RATE));                                                            ", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DEBUG_EXPRESSIONS_AND_METHODS_IN_WATCHES));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d47b11bd7df20c03d20e45e46370e607", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 55, "signatureBeforeChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "diff": ["-                       new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_API_REF_VERSION,", "-                                                       \"Java Version for \\\"Open Java API Javadoc\\\"\", ", "-                                                       this,", "-                                                       \"Version of the Java API documentation to be used.\"));", "+                       newForcedChoiceOptionComponent(OptionConstants.JAVADOC_API_REF_VERSION));", "-                       new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_ACCESS_LEVEL,", "-                                                       \"Access Level\", ", "-                                                       this,", "-                                                       \"<html>Fields and methods with access modifiers at this level<br>\" +", "-                                                       \"or higher will be included in the generated Javadoc.</html>\"));", "+                       newForcedChoiceOptionComponent(OptionConstants.JAVADOC_ACCESS_LEVEL));", "-                       new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_LINK_VERSION,", "-                                                       \"Java Version for Javadoc Links\", ", "-                                                       this,", "-                                                       \"Version of Java for generating links to online Javadoc documentation.\"));", "+                       newForcedChoiceOptionComponent(OptionConstants.JAVADOC_LINK_VERSION));", "-                       new StringOptionComponent(OptionConstants.JAVADOC_1_5_LINK,", "-                                                 \"Javadoc 1.5 URL\", this,", "-                                                 \"URL for the Java 1.5 API, for generating links to library classes.\"));", "+                       newStringOptionComponent(OptionConstants.JAVADOC_1_5_LINK));", "-                       new StringOptionComponent(OptionConstants.JAVADOC_1_6_LINK,", "-                                                 \"Javadoc 1.6 URL\", this,", "-                                                 \"URL for the Java 1.6 API, for generating links to library classes.\"));", "+                       newStringOptionComponent(OptionConstants.JAVADOC_1_6_LINK));", "-                       new StringOptionComponent(OptionConstants.JUNIT_LINK,", "-                                                 \"JUnit URL\", this,", "-                                                 \"URL for the JUnit API, for \\\"Open Java API Javadoc\\\".\"));", "+                       newStringOptionComponent(OptionConstants.JUNIT_LINK));", "-      new VectorStringOptionComponent(OptionConstants.JAVADOC_ADDITIONAL_LINKS, \"Additional Javadoc URLs\", this,", "-                                      \"<html>Additional URLs with Javadoc, for \\\"Open Java API Javadoc\\\"<br>\" +", "-                                      \"and auto-completion.</html>\") {", "+      new VectorStringOptionComponent(OptionConstants.JAVADOC_ADDITIONAL_LINKS, ", "+                                      CONFIG_DESCRIPTIONS.get(OptionConstants.JAVADOC_ADDITIONAL_LINKS),", "+                                      this,", "+                                      CONFIG_LONG_DESCRIPTIONS.get(OptionConstants.JAVADOC_ADDITIONAL_LINKS)) {", "-                       new DirectoryOptionComponent(OptionConstants.JAVADOC_DESTINATION,", "-                                                    \"Default Destination Directory\", this,", "-                                                    \"Optional default directory for saving Javadoc documentation.\",", "-                                                    _dirChooser));", "+                       newDirectoryOptionComponent(OptionConstants.JAVADOC_DESTINATION, _dirChooser));", "-                       javadocCustomParams = new StringOptionComponent(OptionConstants.JAVADOC_CUSTOM_PARAMS,", "-                                                 \"Custom Javadoc Parameters\", this,", "-                                                 \"Any extra flags or parameters to pass to Javadoc.\"));", "+                       javadocCustomParams = newStringOptionComponent(OptionConstants.JAVADOC_CUSTOM_PARAMS));", "-//                       new BooleanOptionComponent(OptionConstants.JAVADOC_FROM_ROOTS,", "-//                                                  \"Generate Javadoc From Source Roots\", this,", "-//                                                  \"<html>Whether \\\"Javadoc All\\\" should generate Javadoc for all packages<br>\" +", "-//                                                  \"in an open document's source tree, rather than just the document's<br>\" +", "-//                                                  \"own package and sub-packages.</html>\"));", "+//                       newBooleanOptionComponent(OptionConstants.JAVADOC_FROM_ROOTS));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82cf6e3bba2460c175770a94279ebf9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "diff": ["-    panel.addComponent(new BooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT, \"Prompt If Interactions Pane Exits Unexpectedly\", this,", "-                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "-                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.INTERACTIONS_RESET_PROMPT, \"Prompt Before Resetting Interactions Pane\", this,", "-                                                  \"Whether DrJava should prompt the user before resetting the interactinos pane.\"));", "+    // Quit", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_COMPILE, \"Automatically Save Before Compiling\", this,", "+", "+    // Interactions", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.INTERACTIONS_RESET_PROMPT,", "+                                                  \"Prompt Before Resetting Interactions Pane\", this,", "+                                                  \"<html>Whether DrJava should prompt the user before<br>\" +", "+                                                  \"manually resetting the interactions pane.</html>\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT,", "+                                                  \"Prompt if Interactions Pane Exits Unexpectedly\", this,", "+                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "+                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\"));", "+    ", "+    // Javadoc", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,", "+                                                  \"Prompt for Javadoc Destination\", this,", "+                                                  \"<html>Whether Javadoc should always prompt the user<br>\" +", "+                                                  \"to select a destination directory.</html>\"));", "+    ", "+", "+    // Save before X", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_COMPILE,", "+                                                  \"Automatically Save Before Compiling\", this,", "-                                                  \"recompiling, or instead should ask the user each time.</html>\"));", "+                                                  \"recompiling or ask the user each time.</html>\"));", "-    ", "+//    // These are not currently used.", "-//                                                  \"testing with JUnit, or instead should ask the user each time</html>\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JAVADOC, \"Automatically Save Before Generating Javadoc\", this,", "-                                                  \"<html>Whether DrJava should automatically save before generating<br>\" +", "-                                                  \"Javadoc, or instead should ask the user each time.</html>\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,", "-                                                  \"Always Prompt for Javadoc Destination\", this,", "-                                                  \"Whether Javadoc should always prompt the user for the destination directory.\"));", "+//                                                  \"testing with JUnit or ask the user each time.</html>\"));", "-//                                                  \"debugging, or instead should ask the user each time</html>\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC, \"Warn on Breakpoint If out of Sync\", this,", "-                                                  \"<html>Whether DrJava should prompt the user if the class file<br>\" +", "+//                                                  \"debugging or ask the user each time.</html>\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JAVADOC,", "+                                                  \"Automatically Save Before Generating Javadoc\", this,", "+                                                  \"<html>Whether DrJava should automatically save before<br>\" +", "+                                                  \"generating Javadoc or ask the user each time.</html>\"));", "+    ", "+    // Warnings", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC,", "+                                                  \"Warn on Breakpoint if Out of Sync\", this,", "+                                                  \"<html>Whether DrJava should warn the user if the class file<br>\" +", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE, \"Warn if Debugging Modified File\", this,", "-                                                  \"Whether DrJava should prompt the user if the file being debugged has been modified.\"));", "-    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF, \"Warn to Restart in order to Change Look and Feel\", this,", "-                                                    \"<html>Whether DrJava should warn the user that look and feel<br>\" +", "-                                                    \"changes will not be applied until DrJava is restarted.</html>.\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE,", "+                                                  \"Warn if Debugging Modified File\", this,", "+                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +", "+                                                  \"debugged has been modified since its last save.</html>\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF,", "+                                                  \"Warn to Restart to Change Look and Feel\", this,", "+                                                  \"<html>Whether DrJava should warn the user that look and feel<br>\" +", "+                                                  \"changes will not be applied until DrJava is restarted.</html>.\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eed7f5eb91fbf91e219934e602533cc6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/ConcJUnitUtils.java", "commitBeforeChange": "bd123d07912360358a1a9262bb626bfc554bdb6a", "commitAfterChange": "93bb4da1a23773a035879ef207e07af07446c39f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static void showIncompatibleWantToRegenerateDialog(final Frame parentFrame,                                                             final Runnable yesRunnable,                                                             final Runnable noRunnable)", "signatureAfterChange": "\r   public static boolean showIncompatibleWantToRegenerateDialog(final Frame parentFrame,\r                                                                final Runnable yesRunnable,\r                                                                final Runnable noRunnable)", "diff": ["-    */", "-  public static void showIncompatibleWantToRegenerateDialog(final Frame parentFrame,", "-                                                            final Runnable yesRunnable,", "-                                                            final Runnable noRunnable) {", "-    Object[] options = {\"Yes\",\"No\"};", "-    int n = JOptionPane.showOptionDialog(parentFrame,", "-                                         \"The specified ConcJUnit runtime file is incompatible with the\\n\"+", "-                                         \"current version of Java.  Do you wish to regenerate the file?\",", "-                                         \"Regenerate ConcJUnit Runtime\",", "-                                         JOptionPane.YES_NO_OPTION,", "-                                         JOptionPane.QUESTION_MESSAGE,", "-                                         null,", "-                                         options,", "-                                         options[1]);", "-    if (n==0) {", "-      // yes", "-      File concJUnitJarFile = FileOps.getDrJavaFile();", "-      if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED)) {", "-        concJUnitJarFile = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);", "-      }", "-      File rtFile = DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION);", "-      showGenerateRTConcJUnitJarFileDialog(parentFrame,", "-                                           rtFile,", "-                                           concJUnitJarFile,", "-                                           new Runnable1<File>() {", "-        public void run(File targetFile) {", "-          // success", "-          DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION, targetFile);", "-          yesRunnable.run();", "-        }", "-      },", "-                                           new Runnable() {", "-                                             public void run() {", "-                                               // failure", "-                                               if (DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "-                                                     equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY)) {", "-                                                 DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,", "-                                                                               OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "-                                               }", "-                                               noRunnable.run();", "-                                             } });", "-    }", "-    else {", "-      // no", "-      if (DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "-            equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY)) {", "-        DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,", "-                                      OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "-      }", "-      noRunnable.run();", "-    }", "-  }", "+    */\r", "+  public static boolean showIncompatibleWantToRegenerateDialog(final Frame parentFrame,\r", "+                                                               final Runnable yesRunnable,\r", "+                                                               final Runnable noRunnable) {\r", "+    Object[] options = {\"Yes\",\"No\"};\r", "+    int n = JOptionPane.showOptionDialog(parentFrame,\r", "+                                         \"The specified ConcJUnit runtime file is incompatible with the\\n\"+\r", "+                                         \"current version of Java.  Do you wish to regenerate the file?\",\r", "+                                         \"Regenerate ConcJUnit Runtime\",\r", "+                                         JOptionPane.YES_NO_OPTION,\r", "+                                         JOptionPane.QUESTION_MESSAGE,\r", "+                                         null,\r", "+                                         options,\r", "+                                         options[1]);\r", "+    if (n==0) {\r", "+      // yes\r", "+      File concJUnitJarFile = FileOps.getDrJavaFile();\r", "+      if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED)) {\r", "+        concJUnitJarFile = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);\r", "+      }\r", "+      File rtFile = DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION);\r", "+      showGenerateRTConcJUnitJarFileDialog(parentFrame,\r", "+                                           rtFile,\r", "+                                           concJUnitJarFile,\r", "+                                           new Runnable1<File>() {\r", "+        public void run(File targetFile) {\r", "+          // success\r", "+          DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION, targetFile);\r", "+          yesRunnable.run();\r", "+        }\r", "+      },\r", "+                                           new Runnable() {\r", "+                                             public void run() {\r", "+                                               // failure\r", "+                                               if (DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).\r", "+                                                     equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY)) {\r", "+                                                 DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,\r", "+                                                                               OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);\r", "+                                               }\r", "+                                               noRunnable.run();\r", "+                                             } });\r", "+      return true;\r", "+    }\r", "+    else {\r", "+      // no\r", "+      if (DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).\r", "+            equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY)) {\r", "+        DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,\r", "+                                      OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);\r", "+      }\r", "+      noRunnable.run();\r", "+      return false;\r", "+    }\r", "+  }\r"]}], "num": 26867}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1e9bba63f654b59054d51f84213d506", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1249ecba3622744a5e4913b517670df5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "122a4aca1ff92eaf07930221c018670fe18c314a", "commitAfterChange": "ea58ebfcec38aad3c446138f5dc29fb9b0bd55b4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   private void _init(Component owner, File root, boolean allowMultiple, boolean showHidden)", "signatureAfterChange": "   private void _init(Window owner, File root, boolean allowMultiple, boolean showHidden)", "diff": ["-  private void _init(Component owner, File root, boolean allowMultiple, boolean showHidden) {", "+  private void _init(Window owner, File root, boolean allowMultiple, boolean showHidden) {", "+    _owner = owner;", "+    ", "+    _embedded = false;", "-    ", "-    Container cp = getContentPane();", "-    cp.setLayout(new BorderLayout());", "+    ////////////////", "-    cp.add(_northPanel, BorderLayout.NORTH);", "+    ", "-    Border outerBorder = BorderFactory.createEmptyBorder(0,10,0,10);", "-    _scroller.setBorder(BorderFactory.createCompoundBorder(outerBorder,innerBorder));", "-    JPanel spanel = new JPanel(new BorderLayout(5,5));", "-    spanel.add(_scroller);", "-    cp.add(spanel, BorderLayout.CENTER);", "+//    Border outerBorder = BorderFactory.createEmptyBorder(0,10,0,10);", "+//    Border fullBorder = BorderFactory.createCompoundBorder(outerBorder,innerBorder);", "+    _scroller.setBorder(innerBorder);", "-    _approveButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        // If the button was clicked when none were selected, it's an error.", "-        // The error option is default and doesn't need to be set.", "-        _tree.cancelEditing();", "-        if (_tree.getSelectionCount() > 0) {", "-          _finalResult = APPROVE_OPTION;", "-        }", "-        DirectoryChooser.this.setVisible(false);", "-      }", "-    });", "-    getRootPane().setDefaultButton(_approveButton);", "-    _cancelAction = new AbstractAction(_cancelText) {", "-      public void actionPerformed(ActionEvent e) {", "-        _finalResult = CANCEL_OPTION;", "-        _tree.cancelEditing();", "-        DirectoryChooser.this.setVisible(false);", "-      }", "-    };", "-    _cancelButton = new JButton(_cancelAction);", "-    String key = \"dc_cancel\";", "-    getRootPane().getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), key);", "-    getRootPane().getActionMap().put(key, _cancelAction);", "+    _cancelButton = new JButton(_cancelText);", "+    ", "-        launchCreateNewDirectory();", "+        startCreateNewDirectory();", "-    cp.add(_southPanel, BorderLayout.SOUTH);", "-    ", "-    ", "-    this.addWindowListener(new WindowAdapter() {", "-      public void windowClosing(WindowEvent e) {", "-        _finalResult = CANCEL_OPTION;", "-      }", "-    });", "-        _tree.startEditingAtPath(_tree.getSelectionPath());", "+        startRename();", "-        tryToDeletePath(_tree.getSelectionPath());", "+        startDelete();", "-        launchCreateNewDirectory(_tree.getSelectionPath());", "+        startCreateNewDirectory();", "-    setLocationRelativeTo(null);", "-    setSize(330, 400);", "+    this.setLayout(new BorderLayout());", "+    this.add(_scroller, BorderLayout.CENTER);", "+    this.setBackground(Color.blue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd962ebc60892fb34a8037183153ef21", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "signatureAfterChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "diff": ["-    super(model, frame, \"Compiler Output\");", "+    super(model, frame, \"Compiler Output\", \"Compiler\");", "-", "-", "+    ", "-", "-    nextErrorButton.setMargin(new Insets(0,0,0,0));", "-    //nextErrorButton.setBorder(BorderFactory.createEmptyBorder());", "-    nextErrorButton.setToolTipText(\"Go to the next error\");", "-    prevErrorButton.setMargin(new Insets(0,0,0,0));", "-    //prevErrorButton.setBorder(BorderFactory.createEmptyBorder());", "-    prevErrorButton.setToolTipText(\"Go to the previous error\");", "-//    _showHighlightsCheckBox.setText(\"Highlight\");", "-", "+    setErrorListPane(_errorListPane);", "+    ", "+    /******** Initialize the drop-down compiler menu ********/", "-    _mainPanel.setLayout(new BorderLayout());", "-    _mainPanel.setMinimumSize(new Dimension(225,60));", "-", "-    // We make the vertical scrollbar always there.", "-    // If we don't, when it pops up it cuts away the right edge of the", "-    // text. Very bad.", "-    JScrollPane scroller =", "-      new BorderlessScrollPane(_errorListPane,", "-                      JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,", "-                      JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);", "-", "-    JPanel compilerPanel = new JPanel(new BorderLayout());", "-    compilerPanel.setBorder(new EmptyBorder(0,5,0,5)); // 5 pix padding on sides", "-    JPanel uiBox = new JPanel(new BorderLayout());", "-    uiBox.setBorder(new EmptyBorder(5,0,0,0)); // 5 pix padding on top", "-    compilerPanel.add(new JLabel(\"Compiler\", SwingConstants.LEFT),", "-                      BorderLayout.NORTH);", "-", "-    compilerPanel.add(uiBox,BorderLayout.CENTER);", "-//    uiBox.add(_compilerChoiceBox,BorderLayout.NORTH);", "-", "-    JPanel midPanel = new JPanel();", "- //nextErrorButton.setEnabled(false);", "-    nextErrorButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        _errorListPane.nextError();", "-//  prevErrorButton.setEnabled(_errorListPane.hasPrevError());", "-//  nextErrorButton.setEnabled(_errorListPane.hasNextError());", "-      }", "-    });", "- //prevErrorButton.setEnabled(false);", "-    prevErrorButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        _errorListPane.prevError();", "-//  prevErrorButton.setEnabled(_errorListPane.hasPrevError());", "-//  nextErrorButton.setEnabled(_errorListPane.hasNextError());", "-      }", "-    });", "-    midPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 3, 3));  // 3 pix padding on sides", "-    midPanel.setPreferredSize(new Dimension(170,70));", "-//    midPanel.add(errorPanel);", "-    midPanel.add(_compilerChoiceBox);", "-    midPanel.add(_showHighlightsCheckBox);", "-    uiBox.add(midPanel,BorderLayout.EAST);", "-", "+    customPanel.add(_compilerChoiceBox, BorderLayout.NORTH);", "-    JPanel errorPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 3)); ", "-    errorPanel.setPreferredSize(new Dimension(27,35));", "-    errorPanel.add(prevErrorButton);", "-//    errorLabel.setMargin(new Insets(3,0,3,0));", "-//    errorLabel.setBorder(BorderFactory.createEtchedBorder());", "-    errorPanel.add(nextErrorButton);", "-//    errorPanel.setBorder(BorderFactory.createEtchedBorder());", "-    uiBox.add(errorPanel, BorderLayout.WEST);", "-", "-    _mainPanel.add(scroller, BorderLayout.CENTER);", "-    _mainPanel.add(compilerPanel, BorderLayout.EAST);", "-    //uiBox.add(_showHighlightsCheckBox, BorderLayout.SOUTH);", "-  }", "+    }"]}], "num": 21212}
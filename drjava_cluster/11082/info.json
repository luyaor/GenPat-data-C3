{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37dd2e9997da48064cf8bb379c8ac6c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85be8e00baa55920c1d82533e46bdbf9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "17b59cf1640c29fbcc5ed0fdfe96f8053eaa1da0", "commitAfterChange": "eef32107e75e031eb7210130ce310e1714e51b91", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "               @Override public Type visit(AmbiguousName node)", "signatureAfterChange": "               @Override public Type visit(AmbiguousName node)", "diff": ["-        // VARIABLE_TYPE and TYPE properties are important in the enclosing context; others", "-        // (such as FIELD) are not, and need not be copied to the AmbiguousName", "+        // VARIABLE_TYPE, TYPE, FIELD, and VARIABLE properties are important in the enclosing context;", "+        // others are not, and need not be copied to the AmbiguousName", "+        if (hasField(resolvedExp)) { setField(node, getField(resolvedExp)); }", "+        if (hasVariable(resolvedExp)) { setVariable(node, getVariable(resolvedExp)); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac8ef04acd88ab9a9bd688723331d88c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JavaClass.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "          public Option<Object> constantValue()", "signatureAfterChange": "          public Option<Object> constantValue()", "diff": ["-      // so we approximate by treating all static final fields as constants.", "-      // (Note that some code my execute here during the type checking phase, before \"run time\".", "+      // so we approximate by treating all static final fields with a primitive/String type as constants.", "+      // (Note that some code may execute here during the type checking phase, before \"run time\".", "-      if (isStatic() && isFinal()) {", "+      if (isStatic() && isFinal() && (_f.getType().isPrimitive() || _f.getType().equals(String.class))) {"]}], "num": 11082}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8a4a753bfec04e44f447e4879229018", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44593685cd8554e94fe5828c576e15fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 114, "signatureBeforeChange": "          public Option<ConstraintScenario> and(ConstraintScenario that)", "signatureAfterChange": "          public Option<ConstraintScenario> and(ConstraintScenario that)", "diff": ["+      NormSubtyper sub = new NormSubtyper();", "+      NormJoiner join = new NormJoiner(sub);", "+      NormMeeter meet = new NormMeeter(sub);", "-        result._lowerBounds.put(var, JOIN_NORM.value(IterUtil.make(lowerBound(var), that.lowerBound(var))));", "+        result._lowerBounds.put(var, join.value(IterUtil.make(lowerBound(var), that.lowerBound(var))));", "-        result._upperBounds.put(var, MEET_NORM.value(IterUtil.make(upperBound(var), that.upperBound(var))));", "+        result._upperBounds.put(var, meet.value(IterUtil.make(upperBound(var), that.upperBound(var))));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e2b00eabe77fe211d10e39e12c32e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "8a04e8e94a35e432777ebd444cf5fc70868fe9e4", "commitAfterChange": "56669aca13abcf0654eb7fc0918a869a3dc6fdaa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree()", "signatureAfterChange": "   public void buildTree()", "diff": ["-      //rule26 = new ActionStartPrevStmtPlus(\"\"),", "+      rule26 = new ActionStartPrevStmtPlus(\"\"),", "-      //rule24 = rule26,", "-      //rule23 = new QuestionExistsCharInStmt('?', ':', rule24, rule25),", "-      //rule22 = new QuestionLineContains(':', rule23, rule24),", "+      rule24 = rule26,", "+      rule23 = new QuestionExistsCharInStmt('?', ':', rule24, rule25),", "+      rule22 = new QuestionLineContains(':', rule23, rule24),", "-      rule20 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule21, /**rule22*/ rule25),", "+      rule20 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule21, rule22),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "563408961589774c15a137fb1642eda1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean isEqual(Type t1, Type t2)", "signatureAfterChange": "   public boolean isEqual(Type t1, Type t2)", "diff": ["+    //debug.logStart(new String[]{\"t1\",\"t2\"}, wrap(t1), wrap(t2)); try {", "+      ", "-      Type t1Norm = NORMALIZE.value(t1);", "-      Type t2Norm = NORMALIZE.value(t2);", "+      Normalizer norm = new Normalizer(sub);", "+      Type t1Norm = norm.value(t1);", "+      Type t2Norm = norm.value(t2);", "+    ", "+    //} finally { debug.logEnd(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bbe95648ccbedef4073d5327d17edd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "21eee51b311a5265aaeccc0b894dd0e2ea618d8f", "commitAfterChange": "f3858a964f9ea938578caa831cc995c6a3349a8a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void startup() throws DebugException", "signatureAfterChange": "      public void startup() throws DebugException", "diff": ["+      EventHandler eventHandler = new EventHandler(this, _vm);", "+      eventHandler.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81598df6ccf4f8e0cfea70b0bd0b9335", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/PreventExitSecurityManager.java", "commitBeforeChange": "34ce8483136d91f9eff46f1971dc8a612f363868", "commitAfterChange": "cfd4689ec89c3908ea0306a11510c85ea5436de0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   private PreventExitSecurityManager(final SecurityManager parent)", "signatureAfterChange": "   private PreventExitSecurityManager(final SecurityManager parent)", "diff": ["-  private PreventExitSecurityManager(final SecurityManager parent) { _parent = parent; }", "+  private PreventExitSecurityManager(final SecurityManager parent) { _parent = parent;", "+    edu.rice.cs.util.Log log = new edu.rice.cs.util.Log(\"secman.txt\",true);", "+    log.log(\"Creating new PreventExitSecurityManager\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aecc7c0a5c4d0bf975ae34d6498f7b0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 134, "signatureBeforeChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "signatureAfterChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "diff": ["-    for (Pair<Type, Type> pair : IterUtil.zip(IterUtil.map(args, NORMALIZE), IterUtil.map(params, NORMALIZE))) {", "+    NormSubtyper sub = new NormSubtyper();", "+    Normalizer norm = new Normalizer(sub);", "+    for (Pair<Type, Type> pair : IterUtil.zip(IterUtil.map(args, norm), IterUtil.map(params, norm))) {", "-      constraints = constraints.and(inf.supertypeNorm(NORMALIZE.value(expected.unwrap()), NORMALIZE.value(returned)));", "+      constraints = constraints.and(inf.supertypeNorm(norm.value(expected.unwrap()), norm.value(returned)));", "-        cf = cf.and(inf.subtypeNorm(s.lowerBound(param), NORMALIZE.value(param.symbol().upperBound())));", "+        cf = cf.and(inf.subtypeNorm(s.lowerBound(param), norm.value(param.symbol().upperBound())));", "-        cf = cf.and(inf.supertypeNorm(s.upperBound(param), NORMALIZE.value(param.symbol().lowerBound())));", "+        cf = cf.and(inf.supertypeNorm(s.upperBound(param), norm.value(param.symbol().lowerBound())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca0ff439cc25dd3bf8a73d5d3ddb22f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "7f334b2431ad2a57c508d4ce8fe5d18ce3fccebf", "commitAfterChange": "43a2124ad4386a02628eedfc537948ebb05ea232", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testVisitForStatement() throws InterpreterException", "signatureAfterChange": "   public void testVisitForStatement() throws InterpreterException", "diff": ["+    NameVisitor nv = new NameVisitor(_globalNameContext);", "+    stmt.acceptVisitor(nv);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca50948e35eef3a4946a1e922f0cad12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileTest.java", "commitBeforeChange": "0c506ac270d6b542eb2c43fb49629be8c2634151", "commitAfterChange": "b79f1fd71b5b5ee0af9a3873de718f0b6e4d7b2c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testJarTag() throws Exception", "signatureAfterChange": "      public void testJarTag() throws Exception", "diff": ["+    File entry_0 = new File(JAR_MAIN_CLASS);", "+    ", "-    assertTrue(tag.entries()[0].getPath().equals(JAR_MAIN_CLASS));", "+    assertTrue(tag.entries()[0].getPath().equals(entry_0.getPath()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee21105368e7d6512ce4ee347fcbcfa7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public boolean isSubtype(Type subT, Type superT)", "signatureAfterChange": "   public boolean isSubtype(Type subT, Type superT)", "diff": ["-    return new NormSubtyper().contains(NORMALIZE.value(subT), NORMALIZE.value(superT));", "+    NormSubtyper sub = new NormSubtyper();", "+    Normalizer norm = new Normalizer(sub);", "+    return sub.contains(norm.value(subT), norm.value(superT));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5702564fcdd66641334df81b0e23016", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsScriptPane.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void addButton(Action a)", "signatureAfterChange": "   public void addButton(Action a)", "diff": ["-    addButton(a, null);", "-  }"]}], "num": 15672}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9418f5039749b39a41dfde68354ea794", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "059ce5af1cea0c52aa24ec738a0c0359", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "d80369d9c3076ba83762fd67d26b865a3f105bab", "commitAfterChange": "bdd7aa6c0bcfa675b71488b11d63dfa5dd20cdb9", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "diff": ["+    addOptionComponent(panel, ", "+                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_DCP,", "+                                                  \"Warn to Restart to Change Default Compiler Preference\", ", "+                                                  this,", "+                                                  \"<html>Whether DrJava should warn the user that default compiler preference<br>\" +", "+                                                  \"changes will not be applied until DrJava is restarted.</html>.\", ", "+                                                  false)", "+                         .setEntireColumn(true));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7f4c95b655b56d220774353ec8d2a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "1cda89f41e5a82d37339ff20e08702987c32bbfc", "commitAfterChange": "3b86afe47e23692474e8facf6c83b275a516f91e", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private void _setupDebugPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupDebugPanel(ConfigPanel panel)", "diff": ["-", "+    ", "+    addOptionComponent(panel, new StringOptionComponent(OptionConstants.AUTO_STEP_RATE,", "+                                                        \"Auto-Step Rate in ms\",", "+                                                        this,", "+                                                        \"<html>A defined rate in ms at which the debugger automatically steps into/over each line of code.<br>\" +", "+                                                        \"Value entered must be an integer value. </html>\"));                                                            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fcc3f293b5c90c41ae0663e797ab84c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "f1aa1d00101816bdf31c9a5cdde161c5860d56df", "commitAfterChange": "781ae601c96267416da4789576e667aeb000e032", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   private void _setupJVMsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupJVMsPanel(ConfigPanel panel)", "diff": ["-                                                 \"The command-line arguments to pass to the Interactions JVM.\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.BROWSER_HISTORY_MAX_SIZE,", "-                                                         \"Maximum Size of Browser History\", ", "-                                                         this,", "-                                                         \"Determines how many entries are kept in the browser history.\"));", "-    ", "+                                                 \"The command-line arguments to pass to the Interactions JVM.\"));    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae19448fa0a5a30d4b150adb912b5264", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 91, "signatureBeforeChange": "   public void addMethod(MethodData method, boolean isAugmentedCode)", "signatureAfterChange": "   public void addMethod(MethodData method, boolean isAugmentedCode)", "diff": ["-      LanguageLevelVisitor.errors.addLast(new Pair<String, JExpressionIF>(\"This method's signature conflicts with an automatically generated method's signature\", ", "-                                                                        md.getJExpression()));", "+      LanguageLevelVisitor.errors.", "+        addLast(new Pair<String, JExpressionIF>(\"This method's signature conflicts with an automatically generated \"", "+                                                  + \"method's signature\", ", "+                                                md.getJExpression()));"]}], "num": 20629}
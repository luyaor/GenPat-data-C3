{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43ebd3a171625386d95e4ee6194fe1ab", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4501399ae309c280c7279a84fd4b2868", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected static HashSet _makePrimTypes()", "signatureAfterChange": "   protected static HashSet<String> _makePrimTypes()", "diff": ["-  protected static HashSet _makePrimTypes() {", "+  protected static HashSet<String> _makePrimTypes() {", "-      \"boolean\", \"char\", \"byte\", \"short\", \"int\", ", "-      \"long\", \"float\", \"double\", \"void\", ", "+      \"boolean\", \"char\", \"byte\", \"short\", \"int\",", "+      \"long\", \"float\", \"double\", \"void\",", "-    HashSet prims = new HashSet();", "+    HashSet<String> prims = new HashSet<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fce24b82977d55ea82bd642daa5a03ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected static HashSet<String> _makePrimTypes()", "signatureAfterChange": "   protected static HashSet<String> _makePrimTypes()", "diff": ["-      \"boolean\", \"char\", \"byte\", \"short\", \"int\",", "-      \"long\", \"float\", \"double\", \"void\",", "+      \"boolean\", \"char\", \"byte\", \"short\", \"int\", \"long\", \"float\", \"double\", \"void\",", "-    for (int i = 0; i < words.length; i++) {", "-      prims.add(words[i]);", "-    }", "-    return  prims;", "+    for (String w: words) { prims.add(w); }", "+    return prims;"]}], "num": 27858}
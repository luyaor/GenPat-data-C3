{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34ab0315390d83a2e2fa7c925de589e2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "455127a0afcb07e1585281f7b385da06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "signatureAfterChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "diff": ["-   */", "-  public void testUnsavedAndUnCompiledChanges() throws Exception {", "-    if (printMessages) System.out.println(\"----testUnsavedAndUnCompiledChanges-----\");", "-", "-    OpenDefinitionsDocument doc = setupDocument(MONKEYTEST_PASS_TEXT);", "-    final File file = new File(_tempDir, \"MonkeyTestPass.java\");", "-    doc.saveFile(new FileSelector(file));", "-    JUnitTestListener listener = new JUnitTestListener(true);", "-    _model.addListener(listener);", "-    if (printMessages) System.out.println(\"before compile\");", "-    doc.startCompile();", "-    if (printMessages) System.out.println(\"after compile\");", "-    changeDocumentText(MONKEYTEST_FAIL_TEXT, doc);", "-    ", "-    synchronized(listener) {", "-      doc.startJUnit();", "-      if (printMessages) System.out.println(\"waiting for test\");", "-      listener.wait();", "-    }", "-    if (printMessages) System.out.println(\"after test\");", "-    _model.removeListener(listener);", "-", "-    assertEquals(\"test case should have no errors reported after modifying\",", "-                 0,", "-                 _model.getJUnitModel().getJUnitErrorModel().getNumErrors());", "-    ", "-    doc.saveFile(new FileSelector(file));", "-", "-    listener = new JUnitTestListener();", "-    _model.addListener(listener);", "-    synchronized(listener) {", "-      doc.startJUnit();", "-      listener.wait();", "-    }", "-", "-    assertEquals(\"test case should have no errors reported after saving\",", "-                 0,", "-                 _model.getJUnitModel().getJUnitErrorModel().getNumErrors());", "-    _model.removeListener(listener);", "-  }", "+   */", "+  public void testUnsavedAndUnCompiledChanges() throws Exception {", "+    if (printMessages) System.out.println(\"----testUnsavedAndUnCompiledChanges-----\");", "+", "+    OpenDefinitionsDocument doc = setupDocument(MONKEYTEST_PASS_TEXT);", "+    final File file = new File(_tempDir, \"MonkeyTestPass.java\");", "+    doc.saveFile(new FileSelector(file));", "+    JUnitTestListener listener = new JUnitTestListener(true);", "+    _model.addListener(listener);", "+    if (printMessages) System.out.println(\"before compile\");", "+    doc.startCompile();", "+    if (printMessages) System.out.println(\"after compile\");", "+    changeDocumentText(MONKEYTEST_FAIL_TEXT, doc);", "+    ", "+    _runJUnit(doc);", "+    ", "+    if (printMessages) System.out.println(\"after test\");", "+    _model.removeListener(listener);", "+", "+    assertEquals(\"test case should have no errors reported after modifying\",", "+                 0,", "+                 _model.getJUnitModel().getJUnitErrorModel().getNumErrors());", "+    ", "+    doc.saveFile(new FileSelector(file));", "+", "+    listener = new JUnitTestListener();", "+    _model.addListener(listener);", "+", "+", "+    assertEquals(\"test case should have no errors reported after saving\",", "+                 0,", "+                 _model.getJUnitModel().getJUnitErrorModel().getNumErrors());", "+    _model.removeListener(listener);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4aeb01202d461a42fb5cc51f197ea02", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "6ca20aa23bdf7506876b7d41215a01a9cd168d71", "commitAfterChange": "911c1a53bf4aef4a4a832b596c832b02de549487", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testCloseFiles() throws BadLocationException", "signatureAfterChange": "   public void testCloseFiles() throws BadLocationException", "diff": ["-", "+    ", "-    _model.closeAllFiles();", "-    Utilities.clearEventQueue();", "-    assertNumOpenDocs(1);", "-    assertLength(0, _model.getActiveDocument());    ", "-    listener.assertInterpreterReadyCount(1);", "-    listener.assertNewCount(4);", "-    listener.assertCloseCount(4);", "-    listener.assertAbandonCount(4);", "+// THIS TEST COMMENTED OUT TEMPORARILY BECAUSE IT IS BROKEN (dlsmith, 2006-08-21)", "+//    _model.closeAllFiles();", "+//    Utilities.clearEventQueue();", "+//    assertNumOpenDocs(1);", "+//    assertLength(0, _model.getActiveDocument());    ", "+//    listener.assertInterpreterReadyCount(1);", "+//    listener.assertNewCount(4);", "+//    listener.assertCloseCount(4);", "+//    listener.assertAbandonCount(4);"]}], "num": 24089}
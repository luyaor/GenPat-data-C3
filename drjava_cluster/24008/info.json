{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4975816a51f96ed69d680fd2cb1acff4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c931fd66237d49a9a4482b9a3bee9924", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tprivate int _deleteRight(int offset,int endOffset, \t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delFrom, \t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "signatureAfterChange": "   private int _deleteRight(int offset,int endOffset,                            ModelList<ReducedToken>.Iterator delFrom,                            ModelList<ReducedToken>.Iterator delTo)", "diff": ["+  */", "+  private int _deleteRight(int offset,int endOffset,", "+                           ModelList<ReducedToken>.Iterator delFrom,", "+                           ModelList<ReducedToken>.Iterator delTo)", "+  {", "+    delFrom.collapse(delTo);", "+    ", "+    // if both pointing to same item, and it's a gap", "+    if (delFrom.eq(delTo) && delFrom.current().isGap()) {", "+      // inside gap", "+      delFrom.current().shrink(endOffset-offset);", "+      return offset;", "+    }", "+    ", "+    ", "+    //if brace is multiple char it must be a comment because the above if", "+    //test gaurentees it can't be a gap.", "+    if (!delFrom.eq(delTo)) {", "+      _clipLeft(offset, delFrom);", "+    }", "+    _clipRight(endOffset, delTo);      ", "+    ", "+    if (!delFrom.atStart()) {", "+      delFrom.prev();", "+    }", "+    //int delToSizePrevious = delTo.current().getSize();", "+    //String delToTypePrevious = delTo.current().getType();", "+    int delToSizeCurr;", "+    String delToTypeCurr;", "+    if (delTo.atEnd()) {", "+      _updateBasedOnCurrentState();", "+      delFrom.setTo(delTo);", "+      return 0;", "+    }", "+    else {", "+      delToSizeCurr = delTo.current().getSize();", "+      delToTypeCurr = delTo.current().getType();", "+    }", "+    ", "+    //get info on previous item.", "+    delTo.prev(); //get stats on previous item", "+    ", "+    int delToSizePrev;", "+    String delToTypePrev;", "+    if (delTo.atStart()) { //no previous item, can't be at end", "+      delTo.next();", "+      _updateBasedOnCurrentStateHelper(delFrom);", "+      delFrom.setTo(delTo);", "+      return 0;", "+    }", "+    else {", "+      delToSizePrev = delTo.current().getSize();", "+      delToTypePrev = delTo.current().getType();", "+    }", "+    delTo.next(); //put delTo back on original node", "+    ", "+    ", "+    _updateBasedOnCurrentState();", "+    ", "+    int temp = _calculateOffset(delToSizePrev,delToTypePrev,", "+                                delToSizeCurr, delToTypeCurr,", "+                                delTo);", "+    delFrom.setTo(delTo);", "+    return temp;", "+  }", "-\t */", "-\tprivate int _deleteRight(int offset,int endOffset,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delFrom,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "-\t\t{", "-\t\t\tdelFrom.collapse(delTo);", "-\t\t\t\t\t\t", "-\t\t\t// if both pointing to same item, and it's a gap", "-\t\t\tif (delFrom.eq(delTo) && delFrom.current().isGap()){", "-\t\t\t\t// inside gap", "-\t\t\t\tdelFrom.current().shrink(endOffset-offset);", "-\t\t\t\treturn offset;", "-\t\t\t}", "-", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t//if brace is multiple char it must be a comment because the above if", "- \t\t\t//test gaurentees it can't be a gap.", "-\t\t\tif (!delFrom.eq(delTo))", "-\t\t\t\t_clipLeft(offset, delFrom);", "-", "-\t\t\t_clipRight(endOffset, delTo);\t\t\t", "-\t\t\t", "-\t\t\tif (!delFrom.atStart())", "-\t\t\t\tdelFrom.prev();", "-\t\t\t\t\t", "-\t\t\t//int delToSizePrevious = delTo.current().getSize();", "-\t\t\t//String delToTypePrevious = delTo.current().getType();", "-\t\t\tint delToSizeCurr;", "-\t\t\tString delToTypeCurr;", "-\t\t\tif (delTo.atEnd()){", "-\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\tdelFrom.setTo(delTo);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\telse{", "-\t\t\t\tdelToSizeCurr = delTo.current().getSize();", "-\t\t\t\tdelToTypeCurr = delTo.current().getType();", "-\t\t\t}", "-\t\t\t\t\t", "-\t\t\t//get info on previous item.", "-\t\t\tdelTo.prev();//get stats on previous item", "-\t\t\t", "-\t\t\tint delToSizePrev;", "-\t\t\tString delToTypePrev;", "-\t\t\tif (delTo.atStart()){//no previous item, can't be at end", "-\t\t\t\tdelTo.next();", "-\t\t\t\t_updateBasedOnCurrentStateHelper(delFrom);", "-\t\t\t\tdelFrom.setTo(delTo);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\telse{", "-\t\t\t\tdelToSizePrev = delTo.current().getSize();", "-\t\t\t\tdelToTypePrev = delTo.current().getType();", "-\t\t\t}", "-\t\t\tdelTo.next(); //put delTo back on original node", "-", "-", "-\t\t\t_updateBasedOnCurrentState();", "-", "-\t\t\tint temp =", "-\t\t\t\t_calculateOffset(delToSizePrev,delToTypePrev,", "-\t\t\t\t\t\t\t\t\t\t\t\t delToSizeCurr, delToTypeCurr,", "-\t\t\t\t\t\t\t\t\t\t\t\t delTo);", "-\t\t\tdelFrom.setTo(delTo);", "-\t\t\treturn temp;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7bf07b003fe31997e3df28c64acfef7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tprivate int _deleteRight(int offset,int endOffset, \t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delFrom, \t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "signatureAfterChange": "   private int _deleteRight(int offset,int endOffset,                            ModelList<ReducedToken>.Iterator delFrom,                            ModelList<ReducedToken>.Iterator delTo)", "diff": ["+  */", "+  private int _deleteRight(int offset,int endOffset,", "+                           ModelList<ReducedToken>.Iterator delFrom,", "+                           ModelList<ReducedToken>.Iterator delTo)", "+  {", "+    delFrom.collapse(delTo);", "+    ", "+    // if both pointing to same item, and it's a gap", "+    if (delFrom.eq(delTo) && delFrom.current().isGap()) {", "+      // inside gap", "+      delFrom.current().shrink(endOffset-offset);", "+      return offset;", "+    }", "+    ", "+    ", "+    //if brace is multiple char it must be a comment because the above if", "+    //test gaurentees it can't be a gap.", "+    if (!delFrom.eq(delTo)) {", "+      _clipLeft(offset, delFrom);", "+    }", "+    _clipRight(endOffset, delTo);      ", "+    ", "+    if (!delFrom.atStart()) {", "+      delFrom.prev();", "+    }", "+    //int delToSizePrevious = delTo.current().getSize();", "+    //String delToTypePrevious = delTo.current().getType();", "+    int delToSizeCurr;", "+    String delToTypeCurr;", "+    if (delTo.atEnd()) {", "+      _updateBasedOnCurrentState();", "+      delFrom.setTo(delTo);", "+      return 0;", "+    }", "+    else {", "+      delToSizeCurr = delTo.current().getSize();", "+      delToTypeCurr = delTo.current().getType();", "+    }", "+    ", "+    //get info on previous item.", "+    delTo.prev(); //get stats on previous item", "+    ", "+    int delToSizePrev;", "+    String delToTypePrev;", "+    if (delTo.atStart()) { //no previous item, can't be at end", "+      delTo.next();", "+      _updateBasedOnCurrentStateHelper(delFrom);", "+      delFrom.setTo(delTo);", "+      return 0;", "+    }", "+    else {", "+      delToSizePrev = delTo.current().getSize();", "+      delToTypePrev = delTo.current().getType();", "+    }", "+    delTo.next(); //put delTo back on original node", "+    ", "+    ", "+    _updateBasedOnCurrentState();", "+    ", "+    int temp = _calculateOffset(delToSizePrev,delToTypePrev,", "+                                delToSizeCurr, delToTypeCurr,", "+                                delTo);", "+    delFrom.setTo(delTo);", "+    return temp;", "+  }", "-\t */", "-\tprivate int _deleteRight(int offset,int endOffset,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delFrom,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "-\t\t{", "-\t\t\tdelFrom.collapse(delTo);", "-\t\t\t\t\t\t", "-\t\t\t// if both pointing to same item, and it's a gap", "-\t\t\tif (delFrom.eq(delTo) && delFrom.current().isGap()){", "-\t\t\t\t// inside gap", "-\t\t\t\tdelFrom.current().shrink(endOffset-offset);", "-\t\t\t\treturn offset;", "-\t\t\t}", "-", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t//if brace is multiple char it must be a comment because the above if", "- \t\t\t//test gaurentees it can't be a gap.", "-\t\t\tif (!delFrom.eq(delTo))", "-\t\t\t\t_clipLeft(offset, delFrom);", "-", "-\t\t\t_clipRight(endOffset, delTo);\t\t\t", "-\t\t\t", "-\t\t\tif (!delFrom.atStart())", "-\t\t\t\tdelFrom.prev();", "-\t\t\t\t\t", "-\t\t\t//int delToSizePrevious = delTo.current().getSize();", "-\t\t\t//String delToTypePrevious = delTo.current().getType();", "-\t\t\tint delToSizeCurr;", "-\t\t\tString delToTypeCurr;", "-\t\t\tif (delTo.atEnd()){", "-\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\tdelFrom.setTo(delTo);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\telse{", "-\t\t\t\tdelToSizeCurr = delTo.current().getSize();", "-\t\t\t\tdelToTypeCurr = delTo.current().getType();", "-\t\t\t}", "-\t\t\t\t\t", "-\t\t\t//get info on previous item.", "-\t\t\tdelTo.prev();//get stats on previous item", "-\t\t\t", "-\t\t\tint delToSizePrev;", "-\t\t\tString delToTypePrev;", "-\t\t\tif (delTo.atStart()){//no previous item, can't be at end", "-\t\t\t\tdelTo.next();", "-\t\t\t\t_updateBasedOnCurrentStateHelper(delFrom);", "-\t\t\t\tdelFrom.setTo(delTo);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\telse{", "-\t\t\t\tdelToSizePrev = delTo.current().getSize();", "-\t\t\t\tdelToTypePrev = delTo.current().getType();", "-\t\t\t}", "-\t\t\tdelTo.next(); //put delTo back on original node", "-", "-", "-\t\t\t_updateBasedOnCurrentState();", "-", "-\t\t\tint temp =", "-\t\t\t\t_calculateOffset(delToSizePrev,delToTypePrev,", "-\t\t\t\t\t\t\t\t\t\t\t\t delToSizeCurr, delToTypeCurr,", "-\t\t\t\t\t\t\t\t\t\t\t\t delTo);", "-\t\t\tdelFrom.setTo(delTo);", "-\t\t\treturn temp;", "-\t\t}"]}], "num": 24008}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4cdf56357bd70f1c6271e25c0a4efad9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0788f83cae668d418577b064a0e20748", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public synchronized void addExternalFilesClassPath(File f)", "signatureAfterChange": "   public void addExternalFilesClassPath(File f)", "diff": ["-   */", "-  public synchronized void addExternalFilesClassPath(File f) {", "-    if (_classPath.contains(f)) return;  // Don't add it again", "-    ", "-    // Add to the default interpreter, if it is a JavaInterpreter", "-    if (_defaultInterpreter.getInterpreter() instanceof JavaInterpreter) {", "-      ((JavaInterpreter)_defaultInterpreter.getInterpreter()).addExternalFilesClassPath(f);", "-    }", "-    ", "-    // Add to any named JavaInterpreters to be consistent", "-    Enumeration<InterpreterData> interpreters = _interpreters.elements();", "-    while (interpreters.hasMoreElements()) {", "-      Interpreter interpreter = interpreters.nextElement().getInterpreter();", "-      if (interpreter instanceof JavaInterpreter) {", "-        ((JavaInterpreter)interpreter).addExternalFilesClassPath(f);", "-      }", "-    }", "-    ", "-    // Keep this entry on the accumulated classpath", "-    _classPath.add(f);", "-  }", "+  public void addProjectFilesClassPath(File f) { _classPathManager.addProjectFilesCP(f); }", "+  public void addExternalFilesClassPath(File f) { _classPathManager.addExternalFilesCP(f); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10efe1e6f8baff3b68356f5e91f32df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public synchronized void addProjectFilesClassPath(File f)", "signatureAfterChange": "   public void addProjectFilesClassPath(File f)", "diff": ["-   */", "-  public synchronized void addProjectFilesClassPath(File f) {", "-    if (_classPath.contains(f)) return;  // Don't add it again", "-    ", "-    // Add to the default interpreter, if it is a JavaInterpreter", "-    if (_defaultInterpreter.getInterpreter() instanceof JavaInterpreter) {", "-      ((JavaInterpreter)_defaultInterpreter.getInterpreter()).addProjectFilesClassPath(f);", "-    }", "-    ", "-    // Add to any named JavaInterpreters to be consistent", "-    Enumeration<InterpreterData> interpreters = _interpreters.elements();", "-    while (interpreters.hasMoreElements()) {", "-      Interpreter interpreter = interpreters.nextElement().getInterpreter();", "-      if (interpreter instanceof JavaInterpreter) {", "-        ((JavaInterpreter)interpreter).addProjectFilesClassPath(f);", "-      }", "-    }", "-    ", "-    // Keep this entry on the accumulated classpath", "-    _classPath.add(f);", "-  }", "+  public void addBuildDirectoryClassPath(File f) { _classPathManager.addBuildDirectoryCP(f); }", "+  public void addProjectFilesClassPath(File f) { _classPathManager.addProjectFilesCP(f); }"]}], "num": 17736}
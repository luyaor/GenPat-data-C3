{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a827e49e6ceda67a0e6608b92b00688", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e163e871e99907611ae6c668b0c47f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "ead43466202abb204c90f7ee2c316fec230d4415", "commitAfterChange": "0fad47bdd1e942c86310a487dc6b4049e75b2486", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "          private void evaluateConstantExpression(UnaryExpression node)", "signatureAfterChange": "          private void evaluateConstantExpression(UnaryExpression node)", "diff": ["-        setValue(node, new ExpressionEvaluator(RuntimeBindings.EMPTY, opt).value(node));", "+        try {", "+          Object val = new ExpressionEvaluator(RuntimeBindings.EMPTY, opt).value(node);", "+          setValue(node, val);", "+        }", "+        catch (WrappedException e) { /* failed to evaluate -- just ignore */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3394c942f4928fac72f405ad12fe961", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "ead43466202abb204c90f7ee2c316fec230d4415", "commitAfterChange": "0fad47bdd1e942c86310a487dc6b4049e75b2486", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "          private void evaluateConstantExpression(BinaryExpression node)", "signatureAfterChange": "          private void evaluateConstantExpression(BinaryExpression node)", "diff": ["-        setValue(node, new ExpressionEvaluator(RuntimeBindings.EMPTY, opt).value(node));", "+        try {", "+          Object val = new ExpressionEvaluator(RuntimeBindings.EMPTY, opt).value(node);", "+          setValue(node, val);", "+        }", "+        catch (WrappedException e) { /* failed to evaluate -- just ignore */ }"]}], "num": 15268}
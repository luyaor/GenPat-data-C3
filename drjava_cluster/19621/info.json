{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07cf84685489ebbd8aed528fbfc56ab8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8744726432364dace9ac90c00522bc26", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetupTest.java", "commitBeforeChange": "df4d53f84d17cf3ec7ad461e0706b30f84e9362b", "commitAfterChange": "c5aac5c6295f0f62821cacd426fa94832d9a11b1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testFile() throws CloneNotSupportedException, IOException", "signatureAfterChange": "      public void testFile() throws CloneNotSupportedException, IOException", "diff": ["-    assertTrue(s.startsWith(System.getProperty(\"java.io.tmpdir\")+File.separator+\"DrJava-Execute-\"));", "+    assertTrue(s.startsWith(TMPDIR+\"DrJava-Execute-\"));", "-    assertTrue(s2.startsWith(System.getProperty(\"java.io.tmpdir\")+File.separator+\"DrJava-Execute-\"));", "+    assertTrue(s2.startsWith(TMPDIR+\"DrJava-Execute-\"));", "-    assertEquals(System.getProperty(\"java.io.tmpdir\")+File.separator+\"foo\", s);", "+    assertEquals(TMPDIR+\"foo\", s);", "-    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "-    assertEquals(dir.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir .getAbsolutePath()));", "+    assertEquals(dir.getParentFile().getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(fil.getParentFile().getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(fil.getParentFile().getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(),", "+                 StringOps.unescapeFileName(p.getCurrent(pm)));", "-                 new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(), p.getCurrent(pm));", "+                 new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath(),", "+                 StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(dir.getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(dir.getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(fil.getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(fil.getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    assertEquals(notFound.getAbsolutePath(), p.getCurrent(pm));", "+    assertEquals(notFound.getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-                 notFound.getAbsolutePath(), p.getCurrent(pm));", "+                 notFound.getAbsolutePath(), StringOps.unescapeFileName(p.getCurrent(pm)));", "-    ", "+    dir = FileOps.createTempDirectory(\"DrJavaPropertySetupTest\");", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rel Error\"));", "+    p.resetAttributes();", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    assertTrue(p.getCurrent(pm).startsWith(\"(file.rel Error\"));", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    assertEquals(\".\", StringOps.unescapeFileName(p.getCurrent(pm)));", "+    p.setAttribute(\"file\",StringOps.escapeFileName(dir.getAbsolutePath()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir.getParentFile().getAbsolutePath()));", "+    assertEquals(dir.getName(), StringOps.unescapeFileName(p.getCurrent(pm)));", "+    dir = edu.rice.cs.plt.io.IOUtil.createAndMarkTempDirectory(\"DrJavaPropertySetupTest\",\"\");", "+    File dir1 = edu.rice.cs.plt.io.IOUtil.createAndMarkTempDirectory(\"DrJavaPropertySetupTest\",\"\",dir);", "+    File dir2 = edu.rice.cs.plt.io.IOUtil.createAndMarkTempDirectory(\"DrJavaPropertySetupTest\",\"\",dir);", "+    fil = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(\"DrJavaPropertySetupTest\",\".txt\",dir1);", "+    p.setAttribute(\"file\",StringOps.escapeFileName(fil.getAbsolutePath()));", "+    p.setAttribute(\"base\",StringOps.escapeFileName(dir2.getAbsolutePath()));", "+    assertEquals(\"..\"+FS+dir1.getName()+FS+fil.getName(), StringOps.unescapeFileName(p.getCurrent(pm)));    ", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc3bb3df5b7385917cd5bb770e1807d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "451a8ef10dd808c32bb1dec2a41dbfe38542794f", "commitAfterChange": "fd372db787cedeccdc43d382b7e2999ff5184943", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "signatureAfterChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "diff": ["-    _doc.append(\"typed text\", InteractionsDocument.DEFAULT_STYLE);", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        ", "+        // Type 'T'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_T, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'T'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_T, UNDEFINED));", "+        ", "+        // Type 'Y'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_Y, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'Y'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_Y, UNDEFINED));", "+        ", "+         // Type 'P'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_P, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'P'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_P, UNDEFINED));", "+        ", "+         // Type 'E'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_E, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'E'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_E, UNDEFINED));", "+        ", "+         // Type 'D'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'D'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+      }", "+    });", "+//    System.err.println(\"Document = '\" + _doc.getText() + \"'\");", "+//    System.err.println(\"docLength = \" +  _doc.getLength() + \" caretPos = \" + _pane.getCaretPosition());", "+    ", "+//    System.err.println(\"Document = '\" + _doc.getText() + \"'\");", "-    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(newPos + 1); } });", "+    _pane.setCaretPosition(newPos + 1);", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        // Type 'D'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'D'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+      } ", "+    });", "-    _doc.insertText(newPos, \"d\", InteractionsDocument.DEFAULT_STYLE);", "-    Utilities.clearEventQueue();", "-    assertEquals(\"caret should be one char after the d\", newPos + 2, _pane.getCaretPosition());", "+    assertEquals(\"caret should be one char after the inserted D\", newPos + 2, _pane.getCaretPosition());"]}], "num": 19621}
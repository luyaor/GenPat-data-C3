{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b19cf26f5f017e78d6c63581d1a9e893", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f763c342dff5ccf2ea55880aa6d8291", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "   private void _createDebugger()", "signatureAfterChange": "       private void _setupDebugger()", "diff": ["-   */", "-  private void _createDebugger() {", "-    try {", "-      _debugger = new edu.rice.cs.drjava.model.debug.jpda.JPDADebugger(this); // TODO: load dynamically", "-      _jvm.setDebugModel(_debugger.callback());", "+  private void _setupDebugger() {", "+    _jvm.setDebugModel(_debugger.callback());", "-      // add listener to set the project file to \"changed\" when a breakpoint or watch is added, removed, or changed", "-      getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "-        public void regionAdded(final Breakpoint bp, int index) { setProjectChanged(true); }", "-        public void regionChanged(final Breakpoint bp, int index) { setProjectChanged(true); }", "-        public void regionRemoved(final Breakpoint bp) { ", "-          try {", "-            getDebugger().removeBreakpoint(bp);", "-          } catch(DebugException de) { /* just ignore it */ }", "-          setProjectChanged(true);", "-          }", "-      });", "-      getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {", "-        public void regionAdded(DocumentRegion r, int index) { setProjectChanged(true); }", "-        public void regionChanged(DocumentRegion r, int index) { setProjectChanged(true); }", "-        public void regionRemoved(DocumentRegion r) { setProjectChanged(true); }", "-      });", "+    // add listener to set the project file to \"changed\" when a breakpoint or watch is added, removed, or changed", "+    getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+      public void regionAdded(final Breakpoint bp, int index) { setProjectChanged(true); }", "+      public void regionChanged(final Breakpoint bp, int index) { setProjectChanged(true); }", "+      public void regionRemoved(final Breakpoint bp) { ", "+        try {", "+          getDebugger().removeBreakpoint(bp);", "+        } catch(DebugException de) { /* just ignore it */ }", "+        setProjectChanged(true);", "+      }", "+    });", "+    getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {", "+      public void regionAdded(DocumentRegion r, int index) { setProjectChanged(true); }", "+      public void regionChanged(DocumentRegion r, int index) { setProjectChanged(true); }", "+      public void regionRemoved(DocumentRegion r) { setProjectChanged(true); }", "+    });", "+    ", "+    _debugger.addListener(new DebugListener() {", "+      public void watchSet(final DebugWatchData w) { setProjectChanged(true); }", "+      public void watchRemoved(final DebugWatchData w) { setProjectChanged(true); }    ", "-      _debugger.addListener(new DebugListener() {", "-        public void watchSet(final DebugWatchData w) { setProjectChanged(true); }", "-        public void watchRemoved(final DebugWatchData w) { setProjectChanged(true); }    ", "-        ", "-        public void regionAdded(final Breakpoint bp, int index) { }", "-        public void regionChanged(final Breakpoint bp, int index) { }", "-        public void regionRemoved(final Breakpoint bp) { }", "-        public void debuggerStarted() { }", "-        public void debuggerShutdown() { }", "-        public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) { }", "-        public void breakpointReached(final Breakpoint bp) { }", "-        public void stepRequested() { }", "-        public void currThreadSuspended() { }", "-        public void currThreadResumed() { }", "-        public void threadStarted() { }", "-        public void currThreadDied() { }", "-        public void nonCurrThreadDied() {  }", "-        public void currThreadSet(DebugThreadData thread) { }", "-      });", "-    }", "-    catch( NoClassDefFoundError ncdfe ) {", "-      // JPDA not available, so we won't use it.", "-      _debugger = NoDebuggerAvailable.ONLY;", "-    }", "-    catch( UnsupportedClassVersionError ucve ) {", "-      // Wrong version of JPDA, so we won't use it.", "-      _debugger = NoDebuggerAvailable.ONLY;", "-    }", "-    catch( Throwable t ) {", "-      // Something went wrong in initialization, don't use debugger", "-      _debugger = NoDebuggerAvailable.ONLY;", "-    }", "+      public void regionAdded(final Breakpoint bp, int index) { }", "+      public void regionChanged(final Breakpoint bp, int index) { }", "+      public void regionRemoved(final Breakpoint bp) { }", "+      public void debuggerStarted() { }", "+      public void debuggerShutdown() { }", "+      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) { }", "+      public void breakpointReached(final Breakpoint bp) { }", "+      public void stepRequested() { }", "+      public void currThreadSuspended() { }", "+      public void currThreadResumed() { }", "+      public void threadStarted() { }", "+      public void currThreadDied() { }", "+      public void nonCurrThreadDied() {  }", "+      public void currThreadSet(DebugThreadData thread) { }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee9fb94159a3c29ea0be9362bb422ceb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JDKToolsLibrary.java", "commitBeforeChange": "f9f0ab44b47660447cfff11e665a39c76a7f44d4", "commitAfterChange": "45133bcfe62104f64c54f0a9dd6f0b7d50269b38", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "    public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "signatureAfterChange": "      public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "diff": ["-  } ", "-    CompilerInterface compiler = NoCompilerAvailable.ONLY;", "-    String compilerAdapter = null;", "-    ", "-    // force DrJava to try to load the javac main class;", "-    // if tools.jar isn't on the class path, this will fail", "-    // having tools.jar on the class path is not sufficient", "-    try {", "-      ReflectUtil.class.getClassLoader().loadClass(compilerMainClass(JavaVersion.CURRENT));", "-      compilerAdapter = adapterForCompiler(version.majorVersion());", "-    }", "-    catch(ClassNotFoundException e) { /* keep compilerAdapter == null */ }", "-    catch(UnsupportedClassVersionError e) { /* keep compilerAdapter == null */ }", "-    catch(RuntimeException e) { /* keep compilerAdapter == null */ }  ", "+    CompilerInterface compiler = NoCompilerAvailable.ONLY;", "+    String compilerAdapter = adapterForCompiler(version.majorVersion());"]}], "num": 19344}
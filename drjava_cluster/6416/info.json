{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39b92801959fd5ed3f49cc7d66c12ca1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b933ef9c89adf4006afa1d22f932926", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "ef7dc3345b6835fe8ebb574f1a9119ee4c786794", "commitAfterChange": "21836dcccd81c2207652ee85b319b723ac9ff10b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void testParse()", "signatureAfterChange": "    public void testParse()", "diff": ["-    assertTrue(_ivo.parse(\"[]\").isEmpty());", "-    assertTrue(_bvo.parse(\"[]\").isEmpty());", "+    assertTrue(_svo.parse(\"\").isEmpty());", "+    assertTrue(_bvo.parse(\"\").isEmpty());", "+    ", "+    Vector<String> v = _svo.parse(\"[]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"\", v.get(0));", "+    ", "+    v = _svo.parse(\"[x]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"x\", v.get(0));", "-    try { _ivo.parse(\"[,]\"); fail(\"Comma at beginning.\"); } ", "+    v = _svo.parse(\"[\\\\\\\\]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"\\\\\", v.get(0));", "+    ", "+    v = _svo.parse(\"[\\\\,]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\",\", v.get(0));", "+    ", "+    v = _svo.parse(\"[\\\\,]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\",\", v.get(0));", "+", "+    v = _svo.parse(\"[,]\");", "+    assertEquals(2, v.size());", "+    assertEquals(\"\", v.get(0));", "+    assertEquals(\"\", v.get(1));", "+    ", "+    try { _svo.parse(\"[\\\\x]\"); fail(\"Backslash not in front of another backslash or delimiter.\"); } ", "-    try { _ivo.parse(\"[11\"); fail(\"Missing footer.\"); } ", "-    catch (OptionParseException e) { }", "-    try { _ivo.parse(\"[11,]\"); fail(\"Comma w/o following list element.\"); } ", "+    try { _svo.parse(\"[11\"); fail(\"Missing footer.\"); } ", "-    try { _ivo.parse(\"11]\"); fail(\"Missing header.\"); } ", "+    v = _svo.parse(\"[11,]\");", "+    assertEquals(2, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"\", v.get(1));", "+    ", "+    try { _svo.parse(\"11]\"); fail(\"Missing header.\"); } ", "-    try { _ivo.parse(\"[11,,22]\"); fail(\"Missing list element.\"); } ", "-    catch (OptionParseException e) { }", "+    v = _svo.parse(\"[11,,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "-    try { _ivo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\"); } ", "-    catch (OptionParseException e) { }", "+    v = _svo.parse(\"[11,\\\\,,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\",\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "-    try { _ivo.parse(\"[11;22]\"); fail(\"Illegal delimiter.\"); } ", "+    v = _svo.parse(\"[11,abc\\\\,def,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"abc,def\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "+", "+    v = _svo.parse(\"[11,\\\\\\\\,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"\\\\\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "+", "+    try { _svo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\"); } ", "+    ", "+    try { _bvo.parse(\"[true;false]\"); fail(\"Illegal delimiter.\"); } ", "+    catch (OptionParseException e) { }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e61652a981631cd372269e014016648b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOpsTest.java", "commitBeforeChange": "1e619a02befaa7a99dc31172b2a007a2446ed2bd", "commitAfterChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "      public void testCommandLineToList()", "signatureAfterChange": "      public void testCommandLineToLists()", "diff": ["-  public void testCommandLineToList() {", "-    List<String> l = StringOps.commandLineToList(\"a b c\");", "+  public void testCommandLineToLists() {", "+    List<List<List<String>>> seqs = StringOps.commandLineToLists(\"a b c\");", "+    assertEquals(1, seqs.size());    ", "+    List<List<String>> pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    List<String> l = pipe.get(0);", "-    l = StringOps.commandLineToList(\"a'b c'\");", "+    seqs = StringOps.commandLineToLists(\"a'b c'\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a\\\"b c\\\"\");", "+    seqs = StringOps.commandLineToLists(\"a\\\"b c\\\"\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a\\\"b 'c'\\\"\");", "+    seqs = StringOps.commandLineToLists(\"a\\\"b 'c'\\\"\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a \\\"b c\\\"\");", "+    seqs = StringOps.commandLineToLists(\"a \\\"b c\\\"\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"\\u001b\");", "-    // System.err.println(\"l = \"+java.util.Arrays.toString(l.toArray()));", "-    assertEquals(0, l.size());", "+    seqs = StringOps.commandLineToLists(\"\\u001b\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "+    // System.err.println(\"l = \"+edu.rice.cs.plt.iter.IterUtil.toString(seqs));", "+    assertEquals(1, l.size());", "+    assertEquals(\"\\u001b\", l.get(0));", "-    l = StringOps.commandLineToList(\"\\u001b\\u001b\");", "+    seqs = StringOps.commandLineToLists(\"\\u001b\\u001b\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"\\u001b \");", "+    seqs = StringOps.commandLineToLists(\"\\u001b \");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    ", "-    l = StringOps.commandLineToList(\"a\\u001b b\");", "+    seqs = StringOps.commandLineToLists(\"a\\u001b b\");", "+    assertEquals(1, seqs.size());    ", "+    pipe = seqs.get(0);", "+    assertEquals(1, pipe.size());", "+    l = pipe.get(0);    "]}], "num": 6416}
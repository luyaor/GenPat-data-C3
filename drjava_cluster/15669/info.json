{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64d90e16cef3a2fc6f275eca0d0e2a6e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10ca05e775d08a81ac14589e58937e02", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "         public Object visit(ClassInitializer node)", "signatureAfterChange": "     public Void visit(ClassInitializer node)", "diff": ["-         */", "-        public Object visit(ClassInitializer node) {", "-            Iterator it = node.getBlock().getStatements().iterator();", "-            while (it.hasNext()) {", "-                addToClassInitializer((Node)it.next());", "-            }", "-            return null;", "-        }", "+     */", "+    public Void visit(ClassInitializer node) {", "+      Iterator it = node.getBlock().getStatements().iterator();", "+      while (it.hasNext()) {", "+        addToClassInitializer((Node)it.next());", "+      }", "+      return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f257f746bd33ddc46c892ba514e664e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "         public Object visit(InstanceInitializer node)", "signatureAfterChange": "     public Void visit(InstanceInitializer node)", "diff": ["-         */", "-        public Object visit(InstanceInitializer node) {", "-            Iterator it = node.getBlock().getStatements().iterator();", "-            while (it.hasNext()) {", "-                addToInstanceInitializer((Node)it.next());", "-            }", "-            return null;", "-        }", "+     */", "+    public Void visit(InstanceInitializer node) {", "+      Iterator it = node.getBlock().getStatements().iterator();", "+      while (it.hasNext()) {", "+        addToInstanceInitializer((Node)it.next());", "+      }", "+      return null;", "+    }"]}], "num": 15669}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0bd08a9ac085e6f9036f6b6afdd9467e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9139d779d4d280e43b3276c0fc96b220", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "          public void testGetFieldOrVariable()", "signatureAfterChange": "          public void testGetFieldOrVariable()", "diff": ["-      VariableData vd3 = new VariableData(\"variable1\", new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[0]), _sd3, true, _sd3);", "+      VariableData vd3 = new VariableData(\"variable1\", new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[0]), _sd3, true, _sd3);", "-      assertEquals(\"Should find field0\", vd0, _btc.getFieldOrVariable(\"field0\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should find field1\", vd1, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should find field2\", vd2, _btc.getFieldOrVariable(\"field2\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should not find field7\", null, _btc.getFieldOrVariable(\"field7\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should find variable1\", vd3, _btc.getFieldOrVariable(\"variable1\", md, _sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should find field0\", vd0, _btc.getFieldOrVariable(\"field0\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find field1\", vd1, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find field2\", vd2, _btc.getFieldOrVariable(\"field2\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should not find field7\", null, _btc.getFieldOrVariable(\"field7\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find variable1\", vd3, _btc.getFieldOrVariable(\"variable1\", md, _sd3, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should not find field1\", null, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(JExprParser.NO_SOURCE_INFO), new LinkedList<VariableData>()));", "+      assertEquals(\"Should not find field1\", null, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO), new LinkedList<VariableData>()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be0162512368b3277ea9931aaefcfcf1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "          public void testGetFieldOrVariable()", "signatureAfterChange": "          public void testGetFieldOrVariable()", "diff": ["-      VariableData vd3 = new VariableData(\"variable1\", new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[0]), _sd3, true, _sd3);", "+      VariableData vd3 = ", "+        new VariableData(\"variable1\", new ModifiersAndVisibility(NONE, new String[0]), _sd3, true, _sd3);", "-      assertEquals(\"Should find field0\", vd0, _btc.getFieldOrVariable(\"field0\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should find field1\", vd1, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should find field2\", vd2, _btc.getFieldOrVariable(\"field2\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should not find field7\", null, _btc.getFieldOrVariable(\"field7\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should find variable1\", vd3, _btc.getFieldOrVariable(\"variable1\", md, _sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should find field0\", vd0, _btc.getFieldOrVariable(\"field0\", _sd6, _sd6, NULL_LITERAL));", "+      assertEquals(\"Should find field1\", vd1, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, NULL_LITERAL));", "+      assertEquals(\"Should find field2\", vd2, _btc.getFieldOrVariable(\"field2\", _sd6, _sd6, NULL_LITERAL));", "+      assertEquals(\"Should not find field7\", null, _btc.getFieldOrVariable(\"field7\", _sd6, _sd6, NULL_LITERAL));", "+      assertEquals(\"Should find variable1\", vd3, _btc.getFieldOrVariable(\"variable1\", md, _sd3, NULL_LITERAL));", "-      assertEquals(\"Should not find field1\", null, _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, new NullLiteral(SourceInfo.NO_INFO), new LinkedList<VariableData>()));", "+      assertEquals(\"Should not find field1\", null, ", "+                   _btc.getFieldOrVariable(\"field1\", _sd6, _sd6, NULL_LITERAL, new LinkedList<VariableData>()));"]}], "num": 5718}
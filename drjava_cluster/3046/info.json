{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5140b7a4bdb5af679cdcaac92796438", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e0b724701728e69529415452801ffc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public static <V> Link<V> createLink(Link<V> next)", "signatureAfterChange": "     public static Link createLink(Link next)", "diff": ["-    public static <V> Link<V> createLink(Link<V> next) {", "-      return new Link<V>(next);", "+    public static Link createLink(Link next) {", "+      /**", "+       for (int i = 0; i < SIZE; i++) {", "+       WeakReference r = links[i];", "+       Link l = null;", "+       if (r != null) {", "+       l = (Link)r.get();", "+       if (l != null) {", "+       links[i] = null;", "+       l.next = next;", "+       return l;", "+       } else {", "+       links[i] = null;", "+       }", "+       }", "+       }", "+       */", "+      return new Link(next);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb871fceceae576375ab2331e3e2e6f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public static Link createLink(Link next)", "signatureAfterChange": "     public static <V> Link<V> createLink(Link<V> next)", "diff": ["-    public static Link createLink(Link next) {", "-      /**", "-       for (int i = 0; i < SIZE; i++) {", "-       WeakReference r = links[i];", "-       Link l = null;", "-       if (r != null) {", "-       l = (Link)r.get();", "-       if (l != null) {", "-       links[i] = null;", "-       l.next = next;", "-       return l;", "-       } else {", "-       links[i] = null;", "-       }", "-       }", "-       }", "-       */", "-      return new Link(next);", "-    }", "+    public static <V> Link<V> createLink(Link<V> next) {", "+      return new Link<V>(next);"]}], "num": 3046}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cedac137f5aa02a1d32ae5e46bff0cb7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01852fc95198188c8b0684f12cd7a742", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "34ce8483136d91f9eff46f1971dc8a612f363868", "commitAfterChange": "cfd4689ec89c3908ea0306a11510c85ea5436de0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static void main(final String[] args)", "signatureAfterChange": "   public static void main(final String[] args)", "diff": ["-   */", "+    */", "-    new SplashScreen().flash();", "+    // handleCommandLineArgs will return true if DrJava should be loaded", "+    if (handleCommandLineArgs(args)) {", "+      if (!_forceNewInstance && (_filesToOpen.size()>0)) {", "+        try {", "+          boolean ret = RemoteControlClient.openFile(null);", "+          if (!RemoteControlClient.isServerRunning()) {", "+            // server not running, display splash screen", "+            new SplashScreen().flash();", "+          }", "+        }", "+        catch(IOException ioe) {", "+          // ignore", "+        }", "+      }", "+      else {", "+        // either forcing new instance or no files specified, display splash screen", "+        new SplashScreen().flash();", "+      }", "+      ", "-    configureAndLoadDrJavaRoot(args); ", "+      configureAndLoadDrJavaRoot(args); ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a74fb09db819fbd3e01a9666497b824", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "224d0c84f840f8ce41af8c46df98c9446d0323a9", "commitAfterChange": "23d1c475c29f1525fd3971f7ee4a6f8e9616fd8a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction()", "diff": ["-          throw  new RuntimeException(t.toString());", "+          throw new RuntimeException(t.toString());", "+      }", "+", "+      _interactionsDoc.prompt();", "+    }", "+    catch (ExitingNotAllowedException e) {", "+      try {", "+        _interactionsDoc.insertString(_interactionsDoc.getLength(),", "+                                      \"\\n\" + EXIT_CALLED_MESSAGE,", "+                                      null);", "+      }", "+      catch (BadLocationException ble) {", "+        throw new UnexpectedException(ble);", "-      } catch (BadLocationException willNeverHappen) {}", "+      }", "+      catch (BadLocationException ble) {", "+        throw new UnexpectedException(ble);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38bda3c52cf6bc2133606ea44893b44a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/Breakpoint.java", "commitBeforeChange": "930b1ef6cc279650a085c7c6499b1b57cb240018", "commitAfterChange": "73b3ce3968c13472938fea3d36b496150c938bd2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public Breakpoint( OpenDefinitionsDocument doc, int lineNumber, DebugManager manager)      throws DebugException, IllegalStateException", "signatureAfterChange": "   public Breakpoint( OpenDefinitionsDocument doc, int offset, int lineNumber, DebugManager manager)      throws DebugException, IllegalStateException", "diff": ["-  public Breakpoint( OpenDefinitionsDocument doc, int lineNumber, DebugManager manager) ", "+  public Breakpoint( OpenDefinitionsDocument doc, int offset, int lineNumber, DebugManager manager) ", "+    ", "+    DefinitionsDocument defDoc = doc.getDocument();", "+    ", "+    try {", "+      _startPos = defDoc.createPosition(defDoc.getLineStartPos(offset));", "+      _endPos = defDoc.createPosition( defDoc.getLineEndPos(offset));", "+    }", "+    catch (BadLocationException ble) {", "+      throw new UnexpectedException(ble);", "+    }", "+    ", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4306b70df0d26c1e30bea12321403c63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "commitAfterChange": "22cb21cbc806aa257284ccfb5bed593a93cc9671", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "    public int replaceAll()", "signatureAfterChange": "   public int replaceAll()", "diff": ["-   */ ", "+   */", "+    try {", "+      if (!_searchBackwards){", "+        _start = _doc.createPosition(0);", "+        setPosition(0);", "+      } else {", "+        _start = _doc.createPosition(_doc.getLength());", "+        setPosition(_doc.getLength());", "+      }", "+    } catch (BadLocationException e) {", "+      throw new UnexpectedException(e);", "+    }", "-    int wrapped = 0; ", "+    int wrapped = 0;", "-    // Checks that the findNext method has found something and has not ", "-    // wrapped once and gone beyond start. ", "-    while (found >= 0 && (wrapped == 0 || found <= _start.getOffset()) && ", "-    wrapped < 2) {", "+    // Checks that the findNext method has found something and has not", "+    // wrapped once and gone beyond start.", "+//    while (found >= 0 && (wrapped == 0 ||", "+//                         ((found < _start.getOffset() + _findWord.length() && !_searchBackwards)  ||", "+//                          (found > _start.getOffset() - _findWord.length() && _searchBackwards))) && wrapped < 2) {", "+", "+    //new while condition, since I started replacing from the beginning/end of the document only", "+    while(wrapped == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d7d7f788986a1d984a94d6d8656e31e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "149feb3f2af1920c19f6930f765f209a93ed7ca6", "commitAfterChange": "fe008ef5062ac4e4b569352517b1df11133d4fdd", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["-  /** Parameterized indentation called from within DJDocument */", "-  public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)", "-    throws OperationCanceledException {", "-    indentLines(selStart, selEnd, reason, pm, _currentLocation);", "-  }", "+  public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)", "+//          Utilities.showDebug(\"selStart = \" + selStart + \" currentLocation = \" + _currentLocation);", "+          Position oldCurrentPosition = createPosition(_currentLocation);", "+          ", "+//          Utilities.showDebug(\"Indenting line at offset \" + selStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79aa1d9f2ad0e48fbe4416f102589949", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "640d94c961319de37237c21816ee469b313568b5", "commitAfterChange": "dbdd53c636f6618ffbae999ad0ee607bc3e2b6a3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Node visit(ObjectMethodCall node)", "signatureAfterChange": "   public Node visit(ObjectMethodCall node)", "diff": ["+    ", "+        AbstractTypeChecker tc = AbstractTypeChecker.makeTypeChecker(typeCheckerContext);", "-            params[i]=(args.get(i).acceptVisitor(AbstractTypeChecker.makeTypeChecker(typeCheckerContext)));", "+            params[i]=(args.get(i).acceptVisitor(tc));", "-        }   ", "+        }", "+        boolean existsInCurrentScope = false;", "+        ", "+        if(o == defaultQualifier) {", "+          try {", "+            ReflectionUtilities.lookupMethod((Class)((Node)o).acceptVisitor(tc),node.getMethodName(),params);", "+            existsInCurrentScope = true;", "+          }", "+          catch(Exception nsme) {", "+            //Expected to throw an Exception whenever the method call is to a method that does not exist in ", "+            //the class specified by the default qualifier. If caught, the method does not exist in current scope and the ", "+            //new Qualified name should be looked up, or if o is not of type Node.", "+          } ", "+        }", "+          ", "+        ", "-        o = new ReferenceType(ids);", "+        if (! existsInCurrentScope)", "+          o = new ReferenceType(ids);", "-        o = defaultQualifier;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bd8696cefe62672421f3ebfe8e8346a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "17590567cb9f06269b33249dad955c39164a9028", "commitAfterChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   private void _switchToSuspendedThread() throws DebugException", "signatureAfterChange": "   private void _switchToSuspendedThread() throws DebugException", "diff": ["+    final ThreadReference currThread = _suspendedThreads.peek();", "-        l.currThreadSet(new DebugThreadData(_suspendedThreads.peek()));", "+        l.currThreadSet(new DebugThreadData(currThread));", "-  ", "+    try {", "+      if (currThread.frameCount() > 0) {", "+        scrollToSource(currThread.frame(0).location());", "+      }", "+    }", "+    catch (IncompatibleThreadStateException itse) {", "+      throw new UnexpectedException(itse);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be0c5ccb6fe1d2869992eb1ed60bb59d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 52, "signatureBeforeChange": "   synchronized void currThreadDied()", "signatureAfterChange": "   synchronized void currThreadDied()", "diff": ["+    if( _runningThread != null ){", "+      _deadThreads.add(_runningThread);", "+      _runningThread = null;", "+    }", "+        ", "+    if (_suspendedThreads.size() > 0) {", "+      try{", "+        scrollToSource(_suspendedThreads.peek().frame(0).location());", "+      }catch(IncompatibleThreadStateException e){", "+        throw new UnexpectedException(e);", "+      }", "+      // updates watches and makes buttons in UI active, does this because", "+      // there are suspended threads on the stack", "+      currThreadSuspended();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6ce6887ca695c934d55498694f5b707", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorWindow.java", "commitBeforeChange": "dd87e87bd7504e54354041075b7fdfd1298dfd10", "commitAfterChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private void updateErrorInfo()", "signatureAfterChange": "   private void updateErrorInfo()", "diff": ["+      b.append(\"DrJava Version \");", "+      b.append(edu.rice.cs.drjava.Version.getBuildTimeString());", "+      b.append(\"\\n\");", "-            b.append(String.format(\"%04x\", ch));", "+            String hexString = \"0000\"+Integer.toHexString(ch);", "+            b.append(hexString.substring(hexString.length()-4));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3db8da0b7183ae142f607ec2795d4d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorWindow.java", "commitBeforeChange": "d43c6d20ec903cbbb4ee5291a112b3b3ae570823", "commitAfterChange": "f32b1e10d3ab04ca267d7bdc1cbc12db38b5ac66", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private void updateErrorInfo()", "signatureAfterChange": "   private void updateErrorInfo()", "diff": ["-      b.append(\"\\n\");", "+      b.append('\\n');", "-        b.append(\"\\n\");", "+        b.append('\\n');", "+      b.append('\\n');", "+      ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+      try {", "+        DrJava.getConfig().saveConfiguration(baos, \"DrJava configuration file\");", "+        b.append(baos.toString());", "+      }", "+      catch(java.io.IOException ioe) {", "+        b.append(\"IOException when trying to print DrJava configuration file\");", "+      }", "+      b.append('\\n');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc3ceb4335f6419434018606d9e7409", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "f1270b4a562e0ecd61507987f82e57d121a23edd", "commitAfterChange": "12067b12cea198f72f8758eab77d6f544c743a53", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public boolean saveSettings()", "signatureAfterChange": "   public boolean saveSettings()", "diff": ["+    boolean projRootChanged = false;", "-    _model.setProjectRoot(pr);", "+    if (!pr.equals(_model.getProjectRoot())) {", "+      _model.setProjectRoot(pr);", "+      projRootChanged = true;", "+    }", "+    if (projRootChanged) {", "+      try {", "+        _model.reloadProject(_mainFrame.getCurrentProject(), _mainFrame.gatherProjectDocInfo());", "+      } catch(IOException e) { throw new edu.rice.cs.util.UnexpectedException(e, \"I/O error while reloading project\"); }", "+    }"]}], "num": 27428}
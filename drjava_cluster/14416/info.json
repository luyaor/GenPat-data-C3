{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72b9884624f92950030e64d61d404987", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a8ac9427e895083ccddea1950a72611", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "d6e5a814c07284651f7c529a85f464592512b19a", "commitAfterChange": "7068b1b7376b1c3813644f4d8ea2780684ca5f7c", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private void _doStartup()", "signatureAfterChange": "   private void _doStartup()", "diff": ["+    // add additional boot class path items specified by the selected compiler", "+    for (File f: _interactionsModel.getCompilerBootClassPath()) {", "+      try {", "+        // NOTE: this is a work-around", "+        // it seems like it's impossible to pass long file names here on Windows", "+        // so we are using a clumsy method that determines the short file name", "+        File shortF = FileOps.getShortFile(f);", "+        jvmArgs.add(\"-Xbootclasspath/a:\"+shortF.getAbsolutePath().replace(File.separatorChar, '/'));", "+      }", "+      catch(IOException ioe) {", "+        // TODO: figure out what to do here. error? warn?", "+      }", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18c07907ab2023d805628534406045be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "297e294cfcf774f3823ebb2c52e578d9d54f8165", "commitAfterChange": "577b4a8bad3187067d1f7c3df5ccf6c439482a05", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["+      /**", "+      */", "+      if (_restartThread != null) {", "+        //DrJava.consoleOut().println(\"Disabling _restartThread\");", "+        _restartThread.disable();", "+      }", "-        Thread thread = new Thread() {", "+        _restartThread = new RestartThread() {", "-              restartInterpreterJVM();", "-              if (!_isResetting()) {", "-               ", "+              if (_shouldReset) {", "+                //DrJava.consoleOut().println(\"I should reset\");", "+                restartInterpreterJVM();", "+                //if (!_isResetting()) {", "+                //}", "-        thread.start();", "+        _restartThread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44d50c8423c99b392a06d702bab95918", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "acb61ff7586f62b61a15637f6576fc3aff67ead1", "commitAfterChange": "7f6caafd37c000cec49c11321ed7ed1199924a0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public void windowClosing(WindowEvent ev)", "signatureAfterChange": "        private static void addComp(Container p, JComponent child,                                GridBagConstraints c, GridBagLayout gbl,                                int row, int col,                                 float weightx, float weighty, int gridw,                                int ipady)", "diff": ["-  private WindowListener _dialogListener = new WindowAdapter() {", "-    public void windowClosing(WindowEvent ev) {", "-      hide();", "-    }", "+   ", "+   private static void addComp(Container p, JComponent child,", "+                               GridBagConstraints c, GridBagLayout gbl,", "+                               int row, int col, ", "+                               float weightx, float weighty, int gridw,", "+                               int ipady) {", "+     c.gridx = col; c.gridy = row;", "+     c.weightx = weightx; c.weighty = weighty;", "+     c.gridwidth = gridw;", "+     c.ipady = ipady;", "+     gbl.setConstraints(child,c);", "+     p.add(child);", "+   }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1f059494043d9e3d4dc9581b2d6507c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 138, "signatureBeforeChange": "   private OpenDefinitionsDocument _getOpenDocument(File file)", "signatureAfterChange": "   private OpenDefinitionsDocument _getOpenDocument(File file)", "diff": ["-          if ((thisFile != null) && thisFile.equals(file)) {", "-            doc = thisDoc;", "+          if (thisFile != null) {", "+            try {", "+              // Compare canonical paths if possible", "+              if (thisFile.getCanonicalFile().equals(file.getCanonicalFile())) {", "+                doc = thisDoc;", "+              }", "+            }", "+            catch (IOException ioe) {", "+              // Can be thrown from getCanonicalFile.", "+              //  If so, compare the files themselves", "+              if (thisFile.equals(file)) {", "+                doc = thisDoc;", "+              }", "+            }"]}], "num": 14416}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "304ab495b78adf6e2d80f5131a3d2095", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cc09ffc6d14682fa1941569dda5e54a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ReferenceTypeName.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public ReferenceTypeName(List<IdentifierToken> ids, String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public ReferenceTypeName(List<? extends IdentifierToken> ids, String fn, int bl, int bc, int el, int ec)", "diff": ["-  public ReferenceTypeName(List<IdentifierToken> ids, String fn, int bl, int bc, int el, int ec) {", "+  public ReferenceTypeName(List<? extends IdentifierToken> ids, String fn, int bl, int bc, int el, int ec) {", "-", "+    if (ids.size() == 0) throw new IllegalArgumentException(\"ids.size() == 0\");", "+    identifiers = ids;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a36f15f5fc0cab4846f27f5cb2ccb326", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-eclipse/edu/rice/cs/drjava/model/compiler/EclipseCompiler.java", "commitBeforeChange": "8e720afa329dc77cc45a6aba8a5a211e38ce857f", "commitAfterChange": "8a50a7d4180dfbf8ce4f8b3b2ddf43887adf7c81", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["+//    Writer out = new OutputStreamWriter(new OutputStream() { // silent", "+//      public void write(int b) { }", "+//    });", "-//    try {", "-//      PrintWriter pw = new PrintWriter(new FileWriter(\"/home/mgricken/eclipse.txt\",true));      ", "-//      out = pw;", "-//      pw.println(\"JavacCompiler: \"+getName());", "-//    }", "-//    catch(IOException ioe) { throw new RuntimeException(\"Unexpected\", ioe); }", "+      if (!res && (errors.size()==0)) throw new AssertionError(\"Compile failed. There should be compiler errors, but there aren't.\");"]}], "num": 29952}
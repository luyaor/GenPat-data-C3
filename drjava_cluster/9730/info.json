{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c05c473fca9ae618f8f9b6e59c827214", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57cc9caf7129284c5312f04ee227f99a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JDKToolsLibrary.java", "commitBeforeChange": "8e720afa329dc77cc45a6aba8a5a211e38ce857f", "commitAfterChange": "8a50a7d4180dfbf8ce4f8b3b2ddf43887adf7c81", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JDKToolsLibrary> makeFromRuntime(GlobalModel model)", "diff": ["-   */", "-  public static JDKToolsLibrary makeFromRuntime(GlobalModel model) {", "-    FullVersion version = JavaVersion.CURRENT_FULL;", "-    CompilerInterface compiler = NoCompilerAvailable.ONLY;", "-    String compilerAdapter = adapterForCompiler(version);", "-    if (compilerAdapter != null) {", "-        CompilerInterface attempt = (CompilerInterface) ReflectUtil.loadObject(compilerAdapter, sig, args);", "-        if (attempt.isAvailable()) { compiler = attempt; }", "+   */", "+  public static Iterable<JDKToolsLibrary> makeFromRuntime(GlobalModel model) {", "+    FullVersion version = JavaVersion.CURRENT_FULL;", "+", "+    String compilerAdapter = adapterForCompiler(version);", "+    msg(\"makeFromRuntime: compilerAdapter=\"+compilerAdapter);", "+    CompilerInterface compiler = getCompilerInterface(compilerAdapter, version);", "+    msg(\"                 compiler=\"+compiler.getClass().getName());", "+", "+    List<JDKToolsLibrary> list = new ArrayList<JDKToolsLibrary>();", "-    return new JDKToolsLibrary(version, compiler, debugger, javadoc);", "-  }", "+    if (compiler!=NoCompilerAvailable.ONLY) {", "+      // if we have found a compiler, add it", "+      msg(\"                 compiler found\");", "+      list.add(new JDKToolsLibrary(version, compiler, debugger, javadoc));", "+    }", "+      ", "+    if (JavaVersion.JAVA_6.compareTo(version.majorVersion())>=0) {", "+      // at least Java 6, try Eclipse compiler", "+      msg(\"                 at least Java 6, try EclipseCompiler\");", "+      // provide \"UNKNOWN 6.0\" as version", "+      FullVersion eclipseVersion = JavaVersion.parseFullVersion(JavaVersion.JAVA_6.fullVersion().versionString(),", "+                                                                \"Eclipse\",\"\");", "+      msg(\"                 version for Eclipse: \"+eclipseVersion);", "+      compiler = getCompilerInterface(\"edu.rice.cs.drjava.model.compiler.EclipseCompiler\", eclipseVersion);", "+      msg(\"                 compiler=\"+compiler.getClass().getName());", "+      if (compiler!=NoCompilerAvailable.ONLY) {", "+        // if we have found a compiler, add it", "+        msg(\"                 compiler found\");", "+        list.add(new JDKToolsLibrary(eclipseVersion, compiler, debugger, javadoc));", "+      }", "+    }", "+    msg(\"                 compilers found: \"+list.size());", "+    ", "+    if (list.size()==0) {", "+      // no compiler found, i.e. compiler == NoCompilerAvailable.ONLY", "+      msg(\"                 no compilers found, adding NoCompilerAvailable library\");", "+      list.add(new JDKToolsLibrary(version, NoCompilerAvailable.ONLY, debugger, javadoc));", "+    }", "+    ", "+    return list;", "+  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecb956df6ef9f0c97b229f0bc0fc4aaf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JDKToolsLibrary.java", "commitBeforeChange": "8dbb3967ef585255b4d1ff989654250a57b1af90", "commitAfterChange": "b7d4cb04f4bb848380a14b3825abe047db8dc58f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public static Iterable<JDKToolsLibrary> makeFromRuntime(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JDKToolsLibrary> makeFromRuntime(GlobalModel model)", "diff": ["-    if (JavaVersion.JAVA_6.compareTo(version.majorVersion())>=0) {", "-      // at least Java 6, try Eclipse compiler", "-      msg(\"                 at least Java 6, try EclipseCompiler\");", "-      // provide \"UNKNOWN 6.0\" as version", "-      FullVersion eclipseVersion = JavaVersion.parseFullVersion(JavaVersion.JAVA_6.fullVersion().versionString(),", "-                                                                \"Eclipse\",\"\");", "-      msg(\"                 version for Eclipse: \"+eclipseVersion);", "-      compiler = getCompilerInterface(\"edu.rice.cs.drjava.model.compiler.EclipseCompiler\", eclipseVersion);", "-      msg(\"                 compiler=\"+compiler.getClass().getName());", "-      if (compiler!=NoCompilerAvailable.ONLY) {", "-        // if we have found a compiler, add it", "-        msg(\"                 compiler found\");", "-        list.add(new JDKToolsLibrary(eclipseVersion, null, compiler, debugger, javadoc));", "-      }", "-    }", "+//    if (JavaVersion.JAVA_6.compareTo(version.majorVersion())>=0) {", "+//      // at least Java 6, try Eclipse compiler", "+//      msg(\"                 at least Java 6, try EclipseCompiler\");", "+//      // provide \"UNKNOWN 6.0\" as version", "+//      FullVersion eclipseVersion = JavaVersion.parseFullVersion(JavaVersion.JAVA_6.fullVersion().versionString(),", "+//                                                                \"Eclipse\",\"\");", "+//      msg(\"                 version for Eclipse: \"+eclipseVersion);", "+//      compiler = getCompilerInterface(\"edu.rice.cs.drjava.model.compiler.EclipseCompiler\", eclipseVersion);", "+//      msg(\"                 compiler=\"+compiler.getClass().getName());", "+//      if (compiler!=NoCompilerAvailable.ONLY) {", "+//        // if we have found a compiler, add it", "+//        msg(\"                 compiler found\");", "+//        list.add(new JDKToolsLibrary(eclipseVersion, null, compiler, debugger, javadoc));", "+//      }", "+//    }"]}], "num": 9730}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ee305de2e8aa81fee6d2c4b915e7c7d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e57c0c8acbbaa92bd8f2762f31a284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-      /**", "+      i++;", "+      //DrJava.consoleOut().println(\"MainJVM: iteration \" + i);", "+      ", "-", "-      _startupInProgress = true;", "-      */", "+      _startupInProgress = true;   ", "+      ", "+      // _model may be null if we're running a test on this", "+      if (_model != null)", "+        _model.interactionsResetting();", "+      ", "-        //DrJava.consoleOut().println(\"In MainJVM: started interpreter jvm\");", "+        //DrJava.consoleOut().println(\"In MainJVM: started interpreter jvm \" +i);", "-        _restartThread = new RestartThread() {", "+        _restartThread = new RestartThread(i) {", "-              //                            status);", "-              if (_shouldReset) {", "-                //DrJava.consoleOut().println(\"I should reset\");", "-                restartInterpreterJVM();", "-                //if (!_isResetting()) {", "-                replCalledSystemExit(status);", "-                //}", "+              //                            status + \", i = \" + j);", "+              synchronized(MainJVM.this) {", "+                if (_shouldReset) {", "+                  //DrJava.consoleOut().println(\"I should reset (thread \" + j + \")\");", "+                  boolean currentlyStarting = _startupInProgress;", "+                  //DrJava.consoleOut().println(\"Currently starting for \" + j + \" = \" + currentlyStarting);", "+                  restartInterpreterJVM();", "+                  if (!currentlyStarting) {", "+                    //DrJava.consoleOut().println(\"Not starting up, so display message, thread \" + j);", "+                    replCalledSystemExit(status);", "+                  }", "+                }", "+              //DrJava.consoleOut().println(\"Thread finished: \" + j);", "-", "-        //DrJava.consoleOut().println(\"In MainJVM: starting thread\");", "+        // If RESET_TIME_OUT seconds pass before the new InterpreterJVM registers, try restarting the JVM", "+        _timerThread = new RestartThread(i) {", "+          public void run() {", "+            _restartTimer = new Timer(RESET_TIME_OUT*1000, new ActionListener() {", "+              int count = 0;", "+              public void actionPerformed(ActionEvent e) {", "+                synchronized(MainJVM.this) {", "+                  if (!_shouldReset) {", "+                    _stopTimerThread();", "+                    return;", "+                  }", "+                  if (count < 2) {", "+                    _model.printDebugMessage(\"Could not connect to InterpreterJVM, trying again...\");", "+                    restartInterpreterJVM();", "+                    count++;", "+                    return;", "+                  }", "+                  _model.printDebugMessage(\"Connection failed, the interactions window will not work\");", "+                  _stopTimerThread();", "+                }", "+              }", "+            });               ", "+            _restartTimer.setRepeats(true);", "+            _restartTimer.start();   ", "+          }", "+        };", "+        //DrJava.consoleOut().println(\"In MainJVM: starting thread \" + i);", "+        _timerThread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b090901b614a5a49025c1bc379a462ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public synchronized void restartInterpreterJVM()", "signatureAfterChange": "   public void startInterpreterJVM()", "diff": ["-   */", "-  public synchronized void restartInterpreterJVM() {", "-    if (_startupInProgress) {", "-      return;", "-    }", "-    _startupInProgress = true;", "-    ", "-    // _model may be null if we're running a test on this", "-    if (_model != null)", "-      _model.interactionsResetting();", "-    ", "-    if (_restartThread != null) {", "-      //DrJava.consoleOut().println(\"Disabling _restartThread\");", "-      _restartThread.disable();", "-    }", "-    ", "-    killInterpreter();", "-    ", "-    int debugPort = getDebugPort();", "-    ", "-    String className = InterpreterJVM.class.getName();", "-    String[] args = new String[] { getIdentifier() };", "-    Vector<String> jvmArgs = new Vector<String>();", "-    ", "-    if (allowAssertions()) {", "-      jvmArgs.addElement(\"-ea\");", "-    }", "-    ", "-    if (debugPort > -1) {", "-      jvmArgs.addElement(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=\" + ", "-                         debugPort);", "-      jvmArgs.addElement(\"-Xdebug\");", "-      jvmArgs.addElement(\"-Xnoagent\");", "-      jvmArgs.addElement(\"-Djava.compiler=NONE\");", "-    }", "-    ", "-    String[] jvmArgsArray = new String[jvmArgs.size()];", "-    for (int i=0; i < jvmArgs.size(); i++) {", "-      jvmArgsArray[i] = jvmArgs.elementAt(i);", "-    }", "-    ", "-    try {", "-      //DrJava.consoleOut().println(\"In MainJVM: starting interpreter jvm\");", "-      _interpreterProcess = ExecJVM.", "-        runJVMPropogateClassPath(className, args, jvmArgsArray);", "-      ", "-      // Start a thread to wait for the interpreter to die and to fire", "-      // off a new one (and notify model) when it happens", "-      _restartThread = new RestartThread() {", "-        public void run() {", "-          try {", "-            int status = _interpreterProcess.waitFor();", "-            synchronized(MainJVM.this) {", "-              if (_shouldReset) {", "-                boolean currentlyStarting = _startupInProgress;", "-                restartInterpreterJVM();", "-                if (!currentlyStarting) {", "-                  replCalledSystemExit(status);", "-                }", "-              }", "-            }", "-          }", "-          catch (InterruptedException ie) {", "-            throw new edu.rice.cs.util.UnexpectedException(ie);", "-          }", "-        }", "-      };", "-      // If RESET_TIME_OUT seconds pass before the new InterpreterJVM registers, try restarting the JVM", "-      _timerThread = new RestartThread() {", "-        public void run() {", "-          _restartTimer = new Timer(RESET_TIME_OUT*1000, new ActionListener() {", "-            int count = 0;", "-            public void actionPerformed(ActionEvent e) {", "-              synchronized(MainJVM.this) {", "-                if (!_shouldReset) {", "-                  _stopTimerThread();", "-                  return;", "-                }", "-                if (count < 2) {", "-                  _model.printDebugMessage(\"Could not connect to Interpreter JVM, trying again...\");", "-                  restartInterpreterJVM();", "-                  count++;", "-                  return;", "-                }", "-                _model.printDebugMessage(\"Unable to connect to Interpreter JVM, so the Interactions Pane is unavailable.\");", "-                _stopTimerThread();", "-              }", "-            }", "-          });               ", "-          _restartTimer.setRepeats(true);", "-          _restartTimer.start();   ", "-        }", "-      };", "-      _restartThread.start();", "-      _timerThread.start();", "-    }", "-    catch (IOException ioe) {", "-      _threwException(ioe);", "-    }", "-  }", "+   */", "+  public void startInterpreterJVM() {", "+    if (isStartupInProgress() || isInterpreterRunning()) {", "+      return;", "+    }", "+", "+    // Pass assertion and debug port information as JVM arguments", "+    Vector<String> jvmArgs = new Vector<String>();", "+    if (allowAssertions()) {", "+      jvmArgs.addElement(\"-ea\");", "+    }", "+    int debugPort = getDebugPort();", "+    if (debugPort > -1) {", "+      jvmArgs.addElement(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=\" + ", "+                         debugPort);", "+      jvmArgs.addElement(\"-Xdebug\");", "+      jvmArgs.addElement(\"-Xnoagent\");", "+      jvmArgs.addElement(\"-Djava.compiler=NONE\");", "+    }", "+    String[] jvmArgsArray = new String[jvmArgs.size()];", "+    for (int i=0; i < jvmArgs.size(); i++) {", "+      jvmArgsArray[i] = jvmArgs.elementAt(i);", "+    }", "+    ", "+    // Invoke the Interpreter JVM", "+    try {", "+      invokeSlave(jvmArgsArray);", "+    }", "+    catch (RemoteException re) {", "+      _threwException(re);", "+    }", "+    catch (IOException ioe) {", "+      _threwException(ioe);", "+    }", "+  }"]}], "num": 13993}
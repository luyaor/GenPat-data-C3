{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5436e323a1c44c348e5a3b134876cebb", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3334a583eab6230f0fed47ffd8b68bfe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Void forInnerInterfaceDefDoFirst(InnerInterfaceDef that)", "signatureAfterChange": "   protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String name)", "diff": ["+    */", "+  protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String name) {", "+    System.err.println(\"Processing InnerInterfaceDef for \" + name);", "+    forInnerInterfaceDefDoFirst(that);", "+    if (prune(that)) return;", "+    ", "+    that.getMav().visit(this);", "+    that.getName().visit(this);", "+    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);", "+    ", "+    SymbolData sd = defineInnerSymbolData(that, name, data);", "+    if (sd != null) {", "+      ", "+      that.getBody().visit(new InterfaceBodyIntermediateVisitor(sd, ", "+                                                                _file, ", "+                                                                _package,", "+                                                                _importedFiles, ", "+                                                                _importedPackages,", "+                                                                _classNamesInThisFile, ", "+                                                                continuations));", "+    }", "+    ", "+    forInnerInterfaceDefOnly(that);", "-  /**Do not allow inner interfaces at the Intermediate Level.*/", "-    public Void forInnerInterfaceDefDoFirst(InnerInterfaceDef that) {", "-    _addError(\"Nested interfaces cannot be used at the Intermediate level\", that);", "-    return null;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a10a8f028af98a43b5f3d59ced59c984", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public Void forInnerClassDefDoFirst(InnerClassDef that)", "signatureAfterChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String name)", "diff": ["+    */", "+  protected void handleInnerClassDef(InnerClassDef that, Data data, String name) {", "+    System.err.println(\"Processing InnerClassDef for \" + name);", "+    forInnerClassDefDoFirst(that);", "+    if (prune(that)) return;", "+    ", "+    that.getMav().visit(this);", "+    that.getName().visit(this);", "+    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+//    that.getSuperclass().visit(this);", "+    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);", "+    ", "+    SymbolData sd = defineInnerSymbolData(that, name, data);", "+    ", "+    if (sd != null) { // We have a symbol data to work with, so visit the body and augment", "+      that.getBody().visit(new ClassBodyIntermediateVisitor(sd, ", "+                                                            _file, ", "+                                                            _package,", "+                                                            _importedFiles, ", "+                                                            _importedPackages, ", "+                                                            _classNamesInThisFile, ", "+                                                            continuations));", "+      ", "+      createAccessors(sd, _file);", "+      createToString(sd);", "+      createHashCode(sd);", "+      createEquals(sd);", "+    }", "+    // IMPORTANT: error message if sd is null?", "+    // Inner classes are not entered in _classesToBeParsed since they are parsed when their outer classes are parsed.", "+    ", "+    forInnerClassDefOnly(that);", "-  /**Do not allow inner classes at the Intermediate Level.*/", "-  public Void forInnerClassDefDoFirst(InnerClassDef that) {", "-    _addError(\"Inner classes cannot be used at the Intermediate level\", that);", "-    return null;"]}], "num": 19208}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92f278db412da13e64e7b440af72d0d4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a132b955afc69a863e4b32a28b3fd3dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public Object visit(ArrayInitializer node)", "signatureAfterChange": "     public Node visit(ArrayInitializer node)", "diff": ["-    public Object visit(ArrayInitializer node) {", "-      LinkedList cells = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getCells().iterator();", "+    public Node visit(ArrayInitializer node) {", "+      LinkedList<Expression> cells = new LinkedList<Expression>(); // Add parameterization <Node>.", "+      Iterator<Expression> it = node.getCells().iterator();", "-        cells.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+        cells.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa8db6c67572f8196d253393b1c22a1a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public Object visit(ArrayInitializer node)", "signatureAfterChange": "     public Node visit(ArrayInitializer node)", "diff": ["-    public Object visit(ArrayInitializer node) {", "-      LinkedList cells = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getCells().iterator();", "+    public Node visit(ArrayInitializer node) {", "+      LinkedList<Expression> cells = new LinkedList<Expression>(); // Add parameterization <Node>.", "+      Iterator<Expression> it = node.getCells().iterator();", "-        cells.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+        cells.add((Expression)it.next().acceptVisitor(this));"]}], "num": 26197}
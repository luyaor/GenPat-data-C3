{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cf161d50d01d3b8bc87f71517cf4384", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57d29233fa35fe4927147a7717371fd8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/TreeClassInfo.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "         public Object visit(MethodDeclaration node)", "signatureAfterChange": "     public Void visit(MethodDeclaration node)", "diff": ["+    public Void visit(MethodDeclaration node) {", "+      List<MethodInfo> l = methods.get(node.getName());", "+      if (l == null) {", "+        l = new LinkedList<MethodInfo>();", "+      }", "+      ", "+      l.add(new TreeMethodInfo(node, classFinder, TreeClassInfo.this));", "+      methods.put(node.getName(), l);", "+      methodCount++;", "+      return null;", "-         */", "-        public Object visit(MethodDeclaration node) {", "-\t    List l = (List)methods.get(node.getName());", "-\t    if (l == null) {", "-\t\tl = new LinkedList();", "-\t    }", "-", "-\t    l.add(new TreeMethodInfo(node, classFinder, TreeClassInfo.this));", "-            methods.put(node.getName(), l);", "-\t    methodCount++;", "-            return null;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ff9c3dda48bbc2372344811a729fdc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object interpret(List statements) throws InterpreterException", "signatureAfterChange": "   public Object interpret(List<Node> statements) throws InterpreterException", "diff": ["+   */", "+  public Object interpret(List<Node> statements) throws InterpreterException {", "+    try {", "+      ListIterator<Node> it = statements.listIterator();", "+      Object result = null;", "+      ", "+      while (it.hasNext()) {", "+        Node n = it.next();", "+        EvaluationVisitor ev = new EvaluationVisitor(evalVisitorContext);", "+        result = n.acceptVisitor(ev);", "+      }", "+      ", "+      return result;", "+    } catch (ExecutionError e) {", "+      throw new InterpreterException(e);", "+    } catch (ParseError e) {", "+      throw new InterpreterException(e);", "+    }", "+  }", "-     */", "-    public Object interpret(List statements) throws InterpreterException {", "-\t    ListIterator it = statements.listIterator();", "-            Object   result = null;", "-", "-            while (it.hasNext()) {", "-                Node n = (Node)it.next();", "-                Visitor v = new EvaluationVisitor(evalVisitorContext);", "-                result = n.acceptVisitor(v);", "-", "-            return result;", "-        } catch (ExecutionError e) {", "-            throw new InterpreterException(e);", "-        } catch (ParseError e) {", "-\t    throw new InterpreterException(e);", "-    }"]}], "num": 1817}
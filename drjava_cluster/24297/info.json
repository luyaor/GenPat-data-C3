{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86e53ee1e5e355a2ddbaa8d8b1155cf7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f8cdb245c9f636cbca2d0723d93914", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void insertUpdate(final DocumentEvent e)", "signatureAfterChange": "     public void insertUpdate(final DocumentEvent e)", "diff": ["-      /* Update caret position when text is inserted at end of document.  Fixes (?) bug #1571405.  The promptPos is", "+      /* Update caret position when text is inserted in the document.  Fixes (?) bug #1571405.  The promptPos is", "+      int insertPos = e.getOffset();", "+      int insertLen = e.getLength();", "-      final int newPos = getNewCaretPos(e, doc);", "+      int promptPos = doc.getPromptPos();", "+      if (EventQueue.isDispatchThread())  { // insert was generated by keyboard input; do not move caret", "+        _cachedCaretPos = insertPos + insertLen;", "+        _cachedPromptPos = promptPos;", "+//        EventQueue.invokeLater(new Runnable() { public void run() { _pane.setCaretPos(insertEnd); } });", "+        return;", "+      }", "+      ", "+      final int newPos = getNewCaretPos(doc, promptPos, insertPos, insertLen);", "-//      System.err.println(\"Setting cached caretpos to \" + newPos);  // uncommented this creates deadlock!", "-      // Update the caret position as part of the insertion if possible (running in event thread)", "-//      if (EventQueue.isDispatchThread()) _pane.setCaretPosition(newPos);", "-//      // Otherwise update it with a length filter in case the document has been shortened (as in resetInteractions)", "-//      else ", "-      EventQueue.invokeLater(new Runnable() { public void run() { _pane.setCaretPos(newPos); } });", "+      _cachedPromptPos = promptPos;", "+//      System.err.println(\"Setting cached caretpos to \" + newPos); ", "+      /* Immediately update the caret position as part of the insertion, ignoring event thread only convention.  As", "+       * soon as the exclusive ReadLock is dropped on exiting this listener, a background thread running in the ", "+       * interpreter could write to the console, which is echoed in the interactions pane.  If the caret position is", "+       * not immediately updated, there could be a race because keyboard input events may already be queued in the", "+       * event queue. */", "+      _pane.setCaretPos(newPos); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac763452c6b57eae9467f1073acae059", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "6b9d21c46904df78c4c42153380af1416ff61bab", "commitAfterChange": "7ee1de808f3f616f32f05bbcf5fc74efb00c8d4a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void insertUpdate(final DocumentEvent e)", "signatureAfterChange": "     public void insertUpdate(final DocumentEvent e)", "diff": ["-          ConsoleDocument doc = getConsoleDoc();", "-          final int newPos = getNewCaretPos(e, doc);", "-          // Update the caret position as part of the insertion if possible (running in event thread)", "-          if (EventQueue.isDispatchThread()) _pane.setCaretPosition(newPos);", "-          // Otherwise update it with a length filter in case the document has been shortened (as in resetInteractions)", "-          else EventQueue.invokeLater(new Runnable() { public void run() { _pane.setCaretPos(newPos); } });", "+      ConsoleDocument doc = getConsoleDoc();", "+      final int newPos = getNewCaretPos(e, doc);", "+      _cachedCaretPos = newPos;", "+//      System.err.println(\"Setting cached caretpos to \" + newPos);  // uncommented this creates deadlock!", "+      // Update the caret position as part of the insertion if possible (running in event thread)", "+//      if (EventQueue.isDispatchThread()) _pane.setCaretPosition(newPos);", "+//      // Otherwise update it with a length filter in case the document has been shortened (as in resetInteractions)", "+//      else ", "+      EventQueue.invokeLater(new Runnable() { public void run() { _pane.setCaretPos(newPos); } });"]}], "num": 24297}
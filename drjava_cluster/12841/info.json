{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcbb0d96f6345fccd6dc259fc6206397", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e755a2b7eb57bce0d793d9e56272dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   @Override public TypeContext visit(SwitchStatement node)", "signatureAfterChange": "   @Override public TypeContext visit(SwitchStatement node)", "diff": ["-        if (!hasValue(bk) || getValue(bk) == null) {", "-          throw new ExecutionError(\"invalid.constant\", bk);", "+        Expression exp = bk.getExpression();", "+        if (!hasValue(exp) || getValue(exp) == null) {", "+          throw new ExecutionError(\"invalid.constant\", exp);", "-        if (!ts.isAssignable(t, getType(bk), getValue(bk))) {", "-          setErrorStrings(node, ts.userRepresentation(getType(bk)));", "-          throw new ExecutionError(\"switch.label.type\", bk);", "+        if (!ts.isAssignable(t, getType(exp), getValue(exp))) {", "+          setErrorStrings(node, ts.userRepresentation(getType(exp)));", "+          throw new ExecutionError(\"switch.label.type\", exp);", "-        if (values.contains(getValue(bk))) { ", "+        if (values.contains(getValue(exp))) { ", "-        values.add(getValue(bk));", "+        values.add(getValue(exp));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b71bc91cd3b4792acb761e6f2d873f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "8c59b6d09078dbcf117925bc686cacee46ca999f", "commitAfterChange": "f8e25255cc9b1c52f4c1874e15c63efdafe32091", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     @Override public Type visit(ReferenceTypeName node)", "signatureAfterChange": "     @Override public Type visit(ReferenceTypeName node)", "diff": ["-        catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "+        catch (AmbiguousNameException e) {", "+          setErrorStrings(node, name);", "+          throw new ExecutionError(\"ambiguous.name\", node);", "+        }", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, name);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }", "+        String nextId = ids.next().image();", "-          ClassType memberType = ts.lookupClass(t, ids.next().image(), IterUtil.<Type>empty(), context.accessModule());", "+          ClassType memberType = ts.lookupClass(t, nextId, IterUtil.<Type>empty(), context.accessModule());", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, nextId);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22b7de15d66ba778f9f43dcfb4acd07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "8c59b6d09078dbcf117925bc686cacee46ca999f", "commitAfterChange": "f8e25255cc9b1c52f4c1874e15c63efdafe32091", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     @Override public Type visit(GenericReferenceTypeName node)", "signatureAfterChange": "     @Override public Type visit(GenericReferenceTypeName node)", "diff": ["-        catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "+        catch (AmbiguousNameException e) {", "+          setErrorStrings(node, name);", "+          throw new ExecutionError(\"ambiguous.name\", node);", "+        }", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, name);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }", "+        String nextId = ids.next().image();", "-          ClassType memberType = ts.lookupClass(t, ids.next().image(), targs, context.accessModule());", "+          ClassType memberType = ts.lookupClass(t, nextId, targs, context.accessModule());", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, nextId);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }"]}], "num": 12841}
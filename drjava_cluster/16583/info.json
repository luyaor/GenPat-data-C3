{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5973cdc212969e0fffb7612412192cb4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "242d8bfd2925386c2f7d6a57e07ab0cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public String getEnclosingClassName(final int pos, final boolean qual) throws BadLocationException,      ClassNameNotFoundException", "signatureAfterChange": "   public String _getEnclosingClassName(final int pos, final boolean qual) throws BadLocationException,      ClassNameNotFoundException", "diff": ["-  public String getEnclosingClassName(final int pos, final boolean qual) throws BadLocationException, ", "+    */", "+  public String _getEnclosingClassName(final int pos, final boolean qual) throws BadLocationException, ", "-//    boolean oldLog = log; log = false;", "+    ", "+    assert isReadLocked();", "-    acquireReadLock();", "-    try {", "-      ", "-      final String text = getText(0, pos);  ", "-      ", "-      int curPos = pos;", "-      ", "-      do {", "+    final String text = getText(0, pos);  ", "+    ", "+    int curPos = pos;", "+    ", "+    do {", "-        ", "+      ", "-        ", "-        curPos = findPrevEnclosingBrace(curPos, '{', '}');", "-        if (curPos == -1) { break; }", "-        int classPos = _findPrevKeyword(text, \"class\", curPos);", "-        int interPos = _findPrevKeyword(text, \"interface\", curPos);", "-        int otherPos = findPrevDelimiter(curPos, delims);", "-        int newPos = -1;", "-        // see if there's a ) closer by", "-        int closeParenPos = findPrevNonWSCharPos(curPos);", "-        if (closeParenPos != -1 && text.charAt(closeParenPos) == ')') {", "-          // yes, find the matching (", "-          int openParenPos = findPrevEnclosingBrace(closeParenPos, '(', ')');", "-          if (openParenPos != -1 && text.charAt(openParenPos) == '(') {", "-            // this might be an inner class", "-            newPos = _findPrevKeyword(text, \"new\", openParenPos);", "+      ", "+      curPos = _findPrevEnclosingBrace(curPos, '{', '}');", "+      if (curPos == -1) { break; }", "+      int classPos = _findPrevKeyword(text, \"class\", curPos);", "+      int interPos = _findPrevKeyword(text, \"interface\", curPos);", "+      int otherPos = _findPrevDelimiter(curPos, delims);", "+      int newPos = -1;", "+      // see if there's a ) closer by", "+      int closeParenPos = findPrevNonWSCharPos(curPos);", "+      if (closeParenPos != -1 && text.charAt(closeParenPos) == ')') {", "+        // yes, find the matching (", "+        int openParenPos = _findPrevEnclosingBrace(closeParenPos, '(', ')');", "+        if (openParenPos != -1 && text.charAt(openParenPos) == '(') {", "+          // this might be an inner class", "+          newPos = _findPrevKeyword(text, \"new\", openParenPos);", "-            if (! _isAnonymousInnerClass(newPos, curPos)) {", "-              // not an anonymous inner class", "-              newPos = -1;", "-            }", "+          if (! _isAnonymousInnerClass(newPos, curPos)) {", "+            // not an anonymous inner class", "+            newPos = -1;", "+      }", "-        while (classPos != -1 || interPos != -1 || newPos != -1) {", "-          if (newPos != -1) {", "+      while (classPos != -1 || interPos != -1 || newPos != -1) {", "+        if (newPos != -1) {", "-            classPos = -1;", "-            interPos = -1;", "-            break;", "-          }", "-          else if (otherPos > classPos && otherPos > interPos) {", "-            if (text.charAt(otherPos) != '{' || text.charAt(otherPos) != '}') ++otherPos;", "-            curPos = findPrevEnclosingBrace(otherPos, '{', '}');", "-            classPos = _findPrevKeyword(text, \"class\", curPos);", "-            interPos = _findPrevKeyword(text, \"interface\", curPos);", "-            otherPos = findPrevDelimiter(curPos, delims);", "-            newPos = -1;", "-            // see if there's a ) closer by", "-            closeParenPos = findPrevNonWSCharPos(curPos);", "+          classPos = -1;", "+          interPos = -1;", "+          break;", "+        }", "+        else if (otherPos > classPos && otherPos > interPos) {", "+          if (text.charAt(otherPos) != '{' || text.charAt(otherPos) != '}') ++otherPos;", "+          curPos = _findPrevEnclosingBrace(otherPos, '{', '}');", "+          classPos = _findPrevKeyword(text, \"class\", curPos);", "+          interPos = _findPrevKeyword(text, \"interface\", curPos);", "+          otherPos = _findPrevDelimiter(curPos, delims);", "+          newPos = -1;", "+          // see if there's a ) closer by", "+          closeParenPos = findPrevNonWSCharPos(curPos);", "-            if (closeParenPos != -1 && text.charAt(closeParenPos) == ')') {", "-              // yes, find the matching (", "-              int openParenPos = findPrevEnclosingBrace(closeParenPos, '(', ')');", "-              if (openParenPos != -1 && text.charAt(openParenPos) == '(') {", "-                // this might be an inner class", "-                newPos = _findPrevKeyword(text, \"new\", openParenPos);", "+          if (closeParenPos != -1 && text.charAt(closeParenPos) == ')') {", "+            // yes, find the matching (", "+            int openParenPos = _findPrevEnclosingBrace(closeParenPos, '(', ')');", "+            if (openParenPos != -1 && text.charAt(openParenPos) == '(') {", "+              // this might be an inner class", "+              newPos = _findPrevKeyword(text, \"new\", openParenPos);", "-                if (! _isAnonymousInnerClass(newPos, curPos)) newPos = -1;", "-              }", "+              if (! _isAnonymousInnerClass(newPos, curPos)) newPos = -1;", "+          }", "-          }", "-          else {", "-            // either class or interface found first            ", "-            curPos = Math.max(classPos, Math.max(interPos, newPos));", "-            break;", "-          }", "+        else {", "+          // either class or interface found first            ", "+          curPos = Math.max(classPos, Math.max(interPos, newPos));", "+          break;", "+        }", "+      }", "+      ", "+      if (classPos != -1 || interPos != -1) {", "+        if (classPos > interPos) curPos += \"class\".length();  // class found first", "+        else curPos += \"interface\".length();                  // interface found first", "-        if (classPos != -1 || interPos != -1) {", "-          if (classPos > interPos) curPos += \"class\".length();  // class found first", "-          else curPos += \"interface\".length();                  // interface found first", "-          ", "-          int nameStart = getFirstNonWSCharPos(curPos);", "-          if (nameStart==-1) { throw new ClassNameNotFoundException(\"Cannot determine enclosing class name\"); }", "-          int nameEnd = nameStart + 1;", "-          while (nameEnd < text.length()) {", "-            if (! Character.isJavaIdentifierPart(text.charAt(nameEnd)) && text.charAt(nameEnd) != '.') break;", "-            ++nameEnd;", "-          }", "-          name = text.substring(nameStart,nameEnd) + '$' + name;", "+        int nameStart = _getFirstNonWSCharPos(curPos);", "+        if (nameStart==-1) { throw new ClassNameNotFoundException(\"Cannot determine enclosing class name\"); }", "+        int nameEnd = nameStart + 1;", "+        while (nameEnd < text.length()) {", "+          if (! Character.isJavaIdentifierPart(text.charAt(nameEnd)) && text.charAt(nameEnd) != '.') break;", "+          ++nameEnd;", "-        else if (newPos != -1) {", "-          name = String.valueOf(_getAnonymousInnerClassIndex(curPos)) + \"$\" + name;", "-          curPos = newPos;", "-        }", "-        else break; // neither class nor interface found (exiting loop if qual == true)", "-      } while(qual);", "-    }", "-    finally { releaseReadLock(); }", "+        name = text.substring(nameStart,nameEnd) + '$' + name;", "+      }", "+      else if (newPos != -1) {", "+        name = String.valueOf(_getAnonymousInnerClassIndex(curPos)) + \"$\" + name;", "+        curPos = newPos;", "+      }", "+      else break; // neither class nor interface found (exiting loop if qual == true)", "+    } while(qual);", "+//    }", "+//    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2453beadeff536f583ee30e1c53994f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public String _getEnclosingClassName(final int pos, final boolean qual) throws BadLocationException,      ClassNameNotFoundException", "signatureAfterChange": "   public String _getEnclosingClassName(final int pos, final boolean qual) throws BadLocationException,      ClassNameNotFoundException", "diff": ["-      curPos = _findPrevEnclosingBrace(curPos, '{', '}');", "+      curPos = findPrevEnclosingBrace(curPos, '{', '}');", "-      int otherPos = _findPrevDelimiter(curPos, delims);", "+      int otherPos = findPrevDelimiter(curPos, delims);", "-        int openParenPos = _findPrevEnclosingBrace(closeParenPos, '(', ')');", "+        int openParenPos = findPrevEnclosingBrace(closeParenPos, '(', ')');", "-          curPos = _findPrevEnclosingBrace(otherPos, '{', '}');", "+          curPos = findPrevEnclosingBrace(otherPos, '{', '}');", "-          otherPos = _findPrevDelimiter(curPos, delims);", "+          otherPos = findPrevDelimiter(curPos, delims);", "-            int openParenPos = _findPrevEnclosingBrace(closeParenPos, '(', ')');", "+            int openParenPos = findPrevEnclosingBrace(closeParenPos, '(', ')');", "-        int nameStart = _getFirstNonWSCharPos(curPos);", "+        int nameStart = getFirstNonWSCharPos(curPos);"]}], "num": 16583}
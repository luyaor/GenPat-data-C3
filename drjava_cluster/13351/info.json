{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "088cbaf9c28423c70a46011b9951db3d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e23de26082794f77a5575020c79810b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "   protected String interpret(String input) throws EditDocumentException", "signatureAfterChange": "   protected String interpret(final String input) throws EditDocumentException", "diff": ["-  protected String interpret(String input) throws EditDocumentException {", "+  protected String interpret(final String input) throws EditDocumentException {", "-    InteractionsDocument interactionsDoc = _model.getInteractionsDocument();", "-    Utilities.clearEventQueue();", "-    ", "-    interactionsDoc.setInProgress(false);  // for some reason, the inProgress state can be true when interpret is invoked", "-    interactionsDoc.append(input, InteractionsDocument.DEFAULT_STYLE);", "-    ", "-    Utilities.clearEventQueue();", "-", "-    // skip the right length for the newline", "-    final int newLineLen = 1; // Was StringOps.EOL.length(); but Swing uses '\\n' for newLine", "-    final int resultsStartLocation = interactionsDoc.getLength() + newLineLen;", "+    final InteractionsDocument interactionsDoc = _model.getInteractionsDocument();", "-", "+    ", "+    // Set up the interaction", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        interactionsDoc.setInProgress(false);  // for some reason, the inProgress state can be true when interpret is invoked", "+        interactionsDoc.append(input, InteractionsDocument.DEFAULT_STYLE);", "+      }", "+    });", "+    ", "+    // Record information about pending interaction", "+    ", "+    final int newLineLen = 1; // Was StringOps.EOL.length(); but Swing uses '\\n' for newLine", "+    final int resultsStartLocation = interactionsDoc.getLength() + newLineLen;", "+//    Utilities.clearEventQueue();   ", "-    try {", "-      _model.interpretCurrentInteraction();", "-      listener.waitInteractionDone();", "-    }", "+    ", "+    // Execute the interaction", "+    Utilities.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+    ", "+    try { listener.waitInteractionDone(); }", "+", "-    interactionsDoc.acquireReadLock();", "-    try {", "-      final int resultsEndLocation = interactionsDoc.getLength() - newLineLen - interactionsDoc.getPrompt().length();", "-      ", "-      final int resultsLen = resultsEndLocation - resultsStartLocation;", "-      _log.log(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "-      _log.log(\"Contents = '\" + interactionsDoc.getDocText(0, resultsEndLocation+1) + \"'\");", "-      if (resultsLen <= 0) return \"\";", "-      return interactionsDoc.getDocText(resultsStartLocation, resultsLen);", "-    }", "-    finally { interactionsDoc.releaseReadLock(); }", "+//    interactionsDoc.acquireReadLock();", "+//    try {", "+    final int resultsEndLocation = interactionsDoc.getLength() - newLineLen - interactionsDoc.getPrompt().length();", "+    ", "+    final int resultsLen = resultsEndLocation - resultsStartLocation;", "+    _log.log(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "+    _log.log(\"Contents = '\" + interactionsDoc.getDocText(0, resultsEndLocation+1) + \"'\");", "+    if (resultsLen <= 0) return \"\";", "+    return interactionsDoc.getDocText(resultsStartLocation, resultsLen);", "+//    }", "+//    finally { interactionsDoc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee1fd455d9d3ad5d053164ea3b05e252", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 18, "signatureBeforeChange": "   protected String interpret(String input) throws EditDocumentException", "signatureAfterChange": "   protected String interpret(final String input) throws EditDocumentException", "diff": ["-  protected String interpret(String input) throws EditDocumentException {", "+  protected String interpret(final String input) throws EditDocumentException {", "-    InteractionsDocument interactionsDoc = _model.getInteractionsDocument();", "-    Utilities.clearEventQueue();", "-    ", "-    interactionsDoc.setInProgress(false);  // for some reason, the inProgress state can be true when interpret is invoked", "-    interactionsDoc.append(input, InteractionsDocument.DEFAULT_STYLE);", "-    ", "-    Utilities.clearEventQueue();", "-", "-    // skip the right length for the newline", "-    final int newLineLen = 1; // Was StringOps.EOL.length(); but Swing uses '\\n' for newLine", "-    final int resultsStartLocation = interactionsDoc.getLength() + newLineLen;", "+    final InteractionsDocument interactionsDoc = _model.getInteractionsDocument();", "-", "+    ", "+    // Set up the interaction", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        interactionsDoc.setInProgress(false);  // for some reason, the inProgress state can be true when interpret is invoked", "+        interactionsDoc.append(input, InteractionsDocument.DEFAULT_STYLE);", "+      }", "+    });", "+    ", "+    // Record information about pending interaction", "+    ", "+    final int newLineLen = 1; // Was StringOps.EOL.length(); but Swing uses '\\n' for newLine", "+    final int resultsStartLocation = interactionsDoc.getLength() + newLineLen;", "+//    Utilities.clearEventQueue();   ", "-    try {", "-      _model.interpretCurrentInteraction();", "-      listener.waitInteractionDone();", "-    }", "+    ", "+    // Execute the interaction", "+    Utilities.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+    ", "+    try { listener.waitInteractionDone(); }", "+", "-    interactionsDoc.acquireReadLock();", "-    try {", "-      final int resultsEndLocation = interactionsDoc.getLength() - newLineLen - interactionsDoc.getPrompt().length();", "-      ", "-      final int resultsLen = resultsEndLocation - resultsStartLocation;", "-      _log.log(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "-      _log.log(\"Contents = '\" + interactionsDoc.getDocText(0, resultsEndLocation+1) + \"'\");", "-      if (resultsLen <= 0) return \"\";", "-      return interactionsDoc.getDocText(resultsStartLocation, resultsLen);", "-    }", "-    finally { interactionsDoc.releaseReadLock(); }", "+//    interactionsDoc.acquireReadLock();", "+//    try {", "+    final int resultsEndLocation = interactionsDoc.getLength() - newLineLen - interactionsDoc.getPrompt().length();", "+    ", "+    final int resultsLen = resultsEndLocation - resultsStartLocation;", "+    _log.log(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "+    _log.log(\"Contents = '\" + interactionsDoc.getDocText(0, resultsEndLocation+1) + \"'\");", "+    if (resultsLen <= 0) return \"\";", "+    return interactionsDoc.getDocText(resultsStartLocation, resultsLen);", "+//    }", "+//    finally { interactionsDoc.releaseReadLock(); }"]}], "num": 13351}
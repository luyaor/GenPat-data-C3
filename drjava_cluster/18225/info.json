{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e03e72265fc0bafcae855e95cfc672c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7346c2caef116fa6f8c72463ba7067", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": "   protected boolean checkForCyclicInheritance(SymbolData sd, LinkedList<SymbolData> hierarchy, TypeDefBase tdb)", "signatureAfterChange": "   protected boolean checkForCyclicInheritance(SymbolData sd, LinkedList<SymbolData> hierarchy, TypeDefBase tdb)", "diff": ["-    boolean doReturn = checkForCyclicInheritance(sd.getSuperClass(), cloneSDList(hierarchy), tdb);", "-    LinkedList<SymbolData> interfaces = sd.getInterfaces();", "-    for (int i = 0; i < interfaces.size(); i++) {", "-      SymbolData currInterface = interfaces.get(i);", "-      doReturn |= checkForCyclicInheritance(currInterface, cloneSDList(hierarchy), tdb);", "+    LinkedList<SymbolData> clonedHierarchy = cloneSDList(hierarchy);", "+    boolean doReturn = checkForCyclicInheritance(sd.getSuperClass(), clonedHierarchy, tdb);", "+    ", "+    //check the interfaces", "+    for (SymbolData iSD: sd.getInterfaces()) {", "+      doReturn |= checkForCyclicInheritance(iSD, clonedHierarchy, tdb);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b1e1fac484b0262e9cad833207edac4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 98, "signatureBeforeChange": "   public void setInterfaces(LinkedList<SymbolData> interfaces)", "signatureAfterChange": "   public void setInterfaces(ArrayList<SymbolData> interfaces)", "diff": ["-  /**Set the interfaces to be the specified list*/", "-  public void setInterfaces(LinkedList<SymbolData> interfaces) {", "-    _interfaces = interfaces;", "-    for (int i = 0; i<interfaces.size(); i++) {", "-      addEnclosingData(interfaces.get(i));", "+  /**Set the interfaces to be the specified list*/", "+  public void setInterfaces(ArrayList<SymbolData> interfaces) {", "+    assert interfaces != null;", "+    _interfaces = interfaces;", "+    for (SymbolData sd: interfaces) { if (sd != null) addEnclosingData(sd); }", "+  }"]}], "num": 18225}
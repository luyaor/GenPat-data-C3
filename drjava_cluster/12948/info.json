{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c43377ce564515640c56c8d2edabb476", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5a3ed9414608ceece8a8ec57b73cb32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testShouldBeErrors()", "signatureAfterChange": "   public void testShouldBeErrors()", "diff": ["-   */", "+  /** Test a set of files that have various Advanced Level errors.  See the files themselves for a description of the errors. */", "-    directory = new File(directory.getAbsolutePath() + \"/shouldBreak\");", "-    File[] testFiles = directory.listFiles(new FileFilter() {", "+    _log.log(\"Running testShouldBeErrors\");", "+    dir1 = new File(dir1.getAbsolutePath() + \"/shouldBreak\");", "+    File[] testFiles = dir1.listFiles(new FileFilter() {", "-", "-      LanguageLevelConverter llc = new LanguageLevelConverter();", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-      for (int i = 0; i<testFiles.length; i++) {", "-        LanguageLevelVisitor._errorAdded = false;", "-        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "-      }", "+    ", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    for (int i = 0; i<testFiles.length; i++) {", "+      LanguageLevelVisitor._errorAdded = false;", "+      result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+      assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebf3ac327db4ef1bde3132a954ab83cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testNoNullPointer()", "signatureAfterChange": "   public void testNoNullPointer()", "diff": ["-   */", "+    */", "-    directory = new File(directory.getAbsolutePath() + \"/shouldBreak\");", "-    File[] testFiles = directory.listFiles(new FileFilter() {", "+    _log.log(\"Running testNoNullPointer\");", "+    dir1 = new File(dir1.getAbsolutePath() + \"/shouldBreak\");", "+    File[] testFiles = dir1.listFiles(new FileFilter() {", "-", "-      LanguageLevelConverter llc = new LanguageLevelConverter();", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-      for (int i = 0; i<testFiles.length; i++) {", "-        result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+    _log.log(\"testFiles = \" + testFiles);", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    for (int i = 0; i<testFiles.length; i++) {", "+      result = llc.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+      assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());"]}], "num": 12948}
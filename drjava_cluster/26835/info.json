{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ccc75ba1c865bf789cec7e9faed53ac", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c25adfe5626d215b7bd35a4fb64e9a7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public Object visit(BlockStatement node)", "signatureAfterChange": "   public Class visit(BlockStatement node)", "diff": ["-     */", "-    public Object visit(BlockStatement node) {", "-        // Enter a new scope", "-        context.enterScope();", "-", "-        // Do the type checking of the nested statements", "-        checkList(node.getStatements());", "-", "-        // Leave the current scope and store the defined variables", "-        // (a map of String-Class mappings) in the \"variables\" property", "-        node.setProperty(NodeProperties.VARIABLES, context.leaveScope());", "-        ", "-        return null;", "-    }", "+   */", "+  public Class visit(BlockStatement node) {", "+    // Enter a new scope", "+    context.enterScope();", "+    ", "+    // Do the type checking of the nested statements", "+    checkList(node.getStatements());", "+    ", "+    // Leave the current scope and store the defined variables", "+    // (a map of String-Class mappings) in the \"variables\" property", "+    node.setProperty(NodeProperties.VARIABLES, context.leaveScope());", "+    ", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbb5cc9c8f2820b299327dbb2ab40889", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManagerTest.java", "commitBeforeChange": "f86dda75531ffcea84892045ae81ebf50612eb98", "commitAfterChange": "8a127e29dd0d7227ac32633c7c5c2f5db2cf4853", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "             public void testDeclareMemberStaticImport()", "signatureAfterChange": "             public void testDeclareMemberStaticImport()", "diff": ["-    if(TigerUtilities.isTigerEnabled()) {      ", "+    try {      ", "-    else {", "-      //When running 1.4, the methods returned by java.lang.reflect.Class.getMethods() are in the array in reverse order from the way they are returned in 1.5.", "+    catch(AssertionFailedError e){", "+      //When running 1.4 or running in Windows, the methods returned by java.lang.reflect.Class.getMethods() ", "+      //are in the array in reverse order from the way they are returned in 1.5 in Linux. ", "-    if(TigerUtilities.isTigerEnabled()) {", "+    try{", "-    else {", "-      //When running 1.4, the methods returned by java.lang.reflect.Class.getMethods() are in the array in reverse order from the way they are returned in 1.5.", "+    catch(AssertionFailedError e){", "+      //When running 1.4 or running in Windows, the methods returned by java.lang.reflect.Class.getMethods() ", "+      //are in the array in reverse order from the way they are returned in 1.5 in Linux. "]}], "num": 26835}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b98715dd2fcd10a539817c2e56854bf4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7730bdc0d2aaa5131069d53e4917a8a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/MatchWholeWordState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["-        if (!_searchBackwards) {", "-          setPosition(getCurrentOffset() + wordLength);", "-        }", "-        else {", "-          setPosition(getCurrentOffset() - wordLength);", "-        }", "+        if (!_searchBackwards) setPosition(getCurrentOffset() + wordLength);", "+        else setPosition(getCurrentOffset() - wordLength);", "-", "+      String searchDocument;", "-      String searchDocument = _doc.getText(0, _doc.getLength());", "+      _doc.acquireReadLock();", "+      try { searchDocument = _doc.getText(0, _doc.getLength()); }", "+      finally { _doc.releaseReadLock(); }", "-      if (indexOf(searchDocument, _findWord) != -1) {", "-        return findNextHelp(searchDocument, searchOriginLocation);", "-      }", "-      else {", "-        return new FindResult(_doc, -1, true);", "-      }", "+      if (indexOf(searchDocument, _findWord) == -1) return new FindResult(_doc, -1, true);", "+      return findNextHelp(searchDocument, searchOriginLocation);", "-    catch (BadLocationException e) {", "-      throw new RuntimeException(e.getMessage());", "-    }", "+    catch (BadLocationException e) { throw new RuntimeException(e.getMessage()); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba8f3d141d99beb46ed066e94a0ef419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/AFindReplaceMachineState.java", "commitBeforeChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "commitAfterChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public boolean replaceCurrent()", "signatureAfterChange": "   public boolean replaceCurrent()", "diff": ["-   */", "+  /** If we're on a match for the find word, replace it with the replace word. */", "-        if (!_searchBackwards) {", "-          position -= _findWord.length();", "-        }", "+        if (!_searchBackwards) position -= _findWord.length();", "-        if (position == 0) {", "-          atStart = true;", "-        }", "+        if (position == 0) atStart = true;", "-        if (atStart && !_searchBackwards) {", "-          setPosition(_replaceWord.length());", "-        }", "-        if (!atStart && _searchBackwards) {", "-          setPosition(getCurrentOffset() - _replaceWord.length());", "-        }", "+        if (atStart && !_searchBackwards) setPosition(_replaceWord.length());", "+        else if (!atStart && _searchBackwards) setPosition(getCurrentOffset() - _replaceWord.length());", "-      else {", "-        return false;", "-      }", "+      return false;", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}], "num": 11797}
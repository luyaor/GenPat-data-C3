{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3aed0be4fc57a2728ac172f92fc0e891", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a377363fb2807ad6bcfd6832b98c09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "b97db40bea671594a37f7cabd8d363cab45e0154", "commitAfterChange": "fab79f2f445044e7a60a89e228042164713428d9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public int getCurrentLine()", "signatureAfterChange": "   public int getCurrentLine()", "diff": ["-    // don't know if this does anything.", "-    // if (_cachedNextLineLoc == -1 ){ initNextLineNum(); }", "+    if ( _cachedLocation > getLength() ){ ", "+      // we can't know the last line number after the delete.", "+      // starting over.", "+      _cachedLocation = 0;", "+      _cachedLineNum = 1;", "+    }", "+    if ( _cachedNextLineLoc > getLength() ){", "+      _cachedNextLineLoc = -1;", "+    }", "-    if( _cachedPrevLineLoc < here && here < _cachedNextLineLoc ){ ", "-      return _cachedLineNum;", "-    }", "+    if( ! ( _cachedPrevLineLoc < here && here < _cachedNextLineLoc ) ){ ", "-    // test to see which is easier: starting from the top", "-    // or calculating relatively.", "-    if( (_cachedLocation - here > here ) ||", "-        ( here <= getFirstNewLine() ) ){ ", "-      _cachedLineNum = getLineFromScratch(); ", "-    }", "-    else {", "-      int lineOffset = getRelativeLine(here);", "+      // this if improves performance when moving from the", "+      // end of the document to the beginnning.", "+      // in essence, it calculates the line number from", "+      // scratch", "+      if( _cachedLocation - here > here ){", "+        _cachedLocation = 0;", "+        _cachedLineNum = 1;", "+      }        ", "+      int lineOffset = _getRelativeLine();", "+      ", "-    _cachedNextLineLoc = here + _reduced.getDistToNextNewline();", "+    _cachedNextLineLoc = getLineEndPos(here);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a41584c1026be51b2cc6cfdb0e8d892", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public synchronized int findCharOnLine(int pos, char findChar)", "signatureAfterChange": "   public int findCharOnLine(int pos, char findChar)", "diff": ["-  public synchronized int findCharOnLine(int pos, char findChar) {", "-    throwErrorHuh();", "+  public int findCharOnLine(int pos, char findChar) {", "+    // throwErrorHuh();", "-    int here = _currentLocation;", "-    int lineStart = this.getLineStartPos(pos);", "-    int lineEnd = this.getLineEndPos(pos);", "-    String lineText;", "+    int i, result;", "-    try {", "-      lineText = this.getText(lineStart, lineEnd - lineStart);", "-    } catch(BadLocationException e) {", "-      // Should not be here", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    int i = lineText.indexOf(findChar, 0);", "-    ", "-    // Move to start of line", "-    /*", "-     _reduced.move(lineStart - here);", "-     int reducedPos = lineStart;", "-     int prevI = 0;", "-     */", "-    ", "-    while(i != -1) {", "-      // Move reduced model to walker's location", "-      int matchIndex = i + lineStart;", "-      _reduced.move(matchIndex - here);", "-      //int dist = i - prevI;", "-      //_reduced.move(dist);", "-      //reducedPos = reducedPos + dist;", "+    synchronized (_reduced) {", "+      int here = _currentLocation;", "+      int lineStart = this.getLineStartPos(pos);", "+      int lineEnd = this.getLineEndPos(pos);", "+      String lineText;", "-      // Check if matching char is in comment or quotes", "-      if (!_reduced.getStateAtCurrent().equals(ReducedModelState.FREE)) {", "-        // Ignore matching char", "-      } else {", "-        // Return position of matching char", "-        //_reduced.move(here - reducedPos);", "-        _reduced.move(here - matchIndex);", "-        _storeInCache(key, new Integer(matchIndex));", "-        return matchIndex;", "+      try {", "+        lineText = this.getText(lineStart, lineEnd - lineStart);", "+      } catch(BadLocationException e) {", "+        // Should not be here", "+        throw new UnexpectedException(e);", "-      _reduced.move(here - matchIndex);", "-      //prevI = i;", "-      i = lineText.indexOf(findChar, i+1);", "+      i = lineText.indexOf(findChar, 0);", "+      ", "+      int matchIndex = 0;  // dummy value required by javac; program behavior does not depend on this value.", "+      ", "+      while (i != -1) {", "+        /* Invariant: reduced model points to original location (here), lineText[0:i-1] does not contain valid findChar */", "+        // Move reduced model to location of ith char", "+        matchIndex = i + lineStart;", "+        _reduced.move(matchIndex - here);", "+        ", "+        // Check if matching char is in comment or quotes", "+        if (_reduced.getStateAtCurrent().equals(ReducedModelState.FREE)) {", "+          // Found matching char", "+          _reduced.move(here - matchIndex);  // Restore reduced model", "+          break;", "+        } ", "+        ", "+        // matching character is not valid, try again", "+        _reduced.move(here - matchIndex);  // Restore reduced model", "+        i = lineText.indexOf(findChar, i+1);", "+      }", "+      ", "+      result = matchIndex;", "+      if (i == -1) result = ERROR_INDEX;", "-    ", "-    //_reduced.move(here - reducedPos);", "-    _storeInCache(key, new Integer(ERROR_INDEX));", "-    return ERROR_INDEX;", "+    _storeInCache(key, new Integer(result));", "+    return result;"]}], "num": 2907}
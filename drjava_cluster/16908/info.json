{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "201a26fb16dcc5df9e3302fac652bc22", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4f38c5a155ada80aaa0d1c4847a7087", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "36e86519fec0be37255f092c8ef3144003d9d925", "commitAfterChange": "24a4bd9b5af47fdf2b927852ef0f4a564c73861b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r   \r   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "signatureAfterChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "diff": ["-  \r", "-  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model) {\r", "-    FullVersion version = guessVersion(f);\r", "-    CompilerInterface compiler = NoCompilerAvailable.ONLY;\r", "-    Debugger debugger = NoDebuggerAvailable.ONLY;\r", "-    JavadocModel javadoc = new NoJavadocAvailable(model);\r", "-    \r", "-    if (JavaVersion.CURRENT.supports(version.majorVersion())) {\r", "-      // block tools.jar classes, so that references don't point to a different version of the classes\r", "-      ClassLoader loader = new ShadowingClassLoader(JarJDKToolsLibrary.class.getClassLoader(), TOOLS_PACKAGES);\r", "-      Iterable<File> path = IterUtil.singleton(IOUtil.attemptAbsoluteFile(f));\r", "-      \r", "-      String compilerAdapter = adapterForCompiler(version.majorVersion());\r", "-      if (compilerAdapter != null) {\r", "-        List<File> bootClassPath = null;\r", "-        if (f.getName().equals(\"classes.jar\")) { bootClassPath = Arrays.asList(f); }\r", "-        else if (f.getName().equals(\"tools.jar\")) {\r", "-          File rtJar = new File(f.getParentFile(), \"../jre/lib/rt.jar\");\r", "-          if (!rtJar.exists()) { rtJar = new File(f.getParentFile(), \"rt.jar\"); }\r", "-          if (rtJar.exists()) {\r", "-            rtJar = IOUtil.attemptCanonicalFile(rtJar);\r", "-            bootClassPath = Arrays.asList(rtJar);\r", "-          }\r", "-        }\r", "-        try {\r", "-          Class[] sig = new Class[]{ FullVersion.class, String.class, List.class };\r", "-          Object[] args = new Object[]{ version, f.toString(), bootClassPath };\r", "-          CompilerInterface attempt = (CompilerInterface) ReflectUtil.loadLibraryAdapter(loader, path, compilerAdapter, \r", "-                                                                                         sig, args);\r", "-          if (attempt.isAvailable()) { compiler = attempt; }\r", "-        }\r", "-        catch (ReflectException e) { /* can't load */ }\r", "-        catch (LinkageError e) { /* can't load */ }\r", "-      }\r", "-      \r", "-      String debuggerAdapter = adapterForDebugger(version.majorVersion());\r", "-      String debuggerPackage = \"edu.rice.cs.drjava.model.debug.jpda\";\r", "-      if (debuggerAdapter != null) {\r", "-        try {\r", "-          Class[] sig = new Class[]{ GlobalModel.class };\r", "-          // can't use loadLibraryAdapter because we need to preempt the whole package\r", "-          ClassLoader debugLoader = new PreemptingClassLoader(new PathClassLoader(loader, path), debuggerPackage);\r", "-          Debugger attempt = (Debugger) ReflectUtil.loadObject(debugLoader, debuggerAdapter, sig, model);        \r", "-          if (attempt.isAvailable()) { debugger = attempt; }\r", "-        }\r", "-        catch (ReflectException e) { /* can't load */ }\r", "-        catch (LinkageError e) { /* can't load */ }\r", "-      }\r", "-      \r", "-      try {\r", "-        new PathClassLoader(loader, path).loadClass(\"com.sun.tools.javadoc.Main\");\r", "-        File bin = new File(f.getParentFile(), \"../bin\");\r", "-        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(f.getParentFile(), \"../Home/bin\"); }\r", "-        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(System.getProperty(\"java.home\", f.getParent())); }\r", "-        javadoc = new DefaultJavadocModel(model, bin, path);\r", "-      }\r", "-      catch (ClassNotFoundException e) { /* can't load */ }\r", "-      catch (LinkageError e) { /* can't load (probably not necessary, but might as well catch it) */ }\r", "-        \r", "-    }\r", "-    \r", "-    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc);\r", "-  }\r", "+  /** Create a JarJDKToolsLibrary from a specific {@code \"tools.jar\"} or {@code \"classes.jar\"} file. */", "+  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model) {", "+    FullVersion version = guessVersion(f);", "+    CompilerInterface compiler = NoCompilerAvailable.ONLY;", "+    Debugger debugger = NoDebuggerAvailable.ONLY;", "+    JavadocModel javadoc = new NoJavadocAvailable(model);", "+    ", "+    // We can't execute code that was possibly compiled for a later Java API version.", "+    if (JavaVersion.CURRENT.supports(version.majorVersion())) {", "+      // block tools.jar classes, so that references don't point to a different version of the classes", "+      ClassLoader loader = new ShadowingClassLoader(JarJDKToolsLibrary.class.getClassLoader(), TOOLS_PACKAGES);", "+      Iterable<File> path = IterUtil.singleton(IOUtil.attemptAbsoluteFile(f));", "+      ", "+      String compilerAdapter = adapterForCompiler(version.majorVersion());", "+      if (compilerAdapter != null) {", "+        ", "+        // determine boot class path", "+        File libDir = null;", "+        if (f.getName().equals(\"classes.jar\")) { libDir = f.getParentFile(); }", "+        else if (f.getName().equals(\"tools.jar\")) {", "+          File jdkLibDir = f.getParentFile();", "+          if (jdkLibDir != null) {", "+            File jdkRoot = jdkLibDir.getParentFile();", "+            if (jdkRoot != null) {", "+              File jreLibDir = new File(jdkRoot, \"jre/lib\");", "+              if (IOUtil.attemptExists(new File(jreLibDir, \"rt.jar\"))) { libDir = jreLibDir; }", "+            }", "+            if (libDir == null) {", "+              if (IOUtil.attemptExists(new File(jdkLibDir, \"rt.jar\"))) { libDir = jdkLibDir; }", "+            }", "+          }", "+        }", "+        List<File> bootClassPath = null; // null defers to the compiler's default behavior", "+        if (libDir != null) {", "+          File[] jars = IOUtil.attemptListFiles(libDir, IOUtil.extensionFileFilter(\"jar\"));", "+          if (jars != null) { bootClassPath = Arrays.asList(jars); }", "+        }", "+", "+        try {", "+          Class[] sig = new Class[]{ FullVersion.class, String.class, List.class };", "+          Object[] args = new Object[]{ version, f.toString(), bootClassPath };", "+          CompilerInterface attempt = (CompilerInterface) ReflectUtil.loadLibraryAdapter(loader, path, compilerAdapter, ", "+                                                                                         sig, args);", "+          if (attempt.isAvailable()) { compiler = attempt; }", "+        }", "+        catch (ReflectException e) { /* can't load */ }", "+        catch (LinkageError e) { /* can't load */ }", "+      }", "+      ", "+      String debuggerAdapter = adapterForDebugger(version.majorVersion());", "+      String debuggerPackage = \"edu.rice.cs.drjava.model.debug.jpda\";", "+      if (debuggerAdapter != null) {", "+        try {", "+          Class[] sig = new Class[]{ GlobalModel.class };", "+          // can't use loadLibraryAdapter because we need to preempt the whole package", "+          ClassLoader debugLoader = new PreemptingClassLoader(new PathClassLoader(loader, path), debuggerPackage);", "+          Debugger attempt = (Debugger) ReflectUtil.loadObject(debugLoader, debuggerAdapter, sig, model);        ", "+          if (attempt.isAvailable()) { debugger = attempt; }", "+        }", "+        catch (ReflectException e) { /* can't load */ }", "+        catch (LinkageError e) { /* can't load */ }", "+      }", "+      ", "+      try {", "+        new PathClassLoader(loader, path).loadClass(\"com.sun.tools.javadoc.Main\");", "+        File bin = new File(f.getParentFile(), \"../bin\");", "+        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(f.getParentFile(), \"../Home/bin\"); }", "+        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(System.getProperty(\"java.home\", f.getParent())); }", "+        javadoc = new DefaultJavadocModel(model, bin, path);", "+      }", "+      catch (ClassNotFoundException e) { /* can't load */ }", "+      catch (LinkageError e) { /* can't load (probably not necessary, but might as well catch it) */ }", "+        ", "+    }", "+    ", "+    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac8872ea5261896e79892f060c2ba52b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "2e0841eedc488bc59bd976576cad4ea91d3f46bd", "commitAfterChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public static List<String> commandLineToList(String cmdline)", "signatureAfterChange": "   public static List<String> commandLineToList(String cmdline)", "diff": ["-  /** Convert a command line into a list of individual arguments. */", "+    * It does not allow escaping of the quote characters. */", "-    tok.wordChars(0,255);", "-    tok.whitespaceChars(0,32);", "+    tok.ordinaryChars(0,255);", "+    boolean justEscape = false;", "+    StringBuilder sb = new StringBuilder();", "+          case '\\u001b':", "+            if (justEscape) {", "+              sb.append('\\u001b');", "+              justEscape = false;", "+            }", "+            else {", "+              justEscape = true;", "+            }", "+            break;", "+          case ' ':", "+            if (justEscape) {", "+              sb.append(' ');", "+            }", "+            else {", "+              cmds.add(sb.toString());", "+              sb = new StringBuilder();", "+            }", "+            justEscape = false;", "+            break;", "-            cmds.add(\"\"+((char)next)+tok.sval+((char)next));", "-            break;", "-          case StreamTokenizer.TT_WORD:", "-            cmds.add(tok.sval);", "-            break;", "-          case StreamTokenizer.TT_NUMBER:", "-            cmds.add(\"\"+tok.nval);", "+            sb.append(\"\"+((char)next)+tok.sval+((char)next));", "+            justEscape = false;", "-            return new ArrayList<String>();", "+            sb.append(\"\"+((char)next));", "+            break;", "+      if (sb.length()>0) { cmds.add(sb.toString()); }"]}], "num": 16908}
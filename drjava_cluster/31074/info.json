{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec905db92a3248e538977fb0a1f62ec6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0273123b3dc0b96354728edbd2fd07b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "acb6486cf73ee6fa26fd3913d48fe9f46d7610e4", "commitAfterChange": "c0463418af643463955237ff1428c0079e36defe", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private JPanel _makeClassesPanel()", "signatureAfterChange": "   private JPanel _makeClassesPanel()", "diff": ["-        _okButton.setEnabled(_jarSources.isSelected() || _jarClasses.isSelected());", "+        _okButton.setEnabled(_jarSources.isSelected() || _jarClasses.isSelected() || _jarAll.isSelected());", "+    //Custom Manifest", "+    _editManifest = new JButton(new AbstractAction(\"Edit Manifest\") {", "+      public void actionPerformed(ActionEvent e){", "+        _editManifest();", "+      }", "+    });", "+    _customManifest = new JCheckBox(new AbstractAction(\"Custom Manifest\") {", "+      public void actionPerformed(ActionEvent e){", "+        _toggleCustomManifest();", "+      }", "+    });", "+    gridBagConstraints = new GridBagConstraints();", "+    gridBagConstraints.anchor = GridBagConstraints.WEST;", "+    gridBagConstraints.gridy = 2;", "+    addclasses.add(_customManifest, gridBagConstraints);", "+    ", "+    gridBagConstraints = new GridBagConstraints();", "+    gridBagConstraints.gridx = 0;", "+    gridBagConstraints.gridy = 3;", "+    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;", "+    gridBagConstraints.insets = new Insets(0, 20, 0, 0);", "+    addclasses.add(_editManifest, gridBagConstraints);", "+    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e57c0c8acbbaa92bd8f2762f31a284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-      /**", "+      i++;", "+      //DrJava.consoleOut().println(\"MainJVM: iteration \" + i);", "+      ", "-", "-      _startupInProgress = true;", "-      */", "+      _startupInProgress = true;   ", "+      ", "+      // _model may be null if we're running a test on this", "+      if (_model != null)", "+        _model.interactionsResetting();", "+      ", "-        //DrJava.consoleOut().println(\"In MainJVM: started interpreter jvm\");", "+        //DrJava.consoleOut().println(\"In MainJVM: started interpreter jvm \" +i);", "-        _restartThread = new RestartThread() {", "+        _restartThread = new RestartThread(i) {", "-              //                            status);", "-              if (_shouldReset) {", "-                //DrJava.consoleOut().println(\"I should reset\");", "-                restartInterpreterJVM();", "-                //if (!_isResetting()) {", "-                replCalledSystemExit(status);", "-                //}", "+              //                            status + \", i = \" + j);", "+              synchronized(MainJVM.this) {", "+                if (_shouldReset) {", "+                  //DrJava.consoleOut().println(\"I should reset (thread \" + j + \")\");", "+                  boolean currentlyStarting = _startupInProgress;", "+                  //DrJava.consoleOut().println(\"Currently starting for \" + j + \" = \" + currentlyStarting);", "+                  restartInterpreterJVM();", "+                  if (!currentlyStarting) {", "+                    //DrJava.consoleOut().println(\"Not starting up, so display message, thread \" + j);", "+                    replCalledSystemExit(status);", "+                  }", "+                }", "+              //DrJava.consoleOut().println(\"Thread finished: \" + j);", "-", "-        //DrJava.consoleOut().println(\"In MainJVM: starting thread\");", "+        // If RESET_TIME_OUT seconds pass before the new InterpreterJVM registers, try restarting the JVM", "+        _timerThread = new RestartThread(i) {", "+          public void run() {", "+            _restartTimer = new Timer(RESET_TIME_OUT*1000, new ActionListener() {", "+              int count = 0;", "+              public void actionPerformed(ActionEvent e) {", "+                synchronized(MainJVM.this) {", "+                  if (!_shouldReset) {", "+                    _stopTimerThread();", "+                    return;", "+                  }", "+                  if (count < 2) {", "+                    _model.printDebugMessage(\"Could not connect to InterpreterJVM, trying again...\");", "+                    restartInterpreterJVM();", "+                    count++;", "+                    return;", "+                  }", "+                  _model.printDebugMessage(\"Connection failed, the interactions window will not work\");", "+                  _stopTimerThread();", "+                }", "+              }", "+            });               ", "+            _restartTimer.setRepeats(true);", "+            _restartTimer.start();   ", "+          }", "+        };", "+        //DrJava.consoleOut().println(\"In MainJVM: starting thread \" + i);", "+        _timerThread.start();"]}], "num": 31074}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65b4faa5e4c0139d5132ecd647afaad0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02aad6a21e094ff49d5b8e16b6e35d40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "601a464d68d9614b980a0acf64c3c8928b17445c", "commitAfterChange": "b35a353aefac369485a6c43b1b1d62dab2d5057c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath)", "signatureAfterChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, CompoundJDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "diff": ["-  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath) {", "-    FullVersion version = guessVersion(f);", "-//    JDKToolsLibrary.msg(\"makeFromFile: \"+f+\" --> \"+version);", "+  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, CompoundJDKDescriptor desc,", "+                                                List<File> additionalBootClassPath) {", "+    FullVersion version = guessVersion(f);", "+    JDKToolsLibrary.msg(\"makeFromFile: \"+f+\" --> \"+version);", "+    JDKToolsLibrary.msg(\"\\tdesc = \"+desc);", "+    ", "+    boolean isSupported = JavaVersion.CURRENT.supports(version.majorVersion());", "+    if (desc!=null) {", "+      isSupported |= JavaVersion.CURRENT.supports(desc.getMinimumMajorVersion());", "+    }", "+    ", "-    if (JavaVersion.CURRENT.supports(version.majorVersion())) {", "+    if (isSupported) {", "+      if (desc!=null) {", "+        compilerAdapter = desc.getAdapterForCompiler();", "+      }", "+      ", "+      if (desc!=null) {", "+        debuggerAdapter = desc.getAdapterForDebugger();", "+      }", "-    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc, bootClassPath);", "+    return new JarJDKToolsLibrary(f, version, desc, compiler, debugger, javadoc, bootClassPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c2532364bf5df3a0e228ee594c3aa9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "signatureAfterChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "diff": ["+    assert desc != null;", "+    ", "-    JDKToolsLibrary.msg(\"\\tdesc = \"+desc);", "+    JDKToolsLibrary.msg(\"    desc = \"+desc);", "-    if (desc!=null) {", "-      isSupported |= JavaVersion.CURRENT.supports(desc.getMinimumMajorVersion());", "-      try {", "-        additionalCompilerFiles = desc.getAdditionalCompilerFiles(f);", "-      }", "-      catch(FileNotFoundException fnfe) {", "-        // not all additional compiler files were found", "-        isSupported = false;", "-      }", "+", "+    // JDKDescriptor.NONE will require JavaVersion.CURRENT to be at least JavaVersion.JAVA_1_1,", "+    // i.e. it will always be supported", "+    isSupported |= JavaVersion.CURRENT.supports(desc.getMinimumMajorVersion());", "+    try {", "+      additionalCompilerFiles = desc.getAdditionalCompilerFiles(f);", "+    }", "+    catch(FileNotFoundException fnfe) {", "+      // not all additional compiler files were found", "+      isSupported = false;", "-      String compilerAdapter = adapterForCompiler(version);", "-      if (desc!=null) {", "-        compilerAdapter = desc.getAdapterForCompiler();", "-      }", "+      String compilerAdapter = desc.getAdapterForCompiler(version);", "-      String debuggerAdapter = adapterForDebugger(version);", "-      if (desc!=null) {", "-        debuggerAdapter = desc.getAdapterForDebugger();", "-      }", "+      String debuggerAdapter = desc.getAdapterForDebugger(version);"]}], "num": 8476}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6002ede20f0f7bea982d09362be62ceb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22db9230e75657911ba634cdae8d5bd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/Configuration.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    private Configuration()", "signatureAfterChange": "          private Configuration()", "diff": ["-", "-  private Configuration() {", "-    _properties = new Properties();", "-", "-    try {", "-      // create empty props file if it doesn't exist", "-      if (! PROPERTIES_FILE.exists()) {", "-        new FileOutputStream(PROPERTIES_FILE).close();", "-      }", "-", "-      _properties.load(new FileInputStream(PROPERTIES_FILE));", "+    ", "+    private Configuration() {", "+\tOptionMapLoader loader = OptionMapLoader.DEFAULT;", "+\ttry {", "+\t    if (PROPERTIES_FILE.exists()) {", "+\t\tInputStream fis = new FileInputStream(PROPERTIES_FILE);", "+\t\tloader = OptionMapLoader.makeLoader(fis);", "+\t    } else { // be nice and create a config file.", "+\t\tnew FileOutputStream(PROPERTIES_FILE).close();", "+\t    }", "+\t} catch(IOException e) { // IOException occurred", "+\t}", "+\tOptionMap map = new DefaultOptionMap();", "+\tloader.loadInto(map);", "+\t_config = new edu.rice.cs.drjava.config.Configuration(map);", "-    catch (IOException ioe) {", "-      // oh well, didn't find any properties.", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efdd81565edb259d20c3ce3c80eea89e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @Override public TypeContext visit(VariableDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(VariableDeclaration node)", "diff": ["-    Type t = checkTypeName(node.getType());", "-    LocalVariable v = new LocalVariable(node.getName(), t, node.isFinal());", "-    setVariable(node, v);", "-    TypeContext newContext = new LocalContext(context, v);", "-    ", "-    if (node.getInitializer() != null) {", "-      Type initT = checkType(node.getInitializer(), t);", "-      try {", "-        Expression newInit = ts.assign(t, node.getInitializer());", "-        node.setInitializer(newInit);", "-      }", "-      catch (UnsupportedConversionException e) {", "-        setErrorStrings(node, ts.userRepresentation(initT), ts.userRepresentation(t));", "-        throw new ExecutionError(\"assignment.types\", node);", "-      }", "+    if (node.getType() == null) {", "+      // We infer the variable's type.  We can assume the initializer is non-null.", "+      Type initT = checkType(node.getInitializer());", "+      LocalVariable v = new LocalVariable(node.getName(), initT, node.isFinal());", "+      setVariable(node, v);", "+      return new LocalContext(context, v);", "-    ", "-    return newContext;", "+    else {", "+      Type t = checkTypeName(node.getType());", "+      LocalVariable v = new LocalVariable(node.getName(), t, node.isFinal());", "+      setVariable(node, v);", "+      TypeContext newContext = new LocalContext(context, v);", "+      ", "+      if (node.getInitializer() != null) {", "+        Type initT = checkType(node.getInitializer(), t);", "+        try {", "+          Expression newInit = ts.assign(t, node.getInitializer());", "+          node.setInitializer(newInit);", "+        }", "+        catch (UnsupportedConversionException e) {", "+          setErrorStrings(node, ts.userRepresentation(initT), ts.userRepresentation(t));", "+          throw new ExecutionError(\"assignment.types\", node);", "+        }", "+      }", "+      return newContext;", "+    }"]}], "num": 11847}
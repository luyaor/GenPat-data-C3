{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "045ba2e8bf00b5eb76a46e89be2840cd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7220be55b12c7bd3f56789b3bdb6dde1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public synchronized void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-  public synchronized void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "+  public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "-    LeafNode node = getNodeForDoc(doc);", "-    if (node == null) addDocument(doc, path);", "-    ", "-    InnerNode oldParent = (InnerNode)node.getParent();", "-    // Check to see if the new parent (could be same) exists already", "-    String newPath = path;", "-    if (newPath.length() > 0) {", "-      if (newPath.substring(0,1).equals(\"/\")) newPath = newPath.substring(1);", "-      if (!newPath.substring(newPath.length()-1).equals(\"/\")) newPath = newPath + \"/\";", "-    }", "-    InnerNode newParent = _path2node.getValue(newPath); // node that should be parent", "-    ", "-    //    System.out.println(\"path=\"+path);", "-    //    System.out.println(\"newPath=\"+newPath);", "-    //    System.out.println(\"oldParent=\"+oldParent);", "-    //    System.out.println(\"newParent=\"+newParent);", "-    //    System.out.println(_path2node);", "-    ", "-    if (newParent == oldParent) { ", "-      if (!node.toString().equals(doc.getName())) {", "-        LeafNode newLeaf= new LeafNode(doc);", "-        _doc2node.put(doc,newLeaf);", "-        insertNodeSortedInto(newLeaf, newParent);", "-        _model.removeNodeFromParent(node);", "-      }", "-      // don't do anything if its name or parents haven't changed", "-    } else {", "-      removeNode(node);", "-      addDocument(doc, path);", "-    }", "-  }", "+    synchronized(_model) {", "+      LeafNode node = getNodeForDoc(doc);", "+      if (node == null) addDocument(doc, path);", "+      InnerNode oldParent = (InnerNode)node.getParent();", "+      // Check to see if the new parent (could be same) exists already", "+      String newPath = path;", "+      if (newPath.length() > 0) {", "+        if (newPath.substring(0,1).equals(\"/\")) newPath = newPath.substring(1);", "+        if (!newPath.substring(newPath.length()-1).equals(\"/\")) newPath = newPath + \"/\";", "+      }", "+      InnerNode newParent = _path2node.getValue(newPath); // node that should be parent", "+      ", "+      //    System.out.println(\"path=\"+path);", "+      //    System.out.println(\"newPath=\"+newPath);", "+      //    System.out.println(\"oldParent=\"+oldParent);", "+      //    System.out.println(\"newParent=\"+newParent);", "+      //    System.out.println(_path2node);", "+      ", "+      if (newParent == oldParent) { ", "+        if (!node.toString().equals(doc.getName())) {", "+          LeafNode newLeaf= new LeafNode(doc);", "+          _doc2node.put(doc,newLeaf);", "+          insertNodeSortedInto(newLeaf, newParent);", "+          _model.removeNodeFromParent(node);", "+        }", "+        // don't do anything if its name or parents haven't changed", "+      } else {", "+        removeNode(node);", "+        addDocument(doc, path);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad95d83c495dd25881bb77f01ad6ac9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public synchronized void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-  public synchronized void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "+  public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "-    for (GroupNode r: _roots){", "-      if (r.getFilter().accept(doc)) {", "-        _root = r;", "-        break;", "-      }", "-    }", "-    ", "-    if (_root == null) return;", "-    ", "-    StringTokenizer tok = new StringTokenizer(path, File.separator);", "-    //ArrayList<String> elements = new ArrayList<String>();", "-    String pathSoFar=\"\";", "-    InnerNode lastNode = _root;", "-    while (tok.hasMoreTokens()) {", "-      String element = tok.nextToken();", "-      pathSoFar += (element + \"/\");", "-      InnerNode thisNode;", "-      //System.out.println(\"pathsofar = \" + pathSoFar);", "-      // if the node is not in the hashmap yet", "-      if (!_path2node.containsKey(pathSoFar)) {", "-        // make a new node", "-        ", "-        /* this inserts a folder node */", "-        thisNode = new FileNode(new File(pathSoFar));", "-        insertFolderSortedInto(thisNode, lastNode);", "-        this.expandPath(new TreePath(lastNode.getPath()));", "-        // associate the path so far with that node", "-        _path2node.put(pathSoFar, thisNode);", "-      }", "-      else {", "-        // System.out.println(\"path2node contains pathSoFar\");", "-        thisNode = _path2node.getValue(pathSoFar);", "+    synchronized(_model) {", "+      ", "+      for (GroupNode r: _roots){", "+        if (r.getFilter().accept(doc)) {", "+          _root = r;", "+          break;", "+        }", "-      lastNode = thisNode;", "-       ", "-      //elements.add(element);", "+      if (_root == null) return;", "+      ", "+      StringTokenizer tok = new StringTokenizer(path, File.separator);", "+      //ArrayList<String> elements = new ArrayList<String>();", "+      String pathSoFar=\"\";", "+      InnerNode lastNode = _root;", "+      while (tok.hasMoreTokens()) {", "+        String element = tok.nextToken();", "+        pathSoFar += (element + \"/\");", "+        InnerNode thisNode;", "+        //System.out.println(\"pathsofar = \" + pathSoFar);", "+        // if the node is not in the hashmap yet", "+        if (!_path2node.containsKey(pathSoFar)) {", "+          // make a new node", "+          ", "+          /* this inserts a folder node */", "+          thisNode = new FileNode(new File(pathSoFar));", "+          insertFolderSortedInto(thisNode, lastNode);", "+          this.expandPath(new TreePath(lastNode.getPath()));", "+          // associate the path so far with that node", "+          _path2node.put(pathSoFar, thisNode);", "+        }", "+        else {", "+          // System.out.println(\"path2node contains pathSoFar\");", "+          thisNode = _path2node.getValue(pathSoFar);", "+        }", "+        ", "+        lastNode = thisNode;", "+        ", "+        //elements.add(element);", "+      }", "+      ", "+      /* lastNode is the node of the folder to add into */", "+      ", "+      LeafNode child = new LeafNode(doc);", "+      _doc2node.put(doc, child);", "+      insertNodeSortedInto(child, lastNode);", "+      //    _model.insertNodeInto(child, lastNode, lastNode.getChildCount());", "+      this.expandPath(new TreePath(lastNode.getPath()));", "+      child.setUserObject(doc);", "-    ", "-    /* lastNode is the node of the folder to add into */", "-    ", "-    LeafNode child = new LeafNode(doc);", "-    _doc2node.put(doc, child);", "-    insertNodeSortedInto(child, lastNode);", "-    //    _model.insertNodeInto(child, lastNode, lastNode.getChildCount());", "-    this.expandPath(new TreePath(lastNode.getPath()));", "-    child.setUserObject(doc);"]}], "num": 29100}
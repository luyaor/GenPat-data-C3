{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1548977dbdd8dfc5a6cc1d5463551a9d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ea119c55413ed1c52ac212c2985793f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "9953c5f787113bb8bfb39d4af2a2ba9a2a873081", "commitAfterChange": "cf43b71b7afba8ecd60ed8b71f23b327139aa802", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,                                                        boolean start)", "signatureAfterChange": "   public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,                                                        boolean start)", "diff": ["+   */", "+  public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,", "+                                                       boolean start) {", "+    return computeInProcess(task, jvmBuilder, start, null);", "+  }", "-  public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,", "-                                                       boolean start) {", "-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(factory));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "260e1e704eaa300e095b67cd3da6b1b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "9953c5f787113bb8bfb39d4af2a2ba9a2a873081", "commitAfterChange": "cf43b71b7afba8ecd60ed8b71f23b327139aa802", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,                                                        boolean start)", "signatureAfterChange": "   public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, JVMBuilder jvmBuilder,                                                        boolean start, Runnable1<? super Process> onExit)", "diff": ["-  public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,", "-                                                       boolean start) {", "+  public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, JVMBuilder jvmBuilder,", "+                                                       boolean start, Runnable1<? super Process> onExit) {", "-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(factory));", "+    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(factory), onExit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8635b563cbeeef298f9f68309958cbe5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, JVMBuilder jvmBuilder,                                                        Runnable1<? super Process> onExit)", "signatureAfterChange": "   public static <I, R>       IncrementalTaskController<I, R> computeInProcess(IncrementalTask<? extends I, ? extends R> task,                                                        JVMBuilder jvmBuilder)", "diff": ["-   */", "-  public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, JVMBuilder jvmBuilder,", "-                                                       Runnable1<? super Process> onExit) {", "-    return computeInProcess(task, jvmBuilder, true, onExit);", "-  }", "+   */", "+  public static <I, R>", "+      IncrementalTaskController<I, R> computeInProcess(IncrementalTask<? extends I, ? extends R> task,", "+                                                       JVMBuilder jvmBuilder) {", "+    return computeInProcess(task, jvmBuilder, true, false);", "+  }"]}], "num": 16174}
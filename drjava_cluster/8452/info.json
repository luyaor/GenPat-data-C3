{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f81c72061a5533329779901e247bcd4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36b45450f12f6ca4183336546cf1cd63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Object visit(WhileStatement node)", "signatureAfterChange": "   public Class visit(WhileStatement node)", "diff": ["+   */", "+  public Class visit(WhileStatement node) {", "+    // Check the condition", "+    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+      throw new ExecutionError(\"condition.type\", node);", "+    ", "+    node.getBody().acceptVisitor(this);", "+    return null;", "+  }", "-     */", "-    public Object visit(WhileStatement node) {", "-        // Check the condition", "-        if (node.getCondition().acceptVisitor(this) != boolean.class) {", "-            throw new ExecutionError(\"condition.type\", node);", "-        }", "-", "-        node.getBody().acceptVisitor(this);", "-        return null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88a0cbf09e3687abc67a66b835363048", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Object visit(DoStatement node)", "signatureAfterChange": "   public Class visit(DoStatement node)", "diff": ["+   */", "+  public Class visit(DoStatement node) {", "+    node.getBody().acceptVisitor(this);", "+    ", "+    // Check the condition", "+    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+      throw new ExecutionError(\"condition.type\", node);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(DoStatement node) {", "-        node.getBody().acceptVisitor(this);", "-", "-        // Check the condition", "-        if (node.getCondition().acceptVisitor(this) != boolean.class) {", "-            throw new ExecutionError(\"condition.type\", node);", "-        }", "-        return null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beac5982c7784d3cbb18daa4631fdfd8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public Object visit(IfThenStatement node)", "signatureAfterChange": "   public Class visit(IfThenStatement node)", "diff": ["-     */", "-    public Object visit(IfThenStatement node) {", "-        // Check the condition", "-        if (node.getCondition().acceptVisitor(this) != boolean.class) {", "-            throw new ExecutionError(\"condition.type\", node);", "-        }", "-", "-        node.getThenStatement().acceptVisitor(this);", "-        return null;", "-    }", "+   */", "+  public Class visit(IfThenStatement node) {", "+    // Check the condition", "+    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+      throw new ExecutionError(\"condition.type\", node);", "+    }", "+    ", "+    node.getThenStatement().acceptVisitor(this);", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f24c760a03d1f0dcbb37f1ce95c68da5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public Object visit(IfThenElseStatement node)", "signatureAfterChange": "   public Class visit(IfThenElseStatement node)", "diff": ["-     */", "-    public Object visit(IfThenElseStatement node) {", "-        // Check the condition", "-        if (node.getCondition().acceptVisitor(this) != boolean.class) {", "-            throw new ExecutionError(\"condition.type\", node);", "-        }", "-", "-        node.getThenStatement().acceptVisitor(this);", "-        node.getElseStatement().acceptVisitor(this);", "-        return null;", "-    }", "+   */", "+  public Class visit(IfThenElseStatement node) {", "+    // Check the condition", "+    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+      throw new ExecutionError(\"condition.type\", node);", "+    }", "+    ", "+    node.getThenStatement().acceptVisitor(this);", "+    node.getElseStatement().acceptVisitor(this);", "+    return null;", "+  }"]}], "num": 8452}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ce012be00d1c2901f2bb1577ba4ce45", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c77d2458034860e1850f6448ee06ccb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "47940fe74faf2ed044539c32c4d2eb5e5171e259", "commitAfterChange": "0d0c5947e7ead7115690128690c9c431a119fb4d", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace)", "signatureAfterChange": "   public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace)", "diff": ["-        ", "-        String lineText;", "-        ", "+", "-        int lineStartStmt = getLineStartPos(nextNonWSChar);", "+        int newLineStart = getLineStartPos(nextNonWSChar);", "-        // Get the position of the first non-ws character on this line", "-        int lineFirstNonWS = getLineFirstCharPos(lineStartStmt);", "-        lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt);", "-        _storeInCache(key, lineText, Math.max(lineStart, 0));", "-        return lineText;", "+        // Get the position of the first non-ws character on this line (or end of line if no such char", "+        int firstNonWS = getLineFirstCharPos(newLineStart);", "+        String wSPrefix = getBlankString(firstNonWS - newLineStart);  // ensure that the wsPrefix only contains blanks", "+        _storeInCache(key, wSPrefix, firstNonWS);", "+        return wSPrefix;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72fae0e428e7c4db5b801387f9d0ebee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/NewJVMTest.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "       public Object forVoidResult(VoidResult that)", "signatureAfterChange": "       public Void forCharValue(Character c)", "diff": ["-    private class TestResultHandler implements InterpretResultVisitor<Object> {", "-      public Object forVoidResult(VoidResult that) {", "-        synchronized(_testLock) {", "-          voidReturnFlag = true;", "-          _log.log(\"NewJVMTest: void returned by interpretResult callback\");", "-          _testLock.notify();", "-          return null;", "-        }", "+      public Void forStringValue(String s) { handleValueResult('\"' + s + '\"'); return null; }", "+      public Void forCharValue(Character c) { handleValueResult(\"'\" + c + \"'\"); return null; }"]}], "num": 26690}
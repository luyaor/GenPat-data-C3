{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55399a4f07dfe7590a7b804eccb82bd7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53d9c2568e9cbfa2564cb9a2950cf16e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "     public Object visit(ConditionalExpression node)", "signatureAfterChange": "   public Class visit(ConditionalExpression node)", "diff": ["+   */", "+  public Class visit(ConditionalExpression node) {", "+    // Check the condition", "+    if (node.getConditionExpression().acceptVisitor(this) != boolean.class) {", "+      throw new ExecutionError(\"condition.type\", node);", "+    }", "+    ", "+    // Determine the type of the expression", "+    Node  n1 = node.getIfTrueExpression();", "+    Node  n2 = node.getIfFalseExpression();", "+    Class c1 = (Class)n1.acceptVisitor(this);", "+    Class c2 = (Class)n2.acceptVisitor(this);", "+    Class ec = null;", "+    ", "+    if (c1 == c2) {", "+      ec = c1;", "+    } else if (c1 == null) {", "+      ec = c2;", "+    } else if (c2 == null) {", "+      ec = c1;", "+    } else if (!c1.isPrimitive() && !c2.isPrimitive()) {", "+      if (c1.isAssignableFrom(c2)) {", "+        ec = c1;", "+      } else if (c2.isAssignableFrom(c1)) {", "+        ec = c2;", "+      } else {", "+        throw new ExecutionError(\"incompatible.types\", node);", "+      }", "+    } else if (c1 == boolean.class || c2 == boolean.class ||", "+               c1 == void.class    || c2 == void.class) {", "+      throw new ExecutionError(\"incompatible.types\", node);", "+    } else if ((c1 == short.class && c2 == byte.class) ||", "+               (c1 == byte.class  && c2 == short.class)) {", "+      ec = short.class;", "+    } else if ((c2 == byte.class || c2 == short.class || c2 == char.class) &&", "+               n1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "+      Number n = (Number)n1.getProperty(NodeProperties.VALUE);", "+      if (c2 == byte.class) {", "+        if (n.intValue() == n.byteValue()) {", "+          ec = byte.class;", "+        } else {", "+          ec = int.class;", "+      } else if (n.intValue() == n.shortValue()) {", "+        ec = (c2 == char.class) ? char.class : short.class;", "+      } else {", "+        ec = int.class;", "+      }", "+    } else if ((c1 == byte.class || c1 == short.class || c1 == char.class) &&", "+               n2.hasProperty(NodeProperties.VALUE) && c2 == int.class) {", "+      Number n = (Number)n2.getProperty(NodeProperties.VALUE);", "+      if (c1 == byte.class) {", "+        if (n.intValue() == n.byteValue()) {", "+          ec = byte.class;", "+        } else {", "+          ec = int.class;", "+      } else if (n.intValue() == n.shortValue()) {", "+        ec = (c1 == char.class) ? char.class : short.class;", "+      } else {", "+        ec = int.class;", "+      }       ", "+    } else if (c1 == double.class || c2 == double.class) {", "+      ec = double.class;", "+    } else if (c1 == float.class || c2 == float.class) {", "+      ec = float.class;", "+    } else if (c1 == long.class || c2 == long.class) {", "+      ec = long.class;", "+    } else {", "+      ec = int.class;", "+    }", "+    node.setProperty(NodeProperties.TYPE, ec);", "+    ", "+    return ec;", "+  }", "-     */", "-    public Object visit(ConditionalExpression node) {", "-        // Check the condition", "-        if (node.getConditionExpression().acceptVisitor(this) != boolean.class) {", "-            throw new ExecutionError(\"condition.type\", node);", "-        }", "-", "-        // Determine the type of the expression", "-        Node  n1 = node.getIfTrueExpression();", "-        Node  n2 = node.getIfFalseExpression();", "-        Class c1 = (Class)n1.acceptVisitor(this);", "-        Class c2 = (Class)n2.acceptVisitor(this);", "-        Class ec = null;", "-", "-        if (c1 == c2) {", "-            ec = c1;", "-        } else if (c1 == null) {", "-            ec = c2;", "-        } else if (c2 == null) {", "-            ec = c1;", "-        } else if (!c1.isPrimitive() && !c2.isPrimitive()) {", "-            if (c1.isAssignableFrom(c2)) {", "-                ec = c1;", "-            } else if (c2.isAssignableFrom(c1)) {", "-                ec = c2;", "-                throw new ExecutionError(\"incompatible.types\", node);", "-        } else if (c1 == boolean.class || c2 == boolean.class ||", "-                   c1 == void.class    || c2 == void.class) {", "-            throw new ExecutionError(\"incompatible.types\", node);", "-        } else if ((c1 == short.class && c2 == byte.class) ||", "-                   (c1 == byte.class  && c2 == short.class)) {", "-            ec = short.class;", "-        } else if ((c2 == byte.class || c2 == short.class || c2 == char.class) &&", "-                   n1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "-            Number n = (Number)n1.getProperty(NodeProperties.VALUE);", "-            if (c2 == byte.class) {", "-                if (n.intValue() == n.byteValue()) {", "-                    ec = byte.class;", "-                } else {", "-                    ec = int.class;", "-                }", "-            } else if (n.intValue() == n.shortValue()) {", "-                ec = (c2 == char.class) ? char.class : short.class;", "-            } else {", "-                ec = int.class;", "-        } else if ((c1 == byte.class || c1 == short.class || c1 == char.class) &&", "-                   n2.hasProperty(NodeProperties.VALUE) && c2 == int.class) {", "-            Number n = (Number)n2.getProperty(NodeProperties.VALUE);", "-            if (c1 == byte.class) {", "-                if (n.intValue() == n.byteValue()) {", "-                    ec = byte.class;", "-                } else {", "-                    ec = int.class;", "-                }", "-            } else if (n.intValue() == n.shortValue()) {", "-                ec = (c1 == char.class) ? char.class : short.class;", "-            } else {", "-                ec = int.class;", "-            }       ", "-        } else if (c1 == double.class || c2 == double.class) {", "-            ec = double.class;", "-        } else if (c1 == float.class || c2 == float.class) {", "-            ec = float.class;", "-        } else if (c1 == long.class || c2 == long.class) {", "-            ec = long.class;", "-        } else {", "-            ec = int.class;", "-        }", "-        node.setProperty(NodeProperties.TYPE, ec);", "-", "-        return ec;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5697860b20b52e9fc7c290d6558cab09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object visit(SwitchStatement node)", "signatureAfterChange": "   public Class visit(SwitchStatement node)", "diff": ["+   */", "+  public Class visit(SwitchStatement node) {", "+    // Visits the components of this node", "+    Class c = (Class)node.getSelector().acceptVisitor(this);", "+    if (c != char.class && c != byte.class && c != short.class && c != int.class) {", "+      node.setProperty(NodeProperties.ERROR_STRINGS,", "+                       new String[] { c.getName() });", "+      throw new ExecutionError(\"selector.type\", node);", "+    }", "+    ", "+    // Check the type of the case labels", "+    Iterator it = node.getBindings().iterator();", "+    while (it.hasNext()) {", "+      SwitchBlock sb = (SwitchBlock)it.next();", "+      sb.acceptVisitor(this);", "+      Expression exp = sb.getExpression();", "+      if (exp != null) {", "+        Class lc = NodeProperties.getType(exp);", "+        if (lc != char.class &&  lc != byte.class &&", "+            lc != short.class && lc != int.class) {", "+          node.setProperty(NodeProperties.ERROR_STRINGS,", "+                           new String[] { lc.getName() });", "+          throw new ExecutionError(\"switch.label.type\", node);", "-     */", "-    public Object visit(SwitchStatement node) {", "-        // Visits the components of this node", "-        Class c = (Class)node.getSelector().acceptVisitor(this);", "-        if (c != char.class && c != byte.class && c != short.class && c != int.class) {", "-\t    node.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t     new String[] { c.getName() });", "-            throw new ExecutionError(\"selector.type\", node);", "-        }", "-", "-        // Check the type of the case labels", "-        Iterator it = node.getBindings().iterator();", "-        while (it.hasNext()) {", "-\t    SwitchBlock sb = (SwitchBlock)it.next();", "-\t    sb.acceptVisitor(this);", "-            Expression exp = sb.getExpression();", "-            if (exp != null) {", "-                Class lc = NodeProperties.getType(exp);", "-                if (lc != char.class &&  lc != byte.class &&", "-                    lc != short.class && lc != int.class) {", "-\t\t    node.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t\t     new String[] { lc.getName() });", "-                    throw new ExecutionError(\"switch.label.type\", node);", "-                }", "-                if (c != lc) {", "-                    Number n = null;", "-                    if (exp.hasProperty(NodeProperties.VALUE)) {", "-                        Object cst = exp.getProperty(NodeProperties.VALUE);", "-                        if (lc == char.class) {", "-                            n = new Integer(((Character)cst).charValue());", "-                        } else {", "-                            n = (Number)cst;", "-                        }", "-                    }", "-                    if (c == byte.class) {", "-                        if (exp.hasProperty(NodeProperties.VALUE)) {", "-                            if (n.byteValue() != n.intValue()) {", "-\t\t\t\tnode.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t\t\t\t new String[] { c.getName() });", "-\t\t\t\tthrow new ExecutionError", "-                                    (\"switch.label.type\", node);", "-                            }", "-                        } else {", "-                            throw new ExecutionError(\"switch.label.type\", node);", "-                        }", "-                    } else if (c == short.class || c == char.class) {", "-                        if (exp.hasProperty(NodeProperties.VALUE)) {", "-                            if (n.shortValue() != n.intValue()) {", "-\t\t\t\tnode.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t\t\t\t new String[] { c.getName() });", "-                                throw new ExecutionError", "-                                    (\"switch.label.type\", node);", "-                            }", "-                        } else if (lc == int.class) {", "-\t\t\t    node.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t\t\t     new String[] { c.getName() });", "-                            throw new ExecutionError(\"switch.label.type\", node);", "-                        }", "-                    }", "-                }", "-            }", "-        }", "-        return null;", "-    }", "+        if (c != lc) {", "+          Number n = null;", "+          if (exp.hasProperty(NodeProperties.VALUE)) {", "+            Object cst = exp.getProperty(NodeProperties.VALUE);", "+            if (lc == char.class) {", "+              n = new Integer(((Character)cst).charValue());", "+              n = (Number)cst;", "+          }", "+          if (c == byte.class) {", "+            if (exp.hasProperty(NodeProperties.VALUE)) {", "+              if (n.byteValue() != n.intValue()) {", "+                node.setProperty(NodeProperties.ERROR_STRINGS,", "+                                 new String[] { c.getName() });", "+                throw new ExecutionError", "+                  (\"switch.label.type\", node);", "+              }", "+            } else {", "+              throw new ExecutionError(\"switch.label.type\", node);", "+            }", "+          } else if (c == short.class || c == char.class) {", "+            if (exp.hasProperty(NodeProperties.VALUE)) {", "+              if (n.shortValue() != n.intValue()) {", "+                node.setProperty(NodeProperties.ERROR_STRINGS,", "+                                 new String[] { c.getName() });", "+                throw new ExecutionError", "+                  (\"switch.label.type\", node);", "+              }", "+            } else if (lc == int.class) {", "+              node.setProperty(NodeProperties.ERROR_STRINGS,", "+                               new String[] { c.getName() });", "+              throw new ExecutionError(\"switch.label.type\", node);", "+            }", "+          }", "+      }", "+    return null;", "+  }"]}], "num": 10572}
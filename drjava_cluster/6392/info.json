{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02cc5eb322f9dc7d2150705a4bf27182", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4af32e9a774831d1076650bcc659addc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public Class visit(SuperMethodCall node)", "signatureAfterChange": "   public Class<?> visit(SuperMethodCall node)", "diff": ["-  public Class visit(SuperMethodCall node) {", "+  public Class<?> visit(SuperMethodCall node) {", "-    List args = node.getArguments();", "+    List<Expression> args = node.getArguments();", "-      Iterator it = args.iterator();", "+      Iterator<Expression> it = args.iterator();", "-        pt[i++] = ((Node)it.next()).acceptVisitor(this);", "+        pt[i++] = it.next().acceptVisitor(this);", "-    Class c;", "+    Class<?> c;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93276063cdeb92c9cc6f8287eef1c327", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public Class visit(StaticMethodCall node)", "signatureAfterChange": "   public Class<?> visit(StaticMethodCall node)", "diff": ["-  public Class visit(StaticMethodCall node) {", "+  public Class<?> visit(StaticMethodCall node) {", "-    List args = node.getArguments();", "+    List<Expression> args = node.getArguments();", "-      Iterator it = args.iterator();", "+      Iterator<Expression> it = args.iterator();", "-        cargs[i++] = ((Node)it.next()).acceptVisitor(this);", "+        cargs[i++] = it.next().acceptVisitor(this);", "-    Class  c = n.acceptVisitor(this);", "+    Class<?>  c = n.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ecca60920fed940f503ffcc3cc0c93c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public Class visit(FunctionCall node)", "signatureAfterChange": "   public Class<?> visit(FunctionCall node)", "diff": ["-  public Class visit(FunctionCall node) {", "+  public Class<?> visit(FunctionCall node) {", "-    List args = node.getArguments();", "+    List<Expression> args = node.getArguments();", "-      Iterator it = args.iterator();", "+      Iterator<Expression> it = args.iterator();", "-        cargs[i++] = ((Node)it.next()).acceptVisitor(this);", "+        cargs[i++] = it.next().acceptVisitor(this);", "-    Class c;", "+    Class<?> c;"]}], "num": 6392}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e38d49ac555505e517c7a555e66ed30d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "632161910d6b32f390cc9606b43bb9da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 415, "methodNumberAfterChange": 433, "signatureBeforeChange": "     public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,                                       final boolean shouldHighlight)", "signatureAfterChange": "     public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight)", "diff": ["-     */", "-    public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,", "-                                      final boolean shouldHighlight) {", "-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() {", "-          // This listener is used when the document to display is", "-          // not the active document. In this case, when setActiveDocument", "-          // is called, the document won't yet have positive size and we", "-          // don't want to scroll to a line until it does, so we wait", "-          // for a call to setSize.", "-          ", "-//          ActionListener setSizeListener = new ActionListener() {", "-//            public void actionPerformed(ActionEvent ae) {", "-//              Utilities.showDebug(\"custon setSizeListener called in MainFrame with event \" + ae);", "-//              _currentDefPane.centerViewOnLine(lineNumber);", "-//              _currentDefPane.requestFocusInWindow();", "-//            }", "-//          };", "-//          _currentDefPane.addSetSizeListener(setSizeListener);", "-          ", "-          if (!_model.getActiveDocument().equals(doc)) _model.setActiveDocument(doc);", "-          else _model.refreshActiveDocument();", "-          ", "-          // this block occurs if the documents is already open and as such", "-          // has a positive size", "-          if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {", "-//            SwingUtilities.invokeLater(new Runnable() {  ", "-//              public void run() {", "-//                Utilities.showDebug(\"Getting ready to reset defintions pane\");", "-                _currentDefPane.centerViewOnLine(lineNumber);", "-                _currentDefPane.requestFocusInWindow();", "-//              }", "-//            });", "-          }", "-          ", "-          /* The execution of this block of code is deferred using SwingUtilties to fix bug #1243993.  It is not clear ", "-           * why this deferral works. */", "-          SwingUtilities.invokeLater(new Runnable() {  ", "-            public void run() {", "-              if (shouldHighlight) {", "-                _removeThreadLocationHighlight();", "-                int startOffset = doc.getOffset(lineNumber);", "-                if (startOffset > -1) {", "-                  int endOffset = doc.getLineEndPos(startOffset);", "-                  if (endOffset > -1) {", "-                    _currentThreadLocationHighlight =", "-                      _currentDefPane.getHighlightManager().", "-                      addHighlight(startOffset, endOffset, DefinitionsPane.THREAD_PAINTER);", "-                  }", "-                }", "-              }", "-              ", "-              if (doc.isModifiedSinceSave() && !_currentDefPane.hasWarnedAboutModified()) {", "-                ", "-                _showDebuggingModifiedFileWarning();", "-                ", "-                //no need to update flag, because previous method call will do it", "-                //_hasWarnedAboutModified = true;", "-              }", "-              if (shouldHighlight) {", "-                // Give the interactions pane focus so we can debug", "-                _interactionsPane.requestFocusInWindow();", "-                showTab(_interactionsPane);", "-              }", "-              _updateDebugStatus();", "-            }", "-          });", "-//        }", "-//      });", "-    }", "+     */", "+    public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) {", "+      scrollToDocumentAndLine(doc, lineNumber, shouldHighlight);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eeb8ca4b7b57a8f5149975234eb9b1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/ComposedIterable.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ComposedIterable(Iterable<? extends T> i1, Iterable<? extends T> i2)", "signatureAfterChange": "   public ComposedIterable(Iterable<? extends T> i1, Iterable<? extends T> i2)", "diff": ["-    ", "-    if (IterUtil.isFixed(i1)) {", "-      if (IterUtil.isFixed(i2)) {", "-        _fixed = true;", "-        _size = LambdaUtil.valueThunk(IterUtil.sizeOf(_i1) + IterUtil.sizeOf(_i2));", "-      }", "-      else {", "-        _fixed = false;", "-        final int size1 = IterUtil.sizeOf(_i1);", "-        _size = new Thunk<Integer>() { ", "-          public Integer value() { return size1 + IterUtil.sizeOf(_i2); }", "-        };", "-      }", "-    }", "-    else if (IterUtil.isFixed(i2)) {", "-      _fixed = false;", "-      final int size2 = IterUtil.sizeOf(_i2);", "-      _size = new Thunk<Integer>() {", "-        public Integer value() { return IterUtil.sizeOf(_i1) + size2; }", "-      };", "-    }", "-    else {", "-      _fixed = false;", "-      _size = new Thunk<Integer>() {", "-        public Integer value() { return IterUtil.sizeOf(_i1) + IterUtil.sizeOf(_i2); }", "-      };", "-    }", "+    if (IterUtil.isFixed(i1)) { _i1Size = IterUtil.sizeOf(_i1); }", "+    else { _i1Size = -1; }", "+    if (IterUtil.isFixed(i2)) { _i2Size = IterUtil.sizeOf(_i2); }", "+    else { _i2Size = -1; }"]}], "num": 13422}
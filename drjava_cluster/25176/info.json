{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a06478b9913644c1e407bd8ccbb16a61", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0845559ce2b1dba169f91ba665e4ba08", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 399, "methodNumberAfterChange": 399, "signatureBeforeChange": "\r \r   public void forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "    public void forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-\r", "-  public void forAbstractMethodDef(AbstractMethodDef that) {\r", "-    forAbstractMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);\r", "-    that.getResult().visit(this);\r", "-    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);\r", "-    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);\r", "-    forAbstractMethodDefOnly(that);\r", "-  }\r", "+", "+  public void forAbstractMethodDef(AbstractMethodDef that) {", "+    forAbstractMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);", "+    that.getResult().visit(this);", "+    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);", "+    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);", "+    forAbstractMethodDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d6fc305a62e09a53ac30eb56b25f2ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 398, "methodNumberAfterChange": 398, "signatureBeforeChange": "\r \r   public void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "    public void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-\r", "-  public void forConcreteMethodDef(ConcreteMethodDef that) {\r", "-    forConcreteMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);\r", "-    that.getResult().visit(this);\r", "-    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);\r", "-    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);\r", "-    that.getBody().visit(this);\r", "-    forConcreteMethodDefOnly(that);\r", "-  }\r", "+", "+  public void forConcreteMethodDef(ConcreteMethodDef that) {", "+    forConcreteMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);", "+    that.getResult().visit(this);", "+    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);", "+    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);", "+    that.getBody().visit(this);", "+    forConcreteMethodDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3190fa760acce972e56effa980dcd0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 397, "methodNumberAfterChange": 397, "signatureBeforeChange": "\r \r   public void forEmptyStatement(EmptyStatement that)", "signatureAfterChange": "    public void forEmptyStatement(EmptyStatement that)", "diff": ["-\r", "-  public void forEmptyStatement(EmptyStatement that) {\r", "-    forEmptyStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forEmptyStatementOnly(that);\r", "-  }\r", "+", "+  public void forEmptyStatement(EmptyStatement that) {", "+    forEmptyStatementDoFirst(that);", "+    if (prune(that)) return;", "+    forEmptyStatementOnly(that);", "+  }"]}], "num": 25176}
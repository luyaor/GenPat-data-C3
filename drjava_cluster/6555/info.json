{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f5ae2e07ff8a4c3459a3e32466e8b2c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad7bf620ee363cda86a67aa7496eeed4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "8a099b753fcfb83be248d39f70edd5788e8b1222", "commitAfterChange": "4701dc92d8eb3da9b7f829b98cf858de261361f6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testInteractionAbort()     throws BadLocationException, InterruptedException", "signatureAfterChange": "   public void testInteractionAbort()     throws BadLocationException, InterruptedException, IOException", "diff": ["-    throws BadLocationException, InterruptedException", "+    throws BadLocationException, InterruptedException, IOException", "+    _doCompile(setupDocument(FOO_TEXT), tempFile());", "+    final String beforeAbort = interpret(\"Foo.class.getName()\");", "+    assertEquals(\"Foo\", beforeAbort);", "+    ", "+    _model.removeListener(listener);", "-    //System.err.println(\"about to interp 5\");", "-    //System.err.println(\"done interp 5\");", "-    listener.assertInteractionStartCount(2);", "-    listener.assertInteractionEndCount(1);", "+", "+    // make sure we can still see class foo", "+    //System.err.println(\"about to check Foo\");", "+    final String afterAbort = interpret(\"Foo.class.getName()\");", "+    assertEquals(\"Foo\", afterAbort);", "+    //System.err.println(\"done check Foo: \" + afterAbort);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfcb5f668b89de025c33c2efe208c17b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 39, "signatureBeforeChange": "      public void testCastExpression()", "signatureAfterChange": "   public void testNotEquals() throws ExceptionReturnedException", "diff": ["+   */", "+  public void testNotEquals() throws ExceptionReturnedException {", "+    String text = \"new Integer(1) != new Short(\\\"1\\\");\";", "+    ", "+    try {", "+      _checkBinaryExpression(text, \"does not matter\", \"does not matter\");", "+      fail(\"Should have thrown an execution error because you can't compare Integer and Short.\");", "+    }", "+    catch (ExecutionError ee) {", "+    }", "+", "+    text = \"new Integer(1) != 1;\";", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)\";", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "-  public void testCastExpression() {", "-  }"]}], "num": 6555}
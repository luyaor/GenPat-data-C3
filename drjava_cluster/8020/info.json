{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5308943268d9575bc854e30b65248c21", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9db107afec9223413b186c8bdf88d8af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     @Override public Type visit(SimpleAllocation node)", "signatureAfterChange": "     @Override public Type visit(SimpleAllocation node)", "diff": ["-      // TODO: Allow a simple allocation of a dynamic inner class defined in the current context", "-      //       (where \"new Inner()\" is the equivalent of \"this.new Inner()\" or \"SomeOuter.this.new Inner()\")", "-      if (!ts.isConcrete(t) || !ts.isStatic(t)) {", "-        throw new ExecutionError(\"allocation.type\", node);", "+      if (!ts.isConcrete(t)) { throw new ExecutionError(\"allocation.type\", node); }", "+", "+      Option<Type> dynamicOuter = ts.dynamicallyEnclosingType(t);", "+      if (dynamicOuter.isSome()) {", "+        DJClass enclosingThis = enclosingThis(dynamicOuter.unwrap());", "+        if (enclosingThis == null) { throw new ExecutionError(\"allocation.type\", node); }", "+        else { setEnclosingThis(node, enclosingThis); }", "-      catch (TypeSystemException e) {", "+      catch (UnmatchedLookupException e) {", "-        throw new ExecutionError(\"no.such.constructor\", node);", "+        if (e.matches() > 1) { throw new ExecutionError(\"ambiguous.constructor\", node); }", "+        else { throw new ExecutionError(\"no.such.constructor\", node); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8badc7514cf06fb783e2eea1f468959", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     @Override public Type visit(AnonymousAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousAllocation node)", "diff": ["-      // TODO: Allow a simple allocation of a dynamic inner class defined in the current context (as above)", "-      if (!ts.isStatic(t) || (!ts.isExtendable(t) && !ts.isImplementable(t))) {", "+      if (!ts.isExtendable(t) && !ts.isImplementable(t)) {", "+      }", "+      ", "+      Option<Type> dynamicOuter = ts.dynamicallyEnclosingType(t);", "+      if (dynamicOuter.isSome()) {", "+        DJClass enclosingThis = enclosingThis(dynamicOuter.unwrap());", "+        if (enclosingThis == null) { throw new ExecutionError(\"allocation.type\", node); }", "+        else { setEnclosingThis(node, enclosingThis); }", "-        catch (TypeSystemException e) {", "+        catch (UnmatchedLookupException e) {", "-          throw new ExecutionError(\"no.such.constructor\", node);", "+          if (e.matches() > 1) { throw new ExecutionError(\"ambiguous.constructor\", node); }", "+          else { throw new ExecutionError(\"no.such.constructor\", node); }", "+    }"]}], "num": 8020}
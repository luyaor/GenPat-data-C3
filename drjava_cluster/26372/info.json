{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40e3f38e589915a1da6684e55ea7534b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49b9c504d2abeffa7b8efe95411e25a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "commitAfterChange": "c5aaf72fbd7fa889788e2cd72fe646345421a547", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public Object visit(TypeExpression node)", "signatureAfterChange": "     public Object visit(TypeExpression node)", "diff": ["-      node.setType((ReferenceType)((Type)node.getType().acceptVisitor(this)));", "+      // For some reason, the setType expression in node only takes in", "+      // ReferenceTypes so we have to create a new TypeExpression in", "+      // case the visitor returns a PrimitiveType (e.g. int.class used", "+      // to cause a ClassCastException).", "+      node = new TypeExpression((Type)node.getType().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48075ed9c5333ab1f82fe37eaf41676", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "236aa7df79220d757b2ee9df059be4a4c3d5fd28", "commitAfterChange": "56602892a0ed21c5100101190a7b3d24e2204871", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public Class visit(InnerAllocation node)", "signatureAfterChange": "   public Class visit(InnerAllocation node)", "diff": ["-    Class ec = (Class)node.getExpression().acceptVisitor(this);", "-    ", "+    Class ec = node.getExpression().acceptVisitor(this);", "+", "-    Class c = (Class)type.acceptVisitor(this);", "+    Class c = type.acceptVisitor(this);", "-    ", "+", "-    ", "+", "-        ", "+", "-          cargs[i++] = (Class)((Node)it.next()).acceptVisitor(this);", "+          cargs[i++] = ((Node)it.next()).acceptVisitor(this);", "-    ", "+", "-    ", "+"]}], "num": 26372}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cfccc416c0ce060203bf35e5f9f4d23", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76f2ec0c9ca1088c679173e55b8ae724", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 349, "methodNumberAfterChange": 254, "signatureBeforeChange": "      public boolean containsStaticClass(Type t, final String name)", "signatureAfterChange": "      public boolean containsStaticClass(Type t, final String name)", "diff": ["+  public boolean containsStaticClass(Type t, final String name) {", "+    return new ClassFinder(name, EMPTY_TYPE_ITERABLE, true).hasMatch(t);", "+  }", "-  ", "-  public boolean containsStaticClass(Type t, final String name) {", "-    debug.logStart(new String[]{\"t\",\"name\"}, wrap(t), name); try {", "-    ", "-    Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "-      public Predicate<DJClass> value(final Boolean includePrivate) {", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              if (includePrivate) { return c.isStatic(); }", "-              else { return c.isStatic() && !c.accessibility().equals(Access.PRIVATE); }", "-            }", "-            else { return false; }", "-          }", "-        };", "-      }", "-    };", "-    Iterable<? extends ClassType> classes = lookupClasses(t, makePred, EMPTY_TYPE_ITERABLE);", "-    return !IterUtil.isEmpty(classes);", "-    ", "-    } finally { debug.logEnd(); }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efe549e7cbbc1ccc10dcbcd0ffe66404", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 356, "methodNumberAfterChange": 257, "signatureBeforeChange": "   public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "      public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["+  ", "+  public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs)", "+    throws InvalidTypeArgumentException, UnmatchedLookupException {", "+    return new ClassFinder(name, typeArgs, true).findSingleClass(t);", "+  }", "-   */", "-  public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs)", "-    throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException {", "-    debug.logStart(new String[]{\"t\", \"name\", \"typeArgs\"}, t, name, typeArgs); try {", "-      ", "-    Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "-      public Predicate<DJClass> value(final Boolean includePrivate) {", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              if (includePrivate) { return c.isStatic(); }", "-              else { return c.isStatic() && !c.accessibility().equals(Access.PRIVATE); }", "-            }", "-            else { return false; }", "-          }", "-        };", "-      }", "-    };", "-    return lookupClass(t, makePred, typeArgs, name);", "-    ", "-    } finally { debug.logEnd(); }", "-  }"]}], "num": 30584}
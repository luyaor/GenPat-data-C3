{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45ec94f5c4a08776c8d7d029c7346b25", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d797b39023e01be6a24829a707c472d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 41, "signatureBeforeChange": "   synchronized void scrollToSource(LocatableEvent e)", "signatureAfterChange": "   synchronized void scrollToSource(Location location)", "diff": ["-      // No stored doc, look on the source root set (later, also the sourcepath)", "-      ReferenceType rt = location.declaringType();", "-      String filename = \"\";", "+   */", "+  synchronized void scrollToSource(Location location){", "+    OpenDefinitionsDocument doc = null;", "+    ", "+    // No stored doc, look on the source root set (later, also the sourcepath)", "+    ReferenceType rt = location.declaringType();", "+    String filename = \"\";", "+    try {", "+      filename = rt.sourceName();", "+      filename = getPackageDir(rt.name()) + filename;", "+    }", "+    catch (AbsentInformationException aie) {", "+      // Don't know real source name:", "+      //   assume source name is same as file name", "+      String className = rt.name();", "+      String ps = System.getProperty(\"file.separator\");", "+      // replace periods with the System's file separator", "+      className = StringOps.replace(className, \".\", ps);", "+      ", "+      // crop off the $ if there is one and anything after it", "+      int indexOfDollar = className.indexOf('$');    ", "+      if (indexOfDollar > -1) {", "+        className = className.substring(0, indexOfDollar);", "+      }", "+      ", "+      filename = className + \".java\";", "+    }", "+    ", "+    // Check source root set (open files)", "+    File[] sourceRoots = _model.getSourceRootSet();", "+    Vector<File> roots = new Vector<File>();", "+    for (int i=0; i < sourceRoots.length; i++) {", "+      roots.addElement(sourceRoots[i]);", "+    }", "+    File f = _model.getSourceFileFromPaths(filename, roots);", "+    if (f == null) {", "+      Vector<File> sourcepath = ", "+        DrJava.getConfig().getSetting(OptionConstants.DEBUG_SOURCEPATH);", "+      f = _model.getSourceFileFromPaths(filename, sourcepath);", "+    }", "+    ", "+    if (f != null) {", "+      // Get a document for this file, forcing it to open", "-        filename = rt.sourceName();", "-        filename = getPackageDir(rt.name()) + filename;", "+        doc = _model.getDocumentForFile(f);", "-      catch (AbsentInformationException aie) {", "-        // Don't know real source name:", "-        //   assume source name is same as file name", "-        String className = rt.name();", "-        String ps = System.getProperty(\"file.separator\");", "-        // replace periods with the System's file separator", "-        className = StringOps.replace(className, \".\", ps);", "-        ", "-        // crop off the $ if there is one and anything after it", "-        int indexOfDollar = className.indexOf('$');    ", "-        if (indexOfDollar > -1) {", "-          className = className.substring(0, indexOfDollar);", "-        }", "-      ", "-        filename = className + \".java\";", "+      catch (IOException ioe) {", "+        // No doc, so don't notify listener", "-        ", "-      // Check source root set (open files)", "-      File[] sourceRoots = _model.getSourceRootSet();", "-      Vector<File> roots = new Vector<File>();", "-      for (int i=0; i < sourceRoots.length; i++) {", "-        roots.addElement(sourceRoots[i]);", "-      }", "-      File f = _model.getSourceFileFromPaths(filename, roots);", "-      if (f == null) {", "-        Vector<File> sourcepath = ", "-          DrJava.getConfig().getSetting(OptionConstants.DEBUG_SOURCEPATH);", "-        f = _model.getSourceFileFromPaths(filename, sourcepath);", "-      }", "-      ", "-      if (f != null) {", "-        // Get a document for this file, forcing it to open", "-        try {", "-          doc = _model.getDocumentForFile(f);", "-        }", "-        catch (IOException ioe) {", "-          // No doc, so don't notify listener", "-        }", "-        catch (OperationCanceledException oce) {", "-          // No doc, so don't notify listener", "-        }", "+      catch (OperationCanceledException oce) {", "+        // No doc, so don't notify listener", "+    openAndScroll(doc, location);", "+  }", "-  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3bfeecc9f6644c282a69586cf106b15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "dd4842ca8ba89600798d5ff08666825edfadfb74", "commitAfterChange": "3e6dcdfe0dc2a3a2b00da441b478134258a2740f", "methodNumberBeforeChange": 614, "methodNumberAfterChange": 617, "signatureBeforeChange": "   public static void setPopupLoc(Window popup, Component owner)", "signatureAfterChange": "   public static void setPopupLoc(Window popup, Component owner)", "diff": ["-    // suggested from zaq@nosi.com, to keep the frame on the screen!", "-    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();", "+    Rectangle frameRect = popup.getBounds();", "+    ", "+    Point ownerLoc = null;", "+    Dimension ownerSize = null;", "+    if(owner!=null) {", "+      ownerLoc = owner.getLocation();", "+      ownerSize = owner.getSize();", "+    }", "+    else {", "+      //for multi-monitor support", "+      //Question: do we want it to popup on the first monitor always?", "+      GraphicsDevice[] dev = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();", "+      Rectangle rec = dev[0].getDefaultConfiguration().getBounds();", "+      ownerLoc = rec.getLocation();", "+      ownerSize = rec.getSize();", "+    }", "+    ", "+    // center it on owner", "+    Point loc = new Point(ownerLoc.x + (ownerSize.width - frameRect.width) / 2,", "+                          ownerLoc.y + (ownerSize.height - frameRect.height) / 2);", "+    frameRect.setLocation(loc);", "+    ", "+    // now find the GraphicsConfiguration the popup is on", "+    GraphicsConfiguration gcBest = null;", "+    int gcBestArea = -1;", "+    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();", "+    GraphicsDevice[] gs = ge.getScreenDevices();", "+    for (GraphicsDevice gd: gs) {", "+      GraphicsConfiguration gc = gd.getDefaultConfiguration();", "+      Rectangle isect = frameRect.intersection(gc.getBounds());", "+      int gcArea = isect.width*isect.height;", "+      if (gcArea>gcBestArea) {", "+        gcBest = gc;", "+        gcBestArea = gcArea;", "+      }", "+    }", "+    ", "+    // make it fit on the screen", "+    Rectangle screenRect = gcBest.getBounds();", "+    Dimension screenSize = screenRect.getSize();", "-    popup.setSize(frameSize);", "+    frameRect.setSize(frameSize);", "-    Point loc;", "-    if(owner == null) {", "-      //for multi-monitor support", "-      //Question: do we want it to popup on the first monitor always?", "-      GraphicsDevice[] dev = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();", "-      Rectangle rec = dev[0].getDefaultConfiguration().getBounds();", "-      loc = new Point(rec.x + (rec.width - popup.getWidth()) / 2, rec.y + (rec.height - popup.getHeight()) / 2);", "-    }", "-    else {", "-      Point ownerLoc = owner.getLocation();", "-      loc = new Point(ownerLoc.x + (owner.getWidth() - popup.getWidth()) / 2, ownerLoc.y + (owner.getHeight() - popup.getHeight()) / 2);", "-    }", "+    // center it on owner again", "+    loc = new Point(ownerLoc.x + (ownerSize.width - frameRect.width) / 2,", "+                          ownerLoc.y + (ownerSize.height - frameRect.height) / 2);", "+    frameRect.setLocation(loc);", "-    if(loc.x < 0)", "-      loc.x = 0;", "-    if(loc.x + popup.getWidth() > screenSize.width)", "-      loc.x = screenSize.width - popup.getWidth();", "-    if(loc.y < 0)", "-      loc.y = 0;", "-    if(loc.y + popup.getHeight() > screenSize.height)", "-      loc.y = screenSize.height - popup.getHeight();", "-    ", "-    popup.setLocation(loc);", "+    // now fit it on the screen", "+    if(frameRect.x < screenRect.x)", "+      frameRect.x = screenRect.x;", "+    if(frameRect.x + frameRect.width > screenRect.x + screenRect.width)", "+      frameRect.x = screenRect.x + screenRect.width - frameRect.width;", "+    if(frameRect.y < screenRect.y)", "+      frameRect.y = screenRect.y;", "+    if(frameRect.y + frameRect.height > screenRect.y + screenRect.height)", "+      frameRect.y = screenRect.y + screenRect.height - frameRect.height;", "+", "+    popup.setSize(frameRect.getSize());", "+    popup.setLocation(frameRect.getLocation());"]}], "num": 8409}
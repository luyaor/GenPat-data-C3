{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "faee8e7e181f130d68a964dd173d538a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ec00563020a1ec68f968baf8390218", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DefinitionsDocument.java", "commitBeforeChange": "e770a1b2886bd950ea04fddf3c15a027e23855d5", "commitAfterChange": "d07989306c43e4045df83ca1211956d5a85a21bd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public String getPackageName()", "signatureAfterChange": "   public String getPackageName() throws InvalidPackageException", "diff": ["-  public String getPackageName() {", "-    // The idea: Look for the first usage of the keyword \"package\" that is", "-    // inside a FREE block. Then, gather together all text after \"package\"", "-    // but before \";\", and strip out the whitespace. This is the package.", "+  public String getPackageName() throws InvalidPackageException {", "+    // Where we'll build up the package name we find", "-      String text = getText(0, getLength());", "-    ", "-      int packageLocation = -1;", "-      do {", "-        packageLocation = text.indexOf(\"package\", packageLocation + 1);", "+      setCurrentLocation(0);", "+      final int docLength = getLength();", "+      final String text = getText(0, docLength);", "-        if (packageLocation == -1) {", "-          // We never found a package statement. Thus it's the empty package.", "-          return \"\";", "+      // The location of the first non-whitespace character that", "+      // is not inside quote or comment.", "+      int firstNormalLocation = 0;", "+      while ((firstNormalLocation < docLength)) {", "+        setCurrentLocation(firstNormalLocation);", "+", "+        if (_reduced.currentToken().getHighlightState() ==", "+            HighlightStatus.NORMAL)", "+        {", "+          // OK, it's normal -- so if it's not whitespace, we found the spot", "+          char curChar = text.charAt(firstNormalLocation);", "+          if (!Character.isWhitespace(curChar)) {", "+            break;", "+          }", "-        ", "-        setCurrentLocation(packageLocation);", "+", "+        firstNormalLocation++;", "-      while (_reduced.currentToken().getHighlightState() !=", "-             HighlightStatus.NORMAL);", "+", "+      // Now there are two possibilities: firstNormalLocation is at", "+      // the first spot of a non-whitespace character that's NORMAL,", "+      // or it's at the end of the document.", "+      if (firstNormalLocation == docLength) {", "+        return \"\";", "+      }", "+", "+      final int strlen = \"package\".length();", "+", "+      final int endLocation = firstNormalLocation + strlen;", "+", "+      if ((firstNormalLocation + strlen > docLength) ||", "+          ! text.substring(firstNormalLocation, endLocation).equals(\"package\"))", "+      {", "+        // the first normal text is not \"package\" or there is not enough", "+        // text for there to be a package statement.", "+        // thus, there is no valid package statement.", "+        return \"\";", "+      }", "-      int afterPackage = packageLocation + \"package\".length();", "+      int afterPackage = firstNormalLocation + \"package\".length();", "-          throw new InvalidPackageException(packageLocation,", "+          throw new InvalidPackageException(firstNormalLocation,", "-      // character at a time for simplicity. It's inefficient (I think?) but it's", "-      // easy, and there shouldn't be much text between \"package\" and \";\" anyhow.", "+      // character at a time for simplicity. It's inefficient (I think?)", "+      // but it's easy, and there shouldn't be much text between", "+      // \"package\" and \";\" anyhow.", "-        throw new InvalidPackageException(packageLocation,", "+        throw new InvalidPackageException(firstNormalLocation,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5cf3903006b6fe18816fd460c36482d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e770a1b2886bd950ea04fddf3c15a027e23855d5", "commitAfterChange": "d07989306c43e4045df83ca1211956d5a85a21bd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public String getPackageName()", "signatureAfterChange": "   public String getPackageName() throws InvalidPackageException", "diff": ["-  public String getPackageName() {", "-    // The idea: Look for the first usage of the keyword \"package\" that is", "-    // inside a FREE block. Then, gather together all text after \"package\"", "-    // but before \";\", and strip out the whitespace. This is the package.", "+  public String getPackageName() throws InvalidPackageException {", "+    // Where we'll build up the package name we find", "-      String text = getText(0, getLength());", "-    ", "-      int packageLocation = -1;", "-      do {", "-        packageLocation = text.indexOf(\"package\", packageLocation + 1);", "+      setCurrentLocation(0);", "+      final int docLength = getLength();", "+      final String text = getText(0, docLength);", "-        if (packageLocation == -1) {", "-          // We never found a package statement. Thus it's the empty package.", "-          return \"\";", "+      // The location of the first non-whitespace character that", "+      // is not inside quote or comment.", "+      int firstNormalLocation = 0;", "+      while ((firstNormalLocation < docLength)) {", "+        setCurrentLocation(firstNormalLocation);", "+", "+        if (_reduced.currentToken().getHighlightState() ==", "+            HighlightStatus.NORMAL)", "+        {", "+          // OK, it's normal -- so if it's not whitespace, we found the spot", "+          char curChar = text.charAt(firstNormalLocation);", "+          if (!Character.isWhitespace(curChar)) {", "+            break;", "+          }", "-        ", "-        setCurrentLocation(packageLocation);", "+", "+        firstNormalLocation++;", "-      while (_reduced.currentToken().getHighlightState() !=", "-             HighlightStatus.NORMAL);", "+", "+      // Now there are two possibilities: firstNormalLocation is at", "+      // the first spot of a non-whitespace character that's NORMAL,", "+      // or it's at the end of the document.", "+      if (firstNormalLocation == docLength) {", "+        return \"\";", "+      }", "+", "+      final int strlen = \"package\".length();", "+", "+      final int endLocation = firstNormalLocation + strlen;", "+", "+      if ((firstNormalLocation + strlen > docLength) ||", "+          ! text.substring(firstNormalLocation, endLocation).equals(\"package\"))", "+      {", "+        // the first normal text is not \"package\" or there is not enough", "+        // text for there to be a package statement.", "+        // thus, there is no valid package statement.", "+        return \"\";", "+      }", "-      int afterPackage = packageLocation + \"package\".length();", "+      int afterPackage = firstNormalLocation + \"package\".length();", "-          throw new InvalidPackageException(packageLocation,", "+          throw new InvalidPackageException(firstNormalLocation,", "-      // character at a time for simplicity. It's inefficient (I think?) but it's", "-      // easy, and there shouldn't be much text between \"package\" and \";\" anyhow.", "+      // character at a time for simplicity. It's inefficient (I think?)", "+      // but it's easy, and there shouldn't be much text between", "+      // \"package\" and \";\" anyhow.", "-        throw new InvalidPackageException(packageLocation,", "+        throw new InvalidPackageException(firstNormalLocation,"]}], "num": 28855}
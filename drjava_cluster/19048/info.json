{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7a268761067446c62e5c1e8ca113ff8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b052fc213210a65f0dd7e666b331544", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/StaticMethodCall.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public StaticMethodCall(TypeName typ, String mn, List<? extends Expression> args,                           SourceInfo si)", "signatureAfterChange": "   public StaticMethodCall(TypeName typ, String mn, List<? extends Expression> args, SourceInfo si)", "diff": ["-  public StaticMethodCall(TypeName typ, String mn, List<? extends Expression> args,", "-                          SourceInfo si) {", "-    super(mn, args, si);", "-", "-    if (typ == null) throw new IllegalArgumentException(\"typ == null\");", "-", "-    methodType = typ;", "+  public StaticMethodCall(TypeName typ, String mn, List<? extends Expression> args, SourceInfo si) {", "+    this(typ, Option.<List<TypeName>>none(), mn, args, si);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c039358da15abdf92e52df548c1445", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ObjectMethodCall.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ObjectMethodCall(Expression exp, String mn, List<? extends Expression> args,                           SourceInfo si)", "signatureAfterChange": "   public ObjectMethodCall(Expression exp, String mn, List<? extends Expression> args, SourceInfo si)", "diff": ["-  public ObjectMethodCall(Expression exp, String mn, List<? extends Expression> args,", "-                          SourceInfo si) {", "-    super(mn, args, si);", "+   */", "+  public ObjectMethodCall(Expression exp, String mn, List<? extends Expression> args, SourceInfo si) {", "+    this(exp, Option.<List<TypeName>>none(), mn, args, si);", "+  }"]}], "num": 19048}
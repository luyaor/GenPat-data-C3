{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4313f7b576d78dfc67f3ac5fcdf74121", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "140615da7574dce614d3bda3c44ab3e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   final public List<Node> StreamItem() throws ParseException", "signatureAfterChange": "   final public List topLevelStatement() throws ParseException", "diff": ["-  final public List<Node> StreamItem() throws ParseException {", "+  final public List topLevelStatement() throws ParseException {", "-      case PACKAGE:", "-        root = packageDeclaration();", "-        break;", "+      case BREAK:", "+      case CONTINUE:", "+      case DO:", "+      case FOR:", "+      case IF:", "-        root = importDeclaration();", "+      case PACKAGE:", "+      case RETURN:", "+      case SWITCH:", "+      case THROW:", "+      case TRY:", "+      case WHILE:", "+      case LBRACE:", "+      case SEMICOLON:", "+        root = singleLookaheadStatement();", "-        if (jj_2_2(2147483647)) {", "+        if (jj_2_2(2)) {", "+          root = synchronizedStatement();", "+        } else if (jj_2_3(2)) {", "+          root = labeledStatement();", "+        } else if (jj_2_4(2147483647)) {", "-        } else if (jj_2_3(2147483647)) {", "+        } else if (jj_2_5(2147483647)) {", "-        } else if (jj_2_4(2147483647)) {", "-          root = topLevelStatement();", "+        } else if (jj_2_6(2147483647)) {", "+          root = typeDeclaration();", "+        } else if (jj_2_7(2147483647)) {", "+          root = expression();", "+          jj_consume_token(SEMICOLON);", "-          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-          case ABSTRACT:", "-          case CLASS:", "-          case ENUM:", "-          case FINAL:", "-          case INTERFACE:", "-          case NATIVE:", "-          case PRIVATE:", "-          case PROTECTED:", "-          case PUBLIC:", "-          case STATIC:", "-          case SYNCHRONIZED:", "-          case TRANSIENT:", "-          case VOLATILE:", "-            root = typeDeclaration();", "-            break;", "-          default:", "-            jj_la1[4] = jj_gen;", "-            jj_consume_token(-1);", "-            throw new ParseException();", "-          }", "+          jj_consume_token(-1);", "+          throw new ParseException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bfd6d49d80ae0d9d236a1f4636696fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   final public List<Node> classBodyDeclaration() throws ParseException", "signatureAfterChange": "   final public List<Node> classBodyDeclaration() throws ParseException", "diff": ["-    if (jj_2_12(2)) {", "-      node = initializer();", "-    } else if (jj_2_13(2147483647)) {", "-      node = classDeclaration();", "-    } else if (jj_2_14(2147483647)) {", "-      node = interfaceDeclaration();", "-    } else if (jj_2_15(2147483647)) {", "-      node = constructorDeclaration();", "-    } else if (jj_2_16(2147483647)) {", "-      node = methodDeclaration();", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NATIVE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case SHORT:", "-      case STATIC:", "-      case SYNCHRONIZED:", "-      case TRANSIENT:", "-      case VOLATILE:", "-      case IDENTIFIER:", "-        list = fieldDeclaration();", "-        break;", "-      case SEMICOLON:", "-        jj_consume_token(SEMICOLON);", "-        break;", "-      default:", "-        jj_la1[22] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+    try {", "+      if (jj_2_12(2)) {", "+        node = initializer();", "+      } else if (jj_2_13(2147483647)) {", "+        node = classDeclaration();", "+      } else if (jj_2_14(2147483647)) {", "+        node = interfaceDeclaration();", "+      } else if (jj_2_15(2147483647)) {", "+        node = constructorDeclaration();", "+      } else if (jj_2_16(2147483647)) {", "+        node = methodDeclaration();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+          list = fieldDeclaration();", "+          break;", "+        case SEMICOLON:", "+          jj_consume_token(SEMICOLON);", "+          break;", "+        default:", "+          jj_la1[23] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+        if (node != null) {", "+          list.add(node);", "+        }", "+        {if (true) return list;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid Member Declaration\");", "-      if (node != null) {", "-        list.add(node);", "-      }", "-      {if (true) return list;}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1a1590c2cf87862f3c968bc4765bfed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 53, "signatureBeforeChange": "   final public List<Node> interfaceMemberDeclaration() throws ParseException", "signatureAfterChange": "   final public List<Node> interfaceMemberDeclaration() throws ParseException", "diff": ["-    if (jj_2_21(2147483647)) {", "-      node = classDeclaration();", "-    } else if (jj_2_22(2147483647)) {", "-      node = interfaceDeclaration();", "-    } else if (jj_2_23(2147483647)) {", "-      node = methodDeclaration();", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NATIVE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case SHORT:", "-      case STATIC:", "-      case SYNCHRONIZED:", "-      case TRANSIENT:", "-      case VOLATILE:", "-      case IDENTIFIER:", "-        list = fieldDeclaration();", "-        break;", "-      default:", "-        jj_la1[47] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+    try {", "+      if (jj_2_21(2147483647)) {", "+        node = classDeclaration();", "+      } else if (jj_2_22(2147483647)) {", "+        node = interfaceDeclaration();", "+      } else if (jj_2_23(2147483647)) {", "+        node = methodDeclaration();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+          list = fieldDeclaration();", "+          break;", "+        default:", "+          jj_la1[48] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "-    }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid interface member declaration\");", "+    }"]}], "num": 404}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b5a06f42c0476e9ded0715b5408e56b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e0b18276c251f50b65eba0e665caa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public TypeData forClassDef(ClassDef that)", "signatureAfterChange": "   public TypeData forClassDef(ClassDef that)", "diff": ["-      if (!foundOne) {", "+      if (! foundOne) {", "-    //This is bad because it means that in this instance, the type checker is not language independent.", "-    //However, until we get to this point, it is impossible to tell if the class is a subclass of", "-    //TestCase that does not directly extend test case.  For instance, if class A extends", "-    //class B and class B extends TestCase, we would not know until this pass that class A also extends", "-    //test case.", "-    else {//if it is not a test class, and we are at the intermediate or elementary level, void is not allowed", "-      if (LanguageLevelConverter.isElementaryFile(_file)) {  ", "-        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Elementary\");", "-      }", "-      else if (LanguageLevelConverter.isIntermediateFile(_file)) {", "-        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Intermediate\");", "-      }", "-    } ", "+//    //This is bad because it means that in this instance, the type checker is not language independent.", "+//    //However, until we get to this point, it is impossible to tell if the class is a subclass of", "+//    //TestCase that does not directly extend test case.  For instance, if class A extends", "+//    //class B and class B extends TestCase, we would not know until this pass that class A also extends", "+//    //test case.", "+//    else {//if it is not a test class, and we are at the intermediate or elementary level, void is not allowed", "+//      if (LanguageLevelConverter.isElementaryFile(_file)) {  ", "+//        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Elementary\");", "+//      }", "+//      else if (LanguageLevelConverter.isIntermediateFile(_file)) {", "+//        cbtc = new VoidMethodsNotAllowedClassBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>(), \"Intermediate\");", "+//      }", "+//    } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eef3c2353bc07cc172e468810878ef80", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public SymbolData(String name)", "signatureAfterChange": "   public SymbolData(String name)", "diff": ["-  /** Called to create a continuation when all you know is the name */", "-  public SymbolData(String name) {", "+  /** Creates a continuation symbol for the specified name; does not enter this name in any table. */", "+  public SymbolData(String name) { this(name, SourceInfo.NO_INFO); }", "-    _modifiersAndVisibility = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[0]);", "-    _interfaces = new LinkedList<SymbolData>();"]}], "num": 20792}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e088e440993a28a4cf87a7580e2a6f2b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e9425a2b39763d31b028a87c8806f1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "85d3a69d147c6c1ce63751f75aec1113945356f7", "commitAfterChange": "0a93533cf1b555344278f97d8d989cd2f113c958", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static void main(final String[] args)", "signatureAfterChange": "   public static void main(final String[] args)", "diff": ["-    ", "-    // TODO: figure out how to move this code to createAndShowGUI; simply moving it", "-    //   fails because the splash icon is not found (different class loader?)", "-    // Show splash screen", "-        ", "-    // Schedule a job for the event-dispatching thread:", "-    // creating and showing this application's GUI.", "-    // ** invokeLater commented out in order to allow the splash screen to paint itself", "+    splash.repaint();", "+    ", "-//      public void run() { ", "-        createAndShowGUI(args, splash); ", "+//      // Schedule a job for the event-dispatching thread:", "+//      // creating and showing this application's GUI.", "+//      public void run() {", "+        createAndShowGUI(args); ", "-  }  ", "+    ", "+    SwingUtilities.invokeLater(new Runnable() { ", "+      public void run() { splash.dispose(); } ", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad2a8bf0805dab5298a9104cac5c9e17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void executeInteraction()", "signatureAfterChange": "   public void executeInteraction()", "diff": ["-   */", "+    */", "-    _model.interpretCurrentInteraction();", "-    _passedCurrent = true;", "-  }", "+    _doc.acquireWriteLock(); ", "+    try {", "+      _passedCurrent = true;", "+      /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "+       * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "+       * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "+       * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "+       * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "+       * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "+       * locked section avoiding the race. */", "+      SwingUtilities.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+    finally { _doc.releaseWriteLock(); }", "+  }"]}], "num": 21953}
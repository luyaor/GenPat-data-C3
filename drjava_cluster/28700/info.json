{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44fd66faecd34bbb4cc5775472dec9c3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40109de09654ad16f9533fa4cd3a8553", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 70, "signatureBeforeChange": "   private boolean _repeatedNameInHierarchy (VariableData vr, LinkedList<SymbolData> seen)", "signatureAfterChange": "   private boolean _repeatedNameInHierarchy (VariableData vr, LinkedList<SymbolData> seen)", "diff": ["-    //Does this shadow something in the super interfaces?", "-    for (int i = 0; i<_interfaces.size(); i++) {", "-      if (_interfaces.get(i)._repeatedNameInHierarchy(vr, seen)) return true;", "+    //Does this shadow something in the super interfaces?  TODO: postpone this test until all interfaces have been identified.", "+    for (SymbolData sd: _interfaces) {", "+      if (sd != null && sd._repeatedNameInHierarchy(vr, seen)) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4122712f192ce49f84ee2dc6b0b1472b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public SymbolData(String name, ModifiersAndVisibility modifiersAndVisibility, TypeParameter[] typeParameters,                      SymbolData superClass, LinkedList<SymbolData> interfaces, Data outerData)", "signatureAfterChange": "   public SymbolData(String name, ModifiersAndVisibility modifiersAndVisibility, TypeParameter[] typeParameters,                      SymbolData superClass, ArrayList<SymbolData> interfaces, Data outerData)", "diff": ["-                    SymbolData superClass, LinkedList<SymbolData> interfaces, Data outerData) {", "+                    SymbolData superClass, ArrayList<SymbolData> interfaces, Data outerData) {", "-    for (int i = 0; i < interfaces.size(); i++) { addEnclosingData(_interfaces.get(i)); }", "+    assert interfaces != null;", "+    ", "+    for (SymbolData sd: interfaces) { addEnclosingData(sd); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b1e1fac484b0262e9cad833207edac4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 98, "signatureBeforeChange": "   public void setInterfaces(LinkedList<SymbolData> interfaces)", "signatureAfterChange": "   public void setInterfaces(ArrayList<SymbolData> interfaces)", "diff": ["-  /**Set the interfaces to be the specified list*/", "-  public void setInterfaces(LinkedList<SymbolData> interfaces) {", "-    _interfaces = interfaces;", "-    for (int i = 0; i<interfaces.size(); i++) {", "-      addEnclosingData(interfaces.get(i));", "+  /**Set the interfaces to be the specified list*/", "+  public void setInterfaces(ArrayList<SymbolData> interfaces) {", "+    assert interfaces != null;", "+    _interfaces = interfaces;", "+    for (SymbolData sd: interfaces) { if (sd != null) addEnclosingData(sd); }", "+  }"]}], "num": 28700}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c772acc478d36e402e1b753223493f8f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2180810e194d92730b14f88b71a2b426", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "signatureAfterChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "diff": ["-//    doc.acquireWriteLock();", "-//    try { ", "-    doc.commentLines(0, doc.getLength()); ", "-//    }", "-//    finally { doc.releaseWriteLock(); }", "+    doc.acquireWriteLock();", "+    try { doc.commentLines(0, doc.getLength()); }", "+    finally { doc.releaseWriteLock(); }", "-//    doc.acquireWriteLock();", "-//    try { ", "-      doc.uncommentLines(0, doc.getLength()); ", "-//    }", "-//    finally { doc.releaseWriteLock(); }", "+    doc.acquireWriteLock();", "+    try { doc.uncommentLines(0, doc.getLength()); }", "+    finally { doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "365ad58d7e664c4b589a84277f16a8d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassChecker.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void initializeClassSignatures(TypeDeclaration ast)", "signatureAfterChange": "   public void initializeClassSignatures(TypeDeclaration ast)", "diff": ["-    sigChecker.checkStructureForTypeParameters(typeParameters(ast));", "-    if (ast instanceof ClassDeclaration) {", "-      sigChecker.checkStructure(((ClassDeclaration) ast).getSuperclass());", "+    debug.logStart(\"Initializing type parameters\", \"class\", ast.getName());", "+    try { sigChecker.checkStructureForTypeParameters(typeParameters(ast)); }", "+    finally { debug.logEnd(); }", "+    debug.logStart(\"Initializing supertypes\", \"class\", ast.getName());", "+    try {", "+      if (ast instanceof ClassDeclaration) {", "+        sigChecker.checkStructure(((ClassDeclaration) ast).getSuperclass());", "+      }", "+      if (ast.getInterfaces() != null) {", "+        for (TypeName tn : ast.getInterfaces()) { sigChecker.checkStructure(tn); }", "+      }", "-    if (ast.getInterfaces() != null) {", "-      for (TypeName tn : ast.getInterfaces()) { sigChecker.checkStructure(tn); }", "-    }", "+    finally { debug.logEnd(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986d3dbc5847f156595e8ee1528209ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassChecker.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void checkSignatures(TypeDeclaration ast)", "signatureAfterChange": "   public void checkSignatures(TypeDeclaration ast)", "diff": ["-    sigChecker.ensureWellFormedTypeParameters(typeParameters(ast));", "-    if (ast instanceof ClassDeclaration) {", "-      sigChecker.ensureWellFormed(((ClassDeclaration) ast).getSuperclass());", "+    debug.logStart(\"Check type parameters\");", "+    try { sigChecker.ensureWellFormedTypeParameters(typeParameters(ast)); }", "+    finally { debug.logEnd(); }", "+    debug.logStart(\"Check supertypes\");", "+    try {", "+      if (ast instanceof ClassDeclaration) {", "+        sigChecker.ensureWellFormed(((ClassDeclaration) ast).getSuperclass());", "+      }", "+      if (ast.getInterfaces() != null) {", "+        for (TypeName tn : ast.getInterfaces()) { sigChecker.ensureWellFormed(tn); }", "+      }", "-    if (ast.getInterfaces() != null) {", "-      for (TypeName tn : ast.getInterfaces()) { sigChecker.ensureWellFormed(tn); }", "-    }", "+    finally { debug.logEnd(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca877fa49d42df36946a35e318610be5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "          public void run(Iterable<? extends T> args) throws InterpreterException", "signatureAfterChange": "          public void run(Iterable<? extends T> args) throws InterpreterException", "diff": ["+      debug.logStart(_description);", "+        debug.logStart(\"location\", location(arg));", "+        debug.logEnd();", "+      debug.logEnd(_description);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8cb66eb05e748f5d6bb9405a60e7976", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "14164b6a15fd606e897810fd89f2e7edec0280c4", "commitAfterChange": "52c187d5d51895f0b58a56680e35117f80ff45ef", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 33, "signatureBeforeChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "signatureAfterChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "diff": ["-      FindResult fr = _findNextInDocSegment(_doc, 0, _doc.getLength(), false, allWrapped);", "+", "+      // find next match in _doc", "+      _doc.readLock();", "+      FindResult fr;", "+      try { fr = _findNextInDocSegment(_doc, 0, _doc.getLength(), false, allWrapped); } ", "+      finally { _doc.readUnlock(); }", "+      ", "-    // no valid match found", "-    return _findWrapped(startDoc, start, len, true);   // last arg is true because searching all docs has wrapped", "+    // No valid match found; perform wrapped search.  _findWrapped assumes readLock is held.", "+    startDoc.readLock();", "+    try { return _findWrapped(startDoc, start, len, true); }  // last arg is true because searching all docs has wrapped", "+    finally { startDoc.readUnlock(); } "]}], "num": 13182}
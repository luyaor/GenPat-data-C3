{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2848560971c2280e39572557991673dd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf79041fc21132cc45c8f02e189d29fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r   public void test14Augmentation()", "signatureAfterChange": "   public void test14Augmentation()", "diff": ["-  /*Make sure that 1.4 augmentation rules are correctly followed for Yay.dj1*/\r", "-  public void test14Augmentation() {\r", "-        File[] arrayF = new File[]{ new File(\"testFiles/forIntermediateLevelTest/Yay.dj1\")};\r", "-      LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_1_4);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      result = llc.convert(arrayF);\r", "-      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-      \r", "-      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());\r", "-      \r", "-      \r", "-      File currFile = new File(\"testFiles/forIntermediateLevelTest/Yay.dj1\");\r", "-      String fileName = currFile.getAbsolutePath();\r", "-      fileName = fileName.substring(0, fileName.length() -4);\r", "-      File resultingFile = new File(fileName + \".java\");\r", "-      File correctFile = new File(fileName + \".expected\");\r", "-        \r", "-      try {\r", "-        assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",\r", "-                     readFileAsString(correctFile),\r", "-                     readFileAsString(resultingFile));\r", "-        }\r", "-      catch (IOException ioe) {\r", "-        fail(ioe.getMessage());\r", "-        // let JUnit throw the exception\r", "-      }\r", "-  }\r", "+  /*Make sure that 1.4 augmentation rules are correctly followed for Yay.dj1*/", "+  public void test14Augmentation() {", "+        File[] arrayF = new File[]{ new File(\"testFiles/forIntermediateLevelTest/Yay.dj1\")};", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      result = llc.convert(arrayF, new Options(JavaVersion.JAVA_1_4, IterUtil.<File>empty()));", "+      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+      ", "+      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+      ", "+      ", "+      File currFile = new File(\"testFiles/forIntermediateLevelTest/Yay.dj1\");", "+      String fileName = currFile.getAbsolutePath();", "+      fileName = fileName.substring(0, fileName.length() -4);", "+      File resultingFile = new File(fileName + \".java\");", "+      File correctFile = new File(fileName + \".expected\");", "+        ", "+      try {", "+        assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "+                     IOUtil.toString(correctFile),", "+                     IOUtil.toString(resultingFile));", "+        }", "+      catch (IOException ioe) {", "+        fail(ioe.getMessage());", "+        // let JUnit throw the exception", "+      }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f966c1b7fc2b9a24b6a7da51ec39e61f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateLevelTest.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void test14Augmentation()", "signatureAfterChange": "   public void test14Augmentation()", "diff": ["-  /*Make sure that 1.4 augmentation rules are correctly followed for Yay.dj1*/", "+  /** Make sure that 1.4 augmentation rules are correctly followed for Yay.dj1*/", "-        File[] arrayF = new File[]{ new File(\"testFiles/forIntermediateLevelTest/Yay.dj1\")};", "-      LanguageLevelConverter llc = new LanguageLevelConverter();", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-      result = llc.convert(arrayF, new Options(JavaVersion.JAVA_1_4, EmptyIterable.<File>make()));", "-      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "-      ", "-      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "-      ", "-      ", "-      File currFile = new File(\"testFiles/forIntermediateLevelTest/Yay.dj1\");", "-      String fileName = currFile.getAbsolutePath();", "-      fileName = fileName.substring(0, fileName.length() -4);", "-      File resultingFile = new File(fileName + \".java\");", "-      File correctFile = new File(fileName + \".expected\");", "-        ", "-      try {", "-        assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "-                     lf(IOUtil.toString(correctFile)),", "-                     lf(IOUtil.toString(resultingFile)));", "-        }", "-      catch (IOException ioe) {", "-        fail(ioe.getMessage());", "-        // let JUnit throw the exception", "-      }", "+    File[] arrayF = new File[]{ new File(\"testFiles/forIntermediateLevelTest/Yay.dj1\")};", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    assert llc._newSDs != null;", "+    result = llc.convert(arrayF, new Options(JavaVersion.JAVA_5, EmptyIterable.<File>make()));", "+    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+    ", "+    assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+    ", "+    ", "+    File currFile = new File(\"testFiles/forIntermediateLevelTest/Yay.dj1\");", "+    String fileName = currFile.getAbsolutePath();", "+    fileName = fileName.substring(0, fileName.length() -4);", "+    File resultingFile = new File(fileName + \".java\");", "+    File correctFile = new File(fileName + \".expected\");", "+    ", "+    try {", "+      assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "+                   lf(IOUtil.toString(correctFile)),", "+                   lf(IOUtil.toString(resultingFile)));", "+    }", "+    catch (IOException ioe) {", "+      fail(ioe.getMessage());", "+      // let JUnit throw the exception", "+    }"]}], "num": 16359}
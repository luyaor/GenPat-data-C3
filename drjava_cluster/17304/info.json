{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c91c2c506407822545a202c17175abe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2708a7368b25a802b88a421b320c591d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "               public void testForInterfaceDef()", "signatureAfterChange": "               public void testForInterfaceDef()", "diff": ["-      AbstractMethodDef amd = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                                                                               new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      AbstractMethodDef amd2 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                                                                               new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      InterfaceDef id = new InterfaceDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"id\"), new TypeParameter[0], new ReferenceType[0], ", "-                                         new BracedBody(JExprParser.NO_SOURCE_INFO, ", "-                                                        new BodyItemI[] {amd}));", "-      InterfaceDef id2 = new InterfaceDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"id2\"), new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"id\", new Type[0])}, ", "-                                         new BracedBody(JExprParser.NO_SOURCE_INFO, ", "-                                                        new BodyItemI[] {amd2}));", "+      AbstractMethodDef amd = ", "+        new AbstractMethodDef(NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(NO_INFO, \"int\"),", "+                              new Word(NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "+      AbstractMethodDef amd2 = ", "+        new AbstractMethodDef(NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(NO_INFO, \"int\"),", "+                              new Word(NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "+      InterfaceDef id =", "+        new InterfaceDef(NO_INFO, _publicMav, new Word(NO_INFO, \"id\"), new TypeParameter[0], new ReferenceType[0], ", "+                                         new BracedBody(NO_INFO, new BodyItemI[] {amd}));", "+      InterfaceDef id2 =", "+        new InterfaceDef(NO_INFO, _publicMav, new Word(NO_INFO, \"id2\"), new TypeParameter[0],", "+                         new ReferenceType[] {new ClassOrInterfaceType(NO_INFO, \"id\", new Type[0])}, ", "+                         new BracedBody(NO_INFO, new BodyItemI[] {amd2}));", "+      ", "-      MethodData md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], new String[0], sd, amd);", "+      MethodData md = ", "+        new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], ", "+                       new String[0], sd, amd);", "-      MethodData md2 = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], new String[0], sd2, amd2);", "+      MethodData md2 = ", "+        new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0],", "+                       new String[0], sd2, amd2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "303101c936f1a80bda2940a0a12b0ca9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryVisitor.java", "commitBeforeChange": "5e7a16013fcb5945eddc036e2d2d0ce3e14ba2d0", "commitAfterChange": "e1389ddb9dcb8a7d3a230cc1be322481e1c8fd6a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "          public void test_NotAllowed()", "signatureAfterChange": "          public void test_NotAllowed()", "diff": ["-      SourceInfo noInfo = JExprParser.NO_SOURCE_INFO;", "-      Word w = new Word(JExprParser.NO_SOURCE_INFO, \"word\");", "+      SourceInfo noInfo = _noSourceInfo;", "+      Word w = new Word(_noSourceInfo, \"word\");", "-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      ClassOrInterfaceType superClass = new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]);", "+      BracedBody emptyBody = new BracedBody(_noSourceInfo, new BodyItemI[0]);", "+      ClassOrInterfaceType superClass = ", "+        new ClassOrInterfaceType(_noSourceInfo, \"java.lang.Object\", new Type[0]);", "-      Expression e = new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 1);", "+      Expression e = new IntegerLiteral(_noSourceInfo, 1);", "-      ConstructorDef cd = new ConstructorDef(noInfo, new Word(JExprParser.NO_SOURCE_INFO, \"constructor\"), _publicMav, fps, rts, emptyBody);", "+      ConstructorDef cd = ", "+        new ConstructorDef(noInfo, new Word(_noSourceInfo, \"constructor\"), _publicMav, fps, rts, emptyBody);", "-      ForStatement fs = new ForStatement(noInfo, new UnparenthesizedExpressionList(noInfo, new Expression[0]), ", "-                                         new EmptyForCondition(noInfo), new UnparenthesizedExpressionList(noInfo, new Expression[0]), ", "-                                         stmt);", "+      ForStatement fs = ", "+        new ForStatement(noInfo, new UnparenthesizedExpressionList(noInfo, new Expression[0]), ", "+                         new EmptyForCondition(noInfo), new UnparenthesizedExpressionList(noInfo, new Expression[0]), ", "+                         stmt);", "-      SimpleAnonymousClassInstantiation aice = new SimpleAnonymousClassInstantiation(noInfo, tv, ", "-                                                                                     new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0]), ", "-                                                                                     emptyBody);", "+      SimpleAnonymousClassInstantiation aice = ", "+        new SimpleAnonymousClassInstantiation(noInfo, tv, ", "+                                              new ParenthesizedExpressionList(_noSourceInfo, new Expression[0]), ", "+                                              emptyBody);", "-      ComplexAnonymousClassInstantiation aice2 = new ComplexAnonymousClassInstantiation(noInfo, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-                                                                                        tv, ", "-                                                                                        new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0]), ", "-                                                                                        emptyBody);", "+      ComplexAnonymousClassInstantiation aice2 = ", "+        new ComplexAnonymousClassInstantiation(noInfo, ", "+                                               new SimpleNameReference(_noSourceInfo, new Word(_noSourceInfo, \"j\")),", "+                                               tv, ", "+                                               new ParenthesizedExpressionList(_noSourceInfo, new Expression[0]), ", "+                                               emptyBody);", "-      BracedBody hasBitOperator = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                                                                                                      new RightSignedShiftExpression(JExprParser.NO_SOURCE_INFO, ", "-                                                                                                                                                     new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5)))});", "+      BracedBody hasBitOperator = ", "+        new BracedBody(_noSourceInfo, new BodyItemI[] { ", "+        new ExpressionStatement(_noSourceInfo, ", "+                                new RightSignedShiftExpression(_noSourceInfo, ", "+                                                               new SimpleNameReference(_noSourceInfo, ", "+                                                                                       new Word(_noSourceInfo, \"j\")), ", "+                                                               new IntegerLiteral(_noSourceInfo, 5)))});", "-      assertEquals(\"InnerClassDef is not allowed\", \"You cannot define classes inside of other classes at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"InnerClassDef is not allowed\",", "+                   \"You cannot define classes inside of other classes at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"InterfaceDef is not allowed\", \"Interfaces cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"InterfaceDef is not allowed\", \"Interfaces cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"ConstructorDef is not allowed\", \"All methods must have a return type and a name at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"ConstructorDef is not allowed\", ", "+                   \"All methods must have a return type and a name at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"PackageStatement is not allowed\", \"Package statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"PackageStatement is not allowed\", \"Package statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"ImportStatement is not allowed\", \"Import statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"ImportStatement is not allowed\", \"Import statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"SwitchStatement is not allowed\", \"Switch statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"SwitchStatement is not allowed\", \"Switch statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"WhileStatement is not allowed\", \"While statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"WhileStatement is not allowed\", \"While statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"DoStatement is not allowed\", \"Do statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"DoStatement is not allowed\", \"Do statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"ForStatement is not allowed\", \"For statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"ForStatement is not allowed\", \"For statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"BreakStatement is not allowed\", \"Break statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"BreakStatement is not allowed\", \"Break statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"ContinueStatement is not allowed\", \"Continue statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"ContinueStatement is not allowed\", \"Continue statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"ThrowStatement is not allowed\", \"Throw statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"ThrowStatement is not allowed\", \"Throw statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"SynchronizedStatement is not allowed\", \"Synchronized statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"SynchronizedStatement is not allowed\", ", "+                   \"Synchronized statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "-      assertEquals(\"TryCatchStatement is not allowed\", \"Try-catch statements cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"TryCatchStatement is not allowed\", \"Try-catch statements cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"ArrayTypes is not allowed\", \"Arrays cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"ArrayTypes is not allowed\", \"Arrays cannot be used at the Elementary level\",", "+                   errors.getLast().getFirst());", "-      assertEquals(\"ConditionalExpression is not allowed\", \"Conditional expressions cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"ConditionalExpression is not allowed\", ", "+                   \"Conditional expressions cannot be used at the Elementary level\", errors.getLast().getFirst());", "-      assertEquals(\"InstanceofExpression is not allowed\", \"Instanceof cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"InstanceofExpression is not allowed\", \"Instanceof cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"CastExpression is not allowed\", \"Cast expressions cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"CastExpression is not allowed\", \"Cast expressions cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"AnonymousInnerClassExpression is not allowed\", \"Anonymous inner classes cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"AnonymousInnerClassExpression is not allowed\", ", "+                   \"Anonymous inner classes cannot be used at the Elementary level\", errors.getLast().getFirst());", "-      assertEquals(\"AnonymousInnerClassExpression is not allowed\", \"Anonymous inner classes cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"AnonymousInnerClassExpression is not allowed\", ", "+                   \"Anonymous inner classes cannot be used at the Elementary level\", errors.getLast().getFirst());", "-      assertEquals(\"NullLiteral is not allowed\", \"Null cannot be used at the Elementary level\", errors.getLast().getFirst());", "+      assertEquals(\"NullLiteral is not allowed\", \"Null cannot be used at the Elementary level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Bit shifting operators are not allowed\", \"Bit shifting operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"Bit shifting operators are not allowed\", ", "+                   \"Bit shifting operators cannot be used at any language level\", errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5800bf2ef8e806004c10c52bfd3aa42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "          public void testForVariableDeclarationOnly()", "signatureAfterChange": "          public void testForVariableDeclarationOnly()", "diff": ["-      VariableDeclaration vdecl = new VariableDeclaration(JExprParser.NO_SOURCE_INFO,", "+      VariableDeclaration vdecl = new VariableDeclaration(NO_INFO,", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                               new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                               new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                               new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"boolean\"), ", "-                               new Word (JExprParser.NO_SOURCE_INFO, \"field2\"))});", "+        new UninitializedVariableDeclarator(NO_INFO, ", "+                               new PrimitiveType(NO_INFO, \"double\"), ", "+                               new Word (NO_INFO, \"field1\")),", "+        new UninitializedVariableDeclarator(NO_INFO, ", "+                               new PrimitiveType(NO_INFO, \"boolean\"), ", "+                               new Word (NO_INFO, \"field2\"))});", "-//      for (int i = 0; i<vds.size(); i++) {", "-//        System.out.println(vds.get(i).getName() + \" \" + vds.get(i).getMav() + \" \" + vds.get(i).getType().getName() + \" \" +", "-//                           vds.get(i).hasValue() + \" \" + vds.get(i).getEnclosingData().getName());", "-//      }", "+", "-      VariableDeclaration vdecl2 = new VariableDeclaration(JExprParser.NO_SOURCE_INFO,", "+      VariableDeclaration vdecl2 = new VariableDeclaration(NO_INFO,", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                            new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                            new Word (JExprParser.NO_SOURCE_INFO, \"field3\")),", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                            new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                            new Word (JExprParser.NO_SOURCE_INFO, \"field3\"))});", "+        new UninitializedVariableDeclarator(NO_INFO, ", "+                                            new PrimitiveType(NO_INFO, \"double\"), ", "+                                            new Word (NO_INFO, \"field3\")),", "+        new UninitializedVariableDeclarator(NO_INFO, ", "+                                            new PrimitiveType(NO_INFO, \"int\"), ", "+                                            new Word (NO_INFO, \"field3\"))});", "-      assertEquals(\"The error message should be correct\", \"You cannot have two variables with the same name.\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct\", \"You cannot have two variables with the same name.\", ", "+                   errors.get(0).getFirst());"]}], "num": 17304}
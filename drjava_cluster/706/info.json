{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a05684e6b8a15cb5531f092310ac4aa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24c4e18bad0cefcf7ee3acf718194885", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/JVMBuilder.java", "commitBeforeChange": "6a0664a6393270bb5baf40afeb2b4c9fabf7455b", "commitAfterChange": "a1c288a48316b1c91a6ebecbbeffc93089c5ebaa", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public Process start(String mainClass, Iterable<? extends String> mainParams) throws IOException", "signatureAfterChange": "   public Process start(String mainClass, Iterable<? extends String> mainParams) throws IOException", "diff": ["-    debug.logValues(\"Starting JVM\", new String[]{\"command\", \"env\", \"dir\"}, command, env, _dir);", "+    // IMPORTANT: Do not leave this logging message uncommented, or setting debug to an RMILogSink won't work", "+    //debug.logValues(\"Starting JVM\", new String[]{\"command\", \"env\", \"dir\"}, command, env, _dir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8683dbeb184d2b4128c9bc11d2c4eae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "4ae3dba211535b42e36ea3344ccafcfcc3ff3edd", "commitAfterChange": "90464e2ed7c77705e57d251eb7f4b67e377039d6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "    public void testAccessNullFieldsAndFinalLocalVariables()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "signatureAfterChange": "    public void testAccessNullFieldsAndFinalLocalVariables()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "diff": ["-    assertEquals(\"The value of localVar should not have changed\", \"11\", interpret(\"localVar\"));", "+    /* The Following test is commented out TEMPORARILY to work around bug in JDK 1.5 Beta2 JVM */", "+    // assertEquals(\"The value of localVar should not have changed\", \"11\", interpret(\"localVar\"));"]}], "num": 706}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2969e26073064ada2c60b68be3353ff8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e6a132687a0eed3ee537a7c349e532", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneMemoryLeakTest.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private void runIsolatedDrJavaSession() throws InterruptedException, IOException", "signatureAfterChange": "   private void runIsolatedDrJavaSession() throws InterruptedException, IOException", "diff": ["-    WeakReference[] wd = new WeakReference[PANE_COUNT];", "-    WeakReference[] wp = new WeakReference[PANE_COUNT];", "+    List<WeakReference<OpenDefinitionsDocument>> wd = new ArrayList<WeakReference<OpenDefinitionsDocument>>(PANE_COUNT);", "+    List<WeakReference<DefinitionsPane>> wp = new ArrayList<WeakReference<DefinitionsPane>>(PANE_COUNT);", "-      wd[i] = new WeakReference<OpenDefinitionsDocument>(d[i]);", "-      wp[i] = new WeakReference<DefinitionsPane>(p[i]);", "+      wd.add(new WeakReference<OpenDefinitionsDocument>(d[i]));", "+      wp.add(new WeakReference<DefinitionsPane>(p[i]));", "-      assertGC(\"Document \"+i+\" leaked\", wd[i]);", "-      assertGC(\"Pane \"+i+\" leaked\", wp[i]);", "+      assertGC(\"Document \"+i+\" leaked\", wd.get(i));", "+      assertGC(\"Pane \"+i+\" leaked\", wp.get(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdeb001ab99a2bbea1f0cb7b127a85ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "97a825e752ef3da28458a0080f0990b0f0659788", "commitAfterChange": "3f50a00dbfaba534529de5a114a9d7c30612e9a7", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   private boolean wholeWordFoundAtCurrent(OpenDefinitionsDocument doc, int foundOffset)", "signatureAfterChange": "   private boolean wholeWordFoundAtCurrent(OpenDefinitionsDocument doc, int foundOffset)", "diff": ["-   */", "+    */", "-    String docText;", "-    doc.acquireReadLock();", "-    try { docText = doc.getText(); }", "-    finally {doc.releaseReadLock();}      ", "-    ", "-    Character leftOfMatch = null;", "-    Character rightOfMatch = null;", "-    int leftLocation = foundOffset - 1;", "-    int rightLocation = foundOffset + _findWord.length();", "+", "+    char leftOfMatch = 0;   //  forced initialization", "+    char rightOfMatch = 0;  //  forced initialization", "+    int leftLoc = foundOffset - 1;", "+    int rightLoc = foundOffset + _findWord.length();", "+", "+    doc.acquireReadLock();", "+    try { ", "+      try { leftOfMatch = doc.getText(leftLoc, 1).charAt(0); }", "+      catch (BadLocationException e) { leftOutOfBounds = true; }", "+      try { rightOfMatch = doc.getText(rightLoc, 1).charAt(0); }", "+      catch (BadLocationException e) { rightOutOfBounds = true; }", "+    }", "+    finally {doc.releaseReadLock();}      ", "-    try { leftOfMatch = new Character(docText.charAt(leftLocation)); }", "-    catch (IndexOutOfBoundsException e) { leftOutOfBounds = true; }", "-    ", "-    try { rightOfMatch = new Character(docText.charAt(rightLocation)); }", "-    catch (IndexOutOfBoundsException e) { rightOutOfBounds = true; }", "-    ", "-    if (!leftOutOfBounds && !rightOutOfBounds) ", "-      return isDelimiter(rightOfMatch) && isDelimiter(leftOfMatch);", "-    if (!leftOutOfBounds) return isDelimiter(leftOfMatch);", "-    if (!rightOutOfBounds) return isDelimiter(rightOfMatch);", "+    if (! leftOutOfBounds && ! rightOutOfBounds) return isDelimiter(rightOfMatch) && isDelimiter(leftOfMatch);", "+    if (! leftOutOfBounds) return isDelimiter(leftOfMatch);", "+    if (! rightOutOfBounds) return isDelimiter(rightOfMatch);"]}], "num": 21583}
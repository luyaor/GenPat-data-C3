{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "873752169e22ff7deae18718bbb0b1c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ea3831cb367942f3d7a6af559a8a3f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "commitAfterChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testCompileAllFailsDifferentSourceRoots()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException", "diff": ["-  public void testCompileAllFailsDifferentSourceRoots()", "-    throws BadLocationException, IOException", "-  {", "+  public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException {", "+", "-", "-    CompileShouldFailListener listener = new CompileShouldFailListener();", "-    _model.addListener(listener);", "-    _model.getCompilerModel().compileAll();", "+    ", "+    _compileDone = false;", "+    _model.addListener(_failListener);", "+    CompilerModel cm = _model.getCompilerModel();", "+    cm.compileAll();", "+    _waitCompileDone();", "+    ", "-    assertEquals(\"Should have 2 compiler errors\", 2,", "-                 _model.getCompilerModel().getNumErrors());", "-    listener.checkCompileOccurred();", "+    assertEquals(\"Should have 2 compiler errors\", 2, _model.getCompilerModel().getNumErrors());", "+    _failListener.checkCompileOccurred();", "-    assertEquals(_name() + \"Class file exists after failing compile (1)\",", "-                 false,", "-                 compiled.exists());", "+    assertEquals(_name() + \"Class file exists after failing compile (1)\", false, compiled.exists());", "-    assertEquals(_name() + \"Class file exists after failing compile (2)\",", "-                 false,", "-                 compiled2.exists());", "-    _model.removeListener(listener);", "+    assertEquals(_name() + \"Class file exists after failing compile (2)\", false, compiled2.exists());", "+    _model.removeListener(_failListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2aa7e9b07e5ee4d6aed380d18c4303d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsController.java", "commitBeforeChange": "bd3609d73f910b773bb009bd9fec801547e38ce7", "commitAfterChange": "ee77a4b190fe991345758d9ffc949583a7709b61", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public InteractionsController(EclipseInteractionsModel model,                                 SWTDocumentAdapter adapter,                                 InteractionsView view)", "signatureAfterChange": "   public InteractionsController(EclipseInteractionsModel model,                                 SWTDocumentAdapter adapter,                                 InteractionsView view)", "diff": ["-    IPreferenceStore store = EclipsePlugin.getDefault().getPreferenceStore();", "+    Preferences prefs = EclipsePlugin.getDefault().getPluginPreferences();", "+    //IPreferenceStore store = EclipsePlugin.getDefault().getPreferenceStore();", "-    store.addPropertyChangeListener(_preferenceListener);", "-    JFaceResources.getFontRegistry().addListener(_preferenceListener);", "+    _jfacePreferenceListener = new JFacePrefChangeListener();", "+    prefs.addPropertyChangeListener(_preferenceListener);", "+    //store.addPropertyChangeListener(_preferenceListener);", "+    JFaceResources.getFontRegistry().addListener(_jfacePreferenceListener);", "+    _updateJFacePreferences();", "-    _view.getTextPane().setCaretOffset(_doc.getDocLength());", "+    _view.getTextPane().setCaretOffset(_doc.getLength());"]}], "num": 5224}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "429ea6e888260fb516f6f8403c6a4a49", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02202481c89fe958b605648940e74d38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tprotected void checkList(List l, String s, Node n)", "signatureAfterChange": "     protected void checkList(List<Expression> l, String s, Node n)", "diff": ["-\t */", "-\tprotected void checkList(List l, String s, Node n) {", "-\t    ListIterator it = l.listIterator();", "-\t    while (it.hasNext()) {", "-\t\tObject o = ((Node)it.next()).acceptVisitor(this);", "-\t\tif (o != null) {", "-\t\t    if (o instanceof ReferenceType) {", "-\t\t\tthrow new ExecutionError(s, n);", "-\t\t    }", "-\t\t    it.set(o);", "-\t\t}", "-\t    }", "-\t}", "+     */", "+    protected void checkList(List<Expression> l, String s, Node n) {", "+      ListIterator<Expression> it = l.listIterator();", "+      while (it.hasNext()) {", "+        Object o = it.next().acceptVisitor(this);", "+        if (o != null) {", "+          if (o instanceof ReferenceType) {", "+            throw new ExecutionError(s, n);", "+          }", "+          it.set((Expression)o);  // cast to Expression is a guess here /**/", "+        }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8baf195f22b23b2b6bc968e4bf70e58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 78, "signatureBeforeChange": "     private void visitList(List l)", "signatureAfterChange": "   private void visitList(List<Node> l)", "diff": ["+   */", "+  private void visitList(List<Node> l) {", "+    Node n;", "+    ListIterator<Node> it = l.listIterator();", "+    while (it.hasNext()) {", "+      Node o = (n = it.next()).acceptVisitor(this);", "+      if (o != null) {", "+        rejectReferenceType(o,n);", "+        it.set(o);  ", "+      }", "+    }", "+  }", "-     */", "-    private void visitList(List l) {", "-\tNode n;", "-        ListIterator it = l.listIterator();", "-        while (it.hasNext()) {", "-            Object o = (n = (Node)it.next()).acceptVisitor(this);", "-            if (o != null) {", "-                if (o instanceof ReferenceType) {", "-                    throw new ExecutionError(\"malformed.expression\", n);", "-                }", "-\t\tit.set(o);", "-            }", "-        }", "-    }"]}], "num": 25393}
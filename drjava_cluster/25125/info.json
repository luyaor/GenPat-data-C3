{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "826537a359d08afb6433de80ecdd58d2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dde6f63eba911f413ef10b9cde53aa6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "   private static void checkCastStaticRules(Class tc, Class ec, Node n)", "signatureAfterChange": "   private static void checkCastStaticRules(Class tc, Class ec, CastExpression castExp)", "diff": ["-  private static void checkCastStaticRules(Class tc, Class ec, Node n) {", "+  private static void checkCastStaticRules(Class tc, Class ec, CastExpression castExp) {", "-        if (tc == null || !ec.isPrimitive() ||", "-            ec == boolean.class || ec == void.class) {", "-          throw new ExecutionError(\"cast\", n);", "+        boolean isBoxingType = _isBoxingType(ec);", "+        if (ec == null          || ", "+            ec == boolean.class || ", "+            (tc == boolean.class && ec != Boolean.class) ||", "+            !(ec.isPrimitive()  || isBoxingType) ||", "+            ec == void.class) {", "+          throw new ExecutionError(\"cast\", castExp);", "-      } else if (ec != null) {", "+        ", "+        if (isBoxingType) {", "+          castExp.setExpression(_unbox(castExp.getExpression(), ec));", "+        }        ", "+      } ", "+      else if (ec != null) {", "-                throw new ExecutionError(\"cast\", n);", "+                throw new ExecutionError(\"cast\", castExp);", "-            } else {", "-              checkCastStaticRules(tec, eec, n);", "+            } ", "+            else {", "+              checkCastStaticRules(tec, eec, castExp);", "-          } else if (tc.isInterface() && tc != Cloneable.class) {", "-            throw new ExecutionError(\"cast\", n);", "-          } else if (tc != Object.class) {", "-            throw new ExecutionError(\"cast\", n);", "+          } ", "+          else if (tc.isInterface() && tc != Cloneable.class) {", "+            throw new ExecutionError(\"cast\", castExp);", "-        } else if (ec.isInterface()) {", "+          else if (tc != Object.class) {", "+            throw new ExecutionError(\"cast\", castExp);", "+          }", "+        }", "+        else if (ec.isInterface()) {", "-          } else if (tc.isArray()) {", "+          } ", "+          else if (tc.isArray()) {", "-              throw new ExecutionError(\"cast\", n);", "+              throw new ExecutionError(\"cast\", castExp);", "-          } else if (Modifier.isFinal(tc.getModifiers())) {", "+          } ", "+          else if (Modifier.isFinal(tc.getModifiers())) {", "-              throw new ExecutionError(\"cast\", n);", "+              throw new ExecutionError(\"cast\", castExp);", "-        } else if (tc.isInterface()) {", "+        } ", "+        else if (tc.isInterface()) {", "-              throw new ExecutionError(\"cast\", n);", "+              throw new ExecutionError(\"cast\", castExp);", "-        } else if (!ec.isAssignableFrom(tc) && !tc.isAssignableFrom(ec)) {", "-          throw new ExecutionError(\"cast\", n);", "+        }", "+        else if (ec.isPrimitive() && _isBoxingType(tc) && ec != boolean.class) {", "+          castExp.setExpression(_box(castExp.getExpression(), tc));", "+        }", "+        else if (!ec.isAssignableFrom(tc) && !tc.isAssignableFrom(ec)) {", "+          throw new ExecutionError(\"cast\", castExp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fd7f55858cb2656eb193accd06c316a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public Object visit(VariableDeclaration node)", "signatureAfterChange": "   public Object visit(VariableDeclaration node)", "diff": ["-      if (!(c.isPrimitive()                    ||", "-            o == null                          ||", "-            c.isAssignableFrom(o.getClass()))) {", "+      if (!(c.isPrimitive() || o == null || c.isAssignableFrom(o.getClass()))) {", "-      if (node.isFinal()) {", "-        _context.setConstant(node.getName(), o);", "-      } else {", "-        _context.set(node.getName(), o);", "-      }", "-    } else {", "-      if (node.isFinal()) {", "-        _context.setConstant(node.getName(), UninitializedObject.INSTANCE);", "-      } else {", "-        // Non-final variables have default values, and are not uninitialized.", "-        // Primitive variables have special default values, Objects default to null.", "-        // Fixes bug #797515.", "-//        _context.set(node.getName(), UninitializedObject.INSTANCE);", "-        Object value = null;", "-        if (!c.isPrimitive()) {", "-          value = null;", "-        }", "-        else if (c == byte.class) {", "-          value = new Byte((byte)0);", "-        }", "-        else if (c == short.class) {", "-          value = new Short((short)0);", "-        }", "-        else if (c == int.class) {", "-          value = new Integer(0);", "-        }", "-        else if (c == long.class) {", "-          value = new Long(0L);", "-        }", "-        else if (c == float.class) {", "-          value = new Float(0.0f);", "-        }", "-        else if (c == double.class) {", "-          value = new Double(0.0d);", "-        }", "-        else if (c == char.class) {", "-          value = new Character('\\u0000');", "-        }", "-        else if (c == boolean.class) {", "-          value = Boolean.valueOf(false);", "-        }", "-        _context.set(node.getName(), value);", "-      }", "+      if (node.isFinal()) _context.setConstant(node.getName(), o);", "+      else _context.set(node.getName(), o);", "+    } ", "+    else if (node.isFinal()) _context.setConstant(node.getName(), UninitializedObject.INSTANCE);", "+    else {", "+      // Non-final variables have default values, and are not uninitialized.", "+      // Primitive variables have special default values, Objects default to null.", "+      // Fixes bug #797515.", "+//      _context.set(node.getName(), UninitializedObject.INSTANCE);", "+      Object value = null;", "+      if (!c.isPrimitive()) value = null;", "+      else if (c == byte.class)  value = new Byte((byte) 0);", "+      else if (c == short.class) value = new Short((short) 0);", "+      else if (c == int.class) value = new Integer(0);", "+      else if (c == long.class)  value = new Long(0L);", "+      else if (c == float.class) value = new Float(0.0f);", "+      else if (c == double.class) value = new Double(0.0d);", "+      else if (c == char.class) value = new Character('\\u0000');", "+      else if (c == boolean.class)  value = Boolean.valueOf(false);", "+      _context.set(node.getName(), value);"]}], "num": 25125}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27b462f60ca84aa230366fbaf3062fc1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316cc97bf0798588992b742e12ab6a11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "21836dcccd81c2207652ee85b319b723ac9ff10b", "commitAfterChange": "18f7005907576031115bfb0859e7ff6d53506e5e", "methodNumberBeforeChange": 394, "methodNumberAfterChange": 394, "signatureBeforeChange": "   private JMenu _setUpToolsMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpToolsMenu(int mask)", "diff": ["-    // TODO: remove mock entries", "-", "-    ChangeListener extMenuListener = new ChangeListener() {", "-      public void stateChanged(ChangeEvent e) {", "-        _editExternalProcessesAction.setEnabled((extMenu.getItemCount()<2));", "+    ", "+    final int savedCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT);", "+    final int namesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES).size();", "+    final int typesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES).size();", "+    final int cmdlinesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES).size();", "+    final int jvmargsCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS).size();", "+    final int workdirsCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS).size();", "+    if ((savedCount!=namesCount) ||", "+        (savedCount!=typesCount) ||", "+        (savedCount!=cmdlinesCount) ||", "+        (savedCount!=jvmargsCount) ||", "+        (savedCount!=workdirsCount)) {", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_COUNT, 0);", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_NAMES, new Vector<String>());", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_TYPES, new Vector<String>());", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES, new Vector<String>());", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS, new Vector<String>());", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS, new Vector<String>());", "+    }", "+    ", "+    OptionListener<Integer> externalSavedCountListener =", "+      new OptionListener<Integer>() {", "+      public void optionChanged(final OptionEvent<Integer> oce) {", "+        Utilities.invokeLater(new Runnable() {", "+          public void run() {", "+//            for(int i=2; i<extMenu.getItemCount(); ++i) {", "+//              extMenu.remove(2);", "+//            }", "+//            for (int count=1; count<=oce.value; ++count) {", "+//              final int i = count;", "+//              final String name = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES).get(i-1);", "+//              final int savedCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT);", "+//              final int namesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES).size();", "+//              final int typesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES).size();", "+//              final int cmdlinesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES).size();", "+//              final int jvmargsCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS).size();", "+//              final int workdirsCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS).size();", "+//              ", "+//              extMenu.insert(new AbstractAction(name) {", "+//                public void actionPerformed(ActionEvent ae) {", "+//                  if (type.equals(\"cmdline\")) {", "+//                    System.out.println(name+\": cmdline \"+cmdline+\" \"+workdir);", "+//                    // TODO", "+//                  }", "+//                  else if (type.equals(\"java\")) {", "+//                    System.out.println(name+\": java \"+jvmargs+\" \"+cmdline+\" \"+workdir);", "+//                    // TODO", "+//                  }", "+//                }", "+//              },1+i);", "+//            }", "+//            if (oce.value>0) { ", "+//              extMenu.addSeparator();", "+//              extMenu.add(_editExternalProcessesAction);", "+//            }", "+          }", "+        });", "-    extMenu.addChangeListener(extMenuListener);", "+    DrJava.getConfig().addOptionListener(OptionConstants.EXTERNAL_SAVED_COUNT, externalSavedCountListener);", "+    externalSavedCountListener.optionChanged(new OptionEvent<Integer>(OptionConstants.EXTERNAL_SAVED_COUNT,", "+                                                                      DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b9ed092a45d80ad7fc9e79c6ccee974", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1c816952b5b8421dc41f789510e8d7ee742c6828", "commitAfterChange": "5d5ee31a35adeb92d7addaffa7abf0c54d001a85", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 274, "signatureBeforeChange": "    public MainFrame()", "signatureAfterChange": "    public MainFrame()", "diff": ["-    // check for new version if desired by user", "-    boolean askedForNewVersion = false;", "-    if (! DrJava.getConfig().getSetting(OptionConstants.NEW_VERSION_NOTIFICATION)", "-          .equals(OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.get(3)) &&", "-        !edu.rice.cs.util.swing.Utilities.TEST_MODE) {", "-      int days = DrJava.getConfig().getSetting(NEW_VERSION_NOTIFICATION_DAYS);", "-      java.util.Date nextCheck = ", "-        new java.util.Date(DrJava.getConfig().getSetting(OptionConstants.LAST_NEW_VERSION_NOTIFICATION)", "-                             + days * 24L * 60 * 60 * 1000); // x days after last check; 24L ensures long accumulation", "-      if (new java.util.Date().after(nextCheck)) {", "-        askedForNewVersion = true;", "+    // check file associations if desired by user", "+    boolean alreadyShowedDialog = false;", "+    if (PlatformFactory.ONLY.canRegisterFileExtensions()) {", "+      // only try to register file extensions if this platform supports it", "+      if (DrJava.getConfig().getSetting(OptionConstants.FILE_EXT_REGISTRATION)", "+            .equals(OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(2))) { // Always", "+        // always set file associations", "+        PlatformFactory.ONLY.registerDrJavaFileExtensions();", "+        PlatformFactory.ONLY.registerJavaFileExtension();", "+      }", "+      else if (DrJava.getConfig().getSetting(OptionConstants.FILE_EXT_REGISTRATION)", "+                 .equals(OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(1)) && // Ask me", "+               !edu.rice.cs.util.swing.Utilities.TEST_MODE &&", "+               ((!PlatformFactory.ONLY.areDrJavaFileExtensionsRegistered()) ||", "+                (!PlatformFactory.ONLY.isJavaFileExtensionRegistered()))) {", "+        alreadyShowedDialog = true;", "-            NewVersionPopup popup = new NewVersionPopup(MainFrame.this);", "-            if (popup.checkNewVersion()) { popup.setVisible(true); }", "+            int rc;", "+            Object[] options = {\"Yes\", \"No\", \"Always\", \"Never\"};", "+            String text = \"Do you want to associate .java, .drjava and .djapp files with DrJava?\\n\" + ", "+              \"Double-clicking on those files will open them in DrJava.\\n\\n\" +", "+              \"Select 'Always' to let DrJava do this automatically.\\n\"+", "+              \"Select 'Never' if you don't want to be asked again.\\n\\n\"+", "+              \"You can change this setting in the Preferences dialog under\\n\"+", "+              \"Miscellaneous/File Types.\";", "+            ", "+            rc = JOptionPane.showOptionDialog(MainFrame.this, text, \"Set File Associations?\", JOptionPane.YES_NO_OPTION,", "+                                              JOptionPane.QUESTION_MESSAGE, null, options, options[0]);", "+            if ((rc==0) || (rc==2)) { // Yes or Always", "+              PlatformFactory.ONLY.registerDrJavaFileExtensions();", "+              PlatformFactory.ONLY.registerJavaFileExtension();", "+            }", "+            if (rc==2) { // Always", "+              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION, OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(2));", "+            }", "+            if (rc==3) { // Never", "+              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION, OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(0));", "+            }", "-    if (!askedForNewVersion) {", "+    ", "+    if (!alreadyShowedDialog) {", "+      // but only if we haven't just asked if the user wants to download a new version", "+      // two dialogs on program start is too much clutter    ", "+      if (!DrJava.getConfig().getSetting(OptionConstants.NEW_VERSION_NOTIFICATION)", "+            .equals(OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.get(3)) &&", "+          !edu.rice.cs.util.swing.Utilities.TEST_MODE) {", "+        int days = DrJava.getConfig().getSetting(NEW_VERSION_NOTIFICATION_DAYS);", "+        java.util.Date nextCheck = ", "+          new java.util.Date(DrJava.getConfig().getSetting(OptionConstants.LAST_NEW_VERSION_NOTIFICATION)", "+                               + days * 24L * 60 * 60 * 1000); // x days after last check; 24L ensures long accumulation", "+        if (new java.util.Date().after(nextCheck)) {", "+          alreadyShowedDialog = true;", "+          EventQueue.invokeLater(new Runnable() {", "+            public void run() {", "+              NewVersionPopup popup = new NewVersionPopup(MainFrame.this);", "+              if (popup.checkNewVersion()) { popup.setVisible(true); }", "+            }", "+          });", "+        }", "+      }", "+    }", "+    if (!alreadyShowedDialog) {", "+      // ask if the user wants to submit the survey", "+          alreadyShowedDialog = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a88aef8456374d4ece4d98eadc17c107", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "21836dcccd81c2207652ee85b319b723ac9ff10b", "commitAfterChange": "18f7005907576031115bfb0859e7ff6d53506e5e", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 79, "signatureBeforeChange": "   private void _saveCommand()", "signatureAfterChange": "   private void _saveCommand()", "diff": ["-    // TODO", "+    int count = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT) + 1;", "+    ", "+    String name = \"External \"+count;", "+    StringOption nameOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".name\",name);", "+    DrJava.getConfig().getOptionMap().setString(nameOption, name);", "+    ", "+    String type = \"cmdline\";", "+    StringOption typeOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".type\",type);", "+    DrJava.getConfig().getOptionMap().setString(typeOption, type);", "+    ", "+    String cmdline = _commandLine.getText();", "+    StringOption cmdlineOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".cmdline\", cmdline);", "+    DrJava.getConfig().getOptionMap().setString(cmdlineOption, cmdline);", "+    ", "+    String jvmargs = \"\";", "+    StringOption jvmargsOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".jvmargs\",jvmargs);", "+    DrJava.getConfig().getOptionMap().setString(jvmargsOption, jvmargs);", "+    ", "+    String workdir = _commandWorkDirLine.getText();", "+    StringOption workdirOption = new StringOption(OptionConstants.EXTERNAL_SAVED_PREFIX+count+\".workdir\",workdir);", "+    DrJava.getConfig().getOptionMap().setString(workdirOption, workdir);", "+    ", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_COUNT, count);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab79e5198a8a9caba1b83254bb73aae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "e99723007606c50032c4a82ba80b9d94aaabe6bc", "commitAfterChange": "958f548f8cc751514e1497672b492b70657c4b6e", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": "    public JPanel _mainDocumentSelector()", "signatureAfterChange": "    public JPanel _mainDocumentSelector()", "diff": ["-    FileChooser chooser = new FileChooser(projRoot);", "+    final FileChooser chooser = new FileChooser(projRoot);", "-    File mainFile = _getMainFile();", "-    if (mainFile != FileOps.NULL_FILE) chooser.setSelectedFile(mainFile);", "+    //String mainClass = _getMainClass();", "+    File   mainFile  = _getMainFile();", "+    if (mainFile != FileOps.NULL_FILE){", "+      chooser.setSelectedFile(mainFile);", "+    }", "-    _mainDocumentSelector = new FileSelectorComponent(this, chooser, 20, 12f) {", "-      protected void _chooseFile() {", "-        _mainFrame.removeModalWindowAdapter(ProjectPropertiesFrame.this);", "-        super._chooseFile();", "-        _mainFrame.installModalWindowAdapter(ProjectPropertiesFrame.this, LambdaUtil.NO_OP, CANCEL);", "+    _mainDocumentSelector = new JTextField(20){", "+      public Dimension getMaximumSize() {", "+        return new Dimension(Short.MAX_VALUE, super.getPreferredSize().height);", "-    _mainDocumentSelector.getFileField().getDocument().addDocumentListener(_applyListener);", "-    return _mainDocumentSelector;", "+    _mainDocumentSelector.setFont(_mainDocumentSelector.getFont().deriveFont(12f));", "+    _mainDocumentSelector.setPreferredSize(new Dimension(22, 22));", "+    ", "+    _mainDocumentSelector.getDocument().addDocumentListener(_applyListener);", "+    ", "+    JButton selectFile = new JButton(\"...\");", "+    selectFile.addActionListener(new ActionListener(){", "+      public void actionPerformed(ActionEvent e){", "+        int ret = chooser.showOpenDialog(ProjectPropertiesFrame.this);", "+        ", "+        if(ret != JFileChooser.APPROVE_OPTION)", "+          return;", "+        ", "+        File mainClass = chooser.getSelectedFile();", "+        ", "+        File sourceRoot = _model.getProjectRoot();", "+        ", "+        if(sourceRoot == null || mainClass == null)", "+          return;", "+        ", "+        String qualifiedName = mainClass.getAbsolutePath().substring(sourceRoot.getAbsolutePath().length());", "+        ", "+        if(qualifiedName.startsWith(\"\"+File.separatorChar))", "+          qualifiedName = qualifiedName.substring(1);", "+        ", "+        if(qualifiedName.toLowerCase().endsWith(\".java\"))", "+          qualifiedName = qualifiedName.substring(0, qualifiedName.length() - 5);", "+          ", "+        _mainDocumentSelector.setText(qualifiedName.replace(File.separatorChar, '.'));", "+      }", "+    });", "+    ", "+    ", "+    selectFile.setMaximumSize(new Dimension(22, 22));", "+    selectFile.setMargin(new Insets(0, 5 ,0, 5));", "+    ", "+    JPanel toRet = new JPanel();", "+    javax.swing.BoxLayout layout = new javax.swing.BoxLayout(toRet, javax.swing.BoxLayout.X_AXIS);", "+    toRet.setLayout(layout);", "+    toRet.add(_mainDocumentSelector);", "+    toRet.add(selectFile);", "+    ", "+    return toRet;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2c44595699d033a320f5af398fbf886", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e8c00117275c4794f9b044ac36c056a72d163888", "commitAfterChange": "615ff23a704e8a18c51abf1bd9015de115551141", "methodNumberBeforeChange": 331, "methodNumberAfterChange": 331, "signatureBeforeChange": "     public boolean moreSpecificThan(FunctionInvocationCandidate<F> c)", "signatureAfterChange": "     public boolean moreSpecificThan(FunctionInvocationCandidate<F> c)", "diff": ["-      SignatureMatcher m = makeMatcher(c._f.typeParameters(), EMPTY_TYPE_ITERABLE, SymbolUtil.parameterTypes(c._f), ", "-                                       IterUtil.mapSnapshot(SymbolUtil.parameterTypes(_f), EMPTY_EXPRESSION_FOR_TYPE),", "+      Iterable<Type> supParams = SymbolUtil.parameterTypes(c._f);", "+      Iterable<Type> subParams = SymbolUtil.parameterTypes(_f);", "+      if (SymbolUtil.isVararg(c._f)) {", "+        // Adjust param type lists to match arities, if possible.  Can't use SignatureMatcher.matchesWithVarargs()", "+        // because it uses boxing, which is not allowed here.", "+        int supArity = IterUtil.sizeOf(supParams);", "+        int subArity = IterUtil.sizeOf(subParams);", "+        if (SymbolUtil.isVararg(_f)) {", "+          if (subArity < supArity) { // fill in extra sub args", "+            Iterable<Type> prefixSubs = IterUtil.skipLast(subParams);", "+            Type lastSub = IterUtil.last(subParams);", "+            Iterable<Type> subExtras = IterUtil.copy(((ArrayType) lastSub).ofType(), supArity-subArity);", "+            subParams = IterUtil.compose(IterUtil.compose(prefixSubs, subExtras), lastSub);", "+          }", "+          else if (subArity > supArity) {", "+            Iterable<Type> prefixSups = IterUtil.skipLast(supParams);", "+            Type lastSup = IterUtil.last(supParams);", "+            Iterable<Type> supExtras = IterUtil.copy(((ArrayType) lastSup).ofType(), subArity-supArity);", "+            supParams = IterUtil.compose(IterUtil.compose(prefixSups, supExtras), lastSup);", "+          }", "+          // if they're equal, no adjustments are needed", "+        }", "+        else {", "+          // This case doesn't occur in practice, because \"more specific\" is only used to compare", "+          // methods that all match in the same phase (directly, with boxing, or with varargs).", "+          if (subArity < supArity) { supParams = IterUtil.skipLast(supParams); } // allow sub to elide the vararg param", "+          else if (subArity > supArity) {", "+            Iterable<Type> prefixSups = IterUtil.skipLast(supParams);", "+            Type lastSup = IterUtil.last(supParams);", "+            int varargArgs = subArity-(supArity-1); // expect this many args of the vararg type", "+            supParams = IterUtil.compose(prefixSups, IterUtil.copy(((ArrayType) lastSup).ofType(), varargArgs));", "+          }", "+          // if they're equal, no adjustments are needed", "+          // (If lastSup is T..., lastSub might be a subtype of T or of T[].  For the purposes of", "+          // \"more specific\", we arbitrarily require it to be a subtype of T[].)", "+        }", "+      }", "+      SignatureMatcher m = makeMatcher(c._f.typeParameters(), EMPTY_TYPE_ITERABLE, supParams, ", "+                                       IterUtil.mapSnapshot(subParams, EMPTY_EXPRESSION_FOR_TYPE),"]}], "num": 21740}
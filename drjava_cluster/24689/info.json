{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae760e05859b5f5d96c9efc32b66c7eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d92a7eb48d8ae82a852dc13abd2abd1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/ParserTest.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "      public void testSynchronizedStatement() throws ParseException", "signatureAfterChange": "      public void testSynchronizedStatement() throws ParseException", "diff": ["-    List<IdentifierToken> idnt1  = new LinkedList<IdentifierToken>();", "-    idnt1.add(new Identifier(\"mutex\"));", "-    ", "-    List<IdentifierToken> idnt2  = new LinkedList<IdentifierToken>();", "-    idnt2.add(new Identifier(\"i\"));", "-    ", "-    List<IdentifierToken> idnt3 = new LinkedList<IdentifierToken>();", "-    idnt3.add(new Identifier(\"lock\"));", "-    ", "-    stmts.add(new PostIncrement(new QualifiedName(idnt2)));", "-    stmts.add(new ObjectMethodCall(new QualifiedName(idnt3), \"release\", null, \"\", -1, -1, -1, -1));", "+    stmts.add(new PostIncrement(new AmbiguousName(\"i\")));", "+    stmts.add(new ObjectMethodCall(new AmbiguousName(\"lock\"), \"release\", null, \"\", -1, -1, -1, -1));", "-    expectedAST.add(new SynchronizedStatement(new QualifiedName(idnt1),", "+    expectedAST.add(new SynchronizedStatement(new AmbiguousName(\"mutex\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d928249f833d338e137b36a15732f22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVMTest.java", "commitBeforeChange": "23f26b7beff70c50bdf89d599411e87eb533660c", "commitAfterChange": "d270e635809ff45e86dfa41e0144eeb70ed87876", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testAddNamedDebugInterpreter()", "signatureAfterChange": "   public void testAddNamedDebugInterpreter()", "diff": ["-    Hashtable<String,JavaInterpreter> debugInterpreters = InterpreterJVM.ONLY.getDebugInterpreters();", "-    JavaInterpreter interpreter1 = new DynamicJavaAdapter();", "-    JavaInterpreter interpreter2 = new DynamicJavaAdapter();", "-    JavaInterpreter interpreter3 = new DynamicJavaAdapter();", "-", "-    assertTrue(debugInterpreters.isEmpty());", "-    InterpreterJVM.ONLY.addDebugInterpreter(\"interpreter1\", interpreter1);", "-    assertEquals(interpreter1, debugInterpreters.get(\"interpreter1\"));", "-    assertTrue(!debugInterpreters.containsKey(\"interpreter2\"));", "-", "-    InterpreterJVM.ONLY.addDebugInterpreter(\"interpreter2\", interpreter2);", "-    assertEquals(interpreter1, debugInterpreters.get(\"interpreter1\"));", "-    assertEquals(interpreter2, debugInterpreters.get(\"interpreter2\"));", "-", "+    assertTrue(_debugInterpreters.isEmpty());", "+    _addInterpreter(\"interpreter1\", _interpreter1);", "+    assertEquals(_interpreter1, _debugInterpreters.get(\"interpreter1\"));", "+    assertTrue(!_debugInterpreters.containsKey(\"interpreter2\"));", "+    ", "+    _addInterpreter(\"interpreter2\", _interpreter2);", "+    assertEquals(_interpreter1, _debugInterpreters.get(\"interpreter1\"));", "+    assertEquals(_interpreter2, _debugInterpreters.get(\"interpreter2\"));", "+    ", "-      InterpreterJVM.ONLY.addDebugInterpreter(\"interpreter1\", interpreter3);", "+      _addInterpreter(\"interpreter1\", _interpreter3);", "-      assertEquals(interpreter1, debugInterpreters.get(\"interpreter1\"));", "-      assertEquals(interpreter2, debugInterpreters.get(\"interpreter2\"));", "-      assertTrue(!debugInterpreters.contains(interpreter3));", "+      assertEquals(_interpreter1, _debugInterpreters.get(\"interpreter1\"));", "+      assertEquals(_interpreter2, _debugInterpreters.get(\"interpreter2\"));", "+      assertTrue(!_debugInterpreters.contains(_interpreter3));", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65c2f4750c7474d6ade630ed8514391e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/ParserTest.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void testForStatement() throws ParseException", "signatureAfterChange": "      public void testForStatement() throws ParseException", "diff": ["-    ", "-    List<IdentifierToken> idnt1  = new LinkedList<IdentifierToken>();", "-    idnt1.add(new Identifier(\"i\"));", "-    ", "-    List<IdentifierToken> idnt2  = new LinkedList<IdentifierToken>();", "-    idnt2.add(new Identifier(\"something\"));", "-    ", "-    List<IdentifierToken> idnt3  = new LinkedList<IdentifierToken>();", "-    idnt3.add(new Identifier(\"i\"));", "-    ", "-    List<IdentifierToken> idnt4  = new LinkedList<IdentifierToken>();", "-    idnt4.add(new Identifier(\"o\"));", "-    ", "-    args.add(new QualifiedName(idnt2));", "+    args.add(new AmbiguousName(\"something\"));", "-    updt.add(new PostIncrement(new QualifiedName(idnt3)));", "+    updt.add(new PostIncrement(new AmbiguousName(\"i\")));", "-    stmts.add(new ObjectMethodCall(new QualifiedName(idnt4), \"m\", null, \"\", -1, -1, -1, -1));", "+    stmts.add(new ObjectMethodCall(new AmbiguousName(\"o\"), \"m\", null, \"\", -1, -1, -1, -1));", "-                                     new LessExpression(new QualifiedName(idnt1),new ObjectMethodCall(null, \"sizeof\", args, \"\", -1, -1, -1, -1)),", "+                                     new LessExpression(new AmbiguousName(\"i\"),new ObjectMethodCall(null, \"sizeof\", args, \"\", -1, -1, -1, -1)),"]}], "num": 24689}
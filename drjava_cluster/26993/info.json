{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76295afe8183d061a303efa5c1a90862", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c336ed487a9b2ee2f3dd0be0e1a32f33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "                   public void testForSimpleMethodInvocation()", "signatureAfterChange": "                   public void testForSimpleMethodInvocation()", "diff": ["-      MethodInvocation noArgs = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0]));", "-      MethodInvocation oneIntArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5)}));", "-      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new DoubleLiteral(JExprParser.NO_SOURCE_INFO, 4.2)}));", "+      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation oneIntArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c933d9f83a57d2ed9b5799f4499547c8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyElementaryVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "          public void testForVariableDeclarationOnly()", "signatureAfterChange": "          public void testForVariableDeclarationOnly()", "diff": ["-      VariableDeclaration vdecl = new VariableDeclaration(JExprParser.NO_SOURCE_INFO,", "+      VariableDeclaration vdecl = new VariableDeclaration(SourceInfo.NO_INFO,", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                            new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                            new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-          new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                              new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"boolean\"), ", "-                                              new Word (JExprParser.NO_SOURCE_INFO, \"field2\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                            new Word (SourceInfo.NO_INFO, \"field1\")),", "+          new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                              new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "+                                              new Word (SourceInfo.NO_INFO, \"field2\"))});", "-      VariableDeclaration vdecl2 = new VariableDeclaration(JExprParser.NO_SOURCE_INFO,", "+      VariableDeclaration vdecl2 = new VariableDeclaration(SourceInfo.NO_INFO,", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                            new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                            new Word (JExprParser.NO_SOURCE_INFO, \"field3\")),", "-          new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                              new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                              new Word (JExprParser.NO_SOURCE_INFO, \"field3\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                            new Word (SourceInfo.NO_INFO, \"field3\")),", "+          new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                              new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                              new Word (SourceInfo.NO_INFO, \"field3\"))});", "-      assertEquals(\"The error message should be correct\", \"You cannot have two variables with the same name.\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct\", \"You cannot have two variables with the same name.\", ", "+                   errors.get(0).getFirst());"]}], "num": 26993}
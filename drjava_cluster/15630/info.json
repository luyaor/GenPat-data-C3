{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b99a21c6f0a299df3cfe5b6fa3247031", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e7456a2f86de5839e60768deef4171", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 75, "signatureBeforeChange": "   final public Statement ifStatement() throws ParseException", "signatureAfterChange": "   final public Statement ifStatement() throws ParseException", "diff": ["-    t = jj_consume_token(IF);", "-    jj_consume_token(LPAREN);", "-    exp = expression();", "-    jj_consume_token(RPAREN);", "-    stat1 = statement();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case ELSE:", "-      jj_consume_token(ELSE);", "-      stat2 = statement();", "-      break;", "-    default:", "-      jj_la1[68] = jj_gen;", "-      ;", "-    }", "-      if (stat2 == null) {", "-        {if (true) return new IfThenStatement(exp, stat1,", "-                                   filename,", "-                                   t.beginLine,       t.beginColumn,", "-                                   stat1.getEndLine(), stat1.getEndColumn());}", "-      } else {", "-        {if (true) return new IfThenElseStatement(exp, stat1, stat2,", "-                                       filename,", "-                                       t.beginLine,       t.beginColumn,", "-                                       stat2.getEndLine(), stat2.getEndColumn());}", "+    try {", "+      t = jj_consume_token(IF);", "+      jj_consume_token(LPAREN);", "+      exp = expression();", "+      jj_consume_token(RPAREN);", "+      stat1 = statement();", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ELSE:", "+        jj_consume_token(ELSE);", "+        stat2 = statement();", "+        break;", "+      default:", "+        jj_la1[69] = jj_gen;", "+        ;", "+        if (stat2 == null) {", "+          {if (true) return new IfThenStatement(exp, stat1,", "+                                     filename,", "+                                     t.beginLine,       t.beginColumn,", "+                                     stat1.getEndLine(), stat1.getEndColumn());}", "+        } else {", "+          {if (true) return new IfThenElseStatement(exp, stat1, stat2,", "+                                         filename,", "+                                         t.beginLine,       t.beginColumn,", "+                                         stat2.getEndLine(), stat2.getEndColumn());}", "+        }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid if statement\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "068c0f9e151b98203aadaa1eaeec0e71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/autocomplete/parser/ACParser.java", "commitBeforeChange": "aa287bbb1c9881659edc121fbb5e7531149b5808", "commitAfterChange": "31b9f8dbee4928a805aac8571a8f70b93337e1d8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": "   final public BracedBody BracedBody() throws ParseException", "signatureAfterChange": "   final public BracedBody BracedBody() throws ParseException", "diff": ["-    label_6:", "+    label_4:", "-        jj_la1[22] = jj_gen;", "-        break label_6;", "+        jj_la1[20] = jj_gen;", "+        break label_4;", "-      temp = BodyItem();", "-         items.addLast(temp);", "+      try {", "+        temp = BodyItem();", "+           items.addLast(temp);", "+      } catch (ParseException e) {", "+       break;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199d5c256d17c7af1afa1929ce112f32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "0edbfd0db2689eae3c61cbc9503a45692b491afc", "commitAfterChange": "3ec3975ac05203b775027960dbbfc339e26bb562", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void setActiveDocument(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void setActiveDocument(OpenDefinitionsDocument doc)", "diff": ["-    _documentNavigator.setActiveDoc(getIDocGivenODD(doc));", "-    //    _setActiveDoc(getIDocGivenODD(doc));", "+    try {", "+      _documentNavigator.setActiveDoc(getIDocGivenODD(doc));", "+      //    _setActiveDoc(getIDocGivenODD(doc));", "+    } catch(DocumentClosedException dce) {", "+      //noop", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19d8c8db808fb9ba2f33ffdab875d133", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 70, "signatureBeforeChange": "   final public List<Node> blockStatement() throws ParseException", "signatureAfterChange": "   final public List<Node> blockStatement() throws ParseException", "diff": ["-    if (jj_2_29(2147483647)) {", "-      list = localVariableDeclaration();", "-      jj_consume_token(SEMICOLON);", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case FALSE:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case RETURN:", "-      case SHORT:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "-        node = statement();", "+    try {", "+      if (jj_2_40(2147483647)) {", "+        list = localVariableDeclaration();", "+        jj_consume_token(SEMICOLON);", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case RETURN:", "+        case SHORT:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case INCREMENT:", "+        case DECREMENT:", "+          node = statement();", "+        list.add(node);", "+          break;", "+        case CLASS:", "+          node = unmodifiedClassDeclaration(null);", "-        break;", "-      case CLASS:", "-        node = unmodifiedClassDeclaration(null);", "+          break;", "+        case ENUM:", "+          node = unmodifiedEnumDeclaration(null);", "-        break;", "-      case ENUM:", "-        node = unmodifiedEnumDeclaration(null);", "-           list.add(node);", "-        break;", "-      case INTERFACE:", "-        node = unmodifiedInterfaceDeclaration(null);", "-           list.add(node);", "-        break;", "-      default:", "-        jj_la1[60] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+          break;", "+        case INTERFACE:", "+          node = unmodifiedInterfaceDeclaration(null);", "+         list.add(node);", "+          break;", "+        default:", "+          jj_la1[61] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+         {if (true) return list;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid block statement\");", "-       {if (true) return list;}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22210e1c0d5d460f3668ff84958cf8b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugThreadData.java", "commitBeforeChange": "17590567cb9f06269b33249dad955c39164a9028", "commitAfterChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public boolean isSuspended()", "signatureAfterChange": "   public boolean isSuspended()", "diff": ["-    return _thread.isSuspended();", "+    try {", "+      return _thread.isSuspended();", "+    }", "+    catch (ObjectCollectedException oce) {", "+      return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d5ec49e26b1907e929c91e5c73f07b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 83, "signatureBeforeChange": "   final public ContinueStatement continueStatement() throws ParseException", "signatureAfterChange": "   final public ContinueStatement continueStatement() throws ParseException", "diff": ["-    b = jj_consume_token(CONTINUE);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case IDENTIFIER:", "-      id = jj_consume_token(IDENTIFIER);", "-      break;", "-    default:", "-      jj_la1[79] = jj_gen;", "-      ;", "+    try {", "+      b = jj_consume_token(CONTINUE);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case IDENTIFIER:", "+        id = jj_consume_token(IDENTIFIER);", "+        break;", "+      default:", "+        jj_la1[80] = jj_gen;", "+        ;", "+      }", "+      e = jj_consume_token(SEMICOLON);", "+        {if (true) return new ContinueStatement((id != null) ? id.image : null,", "+                                     filename,", "+                                     b.beginLine, b.beginColumn,", "+                                     e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid continue statement\");", "-    e = jj_consume_token(SEMICOLON);", "-      {if (true) return new ContinueStatement((id != null) ? id.image : null,", "-                                   filename,", "-                                   b.beginLine, b.beginColumn,", "-                                   e.endLine,   e.endColumn);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35a255cf953a61ec480093cce1f3971a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 34, "signatureBeforeChange": "   final public TypeDeclaration typeDeclaration() throws ParseException", "signatureAfterChange": "   final public TypeDeclaration typeDeclaration() throws ParseException", "diff": ["-    if (jj_2_6(2147483647)) {", "-      node = classDeclaration();", "-    } else if (jj_2_7(2147483647)) {", "-      node = interfaceDeclaration();", "-    } else {", "-      jj_consume_token(-1);", "-      throw new ParseException();", "+    try {", "+      if (jj_2_6(2147483647)) {", "+        node = classDeclaration();", "+      } else if (jj_2_7(2147483647)) {", "+        node = interfaceDeclaration();", "+      } else {", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+        {if (true) return node;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"invalid declaration\");", "-      {if (true) return node;}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a35c6cf23ca71f0188eb74a0e0254dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": "   final public List StreamItem() throws ParseException", "signatureAfterChange": "   final public List StreamItem() throws ParseException", "diff": ["-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case PACKAGE:", "-      root = packageDeclaration();", "-      break;", "-    case IMPORT:", "-      root = importDeclaration();", "-      break;", "-    default:", "-      jj_la1[3] = jj_gen;", "-      if (jj_2_2(2147483647)) {", "-        root = methodDeclaration();", "-      } else if (jj_2_3(2147483647)) {", "-        l = localVariableDeclaration();", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case SEMICOLON:", "-          jj_consume_token(SEMICOLON);", "-          break;", "-        case 0:", "-          jj_consume_token(0);", "-          break;", "-        default:", "-          jj_la1[2] = jj_gen;", "-          jj_consume_token(-1);", "-          throw new ParseException();", "-        }", "-      } else if (jj_2_4(2147483647)) {", "-        root = topLevelStatement();", "-      } else {", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case ABSTRACT:", "-        case CLASS:", "-        case FINAL:", "-        case INTERFACE:", "-        case NATIVE:", "-        case PRIVATE:", "-        case PROTECTED:", "-        case PUBLIC:", "-        case STATIC:", "-        case SYNCHRONIZED:", "-        case TRANSIENT:", "-        case VOLATILE:", "-          root = typeDeclaration();", "-          break;", "-        default:", "-          jj_la1[4] = jj_gen;", "-          jj_consume_token(-1);", "-          throw new ParseException();", "+    try {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case PACKAGE:", "+        root = packageDeclaration();", "+        break;", "+      case IMPORT:", "+        root = importDeclaration();", "+        break;", "+      default:", "+        jj_la1[3] = jj_gen;", "+        if (jj_2_2(2147483647)) {", "+          root = methodDeclaration();", "+        } else if (jj_2_3(2147483647)) {", "+          l = localVariableDeclaration();", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case SEMICOLON:", "+            jj_consume_token(SEMICOLON);", "+            break;", "+          case 0:", "+            jj_consume_token(0);", "+            break;", "+          default:", "+            jj_la1[2] = jj_gen;", "+            jj_consume_token(-1);", "+            throw new ParseException();", "+          }", "+        } else if (jj_2_4(2147483647)) {", "+          root = topLevelStatement();", "+        } else {", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case ABSTRACT:", "+          case CLASS:", "+          case FINAL:", "+          case INTERFACE:", "+          case NATIVE:", "+          case PRIVATE:", "+          case PROTECTED:", "+          case PUBLIC:", "+          case STATIC:", "+          case SYNCHRONIZED:", "+          case TRANSIENT:", "+          case VOLATILE:", "+            root = typeDeclaration();", "+            break;", "+          default:", "+            jj_la1[4] = jj_gen;", "+            jj_consume_token(-1);", "+            throw new ParseException();", "+          }", "-    }", "-       if (root != null) {", "+        if (root != null) {", "-       }", "-       {if (true) return l;}", "+        }", "+        {if (true) return l;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid Stream Item\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bfd6d49d80ae0d9d236a1f4636696fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   final public List<Node> classBodyDeclaration() throws ParseException", "signatureAfterChange": "   final public List<Node> classBodyDeclaration() throws ParseException", "diff": ["-    if (jj_2_12(2)) {", "-      node = initializer();", "-    } else if (jj_2_13(2147483647)) {", "-      node = classDeclaration();", "-    } else if (jj_2_14(2147483647)) {", "-      node = interfaceDeclaration();", "-    } else if (jj_2_15(2147483647)) {", "-      node = constructorDeclaration();", "-    } else if (jj_2_16(2147483647)) {", "-      node = methodDeclaration();", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NATIVE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case SHORT:", "-      case STATIC:", "-      case SYNCHRONIZED:", "-      case TRANSIENT:", "-      case VOLATILE:", "-      case IDENTIFIER:", "-        list = fieldDeclaration();", "-        break;", "-      case SEMICOLON:", "-        jj_consume_token(SEMICOLON);", "-        break;", "-      default:", "-        jj_la1[22] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+    try {", "+      if (jj_2_12(2)) {", "+        node = initializer();", "+      } else if (jj_2_13(2147483647)) {", "+        node = classDeclaration();", "+      } else if (jj_2_14(2147483647)) {", "+        node = interfaceDeclaration();", "+      } else if (jj_2_15(2147483647)) {", "+        node = constructorDeclaration();", "+      } else if (jj_2_16(2147483647)) {", "+        node = methodDeclaration();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+          list = fieldDeclaration();", "+          break;", "+        case SEMICOLON:", "+          jj_consume_token(SEMICOLON);", "+          break;", "+        default:", "+          jj_la1[23] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+        if (node != null) {", "+          list.add(node);", "+        }", "+        {if (true) return list;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid Member Declaration\");", "-      if (node != null) {", "-        list.add(node);", "-      }", "-      {if (true) return list;}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d18a318c218b4d1b3dc3219af22db34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "c85becb760bfba1d758f97ed5b638fcefd6f6350", "commitAfterChange": "75c6ef317ddc6280ea7699f7367da5542d5fc400", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["+        try {", "+          File sourceRoot = doc.getSourceRoot(); // may throw an InvalidPackageException", "+          ", "+          // doc has valid package name; add it to list of open java source doc files", "+          openDocFiles.add(doc.getCanonicalPath());", "-        // doc has valid package name; add it to list of open java source doc files", "-        openDocFiles.add(doc.getCanonicalPath());", "-        ", "-        String packagePath = doc.getPackageName().replace('.', File.separatorChar);", "-        ", "-        // Add (canonical path name for) build directory for doc to classDirs", "-        ", "-        File sourceRoot = doc.getSourceRoot();", "-        File buildRoot = (buildDir == null) ? sourceRoot: buildDir;", "-        ", "-        File classFileDir = new File(IOUtil.attemptCanonicalFile(buildRoot), packagePath);", "-        ", "-        File sourceDir = ", "-          (buildDir == null) ? classFileDir : new File(IOUtil.attemptCanonicalFile(sourceRoot), packagePath);", "-        ", "-        if (! classDirsAndRoots.containsKey(classFileDir)) {", "-          classDirsAndRoots.put(classFileDir, sourceDir);", "+          String packagePath = doc.getPackageName().replace('.', File.separatorChar);", "+          ", "+          // Add (canonical path name for) build directory for doc to classDirs", "+          ", "+          File buildRoot = (buildDir == null) ? sourceRoot: buildDir;", "+          ", "+          File classFileDir = new File(IOUtil.attemptCanonicalFile(buildRoot), packagePath);", "+          ", "+          File sourceDir = ", "+            (buildDir == null) ? classFileDir : new File(IOUtil.attemptCanonicalFile(sourceRoot), packagePath);", "+          ", "+          if (! classDirsAndRoots.containsKey(classFileDir)) {", "+            classDirsAndRoots.put(classFileDir, sourceDir);", "+          }", "+        catch (InvalidPackageException e) { /* Skip the file, since it doesn't have a valid package */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d38e3ba213a1797be5fa50f9f36420c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "   final public ClassBody classBody() throws ParseException", "signatureAfterChange": "   final public ClassBody classBody() throws ParseException", "diff": ["-    jj_consume_token(LBRACE);", "-    label_8:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case DOUBLE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NATIVE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case SHORT:", "-      case STATIC:", "-      case SYNCHRONIZED:", "-      case TRANSIENT:", "-      case VOID:", "-      case VOLATILE:", "-      case IDENTIFIER:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case LESS:", "-        ;", "-        break;", "-      default:", "-        jj_la1[21] = jj_gen;", "-        break label_8;", "-      }", "-      decl = classBodyDeclaration();", "+    try {", "+      jj_consume_token(LBRACE);", "+      label_8:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case DOUBLE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOID:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case LESS:", "+          ;", "+          break;", "+        default:", "+          jj_la1[22] = jj_gen;", "+          break label_8;", "+        }", "+        decl = classBodyDeclaration();", "-    }", "-    t = jj_consume_token(RBRACE);", "+      }", "+      t = jj_consume_token(RBRACE);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid class body\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4160a62ebc769336bef74b4c687100ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   public File getSaveFile(JFileChooser jfc) throws OperationCanceledException", "signatureAfterChange": "   public File getSaveFile(JFileChooser jfc) throws OperationCanceledException", "diff": ["-    String className = active.getClassName();", "-    if (!className.equals(\"\")) {", "-      jfc.setSelectedFile(new File(jfc.getCurrentDirectory(), className));", "+    try {", "+      String className = active.getFirstTopLevelClassName();", "+      if (!className.equals(\"\")) {", "+        jfc.setSelectedFile(new File(jfc.getCurrentDirectory(), className));", "+      }", "-    //}", "-    int rc = jfc.showSaveDialog(this);//_saveChooser.showSaveDialog(this);", "-    return getChosenFile(jfc, rc);//_saveChooser, rc);", "+    catch (ClassNameNotFoundException e) {", "+      // Don't set selected file", "+    }", "+", "+    int rc = jfc.showSaveDialog(this);", "+    return getChosenFile(jfc, rc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b0b905a23c60c757087ea671d656aae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "cb029f12bd6c2fdcdba02605492a4baf5ca47e02", "commitAfterChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint)", "signatureAfterChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint)", "diff": ["-      _eventManager.deleteEventRequest(breakpoint.getRequest());", "+      try {", "+        _eventManager.deleteEventRequest(breakpoint.getRequest());", "+      }", "+      catch (VMMismatchException vme) {", "+        // Not associated with this VM; probably from a previous session.", "+        // Ignore and make sure it gets removed from the document.", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "501bdb2f44e47978b0ac808e7f323105", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f743eab51273b837fbfd0fee9aa664f2f031c583", "commitAfterChange": "0ad47f4e9ecbbfc43121de14376bb3d222538453", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 230, "signatureBeforeChange": "   void _switchDefScrollPane()", "signatureAfterChange": "   void _switchDefScrollPane()", "diff": ["-      _currentDefPane.setEditable(true);", "+      try{", "+        _currentDefPane.setEditable(true);", "+      }catch(NoSuchDocumentException e){", "+        // it's ok.", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a8e6e94c8a5c39fc5b606920cde4e82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 315, "methodNumberAfterChange": 315, "signatureBeforeChange": "     public void optionChanged (OptionEvent<Vector<File>> oce)", "signatureAfterChange": "     public void optionChanged (OptionEvent<Vector<File>> oce)", "diff": ["-          _interactionsModel.addToClassPath(en.nextElement().getAbsolutePath());", "+        // this forwards directly to InterpreterJVM.addClassPath(String)", "+          try{", "+            _interactionsModel.addExtraClassPath(en.nextElement().toURL());", "+          }catch(MalformedURLException murle){", "+            // dont' add it", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60674ac278f6491c2892b5e394b01919", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public void run(Node node)", "signatureAfterChange": "     public void run(Node node)", "diff": ["-        node.acceptVisitor(this);", "+        try { node.acceptVisitor(this); }", "+        catch (IllegalArgumentException e) { /* thrown by \"empty\" stub nodes -- ignore */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "721f82aa86de60d239aa7f61e7ab3a74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "   final public Node topLevelStatement() throws ParseException", "signatureAfterChange": "   final public Node topLevelStatement() throws ParseException", "diff": ["-    if (jj_2_5(2)) {", "-      node = labeledStatement();", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case LBRACE:", "-        node = block();", "-        break;", "-      case SEMICOLON:", "-        node = emptyStatement();", "-        break;", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FALSE:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case SHORT:", "-      case SUPER:", "-      case THIS:", "-      case TRUE:", "-      case VOID:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case BANG:", "-      case TILDE:", "-      case INCREMENT:", "-      case DECREMENT:", "-      case PLUS:", "-      case MINUS:", "-        node = expression();", "-        jj_consume_token(SEMICOLON);", "-        break;", "-      case IF:", "-        node = ifStatement();", "-        break;", "-      case WHILE:", "-        node = whileStatement();", "-        break;", "-      case DO:", "-        node = doStatement();", "-        break;", "-      case SWITCH:", "-        node = switchStatement();", "-        break;", "-      case FOR:", "-        node = forStatement();", "-        break;", "-      case BREAK:", "-        node = breakStatement();", "-        break;", "-      case CONTINUE:", "-        node = continueStatement();", "-        break;", "-      case RETURN:", "-        node = returnStatement();", "-        break;", "-      case THROW:", "-        node = throwStatement();", "-        break;", "-      case SYNCHRONIZED:", "-        node = synchronizedStatement();", "-        break;", "-      case TRY:", "-        node = tryStatement();", "-        break;", "-      default:", "-        jj_la1[5] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+    try {", "+      if (jj_2_5(2)) {", "+        node = labeledStatement();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LBRACE:", "+          node = block();", "+          break;", "+        case SEMICOLON:", "+          node = emptyStatement();", "+          break;", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case BANG:", "+        case TILDE:", "+        case INCREMENT:", "+        case DECREMENT:", "+        case PLUS:", "+        case MINUS:", "+          node = expression();", "+          jj_consume_token(SEMICOLON);", "+          break;", "+        case IF:", "+          node = ifStatement();", "+          break;", "+        case WHILE:", "+          node = whileStatement();", "+          break;", "+        case DO:", "+          node = doStatement();", "+          break;", "+        case SWITCH:", "+          node = switchStatement();", "+          break;", "+        case FOR:", "+          node = forStatement();", "+          break;", "+        case BREAK:", "+          node = breakStatement();", "+          break;", "+        case CONTINUE:", "+          node = continueStatement();", "+          break;", "+        case RETURN:", "+          node = returnStatement();", "+          break;", "+        case THROW:", "+          node = throwStatement();", "+          break;", "+        case SYNCHRONIZED:", "+          node = synchronizedStatement();", "+          break;", "+        case TRY:", "+          node = tryStatement();", "+          break;", "+        default:", "+          jj_la1[5] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+        {if (true) return node;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid top level statement\");", "-      {if (true) return node;}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3b6d3c26643952674ddc7b69ec08dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "0edbfd0db2689eae3c61cbc9503a45692b491afc", "commitAfterChange": "3ec3975ac05203b775027960dbbfc339e26bb562", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      private void _setActiveDoc(INavigatorItem idoc)", "signatureAfterChange": "      private void _setActiveDoc(INavigatorItem idoc)", "diff": ["-      //Hashtable<INavigatorItem, OpenDefinitionsDocument> docs = getDefinitionsDocumentsTable();", "+    //Hashtable<INavigatorItem, OpenDefinitionsDocument> docs = getDefinitionsDocumentsTable();", "+    try {", "+    } catch(DocumentClosedException dce) {", "+      //noop", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a688f005b249a872ee46914c7ac5204", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public void interpreterResetting()", "signatureAfterChange": "   public void interpreterResetting()", "diff": ["+      ", "+      // Change to a new debug port to avoid conflicts", "+      try {", "+        _createNewDebugPort();", "+      }", "+      catch (IOException ioe) {", "+        // Oh well, leave it at the previous port", "+      }", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "962222610b37c129890352d64b362720", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "c85becb760bfba1d758f97ed5b638fcefd6f6350", "commitAfterChange": "75c6ef317ddc6280ea7699f7367da5542d5fc400", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "diff": ["-      else workDir = getSourceRoot();  // use source root of current document", "-      ", "+      else {", "+        // use source root of current document", "+        try { workDir = getSourceRoot(); }", "+        catch (InvalidPackageException e) { workDir = null; }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1e8405f15d96ce81921db4e3fe178d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "   final public FormalParameter varArgsFormalParameter() throws ParseException", "signatureAfterChange": "   final public FormalParameter varArgsFormalParameter() throws ParseException", "diff": ["-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case FINAL:", "-      f = jj_consume_token(FINAL);", "-      break;", "-    default:", "-      jj_la1[36] = jj_gen;", "-      ;", "-    }", "-    typ = type();", "-    jj_consume_token(VAR_ARGS);", "-    id = jj_consume_token(IDENTIFIER);", "+    try {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case FINAL:", "+        f = jj_consume_token(FINAL);", "+        break;", "+      default:", "+        jj_la1[37] = jj_gen;", "+        ;", "+      }", "+      typ = type();", "+      jj_consume_token(VAR_ARGS);", "+      id = jj_consume_token(IDENTIFIER);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid variable arguments formal parameter\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a83454ba85783bfb955ac9ccf56040af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "8a3aaf6e3fe6fafb27249a8ad4b2c013ef4ae05a", "commitAfterChange": "102797244429ae58868d0037b49467f5a00bbd6a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "   private void _updateActions()", "signatureAfterChange": "   private void _updateActions()", "diff": ["-    _pageTextField.setText(\"\" + (_pageNumber + 1));", "+    try {", "+      _pageChanger.update(_pageNumber + 1);", "+    } catch(Exception e) {", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b23b3fcc79b8c0e10e27c3c94c7c4524", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 69, "signatureBeforeChange": "   final public BlockStatement block() throws ParseException", "signatureAfterChange": "   final public BlockStatement block() throws ParseException", "diff": ["-    p1 = jj_consume_token(LBRACE);", "-    label_20:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case ENUM:", "-      case FALSE:", "-      case FINAL:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case RETURN:", "-      case SHORT:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "-        ;", "-        break;", "-      default:", "-        jj_la1[59] = jj_gen;", "-        break label_20;", "+    try {", "+      p1 = jj_consume_token(LBRACE);", "+      label_20:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case RETURN:", "+        case SHORT:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case INCREMENT:", "+        case DECREMENT:", "+          ;", "+          break;", "+        default:", "+          jj_la1[60] = jj_gen;", "+          break label_20;", "+        }", "+        nodes = blockStatement();", "+        list.addAll(nodes);", "-      nodes = blockStatement();", "-           list.addAll(nodes);", "+      p2 = jj_consume_token(RBRACE);", "+        {if (true) return new BlockStatement(list,", "+                                  filename,", "+                                  p1.beginLine, p1.beginColumn,", "+                                  p2.endLine,   p2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid block statement\");", "-    p2 = jj_consume_token(RBRACE);", "-      {if (true) return new BlockStatement(list,", "-                                filename,", "-                                p1.beginLine, p1.beginColumn,", "-                                p2.endLine,   p2.endColumn);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd5f5411ac27b4dd22be4d60a383bd68", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 82, "signatureBeforeChange": "   final public BreakStatement breakStatement() throws ParseException", "signatureAfterChange": "   final public BreakStatement breakStatement() throws ParseException", "diff": ["-    b = jj_consume_token(BREAK);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case IDENTIFIER:", "-      id = jj_consume_token(IDENTIFIER);", "-      break;", "-    default:", "-      jj_la1[78] = jj_gen;", "-      ;", "+    try {", "+      b = jj_consume_token(BREAK);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case IDENTIFIER:", "+        id = jj_consume_token(IDENTIFIER);", "+        break;", "+      default:", "+        jj_la1[79] = jj_gen;", "+        ;", "+      }", "+      e = jj_consume_token(SEMICOLON);", "+        {if (true) return new BreakStatement((id != null) ? id.image : null,", "+                                  filename,", "+                                  b.beginLine, b.beginColumn,", "+                                  e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid break statement\");", "-    e = jj_consume_token(SEMICOLON);", "-      {if (true) return new BreakStatement((id != null) ? id.image : null,", "-                                filename,", "-                                b.beginLine, b.beginColumn,", "-                                e.endLine,   e.endColumn);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c34f7b022899c7344d3140bfa3d89a5f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 84, "signatureBeforeChange": "   final public ReturnStatement returnStatement() throws ParseException", "signatureAfterChange": "   final public ReturnStatement returnStatement() throws ParseException", "diff": ["-    b = jj_consume_token(RETURN);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case BANG:", "-    case TILDE:", "-    case INCREMENT:", "-    case DECREMENT:", "-    case PLUS:", "-    case MINUS:", "-      exp = expression();", "-      break;", "-    default:", "-      jj_la1[80] = jj_gen;", "-      ;", "+    try {", "+      b = jj_consume_token(RETURN);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FALSE:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case INTEGER_LITERAL:", "+      case LONG_LITERAL:", "+      case FLOAT_LITERAL:", "+      case DOUBLE_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case BANG:", "+      case TILDE:", "+      case INCREMENT:", "+      case DECREMENT:", "+      case PLUS:", "+      case MINUS:", "+        exp = expression();", "+        break;", "+      default:", "+        jj_la1[81] = jj_gen;", "+        ;", "+      }", "+      e = jj_consume_token(SEMICOLON);", "+        {if (true) return new ReturnStatement(exp,", "+                                   filename,", "+                                   b.beginLine, b.beginColumn,", "+                                   e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid return statement\");", "-    e = jj_consume_token(SEMICOLON);", "-      {if (true) return new ReturnStatement(exp,", "-                                 filename,", "-                                 b.beginLine, b.beginColumn,", "-                                 e.endLine,   e.endColumn);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5f53c19044d9678fd3880e1e18c99a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public File[] getSourceRootSet() throws InvalidPackageException", "signatureAfterChange": "   public File[] getSourceRootSet()", "diff": ["-  public File[] getSourceRootSet() throws InvalidPackageException {", "+  public File[] getSourceRootSet() {", "-      OpenDefinitionsDocument doc = (OpenDefinitionsDocument)", "-        _definitionsDocs.get(i);", "-      File root = doc.getSourceRoot();", "+      OpenDefinitionsDocument doc", "+        = (OpenDefinitionsDocument) _definitionsDocs.get(i);", "-      // Don't add duplicate Files, based on path", "-      if (!roots.contains(root)) {", "-        roots.add(root);", "+      try {", "+        File root = doc.getSourceRoot();", "+", "+        // Don't add duplicate Files, based on path", "+        if (!roots.contains(root)) {", "+          roots.add(root);", "+        }", "+      }", "+      catch (InvalidPackageException e) {", "+        // oh well, invalid package statement for this one", "+        // can't add it to roots"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1a1590c2cf87862f3c968bc4765bfed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 53, "signatureBeforeChange": "   final public List<Node> interfaceMemberDeclaration() throws ParseException", "signatureAfterChange": "   final public List<Node> interfaceMemberDeclaration() throws ParseException", "diff": ["-    if (jj_2_21(2147483647)) {", "-      node = classDeclaration();", "-    } else if (jj_2_22(2147483647)) {", "-      node = interfaceDeclaration();", "-    } else if (jj_2_23(2147483647)) {", "-      node = methodDeclaration();", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NATIVE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case SHORT:", "-      case STATIC:", "-      case SYNCHRONIZED:", "-      case TRANSIENT:", "-      case VOLATILE:", "-      case IDENTIFIER:", "-        list = fieldDeclaration();", "-        break;", "-      default:", "-        jj_la1[47] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+    try {", "+      if (jj_2_21(2147483647)) {", "+        node = classDeclaration();", "+      } else if (jj_2_22(2147483647)) {", "+        node = interfaceDeclaration();", "+      } else if (jj_2_23(2147483647)) {", "+        node = methodDeclaration();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+          list = fieldDeclaration();", "+          break;", "+        default:", "+          jj_la1[48] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "-    }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid interface member declaration\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1a6ae3ff0fdfca0d7c8116df88e0952", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "4b6c56880670c4bb0f37de6a58c9d30d501c274a", "commitAfterChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "   public synchronized Vector<DebugThreadData> getCurrentThreadData()     throws DebugException", "signatureAfterChange": "   public synchronized Vector<DebugThreadData> getCurrentThreadData()     throws DebugException", "diff": ["-      threads.addElement(new DebugThreadData(iter.next()));", "+      try {", "+        threads.addElement(new DebugThreadData(iter.next()));", "+      }", "+      catch (ObjectCollectedException e) {", "+        // this thread just died, we don't want to list it anyway", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e30107b3a40c6fde3b48f2b305dc99f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 77, "signatureBeforeChange": "   final public DoStatement doStatement() throws ParseException", "signatureAfterChange": "   final public DoStatement doStatement() throws ParseException", "diff": ["-    t1 = jj_consume_token(DO);", "-    stat = statement();", "-    jj_consume_token(WHILE);", "-    jj_consume_token(LPAREN);", "-    exp = expression();", "-    jj_consume_token(RPAREN);", "-    t2 = jj_consume_token(SEMICOLON);", "-      {if (true) return new DoStatement(exp, stat,", "-                             filename,", "-                             t1.beginLine, t1.beginColumn,", "-                             t2.endLine,   t2.endColumn);}", "+    try {", "+      t1 = jj_consume_token(DO);", "+      stat = statement();", "+      jj_consume_token(WHILE);", "+      jj_consume_token(LPAREN);", "+      exp = expression();", "+      jj_consume_token(RPAREN);", "+      t2 = jj_consume_token(SEMICOLON);", "+        {if (true) return new DoStatement(exp, stat,", "+                               filename,", "+                               t1.beginLine, t1.beginColumn,", "+                               t2.endLine,   t2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid do statement\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e34c6dc3fbc7d95f37c168305fb18d64", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 106, "signatureBeforeChange": "   final public Expression literal() throws ParseException", "signatureAfterChange": "   final public Expression literal() throws ParseException", "diff": ["-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case INTEGER_LITERAL:", "-      t = jj_consume_token(INTEGER_LITERAL);", "-      {if (true) return new IntegerLiteral(t.image,", "-                                filename,", "-                                t.beginLine, t.beginColumn,", "-                                t.endLine,   t.endColumn);}", "-      break;", "-    case LONG_LITERAL:", "-      t = jj_consume_token(LONG_LITERAL);", "-      {if (true) return new LongLiteral(t.image,", "-                             filename,", "-                             t.beginLine, t.beginColumn,", "-                             t.endLine,   t.endColumn);}", "-      break;", "-    case FLOAT_LITERAL:", "-      t = jj_consume_token(FLOAT_LITERAL);", "-      {if (true) return new FloatLiteral(t.image,", "-                              filename,", "-                              t.beginLine, t.beginColumn,", "-                              t.endLine,   t.endColumn);}", "-      break;", "-    case DOUBLE_LITERAL:", "-      t = jj_consume_token(DOUBLE_LITERAL);", "-      {if (true) return new DoubleLiteral(t.image,", "-                               filename,", "-                               t.beginLine, t.beginColumn,", "-                               t.endLine,   t.endColumn);}", "-      break;", "-    case CHARACTER_LITERAL:", "-      t = jj_consume_token(CHARACTER_LITERAL);", "-      {if (true) return new CharacterLiteral(t.image,", "+    try {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case INTEGER_LITERAL:", "+        t = jj_consume_token(INTEGER_LITERAL);", "+        {if (true) return new IntegerLiteral(t.image,", "-      break;", "-    case STRING_LITERAL:", "-      t = jj_consume_token(STRING_LITERAL);", "-      {if (true) return new StringLiteral(t.image,", "+        break;", "+      case LONG_LITERAL:", "+        t = jj_consume_token(LONG_LITERAL);", "+        {if (true) return new LongLiteral(t.image,", "-      break;", "-    case TRUE:", "-      t = jj_consume_token(TRUE);", "-      {if (true) return new BooleanLiteral(true,", "+        break;", "+      case FLOAT_LITERAL:", "+        t = jj_consume_token(FLOAT_LITERAL);", "+        {if (true) return new FloatLiteral(t.image,", "-      break;", "-    case FALSE:", "-      t = jj_consume_token(FALSE);", "-      {if (true) return new BooleanLiteral(false,", "-                                filename,", "-                                t.beginLine, t.beginColumn,", "-                                t.endLine,   t.endColumn);}", "-      break;", "-    case NULL:", "-      t = jj_consume_token(NULL);", "-      {if (true) return new NullLiteral(filename,", "-                             t.beginLine, t.beginColumn,", "-                             t.endLine,   t.endColumn);}", "-      break;", "-    default:", "-      jj_la1[109] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "+        break;", "+      case DOUBLE_LITERAL:", "+        t = jj_consume_token(DOUBLE_LITERAL);", "+        {if (true) return new DoubleLiteral(t.image,", "+                                 filename,", "+                                 t.beginLine, t.beginColumn,", "+                                 t.endLine,   t.endColumn);}", "+        break;", "+      case CHARACTER_LITERAL:", "+        t = jj_consume_token(CHARACTER_LITERAL);", "+        {if (true) return new CharacterLiteral(t.image,", "+                                    filename,", "+                                    t.beginLine, t.beginColumn,", "+                                    t.endLine,   t.endColumn);}", "+        break;", "+      case STRING_LITERAL:", "+        t = jj_consume_token(STRING_LITERAL);", "+        {if (true) return new StringLiteral(t.image,", "+                                 filename,", "+                                 t.beginLine, t.beginColumn,", "+                                 t.endLine,   t.endColumn);}", "+        break;", "+      case TRUE:", "+        t = jj_consume_token(TRUE);", "+        {if (true) return new BooleanLiteral(true,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  t.endLine,   t.endColumn);}", "+        break;", "+      case FALSE:", "+        t = jj_consume_token(FALSE);", "+        {if (true) return new BooleanLiteral(false,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  t.endLine,   t.endColumn);}", "+        break;", "+      case NULL:", "+        t = jj_consume_token(NULL);", "+        {if (true) return new NullLiteral(filename,", "+                               t.beginLine, t.beginColumn,", "+                               t.endLine,   t.endColumn);}", "+        break;", "+      default:", "+        jj_la1[110] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"This is an illegal literal!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7722ccdd6f08b46caa6ae1382b354c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 85, "signatureBeforeChange": "   final public ThrowStatement throwStatement() throws ParseException", "signatureAfterChange": "   final public ThrowStatement throwStatement() throws ParseException", "diff": ["-    b = jj_consume_token(THROW);", "-    exp = expression();", "-    e = jj_consume_token(SEMICOLON);", "-      {if (true) return new ThrowStatement(exp,", "-                                filename,", "-                                b.beginLine, b.beginColumn,", "-                                e.endLine,   e.endColumn);}", "+    try {", "+      b = jj_consume_token(THROW);", "+      exp = expression();", "+      e = jj_consume_token(SEMICOLON);", "+        {if (true) return new ThrowStatement(exp,", "+                                  filename,", "+                                  b.beginLine, b.beginColumn,", "+                                  e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid throw statement\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8086f6dcb1a3091d44dac0bf0269ee2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 50, "signatureBeforeChange": "   final public ConstructorInvocation explicitConstructorInvocation() throws ParseException", "signatureAfterChange": "   final public ConstructorInvocation explicitConstructorInvocation() throws ParseException", "diff": ["-    if (jj_2_20(2147483647)) {", "-      b = jj_consume_token(THIS);", "-      args = arguments();", "-      e = jj_consume_token(SEMICOLON);", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FALSE:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case SHORT:", "-      case SUPER:", "-      case THIS:", "-      case TRUE:", "-      case VOID:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-        if (jj_2_19(2)) {", "-          exp = primaryExpression();", "-          jj_consume_token(DOT);", "-        } else {", "-          ;", "-        }", "-        b = jj_consume_token(SUPER);", "+    try {", "+      if (jj_2_20(2147483647)) {", "+        b = jj_consume_token(THIS);", "-        break;", "-      default:", "-        jj_la1[43] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+          if (jj_2_19(2)) {", "+            exp = primaryExpression();", "+            jj_consume_token(DOT);", "+          } else {", "+            ;", "+          }", "+          b = jj_consume_token(SUPER);", "+          args = arguments();", "+          e = jj_consume_token(SEMICOLON);", "+          break;", "+        default:", "+          jj_la1[44] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "-    }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid constructor invocation\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc3c689ec1a0423a5d216645eaae10e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorCaretListener.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "   public void updateHighlight(int curPos)", "diff": ["-  ", "-      if (_errorListPane.shouldShowHighlightsInSource()) {", "-        // No need to move the caret since it's already here!", "-        _highlightErrorInSource(shouldSelect);", "-      }", "-      _errorListPane.selectItem(errors[shouldSelect]);", "+      try {", "+        _errorListPane.selectItem(errors[shouldSelect]);", "+        ", "+        if (_errorListPane.shouldShowHighlightsInSource()) {", "+          // No need to move the caret since it's already here!", "+          _highlightErrorInSource(shouldSelect);", "+        }", "+      }", "+      catch (IllegalArgumentException e) {", "+        // A new test could perhaps have started before this listener", "+        //  has been reset, so be prepared if it throws an exception.", "+        //  We'll ignore it here, so nothing gets highlighted.", "+      }"]}], "num": 15630}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7d5531372d0656a2ed3dac3b83be3fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a00f1a3985e8aaf0e158e18e52caa938", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Object visit(ForEachStatement node)", "signatureAfterChange": "   public Object visit(ForEachStatement node)", "diff": ["-      }", "-      catch(NoSuchMethodException e) { ", "-        throw new UnexpectedException(e); ", "+      }catch(NoSuchMethodException e){", "+        /* this is very bad */", "-      }", "-      catch(MethodModificationError e) {", "-        throw new UnexpectedException(e); ", "+      }catch(MethodModificationError e){", "+        /* ths is very bad */", "-      exp.setProperty(NodeProperties.TYPE, m.getReturnType());", "+      exp.setProperty(NodeProperties.TYPE,   m.getReturnType());", "-      try { m2 = context.lookupMethod(exp, \"hasNext\", Constants.EMPTY_CLASS_ARRAY); }", "-      catch(NoSuchMethodException e){", "+      try {", "+        m2 = context.lookupMethod(exp, \"hasNext\", Constants.EMPTY_CLASS_ARRAY);", "+      }catch(NoSuchMethodException e){", "-      }", "-      catch(MethodModificationError e){", "+      }catch(MethodModificationError e){", "-      condition.setProperty(NodeProperties.TYPE, m2.getReturnType());", "+      condition.setProperty(NodeProperties.TYPE,   m2.getReturnType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff8b992c2873c8e968ed4a07f51ca0ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Object visit(ForEachStatement node)", "signatureAfterChange": "   public Object visit(ForEachStatement node)", "diff": ["-      }catch(NoSuchMethodException e){", "-        /* this is very bad */", "+      }", "+      catch(NoSuchMethodException e) { ", "+        throw new UnexpectedException(e); ", "-      }catch(MethodModificationError e){", "-        /* ths is very bad */", "+      }", "+      catch(MethodModificationError e) {", "+        throw new UnexpectedException(e); ", "-      exp.setProperty(NodeProperties.TYPE,   m.getReturnType());", "+      exp.setProperty(NodeProperties.TYPE, m.getReturnType());", "-      try {", "-        m2 = context.lookupMethod(exp, \"hasNext\", Constants.EMPTY_CLASS_ARRAY);", "-      }catch(NoSuchMethodException e){", "+      try { m2 = context.lookupMethod(exp, \"hasNext\", Constants.EMPTY_CLASS_ARRAY); }", "+      catch(NoSuchMethodException e){", "-      }catch(MethodModificationError e){", "+      }", "+      catch(MethodModificationError e){", "-      condition.setProperty(NodeProperties.TYPE,   m2.getReturnType());", "+      condition.setProperty(NodeProperties.TYPE, m2.getReturnType());"]}], "num": 3752}
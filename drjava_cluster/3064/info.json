{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71764596bf9d3a2580346e166fbc7a92", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "384d02c15964f78ed00823a310744fad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBraceTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testIsIn2DArray() throws BadLocationException", "signatureAfterChange": "   public void testIsIn2DArray() throws BadLocationException", "diff": ["-    assertTrue(\"At 0.\", ! rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.IndentReason.OTHER));", "-    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At 0.\", ! rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At identifier.\",  ! rule.testApplyRule(_doc, 10, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At start of outer array\", !rule.testApplyRule(_doc, 25, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Before start of inner array\", rule.applyRule(_doc, 50, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Before start of inner array\", rule.testApplyRule(_doc, 50, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Same line as inner {.\", rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Same line as inner {.\", rule.testApplyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line after inner {.\", !rule.testApplyRule(_doc, 75, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is stil in first.\", !rule.testApplyRule(_doc, 180, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Second pseudo array element.\",  rule.applyRule(_doc, 230, Indenter.IndentReason.OTHER));", "-    assertTrue(\"In multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Second pseudo array element.\",  rule.testApplyRule(_doc, 230, Indenter.IndentReason.OTHER));", "+    assertTrue(\"In multi-line comment.\", ! rule.testApplyRule(_doc, 260, Indenter.IndentReason.OTHER));", "-    assertTrue(\"multi-line comment w/ = {.\",  ! rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "+    assertTrue(\"multi-line comment w/ = {.\",  ! rule.testApplyRule(_doc, 275, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line closes multi-line comment.\", !rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.testApplyRule(_doc, 300, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", !rule.testApplyRule(_doc, 399, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Last close brace\",  rule.applyRule(_doc, 400, Indenter.IndentReason.OTHER));", "-    assertTrue(\"At end of document.\",  rule.applyRule(_doc, 401, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Last close brace\",  rule.testApplyRule(_doc, 400, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At end of document.\",  rule.testApplyRule(_doc, 401, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7193e0f6dc84bb38f523be6bdf75e4d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBraceTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testIsIn2DArray() throws BadLocationException", "signatureAfterChange": "   public void testIsIn2DArray() throws BadLocationException", "diff": ["-    assertTrue(\"At DOCSTART.\", ! rule.applyRule(_doc, 0));", "-    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10));", "-    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25));", "+    assertTrue(\"At DOCSTART.\", ! rule.applyRule(_doc, 0, Indenter.OTHER));", "+    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.OTHER));", "+    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.OTHER));", "-    assertTrue(\"Before start of inner array\", rule.applyRule(_doc, 50));", "+    assertTrue(\"Before start of inner array\", rule.applyRule(_doc, 50, Indenter.OTHER));", "-    assertTrue(\"Same line as inner {.\", rule.applyRule(_doc, 54));", "-    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75));", "-    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180));", "+    assertTrue(\"Same line as inner {.\", rule.applyRule(_doc, 54, Indenter.OTHER));", "+    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.OTHER));", "+    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.OTHER));", "-    assertTrue(\"Second pseudo array element.\",  rule.applyRule(_doc, 230));", "-    assertTrue(\"In multi-line comment.\", ! rule.applyRule(_doc, 260));", "+    assertTrue(\"Second pseudo array element.\",  rule.applyRule(_doc, 230, Indenter.OTHER));", "+    assertTrue(\"In multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.OTHER));", "-    assertTrue(\"multi-line comment w/ = {.\",  ! rule.applyRule(_doc, 275));", "+    assertTrue(\"multi-line comment w/ = {.\",  ! rule.applyRule(_doc, 275, Indenter.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300));", "-    assertTrue(\"Line closes multi-line comment.\", !rule.applyRule(_doc, 399));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", !rule.applyRule(_doc, 399, Indenter.OTHER));", "-    assertTrue(\"Last close brace\",  rule.applyRule(_doc, 400));", "-    assertTrue(\"At end of document.\",  rule.applyRule(_doc, 401));", "+    assertTrue(\"Last close brace\",  rule.applyRule(_doc, 400, Indenter.OTHER));", "+    assertTrue(\"At end of document.\",  rule.applyRule(_doc, 401, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da02bf9374c78cc8a3fc6ba5799e49c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBraceTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testIsIn2DArray() throws BadLocationException", "signatureAfterChange": "   public void testIsIn2DArray() throws BadLocationException", "diff": ["-    assertTrue(\"At DOCSTART.\", ! rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.OTHER));", "-    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.OTHER));", "+    assertTrue(\"At DOCSTART.\", ! rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Before start of inner array\", rule.applyRule(_doc, 50, Indenter.OTHER));", "+    assertTrue(\"Before start of inner array\", rule.applyRule(_doc, 50, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Same line as inner {.\", rule.applyRule(_doc, 54, Indenter.OTHER));", "-    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.OTHER));", "-    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.OTHER));", "+    assertTrue(\"Same line as inner {.\", rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Second pseudo array element.\",  rule.applyRule(_doc, 230, Indenter.OTHER));", "-    assertTrue(\"In multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.OTHER));", "+    assertTrue(\"Second pseudo array element.\",  rule.applyRule(_doc, 230, Indenter.IndentReason.OTHER));", "+    assertTrue(\"In multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "-    assertTrue(\"multi-line comment w/ = {.\",  ! rule.applyRule(_doc, 275, Indenter.OTHER));", "+    assertTrue(\"multi-line comment w/ = {.\",  ! rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.OTHER));", "-    assertTrue(\"Line closes multi-line comment.\", !rule.applyRule(_doc, 399, Indenter.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", !rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Last close brace\",  rule.applyRule(_doc, 400, Indenter.OTHER));", "-    assertTrue(\"At end of document.\",  rule.applyRule(_doc, 401, Indenter.OTHER));", "+    assertTrue(\"Last close brace\",  rule.applyRule(_doc, 400, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At end of document.\",  rule.applyRule(_doc, 401, Indenter.IndentReason.OTHER));"]}], "num": 3064}
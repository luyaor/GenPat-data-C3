{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99307c91e01de91c075d14852ab50dcc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aa57d5b5d0104ec8039356e4bdf9944", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "cf0d5a7c9531c826952b4ecc3c4a220f2a907a0c", "commitAfterChange": "1c7e0138b9996497cf68b90499ce66108cdb5ed6", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "    private void _assertIndentInfo(IndentInfo info, String lineEnclosingBraceType, int distToLineEnclosingBraceStart,                                   int distToLineEnclosingBrace, int distToStart)", "signatureAfterChange": "    private void _assertIndentInfo(IndentInfo info, String lineEnclosingBraceType, int distToLineEnclosingBraceStart,                                   int distToLineEnclosingBrace, int distToStart)", "diff": ["-    assertEquals(\"indent info: brace type\", lineEnclosingBraceType, info.lineEnclosingBraceType);", "-    assertEquals(\"indent info: dist to new line\", distToLineEnclosingBraceStart, info.distToLineEnclosingBraceStart);", "-    assertEquals(\"indent info: dist to brace\", distToLineEnclosingBrace, info.distToLineEnclosingBrace);", "-    assertEquals(\"indent info: dist to prev new line\", distToStart, info.distToStart);", "+    assertEquals(\"indent info: brace type\", lineEnclosingBraceType, info.lineEnclosingBraceType());", "+    assertEquals(\"indent info: dist to start of line enclosing brace\", distToLineEnclosingBraceStart, info.distToLineEnclosingBraceStart());", "+    assertEquals(\"indent info: dist to line enclosing brace\", distToLineEnclosingBrace, info.distToLineEnclosingBrace());", "+    assertEquals(\"indent info: dist to start\", distToStart, info.distToStart());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f10ff138bf0d413d4b68c826f26ffa31", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/XMLConfigTest.java", "commitBeforeChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "commitAfterChange": "58507a81b298eda1c95791a37194e9f75288a8af", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r   public void testSetNodeOverwrite() throws Exception", "signatureAfterChange": "   public void testSetNodeOverwrite() throws Exception", "diff": ["-  }\r", "-  public void testSetNodeOverwrite() throws Exception {\r", "-    XMLConfig xc = new XMLConfig();\r", "-    xc.set(\"foo/bar\", \"abc\");\r", "-    \r", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());\r", "-    assertEquals(\"abc\", xc.get(\"foo/bar\"));\r", "-    \r", "-    xc.set(\"foo/bar\", \"def\");\r", "-    \r", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>def</bar>\"+NL+\"</foo>\"+NL, xc.toString());\r", "-    assertEquals(\"def\", xc.get(\"foo/bar\"));\r", "-    \r", "-    xc.set(\"foo\", \"xyz\");\r", "-    \r", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>xyz</foo>\"+NL, xc.toString());\r", "-    assertEquals(\"xyz\", xc.get(\"foo\"));\r", "-  }\r", "+  }", "+  public void testSetNodeOverwrite() throws Exception {", "+    XMLConfig xc = new XMLConfig();", "+    xc.set(\"foo/bar\", \"abc\");", "+    ", "+    assertEquals(remove16XML(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>abc</bar>\"+NL+\"</foo>\"+NL), xc.toString());", "+    assertEquals(\"abc\", xc.get(\"foo/bar\"));", "+    ", "+    xc.set(\"foo/bar\", \"def\");", "+    ", "+    assertEquals(remove16XML(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>def</bar>\"+NL+\"</foo>\"+NL), xc.toString());", "+    assertEquals(\"def\", xc.get(\"foo/bar\"));", "+    ", "+    xc.set(\"foo\", \"xyz\");", "+    ", "+    assertEquals(remove16XML(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"+NL+\"<foo>xyz</foo>\"+NL), xc.toString());", "+    assertEquals(\"xyz\", xc.get(\"foo\"));", "+  }"]}], "num": 24971}
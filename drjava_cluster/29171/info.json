{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60d3ef5e74e654b2424840c60cde1c6b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20d460264d013346b55c14e149daf746", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "          public void saveBeforeCompile()", "signatureAfterChange": "          public void saveBeforeCompile()", "diff": ["-      saveAllFiles(_model, new FileSaveSelector() {", "-        public File getFile() { throw new UnexpectedException (\"Test should not ask for save file name\"); }", "-        public boolean warnFileOpen(File f) { return false; }", "-        public boolean verifyOverwrite() { return true; }", "-        public boolean shouldSaveAfterFileMoved(OpenDefinitionsDocument doc, File oldFile) { return false; }", "-      });", "+      try {", "+        _model.saveAllFiles(new FileSaveSelector() {", "+          public File getFile() { throw new UnexpectedException (\"Test should not ask for save file name\"); }", "+          public boolean warnFileOpen(File f) { return false; }", "+          public boolean verifyOverwrite() { return true; }", "+          public boolean shouldSaveAfterFileMoved(OpenDefinitionsDocument doc, File oldFile) { return false; }", "+        });", "+      }", "+      catch(IOException e) { throw new UnexpectedException(e); }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "807370be48eb8d231f52c2342319ab9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "7ddee5dc15678210d67bde01004f3a1d7919cf7b", "commitAfterChange": "1a6fd1a0e7e181e52da6f98c6b2f1cab31c48798", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp() throws Exception", "signatureAfterChange": "   public void setUp() throws Exception", "diff": ["-    ", "-    // create temp directory for this test", "-    _base = new File(System.getProperty(\"java.io.tmpdir\")).getCanonicalFile();", "-    _parent = IOUtil.createAndMarkTempDirectory(\"proj\", \"\", _base);", "-    _srcDir = new File(_parent, \"src\");", "-    _srcDir.mkdir(); // create the src directory", "-", "-    // create project in a directory with an auxiliary file outside of it", "-    _auxFile = File.createTempFile(\"aux\", \".java\").getCanonicalFile();", "-    File auxFileParent = _auxFile.getParentFile();", "-    _projFile = new File(_parent, \"test.pjt\");", "-    ", "-    _file1 = new File(_srcDir, \"test1.java\");", "-    IOUtil.writeStringToFile(_file1, \"\");  // create dummy file", "-    _file2 = new File(_srcDir, \"test2.java\");", "-    IOUtil.writeStringToFile(_file2, \"\");// create dummy file", "-    ", "+    // Perform Swing setup in event thread because the event thread is ALREADY running", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+      ", "+          // create temp directory for this test", "+          _base = new File(System.getProperty(\"java.io.tmpdir\")).getCanonicalFile();", "+          _parent = IOUtil.createAndMarkTempDirectory(\"proj\", \"\", _base);", "+          _srcDir = new File(_parent, \"src\");", "+          _srcDir.mkdir(); // create the src directory", "+          ", "+          // create project in a directory with an auxiliary file outside of it", "+          _auxFile = File.createTempFile(\"aux\", \".java\").getCanonicalFile();", "+          File auxFileParent = _auxFile.getParentFile();", "+          _projFile = new File(_parent, \"test.pjt\");", "+          ", "+          _file1 = new File(_srcDir, \"test1.java\");", "+          IOUtil.writeStringToFile(_file1, \"\");  // create dummy file", "+          _file2 = new File(_srcDir, \"test2.java\");", "+          IOUtil.writeStringToFile(_file2, \"\");// create dummy file", "+          ", "-    ", "-//    // generate the relative path names for the files in the project file", "-//    String temp = _file1.getParentFile().getCanonicalPath();", "-//    _file1RelName = _file1.getCanonicalPath().substring(temp.length() + 1);", "-//    temp = _file2.getParentFile().getCanonicalPath();", "-//    _file2RelName = _file2.getCanonicalPath().substring(temp.length() + 1);", "-", "-    _projFileText =", "-      \";; DrJava project file.  Written with build: 20040623-1933\\n\" +", "-      \"(source ;; comment\\n\" +", "-      \"   (file (name \\\"src/test1.java\\\")(select 32 32))\" +", "-      \"   (file (name \\\"src/test2.java\\\")(select 32 32)))\";", "-    ", "-    IOUtil.writeStringToFile(_projFile, _projFileText);", "-    ", "-    _frame = new MainFrame();", "-", "-    Utilities.invokeAndWait(new Runnable() { public void run() { _frame.pack(); } });", "-    _model = _frame.getModel();", "+          ", "+          _projFileText =", "+            \";; DrJava project file.  Written with build: 20040623-1933\\n\" +", "+            \"(source ;; comment\\n\" +", "+            \"   (file (name \\\"src/test1.java\\\")(select 32 32))\" +", "+            \"   (file (name \\\"src/test2.java\\\")(select 32 32)))\";", "+          ", "+          IOUtil.writeStringToFile(_projFile, _projFileText);", "+          ", "+          _frame = new MainFrame();", "+          _frame.pack();", "+          _model = _frame.getModel();", "+        }", "+        catch(IOException e) { throw new UnexpectedException(e); }", "+      }", "+    });"]}], "num": 29171}
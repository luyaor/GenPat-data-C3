{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7cdb9cc7349cb598e5e5f0cef2efd6e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f00c26b787f11c0864524305c1cf0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public abstract Pair<Expression, Expression> join(Expression e1, Expression e2)     throws UnsupportedConversionException;", "signatureAfterChange": "   public abstract Type join(Iterable<? extends Type> ts);", "diff": ["+  /** Compute a common supertype of the given list of types. */", "+  public abstract Type join(Iterable<? extends Type> ts);", "-  public abstract Pair<Expression, Expression> join(Expression e1, Expression e2)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf32eaa74e60c6cc0b9c5c6e919b4b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/EmptyRelation.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public Iterator<Pair<T1, T2>> iterator()", "signatureAfterChange": "   public LambdaMap<T1, T2> functionMap()", "diff": ["-  public boolean contains(T1 first, T2 second) { return false; }", "-  public Iterator<Pair<T1, T2>> iterator() { return EmptyIterator.<Pair<T1, T2>>make(); }", "+  public T1 antecedent(T2 second) { return null; }", "+  public LambdaMap<T1, T2> functionMap() { return EmptyMap.make(); }"]}], "num": 5944}
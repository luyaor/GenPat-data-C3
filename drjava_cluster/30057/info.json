{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ea72e13acef5afff4e18bc4802cc057", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c69917d863638bd4b2371906edb5566", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceOnPrevLineTest.java", "commitBeforeChange": "33157731339c994882aa1f63ed4a691707c328ca", "commitAfterChange": "fa574fcc12a57f48a5de7be234043f4f78711418", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testWithParen() throws BadLocationException", "signatureAfterChange": "              public void testWithParen() throws BadLocationException", "diff": ["-", "+    ", "-\t/*", "-\t/* (1)* /", "+\t/* (1) */", "-\t_text = \"boolean method(int[] a, String b) {}\";", "+\t_text = \"method(\\nint[] a, String b) {}\";", "-\tassertTrue(\"There is no previous line.\", !_rule.applyRule(_doc, 0));", "-\tassertTrue(\"There is no previous line.\", !_rule.applyRule(_doc, 12));", "-\tassertTrue(\"There is no previous line.\", !_rule.applyRule(_doc, _text.length() - 1));", "+\ttry { _rule.applyRule(_doc, 0); fail(\"There is no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "-\t/* (2)* /", "+\tassertTrue(\"START's brace ('(') is on the previous line.\", _rule.applyRule(_doc, 8));", "+\tassertTrue(\"START's brace ('(') is on the previous line.\", _rule.applyRule(_doc, _text.length() - 1));", "+", "+\t/* (2) */", "-\tassertTrue(\"There is no previous line.\", !_rule.applyRule(_doc, 18));\t", "+        try { _rule.applyRule(_doc, 18); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "-\t/* (3)* /", "+\t/* (3) */", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 10));", "-\tassertTrue(\"START's brace ('(') is on previous line.\", _rule.applyRule(_doc, 16));", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1));", "+        try { _rule.applyRule(_doc, 10); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "-\t/* (4)* /", "+\tassertTrue(\"START's brace ('(') is on previous line.\", _rule.applyRule(_doc, 16));", "+", "+        try { _rule.applyRule(_doc, _text.length()-1); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "+\t/* (4) */", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 10));", "+        try { _rule.applyRule(_doc, 10); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1));", "-\t/* (5)* /", "+        try { _rule.applyRule(_doc, _text.length()-1); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "+\t/* (5) */", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 10));\t    ", "+        try { _rule.applyRule(_doc, 10); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "-\t/* (6)* /", "+\t/* (6) */", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0));\t    ", "+        try { _rule.applyRule(_doc, 0); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "-\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306c10f4f9b334186bc19c61bb31135c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlusTest.java", "commitBeforeChange": "1cb762451f589947c585a2a219ca59cd916faaa1", "commitAfterChange": "33157731339c994882aa1f63ed4a691707c328ca", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testEmptySuffix() throws BadLocationException", "signatureAfterChange": "       public void testSpaceSuffix() throws BadLocationException", "diff": ["+  public void testSpaceSuffix() throws BadLocationException", "+  {", "+    _action = new ActionBracePlus(\" \");", "-    public void testEmptySuffix() throws BadLocationException", "-    {", "-\t_action = new ActionBracePlus(\"\");", "-\t/*", "-\t// (1) ", "+    // (2) ", "+    ", "+    _text = ", "+     \"var = method(arg1,\\n\"+", "+     \"  arg2, arg3) + 4;\";", "-\t_text = ", "-\t    \"var = method(arg1,\\n\"+", "-\t    \"  arg2, arg3) + 4;\";", "-", "-\t_aligned = ", "-\t    \"var = method(arg1,\\n\"+", "-\t    \"             arg2, arg3) + 4;\";", "-\t", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 18); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 20); // Aligns second line.", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getText(0, _doc.getLength()), _aligned);", "-\t", "-\t// (2) ", "-", "-\t_text = ", "-\t    \"{ /* block1* /\\n\"+", "-\t    \"    { /* block2* /\\n\"+", "-\t    \"        { /* block3* / }\\n\"+", "-\t    \"}\\n\"+", "-\t    \"}\";", "-\t_aligned = ", "-\t    \"{ /* block1* /\\n\"+", "-\t    \"    { /* block2* /\\n\"+", "-\t    \"        { /* block3* / }\\n\"+", "-\t    \"    }\\n\"+", "-\t    \"}\";", "-", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 18); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 34); // Aligns fourth line.", "-\tassertEquals(\"Line aligned to open brace.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open brace.\", _doc.getText(0, _doc.getLength()), _aligned);", "-\t", "-\t// (3) ", "+    _aligned = ", "+     \"var = method(arg1,\\n\"+", "+     \"             arg2, arg3) + 4;\";", "+ ", "+    _setDocText(_text);", "+    _action.indentLine(_doc, 0); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 18); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 20); // Aligns second line.", "+    assertEquals(\"Line aligned to open paren.\", _aligned.length(), _doc.getLength());", "+    assertEquals(\"Line aligned to open paren.\", _aligned, _doc.getText(0, _doc.getLength()));", "+    ", "+    // (3) ", "-\t_text =", "-\t    \"boolean method(\\n\"+", "-\t    \"int[] a, String b)\\n\"+", "-\t    \"{}\";", "-\t_aligned = ", "-\t    \"boolean method(\\n\"+", "-\t    \"               int[] a, String s)\\n\"+", "-\t    \"{}\";", "+    _text =", "+     \"boolean method(\\n\"+", "+     \"int[] a, String b)\\n\"+", "+     \"{}\";", "+    _aligned = ", "+     \"boolean method(\\n\"+", "+     \"               int[] a, String b)\\n\"+", "+     \"{}\";", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 15); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 16); // Aligns second line.", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getText(0, _doc.getLength()), _aligned);", "-\t", "-\t// (4) ", "-\t", "-\t_text =", "-\t    \"boolean method(\\n\"+", "-\t    \"int[] a,\\n\"+", "-\t    \"               String b)\\n\"+", "-\t    \"{}\";", "-\t_aligned = ", "-\t    \"boolean method(\\n\"+", "-\t    \"               int[] a,\\n\"+", "-\t    \"               String b)\\n\"+", "-\t    \"{}\";", "+    _setDocText(_text);", "+    _action.indentLine(_doc, 0); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 15); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 16); // Aligns second line.", "+    assertEquals(\"Line aligned to open paren.\", _aligned.length(), _doc.getLength());", "+    assertEquals(\"Line aligned to open paren.\", _aligned, _doc.getText(0, _doc.getLength()));", "+ ", "+    // (4) ", "+ ", "+    _text =", "+     \"boolean method(\\n\"+", "+     \"int[] a,\\n\"+", "+     \"               String b)\\n\"+", "+     \"{}\";", "+    _aligned = ", "+     \"boolean method(\\n\"+", "+     \"               int[] a,\\n\"+", "+     \"               String b)\\n\"+", "+     \"{}\";", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 15); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 20); // Aligns second line.", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getText(0, _doc.getLength()), _aligned);", "-\t", "-\t// (5) ", "+    _setDocText(_text);", "+    _action.indentLine(_doc, 0); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 15); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 20); // Aligns second line.", "+    assertEquals(\"Line aligned to open paren.\", _aligned, _doc.getText(0, _doc.getLength()));", "+ ", "+    // (5) ", "-\t_text =", "-\t    \"array[\\n\"+", "-\t    \"              new Listener() {\\n\"+", "-\t    \"           method() {\\n\"+", "-\t    \"           }\\n\"+", "-\t    \"      }]\";", "-\t_aligned =", "-\t    \"array[\\n\"+", "-\t    \"      new Listener() {\\n\"+", "-\t    \"           method() {\\n\"+", "-\t    \"           }\\n\"+", "-\t    \"      }]\";", "+    _text =", "+     \"array[\\n\"+", "+     \"              new Listener() {\\n\"+", "+     \"           method() {\\n\"+", "+     \"           }\\n\"+", "+     \"      }]\";", "+    _aligned =", "+     \"array[\\n\"+", "+     \"      new Listener() {\\n\"+", "+     \"           method() {\\n\"+", "+     \"           }\\n\"+", "+     \"      }]\";", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 6); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 10); // Aligns second line.", "-\tassertEquals(\"Line aligned to open bracket.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open bracket.\", _doc.getText(0, _doc.getLength()), _aligned);\t", "-\t*/", "-    }", "+    _setDocText(_text);", "+    _action.indentLine(_doc, 0); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 6); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 10); // Aligns second line.", "+    assertEquals(\"Line aligned to open bracket.\", _aligned, _doc.getText(0, _doc.getLength())); ", "+", "+  }"]}], "num": 30057}
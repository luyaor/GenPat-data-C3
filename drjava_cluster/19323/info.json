{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50e4df80a266cc31890c2987e445e3c0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad2a8bf0805dab5298a9104cac5c9e17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void executeInteraction()", "signatureAfterChange": "   public void executeInteraction()", "diff": ["-   */", "+    */", "-    _model.interpretCurrentInteraction();", "-    _passedCurrent = true;", "-  }", "+    _doc.acquireWriteLock(); ", "+    try {", "+      _passedCurrent = true;", "+      /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "+       * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "+       * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "+       * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "+       * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "+       * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "+       * locked section avoiding the race. */", "+      SwingUtilities.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+    finally { _doc.releaseWriteLock(); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2f2cbd4a8936533a0d04ea7375a554f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    private static void createAndShowGUI(final String[] args)", "signatureAfterChange": "    private static void createAndShowGUI(final String[] args)", "diff": ["-        // This line uses the winlaf-0.5.1.jar in the lib directory to", "-        // install L&F upgrades for windows XP.", "+        // Install L&F upgrades for windows XP from winlaf-0.5.1.jar", "-        ", "-//        // winlaf-0.5 initialization", "-//        try { UIManager.setLookAndFeel(\"net.java.plaf.windows.WindowsLookAndFeel\"); }", "-//        catch (Exception e) {}", "-        ", "-        ", "-       // winlaf-0.4 initialization ", "-       net.java.plaf.LookAndFeelPatchManager.initialize();  //  old winlaf setup", "+       net.java.plaf.LookAndFeelPatchManager.initialize();  ", "-        // Don't use JSR14v20 if running with Java 1.5 because we putting it on the bootclasspath causes DrJava to", "+        // Don't use JSR14v20 if running with Java 1.5 because putting it on the bootclasspath causes DrJava to", "-        _usingJSR14v20 = checkForJSR14v20() && !System.getProperty(\"java.specification.version\").equals(\"1.5\");", "+        _usingJSR14v20 = checkForJSR14v20() && ! System.getProperty(\"java.specification.version\").equals(\"1.5\");", "-        // This enabling of the security manager must happen *after* the mainframe", "-        // is constructed. See bug #518509.", "-", "-        /* setVibible is moved to the end of the eventqueue to be sure all files has finished loading and added to the fileview before the MainFrame is set visible.", "-         * When this was not done, occassionally a NullPointerException was encountered on startup when specifying a file (ex: java -jar drjava.jar somefile.java)", "+        ", "+        /* setVibible is moved to the end of the eventqueue to be sure all files has finished loading and added to the", "+         * fileview before the MainFrame is set visible.  When this was not done, occassionally a NullPointerException ", "+         * was encountered on startup when specifying a file (ex: java -jar drjava.jar somefile.java)", "-        Utilities.invokeLater(new Runnable(){ public void run(){mf.setVisible(true);}});", "+        SwingUtilities.invokeLater(new Runnable(){ public void run(){mf.setVisible(true);}});"]}], "num": 19323}
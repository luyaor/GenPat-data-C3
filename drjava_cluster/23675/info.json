{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94131308cc3f3f4bf207f230bfd6bf51", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c3c63fa9acabb1a4ebe7bbaaf0d006a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/StickyClassLoader.java", "commitBeforeChange": "1b1a2ff927caf38a8f2ba21780232fcbeb4319bb", "commitAfterChange": "5c8f8bcfea00ac2a7a7056ed42a62e0516896606", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected Class loadClass(String name, boolean resolve)    throws ClassNotFoundException", "signatureAfterChange": "   protected Class loadClass(String name, boolean resolve)      throws ClassNotFoundException", "diff": ["-  throws ClassNotFoundException", "+    throws ClassNotFoundException", "-      clazz = getSystemClassLoader().loadClass(name);", "+      try {", "+        clazz = getSystemClassLoader().loadClass(name);", "+      }", "+      catch (ClassNotFoundException e) {", "+        // It might be a non-system class, like javax.mail.*.", "+        //  Fall back on the secondary loader.", "+        clazz = _loadWithSecondary(name);", "+      }", "+      // Don't fall back to secondary if this fails...", "-      // we get the data using getResource because if we just delegate", "-      // the call to loadClass on old or new loader, it will use that", "-      // loader as the associated class loader for the class. that's bad.", "-      try {", "-        String fileName = name.replace('.', '/') + \".class\";", "-", "-        URL resource = getResource(fileName);", "-        if (resource == null) {", "-          throw new ClassNotFoundException(\"Resource not found: \" + fileName);", "-        }", "-", "-        byte[] data = FileOps.readStreamAsBytes(resource.openStream());", "-        try {", "-          clazz = defineClass(name, data, 0, data.length);", "-        }", "-        catch (Error t) {", "-          /*", "-          System.err.println(\"Sticky \" + this + \" error when loading \" + name +", "-                             \" with resolve=\" + resolve + \":\");", "-          */", "-          //t.printStackTrace();", "-          throw t;", "-        }", "-      }", "-      catch (IOException ioe) {", "-        throw new ClassNotFoundException(ioe.toString());", "-      }", "+      // Load with the secondary loader", "+      clazz = _loadWithSecondary(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caab8ee706ba1c445ce42d232625024c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/ClassPathManager.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private ClassLoader buildClassLoader(List<File> path)", "signatureAfterChange": "      public synchronized Iterable<File> getClassPath()", "diff": ["-  /** Builds a new classloader for the list of classpath entries. */", "-  private ClassLoader buildClassLoader(List<File> path) {", "-    List<URL> urls = new LinkedList<URL>();", "-    for (File f : path) {", "-      try {", "-        URL u = f.toURI().toURL();", "-        urls.add(u);", "-      }", "-      catch (MalformedURLException e) { error.log(\"Can't convert file to URL\", e); }", "-    }", "-    return new URLClassLoader(urls.toArray(new URL[urls.size()]), new DeadClassLoader());", "-  }", "+  ", "+  public synchronized Iterable<File> getClassPath() { return _fullPath; }"]}], "num": 23675}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e360407d51fb6e928f8d76802daf7c9c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a79b97910b5ceed441dd22c6c958b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "commitAfterChange": "2df7289d55456372fbaf4e3ab78549d8571648f8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void compileProject() throws IOException", "signatureAfterChange": "   public void compileProject() throws IOException", "diff": ["-    ", "-    List<OpenDefinitionsDocument> defDocs = _model.getOpenDefinitionsDocuments();", "-  ", "-    List<OpenDefinitionsDocument> projectDocs = new LinkedList<OpenDefinitionsDocument>();", "-      ", "-    for (OpenDefinitionsDocument doc : defDocs) {", "-      if (doc.inProjectPath()) projectDocs.add(doc);", "+    if (_prepareForCompile()) {", "+      _doCompile(_model.getProjectDocuments());", "-     ", "-    compile(projectDocs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7305b2dbf1514482b92c9a10181c35b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "diff": ["-    ", "-    try { pr = pr.getCanonicalFile(); }", "+    try {", "+      pr = pr.getCanonicalFile();", "+    }", "-    ", "-    INavigatorItemFilter<OpenDefinitionsDocument> navItem1 = new INavigatorItemFilter<OpenDefinitionsDocument>() {", "+    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getSourceBinTitle(),", "+                                                                          new INavigatorItemFilter<OpenDefinitionsDocument>() {", "-    };", "+    }));", "-    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getSourceBinTitle(), navItem1));", "-    ", "-    INavigatorItemFilter<OpenDefinitionsDocument> navItem2 = new INavigatorItemFilter<OpenDefinitionsDocument>() {", "+    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getAuxiliaryBinTitle(),", "+                                                                          new INavigatorItemFilter<OpenDefinitionsDocument>() {", "-    };", "+    }));", "-    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getAuxiliaryBinTitle(), navItem2));", "-    ", "-    INavigatorItemFilter<OpenDefinitionsDocument> navItem3 = new INavigatorItemFilter<OpenDefinitionsDocument>() {", "+    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getExternalBinTitle(),", "+                                                                          new INavigatorItemFilter<OpenDefinitionsDocument>() {", "-    };", "-                                                                          ", "-    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getExternalBinTitle(), navItem3));", "-                                                                    ", "+    }));", "+    ", "-      new AWTContainerNavigatorFactory<OpenDefinitionsDocument>().", "-      makeTreeNavigator(projfilepath, getDocumentNavigator(), l);", "+      new AWTContainerNavigatorFactory<OpenDefinitionsDocument>().makeTreeNavigator(projfilepath, getDocumentNavigator(), l);", "+//    synchronized(_auxiliaryFiles) {", "+//      _auxiliaryFiles.clear();", "+//      for (File file: auxFiles) { _auxiliaryFiles.add(file); }", "+//    }", "+    ", "+//    Utilities.show(\"Project Root loaded into grouping state is \" + projRoot);", "+    ", "-                                                      auxFiles, excludedFiles, projectClassPaths, createJarFile, ", "-                                                      createJarFlags, autoRefresh));", "+                                                      auxFiles, excludedFiles, projectClassPaths, createJarFile, createJarFlags, ", "+                                                      autoRefresh));", "-          getDebugger().toggleBreakpoint(odd, odd._getOffset(lnr), lnr, dbd.isEnabled()); ", "+          odd.acquireReadLock();", "+          try { getDebugger().toggleBreakpoint(odd, odd._getOffset(lnr), lnr, dbd.isEnabled()); }", "+          finally { odd.releaseReadLock(); }", "-          if (getOpenDefinitionsDocuments().contains(odd)) { // bookmark is not stale", "-            final Position startPos = odd.createPosition(bm.getStartOffset());", "-            final Position endPos = odd.createPosition(bm.getEndOffset());", "-            try { getBookmarkManager().addRegion(new DocumentRegion(odd, startPos, endPos)); }", "-            catch(Exception e) { DrJavaErrorHandler.record(e); }  // should never happen", "-          }", "-          // should remove stale bookmark", "+          final Position startPos = odd.createPosition(bm.getStartOffset());", "+          final Position endPos = odd.createPosition(bm.getEndOffset());", "+          getBookmarkManager().addRegion(new DocumentRegion(odd, startPos, endPos));"]}], "num": 28838}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5f369384e0c43f9820322bde40eed09", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11832dcf8d30ce40693ec3dda00a4b18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "signatureAfterChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "diff": ["-    _runJUnit();", "+    listener.runJUnit(_model.getJUnitModel());", "-//    Utilities.show(\"First test complete\");", "+    _log.log(\"First test of NoValidTests complete\");", "-    OpenDefinitionsDocument doc = setupDocument(NON_TESTCASE_TEXT);", "+    _model.addListener(listener2);", "+    _log.log(\"Second listener added to model\");", "+     OpenDefinitionsDocument doc = setupDocument(NON_TESTCASE_TEXT);", "-    doc.startCompile();", "+", "+    listener2.compile(doc);", "+    listener2.checkCompileOccurred();", "+    _log.log(\"Resetting compile counts\");", "-    doc = setupDocument(MONKEYTEST_PASS_TEXT);", "-    file = new File(_tempDir, \"MonkeyTestPass.java\");", "-    doc.saveFile(new FileSelector(file));", "-    _model.addListener(listener2);", "-    ", "-    _runJUnit();", "+    // Opending Test", "+    File file2 = new File(_tempDir, \"MonkeyTestPass.java\");", "+    OpenDefinitionsDocument doc2 = setupDocument(MONKEYTEST_PASS_TEXT);", "+    doc2.saveFile(new FileSelector(file2));", "+    listener2.runJUnit(_model.getJUnitModel());", "+    ", "+    _log.log(\"testJUnitAllWithNoValidTests completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21385c1ff7127d5997edfd662ee75734", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void testJUnitAllWithErrors() throws Exception", "signatureAfterChange": "   public void testJUnitAllWithErrors() throws Exception", "diff": ["-    JUnitNonTestListener listener = new JUnitNonTestListener(true);", "+    OpenDefinitionsDocument doc2 = setupDocument(MONKEYTEST_FAIL_TEXT);", "+    File file2 = new File(_tempDir, \"MonkeyTestFail.java\");", "-    doc.startCompile();", "-    doc = setupDocument(MONKEYTEST_FAIL_TEXT);", "-    file = new File(_tempDir, \"MonkeyTestFail.java\");", "-    doc.saveFile(new FileSelector(file));", "-    doc.startCompile();", "+    doc2.saveFile(new FileSelector(file2));", "+    JUnitNonTestListener listener = new JUnitNonTestListener(true);", "+    listener.compile(doc);", "+    listener.checkCompileOccurred();", "+    listener.resetCompileCounts();", "+    listener.compile(doc2);", "+    listener.checkCompileOccurred();", "-    _runJUnit();", "+    listener.runJUnit(_model.getJUnitModel());", "+    ", "+    _log.log(\"testJUnitAllWithErrors completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "391a105595389fd6e21c876f41a3046a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "         public void testActiveAndInactive()", "signatureAfterChange": "         public void testActiveAndInactive()", "diff": ["-    SingleDisplayModel _model = _frame.getModel();", "+    SingleDisplayModel _model = _frame.getModel();  // creates a frame with a new untitled document and makes it active", "-    _model.newFile();", "+    DefinitionsPane pane1, pane2;", "+    Document doc1, doc2;", "-    DefinitionsPane currpane, oldpane;", "-    Document ddoc, olddoc;", "+    pane1 = _frame.getCurrentDefPane(); ", "+    doc1 = pane1.getDocument();", "+    assertTrue(\"the active pane should have an open definitions document\", doc1 instanceof OpenDefinitionsDocument);", "-    currpane = _frame.getCurrentDefPane();", "+    _model.newFile();  // creates a new untitled document and makes it active", "+    pane2 = _frame.getCurrentDefPane();  ", "+    doc2 = pane2.getDocument();", "-    ddoc = currpane.getDocument();", "-    assertTrue(\"the active pane should have an open defintions document\", ddoc instanceof OpenDefinitionsDocument);", "+    assertTrue(\"the active pane should have an open definitions document\", doc2 instanceof OpenDefinitionsDocument);", "-    _model.setActiveNextDocument();", "-    oldpane = currpane;", "-    currpane = _frame.getCurrentDefPane();", "-    olddoc = oldpane.getDocument();", "-    ddoc = currpane.getDocument();", "-    assertFalse(\"the old pane should not have an open defintions document\", olddoc instanceof OpenDefinitionsDocument);", "-    assertTrue(\"the active pane should have an open defintions document\", ddoc instanceof OpenDefinitionsDocument);", "+    _model.setActiveNextDocument();    // makes doc1 active", "+    DefinitionsPane pane = _frame.getCurrentDefPane();", "+    assertEquals(\"Confirm that next pane is the other pane\", pane1, pane);", "+    ", "+    assertTrue(\"pane2 should have an open definitions document\", doc2 instanceof OpenDefinitionsDocument);", "+    assertTrue(\"pane1 should have an open definitions document\", doc1 instanceof OpenDefinitionsDocument);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b411ab8f4fd21a3e012cc4a85ad7a0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testJUnitStaticInnerClass() throws Exception", "signatureAfterChange": "   public void testJUnitStaticInnerClass() throws Exception", "diff": ["-    JUnitNonTestListener listener = new JUnitNonTestListener(true);", "+    OpenDefinitionsDocument doc2 = setupDocument(STATIC_INNER_TEST_TEXT);", "+    File file2 = new File(_tempDir, \"StaticInnerTestCase.java\");", "-    doc.startCompile();", "-    doc = setupDocument(STATIC_INNER_TEST_TEXT);", "-    file = new File(_tempDir, \"StaticInnerTestCase.java\");", "-    doc.saveFile(new FileSelector(file));", "-    doc.startCompile();", "-    _model.addListener(listener);", "+    doc2.saveFile(new FileSelector(file2));", "-    _runJUnit();", "+    JUnitNonTestListener listener = new JUnitNonTestListener(true);", "+    _model.addListener(listener);", "+    listener.compile(doc);", "+    listener.checkCompileOccurred();", "+    listener.resetCompileCounts();", "+    listener.compile(doc2);", "+    listener.checkCompileOccurred();", "+    ", "+    listener.runJUnit(_model.getJUnitModel());", "-    if (printMessages) System.out.println(\"----testJUnitAllWithNoErrors-----\");  ", "+    if (printMessages) System.out.println(\"----testJUnitAllWithNoErrors-----\"); ", "+    ", "+    _log.log(\"testJUnitStaticInnerClass completed\");"]}], "num": 1234}
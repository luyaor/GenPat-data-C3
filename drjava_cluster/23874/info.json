{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4096442063da3245144e373b183f04c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "599b19a0614c19bfc14c0b1e6cf6e0c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e90dbd1bb170d6fe2e453ef725d9c5a3af468fcc", "commitAfterChange": "e653942b63325e47383bb429e833afeb308dbf22", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public OpenDefinitionsDocument getODDForDocument(Document doc)", "signatureAfterChange": "   public OpenDefinitionsDocument getODDForDocument(Document doc)", "diff": ["-    Iterator<OpenDefinitionsDocument> odds = _documentsRepos.valuesIterator();", "-    while(odds.hasNext())", "-    {", "-      OpenDefinitionsDocument odd = odds.next();", "-      if(doc == odd.getDocument())", "-      {", "-        return odd;", "-      }", "+    if (! (doc instanceof DefinitionsDocument) ) {", "+      throw new IllegalStateException(\"Could not get the OpenDefinitionsDocument for Document: \" + doc);", "-    throw new UnexpectedException(new IllegalStateException(\"Could not get the OpenDefinitionsDocument for Document: \" + doc));", "+    return ((DefinitionsDocument)doc).getOpenDefDoc();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e2df45147576c1f144daa7f6a88365", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "e193e4674aaab3350b36cbc521ecf3bf9c098bc6", "commitAfterChange": "6c31f49b491d4a01bd2ddbae62b5ee4f76d52129", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   private void _findAll()", "signatureAfterChange": "   private void _findAll()", "diff": ["-      ", "+//      Utilities.show(\"Searching complete\");", "-      HashSet<OpenDefinitionsDocument> reverted = new HashSet<OpenDefinitionsDocument>();", "+//      HashSet<OpenDefinitionsDocument> reverted = new HashSet<OpenDefinitionsDocument>();", "-        if (reverted.contains(fr.getDocument())) {", "-          // skipping document because we have previously noticed that it has been modified,", "-          // i.e. the document is in the reverted list", "-          continue;", "-        }", "+//        if (reverted.contains(fr.getDocument())) {", "+//          // skipping document because we have previously noticed that it has been modified,", "+//          // i.e. the document is in the reverted list", "+//          continue;", "+//        }", "+//        final OpenDefinitionsDocument doc = fr.getDocument();", "+          ", "+          // The following were commented out because they require doc to be loaded as a Definitions (Swing) Document,", "+          // but results processing presumes this access in many places", "+// Text only alternative to preceding two statements commented out          ", "+//          String text = doc.getText();", "+//          final int len = text.length();", "+//          int i = endSel;", "+//          while (i < len && text.charAt(i) != '\\n') ++i;", "+//          final int excerptEndSel = i;", "+//          ", "+//          i = startSel;", "+//          while (i >= 0 && text.charAt(i) != '\\n') --i; // the end of the line", "+//          final int excerptStartSel = i + 1;              // either 0 or the beginning of the line", "+            ", "-          for(int i = 0; i < s.length(); ++i) {", "-            if (s.charAt(i) < ' ' || s.charAt(i) > 127) { sb.append(' '); } else { sb.append(s.charAt(i)); }", "+          for (int j = 0; j < s.length(); ++j) {", "+            sb.append((s.charAt(j) < ' ' || s.charAt(j) > 127) ? ' ' :  s.charAt(j));", "-          for(int i = 0; i < s.length(); ++i) {", "-            if (! Character.isWhitespace(s.charAt(i))) break;", "+          for (int j = 0; j < s.length(); ++j) {", "+            if (! Character.isWhitespace(s.charAt(j))) break;", "-        catch (FileMovedException fme) {", "-          throw new UnexpectedException(fme);", "-        }", "-        catch (BadLocationException ble) {", "-          throw new UnexpectedException(ble);", "-        }", "+        catch (FileMovedException fme) { throw new UnexpectedException(fme); }", "+        catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "-          else {", "-            panel.freeResources();", "-          }", "+          else { panel.freeResources(); }"]}], "num": 23874}
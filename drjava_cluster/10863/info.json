{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a74b47e45c1eb1438173c5887698d8a6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40859d3cfeb30f81275ef3bca3b96d93", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testStartsWithPrefixNoText() throws BadLocationException", "signatureAfterChange": "   public void testStartsWithPrefixNoText() throws BadLocationException", "diff": ["-    assertTrue(\"line before brace (no space)\", !rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"just before brace (no space)\", rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "-    assertTrue(\"just after brace (no space)\", rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line after brace (no space)\", !rule.applyRule(_doc, 10, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line before brace (no space)\", !rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just before brace (no space)\", rule.testApplyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just after brace (no space)\", rule.testApplyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after brace (no space)\", !rule.testApplyRule(_doc, 10, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line before brace (with space)\", !rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"just before brace (with space)\", rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "-    assertTrue(\"just after brace (with space)\", rule.applyRule(_doc, 11, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line after brace (with space)\", !rule.applyRule(_doc, 14, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line before brace (with space)\", !rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just before brace (with space)\", rule.testApplyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just after brace (with space)\", rule.testApplyRule(_doc, 11, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after brace (with space)\", !rule.testApplyRule(_doc, 14, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49183686927b5f7b4e721a65aeb19f26", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStartsWithPrefixWithText() throws BadLocationException", "signatureAfterChange": "   public void testStartsWithPrefixWithText() throws BadLocationException", "diff": ["-    assertTrue(\"line before brace (no space)\", !rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"just before brace (no space)\", rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "-    assertTrue(\"just after brace (no space)\", rule.applyRule(_doc, 9, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line after brace (no space)\", !rule.applyRule(_doc, 15, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line before brace (no space)\", !rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just before brace (no space)\", rule.testApplyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just after brace (no space)\", rule.testApplyRule(_doc, 9, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after brace (no space)\", !rule.testApplyRule(_doc, 15, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line before star (with space)\", !rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"just before star (with space)\", rule.applyRule(_doc, 4, Indenter.IndentReason.OTHER));", "-    assertTrue(\"just after star (with space)\", rule.applyRule(_doc, 6, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line after star (with space)\", !rule.applyRule(_doc, 15, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line before star (with space)\", !rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just before star (with space)\", rule.testApplyRule(_doc, 4, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just after star (with space)\", rule.testApplyRule(_doc, 6, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after star (with space)\", !rule.testApplyRule(_doc, 15, Indenter.IndentReason.OTHER));"]}], "num": 10863}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2f5b920a3a6809003d1bb29ada6344c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17a929850de47ee192dbc5c291b4a9f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(final int curPos)", "signatureAfterChange": "   public void updateHighlight(final int curPos)", "diff": ["-//    assert EventQueue.isDispatchThread();  // violated during undo in DefinitionsPaneTest", "-//    Utilities.invokeLater(new Runnable() { ", "-//      public void run() { ", "-    ErrorPanel panel = _frame.getSelectedErrorPanel();", "-    if (panel == null) {", "-      // no error panel is currently selected", "-      return;", "-    }", "-    CompilerErrorModel model =  panel.getErrorModel();", "-    ", "-    if (!model.hasErrorsWithPositions(_openDoc)) return;", "-    ", "-//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "-    ", "-    CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "-    ", "-    ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "-    // if no error is on this line, select the (none) item", "-    if (error == null) errorListPane.selectNothing();", "-    else {      ", "-      if (errorListPane.shouldShowHighlightsInSource()) {", "-        // No need to move the caret since it's already here!", "-        _highlightErrorInSource(model.getPosition(error));", "+    Utilities.invokeLater(new Runnable() { public void run() { ", "+      ErrorPanel panel = _frame.getSelectedErrorPanel();", "+      if (panel == null) {", "+        // no error panel is currently selected", "+        return;", "+      CompilerErrorModel model =  panel.getErrorModel();", "-      // Select item wants the CompilerError", "-      errorListPane.selectItem(error);", "+      if (!model.hasErrorsWithPositions(_openDoc)) return;", "+      ", "+//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "+      ", "+      CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "+      ", "+      ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "+      // if no error is on this line, select the (none) item", "+      if (error == null) errorListPane.selectNothing();", "+      else {      ", "+        if (errorListPane.shouldShowHighlightsInSource()) {", "+          // No need to move the caret since it's already here!", "+          _highlightErrorInSource(model.getPosition(error));", "+        }", "+        ", "+        // Select item wants the CompilerError", "+        errorListPane.selectItem(error);", "+      }", "-//      }", "-//    });", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c7de8089e08008f6c91e19bf144c59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void removeHighlight()", "signatureAfterChange": "   public void removeHighlight()", "diff": ["-    _definitionsPane.removeErrorHighlight();", "+    Utilities.invokeLater(new Runnable() { public void run() { _definitionsPane.removeErrorHighlight(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e3c6a541b602ca6036d6e3bdf876abc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 419, "methodNumberAfterChange": 430, "signatureBeforeChange": "          public void saveBeforeJavadoc()", "signatureAfterChange": "          public void saveBeforeJavadoc()", "diff": ["-      _saveAllBeforeProceeding", "-        (\"To run Javadoc, you must first save ALL modified files.\\n\" +", "-         \"Would you like to save and then run Javadoc?\",", "-         ALWAYS_SAVE_BEFORE_JAVADOC,", "-         \"Always save before running Javadoc\");", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          _saveAllBeforeProceeding", "+            (\"To run Javadoc, you must first save ALL modified files.\\n\" +", "+             \"Would you like to save and then run Javadoc?\",", "+             ALWAYS_SAVE_BEFORE_JAVADOC,", "+             \"Always save before running Javadoc\");", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a53abc6b6418ede88718234d8629bf7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 449, "methodNumberAfterChange": 452, "signatureBeforeChange": "   public void installActiveDocument()", "signatureAfterChange": "   public void installActiveDocument()", "diff": ["-  public void installActiveDocument() { _notifier.activeDocumentChanged(_activeDocument); }", "+  public void installActiveDocument() { ", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.activeDocumentChanged(_activeDocument); } });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "924f29f15e5864ce2952632212c72068", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 421, "methodNumberAfterChange": 433, "signatureBeforeChange": "          public void filePathContainsPound()", "signatureAfterChange": "          public void filePathContainsPound()", "diff": ["-      if (DrJava.getConfig().getSetting(WARN_PATH_CONTAINS_POUND).booleanValue()) {", "-        String msg =", "-          \"Files whose paths contain the '#' symbol cannot be used in the\\n\" +", "-          \"Interactions Pane due to a bug in Java's file to URL conversion.\\n\" +", "-          \"It is suggested that you change the name of the directory\\n\" +", "-          \"containing the '#' symbol.\";", "-        ", "-        String title = \"Path Contains Pound Sign\";", "-        ", "-        ConfirmCheckBoxDialog dialog =", "-          new ConfirmCheckBoxDialog(MainFrame.this, title, msg,", "-                                    \"Do not show this message again\",", "-                                    JOptionPane.WARNING_MESSAGE,", "-                                    JOptionPane.DEFAULT_OPTION);", "-        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {", "-          DrJava.getConfig().setSetting(WARN_PATH_CONTAINS_POUND, Boolean.FALSE);", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          if (DrJava.getConfig().getSetting(WARN_PATH_CONTAINS_POUND).booleanValue()) {", "+            String msg =", "+              \"Files whose paths contain the '#' symbol cannot be used in the\\n\" +", "+              \"Interactions Pane due to a bug in Java's file to URL conversion.\\n\" +", "+              \"It is suggested that you change the name of the directory\\n\" +", "+              \"containing the '#' symbol.\";", "+            ", "+            String title = \"Path Contains Pound Sign\";", "+            ", "+            ConfirmCheckBoxDialog dialog =", "+              new ConfirmCheckBoxDialog(MainFrame.this, title, msg,", "+                                        \"Do not show this message again\",", "+                                        JOptionPane.WARNING_MESSAGE,", "+                                        JOptionPane.DEFAULT_OPTION);", "+            if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {", "+              DrJava.getConfig().setSetting(WARN_PATH_CONTAINS_POUND, Boolean.FALSE);", "+            }", "+          }", "-      }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1563d632ea9cc2b8733c1fd9bb6c8fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 670, "methodNumberAfterChange": 680, "signatureBeforeChange": "     public void junitStarted()", "signatureAfterChange": "          public void junitStarted()", "diff": ["-    /** Only runs in event thread. */", "+    ", "-      /* Note: hourglassOn() is done by various junit commands (other than junitClasses); hourglass must be off ", "+      /* Note: simpleHourglassOn() is done by various junit commands (other than junitClasses); hourglass must be off ", "-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() {", "-      // new ScrollableDialog(null, \"Ready for hourglassOn in junitStarted\", \"\", \"\").show();", "-      ", "-      try { showTab(_junitErrorPanel, true);", "-        _junitErrorPanel.setJUnitInProgress();", "-        // _junitAction.setEnabled(false);", "-        // _junitAllAction.setEnabled(false);", "-      }", "-      finally { hourglassOff(); }  ", "-//        }", "-//      });", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          // new ScrollableDialog(null, \"Ready for hourglassOn in junitStarted\", \"\", \"\").show();", "+          ", "+          try { showTab(_junitErrorPanel, true);", "+            _junitErrorPanel.setJUnitInProgress();", "+            // _junitAction.setEnabled(false);", "+            // _junitAllAction.setEnabled(false);", "+          }", "+          finally { hourglassOff(); }  ", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b911fe9df20e0f602c677f9c49d3f27e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "commitAfterChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public void junitJVMReady()", "signatureAfterChange": "   public void junitJVMReady()", "diff": ["-    if (! _testInProgress) return;", "-    ", "-    JUnitError[] errors = new JUnitError[1];", "-    errors[0] = new JUnitError(\"Previous test suite was interrupted\", true, \"\");", "-    _junitErrorModel = new JUnitErrorModel(errors, _model, true);", "-    _notifyJUnitEnded();", "-    _testInProgress = false;", "+    Utilities.invokeLater(new Runnable() { public void run() { ", "+      if (! _testInProgress) return;", "+      ", "+      JUnitError[] errors = new JUnitError[1];", "+      errors[0] = new JUnitError(\"Previous test suite was interrupted\", true, \"\");", "+      _junitErrorModel = new JUnitErrorModel(errors, _model, true);", "+      _notifyJUnitEnded();", "+      _testInProgress = false;", "+    }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce87377c90fc34d9e41f4fb81d5c84c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 418, "methodNumberAfterChange": 428, "signatureBeforeChange": "          public void saveBeforeCompile()", "signatureAfterChange": "          public void saveBeforeCompile()", "diff": ["-      _saveAllBeforeProceeding", "-        (\"To compile, you must first save ALL modified files.\\n\" + \"Would you like to save and then compile?\",", "-         ALWAYS_SAVE_BEFORE_COMPILE,", "-         \"Always save before compiling\");", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          _saveAllBeforeProceeding", "+            (\"To compile, you must first save ALL modified files.\\n\" + \"Would you like to save and then compile?\",", "+             ALWAYS_SAVE_BEFORE_COMPILE,", "+             \"Always save before compiling\");", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dddf876c9e85fac09b6dafc6b5a33b71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "commitAfterChange": "7816bebb52027e20286d4bdb830f3c6885132322", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction()", "diff": ["-    * interaction (which depends on the state of the interactions pane).*/", "+  /** Interprets the current given text at the prompt in the interactions doc. May run outside the event thread. */", "-//    assert EventQueue.isDispatchThread();  // violated in GlobalModelIOTest, InteractionsModelTest", "-    if (_document.inProgress()) return;  // Don't start a new interaction while one is in progress", "-    ", "-    String text = _document.getCurrentInteraction();", "-    String toEval = text.trim();", "-    if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() {", "+        ", "+        if (_document.inProgress()) return;  // Don't start a new interaction while one is in progress", "+        ", "+        String text = _document.getCurrentInteraction();", "+        String toEval = text.trim();", "+        if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);", "-    _prepareToInterpret(toEval);  // Writes a newLine!", "-    final String evalText = toEval;", "+        _prepareToInterpret(toEval);  // Writes a newLine!", "+        final String evalText = toEval;", "-    new Thread(new Runnable() { ", "-      public void run() { ", "-        try { interpret(evalText); } ", "-        catch(Throwable t) { DrJavaErrorHandler.record(t); }", "-      } ", "-    }).start(); ", "+        new Thread(new Runnable() { ", "+          public void run() { ", "+            try { interpret(evalText); } ", "+            catch(Throwable t) { DrJavaErrorHandler.record(t); }", "+          } ", "+        }).start(); ", "+      }", "+    });"]}], "num": 295}
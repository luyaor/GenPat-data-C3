{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2963049c1d3080ae2cefda36a2971439", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131934cf716bd1e34126096f033b212a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/GlobalModelTest.java", "commitBeforeChange": "2ec67558fcc2be0c684677fea7ee9feb674b02bc", "commitAfterChange": "a937ccbbfe3e2271b14c781e19a341556df45efe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public void testNewFromFileMenu()", "signatureAfterChange": "    public void testOpenFileDisallowAbandon()     throws BadLocationException, IOException", "diff": ["-  ", "-  public void testNewFromFileMenu() {", "-    _gm.newFile();", "-    assertEquals(\"#0.0\", \"newFile \", _recorder.getEventList());", "-    assertTrue(\"#0.1\", !_gm.isModifiedSinceSave());", "-  }", "+", "+  public void testOpenFileDisallowAbandon()", "+    throws BadLocationException, IOException", "+  {", "+    _setupDocument(FOO_TEXT);", "+", "+    TestListener listener = new TestListener() {", "+      public boolean canAbandonFile(File file) {", "+        _canAbandonCount++;", "+        return false; // no, don't abandon our document!!!", "+      }", "+    };", "+", "+    _model.addListener(listener);", "+    _model.openFile(new FileSelector(new File(\"junk-doesnt-exist\")));", "+    _assertAbandonCount(1);", "+    _assertModified(true);", "+    _assertContents(FOO_TEXT);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aabdd8c22fc5869a81bb58b0261298b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "03dd354632fbfc12bf279640160bfd934404dc39", "commitAfterChange": "2714f88d04f312c23b21ec6a440193d44b7121ba", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public void testRevertFile()     throws BadLocationException, IOException, OperationCanceledException,       AlreadyOpenException", "signatureAfterChange": "   public void testRevertFile()     throws BadLocationException, IOException, OperationCanceledException,       AlreadyOpenException", "diff": ["+ ", "+        catch (FileMovedException fme) {", "+          // We know file should exist", "+          fail(\"file does not exist\");", "+        }", "-     fileRevertedCount++;", "+        fileRevertedCount++;", "-", "-  ", "-  assertEquals(\"original doc unmodified\",doc.isModifiedSinceSave(), false);", "-  changeDocumentText(BAR_TEXT, doc);", "-  assertEquals(\"doc now modified\",doc.isModifiedSinceSave(), true);", "-  doc.revertFile();", "-  assertEquals(\"doc reverted\",doc.isModifiedSinceSave(), false);", "-  assertContents(FOO_TEXT, doc);", "+    ", "+    assertEquals(\"original doc unmodified\",doc.isModifiedSinceSave(), false);", "+    changeDocumentText(BAR_TEXT, doc);", "+    assertEquals(\"doc now modified\",doc.isModifiedSinceSave(), true);", "+    tempFile1.delete();", "+    try {", "+      doc.revertFile();", "+      fail(\"File should not be on disk.\");", "+    }", "+    catch (FileMovedException fme) {", "+      // Revert should not take place because file is not there.", "+    }", "+    assertEquals(\"doc NOT reverted\",doc.isModifiedSinceSave(), true);", "+    assertContents(BAR_TEXT, doc);"]}], "num": 23922}
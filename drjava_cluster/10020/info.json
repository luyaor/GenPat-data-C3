{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b9848db572ff58cdf6b4ac206a47411", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8d5339c701b80ff292587482d44761", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "e8a0105912243dc0845b7fe1aad605d049915d0a", "commitAfterChange": "f5dccb0b4004cfd3f184330e53ba101eca68857c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["+        else {", "+          JDKToolsLibrary.msg(\"\\tlibrary is not valid: compiler=\"+lib.compiler().isAvailable()+", "+                              \" debugger=\"+lib.debugger().isAvailable()+\" javadoc=\"+lib.javadoc().isAvailable());", "+        }", "-            (javaVersion.release()==compoundVersion.release())) {", "+            (javaVersion.release()==compoundVersion.release()) &&", "+            (javaVersion.supports(compoundLib.jdkDescriptor().getMinimumMajorVersion()))) {", "-          if (javaVersion.majorVersion().equals(compoundVersion.majorVersion())) {", "+          if (javaVersion.majorVersion().equals(compoundVersion.majorVersion()) &&", "+              javaVersion.supports(compoundLib.jdkDescriptor().getMinimumMajorVersion())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94b4fab088ec6418829c123da2ce6365", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ea5caceb61fece070d7111a62941070cf2982769", "commitAfterChange": "997d67839eca4386dbc5f66cebcd8a080dee4cfc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testHighlightKeywords1() throws BadLocationException", "signatureAfterChange": "   public void testHighlightKeywords1() throws BadLocationException", "diff": ["-    assertEquals(\"vector length\", 8, v.size());", "+    assertEquals(\"vector length\", 12, v.size());", "-    assertEquals(HighlightStatus.KEYWORD, v.elementAt(4).getState());", "+    assertEquals(HighlightStatus.TYPE, v.elementAt(4).getState());", "+", "+    assertEquals(HighlightStatus.TYPE, v.elementAt(8).getState());", "+    assertEquals(HighlightStatus.NORMAL, v.elementAt(9).getState());", "+    assertEquals(HighlightStatus.NUMBER, v.elementAt(10).getState());", "+    assertEquals(HighlightStatus.NORMAL, v.elementAt(11).getState());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fef953ea00b44d9049568815f7353d17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "6f37af6087e88b55d504fabdb6eee22be7ba1948", "commitAfterChange": "7fcdc5820c7f1c50a17a282e38bc904783e87e7f", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public int showDialog(File initialSelection)", "signatureAfterChange": "   public int showDialog(File initialSelection)", "diff": ["+    dialog.setLocation((int)(_owner.getLocation().getX() + (_owner.getSize().width - dialog.getSize().width)/2),", "+                       (int)(_owner.getLocation().getY() + (_owner.getSize().height - dialog.getSize().height)/2));"]}], "num": 10020}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bec6ac5e3c73b09c0590de77f7c553e0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1da2913d2323c3bf9c05e224a540cd99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CompilerErrorPanel.java", "commitBeforeChange": "af3d2665565d850db91ca07a41202bb19156c449", "commitAfterChange": "a15a570889469947d6859d812e2ec610a2daaec7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "    private void _selectError(int newIndex)", "signatureAfterChange": "    private void _selectError(int newIndex)", "diff": ["+", "-", "-      int prevNewline = text.lastIndexOf(NEWLINE, errPos);", "+     ", "+      // Look for the previous newline BEFORE this character. Thus start looking", "+      // on the character one before this character. If this is not the case,", "+      // if the error is at a newline character, both prev and next newlines", "+      // will be set to that place, resulting in nothing being highlighted.", "+      int prevNewline = text.lastIndexOf(NEWLINE, errPos - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a70ca697cd50a48c9262ebd0cfb2326c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "af3d2665565d850db91ca07a41202bb19156c449", "commitAfterChange": "a15a570889469947d6859d812e2ec610a2daaec7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "    private void _selectError(int newIndex)", "signatureAfterChange": "    private void _selectError(int newIndex)", "diff": ["+", "-", "-      int prevNewline = text.lastIndexOf(NEWLINE, errPos);", "+     ", "+      // Look for the previous newline BEFORE this character. Thus start looking", "+      // on the character one before this character. If this is not the case,", "+      // if the error is at a newline character, both prev and next newlines", "+      // will be set to that place, resulting in nothing being highlighted.", "+      int prevNewline = text.lastIndexOf(NEWLINE, errPos - 1);"]}], "num": 13680}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7e3ca7b1e3afb70be490c6429ac90d1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2baf571e03ea63eee831ccbc70e0b8b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "43bd3e08ba052e97e1d0271e7f1e324beac2ba86", "commitAfterChange": "c1d8815fb3e924ec7fa72ebc3952fb83e44bb272", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   protected Object interpretMethod(Class c,                                    MethodDescriptor md,                                    Object obj,                                    Object[] params)", "signatureAfterChange": "   protected Object interpretMethod(Class c,                                    MethodDescriptor md,                                    Object obj,                                    Object[] params)", "diff": ["-        TypeChecker tc = new TypeChecker(ctx);", "+        AbstractTypeChecker tc = AbstractTypeChecker.makeTypeChecker(ctx);", "-        TypeChecker tc1 = new TypeChecker(ctx1);", "+        AbstractTypeChecker tc1 = AbstractTypeChecker.makeTypeChecker(ctx1);", "-        TypeChecker tc2 = new TypeChecker(ctx2);", "+        AbstractTypeChecker tc2 = AbstractTypeChecker.makeTypeChecker(ctx2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81f09fcf01d479910aebc46441667dc5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public boolean isSubtype(Type subT, Type superT)", "signatureAfterChange": "   public boolean isSubtype(Type subT, Type superT)", "diff": ["-    //debug.logStart(new String[]{\"subT\", \"superT\"}, subT, superT);", "-    boolean result = isSubtype(subT, superT, new RecursionStack2<Type, Type>());", "-    //debug.logEnd(\"result\", result);", "-    return result;", "+    return new NormSubtype().contains(NORMALIZE.value(subT), NORMALIZE.value(superT));"]}], "num": 18492}
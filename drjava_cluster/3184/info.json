{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1c36541eeb5384c3d22f51ecda3735b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c7bd9707c67b5767467ca6299d8ee92", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AboutDialog.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "    public static String getLicense()", "signatureAfterChange": "    public static String getLicense()", "diff": ["-      if(is!=null) {", "+      if (is != null) {", "-        StringBuffer sb = new StringBuffer();", "-        for(String s = r.readLine(); s != null; s = r.readLine()) {", "-          int lastSig = s.length()-1; // the last char index", "-", "-          while(lastSig >= 0 && Character.isWhitespace(s.charAt(lastSig))) {", "-            lastSig--;", "+        try {", "+          ", "+          StringBuffer sb = new StringBuffer();", "+          for(String s = r.readLine(); s != null; s = r.readLine()) {", "+            int lastSig = s.length()-1; // the last char index", "+            ", "+            while(lastSig >= 0 && Character.isWhitespace(s.charAt(lastSig))) lastSig--;", "+            if (lastSig < 0) sb.append(\"\\n\"); // empty line, so insert two newlines.", "+            else {", "+              sb.append(s.substring(0,lastSig+1));", "+              sb.append('\\n');", "+            }", "-          if(lastSig<0) {", "-            sb.append(\"\\n\"); // empty line, so insert two newlines.", "-          } else {", "-            sb.append(s.substring(0,lastSig+1));", "-            sb.append('\\n');", "-          }", "+          LICENSE = sb.toString();", "+          LICENSE = LICENSE.trim();", "+          if (LICENSE.length() == 0) LICENSE = null;", "-        LICENSE = sb.toString();", "-        LICENSE = LICENSE.trim();", "-        if(LICENSE.length() == 0) {", "-          LICENSE = null;", "+        finally { ", "+          is.close();", "+          r.close();", "-    catch(Exception e) {", "-      throw new UnexpectedException(e, StringOps.getStackTrace(e));", "-//      LICENSE = null;", "-    }", "+    catch(Exception e) { throw new UnexpectedException(e, StringOps.getStackTrace(e)); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e9cccbc3736d8290036250203d700d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "f6810ad68cbb0aaa0d9f5ff0052437da87098ab7", "commitAfterChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public int getLineFirstCharPos(int pos) throws BadLocationException", "signatureAfterChange": "   public int getLineFirstCharPos(int pos) throws BadLocationException", "diff": ["-    int startLinePos = getLineStartPos(pos);", "-    int endLinePos = getLineEndPos(pos);", "-    ", "-    // Get all text on this line", "-    String text = this.getText(startLinePos, endLinePos - startLinePos);", "-    int walker = 0;", "-    while (walker < text.length()) {", "-      if (text.charAt(walker) == ' ' ||", "-          text.charAt(walker) == '\\t') {", "-        walker++;", "+    acquireReadLock();", "+    try {", "+      int startLinePos = getLineStartPos(pos);", "+      int endLinePos = getLineEndPos(pos);", "+      ", "+      // Get all text on this line", "+      String text = this.getText(startLinePos, endLinePos - startLinePos);", "+      int walker = 0;", "+      while (walker < text.length()) {", "+        if (text.charAt(walker) == ' ' || text.charAt(walker) == '\\t') walker++;", "+        else {", "+          _storeInCache(key, startLinePos + walker);", "+          return startLinePos + walker;", "+        }", "-      else {", "-        _storeInCache(key, new Integer(startLinePos + walker));", "-        return startLinePos + walker;", "-      }", "+      // No non-WS char found, so return last position on line", "+      _storeInCache(key, endLinePos);", "+      return endLinePos;", "-    // No non-WS char found, so return last position on line", "-    _storeInCache(key, new Integer(endLinePos));", "-    return endLinePos;", "+    finally { releaseReadLock(); }"]}], "num": 3184}
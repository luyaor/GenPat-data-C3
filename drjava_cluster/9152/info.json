{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6e176f1845440010bf8e92764b3e547", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d3addf92914af55d5214a06a732fdcf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "99105223925683ee669479026ce3b62dfa0eda84", "commitAfterChange": "94ede5fc3e289a571a76fcd6a91c26510fe57b12", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 252, "signatureBeforeChange": "    private void _saveProjectAs()", "signatureAfterChange": "   private void _saveProjectAs()", "diff": ["+   *  specified file.  Nothing is written in the file system; this action is performed by a subsequent _saveAll(). */", "-    // This redundant-looking hack is necessary for JDK 1.3.1 on Mac OS X!", "+//    // This redundant-looking hack is necessary for JDK 1.3.1 on Mac OS X!", "-    File selection = _saveChooser.getSelectedFile();", "-    if (selection != null) {  // what is this block of commands for?", "-      _saveChooser.setSelectedFile(selection.getParentFile());", "-      _saveChooser.setSelectedFile(selection);", "-      _saveChooser.setSelectedFile(null);", "-    }", "+//    File selection = _saveChooser.getSelectedFile();", "+//    if (selection != null) {  // what is this block of commands for?", "+//      _saveChooser.setSelectedFile(selection.getParentFile());", "+//      _saveChooser.setSelectedFile(selection);", "+//      _saveChooser.setSelectedFile(null);", "+//    }", "-      if (! file.exists() || _verifyOverwrite()) {", "-        _saveProjectHelper(file);", "-        try {", "-          file = file.getCanonicalFile();", "-          if (file.getPath().endsWith(\".pjt\")) _openProjectHelper(file);", "-          else _openProjectHelper(new File(file.getAbsolutePath() + \".pjt\"));", "-        }", "-        catch (IOException e) { throw new UnexpectedException(e); }", "+      if (! file.exists() || _verifyOverwrite()) { ", "+        _model.setProjectFile(file);", "+        _currentProjFile = file;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aadcbdfc8745e3748431f04d7427c03a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "ea3de3bd50de8d728bdb5d615bd9b8838d2e94b4", "commitAfterChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "     public void remAuxFile(File file)", "signatureAfterChange": "     public void remAuxFile(File file)", "diff": ["-     *  UnexpectedException. */", "+    /** Removes File f from _auxFiles list. */", "-      synchronized(_auxFilesLock) {", "-        int newLen = _auxFiles.length - 1;", "-        File[] newAuxFiles = new File[newLen];", "-        try {", "-          int j = 0;", "-          for (File f: _auxFiles) {", "-            if (! f.equals(file)) {", "-              newAuxFiles[j] = file;", "-              j++;", "-            }", "-          }", "-          if (j < newLen) throw new IllegalStateException(\"auxFiles list contain two copies of \" + file);", "-          _auxFiles = newAuxFiles;", "-        }", "-        catch(Exception e) { // negative array size or index out of bounds", "-          throw new UnexpectedException(e);", "+      synchronized(_auxFiles) {", "+        if (_auxFiles.remove(file)) {", "+          setProjectChanged(true);"]}], "num": 9152}
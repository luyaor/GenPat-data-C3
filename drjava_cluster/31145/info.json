{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06bbfb78cc123db4de2a5e3aec4f0d6d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae4352f349600aaf73b3f7023087add1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "c1d8815fb3e924ec7fa72ebc3952fb83e44bb272", "commitAfterChange": "60be4eb231fc019d2cba3c47b5641b055be5dd90", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public Class visit(RemainderExpression node)", "signatureAfterChange": "   public Class visit(RemainderExpression node)", "diff": ["+   */", "+  public Class visit(RemainderExpression node) {", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ln.acceptVisitor(this);", "+    rn.acceptVisitor(this);", "+    Class c = visitNumericExpression(node, \"remainder.type\");", "+    return c;", "+  }", "-   */", "-  public Class visit(RemainderExpression node) {", "-    Node  ln = node.getLeftExpression();", "-    Node  rn = node.getRightExpression();", "-    ln.acceptVisitor(this);", "-    rn.acceptVisitor(this);", "-    Class c = visitNumericExpression(node, \"remainder.type\");", "-", "-    // Compute the expression if it is constant", "-    if (ln.hasProperty(NodeProperties.VALUE) &&", "-        rn.hasProperty(NodeProperties.VALUE)) {", "-      node.setProperty", "-        (NodeProperties.VALUE,", "-         InterpreterUtilities.remainder(c,", "-                                        ln.getProperty(NodeProperties.VALUE),", "-                                        rn.getProperty(NodeProperties.VALUE)));", "-    }", "-    return c;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4548476513c815594c0dfb76ed85d1c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public Object visit(NotExpression node)", "signatureAfterChange": "   public Class visit(NotExpression node)", "diff": ["-     */", "-    public Object visit(NotExpression node) {", "-        // Check the type", "-        Node  n = node.getExpression();", "-        Class c = (Class)n.acceptVisitor(this);", "-", "-        if (c != boolean.class) {", "-            throw new ExecutionError(\"not.expression.type\", node);", "-        }", "-        node.setProperty(NodeProperties.TYPE, c);", "-", "-        // Compute the expression if it is constant", "-        if (n.hasProperty(NodeProperties.VALUE)) {", "-            if (((Boolean)n.getProperty(NodeProperties.VALUE)).booleanValue()) {", "-                node.setProperty(NodeProperties.VALUE, Boolean.FALSE);", "-            } else {", "-                node.setProperty(NodeProperties.VALUE, Boolean.TRUE);", "-            }", "-        }", "-        return c;", "+   */", "+  public Class visit(NotExpression node) {", "+    // Check the type", "+    Node  n = node.getExpression();", "+    Class c = (Class)n.acceptVisitor(this);", "+    ", "+    if (c != boolean.class) {", "+      throw new ExecutionError(\"not.expression.type\", node);", "+    node.setProperty(NodeProperties.TYPE, c);", "+    ", "+    // Compute the expression if it is constant", "+    if (n.hasProperty(NodeProperties.VALUE)) {", "+      if (((Boolean)n.getProperty(NodeProperties.VALUE)).booleanValue()) {", "+        node.setProperty(NodeProperties.VALUE, Boolean.FALSE);", "+      } else {", "+        node.setProperty(NodeProperties.VALUE, Boolean.TRUE);", "+      }", "+    return c;", "+  }"]}], "num": 31145}
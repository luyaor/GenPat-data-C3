{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10c52833f64d91b319bf1070f87658d2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05f408c727aaac80058cc80f8eec9905", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Object visit(ConstructorInvocation node)", "signatureAfterChange": "     public Node visit(ConstructorInvocation node)", "diff": ["-    public Object visit(ConstructorInvocation node) {", "+    public Node visit(ConstructorInvocation node) {", "-      LinkedList arguments = null; // Add parameterization <Node>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-        arguments = new LinkedList(); // Add parameterization <Node>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc117885d5aaa55e1371878e361162c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "     public Object visit(InnerAllocation node)", "signatureAfterChange": "     public Node visit(InnerAllocation node)", "diff": ["-    public Object visit(InnerAllocation node) {", "+    public Node visit(InnerAllocation node) {", "-      LinkedList arguments = null; // Add parameterization <Expression>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Expression>.", "-        arguments = new LinkedList(); // Add parameterization <Expression>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5076307e6bd814597ea53e3090c843be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public Object visit(SimpleAllocation node)", "signatureAfterChange": "     public Node visit(SimpleAllocation node)", "diff": ["-    public Object visit(SimpleAllocation node) {", "+    public Node visit(SimpleAllocation node) {", "-      LinkedList arguments = null; // Add parameterization <Expresion>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Expresion>.", "-        arguments = new LinkedList(); // Add parameterization <Expression>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520bb910ca91dd31e3ffbb308d15deb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "     public Node visit(ArrayAllocation node)", "diff": ["-    public Object visit(ArrayAllocation node) {", "+    public Node visit(ArrayAllocation node) {", "-      LinkedList sizes = new LinkedList(); // Add parameterization <Expression>.", "-      Iterator it = node.getSizes().iterator();", "+      LinkedList<Expression> sizes = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+      Iterator<Expression> it = node.getSizes().iterator();", "-        sizes.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+        sizes.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5808ae5df3ea37cae18f3267e4a67d43", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public Object visit(SimpleAllocation node)", "signatureAfterChange": "     public Node visit(SimpleAllocation node)", "diff": ["-    public Object visit(SimpleAllocation node) {", "+    public Node visit(SimpleAllocation node) {", "-      LinkedList arguments = null; // Add parameterization <Expresion>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Expresion>.", "-        arguments = new LinkedList(); // Add parameterization <Expression>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "761dd7b809e77d72208589f68912208f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "     public Node visit(ArrayAllocation node)", "diff": ["-    public Object visit(ArrayAllocation node) {", "+    public Node visit(ArrayAllocation node) {", "-      LinkedList sizes = new LinkedList(); // Add parameterization <Expression>.", "-      Iterator it = node.getSizes().iterator();", "+      LinkedList<Expression> sizes = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+      Iterator<Expression> it = node.getSizes().iterator();", "-        sizes.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+        sizes.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b695e72490ad511443999456e62fc7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public Object visit(SuperMethodCall node)", "signatureAfterChange": "     public Node visit(SuperMethodCall node)", "diff": ["-    public Object visit(SuperMethodCall node) {", "-      LinkedList arguments = null; // Add parameterization <Node>.", "+    public Node visit(SuperMethodCall node) {", "+      LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-        arguments = new LinkedList(); // Add parameterization <Node>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a132b955afc69a863e4b32a28b3fd3dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public Object visit(ArrayInitializer node)", "signatureAfterChange": "     public Node visit(ArrayInitializer node)", "diff": ["-    public Object visit(ArrayInitializer node) {", "-      LinkedList cells = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getCells().iterator();", "+    public Node visit(ArrayInitializer node) {", "+      LinkedList<Expression> cells = new LinkedList<Expression>(); // Add parameterization <Node>.", "+      Iterator<Expression> it = node.getCells().iterator();", "-        cells.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+        cells.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa8db6c67572f8196d253393b1c22a1a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public Object visit(ArrayInitializer node)", "signatureAfterChange": "     public Node visit(ArrayInitializer node)", "diff": ["-    public Object visit(ArrayInitializer node) {", "-      LinkedList cells = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getCells().iterator();", "+    public Node visit(ArrayInitializer node) {", "+      LinkedList<Expression> cells = new LinkedList<Expression>(); // Add parameterization <Node>.", "+      Iterator<Expression> it = node.getCells().iterator();", "-        cells.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+        cells.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b321991b7fd4e7e9374b479e576f1736", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Object visit(ConstructorInvocation node)", "signatureAfterChange": "     public Node visit(ConstructorInvocation node)", "diff": ["-    public Object visit(ConstructorInvocation node) {", "+    public Node visit(ConstructorInvocation node) {", "-      LinkedList arguments = null; // Add parameterization <Node>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-        arguments = new LinkedList(); // Add parameterization <Node>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6eb24ed082ea887870814fa937e65e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public Object visit(SuperMethodCall node)", "signatureAfterChange": "     public Node visit(SuperMethodCall node)", "diff": ["-    public Object visit(SuperMethodCall node) {", "-      LinkedList arguments = null; // Add parameterization <Node>.", "+    public Node visit(SuperMethodCall node) {", "+      LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-        arguments = new LinkedList(); // Add parameterization <Node>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7b31587e57620a90cdb951d218a13ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "     public Object visit(InnerAllocation node)", "signatureAfterChange": "     public Node visit(InnerAllocation node)", "diff": ["-    public Object visit(InnerAllocation node) {", "+    public Node visit(InnerAllocation node) {", "-      LinkedList arguments = null; // Add parameterization <Expression>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Expression>.", "-        arguments = new LinkedList(); // Add parameterization <Expression>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}], "num": 13657}
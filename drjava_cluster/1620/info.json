{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b9b926f6eaa837efc2b562f3825523b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f64003d04bb2dfc4672959469d8e259e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/InnerAllocation.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args,                          SourceInfo si)", "signatureAfterChange": "   public InnerAllocation(Expression exp, String cn, Option<List<TypeName>> ctargs, List<? extends Expression> args,                          SourceInfo si)", "diff": ["-  public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args,", "+  public InnerAllocation(Expression exp, String cn, Option<List<TypeName>> ctargs, List<? extends Expression> args,", "+                         SourceInfo si) {", "+    this(exp, Option.<List<TypeName>>none(), cn, ctargs, args, si);", "+  }", "-    ", "-    if (cn == null) throw new IllegalArgumentException(\"cn == null\");", "-    if (exp == null) throw new IllegalArgumentException(\"exp == null\");", "-    ", "-    classTypeArguments = (ctargs == null) ? new ArrayList<TypeName>(0) : new ArrayList<TypeName>(ctargs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f82c7edfe520ff2d7a190183e3680166", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/InnerAllocation.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public InnerAllocation(Expression exp, TypeName tp, List<Expression> args,                          String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args,                          String fn, int bl, int bc, int el, int ec)", "diff": ["-  public InnerAllocation(Expression exp, TypeName tp, List<Expression> args,", "+  public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args,", "-    super(tp, fn, bl, bc, el, ec);", "+    super(fn, bl, bc, el, ec);", "+    if (cn == null) throw new IllegalArgumentException(\"cn == null\");", "-    arguments  = args;", "+    className = cn;", "+    classTypeArguments = (ctargs == null) ? null : new ArrayList<TypeName>(ctargs);", "+    arguments  = (args == null) ? null : new ArrayList<Expression>(args);"]}], "num": 1620}
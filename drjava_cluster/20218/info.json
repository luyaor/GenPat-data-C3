{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b7a7922a4c4902e3d96b8670fe3b8e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17a929850de47ee192dbc5c291b4a9f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(final int curPos)", "signatureAfterChange": "   public void updateHighlight(final int curPos)", "diff": ["-//    assert EventQueue.isDispatchThread();  // violated during undo in DefinitionsPaneTest", "-//    Utilities.invokeLater(new Runnable() { ", "-//      public void run() { ", "-    ErrorPanel panel = _frame.getSelectedErrorPanel();", "-    if (panel == null) {", "-      // no error panel is currently selected", "-      return;", "-    }", "-    CompilerErrorModel model =  panel.getErrorModel();", "-    ", "-    if (!model.hasErrorsWithPositions(_openDoc)) return;", "-    ", "-//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "-    ", "-    CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "-    ", "-    ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "-    // if no error is on this line, select the (none) item", "-    if (error == null) errorListPane.selectNothing();", "-    else {      ", "-      if (errorListPane.shouldShowHighlightsInSource()) {", "-        // No need to move the caret since it's already here!", "-        _highlightErrorInSource(model.getPosition(error));", "+    Utilities.invokeLater(new Runnable() { public void run() { ", "+      ErrorPanel panel = _frame.getSelectedErrorPanel();", "+      if (panel == null) {", "+        // no error panel is currently selected", "+        return;", "+      CompilerErrorModel model =  panel.getErrorModel();", "-      // Select item wants the CompilerError", "-      errorListPane.selectItem(error);", "+      if (!model.hasErrorsWithPositions(_openDoc)) return;", "+      ", "+//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "+      ", "+      CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "+      ", "+      ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "+      // if no error is on this line, select the (none) item", "+      if (error == null) errorListPane.selectNothing();", "+      else {      ", "+        if (errorListPane.shouldShowHighlightsInSource()) {", "+          // No need to move the caret since it's already here!", "+          _highlightErrorInSource(model.getPosition(error));", "+        }", "+        ", "+        // Select item wants the CompilerError", "+        errorListPane.selectItem(error);", "+      }", "-//      }", "-//    });", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9b3704059dea24dfb6612e02db164d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "   public void updateHighlight(final int curPos)", "diff": ["-  public void updateHighlight(int curPos) {", "+  public void updateHighlight(final int curPos) {", "-", "-    ErrorPanel panel = _frame.getSelectedErrorPanel();", "-    if (panel == null) {", "-      // no error panel is currently selected", "-      return;", "-    }", "-    CompilerErrorModel model =  panel.getErrorModel();", "-    ", "-    if (!model.hasErrorsWithPositions(_openDoc)) return;", "-    ", "-//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "-", "-    CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "-", "-    ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "-    // if no error is on this line, select the (none) item", "-    if (error == null) errorListPane.selectNothing();", "-    else {      ", "-      if (errorListPane.shouldShowHighlightsInSource()) {", "-        // No need to move the caret since it's already here!", "-        _highlightErrorInSource(model.getPosition(error));", "+    Utilities.invokeLater(new Runnable() { public void run() { ", "+      ErrorPanel panel = _frame.getSelectedErrorPanel();", "+      if (panel == null) {", "+        // no error panel is currently selected", "+        return;", "-       ", "-      // Select item wants the CompilerError", "-      errorListPane.selectItem(error);", "+      CompilerErrorModel model =  panel.getErrorModel();", "+      ", "+      if (!model.hasErrorsWithPositions(_openDoc)) return;", "+      ", "+//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "+      ", "+      CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "+      ", "+      ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "+      // if no error is on this line, select the (none) item", "+      if (error == null) errorListPane.selectNothing();", "+      else {      ", "+        if (errorListPane.shouldShowHighlightsInSource()) {", "+          // No need to move the caret since it's already here!", "+          _highlightErrorInSource(model.getPosition(error));", "+        }", "+        ", "+        // Select item wants the CompilerError", "+        errorListPane.selectItem(error);", "+      }", "+    });"]}], "num": 20218}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e06c8887fe5f42fe4da4f6b0a2d7175b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a00b4fa6c8043ec19ee54908cbda0f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 36, "signatureBeforeChange": "   @Override public Type visit(TypeExpression node)", "signatureAfterChange": "     @Override public Type visit(TypeExpression node)", "diff": ["-   */", "-  @Override public Type visit(TypeExpression node) {", "-    Type t = node.getType().acceptVisitor(this);", "-    setErasedType(node.getType(), ts.erasedClass(t));", "+     */", "+    @Override public Type visit(TypeExpression node) {", "+      Type t = checkTypeName(node.getType());", "+      setErasedType(node.getType(), ts.erasedClass(t));", "+      ", "+      Type targ = t;", "+      if (ts.isEqual(t, TypeSystem.VOID)) { targ = TypeSystem.VOID_CLASS; }", "+      else if (!ts.isReference(t)) {", "+        Expression pseudoExp = TypeUtil.makeEmptyExpression(node.getType());", "+        setType(pseudoExp, t);", "+        try {", "+          Expression boxedPseudoExp = ts.makeReference(pseudoExp);", "+          targ = getType(boxedPseudoExp);", "+        }", "+        catch (UnsupportedConversionException e) {", "+          throw new ExecutionError(\"reference.type\", node);", "+        }", "+      }", "+      return setType(node, ts.reflectionClassOf(targ));", "+    }", "-    Type targ = t;", "-    if (ts.isEqual(t, TypeSystem.VOID)) { targ = TypeSystem.VOID_CLASS; }", "-    else if (!ts.isReference(t)) {", "-      Expression pseudoExp = TypeUtil.makeEmptyExpression(node.getType());", "-      setType(pseudoExp, t);", "-        Expression boxedPseudoExp = ts.makeReference(pseudoExp);", "-        targ = getType(boxedPseudoExp);", "-        throw new ExecutionError(\"reference.type\", node);", "-      }", "-    }", "-    return setType(node, ts.reflectionClassOf(targ));", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5606eaab198c3d9c865fa3dd29fe23e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 80, "signatureBeforeChange": "   private Type handleBooleanExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleBooleanExpression(BinaryExpression node)", "diff": ["-   */", "-  private Type handleBooleanExpression(BinaryExpression node) {", "-    node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());    ", "-      if (!(getType(left) instanceof BooleanType) || !(getType(right) instanceof BooleanType)) {", "+     */", "+    private Type handleBooleanExpression(BinaryExpression node) {", "+      check(node.getLeftExpression(), TypeSystem.BOOLEAN);", "+      check(node.getRightExpression(), TypeSystem.BOOLEAN);", "+      try {", "+        Expression left = ts.makePrimitive(node.getLeftExpression());", "+        Expression right = ts.makePrimitive(node.getRightExpression());    ", "+        if (!(getType(left) instanceof BooleanType) || !(getType(right) instanceof BooleanType)) {", "+          throw new ExecutionError(\"boolean.expression.type\", node);", "+        }", "+        node.setLeftExpression(left);", "+        node.setRightExpression(right);", "+        return setType(node, TypeSystem.BOOLEAN);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      node.setLeftExpression(left);", "-      node.setRightExpression(right);", "+    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"boolean.expression.type\", node);", "-    }", "-  }"]}], "num": 620}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b751601267bd59665dbfa472080bbff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5127e8224dc49650b9cc931e3ea5a59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "commitAfterChange": "c363ed10ac87f45c0e34e1a82e2d35e2cafec337", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "signatureAfterChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "diff": ["-    ", "-    text = ", "-      \"public class ClassF { \" +", "-      \"  public ClassF(String ... args) { \" +", "-      \"    for (String s : args) \" +", "-      \"      System.out.println(s);\" +", "-      \"  } \" + ", "-      \"  public String m(String ... args) { \" +", "-      \"    String ret = \\\"\\\"; \" +", "-      \"    for(String s : args) ret += s; \" +", "-      \"    return ret; \" + ", "-      \"  }\" +", "-      \"}\\n\" +", "-      \"new ClassF(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\").m(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\")\";", "-    res = interpret(text);", "-    assertEquals(\"Wrong output.\", \"abcd\", res);", "-    ", "+        ", "-//      \"      for(int i=0;i<s.length;i++) {\\n\"+", "-//      \"        str = str+s[i];\\n\"+", "-//      \"      }\\n\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfe775473cf96d0f73d4acf6a05ef32e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "signatureAfterChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "diff": ["-    doc.acquireWriteLock();", "-    try { doc.commentLines(0, doc.getLength()); }", "-    finally { doc.releaseWriteLock(); }", "+//    doc.acquireWriteLock();", "+//    try { ", "+    doc.commentLines(0, doc.getLength()); ", "+//    }", "+//    finally { doc.releaseWriteLock(); }", "-    doc.acquireWriteLock();", "-    try { doc.uncommentLines(0, doc.getLength()); }", "-    finally { doc.releaseWriteLock(); }", "+//    doc.acquireWriteLock();", "+//    try { ", "+      doc.uncommentLines(0, doc.getLength()); ", "+//    }", "+//    finally { doc.releaseWriteLock(); }"]}], "num": 22842}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dedb0f3d0c0bb319bdc91f124772121", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26d4f312e8ab6c32d9b2a9039040a68b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "35ca78e33b0503c2a6070986170dae99ba9dcb1a", "commitAfterChange": "6136e4c5753a47e4bcb40afa831b9c58e353fd69", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "       public boolean isInProjectPath(OpenDefinitionsDocument doc)", "signatureAfterChange": "     public boolean isInProjectPath(File f)", "diff": ["-       */", "-      public boolean isInProjectPath(OpenDefinitionsDocument doc) {", "+     */", "+    public boolean isInProjectPath(File f) {", "+      try {", "-        if (doc.isUntitled()) return false;", "-        ", "-        // If the file does not exist, we still want to tell if it's in the correct", "-        // path.  The file may have been in at one point and had been removed, in which", "-        // case we should treat it as an untitled project file that should be resaved.", "-        try {", "-          File f;", "-          try { f = doc.getFile(); } ", "-          catch(FileMovedException fme) { f = fme.getFile(); }", "-          ", "-          String filePath = f.getParentFile().getCanonicalPath() + File.separator;", "-          String projectPath = projectRoot.getCanonicalPath() + File.separator;", "-          return (filePath.startsWith(projectPath));", "-        }", "-        catch(IOException e) {", "-          //          System.out.println(e); // What should we do in this case?", "-          return false;", "-        }", "+        String filePath = f.getParentFile().getCanonicalPath() + File.separator;", "+        String projectPath = projectRoot.getCanonicalPath() + File.separator;", "+        return (filePath.startsWith(projectPath));", "+      catch(IOException e) { return false; }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "740837c1fbe9bea2a1af0a4c9d930bb6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileBuilder.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private String encodeDocFile(DocFile df, String prefix, boolean relative, boolean hasDate) throws IOException", "signatureAfterChange": "   private String encodeDocFile(DocFile df, String prefix, boolean relative, boolean hasDate) throws IOException", "diff": ["-    if (relative) {", "-      path = makeRelative(df);", "-    }", "-    else {", "-      path = df.getCanonicalPath();", "-    }", "+    if (relative) path = makeRelative(df);", "+    else path = df.getCanonicalPath();", "+", "-    if (p1 != null || p2 != null || active) {", "-      ret += \"\\n\" + prefix + \"      \";", "-    }", "+    if (p1 != null || p2 != null || active)  ret += \"\\n\" + prefix + \"      \";", "+", "-    if (p1 != null) {", "-      ret += \"(select \" + p1.getFirst() + \" \" + p1.getSecond() + \")\";", "-    }", "-    if (p2 != null) {", "-      ret += \"(scroll \" + p2.getFirst() + \" \" + p2.getSecond() + \")\";", "-    }", "+    if (p1 != null) ret += \"(select \" + p1.getFirst() + \" \" + p1.getSecond() + \")\";", "+", "+    if (p2 != null) ret += \"(scroll \" + p2.getFirst() + \" \" + p2.getSecond() + \")\";", "+", "-    if (active) {", "-      ret += \"(active)\";", "-    }", "+    ", "+    if (active) ret += \"(active)\";", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84a30676d3b0e24696f82e7e060e9652", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public synchronized void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "diff": ["-  public synchronized void removeAuxiliaryFile(OpenDefinitionsDocument doc){", "+  public void removeAuxiliaryFile(OpenDefinitionsDocument doc){", "-    } catch(FileMovedException fme){", "+    } catch(FileMovedException fme) {", "-    LinkedList<File> newAuxiliaryFiles = new LinkedList<File>();  ", "-    for(File f: _auxiliaryFiles){", "-      try{", "-        if (!f.getCanonicalPath().equals(file.getCanonicalPath())) {", "-          newAuxiliaryFiles.add(f);", "-        }", "-      } catch(IOException e){", "-        // noop", "+    String path = \"\";", "+    try {", "+      path = file.getCanonicalPath();", "+    }", "+    catch(IOException e) { throw new UnexpectedException(e); }", "+    ", "+    synchronized (_auxiliaryFiles) {", "+      ListIterator<File> it = _auxiliaryFiles.listIterator();", "+      while (it.hasNext()) {", "+        try { ", "+          if (it.next().getCanonicalPath().equals(path)) {", "+            it.remove();", "+            setProjectChanged(true);", "+            break;", "+          }", "+        } ", "+        catch(IOException e) { /* Ignore f */ }", "-    _auxiliaryFiles = newAuxiliaryFiles;", "-    setProjectChanged(true);"]}], "num": 27654}
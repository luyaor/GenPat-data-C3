{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d4c7d96dac3a3bc0cb83ae61415af5a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "017014b8e81ecad35e03bca194d17fe7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "194b7a090e0ed824f08942e6e6efd976dc158404", "commitAfterChange": "c0f3fda00a0dfdfc7ba1813b053360e729d2a0e8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": "    public JUnitTestRunner getTestRunner()", "signatureAfterChange": "   private JUnitTestRunner makeRunner()", "diff": ["-  public JUnitTestRunner getTestRunner() { return _testRunner; }", "+  /** Make a fresh JUnitTestRunner with its own class loader instance. */", "+  private JUnitTestRunner makeRunner() {", "+    ClassLoader current = JUnitTestManager.class.getClassLoader();", "+    // References to JUnit classes must match those of the current loader so that,", "+    // for example, when a test fails, the failure exception is of a class we can talk ", "+    // about in the current context.", "+    ClassLoader parent = ShadowingClassLoader.whiteList(current, \"junit\", \"org.junit\");", "+    return new JUnitTestRunner(_jmc, _loaderFactory.value(parent));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a42d80b589932f6bbf3fb8597c44fa89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ea2763ecde4185a8c33fdd0462c9d12c206c7378", "commitAfterChange": "1ccb0f21abc2aaa138e57bd5c1add5c018ff34ef", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void startInterpreterJVM()", "diff": ["-    Vector<String> jvmArgs = new Vector<String>();", "+    ArrayList<String> jvmArgs = new ArrayList<String>();", "+    String optionArgString = DrJava.getConfig().getSetting(OptionConstants.JVM_ARGS);", "+    List<String> optionArgs = ArgumentTokenizer.tokenize(optionArgString);", "+    jvmArgs.addAll(optionArgs);"]}], "num": 25124}
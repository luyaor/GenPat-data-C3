{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "267377b81b75f5ca5ec3cb0cba7507bb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cdde80e5631cdea5302691fc273bf7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "e7442f280333996ea90edd62f79df8c2d40ca324", "commitAfterChange": "6572078744d5462302a5712b2d3e4dd3c67ea5fb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected Class findClass(String name) throws ClassNotFoundException", "signatureAfterChange": "     protected Class findClass(String name) throws ClassNotFoundException", "diff": ["+", "-      } catch (IOException ioe) {}", "+      }", "+      catch (Throwable t) {}", "+", "+      // Now try to just use the standard loader", "+      // Before, we didn't do this, and it resulted in getting some", "+      // class format errors (illegal constant pool) when loading.", "+      // i don't know why, but some classes seem to need to be loaded", "+      // using standard loader.", "+      ClassLoader l;", "+      if (classLoader != null) {", "+        l = classLoader;", "+      }", "+      else {", "+        l = ClassLoader.getSystemClassLoader();", "+      }", "+", "+      try {", "+        return l.loadClass(name);", "+      }", "+      catch (Throwable t) {}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2190995bd5b73b7bb38626142b35192", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "9d7de430d203354a52d3faa0378a92c50af92fb7", "commitAfterChange": "3d1f89ee8265825be1b06c516dc32bff9542b966", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected synchronized final void quitSlave() throws RemoteException", "signatureAfterChange": "   protected synchronized final void quitSlave() throws RemoteException", "diff": ["-    if (_slave == null) {", "-      throw new IllegalStateException(\"tried to quit when no slave running\");", "+    if (isStartupInProgress()) {", "+      // There is a slave to be quit, but we don't have a handle to it yet.", "+      // Instead we set this flag, which makes it quit immediately after it", "+      // registers in registerSlave.", "+      _quitOnStartup = true;", "-    ", "-    _slave.quit();", "+    else if (_slave == null) {", "+      throw new IllegalStateException(\"tried to quit when no slave running\" +", "+                                      \" and startup not in progress\");", "+    }", "+    else {", "+      _slave.quit();", "+    }"]}], "num": 17536}
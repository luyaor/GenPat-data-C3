{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ba04191ddf5c74e107a496fb6a44ef8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22b76420e6d4c63a738cacd610590f10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 90, "signatureBeforeChange": "     public Type value(Iterable<? extends Type> elements)", "signatureAfterChange": "     public Type value(Iterable<? extends Type> elements)", "diff": ["-  private final Lambda<Iterable<? extends Type>, Type> JOIN_NORM = new Lambda<Iterable<? extends Type>, Type>() {", "+    public NormJoiner(NormSubtyper subtyper) { _subtyper = subtyper; }", "-      List<Type> disjuncts = maxList(collapse(map(elements, DISJUNCTS)), new NormSubtyper());", "+      List<Type> disjuncts = maxList(collapse(map(elements, DISJUNCTS)), _subtyper);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dff6eea131107be69299351622db313d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 93, "signatureBeforeChange": "     public Type value(Iterable<? extends Type> elements)", "signatureAfterChange": "          public Type value(Iterable<? extends Type> elements)", "diff": ["-  private final Lambda<Iterable<? extends Type>, Type> MEET_NORM = new Lambda<Iterable<? extends Type>, Type>() {", "+    ", "+        final NormJoiner joiner = new NormJoiner(_subtyper);", "-              distribute(element, DISJUNCTS, CONJUNCTS, JOIN_NORM, LambdaUtil.<Iterable<Type>>identity());", "+              distribute(element, DISJUNCTS, CONJUNCTS, joiner, LambdaUtil.<Iterable<Type>>identity());", "-          distribute(conjuncts, LambdaUtil.<Iterable<Type>>identity(), DISJUNCTS, MEET_ATOMIC, JOIN_NORM);", "+          distribute(conjuncts, LambdaUtil.<Iterable<Type>>identity(), DISJUNCTS, _meetAtomic, joiner);", "-      else { return MEET_ATOMIC.value(collapse(map(elements, CONJUNCTS))); }", "+      else { return _meetAtomic.value(collapse(map(elements, CONJUNCTS))); }"]}], "num": 4}
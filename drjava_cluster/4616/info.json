{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c67103a22e9e7f36ed8990e40761699c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dc7ce61968b37cd0ebb019deca58467", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void write() throws IOException", "signatureAfterChange": "   public void write() throws IOException", "diff": ["-  /** This method writes what information has been passed to this builder so far to disk in s-expression format. */", "+  /** Write project file in XML format. */", "-    FileWriter fw = new FileWriter(_projectFile);", "+    write(new FileOutputStream(_projectFile));", "+  }", "-//    // write the create jar file", "-//    if (_createJarFile != null) {", "-//      fw.write(\"\\n(create-jar-file\");", "-//      fw.write(\"\\n\" + encodeFile(_createJarFile, \"  \", true));", "-//      fw.write(\")\");", "-//    }", "-//    else fw.write(\"\\n;; no create jar file\");", "-//    ", "-//    // write the create jar flags", "-//    if (_createJarFlags != 0) {", "-//      fw.write(\"\\n(create-jar-flags \" + _createJarFlags + \")\");", "-//    }", "-//    else fw.write(\"\\n;; no create jar flags\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36dc6d99209c7cec08e61f1d318ffca0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "72a0d444dc62ca781c9b91acdee71819a6f4cdd3", "commitAfterChange": "7144a04f8cef658fdd6189df9de3fd59eb678bec", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 33, "signatureBeforeChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException", "signatureAfterChange": "           public void testDocumentPaneMemoryLeak() throws InterruptedException, IOException", "diff": ["-  public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException {", "-    ", "-//    sbIdHashCodes.append(\"_frame = \"+_frame.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "-//    sbIdHashCodes.append(\"_model = \"+_model.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "+  ", "+  public void testDocumentPaneMemoryLeak() throws InterruptedException, IOException {", "+    // _model has been setUp", "+    runIsolatedDrJavaSession();", "-    while (ct < 10 && (_finalDocCt != 6 && _finalPaneCt != 6));", "+    while (ct < 10 && (_finalDocCt < 6 || _finalPaneCt < 6));", "-    if (ct == 10) {", "-      // if we fail with a garbage collection problem, dump heap", "-      LOG.setEnabled(true);", "-//      LOG.log(sbIdHashCodes.toString());", "-      try { LOG.log(\"heap dump in \"+dumpHeap()); }", "-      catch(Exception e) {", "-        System.err.println(\"Could not dump heap.\");", "-        e.printStackTrace(System.err);", "-      }", "-      ", "-      fail(\"Failed to reclaim all documents; panes left = \" + (6 - _finalPaneCt) + \"; docs left = \" + ", "-           (6 - _finalDocCt));", "-    }", "+//    if (ct == 10) {", "+//      // if we fail with a garbage collection problem, dump heap", "+//      LOG.setEnabled(true);", "+////      LOG.log(sbIdHashCodes.toString());", "+//      try { LOG.log(\"heap dump in \"+dumpHeap()); }", "+//      catch(Exception e) {", "+//        System.err.println(\"Could not dump heap.\");", "+//        e.printStackTrace(System.err);", "+//      }", "+//      ", "+//      fail(\"Failed to reclaim all documents; panes left = \" + (6 - _finalPaneCt) + \"; docs left = \" + ", "+//           (6 - _finalDocCt));", "+//    }", "-//    assertEquals(\"all the panes should have been garbage collected\", 6, _finalPaneCt);", "-    System.out.println(\"_finalPaneCt = \" + _finalPaneCt);", "+    assertEquals(\"all the defpanes should have been garbage collected\", 6,  _finalPaneCt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5427919bec8c9b98275372c382dd3524", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "28ed37193d3d1605a7ea343a3a2a748ce08a7b25", "commitAfterChange": "deccdad7d1e1e890f5a05d651027f51330f6ca59", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public CommandLineTest(String name)", "signatureAfterChange": "   public CommandLineTest(String name)", "diff": ["-  public CommandLineTest(String name) {", "-    super(name);", "+  public CommandLineTest(String name) { super(name); }", "-    /* Creating a MainFrame() is costly.  Peforming this operation here achieves more overlap with file I/O than ", "-     * doing it in setUp() */", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        DrJava._initConfig();", "-        _mf = new MainFrame(); ", "-      } ", "-    });", "-  }"]}], "num": 4616}
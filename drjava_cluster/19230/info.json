{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8461ccd8b58f0dcd335300127d301441", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8908c7d6f4a33d45344bf303dafe4d91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 15, "signatureBeforeChange": "   protected String interpret(final String input) throws EditDocumentException", "signatureAfterChange": "   protected String interpret(String input) throws EditDocumentException", "diff": ["-  protected String interpret(final String input) throws EditDocumentException {", "+  protected String interpret(String input) throws EditDocumentException {", "-    final InteractionsDocument interactionsDoc = _model.getInteractionsDocument();", "+    InteractionsDocument interactionsDoc = _model.getInteractionsDocument();", "+    Utilities.clearEventQueue();", "+    ", "+    interactionsDoc.setInProgress(false);  // for some reason, the inProgress state can be true when interpret is invoked", "+    interactionsDoc.append(input, InteractionsDocument.DEFAULT_STYLE);", "+    ", "+    Utilities.clearEventQueue();", "-    InteractionListener listener = new InteractionListener();", "-    _model.addListener(listener);", "-    ", "-    // Set up the interaction", "-    Utilities.invokeAndWait(new Runnable() {", "-      public void run() {", "-        interactionsDoc.setInProgress(false);  // for some reason, the inProgress state can be true when interpret is invoked", "-        interactionsDoc.append(input, InteractionsDocument.DEFAULT_STYLE);", "-      }", "-    });", "-    ", "-    // Record information about pending interaction", "-    ", "+    // skip the right length for the newline", "-//    Utilities.clearEventQueue();   ", "-    listener.logInteractionStart();", "-    ", "-    // Execute the interaction", "-    Utilities.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "-    ", "-    try { listener.waitInteractionDone(); }", "-    catch (InterruptedException ie) { throw new UnexpectedException(ie); }", "+    InteractionListener listener = new InteractionListener();", "+", "+    _model.addListener(listener);", "+    listener.logInteractionStart();", "+    try {", "+      _model.interpretCurrentInteraction();", "+      listener.waitInteractionDone();", "+    }", "+    catch (InterruptedException ie) { throw new UnexpectedException(ie); }", "-//    interactionsDoc.acquireReadLock();", "-//    try {", "-    final int resultsEndLocation = interactionsDoc.getLength() - newLineLen - interactionsDoc.getPrompt().length();", "-    ", "-    final int resultsLen = resultsEndLocation - resultsStartLocation;", "-    _log.log(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "-    _log.log(\"Contents = '\" + interactionsDoc.getDocText(0, resultsEndLocation+1) + \"'\");", "-    if (resultsLen <= 0) return \"\";", "-    return interactionsDoc.getDocText(resultsStartLocation, resultsLen);", "-//    }", "-//    finally { interactionsDoc.releaseReadLock(); }", "+    interactionsDoc.acquireReadLock();", "+    try {", "+      final int resultsEndLocation = interactionsDoc.getLength() - newLineLen - interactionsDoc.getPrompt().length();", "+      ", "+      final int resultsLen = resultsEndLocation - resultsStartLocation;", "+      _log.log(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "+      _log.log(\"Contents = '\" + interactionsDoc.getDocText(0, resultsEndLocation+1) + \"'\");", "+      if (resultsLen <= 0) return \"\";", "+      return interactionsDoc.getDocText(resultsStartLocation, resultsLen);", "+    }", "+    finally { interactionsDoc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bfe6128f7c5d3e743b8377ed41c326a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected String interpret(String input) throws EditDocumentException", "signatureAfterChange": "   protected String interpret(String input) throws EditDocumentException", "diff": ["+    ", "-    interactionsDoc.insertText(interactionsDoc.getLength(), input, InteractionsDocument.DEFAULT_STYLE);", "+    Utilities.clearEventQueue();", "+    ", "+    interactionsDoc.setInProgress(false);  // for some reason, the inProgress state can be true when interpret is invoked", "+    interactionsDoc.append(input, InteractionsDocument.DEFAULT_STYLE);", "+    ", "+    Utilities.clearEventQueue();", "-    int newLineLen = System.getProperty(\"line.separator\").length();", "+    final int newLineLen = System.getProperty(\"line.separator\").length();", "-    TestListener listener = new TestListener() {", "-      public void interactionStarted() { interactionStartCount++; }", "-", "-      public void interactionEnded() {", "-        assertInteractionStartCount(1);", "-", "-        synchronized(this) {", "-          interactionEndCount++;", "-          this.notify();", "-        }", "-      }", "-", "-    };", "+    InteractionListener listener = new InteractionListener();", "+    listener.logInteractionStart();", "-      synchronized(listener) {", "-        _model.interpretCurrentInteraction();", "-        listener.wait();  // TODO: fix this naked wait which depends on being executed before interpreter finishes!", "-        ", "- /**///In previous versions of 1.5.0-beta compiler, several tests hang right here, because ", "- /////in DebugContextTest and JavaDebugInterpreterTest, the files that were being tested, ", "- /////for example, MonkeyStuff.java, was being compiled without the -g flag, so debugging was ", "- /////impossible. This happened because of a bug in the 1.5 compiler, which is now fixed in the new", "- /////version.", "-      }", "+      _model.interpretCurrentInteraction();", "+      listener.waitInteractionDone();", "-    catch (InterruptedException ie) {", "-      throw new UnexpectedException(ie);", "-    }", "+    catch (InterruptedException ie) { throw new UnexpectedException(ie); }", "+    Utilities.clearEventQueue();", "+    ", "-    final int resultsEndLocation = interactionsDoc.getLength() - newLineLen -", "-                                   interactionsDoc.getPrompt().length();", "-", "-    final int resultsLen = resultsEndLocation - resultsStartLocation;", "-    //System.out.println(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "-    // There was no output from this interaction", "-    if (resultsLen <= 0)", "-      return \"\";", "-    return interactionsDoc.getDocText(resultsStartLocation, resultsLen);", "+    interactionsDoc.acquireReadLock();", "+    try {", "+      final int resultsEndLocation = interactionsDoc.getLength() - newLineLen - interactionsDoc.getPrompt().length();", "+      ", "+      final int resultsLen = resultsEndLocation - resultsStartLocation;", "+      //System.out.println(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "+      // There was no output from this interaction", "+      if (resultsLen <= 0) return \"\";", "+      return interactionsDoc.getDocText(resultsStartLocation, resultsLen);", "+    }", "+    finally { interactionsDoc.releaseReadLock(); }"]}], "num": 19230}
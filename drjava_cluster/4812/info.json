{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bd002f4888951cb2e99bb30ce86fcc5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a81a4152e0e24739103b86f11766e4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void runTestSequence() throws Exception", "signatureAfterChange": "          public void runTestSequence() throws Exception", "diff": ["-      ", "-      _justQuit = false;", "-      _connected = false;", "+      _justQuit.reset();", "+      _slave = null;", "-      invokeSlave(new String[0], FileOps.NULL_FILE);           ", "-      ", "-      synchronized(_connectedLock) { while (! _connected) _connectedLock.wait();  }", "-      ", "-      ((TestSlaveRemote)getSlave()).startLetterTest();", "-      ", "-      _log.log(\"letter test started\");", "-      ", "+      invokeSlave(JVMBuilder.DEFAULT);           ", "+      _slave.startLetterTest();", "-      ", "-      _log.log(\"letter test finished\");", "-      ", "-        int value = ((TestSlaveRemote) getSlave()).getNumber();", "+        int value = _slave.getNumber();", "-      _log.log(\"number test finished\");", "-      ", "-      synchronized(_quitLock) { while (! _justQuit) _quitLock.wait(); } // for quit to finish", "+      assertTrue(_justQuit.attemptEnsureSignaled(WAIT_TIMEOUT));", "-      _log.log(\"Ran runTestSequence\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d331a431d4a144169229dfc50e3f58fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void runImmediateQuitTest() throws Exception", "signatureAfterChange": "     public void runImmediateQuitTest() throws Exception", "diff": ["-      ", "-//      Utilities.show(\"ImmediateQuitTest started\");", "-      ", "-      _justQuit = false; ", "-      _connected = false;", "+      _justQuit.reset(); ", "+      _slave = null;", "-      invokeSlave(new String[0], FileOps.NULL_FILE);", "+      new Thread() {", "+        public void run() { invokeSlave(JVMBuilder.DEFAULT); }", "+      }.start();", "-//      Utilities.show(\"slave invoked\");", "-      ", "-      // Immediately call quit, which should not throw an exception. It should return without waiting.", "+      // Immediately call quit, which should not throw an exception.", "-      ", "-//      Utilities.show(\"slave quit\");     ", "-      ", "-      // now we just wait for the quit to process", "-      synchronized(_quitLock) { while (! _justQuit) _quitLock.wait(); }", "-      ", "+      assertTrue(_justQuit.attemptEnsureSignaled(WAIT_TIMEOUT));", "-      ", "-      ", "-//      Utilities.show(\"ImmediateQuitTest finished\");", "-      _log.log(\"Ran immediateQuitTest\");", "-      "]}], "num": 4812}
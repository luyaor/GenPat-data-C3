{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "203d4f9ab40548de53542ab6464553e0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f7a4c94b093ab454ae9ca8f66d09a42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public static Iterable<JDKDescriptor> searchForJDKDescriptors()", "signatureAfterChange": "   private static Iterable<JDKDescriptor> searchForJDKDescriptors()", "diff": ["-  public static Iterable<JDKDescriptor> searchForJDKDescriptors() {", "+  /** Search for JDK descriptors. */", "+  private static Iterable<JDKDescriptor> searchForJDKDescriptors() {", "-      JarFile jf = new JarFile(f);", "-      JDKToolsLibrary.msg(\"jar file: \"+jf);", "-      Enumeration<JarEntry> entries = jf.entries();", "-      while(entries.hasMoreElements()) {", "-        JarEntry je = entries.nextElement();", "-        String name = je.getName();", "-        if (name.startsWith(\"edu/rice/cs/drjava/model/compiler/descriptors/\") &&", "-            name.endsWith(\".class\") &&", "-            !name.equals(\"edu/rice/cs/drjava/model/compiler/descriptors/JDKDescriptor.class\") &&", "-            (name.indexOf('$')<0)) {", "-          int dotPos = name.indexOf(\".class\");", "-          String className = name.substring(0, dotPos).replace('/','.');", "-          try {", "-            JDKToolsLibrary.msg(\"\\tclass name: \"+className);", "-            Class<?> clazz = Class.forName(className);", "-            Class<? extends JDKDescriptor> descClass = clazz.asSubclass(JDKDescriptor.class);", "-            JDKDescriptor desc = descClass.newInstance();", "-            JDKToolsLibrary.msg(\"\\t\\tloaded!\");", "-            descriptors = IterUtil.compose(descriptors, desc);", "+      if (f.isFile()) {", "+        JarFile jf = new JarFile(f);", "+        JDKToolsLibrary.msg(\"jar file: \"+jf);", "+        Enumeration<JarEntry> entries = jf.entries();", "+        while(entries.hasMoreElements()) {", "+          JarEntry je = entries.nextElement();", "+          String name = je.getName();", "+          if (name.startsWith(\"edu/rice/cs/drjava/model/compiler/descriptors/\") &&", "+              name.endsWith(\".class\") &&", "+              (name.indexOf('$')<0)) {", "+            descriptors = attemptToLoadDescriptor(descriptors, name);", "-          catch(LinkageError le) { JDKToolsLibrary.msg(\"LinkageError: \"+le); /* ignore */ } ", "-          catch(ClassNotFoundException cnfe) { JDKToolsLibrary.msg(\"ClassNotFoundException: \"+cnfe); /* ignore */ }", "-          catch(ClassCastException cce) { JDKToolsLibrary.msg(\"ClassCastException: \"+cce); /* ignore */ }", "-          catch(IllegalAccessException iae) { JDKToolsLibrary.msg(\"IllegalAccessException: \"+iae); /* ignore */ }", "-          catch(InstantiationException ie) { JDKToolsLibrary.msg(\"InstantiationException: \"+ie); /* ignore */ }", "-     }", "+      }", "+      else {", "+        final String DESC_PATH = \"edu/rice/cs/drjava/model/compiler/descriptors\";", "+        File dir = new File(f, DESC_PATH);", "+        JDKToolsLibrary.msg(\"directory, enumerating files in \"+dir);", "+        Iterable<File> files = IOUtil.listFilesRecursively(dir, new Predicate<File>() {", "+          public boolean contains(File arg) {", "+            return (arg.isFile()) && arg.getName().endsWith(\".class\") && (arg.getName().indexOf('$')<0);", "+          }", "+        });", "+        for(File je: files) {", "+          String name = DESC_PATH+\"/\"+je.getName();", "+          descriptors = attemptToLoadDescriptor(descriptors, name);", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "314e2b4bf80f966ab3c03da6ced6a06c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 471, "methodNumberAfterChange": 489, "signatureBeforeChange": "   private JMenu _setUpToolsMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpToolsMenu(int mask)", "diff": ["-    final int typesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES).size();", "-    final int jvmargsCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS).size();", "+    final int drJavaJarFileCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_DRJAVAJAR_FILES).size();", "-        (savedCount!=typesCount) ||", "-        (savedCount!=jvmargsCount) ||", "-        (savedCount!=workdirsCount)) {", "+        (savedCount!=workdirsCount) ||", "+        (savedCount!=drJavaJarFileCount)) {", "-      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_TYPES, new Vector<String>());", "-      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS, new Vector<String>());", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_DRJAVAJAR_FILES, new Vector<String>());", "-              final Vector<String> types = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES);", "-              final Vector<String> jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS);", "+              final Vector<String> drjavajarfiles = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_DRJAVAJAR_FILES);", "-                  if (types.get(i).equals(\"cmdline\")) {", "+                  try {", "+                    PropertyMaps pm = PropertyMaps.TEMPLATE.clone();", "+                    String s = drjavajarfiles.get(i).trim();", "+                    edu.rice.cs.util.GeneralProcessCreator.LOG.log(\"actionPerformed(): drjavajarfiles.get(i) = \"+s);", "+                    ((MutableFileProperty)pm.getProperty(\"drjavajar.file\")).setFile(s.length()>0?new File(s):null);", "+                    edu.rice.cs.util.GeneralProcessCreator.LOG.log(\"actionPerformed(): ${drjavajar.file} = \"+((MutableFileProperty)pm.getProperty(\"drjavajar.file\")).getCurrent(pm));", "-                    _executeExternalDialog.runCommand(names.get(i),cmdlines.get(i),workdirs.get(i));", "+                    _executeExternalDialog.runCommand(names.get(i),cmdlines.get(i),workdirs.get(i),drjavajarfiles.get(i),pm);", "-                  else if (types.get(i).equals(\"java\")) {", "-                    // System.out.println(names.get(i)+\": java \"+jvmargs.get(i)+\" \"+cmdlines.get(i)+\" \"+workdirs.get(i));", "-                    _executeExternalDialog.runJava(names.get(i),jvmargs.get(i),cmdlines.get(i),workdirs.get(i));", "-                  }", "-                  else {", "-                    JOptionPane.showMessageDialog(MainFrame.this,", "-                                                  \"Unknown process type '\"+types.get(i)+\"'.\",", "-                                                  \"Invalid Command Line\",", "-                                                  JOptionPane.ERROR_MESSAGE);", "-                  }", "+                  catch(CloneNotSupportedException e) { throw new edu.rice.cs.util.UnexpectedException(e); }", "-            _editExternalProcessesAction.setEnabled(oce.value>0);", "+            _editExternalProcessesAction.setEnabled(true); // always keep enabled, because it allows import"]}], "num": 5490}
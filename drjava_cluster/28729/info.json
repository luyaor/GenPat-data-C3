{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7db387c93abd79319080b618425e309", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "995b8be53fb187887844d22ea778fd69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "   public Class visit(ConditionalExpression node)", "signatureAfterChange": "   public Class visit(ConditionalExpression node)", "diff": ["-    Node n1 = node.getIfTrueExpression();", "-    Node n2 = node.getIfFalseExpression();", "-    Class c1 = n1.acceptVisitor(this);", "-    Class c2 = n2.acceptVisitor(this);", "+    Expression exp1 = node.getIfTrueExpression();", "+    Expression exp2 = node.getIfFalseExpression();", "+    Class c1 = exp1.acceptVisitor(this);", "+    Class c2 = exp2.acceptVisitor(this);", "+    // unbox a boxing type, except when the boxing type is ", "+    // Boolean and the other is not boolean", "+    if (_isBoxingType(c1) && c2.isPrimitive()) {", "+      if (!(c1 == Boolean.class && c2 != boolean.class)) {", "+        exp1 = _unbox(exp1, c1);", "+        c1 = _correspondingPrimType(c1).getValue();", "+        node.setIfTrueExpression(exp1);", "+      }", "+    }", "+    else if (_isBoxingType(c2) && c1.isPrimitive()) {", "+      if (!(c2 == Boolean.class && c1 != boolean.class)) {", "+        exp2 = _unbox(exp2, c2);", "+        c2 = _correspondingPrimType(c2).getValue();", "+        node.setIfFalseExpression(exp2);", "+      }", "+    }", "+    ", "+        // originally set to throw an error, this case now ", "+        // simply returns Object, the lowest common type", "+        ec = Object.class;", "+      }", "+    }", "+    else if (c1 == void.class || c2 == void.class) {", "+      throw new ExecutionError(\"incompatible.types\", node);", "+    }", "+    else if (c1 == boolean.class || c2 == boolean.class ||", "+             c1 == Boolean.class || c2 == Boolean.class) {", "+      if ((c1 == boolean.class && c2.isPrimitive()) || ", "+          (c2 == boolean.class && c1.isPrimitive())) {", "+        // box both", "+        node.setIfTrueExpression (_box(exp1, _correspondingRefType(c1)));", "+        node.setIfFalseExpression(_box(exp2, _correspondingRefType(c2)));", "+        ec = Object.class;", "+      }", "+      else if (c1 == Boolean.class && c2.isPrimitive()) {", "+        // box c2", "+        node.setIfFalseExpression(_box(exp2, _correspondingRefType(c2)));", "+        ec = Object.class;", "+      }", "+      else if (c2 == Boolean.class && c1.isPrimitive()) {", "+        // box c1", "+        node.setIfTrueExpression(_box(exp1, _correspondingRefType(c1)));", "+        ec = Object.class;", "+      }", "+      else if (c1 == boolean.class && _isBoxingType(c2)) {", "+        // box c1", "+        node.setIfTrueExpression(_box(exp1, Boolean.class));", "+        ec = Object.class;", "+      }", "+      else if (c2 == boolean.class && _isBoxingType(c1)) {", "+        // box c2", "+        node.setIfFalseExpression(_box(exp2, Boolean.class));", "+        ec = Object.class;", "+      }", "+      else {", "-    } ", "-    else if (c1 == boolean.class || c2 == boolean.class ||", "-             c1 == void.class    || c2 == void.class) {", "-      throw new ExecutionError(\"incompatible.types\", node);", "-             n1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "-      Number n = (Number) n1.getProperty(NodeProperties.VALUE);", "+             exp1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "+      Number n = (Number) exp1.getProperty(NodeProperties.VALUE);", "-               n2.hasProperty(NodeProperties.VALUE) && c2 == int.class) {", "-      Number n = (Number)n2.getProperty(NodeProperties.VALUE);", "+               exp2.hasProperty(NodeProperties.VALUE) && c2 == int.class) {", "+      Number n = (Number)exp2.getProperty(NodeProperties.VALUE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e040024654024595a32ef342a7008a90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "0010b17f7e497304215b54fd325dae9e3e72e53d", "commitAfterChange": "ea3e6424f15db4c84a4f6218d2ea0c54fb67dfd7", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["+    // 1", "+    ", "+    ", "+    // 2", "+    ", "+    String commented = ", "+      \"// public class foo {\\n\" +", "+      \"//   int bar;\\n\" +", "+      \"// }\";", "+    ", "+    // Start a compound edit and verify the returned key", "+    key = _defModel.getUndoManager().startCompoundEdit();", "+    assertEquals(\"Should have returned the correct key.\", 2, key);", "+    ", "+    // Insert a test string into the document", "+    _defModel.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // End the outer compound edit trigger a second compound edit", "+    _defModel.getUndoManager().endCompoundEdit(key);", "+    _defModel.commentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have commented correctly.\", commented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Undo the second compound edit", "+    _defModel.getUndoManager().undo();", "+    assertEquals(\"Should have undone the commenting.\", indented,", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Undo the first compound edit", "+    _defModel.getUndoManager().undo();", "+    assertEquals(\"Should have undone the indenting and inserting.\", \"\",", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // 3    ", "+    ", "+    // Start a compound edit and verify the returned key", "+    key = _defModel.getUndoManager().startCompoundEdit();", "+    assertEquals(\"Should have returned the correct key.\", 5, key);", "+    ", "+    // Insert a test string into the document", "+    _defModel.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Try to undo the nested edit", "+    try {", "+      _defModel.getUndoManager().undo();", "+      fail(\"Should not have allowed undoing a nested edit.\");", "+    }", "+    catch (CannotUndoException e) {", "+      // Correct: cannot undo a nested edit", "+    }", "+    ", "+    // Try end the compound edit with a wrong key", "+    try {", "+      _defModel.getUndoManager().endCompoundEdit(key + 1);", "+      fail(\"Should not have allowed ending a compound edit with a wrong key.\");", "+    }", "+    catch (IllegalStateException e) {", "+      assertEquals(\"Should have printed the correct error message.\", ", "+                   \"Improperly nested compound edits.\", e.getMessage());", "+    }", "+    ", "+    // End the compound edit and undo", "+    _defModel.getUndoManager().endCompoundEdit(key);", "+    _defModel.getUndoManager().undo();", "+    assertEquals(\"Should have undone the indenting and inserting.\", \"\",", "+                 _defModel.getText(0, _defModel.getLength()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb922a53e4639763c024e1ba719a3d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "3c45024cce34a3ee10682b132490494920e9d45a", "commitAfterChange": "66e5a8936ddc9a6a54b90689df97ecc4178fb4cc", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   private void _updateWatches()", "signatureAfterChange": "   private void _updateWatches()", "diff": ["-      String val = _model.getInteractionsModel().getVariableToString(w.getName());", "+      String name = w.getName();", "+      String val = \"\";", "+      String type = \"\";", "+      ArrayList <Integer>arr_index = new ArrayList<Integer>();", "+      ", "+      if(name.indexOf(\"[\")!=-1 && name.indexOf(\"]\")!=-1) {", "+        name = name.substring(0, name.indexOf(\"[\"));", "+        arr_index.add(Integer.parseInt(w.getName().substring(w.getName().indexOf(\"[\")+1, w.getName().indexOf(\"]\"))));      ", "+        if(w.getName().indexOf(\"]\")<(w.getName().length()-1)) {", "+          String iter = w.getName().substring(w.getName().indexOf(\"]\")+1, w.getName().length());", "+          while(iter.indexOf(\"[\")!=-1 && iter.indexOf(\"]\")!=-1) {", "+            arr_index.add(Integer.parseInt(iter.substring(iter.indexOf(\"[\")+1, iter.indexOf(\"]\"))));      ", "+            if(iter.indexOf(\"]\")<(iter.length()-1))", "+              iter = iter.substring(iter.indexOf(\"]\")+1, iter.length());", "+            else ", "+              iter = \"\";", "+          }", "+        }", "+      }", "+     ", "+      if(!arr_index.isEmpty())  {", "+        int [] indices = new int[arr_index.size()];", "+        for (int i = 0; i < arr_index.size(); i++) {", "+          indices[i] = (Integer)arr_index.get(i);", "+        }", "+        val = _model.getInteractionsModel().getVariableToString(name, indices);", "+        type = _model.getInteractionsModel().getVariableType(name, indices);", "+      }", "+      else {", "+        val = _model.getInteractionsModel().getVariableToString(name);", "+        type = _model.getInteractionsModel().getVariableType(name);", "+      }", "+      ", "-      String type = _model.getInteractionsModel().getVariableType(w.getName());"]}], "num": 28729}
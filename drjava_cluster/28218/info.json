{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1a71dc7717c4e1b1190d1090b2600cc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1453b90899882218834b78e2d93c8f7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "              public void testForUninitializedArrayInstantiationOnly()", "signatureAfterChange": "              public void testForUninitializedArrayInstantiationOnly()", "diff": ["-      SourceInfo si = SourceInfo.NO_INFO;", "+      SourceInfo si = SourceInfo.NONE;", "-      //one that works--int instance index", "-      SimpleUninitializedArrayInstantiation sa1 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {new NullLiteral(si), new NullLiteral(si), new NullLiteral(si)}));", "+      // One that works--int instance index", "+      SimpleUninitializedArrayInstantiation sa1 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", ", "+                                                                    new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {new NullLiteral(si), new NullLiteral(si), new NullLiteral(si)}));", "-      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, new TypeData[] {SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()}));", "+      TypeData[] arrayInitTypes1 =", "+        new TypeData[] { SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.INT_TYPE.getInstanceData()};", "+      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), ", "+                   _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, arrayInitTypes1));", "-      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, new TypeData[] {SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()}));", "+      TypeData[] arrayInitTypes2 =", "+        new TypeData[] { SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.CHAR_TYPE.getInstanceData()};", "+      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), ", "+                   _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, arrayInitTypes2));", "-      //one with bad index: not instance type", "-      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, new TypeData[] {SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE, SymbolData.CHAR_TYPE.getInstanceData()}));", "+      // one with bad index: not instance type", "+      TypeData[] arrayInitTypes3 =", "+        new TypeData[] { SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.INT_TYPE, ", "+                         SymbolData.CHAR_TYPE.getInstanceData()};", "+      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), ", "+                   _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, arrayInitTypes3));", "-      //one with bad index: not int type", "+      // one with bad index: not int type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59f27b3ec2344ce070a924ac45920756", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": "          public void testForArrayAccessOnly()", "signatureAfterChange": "          public void testForArrayAccessOnly()", "diff": ["-        new ArrayAccess(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+        new ArrayAccess(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, testLLVisitor, SourceInfo.NO_INFO);             ", "+      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, testLLVisitor, SourceInfo.NONE);             ", "-      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()));", "-      //if type is not an array data, give appropriate error:", "-      assertEquals(\"Should return char\", SymbolData.CHAR_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, SymbolData.CHAR_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      // if type is not an array data, give appropriate error:", "+      assertEquals(\"Should return char\", SymbolData.CHAR_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, SymbolData.CHAR_TYPE.getInstanceData(), ", "+                                           SymbolData.INT_TYPE.getInstanceData()));", "-      //If the array index is not an instance type, give error", "-      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.INT_TYPE));", "+      // If the array index is not an instance type, give error", "+      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.INT_TYPE));", "-      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb47b315d240048e5558e64e8e30c399", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "                    public void testForNumericUnaryExpressionOnly()", "signatureAfterChange": "                    public void testForNumericUnaryExpressionOnly()", "diff": ["-      NumericUnaryExpression nue = new PositiveExpression(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      NumericUnaryExpression nue = new PositiveExpression(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.CHAR_TYPE.getInstanceData()));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.BYTE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.BYTE_TYPE.getInstanceData()));", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.INT_TYPE));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.INT_TYPE));", "-      assertEquals(\"Error message should be correct\", \"You cannot use a numeric unary operator (+, -) with int, because it is a class name, not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use a numeric unary operator (+, -) with int, because it is a class name, \"", "+                     + \"not an instance.  Perhaps you meant to create a new instance of int\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"You cannot apply this unary operator to something of type boolean.  You can only apply it to a numeric type such as double, int, or char\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot apply this unary operator to something of type boolean.  You can only apply it \"", "+                     + \"to a numeric type such as double, int, or char\", errors.getLast().getFirst());"]}], "num": 28218}
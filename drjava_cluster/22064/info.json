{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0e9e84f67c6698aea0a6852602adcc4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3596430b4cd4aea11a99a2d08fabee88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public synchronized int findPrevCharPos(int pos, char[] whitespace)     throws BadLocationException", "signatureAfterChange": "   public int findPrevCharPos(int pos, char[] whitespace)     throws BadLocationException", "diff": ["-  public synchronized int findPrevCharPos(int pos, char[] whitespace)", "-    throws BadLocationException", "-  {", "-    throwErrorHuh();", "+  public int findPrevCharPos(int pos, char[] whitespace)", "+    throws BadLocationException {", "+    // throwErrorHuh();", "-    for (int i=0; i < whitespace.length; i++) {", "-      key += \":\" + whitespace[i];", "-    }", "+    for (int i = 0; i < whitespace.length; i++) { key += \":\" + whitespace[i]; }", "-    if (cached != null) {", "-      return cached.intValue();", "-    }", "-", "-    int j, i;", "-    char c;", "-    String text = getText(0, pos);", "-", "-    final int origLocation = _currentLocation;", "-    // Move reduced model to location pos", "-    _reduced.move(pos - origLocation);", "+    if (cached != null)  return cached.intValue();", "+    ", "-", "-    // Walk backward from specified position", "-    for (i = pos-1; i >= 0; i--) {", "-      boolean isWhitespace = false;", "-      c = text.charAt(i);", "-      // Check if character is whitespace", "-      for (j = 0; j < whitespace.length; j++) {", "-        if (c == whitespace[j]) {", "-          isWhitespace = true;", "+    int i = pos - 1;", "+    String text = getText(0, pos);", "+    ", "+    synchronized(_reduced) {", "+      ", "+      final int origLocation = _currentLocation;", "+      // Move reduced model to location pos", "+      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+      ", "+      // Walk backward from specified position", "+      ", "+      while (i >= 0) { ", "+        /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "+         * text[i+1:pos-1] contains invalid chars */", "+        ", "+        if (match(text.charAt(i), whitespace)) {", "+          // ith char is whitespace", "+          i--;", "+          continue;", "-      }", "-      if (!isWhitespace) {", "-        // Move reduced model to walker's location", "+        ", "+        // Found a non-whitespace char;  move reduced model to location i", "-        reducedPos = i;", "-", "-        // Check if matching char is in comment", "-        if((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-           (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "-          // Ignore matching char", "+        reducedPos = i;                  // reduced model points to i == reducedPos", "+        ", "+        // Check if matching char is within a comment (not including opening two characters)", "+        if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+            (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "+          i--;", "+          continue;", "-        else {", "-          if(_isEndOfComment(text, i)) {", "-            // Move i past the start of comment characters", "-            // and continue searching", "-            i = i - 1;", "-            _reduced.move(-1);", "-            reducedPos = i;", "-          }", "-          else {", "-            // Return position of matching char", "-            _reduced.move(origLocation - i);", "-            _storeInCache(key, new Integer(i));", "-            return i;", "-          }", "+        ", "+        if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "+          // Move i past the first comment character and continue searching", "+          i = i - 2;", "+          continue;", "+        ", "+        // Found valid previous character", "+        break;", "+      ", "+      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+      _reduced.move(origLocation - reducedPos);", "-    _reduced.move(origLocation - reducedPos);", "-    _storeInCache(key, new Integer(ERROR_INDEX));", "-    return ERROR_INDEX;", "+    ", "+    int result = reducedPos;", "+    if (i < 0) result = ERROR_INDEX;", "+    _storeInCache(key, new Integer(result));", "+    return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eba987f026caa7b2e0f0bd9b6e91866f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public synchronized int getFirstNonWSCharPos     (int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "signatureAfterChange": "   public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments)      throws BadLocationException", "diff": ["-  public synchronized int getFirstNonWSCharPos", "-    (int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "-  {", "-    throwErrorHuh();", "+  public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments) ", "+    throws BadLocationException {", "+    // throwErrorHuh();", "-    for (int i=0; i < whitespace.length; i++) {", "-      key += \":\" + whitespace[i];", "-    }", "+    for (int i = 0; i < whitespace.length; i++) { key += \":\" + whitespace[i]; }", "-    if (cached != null) {", "-      return cached.intValue();", "-    }", "+    if (cached != null)  return cached.intValue();", "-    int j, i;", "-    char c;", "+    int i = pos;", "-    for (i = pos; i != endPos; i++) {", "-      //iter++;", "-      boolean isWhitespace = false;", "-      c = text.charAt(i - pos);", "+    while (i < endPos) {", "+      ", "-      for (j = 0; j < whitespace.length && !isWhitespace; j++) {", "-        if (c == whitespace[j]) {", "-          isWhitespace = true;", "-        }", "+      if (match(text.charAt(i-pos), whitespace)) {", "+        i++;", "+        continue;", "-      if (!isWhitespace) {", "-        // Move reduced model to walker's location", "-        _reduced.move(i - reducedPos);", "-        reducedPos = i;", "-        ", "-        // Check if non-ws char is in comment, and we want to ignore them.", "-        if (!acceptComments &&", "-            ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-             (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))))", "-        {", "-          // Ignore non-ws char", "-          ", "-          // Move to next token?  (requires making getBlockOffset public)", "-          //  doesn't work yet", "-          //          int tokenSize = _reduced.currentToken().getSize();", "-          //          int offset = _reduced.getBlockOffset();", "-          //          //DrJava.consoleOut().println(\"     token len: \" + tokenSize +", "-          //          //                            \", offset: \" + offset);", "-          //          //DrJava.consoleOut().println(\"     token before: \" + _reduced.currentToken().getState());", "-          //          _reduced.move(tokenSize - offset);", "-          //          i += tokenSize - offset;", "-          //          //DrJava.consoleOut().println(\"     token after: \" + _reduced.currentToken().getState());", "-          ", "-        }", "-        else {", "-          if(!acceptComments && _isStartOfComment(text, i - pos)) {", "-            // Move i past the start of comment characters", "-            // and continue searching", "-            i = i + 1;", "-            _reduced.move(1);", "-            reducedPos = i;", "-          }", "-          else {", "-            // Return position of matching char", "-            _reduced.move(origLocation - i);", "-            _storeInCache(key, new Integer(i));", "-            return i;", "-          }", "-        }", "+      // Found a non whitespace character", "+      // Move reduced model to walker's location", "+      _reduced.move(i - reducedPos);  // reduced model points to location i", "+      reducedPos = i;                 // reduced mdoel points to location reducedPos", "+      ", "+      // Check if non-ws char is within comment and if we want to ignore them.", "+      if (!acceptComments &&", "+          ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+           (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)))) {", "+        i++;", "+        continue;", "+      ", "+      // Check if non-ws char is part of comment opening market and if we want to ignore them", "+      if (!acceptComments && _isStartOfComment(text, i - pos)) {", "+        // ith char is first char in comment open market; skip past this marker", "+        // and continue searching", "+        i = i + 2;", "+        continue;", "+      }", "+      ", "+      // Return position of matching char", "+      break;", "-    //DrJava.consoleOut().println(\"getFirstNonWS iterations: \" + iter);", "-    ", "-    _storeInCache(key, new Integer(ERROR_INDEX));", "-    return ERROR_INDEX;", "+    ", "+    int result = reducedPos;", "+    if (i == endPos) result = ERROR_INDEX;", "+    ", "+    _storeInCache(key, new Integer(result));", "+    return result;"]}], "num": 22064}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b799e7793a9e644063c0f47426cbdbd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f20c3b1344614f51b11f9f4dd529085", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "cc830d3cfb835e44d2498e98729c28536d682aad", "commitAfterChange": "611afcaf59528294d37f92105e692c81ac320af5", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 68, "signatureBeforeChange": "   public void setTab(String tab, int pos)", "signatureAfterChange": "   public void setTab(String tab, int pos)", "diff": ["-      // Removes old prefix, then adds new one", "-      // FIXME: If tab only contains spaces, then just adjust as necessary", "-      //   for efficiency, rather than replacing the whole thing", "-      if (!_hasOnlySpaces(tab) || (len != tab.length())) {", "-        remove(startPos, len);", "-        insertString(startPos, tab, null);", "+      // Adjust prefix", "+      boolean onlySpaces = _hasOnlySpaces(tab);", "+      if (!onlySpaces || (len != tab.length())) {", "+        ", "+        if (onlySpaces) {", "+          // Only add or remove the difference", "+          int diff = tab.length() - len;", "+          if (diff > 0) {", "+            insertString(firstNonWSPos, tab.substring(0, diff), null);", "+          }", "+          else {", "+            remove(firstNonWSPos + diff, -diff);", "+          }", "+        }", "+        else {", "+          // Remove the whole prefix, then add the new one", "+          remove(startPos, len);", "+          insertString(startPos, tab, null);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "920b6e1b2c7123bcbf3a9a5f1511d061", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "   public void setTab(String tab, int pos)", "signatureAfterChange": "   public void setTab(int tab, int pos)", "diff": ["+    */", "+  public void setTab(int tab, int pos) {", "+    try {", "+      int startPos = getLineStartPos(pos);", "+      int firstNonWSPos = getLineFirstCharPos(pos);", "+      int len = firstNonWSPos - startPos;", "+      ", "+      // Adjust prefix", "+      if (len != tab) {", "+        // Only add or remove the difference", "+        int diff = tab - len;", "+        if (diff > 0) insertString(firstNonWSPos, getBlankString(diff), null);", "+        else remove(firstNonWSPos + diff, -diff);", "+      }", "+      /* else do nothing */ ", "+    }", "+    catch (BadLocationException e) {", "+      // Should never see a bad location", "+      throw new UnexpectedException(e);", "+    }", "+  }", "-      // Adjust prefix", "-      boolean onlySpaces = _hasOnlySpaces(tab);", "-      if (! onlySpaces || len != tab.length()) {", "-        ", "-        if (onlySpaces) {", "-          // Only add or remove the difference", "-          int diff = tab.length() - len;", "-          if (diff > 0) insertString(firstNonWSPos, tab.substring(0, diff), null);", "-          else remove(firstNonWSPos + diff, -diff);", "-        }", "-        else {", "-          // Remove the whole prefix, then add the new one", "-          remove(startPos, len);", "-          insertString(startPos, tab, null);", "-        }", "-      }"]}], "num": 7009}
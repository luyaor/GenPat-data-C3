{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1629753c8e875123ca7fa91385fdf256", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81531c7f42916c248f78702fbbdbfa22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 32, "signatureBeforeChange": "   final public PackageDeclaration packageDeclaration() throws ParseException", "signatureAfterChange": "   final public PackageDeclaration packageDeclaration() throws ParseException", "diff": ["-    t1 = jj_consume_token(PACKAGE);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case IDENTIFIER:", "-      name = ReferenceTypeName();", "-      break;", "-    default:", "-      jj_la1[10] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case SEMICOLON:", "-      t2 = jj_consume_token(SEMICOLON);", "-      break;", "-    case 0:", "-      t2 = jj_consume_token(0);", "-      break;", "-    default:", "-      jj_la1[11] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "-    }", "-      if(name instanceof GenericReferenceType){", "-        {if (true) throw new ParseException(\"Package names cannot be parameterized.\");}", "+    try {", "+      t1 = jj_consume_token(PACKAGE);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case IDENTIFIER:", "+        name = ReferenceTypeName();", "+        break;", "+      default:", "+        jj_la1[10] = jj_gen;", "+        ;", "-      {if (true) return new PackageDeclaration(name.getRepresentation(),", "-                                    filename,", "-                                    t1.beginLine, t1.beginColumn,", "-                                    t2.endLine,   t2.endColumn);}", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case SEMICOLON:", "+        t2 = jj_consume_token(SEMICOLON);", "+        break;", "+      case 0:", "+        t2 = jj_consume_token(0);", "+        break;", "+      default:", "+        jj_la1[11] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+        if(name instanceof GenericReferenceType){", "+          _throwParseException(\"Package names cannot be parameterized.\");", "+        }", "+        if(name == null) {", "+          _throwParseException(\"Empty Package name\");", "+        }", "+        {if (true) return new PackageDeclaration(name.getRepresentation(),", "+                                      filename,", "+                                      t1.beginLine, t1.beginColumn,", "+                                      t2.endLine,   t2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid Package Declaration\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f15df9f277889ffd3b450780ff78dfde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": "   final public ImportDeclaration importDeclaration() throws ParseException", "signatureAfterChange": "   final public ImportDeclaration importDeclaration() throws ParseException", "diff": ["-    t1 = jj_consume_token(IMPORT);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case STATIC:", "-      sttic = jj_consume_token(STATIC);", "-      break;", "-    default:", "-      jj_la1[12] = jj_gen;", "-      ;", "-    }", "-    name = ReferenceTypeName();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case DOT:", "-      jj_consume_token(DOT);", "-      star = jj_consume_token(STAR);", "-      break;", "-    default:", "-      jj_la1[13] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case SEMICOLON:", "-      t2 = jj_consume_token(SEMICOLON);", "-      break;", "-    case 0:", "-      t2 = jj_consume_token(0);", "-      break;", "-    default:", "-      jj_la1[14] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "-    }", "-      if(name instanceof GenericReferenceType){", "-        {if (true) throw new ParseException(\"Import names cannot be parameterized.\");}", "+    try {", "+      t1 = jj_consume_token(IMPORT);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case STATIC:", "+        sttic = jj_consume_token(STATIC);", "+        break;", "+      default:", "+        jj_la1[12] = jj_gen;", "+        ;", "-      {if (true) return new ImportDeclaration(name.getRepresentation(), star != null, sttic != null,", "-                                   filename,", "-                                   t1.beginLine, t1.beginColumn,", "-                                   t2.endLine,   t2.endColumn);}", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case IDENTIFIER:", "+        name = ReferenceTypeName();", "+        break;", "+      default:", "+        jj_la1[13] = jj_gen;", "+        ;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case DOT:", "+        jj_consume_token(DOT);", "+        star = jj_consume_token(STAR);", "+        break;", "+      default:", "+        jj_la1[14] = jj_gen;", "+        ;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case SEMICOLON:", "+        t2 = jj_consume_token(SEMICOLON);", "+        break;", "+      case 0:", "+        t2 = jj_consume_token(0);", "+        break;", "+      default:", "+        jj_la1[15] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+        if(name instanceof GenericReferenceType){", "+          _throwParseException(\"Import names cannot be parameterized.\");", "+        }", "+        if(name == null) {", "+            _throwParseException(\"missing name; cannot import\");", "+        }", "+", "+//        if((dot == null) != (star==null))", "+//          _throwParseException(\"Invalid Import Declaration\");", "+//        ", "+        {if (true) return new ImportDeclaration(name.getRepresentation(), star != null, sttic != null,", "+                                     filename,", "+                                     t1.beginLine, t1.beginColumn,", "+                                     t2.endLine,   t2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid Import Declaration\");", "+    }"]}], "num": 4072}
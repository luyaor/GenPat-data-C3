{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e239e6d70db1edf4a018bb988109a8d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33587beb76a88e275d705a778246f6b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e5b4686a73bcd576f7afbab1ac8c349a29cf89c9", "commitAfterChange": "a24082414064ecb42431a2e612770e1ab3e9fefa", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 457, "signatureBeforeChange": "   private void _newProject()", "signatureAfterChange": "   private void _newProject()", "diff": ["-      if (projectFile == null || (projectFile.exists() && ! _verifyOverwrite())) { return; }", "+      if (projectFile == null || projectFile.getParentFile() == null) { return; }", "-        else projectFile = new File(fileName.substring(0, lastIndex) + \".xml\");", "+        else projectFile = new File(projectFile.getParentFile(), fileName.substring(0, lastIndex) + \".xml\");", "+      if (projectFile == null ||", "+          projectFile.getParentFile() == null ||", "+          (projectFile.exists() && ! _verifyOverwrite())) { return; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34ee2287aaf59f94cffe97bf05b45c9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-eclipse/edu/rice/cs/drjava/model/compiler/EclipseCompiler.java", "commitBeforeChange": "8a50a7d4180dfbf8ce4f8b3b2ddf43887adf7c81", "commitAfterChange": "924f4a516342866293ae7a5a3652d82cc6e43c22", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "          public void report(Diagnostic<? extends JavaFileObject> d)", "signatureAfterChange": "\r     \r     public void report(Diagnostic<? extends JavaFileObject> d)", "diff": ["-    ", "-    public void report(Diagnostic<? extends JavaFileObject> d) {", "-      System.err.println(\"report: \"+d);", "-      ", "-      Diagnostic.Kind dt = d.getKind();", "-      boolean isWarning = false;  // init required by javac", "-      ", "-      switch (dt) {", "-        case OTHER:             return;", "-        case NOTE:              return;", "-        case MANDATORY_WARNING: isWarning = true; break;", "-        case WARNING:           isWarning = true; break;", "-        case ERROR:             isWarning = false; break;", "-      }", "-      ", "-      /* The new Java 6.0 Diagnostic interface appears to be broken.  The expression d.getSource().getName() returns a ", "-        * non-existent path--the name of the test file (allocated as a TEMP file) appended to the source root for ", "-        * DrJava--in GlobalModelCompileErrorsTest.testCompileFailsCorrectLineNumbers().  The expression ", "-        * d.getSource().toUri().getPath() returns the correct result as does ((JCDiagnostic) d).getSourceName(). */", "-      ", "-      ", "-      _errors.add(new DJError(new File(d.getSource().toUri().getPath()), // d.getSource().getName() fails! ", "-                                    ((int) d.getLineNumber()) - 1,  // javac starts counting at 1", "-                                    ((int) d.getColumnNumber()) - 1, ", "-                                    d.getMessage(null),    // null is the locale", "-                                    isWarning));", "-    }", "+    \r", "+    public void report(Diagnostic<? extends JavaFileObject> d) {\r", "+      Diagnostic.Kind dt = d.getKind();\r", "+      boolean isWarning = false;  // init required by javac\r", "+      \r", "+      switch (dt) {\r", "+        case OTHER:             return;\r", "+        case NOTE:              return;\r", "+        case MANDATORY_WARNING: isWarning = true; break;\r", "+        case WARNING:           isWarning = true; break;\r", "+        case ERROR:             isWarning = false; break;\r", "+      }\r", "+      \r", "+      /* The new Java 6.0 Diagnostic interface appears to be broken.  The expression d.getSource().getName() returns a \r", "+        * non-existent path--the name of the test file (allocated as a TEMP file) appended to the source root for \r", "+        * DrJava--in GlobalModelCompileErrorsTest.testCompileFailsCorrectLineNumbers().  The expression \r", "+        * d.getSource().toUri().getPath() returns the correct result as does ((JCDiagnostic) d).getSourceName(). */\r", "+      \r", "+      if (d.getSource()!=null) {\r", "+          _errors.add(new DJError(new File(d.getSource().toUri().getPath()), // d.getSource().getName() fails! \r", "+                                  ((int) d.getLineNumber()) - 1,  // javac starts counting at 1\r", "+                                  ((int) d.getColumnNumber()) - 1, \r", "+                                  d.getMessage(Locale.getDefault()),    // JVM default locale\r", "+                                  isWarning));\r", "+      }\r", "+      else {\r", "+          _errors.add(new DJError(d.getMessage(Locale.getDefault()), isWarning));\r", "+      }\r", "+    }\r"]}], "num": 17899}
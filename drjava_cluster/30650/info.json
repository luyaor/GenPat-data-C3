{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85bff82a13aa7484e3a7e96393e44052", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bd226c0123f1644e1ba831e8f6872d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public Void forClassDefDoFirst(ClassDef that)", "signatureAfterChange": "   public Void forClassDefDoFirst(ClassDef that)", "diff": ["-    String name = that.getName().getText();", "+    String name = that.getName().getText();  // name of defined class", "-      if (s.endsWith(name) && !s.equals(getQualifiedClassName(name))) {", "+      if (s.endsWith(name) && ! s.equals(getQualifiedClassName(name))) {", "-    //top level classes cannot be private.", "+    // top level classes cannot be private.", "+    ", "+    // See if this is a Blacklisted class.  Blacklisted classes are any classes in java.lang or TestCase.", "+    SymbolData javaLangClass = ", "+      getSymbolData(\"java.lang.\" + that.getName().getText(), that.getSourceInfo(), true, false, false, false);", "+    if (that.getName().getText().equals(\"TestCase\") || (javaLangClass != null && ! javaLangClass.isContinuation())) {", "+      _addError(\"You cannot define a class with the name \" + that.getName().getText() + ", "+                \" because that class name is reserved.\" +", "+                \"  Please choose a different name for this class\", that);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e93b4161f43a3b1dcf6a082fb16de814", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryVisitor.java", "commitBeforeChange": "5e7a16013fcb5945eddc036e2d2d0ce3e14ba2d0", "commitAfterChange": "e1389ddb9dcb8a7d3a230cc1be322481e1c8fd6a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void forClassDefDoFirst(ClassDef that)", "signatureAfterChange": "   public Void forClassDefDoFirst(ClassDef that)", "diff": ["-  public void forClassDefDoFirst(ClassDef that) {", "+  public Void forClassDefDoFirst(ClassDef that) {", "-    SymbolData javaLangClass = getSymbolData(\"java.lang.\" + that.getName().getText(), that.getSourceInfo(), true, false, false, false);", "+    SymbolData javaLangClass = ", "+      getSymbolData(\"java.lang.\" + that.getName().getText(), that.getSourceInfo(), true, false, false, false);", "-      _addError(\"You cannot define a class with the name \" + that.getName().getText() + \" at the Elementary Level, because that class name is reserved.  Please choose a different name for this class\", that);", "+      _addError(\"You cannot define a class with the name \" + that.getName().getText() + ", "+                \" at the Elementary Level, because that class name is reserved.\" +", "+                \"  Please choose a different name for this class\", that);", "-    super.forClassDefDoFirst(that);", "+    return super.forClassDefDoFirst(that);"]}], "num": 30650}
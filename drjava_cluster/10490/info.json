{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a602534bfa74c822ab0462ab73186df3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34cf29d2edf751aab979105093711e57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "462c4a613a015a2dbcac948815ea1318bb028f22", "commitAfterChange": "0709b991a23f9136532fa9ea3471d8a6bc4cbcfe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   private AssignExpression _parseAssignExpression(String text)", "signatureAfterChange": "      public Object interpret(String testString) throws InterpreterException", "diff": ["-  private AssignExpression _parseAssignExpression(String text) {", "-    JavaCCParserFactory parserFactory = new JavaCCParserFactory();", "-    SourceCodeParser parser = parserFactory.createParser(new java.io.StringReader(text), \"\");", "-    try {", "-      return (AssignExpression) parser.parseStream().get(0);", "-    }", "-    catch (ClassCastException e) {", "-      throw new ClassCastException(\"The parsed expression was not an AssignExpression: \"+", "-                                   \"\\\"\" + text + \"\\\"\");", "-    }", "+  ", "+  public Object interpret(String testString) throws InterpreterException {", "+    return strInterpreter.interpret(new StringReader(testString), \"Unit Test\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74836a4a45b5f7e9ec08dc8b8c9e3938", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/EnumDeclaration.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    static List<Node> HandleConstructors(String name, List<Node> body)", "signatureAfterChange": "    static List<Node> HandleConstructors(String name, List<Node> body)", "diff": ["-    List<IdentifierToken> idnt1  = new LinkedList<IdentifierToken>();", "-    idnt1.add(new Identifier(\"$1\"));", "-    List<IdentifierToken> idnt2  = new LinkedList<IdentifierToken>();", "-    idnt2.add(new Identifier(\"$2\"));", "-", "-    args.add(new QualifiedName(idnt1));", "-    args.add(new QualifiedName(idnt2));", "+    args.add(new AmbiguousName(\"$1\"));", "+    args.add(new AmbiguousName(\"$2\"));", "-        ((ConstructorDeclaration)current).setConstructorInvocation(new ConstructorInvocation(null, args, true));", "+        ((ConstructorDeclaration)current).setConstructorCall(new ConstructorCall(null, args, true));", "-                                          new ConstructorInvocation(null, args, true),", "+                                          new ConstructorCall(null, args, true),"]}], "num": 10490}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f5bd620f58b07f912a3957b553baa48", "detectedBy": ["DIFF_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58535a8618689d0cc504b2a082e42862", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 32, "signatureBeforeChange": "     protected void _insertErrors(DefaultStyledDocument doc) throws BadLocationException", "signatureAfterChange": "     protected void _insertErrors(DefaultStyledDocument doc) throws BadLocationException", "diff": ["-      // Show errors", "+      ", "+      //Added this counter in order to add errors and warnings in correct order and select them correctly", "+      //Previous version used errorNum as a counter, but this doesn't work anymore because we are not doing", "+      //errors and variables at the same time.", "+      int errorPositionInListOfErrors = 0;", "+      // Show errors first and warnings second", "+      ", "+      String errorTitle = _getErrorTitle();", "+      if (cem.getNumWarnings() > 0)   ", "+        doc.insertString(doc.getLength(), errorTitle, BOLD_ATTRIBUTES);", "+      ", "-        _insertErrorText(err, doc);", "-        ", "-        Position pos = doc.createPosition(startPos);", "-        _errorListPositions[errorNum] = pos;", "-        _errorTable.put(pos, err);", "+        if (!err.isWarning()){", "+          _insertErrorText(err, doc);", "+          Position pos = doc.createPosition(startPos);", "+          _errorListPositions[errorPositionInListOfErrors] = pos;", "+          _errorTable.put(pos, err);", "+          errorPositionInListOfErrors++;", "+        }", "+      ", "+      String warningTitle = _getWarningTitle();", "+      if (cem.getNumCompErrors() > 0)   ", "+        doc.insertString(doc.getLength(), warningTitle, BOLD_ATTRIBUTES);", "+      ", "+      for (int errorNum = 0; errorNum < numErrors; errorNum++) {", "+        int startPos = doc.getLength();", "+        CompilerError err = cem.getError(errorNum);", "+        ", "+        if (err.isWarning()){", "+          _insertErrorText(err, doc);", "+          Position pos = doc.createPosition(startPos);", "+          _errorListPositions[errorPositionInListOfErrors] = pos;", "+          _errorTable.put(pos, err);", "+          errorPositionInListOfErrors++;", "+        }", "+      }      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9c3c6e804559ce8624ffd1256324a1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "facb31d52d0108009578d6a1708ac1dfc68b98b8", "commitAfterChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void _updateWithErrors() throws BadLocationException", "signatureAfterChange": "     private void _updateWithErrors() throws BadLocationException", "diff": ["-      JUnitError[] errors = errorModel.getErrors();", "-", "-      if (errors.length > 0) {", "+      JUnitError[] errorsWithPositions = errorModel.getErrorsWithPositions();", "+      JUnitError[] errorsWithoutPositions = errorModel.getErrorsWithoutPositions();", "+      ", "+      if ((errorsWithoutPositions.length > 0) ||", "+            (errorsWithPositions.length > 0)) {", "+        ", "+        // Show errors without source locations", "+        for (int j = 0; j < errorsWithoutPositions.length; j++, errorNum++) {", "+          int startPos = doc.getLength();", "+          ", "+          doc.insertString(doc.getLength(), \"================\\n\", NORMAL_ATTRIBUTES);", "+          ", "+          doc.insertString(doc.getLength(), \"File: \", BOLD_ATTRIBUTES);", "+          doc.insertString(doc.getLength(), filename + \"\\n\", NORMAL_ATTRIBUTES);", "-        // Show errors", "-        for (int j = 0; j < errors.length; j++, errorNum++) {", "+          _insertErrorText(errorsWithoutPositions, j, doc);", "+          ", "+          // Note to user that there is no source info for this error", "+          doc.insertString(doc.getLength(),", "+                           \" (no source location)\",", "+                           NORMAL_ATTRIBUTES);", "+          doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "+          ", "+          Position pos = doc.createPosition(startPos);", "+          _errorListPositions[errorNum] = pos;", "+          _errorTable.put(pos, errorsWithoutPositions[j]);", "+        }", "+        ", "+        ", "+        // Show errors with source locations", "+        for (int j = 0; j < errorsWithPositions.length; j++, errorNum++) {", "+          //WARNING: the height of the highlight box in JUnitError panel is dependent on the ", "+          // presence of this extra line. If removed, code must be changed in order to account for its", "+          // absence.", "+          doc.insertString(doc.getLength(), \"================\\n\", NORMAL_ATTRIBUTES);", "+          ", "-          _insertErrorText(errors, j, doc);", "+          _insertErrorText(errorsWithPositions, j, doc);", "-          _errorTable.put(pos, errors[j]);", "+          _errorTable.put(pos, errorsWithPositions[j]);"]}], "num": 6143}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94a3adb6b51efec7f7e75f717210ad39", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b62978cb52e54517891fbef89166ba9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void interpret(final String input, final InterpreterData interpreter)", "signatureAfterChange": "   public void interpret(final String input, final InterpreterData interpreter)", "diff": ["+    _log.log(this + \".interpret(\" + input + \") called\");", "-      synchronized(this) { ", "-        if (interpretationInProgress) {", "+      synchronized(interpreter) { ", "+        if (interpreter.inProgress()) {", "-      interpretationInProgress = true; ", "+//      interpretationInProgress = true; ", "-              _dialog(\"to interp: \" + s);", "+              _log.log(\"Interpreter thread for \" + input + \" has started\");", "+//              _dialog(\"to interp: \" + s);", "-      interpretationInProgress = false;", "+//      interpretationInProgress = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ac00a93185f4f2b73d9dff3900215c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void dispose() throws RemoteException", "signatureAfterChange": "   public void dispose() throws RemoteException", "diff": ["+    _log.log(this + \".dispose() called; slaveRemote is \" + _slave);", "+    if (_startupInProgress) _log.log(this + \".dispose() is KILLing startup in process; dying slave reference does not yet exist\");", "-    if (dyingSlave != null) dyingSlave.quit();  // unsynchronized; may hasten the death of dyingSlave", "+    if (dyingSlave != null) { ", "+      _log.log(this + \".dispose() QUITing \" + dyingSlave);", "+      dyingSlave.quit();  // unsynchronized; may hasten the death of dyingSlave", "+    }"]}], "num": 6974}
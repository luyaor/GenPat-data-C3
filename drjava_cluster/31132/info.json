{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f201260473ff31cf74714a47e38ff77d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48d954b41f976796f036b722d8ed7e0c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public Class visit(ComplementExpression node)", "signatureAfterChange": "   public Class visit(ComplementExpression node)", "diff": ["-    Node  n = node.getExpression();", "-    Class c = n.acceptVisitor(this);", "+    Expression e = node.getExpression();", "+    Class c = e.acceptVisitor(this);", "+    Class returnType = c;", "-    if (c == char.class || c == byte.class || c == short.class) {", "-      node.setProperty(NodeProperties.TYPE, c = int.class);", "-    } else if (c == int.class  || c == long.class) {", "-      node.setProperty(NodeProperties.TYPE, c);", "-    } else {", "+    if (c == char.class      || c == byte.class || c == short.class ||", "+        c == Character.class || c == Byte.class || c == Short.class) {", "+      node.setProperty(NodeProperties.TYPE, int.class);", "+    } ", "+    else if (c == int.class     || c == long.class ||", "+             c == Integer.class || c == Long.class) {", "+      if (c == Integer.class) {", "+        returnType = int.class;", "+      }", "+      else if (c == Long.class) {", "+        returnType = long.class;", "+      }", "+      node.setProperty(NodeProperties.TYPE, returnType);", "+    } ", "+    else {", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(c)) {", "+      node.setExpression(_unbox(e, c));", "+    }", "+    ", "-    if (n.hasProperty(NodeProperties.VALUE)) {", "-      Object o = n.getProperty(NodeProperties.VALUE);", "+    if (e.hasProperty(NodeProperties.VALUE)) {", "+      Object o = e.getProperty(NodeProperties.VALUE);", "+      ", "-      } else {", "+      } ", "+      else {", "-    return c;", "+    return returnType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee2a54e6ee19438d4cd23e617738e068", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "   private Class visitUnaryOperation(UnaryExpression node, String s)", "signatureAfterChange": "   private Class visitUnaryOperation(UnaryExpression node, String s)", "diff": ["-    Class c = node.getExpression().acceptVisitor(this);", "+    Expression exp = node.getExpression();", "+    Class c = exp.acceptVisitor(this);", "+    Class returnType = c;", "-    if (c == char.class || c == byte.class || c == short.class || c == int.class) {", "+    if (c == char.class      || c == byte.class || c == short.class || c == int.class ||", "+        c == Character.class || c == Byte.class || c == Short.class || c == Integer.class) {", "-    } else if (c == long.class || c == float.class || c == double.class) {", "-      node.setProperty(NodeProperties.TYPE, c);", "-    } else {", "+    }", "+    else if (c == long.class || c == float.class || c == double.class ||", "+             c == Long.class || c == Float.class || c == Double.class) {", "+      if (c == Long.class) {", "+        returnType = long.class;", "+      }", "+      else if (c == Float.class) {", "+        returnType = float.class;", "+      }", "+      else if (c == Double.class) {", "+        returnType = double.class;", "+      }", "+      node.setProperty(NodeProperties.TYPE, returnType);", "+    }", "+    else {", "-    return c;", "+    ", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(c)) {", "+      node.setExpression(_unbox(exp, c));", "+    }", "+    ", "+    return returnType;"]}], "num": 31132}
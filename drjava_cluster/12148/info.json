{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf0ddcca3f5095c6e1620c2f3c8cad69", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8777af5852956684ac2ece25d650cca7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public Object visit(ObjectFieldAccess node)", "signatureAfterChange": "   public Class visit(ObjectFieldAccess node)", "diff": ["-     */", "-    public Object visit(ObjectFieldAccess node) {", "-        // Visit the expression", "-        Class c = (Class)node.getExpression().acceptVisitor(this);", "-\t", "-        // Load the field object", "-        if (!c.isArray()) {", "-            Field f = null;", "-            try {", "-                f = context.getField(c, node.getFieldName());", "-            } catch (Exception e) {", "-                throw new CatchedExceptionError(e, node);", "-            }", "-", "-\t    // Set the node properties", "-\t    node.setProperty(NodeProperties.FIELD, f);", "-\t    node.setProperty(NodeProperties.TYPE,  c = f.getType());", "-", "-\t    node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "-\t    return c;", "-\t} else {", "-            if (!node.getFieldName().equals(\"length\")) {", "-\t\tString s0 = \"length\";", "-\t\tString s1 = c.getComponentType().getName() + \" array\";", "-\t\tnode.setProperty(NodeProperties.ERROR_STRINGS, new String[] { s0, s1 });", "-                throw new ExecutionError(\"no.such.field\", node);", "-            }", "-            node.setProperty(NodeProperties.TYPE,  int.class);", "-            node.setProperty(NodeProperties.MODIFIER, new InvalidModifier(node));", "-\t    return int.class;", "-\t}", "-    }", "+   */", "+  public Class visit(ObjectFieldAccess node) {", "+    // Visit the expression", "+    Class c = (Class)node.getExpression().acceptVisitor(this);", "+    ", "+    // Load the field object", "+    if (!c.isArray()) {", "+      Field f = null;", "+      try {", "+        f = context.getField(c, node.getFieldName());", "+      } catch (Exception e) {", "+        throw new CatchedExceptionError(e, node);", "+      }", "+      ", "+      // Set the node properties", "+      node.setProperty(NodeProperties.FIELD, f);", "+      node.setProperty(NodeProperties.TYPE,  c = f.getType());", "+      ", "+      node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "+      return c;", "+    } else {", "+      if (!node.getFieldName().equals(\"length\")) {", "+        String s0 = \"length\";", "+        String s1 = c.getComponentType().getName() + \" array\";", "+        node.setProperty(NodeProperties.ERROR_STRINGS, new String[] { s0, s1 });", "+        throw new ExecutionError(\"no.such.field\", node);", "+      }", "+      node.setProperty(NodeProperties.TYPE,  int.class);", "+      node.setProperty(NodeProperties.MODIFIER, new InvalidModifier(node));", "+      return int.class;", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee99c7f27915bbbe973d18f44407a75b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public Object visit(StaticMethodCall node)", "signatureAfterChange": "   public Class visit(StaticMethodCall node)", "diff": ["-     */", "-    public Object visit(StaticMethodCall node) {", "-        // Do the type checking of the arguments", "-        List args = node.getArguments();", "-        Class[] cargs = Constants.EMPTY_CLASS_ARRAY;", "-        if (args != null) {", "-            cargs = new Class[args.size()];", "-            Iterator it = args.iterator();", "-            int      i  = 0;", "-            while (it.hasNext()) {", "-                cargs[i++] = (Class)((Node)it.next()).acceptVisitor(this);", "-            }", "-        }", "-        Method m = null;", "-        Node   n = node.getMethodType();", "-\tClass  c = (Class)n.acceptVisitor(this);", "-", "-        try {", "-            m = context.lookupMethod(n, node.getMethodName(), cargs);", "-        } catch (NoSuchMethodException e) {", "-\t    String s0 = node.getMethodName();", "-\t    String s1 = c.getName();", "-\t    node.setProperty(NodeProperties.ERROR_STRINGS, new String[] { s0, s1 });", "-\t    throw new ExecutionError(\"no.such.method\", node);", "-        }", "-", "-        // Set the node properties", "-        node.setProperty(NodeProperties.METHOD, m);", "-        node.setProperty(NodeProperties.TYPE,   c = m.getReturnType());", "-        return c;", "-    }", "+   */", "+  public Class visit(StaticMethodCall node) {", "+    // Do the type checking of the arguments", "+    List args = node.getArguments();", "+    Class[] cargs = Constants.EMPTY_CLASS_ARRAY;", "+    if (args != null) {", "+      cargs = new Class[args.size()];", "+      Iterator it = args.iterator();", "+      int      i  = 0;", "+      while (it.hasNext()) {", "+        cargs[i++] = (Class)((Node)it.next()).acceptVisitor(this);", "+      }", "+    }", "+    Method m = null;", "+    Node   n = node.getMethodType();", "+    Class  c = (Class)n.acceptVisitor(this);", "+    ", "+    try {", "+      m = context.lookupMethod(n, node.getMethodName(), cargs);", "+    } catch (NoSuchMethodException e) {", "+      String s0 = node.getMethodName();", "+      String s1 = c.getName();", "+      node.setProperty(NodeProperties.ERROR_STRINGS, new String[] { s0, s1 });", "+      throw new ExecutionError(\"no.such.method\", node);", "+    }", "+    ", "+    // Set the node properties", "+    node.setProperty(NodeProperties.METHOD, m);", "+    node.setProperty(NodeProperties.TYPE,   c = m.getReturnType());", "+    return c;", "+  }"]}], "num": 12148}
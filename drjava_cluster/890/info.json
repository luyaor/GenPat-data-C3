{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d2f22b098069b2107f4d31591bf33ca", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "434f79b19ba9a72eb4e7b78b57f28346", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWith.java", "commitBeforeChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "commitAfterChange": "0d293f065df295b40875d176fa985aae8404680f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    throw new RuntimeException(\"Not yet implemented.\");", "-    ", "-    /*  FIXME: don't look in comments if _searchComments == false", "-    int start = startOfLine(doc, pos);", "-    int end = endOfLine(doc, pos);", "-    String text = doc.getText(start, end);", "-    int prefixPos = text.indexOf(_prefix);", "-    return (prefixPos == 0);", "-    */", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      int firstChar = doc.getLineFirstCharPos(startLine);", "+      ", "+      // Compare prefix", "+      String actualPrefix = doc.getText(firstChar, _prefix.length());", "+      return _prefix.equals(actualPrefix);", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54e35800b711b96c7ea3637eef391a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineEmpty.java", "commitBeforeChange": "42669dc5656697beebfecb16842ba181e2bab301", "commitAfterChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    // one solution: if startOfLine somehow tells you when ", "-    //   there's no first WS char on this line", "-    //   (i.e. the line is empty), just use that.", "-    // otherwise:", "-    // START = findPrevDelimiter(start of statement)   --START", "-    // END = go forward to find first \\n or EOF", "-    // return true if there's only WS between START and END    ", "-", "-    throw new RuntimeException(\"Not yet implemented!\");", "+    try {", "+      // Determine if there are only whitespace chars by seeing if the", "+      //  first non-WS char is the endOfLine", "+      int here = doc.getCurrentLocation();", "+      int endOfLine = doc.getLineEndPos(here);", "+      int firstNonWS = doc.getLineFirstCharPos(here);", "+      return (endOfLine == firstNonWS);", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }"]}], "num": 890}
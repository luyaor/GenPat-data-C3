{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35869d9693c00cc21941a441ea0e8f3b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7384b9ac1aef06452f4575121736fcc7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "35d9365226ba0771f8b6c75f7ce46695407e7805", "commitAfterChange": "e00a80132d9c599630e60c288ab824f99427e68b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected ObjectMethodCall _getObjectMethodCallForFunction(MethodCall method, Context context)", "signatureAfterChange": "   protected ObjectMethodCall _getObjectMethodCallForFunction(MethodCall method, Context context)", "diff": ["+    ", "+    // Check if this has an anonymous inner class", "+    if (hasAnonymous(_thisClassName)) { ", "+      // Get the class", "+      Class c = _loadClassForThis(context);", "+      Field[] fields = c.getDeclaredFields();    ", "+      int numToWalk;", "+      String outerClassName = null;", "+      // Check for a field that begins with this$", "+      for (int i = 0; i < fields.length; i++) {", "+        if (fields[i].getName().startsWith(\"this$\")) {", "+          String fieldName = fields[i].getName();", "+          int lastIndex = fieldName.lastIndexOf(\"$\");", "+          numDollars = Integer.valueOf(fieldName.substring(lastIndex+1, fieldName.length())).intValue() + 1;", "+          break;", "+        }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f23f542b3ab6a1f4510ca075e59628f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "17285283461a98a54216b38ffd842a9ade691a61", "commitAfterChange": "c5c5f6e584e52b0f1a2d2a9448693aba4f7f3980", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected ObjectFieldAccess _getObjectFieldAccessForField(String field, Context context)", "signatureAfterChange": "   protected ObjectFieldAccess _getObjectFieldAccessForField(String field, Context context)", "diff": ["-    for (int i = 0; i <= numDollars; i++) {          ", "-      expr = _buildObjectFieldAccess(i, numDollars);", "-      expr = new ObjectFieldAccess(expr, field);", "+    Expression newExpr = null;", "+    ", "+    // Check if this has an anonymous inner class", "+    if (hasAnonymous(_thisClassName)) { ", "+      // Get the class", "+      Class c;", "-        // the type checker will tell us if it's a field", "-        tc.visit((ObjectFieldAccess)expr);", "-        return (ObjectFieldAccess)expr;", "+        c = context.lookupClass(_thisClassName);", "-      catch (ExecutionError e2) {", "-        // do nothing, try an outer class", "+      catch (ClassNotFoundException e) {", "+        throw new UnexpectedException (e);", "+      }", "+      Field[] fields = c.getDeclaredFields();    ", "+      int numToWalk;", "+      String outerClassName = null;", "+      // Check for a field that begins with this$", "+      for (int i = 0; i < fields.length; i++) {", "+        if (fields[i].getName().startsWith(\"this$\")) {", "+          String fieldName = fields[i].getName();", "+          int lastIndex = fieldName.lastIndexOf(\"$\");", "+          numDollars = Integer.valueOf(fieldName.substring(lastIndex+1, fieldName.length())).intValue() + 1;", "+          break;", "+        }", "+    for (int i = 0; i <= numDollars; i++) {          ", "+      expr = _buildObjectFieldAccess(i, numDollars);", "+      newExpr = new ObjectFieldAccess(expr, field);", "+      try {", "+        // the type checker will tell us if it's a field", "+        tc.visit((ObjectFieldAccess)newExpr);", "+        return (ObjectFieldAccess)newExpr;", "+      }", "+      catch (ExecutionError e) {", "+        // try concatenating \"val$\" to the beginning of field", "+        newExpr = new ObjectFieldAccess(expr, \"val$\" + field);", "+        try {", "+          // the type checker will tell us if it's a field", "+          tc.visit((ObjectFieldAccess)newExpr);", "+          return (ObjectFieldAccess)newExpr;", "+        }", "+        catch (ExecutionError e2) {", "+          // do nothing, try an outer class", "+        }", "+      }", "+    }", "+    "]}], "num": 11570}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b06bedc78c8552bdde4dc81d98c460e0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e0db230d23cb64c4c2fd350d367ea2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "930b1ef6cc279650a085c7c6499b1b57cb240018", "commitAfterChange": "73b3ce3968c13472938fea3d36b496150c938bd2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public synchronized void removeBreakpoint(Breakpoint breakpoint)", "signatureAfterChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint)", "diff": ["-  public synchronized void removeBreakpoint(Breakpoint breakpoint) {", "+  public synchronized void removeBreakpoint(final Breakpoint breakpoint) {", "-    if (breakpoint.getRequest() != null) {", "-      _breakpoints.remove((BreakpointRequest)breakpoint.getRequest());", "+    _breakpoints.removeElement(breakpoint);", "+    ", "+    if ( breakpoint.getRequest() != null && _eventManager != null) {", "+    ", "+    notifyListeners(new EventNotifier() {", "+      public void notifyListener(DebugListener l) {", "+        l.breakpointRemoved(breakpoint);", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20296e1acfe7c738743c11529feb8e98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/Configuration.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public <T> T setSetting(Option<T> op, T value)", "signatureAfterChange": "   public <T> T setSetting(final Option<T> op, final T value)", "diff": ["-  public <T> T setSetting(Option<T> op, T value) {", "+  public <T> T setSetting(final Option<T> op, final T value) {", "-    op.notifyListeners(this, value);", "+    Utilities.invokeLater(new Runnable() { public void run() { op.notifyListeners(Configuration.this, value); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33eaf2e0bfa41464851f502b44c6eeb6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public synchronized void removeWatch(int index) throws DebugException", "signatureAfterChange": "   public synchronized void removeWatch(int index) throws DebugException", "diff": ["-    _ensureReady();", "+    // _ensureReady();", "+      final DebugWatchData watch = _watches.get(index);", "+      Utilities.invokeLater(new Runnable() { public void run() { _notifier.watchRemoved(watch); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6246700f26435a0a92f3c083a9b4c5d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void _ensureLegalCaretPos()", "signatureAfterChange": "     protected void _ensureLegalCaretPos(DocumentEvent e)", "diff": ["-    protected void _ensureLegalCaretPos() {", "+    protected void _ensureLegalCaretPos(DocumentEvent e) {", "+//      System.err.println(\"_ensureLegalCaretPosition(\" + e + \") called\");", "-      int len = doc.getLength();", "-      if (_pane.getCaretPosition() > len) {", "-        _cachedCaretPos = len;", "-        _pane.setCaretPosition(len);", "+      int newPos = _pane.getCaretPosition();", "+      final int len = doc.getLength();", "+//      System.err.println(\"caretPos = \" + newPos + \" len = \" + len);", "+      if (newPos > len) {", "+        newPos = len;", "+        Utilities.invokeLater(new Runnable() { public void run() { _pane.setCaretPosition(len); } });", "+      setCachedCaretPos(newPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87d9e6fba8dfdc2e27c08be17c822bf3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public synchronized void addWatch(String field) throws DebugException", "signatureAfterChange": "   public synchronized void addWatch(String field) throws DebugException", "diff": ["-    _ensureReady();", "+    // _ensureReady();", "-    _watches.add(new DebugWatchData(field));", "+    final DebugWatchData w = new DebugWatchData(field);", "+    _watches.add(w);", "+    ", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.watchSet(w); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9df09610e98dba626e26c74bad36da49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "08f616afaebe02cc02ba5da4da4990852caead81", "commitAfterChange": "879a487e79b03eab55f32f29728bf19cb9181971", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "diff": ["-  private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests) {", "+  private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests) {", "-              _jvm.runTestSuite();", "+              boolean testsPresent = _jvm.runTestSuite();  // The false boolean return value could be changed to an exception.", "+              if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "-            catch(RemoteException e) { ", "-              /* System.err.println(\"Caught \" + e); */", "-              throw new UnexpectedException(e); ", "+            catch(RemoteException e) { // Unit testing was aborted; cleanup", "+              EventQueue.invokeLater(new Runnable() { public void run() { nonTestCase(allTests); } });", "-        // Probably a java.rmi.UnmarshalException caused by the interruption of unit testing.", "-        // Swallow the exception and proceed."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a25afd5fe29c3f68fb2e903d934e5066", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public synchronized void removeWatch(String field) throws DebugException", "signatureAfterChange": "   public synchronized void removeWatch(String field) throws DebugException", "diff": ["-    _ensureReady();", "+    // _ensureReady();", "-      DebugWatchData watch = _watches.get(i);", "+      final DebugWatchData watch = _watches.get(i);", "+        Utilities.invokeLater(new Runnable() { public void run() { _notifier.watchRemoved(watch); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8fb9602c8426d9e5e964c1d775141fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 472, "methodNumberAfterChange": 473, "signatureBeforeChange": "   public void uncommentLines()", "signatureAfterChange": "   public void uncommentLines()", "diff": ["-  // Uncomment out current selection using wing commenting.  Public for testing purposes only. */", "+  // Uncomment out current selection using wing commenting.  Public for testing purposes only. Only runs in event thread. */", "-    int newEnd = openDoc.uncommentLines(start, end);", "+    final int newEnd = openDoc.uncommentLines(start, end);", "-    if (startOffset != startPos.getOffset()) start -= 2;      ", "-    _currentDefPane.setCaretPosition(start);", "-    if (start != end) _currentDefPane.moveCaretPosition(newEnd);", "+    if (startOffset != startPos.getOffset()) start -= 2;", "+    final int f_start = start;", "+    final boolean moveSelection = start != end;", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        _currentDefPane.setCaretPosition(f_start);", "+        if (moveSelection) _currentDefPane.moveCaretPosition(newEnd);", "+      } ", "+    });   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c92239e31bc58fb766d2bd5d92789506", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 502, "methodNumberAfterChange": 507, "signatureBeforeChange": "    public void handleAlreadyOpenDocument(OpenDefinitionsDocument doc)", "signatureAfterChange": "    public void handleAlreadyOpenDocument(OpenDefinitionsDocument doc)", "diff": ["+     boolean docChanged = !doc.equals(_model.getActiveDocument());", "+     if (docChanged) {", "+       addToBrowserHistory();", "+     }", "+     ", "+     ", "+     // defer executing this code until after active document switch (if any) is complete", "+     SwingUtilities.invokeLater(new Runnable() {", "+       public void run() {", "+         addToBrowserHistory();", "+       }", "+     });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb03fd6c4fae285bcb4409e27a26d31d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "481944e3395dcc7a19e81902c59977be65ba633a", "commitAfterChange": "c682fca099b13e765e0e1f201629222d04fb1339", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 193, "signatureBeforeChange": "     protected DefinitionsDocument getDocument()", "signatureAfterChange": "     protected DefinitionsDocument getDocument()", "diff": ["-      catch(IOException ioe) {", "+      catch(IOException ioe) { // document has been moved or deleted", "-          if (! isUntitled())  ", "-            _documentNavigator.refreshDocument(this, _file.getCanonicalFile().getParent());", "-          else throw new UnexpectedException(ioe); // Is this line reachable?", "-          ", "-        } catch(Throwable t) { throw new UnexpectedException(t); }", "-        //  System.out.println(\"DefaultGlobalModel: 1432: IOException should be handled by box that fixes everything.\");", "+          final String path = _file.getCanonicalFile().getParent();", "+          try {", "+            Utilities.invokeAndWait(new Runnable() {", "+              public void run() { _documentNavigator.refreshDocument(ConcreteOpenDefDoc.this, path); }", "+            });", "+            return _cacheAdapter.getDocument(); ", "+          }", "+          catch(InterruptedException e) { throw new UnexpectedException(e); }", "+        }", "+        catch(Throwable t) { throw new UnexpectedException(t); }", "-      ", "-      return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27ef0e6a36b2cc1f4fdae1f8fc9520f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "signatureAfterChange": "   public void loadHistory(final FileOpenSelector selector) throws IOException", "diff": ["-  public void loadHistory(FileOpenSelector selector) throws IOException {", "+  public void loadHistory(final FileOpenSelector selector) throws IOException {", "-    _document.acquireWriteLock();", "-    try {", "-      _document.clearCurrentInteraction();", "-      ", "-      // Insert into the document and interpret", "-      final StringBuilder buf = new StringBuilder();", "-      for (String hist: histories) {", "-        ArrayList<String> interactions = _removeSeparators(hist);", "-        for (String curr: interactions) {", "-          int len = curr.length();", "-          buf.append(curr);", "-          if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "-          buf.append(StringOps.EOL);", "+    final ArrayList<String> _histories = histories;", "+", "+    Utilities.invokeAndWait(new Runnable() {  // must run in event thread because caret is updated indivisibly", "+      public void run() {", "+        _document.acquireWriteLock();", "+        try {", "+          _document.clearCurrentInteraction();", "+          ", "+          // Insert into the document and interpret", "+          final StringBuilder buf = new StringBuilder();", "+          for (String hist: _histories) {", "+            ArrayList<String> interactions = _removeSeparators(hist);", "+            for (String curr: interactions) {", "+              int len = curr.length();", "+              buf.append(curr);", "+              if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "+              buf.append(StringOps.EOL);", "+            }", "+          }", "+          String text = buf.toString().trim();", "+//          System.err.println(\"Histtory is: '\" + text + \"'\");", "+          append(text, InteractionsDocument.DEFAULT_STYLE);", "+        finally { _document.releaseWriteLock(); }", "+        interpretCurrentInteraction();  // Must be executed in event thread", "-      append(buf.toString().trim(), InteractionsDocument.DEFAULT_STYLE);", "-    }", "-    finally { _document.releaseWriteLock(); }", "-    interpretCurrentInteraction();", "+    });", "+    // Wait is necessary because interpretation can only be applied after history is loaded", "+//    System.err.println(\"Interpreting loaded history\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f2ec21f8673def5766ec28da5d5fad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "930b1ef6cc279650a085c7c6499b1b57cb240018", "commitAfterChange": "73b3ce3968c13472938fea3d36b496150c938bd2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "   void scrollToSource(LocatableEvent e)", "signatureAfterChange": "   void scrollToSource(LocatableEvent e)", "diff": ["-      _listener.scrollToLineInSource(doc, ", "-                                     location.lineNumber());", "+", "+      final OpenDefinitionsDocument docF = doc;", "+      final Location locationF = location;", "+        ", "+      notifyListeners(new EventNotifier() {", "+        public void notifyListener(DebugListener l) {", "+          l.scrollToLineInSource(docF, ", "+                                     locationF.lineNumber());", "+        }", "+      });"]}], "num": 24322}
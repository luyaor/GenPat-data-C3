{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d10709ce75a34ae53f6d7c5c8a7ff245", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca9458103aa02ccfee604eb20a2d958b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "a35de807c6239a74c75cd1d9a337e2c468729622", "commitAfterChange": "bf372fc29acf6ea260cc55361328f14ce539744d", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "\r   private void _runCommand()", "signatureAfterChange": "   private void _runCommand()", "diff": ["-  /** Execute the command line. */\r", "-  private void _runCommand() {\r", "-    _mainFrame.updateStatusField(\"Executing external process...\");\r", "-    \r", "-    _windowListenerActive = false;\r", "-    if (_commandLinePreview.getText().length()>0) {\r", "-      runCommand(\"\", _commandLine.getText(), _commandWorkDirLine.getText());\r", "-    }\r", "-    else {\r", "-      JOptionPane.showMessageDialog(this,\r", "-                                    \"Empty command line.\",\r", "-                                    \"Invalid Command Line\",\r", "-                                    JOptionPane.ERROR_MESSAGE);\r", "-    }\r", "-\r", "-    // Always apply and save settings\r", "-    _saveSettings();\r", "-    this.setVisible(false);\r", "-    if (_cm!=null) { _cm.set(); }    \r", "-  }\r", "+  /** Execute the command line. */", "+  private void _runCommand() {", "+    _mainFrame.updateStatusField(\"Executing external process...\");", "+    ", "+    _mainFrame.removeModalWindowAdapter(this);", "+    if (_commandLinePreview.getText().length()>0) {", "+      runCommand(\"\", _commandLine.getText(), _commandWorkDirLine.getText());", "+    }", "+    else {", "+      JOptionPane.showMessageDialog(this,", "+                                    \"Empty command line.\",", "+                                    \"Invalid Command Line\",", "+                                    JOptionPane.ERROR_MESSAGE);", "+    }", "+    ", "+    // Always apply and save settings", "+    _saveSettings();", "+    this.setVisible(false);", "+    if (_cm!=null) { _cm.set(); }    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0cf881d520cbbb22c9174255c18fbf9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "73b7f0a42ebcf824c132189e958d58c40bbacf0e", "commitAfterChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   private void _runCommand()", "signatureAfterChange": "\r   private void _runCommand()", "diff": ["-  /** Execute the command line. */", "-  private void _runCommand() {", "-    _mainFrame.updateStatusField(\"Executing external process...\");", "-    ", "-    if (_commandLinePreview.getText().length()>0) {", "-      runCommand(\"\", _commandLine.getText(), _commandWorkDirLine.getText());", "-    }", "-    else {", "-      JOptionPane.showMessageDialog(this,", "-                                    \"Empty command line.\",", "-                                    \"Invalid Command Line\",", "-                                    JOptionPane.ERROR_MESSAGE);", "-    }", "-", "-    // Always apply and save settings", "-    _saveSettings();", "-    this.setVisible(false);", "-    if (_cm!=null) { _cm.set(); }    ", "-  }", "+  /** Execute the command line. */\r", "+  private void _runCommand() {\r", "+    _mainFrame.updateStatusField(\"Executing external process...\");\r", "+    \r", "+    _windowListenerActive = false;\r", "+    if (_commandLinePreview.getText().length()>0) {\r", "+      runCommand(\"\", _commandLine.getText(), _commandWorkDirLine.getText());\r", "+    }\r", "+    else {\r", "+      JOptionPane.showMessageDialog(this,\r", "+                                    \"Empty command line.\",\r", "+                                    \"Invalid Command Line\",\r", "+                                    JOptionPane.ERROR_MESSAGE);\r", "+    }\r", "+\r", "+    // Always apply and save settings\r", "+    _saveSettings();\r", "+    this.setVisible(false);\r", "+    if (_cm!=null) { _cm.set(); }    \r", "+  }\r"]}], "num": 28828}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e76f08f11141dd582f480455037d53d7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80de2a6dc877ba07c329898f8835fc05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "69a380647f3d586f130ea02ad1e8381a390045e3", "commitAfterChange": "739371db1261b11c3be5fd70233012a49b45b7ca", "methodNumberBeforeChange": 202, "methodNumberAfterChange": 202, "signatureBeforeChange": "   private Expression makeCast(Type target, Expression e)", "signatureAfterChange": "   private Expression makeCast(Type target, Expression e)", "diff": ["-        NodeProperties.setConvertedType(e, erasedClass(target));", "+        NodeProperties.setConvertedType(result, erasedClass(target));", "+        if (NodeProperties.hasValue(e)) {", "+          Object orig = NodeProperties.getValue(e);", "+          Class<?> t = NodeProperties.getConvertedType(result).value();", "+          NodeProperties.setValue(result, ExpressionEvaluator.convert(orig, t));", "+        }", "+      }", "+      else {", "+        if (NodeProperties.hasValue(e)) { NodeProperties.setValue(result, NodeProperties.getValue(e)); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2d97f923a2d93bd3cf7cc2371290d25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DelegatingAction.java", "commitBeforeChange": "2a60f2064688c4fe57c01ffc40a024b990b45720", "commitAfterChange": "14d9da817fd1dfb180c09b0881e9dfe4248e9250", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void putValue(String key, Object value)", "signatureAfterChange": "    public void putValue(String key, Object value)", "diff": ["-    _delegatee.putValue(key, value);", "+", "+    if (_isDelegatedKey(key)) {", "+      _delegatee.putValue(key, value);", "+    }", "+    else {", "+      Object old = _localProperties.get(key);", "+      _localProperties.put(key, value);", "+      ListIterator itor = _listenerList.listIterator();", "+", "+      PropertyChangeEvent event = new PropertyChangeEvent(this, key, old, value);", "+", "+      while (itor.hasNext()) {", "+        PropertyChangeListener listener = (PropertyChangeListener) itor.next();", "+        listener.propertyChange(event);", "+      }", "+    }"]}], "num": 29580}
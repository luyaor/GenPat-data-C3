{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e12bfbac5a58b2908276e6bf02d3e41", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "749f5659680d246a7b3f2689a020b284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "335e15356f81cc767efd4886353e6890e8c905fa", "commitAfterChange": "8ccb5b5787c23c1ec149415240d859632e14b0eb", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["+    if (active != null) al.add(active);", "+    ", "+    List<OpenDefinitionsDocument> nonProjDocs = getNonProjectDocuments();", "+    List<OpenDefinitionsDocument> projDocs = getProjectDocuments();", "+    File[] projectFiles = getProjectFiles();   ", "+    // keep all nonproject files open.  External files in the previous project", "+    // may become project files in the new project and must be closed while external", "+    // files in the previous project that are still external to the new project ", "+    // should be kept open.", "+     ", "+    //List<OpenDefinitionsDocument> docsToClose = new LinkedList<OpenDefinitionsDocument>();", "+    for(OpenDefinitionsDocument d: projDocs){", "+      if(d.isProjectFile()){", "+        closeFile(d);", "+      }else{", "+        try{", "+          INavigatorItem idoc = getIDocGivenODD(d);", "+          String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "+          _documentNavigator.refreshDocument(idoc, path);", "+        }catch(IOException e){", "+          // noop", "+        }", "+      }", "+    }", "-    return al.toArray(new File[0]);", "+    // call on the GUI to finish up by opening the files and making", "+    // necessary gui component changes", "+    final File[] filesToOpen = al.toArray(new File[0]);", "+    _notifier.projectOpened(projectFile, new FileOpenSelector(){", "+      public File[] getFiles() {", "+        return filesToOpen;", "+      }", "+    });", "+    ", "+    if (_documentNavigator instanceof JTreeSortNavigator) {", "+      ((JTreeSortNavigator)_documentNavigator).collapsePaths(ir.getCollapsedPaths());", "+    }", "+    ", "+    return srcFiles; // Unnecessarily returns src files in keeping with the previous interface."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9da486b87f8b9cb82d807760e61c876d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "335e15356f81cc767efd4886353e6890e8c905fa", "commitAfterChange": "8ccb5b5787c23c1ec149415240d859632e14b0eb", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": "   private void _openProjectHelper(File projectFile)", "signatureAfterChange": "   private void _openProjectHelper(File projectFile)", "diff": ["-    File[] srcFiles = null;", "-      srcFiles = _model.openProject(projectFile);", "-      _setUpContextMenus();", "-      _recentProjectManager.updateOpenFiles(projectFile);", "+      _model.openProject(projectFile);", "-      _showProjectFileParseError(e);", "+      _showProjectFileParseError(e); // add to an error adapter", "-      _showFileNotFoundError(e);", "+      _showFileNotFoundError(e); // add to an error adapter", "-      _showIOError(e);", "+      _showIOError(e); // add to an error adapter", "-", "-    List<OpenDefinitionsDocument> nonProjDocs = _model.getNonProjectDocuments();", "-    List<OpenDefinitionsDocument> projDocs = _model.getProjectDocuments();", "-    File[] projectFiles = _model.getProjectFiles();", "-    ", "-    ", "-    /**", "-     * keep all nonproject files open", "-     */", "-    IDocumentNavigator nav = _model.getDocumentNavigator();", "-", "-    ", "-    // close all project files", "-    List<OpenDefinitionsDocument> docsToClose = new LinkedList<OpenDefinitionsDocument>();", "-    for(OpenDefinitionsDocument d: projDocs){", "-      if(d.isProjectFile()){", "-        docsToClose.add(d);", "-      }else{", "-        try{", "-          nav.refreshDocument(_model.getIDocGivenODD(d), _model.fixPathForNavigator(d.getFile().getCanonicalPath()));", "-        }catch(IOException e){", "-          // noop", "-        }", "-      }", "-    }", "-", "-    for(OpenDefinitionsDocument d: docsToClose){", "-    }", "-    _model.closeFiles(docsToClose);", "-    ", "-    final File[] files = srcFiles;", "-    // project could be empty", "-    if(srcFiles.length > 0){", "-      open(new FileOpenSelector(){", "-        public File[] getFiles() {", "-          return files;", "-        }", "-      });", "-    }", "-    ", "-    _openProjectUpdate();"]}], "num": 2189}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "384f14e21d8c7bdf6fff4698271ac62d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cbc7cb344214cd26e7dc2f5c04794d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r   public void forBlock(Block that)", "signatureAfterChange": "   public void forBlock(Block that)", "diff": ["-   */\r", "-  public void forBlock(Block that) {\r", "-    forBlockDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    BlockData bd = new BlockData(_bodyData);\r", "-    _bodyData.addBlock(bd);\r", "-    that.getStatements().visit(new BodyBodyAdvancedVisitor(bd, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));\r", "-    forBlockOnly(that);\r", "-  }\r", "+   */", "+  public void forBlock(Block that) {", "+    forBlockDoFirst(that);", "+    if (prune(that)) return;", "+    BlockData bd = new BlockData(_bodyData);", "+    _bodyData.addBlock(bd);", "+    that.getStatements().visit(new BodyBodyAdvancedVisitor(bd, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));", "+    forBlockOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f3396220f4391b2a461a1567899375", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   protected static void writeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName)", "signatureAfterChange": "   protected static void writeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName)", "diff": ["-    if (equals == null) { return; }", "+    if (equals == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f3bccacd9389816b01600409698f16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyAdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r   public void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-   */\r", "-  public void forConcreteMethodDef(ConcreteMethodDef that) {\r", "-    forConcreteMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    \r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    \r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-    that.getBody().visit(new BodyBodyAdvancedVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));\r", "-  }\r", "+   */", "+  public void forConcreteMethodDef(ConcreteMethodDef that) {", "+    forConcreteMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    ", "+    MethodData md = createMethodData(that, _symbolData);", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    ", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+                         that);", "+    }", "+    else {", "+      _symbolData.addMethod(md);", "+    }", "+    that.getBody().visit(new BodyBodyAdvancedVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1088a723b43bce04a2b1841f5765d0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "   protected static void writeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, String valueHashCodeName)", "signatureAfterChange": "   protected static void writeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, String valueHashCodeName)", "diff": ["-    if (hashCode == null) { return; }", "+    if (hashCode == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f21e2be7a930159c7d368afaf408b6c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "   protected static void writeToString(SymbolData sd, int baseIndent, String valueToStringName)", "signatureAfterChange": "   protected static void writeToString(SymbolData sd, int baseIndent, String valueToStringName)", "diff": ["-    if (toString == null) { return; }", "+    if (toString == null) return;"]}], "num": 13578}
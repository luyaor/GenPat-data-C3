{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e92c3d168ddaaad433546f0e4782c56a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29a401d4a2e514e3b5210558a03d4b0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public Object visit(ArrayAccess node)", "signatureAfterChange": "   public Class visit(ArrayAccess node)", "diff": ["-     */", "-    public Object visit(ArrayAccess node) {", "-        // Visits the expression on which this array access applies", "-        Class c = (Class)node.getExpression().acceptVisitor(this);", "-", "-        if (!c.isArray()) {", "-\t    node.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t     new String[] { c.getName() });", "-            throw new ExecutionError(\"array.required\", node);", "-        ", "-        // Sets the properties of this node", "-\tClass result;", "-        node.setProperty(NodeProperties.TYPE, result = c.getComponentType());", "-        node.setProperty(NodeProperties.MODIFIER, new ArrayModifier(node));", "-", "-        // Visits the cell number expression", "-        c = (Class)node.getCellNumber().acceptVisitor(this);", "-", "-        // The index must be of an integral type, but not a long", "-        if (c != char.class && c != byte.class && c != short.class && c != int.class) {", "-            throw new ExecutionError(\"array.index.type\", node);", "-        }", "-        return result;", "+   */", "+  public Class visit(ArrayAccess node) {", "+    // Visits the expression on which this array access applies", "+    Class c = (Class)node.getExpression().acceptVisitor(this);", "+    ", "+    if (!c.isArray()) {", "+      node.setProperty(NodeProperties.ERROR_STRINGS,", "+                       new String[] { c.getName() });", "+      throw new ExecutionError(\"array.required\", node);", "+    ", "+    // Sets the properties of this node", "+    Class result;", "+    node.setProperty(NodeProperties.TYPE, result = c.getComponentType());", "+    node.setProperty(NodeProperties.MODIFIER, new ArrayModifier(node));", "+    ", "+    // Visits the cell number expression", "+    c = (Class)node.getCellNumber().acceptVisitor(this);", "+    ", "+    // The index must be of an integral type, but not a long", "+    if (c != char.class && c != byte.class && c != short.class && c != int.class) {", "+      throw new ExecutionError(\"array.index.type\", node);", "+    return result;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f034ff10158984f4e1908d612d0fa15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public Object visit(ComplementExpression node)", "signatureAfterChange": "   public Class visit(ComplementExpression node)", "diff": ["-     */", "-    public Object visit(ComplementExpression node) {", "-        // Check the type", "-        Node  n = node.getExpression();", "-        Class c = (Class)n.acceptVisitor(this);", "-", "-        if (c == char.class || c == byte.class || c == short.class) {", "-            node.setProperty(NodeProperties.TYPE, c = int.class);", "-        } else if (c == int.class  || c == long.class) {", "-            node.setProperty(NodeProperties.TYPE, c);", "-        } else {", "-            throw new ExecutionError(\"complement.expression.type\", node);", "-        }", "-", "-        // Compute the expression if it is constant", "-        if (n.hasProperty(NodeProperties.VALUE)) {", "-            Object o = n.getProperty(NodeProperties.VALUE);", "-            if (o instanceof Character) {", "-                o = new Integer(((Character)o).charValue());", "-            }", "-            if (c == int.class) {", "-\t\to = new Integer(~((Number)o).intValue());", "-            } else {", "-\t\to = new Long(~((Number)o).longValue());", "-            }", "-\t    node.setProperty(NodeProperties.VALUE, o);", "-        }", "-        return c;", "+   */", "+  public Class visit(ComplementExpression node) {", "+    // Check the type", "+    Node  n = node.getExpression();", "+    Class c = (Class)n.acceptVisitor(this);", "+    ", "+    if (c == char.class || c == byte.class || c == short.class) {", "+      node.setProperty(NodeProperties.TYPE, c = int.class);", "+    } else if (c == int.class  || c == long.class) {", "+      node.setProperty(NodeProperties.TYPE, c);", "+    } else {", "+      throw new ExecutionError(\"complement.expression.type\", node);", "+    ", "+    // Compute the expression if it is constant", "+    if (n.hasProperty(NodeProperties.VALUE)) {", "+      Object o = n.getProperty(NodeProperties.VALUE);", "+      if (o instanceof Character) {", "+        o = new Integer(((Character)o).charValue());", "+      }", "+      if (c == int.class) {", "+        o = new Integer(~((Number)o).intValue());", "+      } else {", "+        o = new Long(~((Number)o).longValue());", "+      }", "+      node.setProperty(NodeProperties.VALUE, o);", "+    }", "+    return c;", "+  }"]}], "num": 6587}
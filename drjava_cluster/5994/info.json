{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3052d75e9a39bdeae49ab1478dc53562", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2302b48b8b11985d436d11327be022df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 39, "signatureBeforeChange": "   int _getAnonymousInnerClassIndex(final int pos) throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   int _getAnonymousInnerClassIndex(final int pos) throws BadLocationException, ClassNameNotFoundException", "diff": ["+    assert isReadLocked();", "+    ", "-    final String className = getEnclosingClassName(newPos - 2 , true);  // class name must be followed by at least \"()\"", "+    final String className = _getEnclosingClassName(newPos - 2 , true);  // class name must be followed by at least \"()\"", "-      int classStart = getFirstNonWSCharPos(afterNewPos);", "+      int classStart = _getFirstNonWSCharPos(afterNewPos);", "-      int parenStart = getFirstNonWSCharPos(classEnd);", "+      int parenStart = _getFirstNonWSCharPos(classEnd);", "-            parenStart = getFirstNonWSCharPos(closePointyBracket + 1);", "+            parenStart = _getFirstNonWSCharPos(closePointyBracket + 1);", "-        String cn = getEnclosingClassName(newPos, true);", "+        String cn = _getEnclosingClassName(newPos, true);", "-        if (!cn.startsWith(className)) { break; }", "-        else if (!cn.equals(className)) {", "-          newPos = findPrevEnclosingBrace(newPos, '{', '}');", "+        if (! cn.startsWith(className)) { break; }", "+        else if (! cn.equals(className)) {", "+          newPos = _findPrevEnclosingBrace(newPos, '{', '}');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c880726f6208cec9df4d7782a7fdc8d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   int _getAnonymousInnerClassIndex(final int pos) throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   int _getAnonymousInnerClassIndex(final int pos) throws BadLocationException, ClassNameNotFoundException", "diff": ["-    int newPos = pos - 1; // move outside the curly brace", "+    int newPos = pos; // formerly pos -1 // move outside the curly brace?  Corrected to do nothing since already outisde", "-    final String className = getEnclosingClassName(newPos, true);", "-    final String text = getText(0, newPos);  // why exclude char before curly brace?", "+    final String className = getEnclosingClassName(newPos - 2 , true);  // class name must be followed by at least \"()\"", "+    final String text = getText(0, newPos - 2);  // excludes miminal (empty) argument list after class name", "-    while ((newPos = _findPrevKeyword(text, \"new\", newPos - 1)) != -1) {", "+    while ((newPos = _findPrevKeyword(text, \"new\", newPos - 4)) != -1) { // excludes space + minimal class name + args", "-      int nextOpenSquiggly = _findNextOpenSquiggly(text, parenEnd);", "-      if (nextOpenSquiggly == -1) { continue; }", "+      int nextOpenCurly = _findNextOpenCurly(text, parenEnd);", "+      if (nextOpenCurly == -1) { continue; }", "-      if (_isAnonymousInnerClass(newPos, nextOpenSquiggly)) {", "+      if (_isAnonymousInnerClass(newPos, nextOpenCurly)) {"]}], "num": 5994}
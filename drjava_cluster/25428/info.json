{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c07084c9b7c8145a28b9794460c8ff84", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4853c7a1d9f05752bbb46e15d01053ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "signatureAfterChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "diff": ["-    assertTrue(\"line after open paren\", rule.applyRule(_doc, 7));", "-    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 18));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 25));", "-    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 28));", "+    assertTrue(\"line after open paren\", rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 18, Indenter.OTHER));", "+    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 25, Indenter.OTHER));", "+    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 28, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c26674182ead56fdd288af08cffcf550", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testMultipleBlankLinesBack() throws BadLocationException", "signatureAfterChange": "   public void testMultipleBlankLinesBack() throws BadLocationException", "diff": ["-    assertTrue(\"line after open paren\", rule.applyRule(_doc, 5));", "-    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 6));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 13));", "-    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 16));", "+    assertTrue(\"line after open paren\", rule.applyRule(_doc, 5, Indenter.OTHER));", "+    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 6, Indenter.OTHER));", "+    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 13, Indenter.OTHER));", "+    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 16, Indenter.OTHER));"]}], "num": 25428}
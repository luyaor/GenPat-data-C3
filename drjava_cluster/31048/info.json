{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cae505b1dad6b96904723bb9fc38836a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ff6188fb5dbc33b416728fe8c1126d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static void main(String[] args)", "signatureAfterChange": "   public synchronized static void main(String[] args)", "diff": ["-  public static void main(String[] args) {", "-    ", "-    _log.log(\"Slave JVM has started with args \" + edu.rice.cs.util.StringOps.toString(args));", "+  public synchronized static void main(String[] args) {", "+        ", "+      _main = Thread.currentThread();", "-      // if we have a remote classloader to use", "-      if (args.length == 3) {", "-        //get the classloader", "-        IRemoteClassLoader remoteLoader = null;", "-        FileInputStream fstream = new FileInputStream(args[2]);", "-        ObjectInputStream ostream = new ObjectInputStream(new BufferedInputStream(fstream));", "-        _log.log(\"Slave JVM reading remote loader object\");", "-        remoteLoader = (IRemoteClassLoader) ostream.readObject();", "-        _log.log(\"remote loader read\");", "-        if (ClassLoader.getSystemClassLoader() instanceof CustomSystemClassLoader) {", "-          CustomSystemClassLoader loader = (CustomSystemClassLoader) ClassLoader.getSystemClassLoader();", "-          loader.setMasterRemote(remoteLoader);", "-        }", "-        _log.log(\"remote loader installed\");", "-      }", "-", "+//      // Loading the class that intermittently hangs first readObject(...) call below", "+//      Class psi = Class.forName(\"java.net.PlainSocketImpl\");", "+      ", "-      _log.log(\"Slave JVM reading the remote master object\");", "-      FileInputStream fstream = new FileInputStream(args[0]);", "-      ObjectInputStream ostream = new ObjectInputStream(new BufferedInputStream(fstream));", "-      MasterRemote master = (MasterRemote) ostream.readObject();", "-      _log.log(\"remote master read\");", "+      final FileInputStream fstream = new FileInputStream(args[0]);", "+      final ObjectInputStream ostream = new ObjectInputStream(new BufferedInputStream(fstream));", "+      ", "+      _log.log(\"Slave JVM reading master remote stub from file \" + args[0] + \" with \" + ", "+                 fstream.getChannel().size() + \" bytes\");", "+      ", "+/* The following code currently breaks unit tests (and perhaps DrJava) when it detects the hanging", "+ * of readObject(...).  It can be commented back if the calling code is revised to handle this form", "+ * of exit. */", "+      ", "+//      Thread timeout = new Thread(\"RMI Timeout Thread\") {", "+//        public void run() {", "+//          _log.log(\"RMI timer started\");", "+//          final Object lock = new Object();", "+//          try { synchronized(lock) { lock.wait(RMI_TIMEOUT); } }", "+//          catch(InterruptedException e) { throw new UnexpectedException(e); }", "+//          // Abort starting this slave JVM if readObject has hung", "+//          if (_remoteLoader == null) {", "+//            StackTraceElement[] trace = Thread.getAllStackTraces().get(_main);", "+//            _log.log(\"DUMP of hung deserializing thread:\", trace);", "+//            System.exit(9);", "+//          }", "+//          else _log.log(this + \" TERMINATED normally\");", "+//        }", "+//      };", "+//      ", "+//      timeout.setDaemon(true);", "+//      timeout.start();", "+      ", "+//      // if we have a remote classloader to use, load it", "+//      if (args.length == 3) _installRemoteLoader(args[2]);", "+", "+      final MasterRemote masterRemote = (MasterRemote) ostream.readObject();", "+      _log.log(\"Slave JVM completed reading \" + masterRemote);", "+  ", "-        _log.log(\"Slave JVM creating singleton instance of slave class \" + args[1]);", "-        SlaveRemote slave = _getInstance(slaveClass);", "+//        _log.log(\"Slave JVM created singleton of \" + args[1]);", "+        AbstractSlaveJVM slave = _getInstance(slaveClass);", "-        // Must export slave object to RMI so we can pass stub to the master", "-        _log.log(\"Slave JVM creaing RMI stub for slave class instance \" + slave);", "-        SlaveRemote stub = (SlaveRemote) UnicastRemoteObject.exportObject(slave);  ", "-        _log.log(\"Exported stub \" + stub + \" for \" + slaveClass);", "-        ", "-        // Debug: check that the IP address is 127.0.0.1", "-        //javax.swing.JOptionPane.showMessageDialog(null, stub.toString());", "+        //Export slave object to RMI, passing stub to the master JVM (how does stub get there?  Transitivity?", "+//        _log.log(\"Slave JVM exporting \" + slave + \" to RMI\");", "+        SlaveRemote slaveRemote = (SlaveRemote) UnicastRemoteObject.exportObject(slave);  ", "+        _log.log(\"Slave JVM exported stub \" + slaveRemote);", "-        _log.log(\"Slave JVM invoking the method start(\" + master + \") in the Slave JVM class\");", "-        slave.start(master);", "+//        _log.log(\"Slave JVM invoking the method \" + slave + \".start(\" + masterRemote + \")\");", "+        slave.start(masterRemote);", "-        master.registerSlave(slave);", "+        masterRemote.registerSlave(slaveRemote);", "-      catch (Throwable t) {", "+      catch (Exception e) {", "-        _log.log(\"Slave JVM could not intstantiate slave class and will exit\");", "+        _log.log(\"Slave JVM could not intstantiate slave class.  Threw exception: \" + e);", "-          master.errorStartingSlave(t);", "+          masterRemote.errorStartingSlave(e);", "-          _showErrorMessage(msg, t);", "+          _showErrorMessage(msg, e);", "-    catch (Throwable t) {", "+    catch (Exception e) { // IOException, ClassNotFoundException", "-      _showErrorMessage(\"Couldn't deserialize remote stub for the master JVM.\", t);", "+      _showErrorMessage(\"Could not set up the Slave JVM.\", e);", "+      _log.log(\"Could not set up the Slave JVM. Calling System.exit(2) in response to: \" + e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9867ece44f5e185f033151b3b8ce2db2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 97, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName, ThreadReference threadRef) throws      InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException,      DebugException", "signatureAfterChange": "   private static Value _invokeMethod(ThreadReference thread, ObjectReference receiver, String name,                               String signature, Value... args) throws DebugException", "diff": ["-   */", "-  private ObjectReference _getDebugInterpreter(String interpreterName, ThreadReference threadRef) throws ", "-    InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException, ", "-    DebugException {", "-    ", "-    if (!threadRef.isSuspended()) {", "-      throw new IllegalStateException(\"threadRef must be suspended to get a debug interpreter.\");", "-    }", "-", "-    // Get the method to return the interpreter", "-    Method m = _getMethod(_interpreterJVM.referenceType(), \"getJavaInterpreter\");", "-", "-    // invokeMethod would throw an ObjectCollectedException if the StringReference", "-    // declared by _vm.mirrorOf(name) had been garbage collected before", "-    // invokeMethod could execute. We now just disable collection until after the", "-    // method is invoked.", "-", "-    int tries = 0;", "-    StringReference sr = null;", "-    while (tries < OBJECT_COLLECTED_TRIES) {", "-      try{", "-        LinkedList<StringReference> args = new LinkedList<StringReference>(); //Added parameterization <StringReference>.", "-        sr = _vm.mirrorOf(interpreterName);", "-        sr.disableCollection();", "-        args.add(sr); // make the String a JDI Value", "-        _log.log(\"Invoking \" + m.toString() + \" on \" + args.toString());", "-        _log.log(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "-", "-        ObjectReference tmpInterpreter = ", "-          (ObjectReference) _interpreterJVM.invokeMethod(threadRef, m, args, ObjectReference.INVOKE_SINGLE_THREADED);", "-", "-        _log.log(\"Returning...\");", "-        return tmpInterpreter;", "-      }", "-      catch (ObjectCollectedException e) { tries++; }", "-      finally { sr.enableCollection(); }", "-    }", "-    throw new DebugException(\"The debugInterpreter: \" + interpreterName + \" could not be obtained from interpreterJVM\");", "-  }", "+    */", "+  private static Value _invokeMethod(ThreadReference thread, ObjectReference receiver, String name,", "+                              String signature, Value... args) throws DebugException {", "+    try {", "+      ClassType c = (ClassType) receiver.referenceType();", "+      Method m = c.concreteMethodByName(name, signature);", "+      if (m == null) { throw new DebugException(\"Cannot find method '\" + name + \"'\"); }", "+      return receiver.invokeMethod(thread, m, Arrays.asList(args),", "+                                   ObjectReference.INVOKE_SINGLE_THREADED);", "+    }", "+    catch (ClassNotPreparedException e) { throw new DebugException(e); }", "+    catch (IllegalArgumentException e) { throw new DebugException(e); }", "+    catch (ClassNotLoadedException e) { throw new DebugException(e); }", "+    catch (IncompatibleThreadStateException e) { throw new DebugException(e); }", "+    catch (InvocationException e) { throw new DebugException(e); }", "+    catch (InvalidTypeException e) { throw new DebugException(e); }", "+  }"]}], "num": 31048}
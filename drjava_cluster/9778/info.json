{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b41ef60b1a6e40a64eb3881439b5c28e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c54b165110b883b5cede45882de44d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "commitAfterChange": "bd7a2dd06a797f540fad2fc718c0924e6e0b267b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "signatureAfterChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "diff": ["-    // Clear document so we can make sure it's written to after startJUnit", "-    _model.getJUnitModel().getJUnitDocument().remove(0, _model.getJUnitModel().getJUnitDocument().getLength() - 1);", "+    // Clear document so we can make sure it's written to after startJUnit; ", "+    // ?? When does the clear operation happen?  How is the timing of this clear operation controlled?", "+    // Perform the clear operation atomically in the event thread.", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        try {", "+          _model.getJUnitModel().getJUnitDocument().remove(0, _model.getJUnitModel().getJUnitDocument().getLength() - 1);", "+        }", "+        catch(BadLocationException e) { fail(\"BadLocationException in clearing JUnitDocument\"); }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e34b78a7ee74927de9b327a957459947", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testOneJUnitError() throws Exception", "signatureAfterChange": "   public void testOneJUnitError() throws Exception", "diff": ["-    doc.startCompile();", "-    // Clear document so we can make sure it's written to after startJUnit", "-    _model.getJUnitDocument().remove(0, _model.getJUnitDocument().getLength() - 1);", "-    final TestResult testResults = doc.startJUnit();", "-    ", "-    assertEquals(\"test case has one error reported\",", "-                 1,", "-                 testResults.failureCount());", "-  }", "+    TestShouldSucceedListener listener = new TestShouldSucceedListener();", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }", "+    assertEquals(\"test case has one error reported\",", "+                 1,", "+                 doc.getJUnitErrorModel().getNumErrors());", "+                 "]}], "num": 9778}
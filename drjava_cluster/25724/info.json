{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ffe2ff6fb2edba47f0fbbc5ed1cf4f0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f6c57da450b87f83d50bde0abce0f63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 360, "methodNumberAfterChange": 357, "signatureBeforeChange": "          public void threadLocationUpdated(final OpenDefinitionsDocument doc,                                       final int lineNumber,                                       final boolean shouldHighlight)", "signatureAfterChange": "     public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,                                       final boolean shouldHighlight)", "diff": ["-    public void threadLocationUpdated(final OpenDefinitionsDocument doc,", "-                                      final int lineNumber,", "+     */", "+    public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,", "-      // Only change GUI from event-dispatching thread", "-      Runnable command = new Runnable() {", "-        public void run() {", "+//      Utilities.invokeLater(new Runnable() {", "+//        public void run() {", "-          ActionListener setSizeListener = new ActionListener() {", "-            public void actionPerformed(ActionEvent ae) {", "-              _currentDefPane.centerViewOnLine(lineNumber);", "-            }", "-          };", "-          _currentDefPane.addSetSizeListener(setSizeListener);", "+//          ActionListener setSizeListener = new ActionListener() {", "+//            public void actionPerformed(ActionEvent ae) {", "+//              Utilities.showDebug(\"custon setSizeListener called in MainFrame with event \" + ae);", "+//              _currentDefPane.centerViewOnLine(lineNumber);", "+//              _currentDefPane.requestFocusInWindow();", "+//            }", "+//          };", "+//          _currentDefPane.addSetSizeListener(setSizeListener);", "-//          if (!_model.getActiveDocument().equals(doc)) ", "-            _model.setActiveDocument(doc);", "+          if (!_model.getActiveDocument().equals(doc)) _model.setActiveDocument(doc);", "+          else _model.refreshActiveDocument();", "-            _currentDefPane.centerViewOnLine(lineNumber);", "-            _currentDefPane.requestFocusInWindow();", "+//            SwingUtilities.invokeLater(new Runnable() {  ", "+//              public void run() {", "+//                Utilities.showDebug(\"Getting ready to reset defintions pane\");", "+                _currentDefPane.centerViewOnLine(lineNumber);", "+                _currentDefPane.requestFocusInWindow();", "+//              }", "+//            });", "-          if (shouldHighlight) {", "-            _removeThreadLocationHighlight();", "-            int startOffset = doc.getOffset(lineNumber);", "-            if (startOffset > -1) {", "-              int endOffset = doc.getLineEndPos(startOffset);", "-              if (endOffset > -1) {", "-                _currentThreadLocationHighlight =", "-                  _currentDefPane.getHighlightManager().", "-                  addHighlight(startOffset, endOffset, DefinitionsPane.THREAD_PAINTER);", "+          SwingUtilities.invokeLater(new Runnable() {  ", "+          /* The execution of this block of code is deferred to fix bug #1243993.  It is not clear why this deferral", "+           * works. */", "+            public void run() {", "+              if (shouldHighlight) {", "+                _removeThreadLocationHighlight();", "+                int startOffset = doc.getOffset(lineNumber);", "+                if (startOffset > -1) {", "+                  int endOffset = doc.getLineEndPos(startOffset);", "+                  if (endOffset > -1) {", "+                    _currentThreadLocationHighlight =", "+                      _currentDefPane.getHighlightManager().", "+                      addHighlight(startOffset, endOffset, DefinitionsPane.THREAD_PAINTER);", "+                  }", "+                }", "+              ", "+              if (doc.isModifiedSinceSave() && !_currentDefPane.hasWarnedAboutModified()) {", "+                ", "+                _showDebuggingModifiedFileWarning();", "+                ", "+                //no need to update flag, because previous method call will do it", "+                //_hasWarnedAboutModified = true;", "+              }", "+              if (shouldHighlight) {", "+                // Give the interactions pane focus so we can debug", "+                _interactionsPane.requestFocusInWindow();", "+              }", "+              showTab(_interactionsPane);", "+              _updateDebugStatus();", "-          }", "-          ", "-          if (doc.isModifiedSinceSave() && !_currentDefPane.hasWarnedAboutModified()) {", "-            ", "-            _showDebuggingModifiedFileWarning();", "-            ", "-            //no need to update flag, because previous method call will do it", "-            //_hasWarnedAboutModified = true;", "-          }", "-          if (shouldHighlight) {", "-            // Give the interactions pane focus so we can debug", "-            _interactionsPane.requestFocusInWindow();", "-          }", "-          showTab(_interactionsPane);", "-          _updateDebugStatus();", "-        }", "-      };", "-      Utilities.invokeLater(command);", "+          });", "+//        }", "+//      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec784f87a8b2ff0792231cdf3054d035", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "commitAfterChange": "530cb3b64455d081e962324602750973729aa1fb", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": "     public void stepRequested()", "signatureAfterChange": "     public void stepRequested()", "diff": ["-      synchronized (_debugStepTimerLock) {", "-        // Wait 2 seconds", "-        _debugStepTimer = new Timer(2000, new ActionListener() {", "-          public void actionPerformed(ActionEvent e) {", "-            _model.printDebugMessage(\"Stepping...\");", "-          }", "-        });", "-        _debugStepTimer.setRepeats(false);", "-        _debugStepTimer.start();", "+      synchronized (_debugStepTimer) {", "+        if (!_debugStepTimer.isRunning()) {", "+          _debugStepTimer.start();", "+        }"]}], "num": 25724}
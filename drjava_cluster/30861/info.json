{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b53ee7eecde3b9f7b8865a54f1ae36b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1013b06ae201cc2a6ceb33493db4d1dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   private CompilerInterface _instantiateCompiler(String name) throws Throwable", "signatureAfterChange": "   private CompilerInterface _instantiateCompiler(String name) throws Throwable", "diff": ["+    _log.log(\"CompilerRegistry._instantiateCompiler using class loader \" + _baseClassLoader + \" to load \" + name);", "-//    Utilities.show(\"Loaded compiler named \" + name + \" with class name \" + clazz);", "+    _log.log(\"Loaded compiler named \" + name + \" with class name \" + clazz);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cf04380111b06625424baa0dce599f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void forSourceFile(SourceFile sf)", "signatureAfterChange": "   public void forSourceFile(SourceFile sf)", "diff": ["-   */", "+    */", "-    //If importedPackages contains \"junit.framework\", then we had to import it while type checking this file.  Because we assumed", "-    //it was imported, the generated java file needs to import it as well.", "+    /* If importedPackages contains \"junit.framework\", then we had to import it while type checking this file.  Because", "+     * we assumed it was imported, the generated java file needs to import it as well. */", "-    for (TypeDefBase cd : cds) {", "-      cd.visit(this);", "-    }", "+    for (TypeDefBase cd : cds) { cd.visit(this); }", "+    _log.log(\"Processed source file through line \" + _fileInLine + \" and column \" + _fileInColumn);", "+    _log.log(\"Now dumping remainder of file through line \" + sf.getSourceInfo().getEndLine());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeeb4319cdcf99046dd7abeb41f19991", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "commitAfterChange": "f998596e58db467638fd2c5025aacbfb31d4199f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   private FindResult _findNextInDoc(OpenDefinitionsDocument doc, int start, int len, boolean searchAll)", "signatureAfterChange": "   private FindResult _findNextInDoc(OpenDefinitionsDocument doc, int start, int len, boolean searchAll)", "diff": ["-//    System.err.println(\"_findNextInDoc([\" + doc.getText() + \"], \" + start + \", \" + len + \", \" + searchAll + \")\");", "+    _log.log(\"_findNextInDoc([\" + doc.getText() + \"], \" + start + \", \" + len + \", \" + searchAll + \")\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d503cbb80808625407ddded64c759f8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "bd499b8e6c590fd3376a82010e399ae7edfc6975", "commitAfterChange": "af6ac1303ad90db685f17f710be85771c95a718d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public boolean canUndo()", "signatureAfterChange": "   public boolean canUndo()", "diff": ["-  public /* synchronized */ boolean canUndo() { return _compoundEditInProgress() || super.canUndo(); }", "+  public /* synchronized */ boolean canUndo() {", "+    LOG.log(\"canUndo: _compoundEditInProgress() = \"+_compoundEditInProgress()+\", super.canUndo() = \"+super.canUndo());", "+    LOG.log(\"    \"+_compoundEdits);", "+    return _compoundEditInProgress() || super.canUndo(); }"]}], "num": 30861}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5c9a4295de3c6e41df09a9aac724115", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ab902aad2343a2267160dbaf9996dd4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 162, "signatureBeforeChange": "   public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source,                                                  Lambda<? super S, ? extends T> map)", "signatureAfterChange": "   public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source, Lambda<? super S, ? extends T> map)", "diff": ["+  /** Create a {@code MappedIterable} with the given arguments */", "+  public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source, Lambda<? super S, ? extends T> map) {", "+    return new MappedIterable<S, T>(source, map);", "+  }", "-  /** Create a {@link MappedIterable} with the given arguments */", "-  public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source, ", "-                                                Lambda<? super S, ? extends T> map) {", "-    return MappedIterable.make(source, map);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5fa3746739128b6dae57a7537dfdba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 80, "signatureBeforeChange": "      public static <K, V> Map<K, V> compose(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child)", "signatureAfterChange": "   public static <K, X, V> LambdaMap<K, V> compose(Map<? extends K, ? extends X> left,                                                   Map<? super X, ? extends V> right)", "diff": ["-  public static <K, V> Map<K, V> compose(Map<? extends K, ? extends V> parent, Map<? extends K, ? extends V> child) {", "-    return new ComposedMap<K, V>(parent, child);", "+  /** Produce a lazy transitive composition of two maps.  Size-related operations have poor performance. */", "+  public static <K, X, V> LambdaMap<K, V> compose(Map<? extends K, ? extends X> left,", "+                                                  Map<? super X, ? extends V> right) {", "+    return new ComposedMap<K, X, V>(left, right);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb7aa6ebebe88bcb1881b380feffd0c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "6f501e5fca95aec34d7430b68d9d987e33ec6129", "commitAfterChange": "f175bd951be0706c1171fa45b387f5428c58ddb3", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 209, "signatureBeforeChange": "   public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source, Lambda<? super S, ? extends T> map)", "signatureAfterChange": "   public static <T, R> SizedIterable<R> map(Iterable<? extends T> source, Lambda<? super T, ? extends R> map)", "diff": ["-  /** Create a {@code MappedIterable} with the given arguments */", "-  public static <S, T> MappedIterable<S, T> map(Iterable<? extends S> source, Lambda<? super S, ? extends T> map) {", "-    return new MappedIterable<S, T>(source, map);", "+  /** Lazily apply a map function to each element in an iterable. */", "+  public static <T, R> SizedIterable<R> map(Iterable<? extends T> source, Lambda<? super T, ? extends R> map) {", "+    return new MappedIterable<T, R>(source, map);", "+  }"]}], "num": 1345}
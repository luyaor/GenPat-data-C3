{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7dc4e754d9bb128c080f0981fc59a32", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5efa94cc7405272ede2f99d49af2e448", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "f8e4975fc86eccfc2e1e190be55c64d1a287745a", "commitAfterChange": "1b5ef0eebd43a246e897081eb432b396efa2d20e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public synchronized static void main(String[] args)", "signatureAfterChange": "   public synchronized static void main(String[] args)", "diff": ["+    debug.logStart();", "+      debug.logValue(\"masterRemote\", masterRemote);", "+      ", "+      debug.log();", "+        debug.logValue(\"slave\", slave);", "-//        _log.log(\"Slave JVM exporting \" + slave + \" to RMI\");", "-        _log.log(\"SlaveJVMRunner exported stub \" + slaveRemote);", "-", "+        debug.logValue(\"slaveRemote\", slaveRemote);", "+        ", "-//        _log.log(\"Slave JVM invoking the method \" + slave + \".start(\" + masterRemote + \")\");", "-        _log.log(\"SlaveJVMRunner invoking the method registerSlave(\" + slave + \") in the Master JVM\");", "+        ", "+        debug.logStart(\"invoking masterRemote.registerSlave\");", "+        debug.logEnd();", "-      catch (Exception e) {", "+      catch (Throwable e) {", "+        debug.log(e);", "+          // TODO: these logging messages (to the default popup log) are breaking InteractionsDJDocumentTest.  Why?", "+          //error.log(re);", "+          //error.log(e);", "-    catch (Exception e) { // IOException, ClassNotFoundException", "+    catch (Throwable e) { // IOException, ClassNotFoundException", "+      // TODO: these logging messages (to the default popup log) are breaking InteractionsDJDocumentTest.  Why?", "+      //error.log(e);", "+    finally { debug.logEnd(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40fe965c8c1565280cdb5feea061f4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractSlaveJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public final synchronized void quit()", "signatureAfterChange": "   public final synchronized void quit()", "diff": ["-//    _log.log(this + \".quit() called\");", "-//    _master = null;", "-    ", "-    ", "-    _slaveExited = false;", "-//    Utilities.showDebug(\"quit() called\");", "-    ", "-    Thread t = new Thread(_quitSlaveThreadName) {", "+    new Thread(_quitSlaveThreadName) {", "-        try {", "-          // wait for parent RMI calling thread to exit ", "-          synchronized(_slaveJVMLock) { ", "-            while (! _slaveExited) {", "-//              _log.log(\"Waiting for \" + AbstractSlaveJVM.this + \".quit() to exit\");", "-              _slaveJVMLock.wait(); ", "-            }", "-          }", "-          shutdown();", "+        // ensure (as best we can) that the quit() RMI call has returned cleanly", "+        synchronized (AbstractSlaveJVM.this) {", "+          try { System.exit(0); }", "+          catch (RuntimeException e) { error.log(\"Can't invoke System.exit\", e); }", "-        catch(Throwable t) { ", "-          _log.log(this + \".quit() failed!\");", "-          quitFailed(t); ", "+      }", "+    }.start();", "+  }", "-    ", "-    t.start();", "-//    _log.log(this + \".quit() RMI call exited\");", "-    synchronized(_slaveJVMLock) { ", "-      _slaveExited = true; ", "-      _slaveJVMLock.notify();  // There does not appear to be any constraint forcing this thread to exit before shutdown", "-    }"]}], "num": 4726}
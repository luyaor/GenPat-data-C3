{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c94e7394b59f4e78695c0dff85abcd9b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b678efc9e598959c07cd8dd8f83ba6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "310f2e2e5bd03b1be3d582b8bb080b976b35e862", "commitAfterChange": "5ac038fd2393232341f24ed3abaede1deb4e977a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "      private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-              // if match, add clasname to test suite", "+              // if match, add classname to test suite", "-        try {", "-          List<String> tests = _jvm.findTestClasses(classNames, files);", "-          if (tests == null || tests.isEmpty()) {", "-            nonTestCase(allTests);", "-            return;", "-          }", "-          ", "-          ArrayList<OpenDefinitionsDocument> odds = new ArrayList<OpenDefinitionsDocument>();", "-          for (String name: tests) { odds.add(classNamesToODDs.get(name)); }", "-   ", "-          try {", "-            /** Run the junit test suite that has already been set up on the slave JVM */", "-            _notifier.junitStarted(odds);", "-            //          new ScrollableDialog(null, \"junitStarted executed in DefaultJunitModel\", \"\", \"\").show();", "-            _jvm.runTestSuite();", "-            ", "-          }", "-          catch(IOException e) { ", "-            _notifier.junitEnded();  // balances junitStarted()", "-            throw new UnexpectedException(e); ", "-          }", "-        }", "-        catch(IOException e) { throw new UnexpectedException(e); }", "-          ", "+      List<String> tests;", "+      try { tests = _jvm.findTestClasses(classNames, files); }", "+      catch(IOException e) { throw new UnexpectedException(e); }", "+      ", "+      if (tests == null || tests.isEmpty()) {", "+        nonTestCase(allTests);", "+        return;", "+      }", "+      ", "+      ArrayList<OpenDefinitionsDocument> odds = new ArrayList<OpenDefinitionsDocument>();", "+      for (String name: tests) { odds.add(classNamesToODDs.get(name)); }", "+      ", "+      try {", "+        /** Run the junit test suite that has already been set up on the slave JVM */", "+        _notifier.junitStarted(odds);", "+        //          new ScrollableDialog(null, \"junitStarted executed in DefaultJunitModel\", \"\", \"\").show();", "+        _jvm.runTestSuite();", "+        ", "+      }", "+      catch(IOException e) { ", "+        _notifier.junitEnded();  // balances junitStarted()", "+        throw new UnexpectedException(e); ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5734face99c63f931f94ce933a2eb733", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "         public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass,                                                           final File buildDir,                                                           final File projectFile,                                                           final File[] projectFiles,                                                          final ClasspathVector classpath)", "signatureAfterChange": "         public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass,                                                           final File buildDir,                                                           final File projectFile,                                                           final File[] projectFiles,                                                          final ClasspathVector classpath)", "diff": ["-      private ArrayList<File> _auxFiles = new ArrayList<File>();", "+      //private ArrayList<File> _auxFiles = new ArrayList<File>();", "+//        ScrollableDialog sd = new ScrollableDialog(null, \"FileGroupingState.compileAll() called\", \"\", \"\");", "+//        sd.show();", "-        List<File>lof = new LinkedList<File>(); // the list of files to compile", "-        List<File>los = new LinkedList<File>(); // the list of sourceroots for the files", "+        List<File> lof = new LinkedList<File>(); // the list of files to compile", "+        List<File> los = new LinkedList<File>(); // the list of sourceroots for the files", "-          try{", "+          try {", "-            if(!los.contains(sourceroot)){", "-              los.add(sourceroot);", "-            }", "+            if (!los.contains(sourceroot)) los.add(sourceroot);", "-          } catch(InvalidPackageException e){", "-            // continue (don't add the file or root)", "-          }", "+          } ", "+          catch(InvalidPackageException e) { /* do nothing */ }", "+        ", "+//        ScrollableDialog sd1 = new ScrollableDialog(null, \"Constructed list of files to compile: \" + lof, \"\", \"\");", "+//        sd1.show();", "-              } catch(FileMovedException fme) {", "+              } ", "+              catch(FileMovedException fme) {", "-              } catch(IllegalStateException e) {", "-                // it doesn't have a file, so don't try and test it...", "-              }", "-            } catch(InvalidPackageException e) {", "-              // don't add it if we don't have a valid packagename", "-            }", "+              } ", "+              catch(IllegalStateException e) { /* do nothing */ }", "+            } ", "+            catch(InvalidPackageException e) { /* do nothing */ }", "+//        ScrollableDialog sd2 = new ScrollableDialog(null, \"Constructed list of sourceroots for compile: \" + lof, \"\", \"\");", "+//        sd2.show();", "-            try{", "+            try {", "-              try{", "+              try {"]}], "num": 2146}
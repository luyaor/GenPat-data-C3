{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56098c44efdbb6d3c8397a8e3c8333c4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0425088ed04d9d64a6f61fd917530553", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractDJPane.java", "commitBeforeChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "commitAfterChange": "fa5a46f3cc65ec85b9fa37599dc6542e75cee25e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void indent(final int reason)", "signatureAfterChange": "   public void indent(final int reason)", "diff": ["-     *  channels and thus it may not be in sync with the document's position.  For that reason, we must sync the ", "-     *  document with the pane before we goahead and indent.", "+     *  channels and thus it may not be in sync with the document's position.  For that reason, we must grab the", "+     *  caretPostion and pass it as the cursor location for the insertLine operation (relevant for single line insert).", "-    getDJDocument().setCurrentLocation(getCaretPosition());", "-", "+    DJDocument doc = getDJDocument();", "+    int loc = getCaretPosition();", "+    ", "+    // The _reduced lock within DefinitionsDocument should be probably be set as well", "+    ", "-", "-    //    final SwingWorker worker = new SwingWorker() {", "-    //      public Object construct() {", "-", "-    //        // Use a progress monitor to show a progress dialog only if necessary.", "+    ", "-", "+    ", "-", "+    ", "-    if (doIndent) { indentLines(selStart, selEnd, reason, pm); }", "+    if (doIndent) { indentLines(selStart, selEnd, reason, pm, loc); }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "542b5bd2784f5a50f309a0ac0a2d2dc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractDJPane.java", "commitBeforeChange": "149feb3f2af1920c19f6930f765f209a93ed7ca6", "commitAfterChange": "fe008ef5062ac4e4b569352517b1df11133d4fdd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void indent(final int reason)", "signatureAfterChange": "   public void indent(final int reason)", "diff": ["-     *  caretPostion and pass it as the cursor location for the insertLine operation (relevant for single line insert).", "+     *  caretPostion and set the current location to that value before calling the insertLine operation.  The logic", "+     *  for a single line insert is very dependent on the current location.", "-    DJDocument doc = getDJDocument();", "-    int loc = getCaretPosition();", "+    getDJDocument().setCurrentLocation(getCaretPosition());", "-    //  Prompt if more than 10000 characters to be indented", "-    boolean doIndent = shouldIndent(selStart,selEnd);", "-    ", "-    // Do the indent", "-    if (doIndent) { indentLines(selStart, selEnd, reason, pm, loc); }", "+    //  Prompt if more than 10000 characters to be indented, then do the indent", "+    if (shouldIndent(selStart,selEnd)) { indentLines(selStart, selEnd, reason, pm); }"]}], "num": 23489}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13ebc4b410488f740751ee6235972584", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ad7471da81a01d8a6103415251dd779", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 458, "methodNumberAfterChange": 458, "signatureBeforeChange": "\r \r   public void forIntegerLiteral(IntegerLiteral that)", "signatureAfterChange": "    public void forIntegerLiteral(IntegerLiteral that)", "diff": ["-\r", "-  public void forIntegerLiteral(IntegerLiteral that) {\r", "-    forIntegerLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forIntegerLiteralOnly(that);\r", "-  }\r", "+", "+  public void forIntegerLiteral(IntegerLiteral that) {", "+    forIntegerLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forIntegerLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cea531d422781383ff1c76da44b0fe7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 406, "methodNumberAfterChange": 406, "signatureBeforeChange": "\r \r   public void forPrimitiveType(PrimitiveType that)", "signatureAfterChange": "    public void forPrimitiveType(PrimitiveType that)", "diff": ["-\r", "-  public void forPrimitiveType(PrimitiveType that) {\r", "-    forPrimitiveTypeDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forPrimitiveTypeOnly(that);\r", "-  }\r", "+", "+  public void forPrimitiveType(PrimitiveType that) {", "+    forPrimitiveTypeDoFirst(that);", "+    if (prune(that)) return;", "+    forPrimitiveTypeOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1cc94c5c1411b35589710fd738e62c8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 464, "methodNumberAfterChange": 464, "signatureBeforeChange": "\r \r   public void forStringLiteral(StringLiteral that)", "signatureAfterChange": "    public void forStringLiteral(StringLiteral that)", "diff": ["-\r", "-  public void forStringLiteral(StringLiteral that) {\r", "-    forStringLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forStringLiteralOnly(that);\r", "-  }\r", "+", "+  public void forStringLiteral(StringLiteral that) {", "+    forStringLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    forStringLiteralOnly(that);", "+  }"]}], "num": 18012}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46ac8fd78f9188310f3354b3d327d601", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab89ad06dc70abc916a035b30a07532c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDJDocument.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName)", "signatureAfterChange": "   public void appendExceptionResult(String message, String styleName)", "diff": ["-  public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName) {", "-    ", "-    String c = exceptionClass;", "-    if (c.indexOf('.') != -1) c = c.substring(c.lastIndexOf('.') + 1, c.length());", "-    ", "+  public void appendExceptionResult(String message, String styleName) {", "+    // Note that there is similar code in InteractionsDocument.  Something should be refactored.", "-    try {", "-      insertText(getLength(), c + \": \" + message + \"\\n\", styleName);", "-      ", "-      // An example stack trace:", "-      //", "-      // java.lang.IllegalMonitorStateException:", "-      // at java.lang.Object.wait(Native Method)", "-      // at java.lang.Object.wait(Object.java:425)", "-      if (! stackTrace.trim().equals(\"\")) {", "-        BufferedReader reader = new BufferedReader(new StringReader(stackTrace));", "-        ", "-        String line;", "-        // a line is parsable if it has ( then : then ), with some", "-        // text between each of those", "-        while ((line = reader.readLine()) != null) {", "-          String fileName;", "-          int lineNumber;", "-          ", "-          // TODO:  Why is this stuff here??", "-          int openLoc = line.indexOf('(');", "-          if (openLoc != -1) {", "-            int closeLoc = line.indexOf(')', openLoc + 1);", "-            ", "-            if (closeLoc != -1) {", "-              int colonLoc = line.indexOf(':', openLoc + 1);", "-              if ((colonLoc > openLoc) && (colonLoc < closeLoc)) {", "-                // ok this line is parsable!", "-                String lineNumStr = line.substring(colonLoc + 1, closeLoc);", "-                try {", "-                  lineNumber = Integer.parseInt(lineNumStr);", "-                  fileName = line.substring(openLoc + 1, colonLoc);", "-                }", "-                catch (NumberFormatException nfe) {", "-                  // do nothing; we failed at parsing", "-                }", "-              }", "-            }", "-          }", "-          ", "-          insertText(getLength(), line, styleName);", "-          ", "-          // OK, now if fileName != null we did parse out fileName", "-          // and lineNumber.", "-          // Here's where we'd add the button, etc.", "-          /*", "-           if (fileName != null) {", "-           JButton button = new JButton(\"go\");", "-           button.addActionListener(new ExceptionButtonListener(fileName, lineNumber));", "-           SimpleAttributeSet buttonSet = new SimpleAttributeSet(set);", "-           StyleConstants.setComponent(buttonSet, button);", "-           insertString(getLength(), \"  \", null);", "-           insertString(getLength() - 1, \" \", buttonSet);", "-           JOptionPane.showMessageDialog(null, \"button in\");", "-           insertString(getLength(), \" \", null);", "-           JOptionPane.showMessageDialog(null, \"extra space\");", "-           }*/", "-          ", "-          //JOptionPane.showMessageDialog(null, \"\\\\n\");", "-          insertText(getLength(), \"\\n\", styleName);", "-          ", "-        } // end the while", "-      }", "-    }", "-    catch (IOException ioe) { throw new UnexpectedException(ioe); }", "+    try { insertText(getLength(), message + \"\\n\", styleName); }", "-  }  ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e0c48fa08fbe62652cc23f9ab43ad6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName)", "signatureAfterChange": "   public void appendExceptionResult(String message, String styleName)", "diff": ["-  public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName) {", "+  public void appendExceptionResult(String message, String styleName) {", "+    // Note that there is similar code in InteractionsDJDocument.  Something should be refactored.", "+    ", "-    if (message != null && (message.equals(\"Connection refused to host: 127.0.0.1; nested exception is: \\n\" +", "-                                           \"\\tjava.net.ConnectException: Connection refused: connect\"))) return;", "+    // I'm commenting out, just to see when it appears", "+//    if (message != null && (message.equals(\"Connection refused to host: 127.0.0.1; nested exception is: \\n\" +", "+//                                           \"\\tjava.net.ConnectException: Connection refused: connect\"))) return;", "-    if (null == message || \"null\".equals(message)) message = \"\";", "-    ", "-    // Simplify the common error messages", "-    if (\"koala.dynamicjava.interpreter.error.ExecutionError\".equals(exceptionClass) ||", "-        \"edu.rice.cs.drjava.model.repl.InteractionsException\".equals(exceptionClass)) {", "-      exceptionClass = \"Error\";", "-    }", "-    ", "-    // The following is an ugly hack that should be fixed ASAP.  The read/writelock methods need to be added to", "-    // the EditDocumentInterface interface.  This cast and a similar one in ConsoleDocument must be removed because they", "-    // defeat the purpose of the EditDocumentInterface interface.", "-    ", "-    String c = exceptionClass;", "-    if (c.indexOf('.') != -1) c = c.substring(c.lastIndexOf('.') + 1, c.length());", "-    ", "-    try {", "-      append(c + \": \" + message + \"\\n\", styleName);", "-      ", "-      // An example stack trace:", "-      //", "-      // java.lang.IllegalMonitorStateException:", "-      // at java.lang.Object.wait(Native Method)", "-      // at java.lang.Object.wait(Object.java:425)", "-      if (! stackTrace.trim().equals(\"\")) {", "-        BufferedReader reader = new BufferedReader(new StringReader(stackTrace));", "-        ", "-        String line;", "-        // a line is parsable if it has ( then : then ), with some", "-        // text between each of those", "-        while ((line = reader.readLine()) != null) {", "-          String fileName;", "-          int lineNumber;", "-          ", "-          // TODO:  Why is this stuff here??", "-          int openLoc = line.indexOf('(');", "-          if (openLoc != -1) {", "-            int closeLoc = line.indexOf(')', openLoc + 1);", "-            ", "-            if (closeLoc != -1) {", "-              int colonLoc = line.indexOf(':', openLoc + 1);", "-              if ((colonLoc > openLoc) && (colonLoc < closeLoc)) {", "-                // ok this line is parsable!", "-                String lineNumStr = line.substring(colonLoc + 1, closeLoc);", "-                try {", "-                  lineNumber = Integer.parseInt(lineNumStr);", "-                  fileName = line.substring(openLoc + 1, colonLoc);", "-                }", "-                catch (NumberFormatException nfe) {", "-                  // do nothing; we failed at parsing", "-                }", "-              }", "-            }", "-          }", "-          ", "-          append(line, styleName);", "-          ", "-          //JOptionPane.showMessageDialog(null, \"\\\\n\");", "-          append(\"\\n\", styleName);", "-          ", "-        } // end the while", "-      }", "-    }", "-    catch (IOException ioe) { throw new UnexpectedException(ioe); }", "+    try { append(message + \"\\n\", styleName); }", "-  }  ", "+  }"]}], "num": 27208}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85c74ed8ae02a2a0bbd713cef4aba9f2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01fef0acb6856b3e822552c2897e8284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "f8733505f202fffe732820ec266645b66b5ecb1b", "commitAfterChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-    catch(Throwable t) {", "-//      new ScrollableDialog(null, \"UnexceptedExceptionThrown\", t.toString(), \"\").show();", "-      throw new UnexpectedException(t); ", "+    catch(Exception e) {", "+//      new ScrollableDialog(null, \"UnexceptedExceptionThrown\", e.toString(), \"\").show();", "+      throw new UnexpectedException(e); ", "-      catch(Throwable t) {", "+      catch(Exception e) {", "-        throw new UnexpectedException(t);", "+        throw new UnexpectedException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84fbb77c83170eae3a8dd1f339e07e3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "a0485f85335f36c90789dfb389fcf6d34d6ebb24", "commitAfterChange": "bdfe950dc400d21dc2bdd8774632b12854b9f66c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      private PageChangerUpdater createPageChanger()", "signatureAfterChange": "      private PageChangerUpdater createPageChanger()", "diff": ["-      Object[] aa = new Object[] {new Integer(1)};", "+      Object[] aa = new Object[] {Integer.valueOf(1)};", "-      aa[0] = new Integer(_print.getNumberOfPages());", "+      aa[0] = Integer.valueOf(_print.getNumberOfPages());", "-          catch(Exception ex) { _updateActions(); }", "+          catch(IllegalAccessException ex) { _updateActions(); }", "+          catch(InvocationTargetException ex) { _updateActions(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "990cabc6fdd5767948aa8e473222179e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DJError.java", "commitBeforeChange": "f09079b576a626b69c1cf6a20aa2d21acb9dbff4", "commitAfterChange": "860321004d56043513d3359d4091aee37ccad183", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DJError(File file, int lineNumber, int startColumn, String message, boolean isWarning)", "signatureAfterChange": "   public DJError(File file, int lineNumber, int startColumn, String message, boolean isWarning)", "diff": ["-    if (message != null && (message.indexOf(\"CompilerError\") >= 0)) throw new UnexpectedException(message);", "+    // need to precisely match the CompilerError message, otherwise a file name containing", "+    // \"CompilerError\" may trigger an UnexpectedException (see bug 2872797)", "+    if (message != null && message.startsWith(\"Compile exception: sun.tools.java.CompilerError\"))", "+      throw new UnexpectedException(message);"]}], "num": 17325}
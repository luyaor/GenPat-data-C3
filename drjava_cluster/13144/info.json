{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c037721f565ab30a2d5b4ee316c00f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3915af39b4ac8ed8d42b9f757f1f1fa4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "b5c763bf27a5267e7ff6eb7560dbde820d19b063", "commitAfterChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public Node visit(VariableDeclaration node)", "signatureAfterChange": "   public Node visit(AssertStatement node)", "diff": ["+   */", "+  public Node visit(AssertStatement node) {", "+    //Visits the components of this node", "+    Node n = node.getCondition();", "+    Node o = n.acceptVisitor(this);", "+    if(o != null) {", "+      rejectReferenceType(o,n);", "+      node.setCondition((Expression)o);", "+    }", "+    ", "+    n = node.getFailString();", "+    if(n != null) {", "+      o = n.acceptVisitor(this);", "+      if(o != null) {", "+        node.setFailString((Expression)o);", "+      }", "+    }", "+    return null;    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c63da71baa50c11d319ea0581c66077c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "b5c763bf27a5267e7ff6eb7560dbde820d19b063", "commitAfterChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public Object visit(BlockStatement node)", "signatureAfterChange": "   public Object visit(AssertStatement node)", "diff": ["+   */", "+  public Object visit(AssertStatement node) {", "+    if (! (((Boolean)node.getCondition().acceptVisitor(this)).booleanValue())) {", "+      String toThrow = \"\";", "+      Expression n = node.getFailString();", "+      if(n != null) {", "+        toThrow = n.acceptVisitor(this).toString();", "+      }", "+      throw new AssertionError(toThrow);", "+    }", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1d096ea10de9d62bc016951a7e49900", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "dc96b8e17de1b9fbcfb0683311d7e482b6fcfcf3", "commitAfterChange": "270c6e5f741c371e9536c93af7f5525dbf67eeee", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private TypeContext checkList(Iterable<? extends Node> l)", "signatureAfterChange": "      public TypeContext checkList(Iterable<? extends Node> l)", "diff": ["-  ", "-  private TypeContext checkList(Iterable<? extends Node> l) {", "+  public TypeContext checkList(Iterable<? extends Node> l) {", "+    ExecutionError error = null;", "-    for (Node n : l) { c = n.acceptVisitor(new StatementChecker(c, opt)); }", "+    for (Node n : l) {", "+      try { c = n.acceptVisitor(new StatementChecker(c, opt)); }", "+      catch (ExecutionError e) {", "+        if (hasErrorContext(n)) { c = getErrorContext(n); }", "+        if (error == null) { error = e; }", "+      }", "+    }", "+    if (error != null) { throw error; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbf2f635c160fb95a89201a1b19a6914", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementEvaluator.java", "commitBeforeChange": "15e62c4c6cc17bdc9cb202b4c5c58df163a8f8cf", "commitAfterChange": "6b388fb1877469cd91350296fabdf9fe8d522b74", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "    @Override public Result visit(WhileStatement node)", "signatureAfterChange": "      @Override public Result visit(ExpressionStatement node)", "diff": ["+  ", "+  @Override public Result visit(ExpressionStatement node) {", "+    if (hasStatementTranslation(node)) {", "+      return getStatementTranslation(node).acceptVisitor(this);", "+    }", "+    else {", "+      Object val = new ExpressionEvaluator(_bindings, _opt).value(node.getExpression());", "+      if (node.getHasSemicolon() || getType(node.getExpression()).equals(TypeSystem.VOID)) {", "+        return new Result(_bindings);", "+      }", "+      else { return new Result(val, _bindings); }", "+    }", "+  }"]}], "num": 13144}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75a11d5d5c99e763caa2dd98a9a195c0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f467da50ce620ca563565268823f033", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "      public void testForIncrementExpression()", "signatureAfterChange": "      public void testForIncrementExpression()", "diff": ["-      assertEquals(\"Error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\",", "+                   errors.get(0).getFirst());", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "+                   errors.get(1).getFirst());", "-      assertEquals(\"There should be 3 errors\", 3, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"There should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  \" +", "+                   \"Perhaps you meant to create a new instance of int\", ", "+                   errors.get(2).getFirst());", "-      assertEquals(\"There should be 4 errors\", 4, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"There should now be 4 errors\", 4, errors.size());  // For some reason, generated error is not a duplicate", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  \" +", "+                   \"Perhaps you meant to create a new instance of int\",", "+                   errors.get(3).getFirst());", "-      assertEquals(\"Should now be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\",", "-                   errors.getLast().getFirst());      ", "+      assertEquals(\"Should still be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\",", "+                   errors.get(0).getFirst());      ", "-      assertEquals(\"Should now be 6 errors\", 6, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should still be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "+                   errors.get(1).getFirst());", "-      NegativePostfixIncrementExpression npi2 = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")));", "+      NegativePostfixIncrementExpression npi2 = ", "+        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "+                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                       new Word(SourceInfo.NO_INFO, \"int\")));", "-      assertEquals(\"There should be 7 errors\", 7, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"There should be 5 errors\", 5, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you \" + ", "+                   \"meant to create a new instance of int\", ", "+                   errors.get(4).getFirst());", "-      NegativePostfixIncrementExpression npi3 = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))));", "+      NegativePostfixIncrementExpression npi3 = ", "+        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "+                                               new Parenthesized(SourceInfo.NO_INFO, ", "+                                                                 new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                                         new Word(SourceInfo.NO_INFO, \"int\"))));", "-      assertEquals(\"There should be 8 errors\", 8, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"There should be 6 errors\", 6, errors.size());  // Wny isn't this a duplicate of error #4?", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  \" + ", "+                   \"Perhaps you meant to create a new instance of int\", ", "+                   errors.get(5).getFirst());", "-      PositivePrefixIncrementExpression ppi4 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new NegativePrefixIncrementExpression(SourceInfo.NO_INFO, nf)));", "+      PositivePrefixIncrementExpression ppi4 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "+                                              new Parenthesized(SourceInfo.NO_INFO, ", "+                                                                new NegativePrefixIncrementExpression(SourceInfo.NO_INFO, nf)));", "-      assertEquals(\"Should have added 1 error\", 9, errors.size());", "-      assertEquals(\"Should have correct error message\",\"You cannot assign a value to an increment expression\", errors.getLast().getFirst());", "+      assertEquals(\"Should have added 1 error\", 7, errors.size());", "+      assertEquals(\"Should have correct error message\",", "+                   \"You cannot assign a value to an increment expression\", ", "+                   errors.getLast().getFirst());", "-      PositivePrefixIncrementExpression ppi5 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")));", "+      PositivePrefixIncrementExpression ppi5 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "+                                              new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                      new Word(SourceInfo.NO_INFO, \"s\")));", "-      assertEquals(\"Should have added 1 error\", 10, errors.size());", "-      assertEquals(\"Should have correct error message\", \"You cannot increment or decrement something that is not a number type.  You have specified something of type boolean\", errors.getLast().getFirst());", "+      assertEquals(\"Should have added 1 error\", 8, errors.size());", "+      assertEquals(\"Should have correct error message\", ", "+                   \"You cannot increment or decrement something that is not a number type.  You have specified \" +", "+                   \"something of type boolean\", errors.get(7).getFirst());", "-      assertEquals(\"Should still be 10 errors\", 10, errors.size());", "-      ", "-      ", "+      assertEquals(\"Should still be 8 errors\", 8, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5328f8f6e17b2cd849743b41f0712950", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 21, "signatureBeforeChange": "          public void test_NotAllowed()", "signatureAfterChange": "          public void test_NotAllowed()", "diff": ["-                                                                                                                      new BitwiseOrAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)))});", "-", "-      TryCatchStatement tcs = new NormalTryCatchStatement(noInfo, b, new CatchBlock[0]);", "-", "-     ", "-     si.visit(_iv);", "-     assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ii.visit(_iv);", "-     assertEquals(\"InnerInterfaceDef is not allowed\", \"Nested interfaces cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-     ", "-     ic.visit(_iv);", "-     assertEquals(\"InnerClassDef is not allowed\", \"Inner classes cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-     ", "-     ls.visit(_iv);", "-     assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ss.visit(_iv);", "-     assertEquals(\"SwitchStatement is not allowed\", \"Switch statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ws.visit(_iv);", "-     assertEquals(\"WhileStatement is not allowed\", \"While statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ds.visit(_iv);", "-     assertEquals(\"DoStatement is not allowed\", \"Do statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     fs.visit(_iv);", "-     assertEquals(\"ForStatement is not allowed\", \"For statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-     ", "-     bs.visit(_iv);", "-     assertEquals(\"BreakStatement is not allowed\", \"Break statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     cs.visit(_iv);", "-     assertEquals(\"ContinueStatement is not allowed\", \"Continue statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-   ", "-     syncs.visit(_iv);", "-     assertEquals(\"SynchronizedStatement is not allowed\", \"Synchronized statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-    ", "-     tp.visit(_iv);", "-     assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     at.visit(_iv);", "-     assertEquals(\"ArrayTypes is not allowed\", \"Arrays cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-", "-     ce.visit(_iv);", "-     assertEquals(\"ConditionalExpression is not allowed\", \"Conditional expressions cannot be used at the Intermediate level\", errors.getLast().getFirst());", "-     ", "-     hasBitOperator.visit(_iv);", "-      assertEquals(\"Bitwise operators are not allowed\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+                                                                                                              new BitwiseOrAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)))});", "-     tcs.visit(_iv);", "-     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", errors.getLast().getFirst());", "+      TryCatchStatement tcs = new NormalTryCatchStatement(noInfo, b, new CatchBlock[0]);", "+      ", "+      ", "+      si.visit(_iv);", "+      assertEquals(\"After visiting static initializer, errors should still be 0\", 0, errors.size());", "+      ", "+      ii.visit(_iv);", "+      assertEquals(\"After visiting inner interface, errors should still be 0\", 0, errors.size());", "+      ", "+      ic.visit(_iv);", "+      assertEquals(\"After visiting inner class, errors should still be 0\", 0, errors.size());", "+      ", "+      ls.visit(_iv);", "+      assertEquals(\"After visiting labeled statment, errors should still be 0\", 0, errors.size());", "+      ", "+      ss.visit(_iv);", "+      assertEquals(\"After visiting switch statment, errors should still be 0\", 0, errors.size());", "+      ", "+      ws.visit(_iv);", "+      assertEquals(\"After visiting while statment, errors should still be 0\", 0, errors.size());", "+      ", "+      ds.visit(_iv);", "+      assertEquals(\"After visiting do statment, errors should still be 0\", 0, errors.size());", "+      ", "+      fs.visit(_iv);", "+      assertEquals(\"After visiting for statment, errors should still be 0\", 0, errors.size());", "+      ", "+      bs.visit(_iv);", "+      assertEquals(\"After visiting break statment, errors should still be 0\", 0, errors.size());", "+      ", "+      cs.visit(_iv);", "+      assertEquals(\"After visiting continue statment, errors should still be 0\", 0, errors.size());", "+      ", "+      syncs.visit(_iv);", "+      assertEquals(\"After visiting synchronized statment, errors should now be 1\", 1, errors.size());", "+      assertEquals(\"SynchronizedStatement is not allowed\", \"Synchronized statements cannot be used at the Intermediate level\", errors.getLast().getFirst());", "+      ", "+      tp.visit(_iv);", "+      assertEquals(\"After visiting type parameter, errors should now be 2\", 2, errors.size());", "+      assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Intermediate level\", errors.getLast().getFirst());", "+      ", "+//     at.visit(_iv);", "+//     assertEquals(\"ArrayTypes is not allowed\", \"Arrays cannot be used at the Intermediate level\", errors.getLast().getFirst());", "+      ", "+//     ce.visit(_iv);", "+//     assertEquals(\"ConditionalExpression is not allowed\", \"Conditional expressions cannot be used at the Intermediate level\", errors.getLast().getFirst());", "+      ", "+//     hasBitOperator.visit(_iv);", "+//     assertEquals(\"Bitwise operators are not allowed\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+      ", "+//     tcs.visit(_iv);", "+//     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f0950ff4426003e07298961148ad8ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "45afdf26640d7e2a166ed67c249ba6fd207b1d2b", "commitAfterChange": "e7a6b9c5a51a2cf7b9cfb5a10d90c24a3c7c3844", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 121, "signatureBeforeChange": "          public void testShouldBreak()", "signatureAfterChange": "          public void testShouldBreak()", "diff": ["-      assertEquals(\"Should be 1 error\", 1, errors.size());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "-                   errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+//                   errors.getLast().getFirst());", "+    ", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 6 errors\", 6, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 7 errors\", 7, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise and expressions cannot be used at any language level.\" + ", "-                   \"  Perhaps you meant to compare two values using regular and (&&)\", errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise and expressions cannot be used at any language level.\" + ", "+//                   \"  Perhaps you meant to compare two values using regular and (&&)\", errors.getLast().getFirst());", "-      assertEquals(\"Should be 8 errors\", 8, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise or expressions cannot be used at any language level.\" + ", "-                   \"  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise or expressions cannot be used at any language level.\" + ", "+//                   \"  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "-      assertEquals(\"Should be 9 errors\", 9, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise xor expressions cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise xor expressions cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 10 errors\", 10, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bitwise not expressions cannot be used at any language level.\" +", "-                   \"  Perhaps you meant to negate this value using regular not (!)\", errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bitwise not expressions cannot be used at any language level.\" +", "+//                   \"  Perhaps you meant to negate this value using regular not (!)\", errors.getLast().getFirst());", "-      ", "-      assertEquals(\"Should be 11 error\", 11, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 12 errors\", 12, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 13 errors\", 13, errors.size());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should be no errors\", 0, errors.size());", "+//      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+//                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 14 errors\", 14, errors.size());", "+      assertEquals(\"Should be 1 error\", 1, errors.size());", "-      assertEquals(\"Should be 15 errors\", 15, errors.size());", "+      assertEquals(\"Should be 2 errors\", 2, errors.size());"]}], "num": 26210}
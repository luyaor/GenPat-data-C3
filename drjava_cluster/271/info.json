{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4af1584b8c8e951f1f6b16a6ac65e69c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "628dc487d3db7b0fe86c8d23782eccfc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "01976b859dcbb21fcccdad846dcb4a0675ac7cca", "commitAfterChange": "2fc4395eb72dbc8caeb586fbd5d1fef990083e71", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["-        args = new Object[larg.size()];", "+        args = new Object[typs.length];", "-        while (it.hasNext()) {", "+        while (i < typs.length-1) {", "+        if(typs.length > 0){", "+          if(!m.isVarArgs()){", "+            Object p  = it.next().acceptVisitor(this);", "+            args[i] = performCast(typs[i], p);", "+            i++;", "+          } else { // Pass an array with all the remaining arguments", "+            assert(typs[typs.length-1].isArray());", "+            Class componentType = typs[typs.length-1].getComponentType();", "+            Object argArray = Array.newInstance(componentType,new int[]{(larg.size()-typs.length+1)});", "+            for(int j = 0; j < larg.size()-typs.length+1; j++){", "+              Object p  = it.next().acceptVisitor(this);", "+              Array.set(argArray, j, performCast(componentType, p));", "+            }", "+            args[typs.length-1] = argArray;", "+          }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63408b3de944f96876f27eb2abb4fbe1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/ParseError.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ParseException getParseException()", "signatureAfterChange": "               private static String parseExceptionMessage(ParseException e)", "diff": ["-     */", "-    public ParseException getParseException() {", "-      return pe;", "+    ", "+    private static String parseExceptionMessage(ParseException e) {", "+      if (e.expectedTokenSequences == null) { return e.getMessage(); }", "+      else {", "+        int maxSize = 0;", "+        for (int i = 0; i < e.expectedTokenSequences.length; i++) {", "+          if (maxSize < e.expectedTokenSequences[i].length) {", "+            maxSize = e.expectedTokenSequences[i].length;", "+          }", "+        }", "+        String retval = \"Syntax Error: \\\"\";", "+        Token tok = e.currentToken.next;", "+        ", "+        for (int i = 0; i < maxSize; i++) {", "+          if (i != 0) retval += \" \";", "+          if (tok.kind == 0) {", "+            retval += e.tokenImage[0];", "+            break;", "+          }", "+          retval += TextUtil.javaEscape(tok.image);", "+          tok = tok.next; ", "+        }", "+        retval += \"\\\"\";", "+        return retval;", "+      }"]}], "num": 271}
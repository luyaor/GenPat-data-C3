{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3e0e5868b7141fa95c8f66bf9e515cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47471113d12f3d32e34df06016325c27", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapterTest.java", "commitBeforeChange": "785973c3139c615cf62589c63d8216d8eae75cbb", "commitAfterChange": "589d008e681155a4eba9e61cd7d559555f927792", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStylesListContentAndReset() throws DocumentAdapterException", "signatureAfterChange": "   public void testStylesListContentAndReset() throws DocumentAdapterException", "diff": ["+      int returnNum = System.getProperty(\"line.separator\").length();", "-                   \"((48, 74), error)\", _adapter.getStylesList().get(0).toString());", "+                   \"((\"+(47+returnNum)+\", \"+(72+returnNum*2)+\"), error)\", _adapter.getStylesList().get(0).toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e16a10ea8c8c298564bdff3c1c51c8aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public synchronized static void main(String[] args)", "signatureAfterChange": "   public synchronized static void main(String[] args)", "diff": ["+      ", "+      _notDone = true;", "-//      // Loading the class that intermittently hangs first readObject(...) call below", "-//      Class psi = Class.forName(\"java.net.PlainSocketImpl\");", "-      ", "+", "-/* The following code currently breaks unit tests (and perhaps DrJava) when it detects the hanging", "+/* The following code currently breaks unit tests and DrJava itself when it detects the hanging", "- * of exit.  Before code can be commented in, variable masterRemote must be converted to field _masterRemote. */", "+ * of exit.  */", "+//          ", "-//          if (_masterRemote == null) {", "+//          if (_notDone) {", "-", "+      ", "+      // Loading the class that intermittently hangs first readObject(...) call below", "+      Class psi = Class.forName(\"java.net.PlainSocketImpl\");", "+        ", "-      _log.log(\"Slave JVM completed reading \" + masterRemote);", "+      _notDone = false;", "+      _log.log(\"SlaveJVMRunner completed reading \" + masterRemote);", "-  ", "+      AbstractSlaveJVM slave = null;", "+", "-        AbstractSlaveJVM slave = _getInstance(slaveClass);", "+        slave = _getInstance(slaveClass);", "-        _log.log(\"Slave JVM exported stub \" + slaveRemote);", "+        _log.log(\"SlaveJVMRunner exported stub \" + slaveRemote);", "-        _log.log(\"Slave JVM invoking the method registerSlave(\" + slave + \") in the Master JVM\");", "-        masterRemote.registerSlave(slaveRemote);", "+        _log.log(\"SlaveJVMRunner invoking the method registerSlave(\" + slave + \") in the Master JVM\");", "+        masterRemote.registerSlave(slave);", "-        _log.log(\"Slave JVM could not intstantiate slave class.  Threw exception: \" + e);", "+        _log.log(\"SlaveJVMRunner could not instantiate and start slave class '\" + slave + \"'.  Threw exception: \" + e);", "-          String msg = \"Couldn't instantiate and register the slave.\\n\" +", "+          String msg = \"SlaveJVMRunner could not instantiate and register the slave.\\n\" +", "-      _showErrorMessage(\"Could not set up the Slave JVM.\", e);", "-      _log.log(\"Could not set up the Slave JVM. Calling System.exit(2) in response to: \" + e);", "+      _showErrorMessage(\"SlaveJVMRunner could not set up the Slave JVM.\", e);", "+      _log.log(\"SlaveJVMRunner could not set up the Slave JVM. Calling System.exit(2) in response to: \" + e);"]}], "num": 771}
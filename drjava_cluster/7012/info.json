{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17861bf85cab65342fec5d8309b841ce", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84536dd2d6f8f06326e6b90a378225f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public String getVariableToString(String var)", "signatureAfterChange": "   public String getVariableToString(String var)", "diff": ["-    try { return slave.getVariableToString(var); }", "+    try {", "+      return slave.interpret(var).apply(new InterpretResult.Visitor<String>() {", "+        public String forNoValue() { return \"\"; }", "+        public String forStringValue(String s) { return '\"' + s + '\"'; }", "+        public String forCharValue(Character c) { return \"'\" + c + \"'\"; }", "+        public String forNumberValue(Number n) { return n.toString(); }", "+        public String forBooleanValue(Boolean b) { return b.toString(); }", "+        public String forObjectValue(String valString) { return valString; }", "+        public String forException(String msg) { return \"\"; }", "+        public String forUnexpectedException(Throwable t) { throw new UnexpectedException(t); }", "+        public String forBusy() { return \"\"; }", "+      });", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2af8cb11ccaf3cb202ff829fedbe789", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "2d130b589eb563459c94da96fea961fcbe800771", "commitAfterChange": "467e5b5cdd1dcb74e3af8270c3f2ac9d390a6395", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public Object[] getVariable(String var)", "signatureAfterChange": "   public Object[] getVariable(String var)", "diff": ["-    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "-    if (env == null) { return new Object[0]; }", "-    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "-    if (lv == null) { return new Object[0]; }", "-    return new Object[]{ env.second().get(lv) };", "+//    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "+//    if (env == null) { return new Object[0]; }", "+//    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "+//    if (lv == null) { ", "+        InterpretResult ir = interpret(var);", "+        return ir.apply(new InterpretResult.Visitor<Object[]>() {", "+            public Object[] forNoValue() { return new Object[0]; }", "+            public Object[] forStringValue(String val) { return new Object[] { val }; }", "+            public Object[] forCharValue(Character val) { return new Object[] { val }; }", "+            public Object[] forNumberValue(Number val) { return new Object[] { val }; }", "+            public Object[] forBooleanValue(Boolean val) { return new Object[] { val }; }", "+            public Object[] forObjectValue(String valString) { return new Object[] { valString }; }", "+            public Object[] forException(String message) { return new Object[0]; }", "+            public Object[] forEvalException(String message, StackTraceElement[] stackTrace) { return new Object[0]; }", "+            public Object[] forUnexpectedException(Throwable t) { return new Object[0]; }", "+            public Object[] forBusy() { return new Object[0]; }", "+        });", "+//    }", "+//    return new Object[]{ env.second().get(lv) };"]}], "num": 7012}
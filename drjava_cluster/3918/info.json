{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a218f90a25cf59e568d70e2b124f092", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e08d63cf6e1be3c1d20f2a2cedbb613", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "7d7d651695cc4a26c75cdfb50217f79acc4c45a4", "commitAfterChange": "641e8d72a9e70ecaee90e1431ba7ab971af51ca9", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 61, "signatureBeforeChange": "     void setInputCompletionCommand(final Runnable command)", "signatureAfterChange": "     void setInputCompletionCommand(final Runnable command)", "diff": ["-    /** Specifies what to do when the <Enter> key is hit. */", "+    /** Specifies what to do when the <Enter> or <Ctrl+D> keys are hit. */", "+      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_D,java.awt.Event.CTRL_MASK), INSERT_END_OF_STREAM);", "-        public void actionPerformed(ActionEvent e) { command.run(); }", "+        public void actionPerformed(ActionEvent e) {", "+          append(\"\\n\"); // append newline at the end", "+          command.run();", "+        }", "+      });", "+", "+      // Add the input listener for <Ctrl+D>", "+      am.put(INSERT_END_OF_STREAM, new AbstractAction() {", "+        public void actionPerformed(ActionEvent e) {", "+          if (getText().length()==0) { _endOfStream = true; }", "+          // do not append newline at the end", "+          command.run();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e33793edfb8a7caa6f32b3847f479109", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionMapLoader.java", "commitBeforeChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "commitAfterChange": "442c59b932709a9e16b8bf4afb9e7306f5a80d8b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void loadInto(OptionMap map)", "signatureAfterChange": "      public void loadInto(OptionMap map)", "diff": ["+    java.util.ArrayList<OptionParseException> es = new java.util.ArrayList<OptionParseException>();", "-      String val = prop.getProperty(option.name);", "-      map.setString(option, val);", "+      try {", "+        String val = prop.getProperty(option.name);", "+        map.setString(option, val);", "+      }", "+      catch(OptionParseException ope) {", "+        es.add(ope);", "+        map.setString(option, DEFAULT.prop.getProperty(option.name));", "+      }", "+    if (es.size()>0) throw new OptionParseException(es.toArray(new OptionParseException[0]));"]}], "num": 3918}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00d529bb32a8ef051843df90ba37a4dd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63eacc3cbfc7c3f8a2d7bfb24b2165d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "7bb9a22e4cbbae8f1b760058a6f336d0a39bb871", "commitAfterChange": "14e7dcc7e0d6b6b7a5f38bdc40af083f2a31ac1c", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-", "-    LinkedList args = new LinkedList();", "-    StringReference sr = _vm.mirrorOf(interpreterName);", "-    sr.disableCollection();", "-    args.add(sr); // make the String a JDI Value", "-    if( printMessages ) {", "-      System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "-      System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "+    int tries = 0;", "+    StringReference sr = null;", "+    while (tries < OBJECT_COLLECTED_TRIES) {", "+      try{       ", "+        LinkedList args = new LinkedList();", "+        sr = _vm.mirrorOf(interpreterName);", "+        sr.disableCollection();", "+        args.add(sr); // make the String a JDI Value", "+        if( printMessages ) {", "+          System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "+          System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "+        }", "+        ", "+        ObjectReference tmpInterpreter = (ObjectReference) _interpreterJVM.invokeMethod(threadRef, m, args,", "+                                                                                        ObjectReference.INVOKE_SINGLE_THREADED);", "+        ", "+        ", "+        if( printMessages ) System.out.println(\"Returning...\");", "+        return tmpInterpreter;", "+      }", "+      catch (ObjectCollectedException e) {", "+        tries++;", "+      }", "+      finally {", "+        sr.enableCollection();", "+      }", "-", "-    try {", "-      ObjectReference tmpInterpreter = (ObjectReference) _interpreterJVM.invokeMethod(threadRef, m, args,", "-                                                                                      ObjectReference.INVOKE_SINGLE_THREADED);", "-", "-", "-      if( printMessages ) System.out.println(\"Returning...\");", "-      return tmpInterpreter;", "-    }", "-    catch (ObjectCollectedException e) {", "-      throw new DebugException(\"The debugInterpreter: \" + interpreterName + \" could not be obtained from interpreterJVM\");", "-    }", "-    finally {", "-      sr.enableCollection();", "-    }", "+    throw new DebugException(\"The debugInterpreter: \" + interpreterName + \" could not be obtained from interpreterJVM\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc2a20d4a8c288e83e9baa9e049c5d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "81f7bc68ef7285bacd5689ea0a54ea5647d9a1d8", "commitAfterChange": "12384109e03448701c98d404f37be617f6e32fee", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-    // invokeMethod could execute. This happened infrequently so by trying this", "-    // multiple times, the chance of failure each time should be acceptably low.", "+    // invokeMethod could execute. We now just disable collection until after the", "+    // method is invoked.", "-    int tries = 0;", "-    while (tries < MAXINVOKETRIES) {", "-      LinkedList args = new LinkedList();", "-      args.add(_vm.mirrorOf(interpreterName)); // make the String a JDI Value", "-      if( printMessages ) {", "-        System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "-        System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "-      }", "+    ", "+    LinkedList args = new LinkedList();", "+    StringReference sr = _vm.mirrorOf(interpreterName);", "+    sr.disableCollection();", "+    args.add(sr); // make the String a JDI Value", "+    if( printMessages ) {", "+      System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "+      System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "+    }    ", "+    ", "+    try {", "+      ObjectReference tmpInterpreter = (ObjectReference) _interpreterJVM.invokeMethod(threadRef, m, args,", "+                                                                                      ObjectReference.INVOKE_SINGLE_THREADED);", "-      try {", "-        ObjectReference tmpInterpreter = (ObjectReference) _interpreterJVM.invokeMethod(threadRef, m, args,", "-                                     ObjectReference.INVOKE_SINGLE_THREADED);", "-        if( printMessages ) System.out.println(\"Returning...\");", "-        return tmpInterpreter;", "-      }", "-      catch (ObjectCollectedException oce) {", "-        tries++;", "-      }", "+      ", "+      if( printMessages ) System.out.println(\"Returning...\");", "+      return tmpInterpreter;", "-    throw new DebugException(\"The debugInterpreter: \" + interpreterName + \" could not be obtained from interpreterJVM\");", "-    ", "+    catch (ObjectCollectedException e) {", "+      throw new DebugException(\"The debugInterpreter: \" + interpreterName + \" could not be obtained from interpreterJVM\");", "+    }    ", "+    finally {", "+      sr.enableCollection();", "+    }"]}], "num": 2911}
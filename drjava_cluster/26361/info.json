{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a29ba234ccc39cd27a604588db449865", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22b95e7e67ffdd78f656bd1f9a0b3ffa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "e75c44dca53d5633e70ed3badd03d3667a23d4c8", "commitAfterChange": "c11896795d0041b0e5728ede27aa1fce3454d97c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void testInteractionsHistoryStoredCorrectly() throws EditDocumentException", "signatureAfterChange": "   public void testInteractionsHistoryStoredCorrectly() throws EditDocumentException", "diff": ["-    assertEquals(\"Current interaction should still be there - should not have interpreted\", \"public class A {\\n\" + System.getProperty(\"line.separator\"),", "-                 doc.getCurrentInteraction());", "+    String expected = \"public class A {\\n\" + \"\\n\";  // last term was StringOps.EOL but Swing uses '\\n' for newLIne", "+    String result = doc.getCurrentInteraction();", "+//    System.err.println(\"expected = '\" + expected + \"' length = \" + expected.length());", "+//    System.err.println(\"result = '\" + result + \"' length = \" + result.length());", "+    assertEquals(\"Current interaction should still be there - should not have interpreted\", expected, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5021aba927ae67c1128d48799c44be9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": "               public void testExceptionsInSymbolTable()", "signatureAfterChange": "               public void testExceptionsInSymbolTable()", "diff": ["-      //make sure that exceptions are being added to symbol table ", "+            ", "+      // Make sure that exceptions are being added to symbol table ", "+      ClassOrInterfaceType exceptionType = new ClassOrInterfaceType(SourceInfo.NO_INFO, ", "+                                                                    \"java.util.prefs.BackingStoreException\", ", "+                                                                    new Type[0]);", "+      ParenthesizedExpressionList expList = new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]);", "+      ", "-                       new BodyItemI[] { ", "-        new ThrowStatement(SourceInfo.NO_INFO, ", "-                           new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                                             new ClassOrInterfaceType(SourceInfo.NO_INFO, ", "-                                                                                      \"java.util.prefs.BackingStoreException\", ", "-                                                                                      new Type[0]),", "-                                                             new ParenthesizedExpressionList(SourceInfo.NO_INFO, ", "-                                                                                             new Expression[0])))});", "-      ", "+                       new BodyItemI[] { new ThrowStatement(SourceInfo.NO_INFO, ", "+                                                            new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "+                                                                                              exceptionType, expList))});", "-                  LanguageLevelConverter.symbolTable.get(\"java.util.prefs.BackingStoreException\")==null);", "+                  LanguageLevelConverter.symbolTable.get(\"java.util.prefs.BackingStoreException\") == null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aaee31c6f7eaa31b13dbbdfed613312", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6e6dc20e393a893a5d9ad55d0b971c8d23c8c73e", "commitAfterChange": "94f0a27f33bac9f77c517bf8ab75dfe92afa1ace", "methodNumberBeforeChange": 244, "methodNumberAfterChange": 244, "signatureBeforeChange": "    public MainFrame()", "signatureAfterChange": "    public MainFrame()", "diff": ["-//    parsingEnabledListener.optionChanged(new OptionEvent<Boolean>(LIGHTWEIGHT_PARSING_ENABLED, ", "-//                                                                  DrJava.getConfig().getSetting(LIGHTWEIGHT_PARSING_ENABLED).booleanValue()));", "+//    parsingEnabledListener.", "+//      optionChanged(new OptionEvent<Boolean>(LIGHTWEIGHT_PARSING_ENABLED, ", "+//                                             DrJava.getConfig().getSetting(LIGHTWEIGHT_PARSING_ENABLED).booleanValue()));", "-    _recentFileManager = new RecentFileManager(_fileMenu.getItemCount() - 2, _fileMenu, new RecentFileManager.RecentFileAction() { public void actionPerformed(FileOpenSelector selector) { open(selector); } }, OptionConstants.RECENT_FILES);", "+    RecentFileAction fileAct = new RecentFileManager.RecentFileAction() { ", "+      public void actionPerformed(FileOpenSelector selector) { open(selector); }", "+    }; ", "+    _recentFileManager = new RecentFileManager(_fileMenu.getItemCount() - 2, _fileMenu, fileAct, ", "+                                               OptionConstants.RECENT_FILES);", "-    _recentProjectManager = new RecentFileManager(_projectMenu.getItemCount()-2, _projectMenu, new RecentFileManager.RecentFileAction() { public void actionPerformed(FileOpenSelector selector) { openProject(selector); } },  OptionConstants.RECENT_PROJECTS);", "-    ", "+    RecentFileAction projAct = new RecentFileManager.RecentFileAction() { ", "+      public void actionPerformed(FileOpenSelector selector) { openProject(selector); } ", "+    };", "+    _recentProjectManager = new RecentFileManager(_projectMenu.getItemCount() - 2, _projectMenu, projAct, ", "+                                                  OptionConstants.RECENT_PROJECTS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82a269a990243f2b72288cacd2cb0be6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "3e39a82bec763ada9f5a933ea34ece6f3d39aa18", "commitAfterChange": "09b2b8159aeebd112917594d3a29e014650ad394", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private PanelTreeNode _createPanel(String t, PanelTreeNode parent)", "signatureAfterChange": "   private PanelTreeNode _createPanel(String t, PanelTreeNode parent)", "diff": ["-    ", "-    _tree.expandPath(new TreePath(ptNode.getPath()));", "+    TreeNode[] pathArray = ptNode.getPath();", "+    TreePath path = new TreePath(pathArray);", "+//     System.out.println(\"path has class \" + pathArray.getClass());", "+//     System.out.println(\"last path compenent has class \" + path.getLastPathComponent().getClass());", "+    _tree.expandPath(path);"]}], "num": 26361}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df58d18067725952cf6d5a760fe8171b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f493f52831be6af77080595b79b43be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "signatureAfterChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "diff": ["-    assert (_slave != null);", "-    final String[] args = ", "-      new String[] { _masterStubFile.getAbsolutePath(), _slaveClassName };", "+    final String[] args = new String[] { _masterStubFile.getAbsolutePath(), _slaveClassName };", "-    // Start a thread to wait for the slave to die.  When it dies, delegate what to do (restart?) to subclass", "+    // Start a thread to create the slave JVM and wait for it to die.  When it dies, delegate what to do (restart?) ", "+    // to subclass"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c05fa9fd9704604b8f249e293de4f57c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "2cd89063cbfbf0917c73ab6eef3bf3a4c73e4766", "commitAfterChange": "b7a80f7ccc058818677874970560634a8628aea6", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "   private void _javadocWorker(File destDirFile, FileSaveSelector saver)", "signatureAfterChange": "   private void _javadocWorker(File destDirFile, FileSaveSelector saver)", "diff": ["-        ", "+    ", "-    //TODO: put the following line in a new Thread and tell listeners javadoc has started", "-    //Pass the function some way to tell about its output (use the way compilers do it for", "-    //a model)", "-    //And finally, when we're done notify the listeners along with some sort of failure flag", "+    // Start a new Thread to execute Javadoc and tell listeners it has started", "+    // And finally, when we're done notify the listeners with a success flag", "+      e.printStackTrace();"]}], "num": 14617}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6ccfa0442bad42aacb4eceb7dfdfe6d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2841069195f77c1153d8d3520decb313", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "c22ae4a2b42306ce89775aaf2a5b300676337b0d", "commitAfterChange": "c783dcfc2a672846c5731c22479ac241a8d88896", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 111, "signatureBeforeChange": "   public static Predicate<File> extensionFilePredicate(String extension)", "signatureAfterChange": "   public static Predicate<File> extensionFilePredicate(String extension, final Predicate<? super File> also)", "diff": ["+   */", "+  public static Predicate<File> extensionFilePredicate(String extension, final Predicate<? super File> also) {", "-      public Boolean value(File f) { return canonicalCase(f).getName().endsWith(suffix); }", "+      public Boolean value(File f) { return canonicalCase(f).getName().endsWith(suffix) && also.value(f); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f51d143fa73bff4a288b6c59f1c8d53", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 114, "signatureBeforeChange": "   public static Predicate<File> extensionFilePredicate(String extension, final Predicate<? super File> also)", "signatureAfterChange": "     public PredicateFilePredicate(Predicate<? super File> p)", "diff": ["+    private final Predicate<? super File> _p;", "+    public PredicateFilePredicate(Predicate<? super File> p) { _p = p; }", "-  public static Predicate<File> extensionFilePredicate(String extension, final Predicate<? super File> also) {", "-    // Ensure that the extension is in the canonical case", "-    extension = canonicalCase(new File(extension)).getName();", "-    final String suffix = \".\" + extension;", "-    return new Predicate<File>() {", "-      public Boolean value(File f) { return canonicalCase(f).getName().endsWith(suffix) && also.value(f); }", "-    };"]}], "num": 1348}
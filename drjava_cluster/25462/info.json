{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3674ccdcc854477628867c9512296d4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf7da843583ae678108697b7d2e6b9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "84e7921bd32edcfceaf3be1ebd8104fc4d274516", "commitAfterChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 58, "signatureBeforeChange": "      synchronized void currThreadSet(final DebugThreadData thread)", "signatureAfterChange": "      synchronized void currThreadSet(final DebugThreadData thread)", "diff": ["+  ", "-    _model.printDebugMessage(\"The current thread has been set.\");", "+    _model.printDebugMessage(\"The current thread is now \" + thread.getName() + \".\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9800985d4977b64e78aacc378775595e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData defineSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-  protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName) {", "-    String name = qualifiedClassName;", "+  protected SymbolData defineSymbolData(TypeDefBase typeDefBase, String qualifiedClassName) {", "+    String name = qualifiedClassName;  // may be an interface", "-    if (sd != null && !sd.isContinuation()) {", "-      _addAndIgnoreError(\"This class has already been defined.\", typeDefBase);", "+    if (sd != null && ! sd.isContinuation()) {", "+      _addAndIgnoreError(\"The class or interface \" + name + \" has already been defined.\", typeDefBase);", "+    ", "+    // Create SymbolDatas (continuations) for the interfaces if they do not already exist", "+    // Create a SymbolData for the superclass of typeDefBase", "+    ", "+//      if (superClassName.equals(\"TestCase\") || superClassName.equals(\"junit.framework.TestCase\")) {", "+//            System.out.println(\"WARNING! \" + superClassName + \" encountered as superclass\");", "+//            assert false;", "+//      }", "-      superClass = getSymbolData(superClassName, si, false); //TODO: change this back to true?", "+      // The following line generates an infinite recursion in some cases if resolve (the 3rd parm) is true.  Yet", "+      // when superclass is TestCase and TestCase is not imported", "+      superClass = getSymbolData(superClassName, si, false); //TODO: if true can generate infinite loop in helper", "+      }", "+      sd.setInterface(false);", "+    }", "+    ", "+    else { throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "+                                      \"  Please report this bug.\"); }", "+    ", "+    // get the SymbolData of the superclass which must be in the symbol table", "+    // since we visited the type in forClassDef() although it may be a continuation. ", "+    ", "+    // there is a continuation in the symbol table, update the fields", "+    sd.setMav(typeDefBase.getMav());", "+    sd.setTypeParameters(typeDefBase.getTypeParameters());", "+    sd.setSuperClass(superClass);", "+    sd.setInterfaces(interfaces);", "+    sd.setIsContinuation(false);", "+    _log.log(\"REMOVING continuation \" + sd.getName());", "+    continuations.remove(sd.getName());", "+    ", "+    if (! sd.isInterface()) { LanguageLevelConverter._newSDs.put(sd, this); }", "+    return sd;", "+  }", "-    ", "-    if (! sd.isInterface()) {_newSDs.put(sd, this); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9db1f3da6b36a42c11405348ed39acf7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "60798300f32b2ec4f4cff0f390993b3a5984e6c1", "commitAfterChange": "6fa1e9e0526601b88fed849b111530adacda855f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 11, "signatureBeforeChange": "   void addDebugInterpreter(String name, JavaInterpreter interpreter)", "signatureAfterChange": "   public void addInterpreter(String name, Interpreter interpreter)", "diff": ["+   */", "+  public void addInterpreter(String name, Interpreter interpreter) {", "+    if (_interpreters.containsKey(name)) {", "+      throw new IllegalArgumentException(\"'\" + name + \"' is not a unique interpreter name\");", "+    }", "+    _interpreters.put(name, new InterpreterData(interpreter));", "+  }", "-   */", "-  void addDebugInterpreter(String name, JavaInterpreter interpreter) {", "-    if (_debugInterpreters.containsKey(name)) {", "-      throw new IllegalArgumentException(\"Names for debug interpreters must be unique\");", "-    }", "-    _debugInterpreters.put(name, new InterpreterData(interpreter));", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0fae93d713fa65f392838278b79d152", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentFileManager.java", "commitBeforeChange": "5c83f089e25fccbca0e9bbad3fc54a6c66548714", "commitAfterChange": "5a2afd347f47a6bc08b7f21fb8ab49faa2b374ae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void addMirroredMenu(JMenu mirroredMenu)", "signatureAfterChange": "   public void addMirroredMenu(JMenu mirroredMenu)", "diff": ["-      JMenuItem newItem = new JMenuItem(\"\");", "+      JMenuItem newItem = new JMenuItem((i+1) + \". \" + file.getName());"]}], "num": 25462}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1deac1830ba355217d84d66cbcdafd7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d244c96d2a8cbf7c4dee1cfe39c2383", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 101, "signatureBeforeChange": "      public synchronized ThreadReference peekAt(int i) throws NoSuchElementException", "signatureAfterChange": "      public ThreadReference peekAt(int i)", "diff": ["-", "-    public synchronized ThreadReference peekAt(int i) throws NoSuchElementException {", "-      try {", "-        return _data.get(i);", "-      }", "-      catch(ArrayIndexOutOfBoundsException e) {", "-        throw new NoSuchElementException(\"Cannot peek at element \" + i + \" of this stack!\");", "-      }", "-    }", "+    public ThreadReference peekAt(int i) { return get(i); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78f0c1e30e55ed7f2823c32df907f455", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "60798300f32b2ec4f4cff0f390993b3a5984e6c1", "commitAfterChange": "6fa1e9e0526601b88fed849b111530adacda855f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public boolean setActiveInterpreter(String name)", "signatureAfterChange": "    public boolean setActiveInterpreter(String name)", "diff": ["+   */", "+   public boolean setActiveInterpreter(String name) {", "+     _activeInterpreter = getInterpreter(name);", "+     return _activeInterpreter.isInProgress();", "+   }", "-   */", "-  public boolean setActiveInterpreter(String name) {", "-    if (_debugInterpreters.containsKey(name)) {", "-      _activeInterpreter = _debugInterpreters.get(name);", "-      return _activeInterpreter.isInProgress();", "-    }", "-    else {", "-      throw new IllegalArgumentException(\"Interpreter <\" + name + \"> does not exist.\");", "-    }", "-  }"]}], "num": 23234}
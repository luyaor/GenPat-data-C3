{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf4d4d34a160a7dcde734a6e7bdf21ee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eceaf4cd4fc7ee4a1895eeee82aa1be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 545, "methodNumberAfterChange": 545, "signatureBeforeChange": "          public void interactionEnded()", "signatureAfterChange": "          public void interactionEnded()", "diff": ["-      edu.rice.cs.plt.tuple.Pair<String,String> lastError = im.getLastError();", "+      String lastError = im.getLastError();", "-        if (lastError!=null) {", "+        if (lastError != null) {", "-          String exceptionClass = lastError.first();", "-          String message = lastError.second();", "-          edu.rice.cs.plt.tuple.Pair<String,String> secondToLastError = im.getSecondToLastError();", "-          if ((secondToLastError==null) || // either there was no 2nd to last error", "-              (!secondToLastError.first().equals(exceptionClass)) || // or it is different", "-              (!secondToLastError.second().equals(message))) {", "+          // check that this error is different than the last one (second to last may be null):", "+          if (!lastError.equals(im.getSecondToLastError())) {", "-            if (\"koala.dynamicjava.interpreter.error.ExecutionError\".equals(exceptionClass) &&", "-                message != null &&", "-                message.startsWith(\"Undefined class '\") &&", "-                message.endsWith(\"'\")) {", "+            if (lastError.startsWith(\"Undefined class '\") && lastError.endsWith(\"'\")) {", "-              String undefinedClassName = message.substring(message.indexOf('\\'')+1,message.lastIndexOf('\\''));", "-              _showAutoImportDialog(undefinedClassName);          ", "+              String undefinedClassName = lastError.substring(lastError.indexOf('\\'')+1,", "+                                                              lastError.lastIndexOf('\\''));", "+              _showAutoImportDialog(undefinedClassName);", "-      } else {", "+      }", "+      else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba81a8aa57a30ae36297dc825d229771", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/platform/PlatformFactory.java", "commitBeforeChange": "8e07fa29bb174e064817d47030f50a01ab046b09", "commitAfterChange": "dfb9c0d61ab732af3eb4768e715fdd3a38a2bf72", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   private static PlatformSupport getPlatformSupport()", "signatureAfterChange": "   private static PlatformSupport getPlatformSupport()", "diff": ["-    // Check for Mac OS X.", "-    String mrjVer = System.getProperty(\"mrj.version\");", "+", "+    // Get OS name string; we expect one of \"windows xp\", \"mac os x\", etc.", "+    String os = System.getProperty(\"os.name\").toLowerCase();", "-    // Check for other OS types.", "-    String os = System.getProperty(\"os.name\");", "-    ", "-    if (mrjVer != null) {", "-      // This must be a Mac, but what JDK version?", "-      String jdkVer = System.getProperty(\"java.specification.version\");", "-      ", "-      if (jdkVer.equals(\"1.4\")) {", "-        // This is a 1.4 compliant JDK.", "-        // System.out.println(\"Mac14Platform\");", "-        return Mac14Platform.ONLY;", "-      }", "-      else if (jdkVer.equals(\"1.3\")) {", "-        // This is a 1.3 compliant JDK.", "-        // System.out.println(\"Mac13Platform\");", "-        return Mac13Platform.ONLY;", "-      }", "-      else {", "-        // We don't know what version of the JDK this is, so use a default for OS X.", "-        // System.out.println(\"MacPlatform\");", "-        return MacPlatform.ONLY;", "-      }", "-    }", "-    // Check for Windows platform.", "-    else if ((os != null) && (os.toLowerCase().indexOf(\"windows\") == 0)) {", "-      // This must be a Windows OS.", "-      // System.out.println(\"WindowsPlatform\");", "-      return WindowsPlatform.ONLY;", "-    }", "-    else {", "-      // This isn't one of our specifically-supported platforms, so use the default.", "-      // System.out.println(\"DefaultPlatform\");", "-      return DefaultPlatform.ONLY;", "-    }", "+\tif (os.startsWith(\"mac os x\")) { return MacPlatform.ONLY; }", "+\telse if (os.startsWith(\"windows\")) { return WindowsPlatform.ONLY; }", "+\telse { return DefaultPlatform.ONLY; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0048e44fe05a2b9e7cc9776c48322a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 5, "signatureBeforeChange": "   @Override public Type visit(HookTypeName node)", "signatureAfterChange": "      public Iterable<Type> checkList(Iterable<? extends Expression> l, Type expected)", "diff": ["+  ", "+  public Iterable<Type> checkList(Iterable<? extends Expression> l, Type expected) {", "+    return IterUtil.mapSnapshot(l, new ExpressionVisitor(Option.some(expected)));", "+  }", "-   */", "-  @Override public Type visit(HookTypeName node) {", "-    Type bound = node.getHookedType().acceptVisitor(this);", "-    if (node.isSupered()) {", "-      return setType(node, new Wildcard(new BoundedSymbol(node, TypeSystem.OBJECT, bound)));", "-    }", "-    else { return setType(node, new Wildcard(new BoundedSymbol(node, bound, TypeSystem.NULL))); }", "-  }"]}], "num": 19838}
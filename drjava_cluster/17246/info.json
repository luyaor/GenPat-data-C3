{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9dc04beb1622a27adb1c6dcd7480cdfb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2c2ef64f91e79c794fec7977372234", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlus.java", "commitBeforeChange": "1cb762451f589947c585a2a219ca59cd916faaa1", "commitAfterChange": "33157731339c994882aa1f63ed4a691707c328ca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void indentLine(DefinitionsDocument doc)", "signatureAfterChange": "   public void indentLine(DefinitionsDocument doc)", "diff": ["-    // For testing only", "-    doc.setTab(\"---\", doc.getCurrentLocation());", "+    int here = doc.getCurrentLocation();", "+    int startLine = doc.getLineStartPos(here);", "+    doc.setCurrentLocation(startLine);", "+    IndentInfo ii = doc.getReduced().getIndentInformation();", "+    ", "+    // Check preconditions", "+    if ((ii.braceType.equals(\"\")) ||", "+        (ii.distToBrace < 0)) {", "+      // Can't find brace, so do nothing.", "+      return;", "+    }", "+", "+    // Find length to brace", "+    int bracePos = startLine - ii.distToBrace;", "+    int braceNewLine = 0;", "+    if (ii.distToNewline >=0) {", "+      braceNewLine = startLine - ii.distToNewline;", "+    }", "+    int braceLen = bracePos - braceNewLine;", "+", "+    // Create tab string", "+    StringBuffer tab = new StringBuffer(_suffix.length() + braceLen);", "+    for (int i=0; i < braceLen; i++) {", "+      tab.append(\" \");", "+    }", "+    tab.append(_suffix);", "+    ", "+    if (here >= doc.getLength()) {", "+      here = doc.getLength() - 1;", "+    }", "+    doc.setCurrentLocation(here);", "+    ", "+    doc.setTab(tab.toString(), here);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4345a7b8e5971a245795ab17b179cd4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-//    int origin = doc.getCurrentLocation();", "-    int lineStart = doc.getLineStartPos(doc.getCurrentLocation());", "+    int origin = doc.getCurrentLocation();", "+    int lineStart = doc._getLineStartPos(origin);", "+    if (lineStart <= 1) return false;  // linestart follows a newLine, which must be preceded by a brace to return true", "-//    doc.setCurrentLocation(lineStart);", "-    BraceInfo info = doc.getLineEnclosingBrace();", "-//    doc.setCurrentLocation(origin);    ", "+    doc._setCurrentLocation(lineStart);", "+    BraceInfo info = doc._getLineEnclosingBrace();", "+    doc._setCurrentLocation(origin);    ", "-    if (! info.braceType().equals(BraceInfo.OPEN_CURLY) || info.distance() < 0)", "+    if (! info.braceType().equals(BraceInfo.OPEN_CURLY) || info.distance() <= 0)", "-    // Get brace's end of line", "-    int braceEndLinePos = doc.getLineEndPos(bracePos);", "+//    // Get brace's end of line", "+    int braceEndLinePos = doc._getLineEndPos(bracePos);", "-    try { nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos); }", "+//    System.err.println(\"bracePos = \" + bracePos + \" docLength = \" + doc.getLength());", "+    try { nextNonWS = doc._getFirstNonWSCharPos(braceEndLinePos /* bracePos + 1*/); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee54c9dfc3c6dafc17a2a25f080b6c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlus.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["+    int dist = info.distToLineEnclosingBrace();", "-    if (info.lineEnclosingBraceType().equals(\"\") || info.distToLineEnclosingBrace() < 0) {", "+    if (info.lineEnclosingBraceType().equals(\"\") || dist < 0) {  // Should use interned Strings here", "-    int bracePos = startLine - info.distToLineEnclosingBrace();", "+    int bracePos = startLine - dist;", "-    if (info.distToEnclosingBraceStart() >= 0) {", "-      braceNewline = startLine - info.distToEnclosingBraceStart();", "-    }", "+    int distStart = info.distToEnclosingBraceStart();", "+    if (distStart > 0) braceNewline = startLine - distStart;", "-    final StringBuilder tab = new StringBuilder(_suffix.length() + braceLen);", "-    for (int i=0; i < braceLen; i++) {", "-      tab.append(\" \");", "-    }", "-    tab.append(_suffix);", "+    final int tab = _suffixCt + braceLen;", "-    doc.setTab(tab.toString(), here);", "+    doc.setTab(tab, here);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96a188ee6234379e2ad700a98dfcfd09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlus.java", "commitBeforeChange": "098be4c27233835145531c86355bc697a3b62bfd", "commitAfterChange": "28db8fb2942dc00cad50f5244fe215d573867721", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    doc.setCurrentLocation(startLine);", "-    IndentInfo info = doc._getIndentInformation();", "-    int dist = info.distToLineEnclosingBrace();", "+    doc.setCurrentLocation(startLine);  // Is this necessary?  _getLineEnclosingBrace only depends on current LINE", "+    BraceInfo info = doc._getLineEnclosingBrace();", "+    int dist = info.distance();", "-    if (info.lineEnclosingBraceType().equals(\"\") || dist < 0) {  // Should use interned Strings here", "+    if (info.braceType().equals(\"\") || dist < 0) {  // Should use interned Strings here", "-    int braceNewline = 0;", "-    int distStart = info.distToEnclosingBraceStart();", "-    if (distStart > 0) braceNewline = startLine - distStart;", "-    int braceLen = bracePos - braceNewline;", "+    // Get distance to start of line from enclosing brace", "+    int braceNewline = doc._getLineStartPos(bracePos);", "+    int braceIndent = bracePos - braceNewline;", "-    final int tab = _suffixCt + braceLen;", "+    final int tab = _suffixCt + braceIndent;", "-    if (here > doc.getLength()) {", "-      here = doc.getLength() - 1;", "-    }", "+    if (here > doc.getLength()) here = doc.getLength() - 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5ca6b5ed7b9c5229bac563543de0433", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBrace.java", "commitBeforeChange": "b17c3d3d0edf27a5d35f38839287840198b5808d", "commitAfterChange": "80e5b2a4860b03c09786e96e9454b1209681f568", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    doc.move(lineStart - origin);  // TODO: use setCurrentLocation instead of move", "-    IndentInfo info = doc.getIndentInformation();  // TODO: revise to use getLineEnclosingBrace", "-    doc.move(origin - lineStart);  // TODO: use setCurrentLocation instead of move", "+//    doc.setCurrentLocation(lineStart);  ", "+    BraceInfo info = doc.getLineEnclosingBrace();  ", "+//    doc.setCurrentLocation(origin);  ", "-    if (! info.lineEnclosingBraceType().equals(IndentInfo.OPEN_CURLY) || info.distToLineEnclosingBrace() < 0) {  // How can distTo... be < 0?", "+    int dist = info.distance();", "+    ", "+    if (! info.braceType().equals(BraceInfo.OPEN_CURLY) || dist < 0) {  // dist < 0 means no such brace exists", "-    int bracePos = lineStart - info.distToLineEnclosingBrace();", "+    int bracePos = lineStart - dist;", "-      prevNonWS = doc.findPrevNonWSCharPos(bracePos);", "-      char c = doc.getText(prevNonWS,1).charAt(0);", "-      for (char pchar: _prefix) if (c == pchar) return true;", "+      int loc = doc.findPrevNonWSCharPos(bracePos);", "+      char ch = doc.getText(loc,1).charAt(0);", "+      for (char pch: _prefix) if (ch == pch) return true;"]}], "num": 17246}
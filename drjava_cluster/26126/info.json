{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25aee4d9ced7e544cb68be2ea2d17e82", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03b8ddb4cb1ed37af1ad975ea0d54177", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    public void testInterpretCurrentInteractionWithIncompleteInput() throws EditDocumentException", "signatureAfterChange": "   public void testInterpretCurrentInteractionWithIncompleteInput() throws EditDocumentException, InterruptedException", "diff": ["-  public void testInterpretCurrentInteractionWithIncompleteInput() throws EditDocumentException {", "+  // Why do we create a new model (and slave JVM) for each of this trivial tests?", "+  public void testInterpretCurrentInteractionWithIncompleteInput() throws EditDocumentException, InterruptedException {", "+    _log.log(\"testInterpretCurrentInteractionWithIncompleteInput started\");", "-    _model = new IncompleteInputInteractionsModel(_adapter);", "-    _model = new IncompleteInputInteractionsModel(_adapter);", "-    _model = new IncompleteInputInteractionsModel(_adapter);", "-    _model = new IncompleteInputInteractionsModel(_adapter);", "-    _model = new IncompleteInputInteractionsModel(_adapter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a1e365277a42709e621c7822d28a219", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/FilteredRelation.java", "commitBeforeChange": "811484bb0f3e9c6a234bb593ba7247f59304a444", "commitAfterChange": "d3ca8d30db126f3de1352627e18f51d00a1bf339", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected boolean containsObjects(Object first, Object second)", "signatureAfterChange": "   public int compositeSize()", "diff": ["+  public int compositeHeight() { return ObjectUtil.compositeHeight(_rel, _pred) + 1; }", "+  public int compositeSize() { return ObjectUtil.compositeSize(_rel, _pred) + 1; }", "-  /** Shouldn't be called, but implemented to satisfy the abstract class declaration. */", "-  protected boolean containsObjects(Object first, Object second) {", "-    return contains(Pair.make(first, second));"]}], "num": 26126}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "515f49469da7f52c4f6233d0db7bd7cf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c26f34271943c626e0432a5739b39b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "331da9dae5ca8d07aef3df8e995cb58d0f6f24d7", "commitAfterChange": "ad6842e7f3f5b3d0f8c5827298c4ec26a70a9f28", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public String getMainClassName() throws ClassNameNotFoundException", "signatureAfterChange": "   public String getMainClassName() throws ClassNameNotFoundException", "diff": ["-    * first top level class if document contains no public classes. */", "-  public String getMainClassName() throws ClassNameNotFoundException {", "+    * first top level class if document contains no public classes or interfaces. */", "+  public String getMainClassName() throws ClassNameNotFoundException {", "-        final int length = text.length();", "-        int index;", "+        final int indexOfClass = _findKeywordAtToplevel(\"class\", text, 0);", "+        final int indexOfInterface = _findKeywordAtToplevel(\"interface\", text, 0);", "+        final int indexOfPublic = _findKeywordAtToplevel(\"public\", text, 0);", "-        int indexOfClass = _findKeywordAtToplevel(\"class\", text, 0);", "-        int indexOfPublic = _findKeywordAtToplevel(\"public\", text, 0);", "-        ", "-        if (indexOfClass == -1) throw ClassNameNotFoundException.DEFAULT;", "+        if (indexOfPublic == -1)  return getFirstClassName(indexOfClass, indexOfInterface);", "-        if (indexOfPublic == -1 || indexOfPublic < indexOfClass) ", "-          return getNextIdentifier(indexOfClass + \"class\".length());", "+        // There is an explicit public declaration", "+        final int afterPublic = indexOfPublic + \"public\".length();", "+        final String subText = text.substring(afterPublic);", "+        setCurrentLocation(afterPublic);", "+//        _log.log(\"After public text = '\" + subText + \"'\");", "+        int indexOfPublicClass  = _findKeywordAtToplevel(\"class\", subText, afterPublic);  // relative offset", "+        if (indexOfPublicClass != -1) indexOfPublicClass += afterPublic;", "+        int indexOfPublicInterface = _findKeywordAtToplevel(\"interface\", subText, afterPublic); // relative offset", "+        if (indexOfPublicInterface != -1) indexOfPublicInterface += afterPublic;", "+//        _log.log(\"indexOfPublicClass = \" + indexOfPublicClass + \" indexOfPublicInterface = \" + indexOfPublicInterface);", "-        int afterPublic = indexOfPublic + \"public\".length();", "+        return getFirstClassName(indexOfPublicClass, indexOfPublicInterface);", "-        int indexOfPublicClass = afterPublic + _findKeywordAtToplevel(\"class\", text.substring(afterPublic), afterPublic);", "-        ", "-//        _log.log(\"indexOfPublicClass = \" + indexOfPublicClass);", "-        ", "-        if (indexOfPublicClass == -1) throw ClassNameNotFoundException.DEFAULT;", "-        ", "-        return getNextIdentifier(indexOfPublicClass + \"class\".length());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb796e1eada99ebb18175c0414cd7e75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "5123ecf97583235afcfb8f13ec9081cdf56dd15a", "commitAfterChange": "520cd2cdf6034dac2fccfb5515380300424aef81", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "   public String getNextTopLevelClassName(int startPos, int endPos)     throws ClassNameNotFoundException", "signatureAfterChange": "   public String getNextTopLevelClassName(int startPos, int endPos)     throws ClassNameNotFoundException", "diff": ["-", "-      if (indexOfClass > -1) {", "-", "-        if (indexOfInterface > -1) {", "-          // compare indices to find the lesser", "-          index = (indexOfClass < indexOfInterface) ?", "-            indexOfClass + \"class\".length() :", "-            indexOfInterface + \"interface\".length();", "-        }", "-        else {", "-          //top level class declaration found", "-          index = indexOfClass + \"class\".length();", "-        }", "+      int indexOfEnum = _findKeywordAtToplevel(\"enum\",text,startPos);", "+        ", "+      //If class exists at top level AND either there is no interface at top level or the index of class precedes the index of the top", "+      //level interface, AND the same for top level enum, then the class is the first top level declaration", "+      if(indexOfClass > -1 ", "+           && (indexOfInterface <= -1 || indexOfClass < indexOfInterface) ", "+           && (indexOfEnum <= -1 || indexOfClass < indexOfEnum) ) {", "+        index = indexOfClass + \"class\".length();", "+      }", "+      else if(indexOfInterface > -1 ", "+                && (indexOfClass <= -1 || indexOfInterface < indexOfClass) ", "+                && (indexOfEnum <= -1 || indexOfInterface < indexOfEnum) ) {", "+        index = indexOfInterface + \"interface\".length();", "+      }", "+      else if(indexOfEnum > -1", "+                && (indexOfClass <= -1 || indexOfEnum < indexOfClass)   ", "+                && (indexOfInterface <= -1 || indexOfEnum < indexOfInterface)) {", "+        index = indexOfEnum + \"enum\".length();", "-        if (indexOfInterface > -1) {", "-          index = indexOfInterface + \"interface\".length();", "-        }", "-        else {", "-          // neither index was valid", "-          throw new ClassNameNotFoundException(\"No top level class name found\");", "-        }", "+        // no index was valid", "+        throw new ClassNameNotFoundException(\"No top level class name found\");", "+        ", "+      ", "+//      if (indexOfClass > -1) {", "+//", "+//        if (indexOfInterface > -1) {", "+//          // compare indices to find the lesser", "+//          index = (indexOfClass < indexOfInterface) ?", "+//            indexOfClass + \"class\".length() :", "+//            indexOfInterface + \"interface\".length();", "+//        }", "+//        else {", "+//          //top level class declaration found", "+//          index = indexOfClass + \"class\".length();", "+//        }", "+//      }", "+//      else {", "+//        if (indexOfInterface > -1) {", "+//          index = indexOfInterface + \"interface\".length();", "+//        }", "+//        else {", "+//          // neither index was valid", "+//          throw new ClassNameNotFoundException(\"No top level class name found\");", "+//        }", "+//      }"]}], "num": 12945}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62d02100c843b41aa8dd939e2f02d23c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89840488a6e4ac920c29528ed69ba0f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 46, "signatureBeforeChange": "   private void _threwException(final Throwable t)", "signatureAfterChange": "   private void _handleRemoteException(RemoteException e)", "diff": ["-  /** Lets the model know if any exceptions occur while communicating with the Interpreter JVM. */", "-  private void _threwException(final Throwable t) { DrJavaErrorHandler.record(t); }", "+  /** Lets the model know if any exceptions occur while communicating with the Interpreter JVM. */", "+  private void _handleRemoteException(RemoteException e) {", "+    if (e instanceof UnmarshalException && e.getCause() instanceof EOFException) {", "+      /* Interpreter JVM has disappeared (perhaps reset); just ignore the error. */", "+    else { DrJavaErrorHandler.record(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a10ef919a7d9c6621d24f76775bc4132", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "b7e7dc26985115a0b1d39562458d043f05ace9bb", "commitAfterChange": "f8bbe10df4c611d46e38b444998362529994b559", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "   private void _handleRemoteException(RemoteException e)", "signatureAfterChange": "   private void _handleRemoteException(RemoteException e)", "diff": ["-    if (e instanceof UnmarshalException && e.getCause() instanceof EOFException) {", "+    if (e instanceof UnmarshalException) {", "+      if (e.getCause() instanceof EOFException) return;", "+      /* Deals with bug 2688586: Reset during debugging throws UnmarshalException", "+       * We may want to extend this to all kinds of SocketExceptions. */", "+      if ((e.getCause() instanceof SocketException) &&", "+          (e.getCause().getMessage().equals(\"Connection reset\"))) return;", "-    else { DrJavaErrorHandler.record(e); }", "+    DrJavaErrorHandler.record(e);"]}], "num": 8738}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8367cc32724c887c647599a3bc063e31", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a8897125f69b2eed472887bc3917aa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "   public synchronized void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "diff": ["-  public synchronized void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info) ", "+  public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info) ", "-//    String base = filename.substring(0, filename.lastIndexOf(File.separator) + 1);", "-    Vector<File> auxFileVector = new Vector<File>();", "-    Iterator<OpenDefinitionsDocument> odds = _documentsRepos.valuesIterator();", "-    while(odds.hasNext()){", "-      OpenDefinitionsDocument doc = odds.next();", "-      ", "-      ", "-      if (!doc.isUntitled() ) {", "-        // could not use doc.isInProjectPath because we may be in flat file view which returns false", "-        String projectPath = new File(filename).getParentFile().getCanonicalPath() + File.separator;", "-        String filePath = doc.getFile().getParentFile().getCanonicalPath() + File.separator;", "-        if (filePath.startsWith(projectPath)){", "-          DocumentInfoGetter g = info.get(doc);", "-          builder.addSourceFile(g);", "-          srcFileVector.add(g.getFile());", "-        }else if(doc.isAuxiliaryFile()){", "-          DocumentInfoGetter g = info.get(doc);", "-          builder.addAuxiliaryFile(g);", "-          auxFileVector.add(g.getFile());", "+    LinkedList<File> auxFileList = new LinkedList<File>();", "+    ", "+    synchronized (_documentsRepos) { ", "+      for (OpenDefinitionsDocument doc: _documentsRepos.values()) {", "+        if (!doc.isUntitled()) {", "+          // could not use doc.isInProjectPath because we may be in flat file view which returns false", "+          String projectPath = new File(filename).getParentFile().getCanonicalPath() + File.separator;", "+          String filePath = doc.getFile().getParentFile().getCanonicalPath() + File.separator;", "+          if (filePath.startsWith(projectPath)){", "+            DocumentInfoGetter g = info.get(doc);", "+            builder.addSourceFile(g);", "+            srcFileVector.add(g.getFile());", "+          }", "+          else if (doc.isAuxiliaryFile()) {", "+            DocumentInfoGetter g = info.get(doc);", "+            builder.addAuxiliaryFile(g);", "+            auxFileList.add(g.getFile());", "+          }", "-", "+      ", "+      ", "-      for (String s : paths) {", "-        builder.addCollapsedPath(s);", "-      }", "+      for (String s : paths) { builder.addCollapsedPath(s); }", "-    for(int i = 0; i<currentclasspaths.size(); i++){", "-      builder.addClasspathFile(currentclasspaths.get(i));", "-    }", "+    for (File f: currentclasspaths) { builder.addClasspathFile(f); }", "-    File f = getBuildDirectory();", "-    //System.out.println(f);", "-    if(f != null)", "-      builder.setBuildDirectory(f);", "+    File d = getBuildDirectory();", "+    if (d != null) builder.setBuildDirectory(d);", "-    //System.out.println(f);", "-    if(mainClass != null){", "-      builder.setMainClass(mainClass);", "-    }", "+    if (mainClass != null) builder.setMainClass(mainClass);", "-", "-  ", "+    ", "-    _auxiliaryFiles.clear();", "-    for(File file: auxFileVector){", "-      _auxiliaryFiles.add(file);", "+    synchronized (_auxiliaryFiles) {", "+      _auxiliaryFiles = auxFileList;", "-    setFileGroupingState(_makeProjectFileGroupingState(mainClass, f, new File(filename), srcFiles));", "+    setFileGroupingState(_makeProjectFileGroupingState(mainClass, d, new File(filename), srcFiles));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2712f4e73ec7ba9ab63ddca7f11faf11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 232, "signatureBeforeChange": "     private File _locateClassFile()", "signatureAfterChange": "     private File _locateClassFile()", "diff": ["-      try {", "-        String className = getDocument().getQualifiedClassName();", "-        String ps = System.getProperty(\"file.separator\");", "-        // replace periods with the System's file separator", "-        className = StringOps.replace(className, \".\", ps);", "-        String filename = className + \".class\";", "-", "-        // Check source root set (open files)", "-        File[] sourceRoots = { };", "-        Vector<File> roots = new Vector<File>();", "-        ", "-        if (getBuildDirectory() != null) roots.add(getBuildDirectory());", "-        ", "-        // Add the current document to the beginning of the roots list", "-        try { roots.add(getSourceRoot()); }", "-        catch (InvalidPackageException ipe) {", "-          try {", "-            File f = getFile().getParentFile();", "-            if (f != null) roots.add(f);", "-          }", "-          catch (IllegalStateException ise) { /* No file; do nothing */ }", "-          catch (FileMovedException fme) {", "-            // Moved, but we'll add the old file to the set anyway", "-            File root = fme.getFile().getParentFile();", "-            if (root != null)  roots.add(root);", "-          }", "+      if (isUntitled()) return null;", "+      ", "+      String className;", "+      try { className = getDocument().getQualifiedClassName(); }", "+      catch (ClassNameNotFoundException cnnfe) { return null;  /* No source class name */ }", "+      ", "+      String ps = System.getProperty(\"file.separator\");", "+      // replace periods with the System's file separator", "+      className = StringOps.replace(className, \".\", ps);", "+      String fileName = className + \".class\";", "+      ", "+      // Check source root set (open files)", "+      ArrayList<File> roots = new ArrayList<File>();", "+      ", "+      if (getBuildDirectory() != null) roots.add(getBuildDirectory());", "+      ", "+      // Add the current document to the beginning of the roots list", "+      try { roots.add(getSourceRoot()); }", "+      catch (InvalidPackageException ipe) {", "+        try {", "+          File root = getFile().getParentFile();", "+          if (root != null) roots.add(root);", "-", "-        for (int i = 0; i < sourceRoots.length; i++) roots.add(sourceRoots[i]);", "-        ", "-        File classFile = getSourceFileFromPaths(filename, roots);", "-", "-        if (classFile == null) {", "-          // Class not on source root set, check system classpath", "-          String cp = System.getProperty(\"java.class.path\");", "-          String pathSeparator = System.getProperty(\"path.separator\");", "-          Vector<File> cpVector = new Vector<File>();", "-          for (int i = 0; i < cp.length();) {", "-            int nextSeparator = cp.indexOf(pathSeparator, i);", "-            if (nextSeparator == -1) {", "-              cpVector.add(new File(cp.substring(i, cp.length())));", "-              break;", "-            }", "-            cpVector.add(new File(cp.substring(i, nextSeparator)));", "-            i = nextSeparator + 1;", "-          }", "-          classFile = getSourceFileFromPaths(filename, cpVector);", "+        catch(NullPointerException e) { throw new UnexpectedException(e); }", "+        catch(FileMovedException fme) {", "+          // Moved, but we'll add the old file to the set anyway", "+          File root = fme.getFile().getParentFile();", "+          if (root != null) roots.add(root);", "-        if (classFile == null) {", "-          // not on system classpath, check interactions classpath", "-          classFile = getSourceFileFromPaths(filename, DrJava.getConfig().getSetting(EXTRA_CLASSPATH));", "-        }", "-        return classFile;", "-      catch (ClassNameNotFoundException cnnfe) {", "-        // No class name found, so we can't find a class file", "-        return null;", "+      ", "+      File classFile = getSourceFileFromPaths(fileName, roots);", "+      if (classFile != null) return classFile;", "+      ", "+      // Class not on source root set, check system classpath", "+      String cp = System.getProperty(\"java.class.path\");", "+      String pathSeparator = System.getProperty(\"path.separator\");", "+      Vector<File> cpVector = new Vector<File>();", "+      int i = 0;", "+      while (i < cp.length()) {", "+        int nextSeparator = cp.indexOf(pathSeparator, i);", "+        if (nextSeparator == -1) {", "+          cpVector.add(new File(cp.substring(i, cp.length())));", "+          break;", "+        }", "+        cpVector.add(new File(cp.substring(i, nextSeparator)));", "+        i = nextSeparator + 1;", "+      classFile = getSourceFileFromPaths(fileName, cpVector);", "+      ", "+      if (classFile != null) return classFile;", "+      ", "+      // not on system classpath, check interactions classpath", "+      return getSourceFileFromPaths(fileName, DrJava.getConfig().getSetting(EXTRA_CLASSPATH));"]}], "num": 28112}
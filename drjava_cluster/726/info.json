{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8bb3b5ed9abd53b3686d7a488fdb313", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03aff601f42d3db33801ab580bae6222", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "cfea3e13a321911fb98c8bdb6bf527cebe9e8065", "commitAfterChange": "c93fe40cf9a3db4130d052c7d32f60d02ed31c7a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "signatureAfterChange": "   public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "diff": ["-        System.out.println(\"Finalizing: \" + e.getObject().hashCode());", "+//        System.out.println(\"Finalizing: \" + e.getObject().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    System.out.println(\"Current: \" + _frame.getCurrentDefPane().hashCode());", "+//    System.out.println(\"Current: \" + _frame.getCurrentDefPane().hashCode());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a85491f38bed3fc9c34c90aa60ab9b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "commitAfterChange": "65fb8db1fb3e7570ae4fa352a26deb0e151b48ac", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     protected Pair<LinkedList<MethodData>, LinkedList<MethodData>>      _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr,                          boolean isConstructor, SymbolData thisSD)", "signatureAfterChange": "     protected Pair<LinkedList<MethodData>, LinkedList<MethodData>>      _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr,                          boolean isConstructor, SymbolData thisSD)", "diff": ["-    if (enclosingSD.getName().equals(\"NonEmpty\"))", "-      System.err.println(\"Starting search for method \" + methodName + \" in \" + enclosingSD);", "+//    if (enclosingSD.getName().equals(\"NonEmpty\"))", "+//      System.err.println(\"Starting search for method \" + methodName + \" in \" + enclosingSD);", "-      if (md.getName().equals(\"NonEmpty\")) {", "-        System.err.println(\"*** for NonEmpty(), params length = \" + md.getParams().length + \"; args length = \" + arguments.length);", "-      }", "+//      if (md.getName().equals(\"NonEmpty\")) {", "+//        System.err.println(\"*** for NonEmpty(), params length = \" + md.getParams().length + \"; args length = \" + arguments.length);", "+//      }", "-          if (enclosingSD.getName().equals(\"NonEmpty\")) {", "-            System.err.println(\"*** Looking for autoboxing match for NonEmpty\");", "-            System.err.println(\"vds = \" + Arrays.toString(vds) + \" arguments = \" + Arrays.toString(arguments));", "-          }", "+//          if (enclosingSD.getName().equals(\"NonEmpty\")) {", "+//            System.err.println(\"*** Looking for autoboxing match for NonEmpty\");", "+//            System.err.println(\"vds = \" + Arrays.toString(vds) + \" arguments = \" + Arrays.toString(arguments));", "+//          }", "-              System.err.println(\"vds[\" + i + \"].getType().getSymbolData() = \" + parmSD);", "+//              System.err.println(\"vds[\" + i + \"].getType().getSymbolData() = \" + parmSD);", "-              System.err.println(\"arguments[\" + i + \"].getSymbolData() = \" + argSD);", "+//              System.err.println(\"arguments[\" + i + \"].getSymbolData() = \" + argSD);", "-                System.err.println(\"No match found for NonEmpty using autoboxing\");", "+//                System.err.println(\"No match found for NonEmpty using autoboxing\");", "-    if (methodName.equals(\"NonEmpty\")) {", "-      System.err.println(\"***** enclosingSD = \" + enclosingSD + \"; thisSD = \" + thisSD + \"; matching methods: \" + matching);", "-      System.err.println(\"***** matching methods with autoboxing: \" + matchingWithAutoBoxing);", "-    }", "+//    if (methodName.equals(\"NonEmpty\")) {", "+//      System.err.println(\"***** enclosingSD = \" + enclosingSD + \"; thisSD = \" + thisSD + \"; matching methods: \" + matching);", "+//      System.err.println(\"***** matching methods with autoboxing: \" + matchingWithAutoBoxing);", "+//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78280d023358904158c025685bd8a222", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "commitAfterChange": "65fb8db1fb3e7570ae4fa352a26deb0e151b48ac", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public void testCreateConstructor()", "signatureAfterChange": "     public void testCreateConstructor()", "diff": ["-      System.err.println(\"****** Creating constructor for \" + _sd1);", "+//      System.err.println(\"****** Creating constructor for \" + _sd1);", "-      System.err.println(\"****** Before creating Classname constructor, ClassName methods = \" + sd.getMethods());", "-      System.err.println(\"****** Creating constructor for \" + sd);", "+//      System.err.println(\"****** Before creating Classname constructor, ClassName methods = \" + sd.getMethods());", "+//      System.err.println(\"****** Creating constructor for \" + sd);", "-      System.err.println(\"****** After creating constructor, ClassName method = \" + sd.getMethods());", "+//      System.err.println(\"****** After creating constructor, ClassName method = \" + sd.getMethods());", "-      System.err.println(\"****** Generated MethodData: \" + conSD.toBigString());", "-      System.err.println(\"****** Expectred MethodData: \" + md.toBigString());", "+//      System.err.println(\"****** Generated MethodData: \" + conSD.toBigString());", "+//      System.err.println(\"****** Expectred MethodData: \" + md.toBigString());", "-      System.err.println(\"****** Expected params = \" + Arrays.toString(md2.getParams()));", "-      System.err.println(\"****** Results  params = \" + Arrays.toString(conSD.getParams()));", "+//      System.err.println(\"****** Expected params = \" + Arrays.toString(md2.getParams()));", "+//      System.err.println(\"****** Results  params = \" + Arrays.toString(conSD.getParams()));", "-      System.err.println(\"****** Expected vars = \" + md2.getVars());", "-      System.err.println(\"****** Results  vars = \" + conSD.getVars());", "+//      System.err.println(\"****** Expected vars = \" + md2.getVars());", "+//      System.err.println(\"****** Results  vars = \" + conSD.getVars());", "-      System.err.println(\"****** Constructor for Subclass is: \" + conSD.toBigString());", "-      System.err.println(\"****** Expected MethodData is: \" + md2.toBigString());", "+//      System.err.println(\"****** Constructor for Subclass is: \" + conSD.toBigString());", "+//      System.err.println(\"****** Expected MethodData is: \" + md2.toBigString());", "-        System.err.println(\"****** EnclosingData of mVars \" + i + \" = \" + mVars.get(i).getEnclosingData());", "-        System.err.println(\"****** EnclosingData of cVars \" + i + \" = \" + cVars.get(i).getEnclosingData());", "+//        System.err.println(\"****** EnclosingData of mVars \" + i + \" = \" + mVars.get(i).getEnclosingData());", "+//        System.err.println(\"****** EnclosingData of cVars \" + i + \" = \" + cVars.get(i).getEnclosingData());"]}], "num": 726}
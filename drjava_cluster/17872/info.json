{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d95a84418f9d1b405a3315c8d118ec22", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a51efa37ae2ac5ef8ffa868be3e6f6b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "191c3e4b63ea8ecc780014db5fc908a6ccd9ee7a", "commitAfterChange": "e285e40efb875184223641eeb1b7a7e78f7a260b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "    public void testGetSourceRootDefaultPackage()     throws BadLocationException, IOException, InvalidPackageException", "signatureAfterChange": "    public void testGetSourceRootDefaultPackage()     throws BadLocationException, IOException, InvalidPackageException", "diff": ["+    // Get source root (current directory only)", "+    File[] roots = _model.getSourceRootSet();", "+    assertEquals(\"number of source roots\", 1, roots.length);", "+    assertEquals(\"source root (current directory)\", ", "+                 new File(System.getProperty(\"user.dir\")),", "+                 roots[0]);", "+    ", "-    // Get source root", "-    File[] roots = _model.getSourceRootSet();", "-    assertEquals(\"number of source roots\", 1, roots.length);", "-    assertEquals(\"source root\", subdir, roots[0]);", "+    // Get source roots", "+    roots = _model.getSourceRootSet();", "+    assertEquals(\"number of source roots\", 2, roots.length);", "+    assertEquals(\"source root\", subdir, roots[1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20dc3705748654eb4693d4310958dd8a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/BidirectionalHashMapTest.java", "commitBeforeChange": "ccdd78081401c1415d64abb5559c22d2f76d8e74", "commitAfterChange": "6b7e679e8269a9bfeae32a8daf97aa8d6f1c6e51", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testPut()", "signatureAfterChange": "   public void testPut()", "diff": ["-    ", "+", "+    assertEquals(\"Expected size of 0\", 0, myhash.size());", "+", "-    ", "+", "-                 ", "+", "-    ", "+", "-    ", "+", "-    ", "+    assertTrue(\"Map should contain elements\", it.hasNext());", "+", "-    ", "+    assertTrue(\"Map should contain elements\", it.hasNext());", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ed9f6688c55ca11cea2c1f62671ef79", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewJavaClassTest.java", "commitBeforeChange": "6207c0d4b83ee23d6d4624c513f270e47c43cc83", "commitAfterChange": "f4c8eb851d98f4da2479f32fb767dac4b3a40e1c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testClassNameMeetsNamingConventionGoodNames()", "signatureAfterChange": "      public void testcheckSuperClassNameGoodNames()", "diff": ["-  public void testClassNameMeetsNamingConventionGoodNames(){", "-    assertTrue(\"wrong class name\", NewJavaClassDialog.classNameMeetsNamingConvention(\"Abcd\"));", "-    assertTrue(\"wrong class name\", NewJavaClassDialog.classNameMeetsNamingConvention(\"abcd\"));", "-    assertTrue(\"wrong class name\", NewJavaClassDialog.classNameMeetsNamingConvention(\"_abcd\"));", "-    assertTrue(\"wrong class name\", NewJavaClassDialog.classNameMeetsNamingConvention(\" abcd\"));  ", "-    assertTrue(\"wrong class name\", NewJavaClassDialog.classNameMeetsNamingConvention(\" abcd \"));  ", "+  ", "+  public void testcheckSuperClassNameGoodNames(){", "+    assertTrue(\"wrong class name\", NewJavaClassDialog.checkSuperClassName(\"Abcd\"));", "+    assertTrue(\"wrong class name\", NewJavaClassDialog.checkSuperClassName(\"abcd\"));", "+    assertTrue(\"wrong class name\", NewJavaClassDialog.checkSuperClassName(\"_abcd\"));", "+    //if the space is at the beginning or at the end, it will trim it, so, it is good name", "+    assertTrue(\"wrong class name\", NewJavaClassDialog.checkSuperClassName(\" abcd\"));  ", "+    assertTrue(\"wrong class name\", NewJavaClassDialog.checkSuperClassName(\" abcd \"));", "+    assertTrue(\"wrong class name\", NewJavaClassDialog.checkSuperClassName(\" ab.cd \"));", "+    assertTrue(\"wrong class name\", NewJavaClassDialog.checkSuperClassName(\" ab.cd.ef \"));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dcce31daa0f65db23cafb2f2f456def", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ea2763ecde4185a8c33fdd0462c9d12c206c7378", "commitAfterChange": "1ccb0f21abc2aaa138e57bd5c1add5c018ff34ef", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+//    // Try to undo the nested edit", "+//    try {", "+//      _defModel.getUndoManager().undo();", "+//      fail(\"Should not have allowed undoing a nested edit.\");", "+//    }", "+//    catch (CannotUndoException e) {", "+//      // Correct: cannot undo a nested edit", "+//    }", "+//", "+//    try {", "+//      _defModel.getUndoManager().redo();", "+//      fail(\"Should not have allowed redoing a nested edit.\");", "+//    }", "+//    catch (CannotRedoException cre) {", "+//      // Correct: cannot redo a nested edit", "+//    }", "+//    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "845a34c0dca1cc3cc4abdd120738ab1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "58507a81b298eda1c95791a37194e9f75288a8af", "commitAfterChange": "d752877ce93bbc024f3929677c06eafffafcc3e8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private JPanel makeCommandPane()", "signatureAfterChange": "      private JPanel makeCommandPane()", "diff": ["+    panel.add(bottom, BorderLayout.SOUTH);", "+    _insertVarDialog = new InsertVariableDialog(_mainFrame, System.getProperties(), _insertVarDialogMonitor);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942050d1e01dc0e791dda18a01b73e25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/OrderedHashSetTest.java", "commitBeforeChange": "f3c66273d6e4a25b2baea2d938e0f8b9598313de", "commitAfterChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testRemove()", "signatureAfterChange": "      public void testRemove()", "diff": ["-    dToi.clear();", "-    assertEquals(\"Cleared size of 0\", dToi.size(), 0);", "+    Integer i = dToi.remove(1);", "+    assertEquals(\"Deleted element should be int3\", i, int3);", "+    assertEquals(\"Deleted element should be int1\", dToi.remove(0), int1);", "+    assertEquals(\"Resulting size of 0\", dToi.size(), 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce5fe8c156705d144eebd3c5d828d553", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "dc0befa68595a5c499b8803df615b4dd1cb06eb6", "commitAfterChange": "1a1442977dda2bbe384cc0f246999c7f651f6997", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "signatureAfterChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "diff": ["-    model.newFile();", "+    OpenDefinitionsDocument oldDoc = doc;", "+    OpenDefinitionsDocument newDoc = model.newFile();", "+    assertEquals(\"New curr DefPane's document\", newDoc, doc);", "-", "+    assertEquals(\"Next active doc\", oldDoc, model.getActiveDocument());", "+                 "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3c0db1c16f0f8fb466f3a8f2a2f0d45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "e878d558a99af8934972e8a59e74d6047540f2bd", "commitAfterChange": "acb6486cf73ee6fa26fd3913d48fe9f46d7610e4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void testParse()", "signatureAfterChange": "    public void testParse()", "diff": ["-    try { _svo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\"); } ", "+    // parsing this as a vector of strings is okay, because it will treat it", "+    // as a singleton vector", "+    v = _svo.parse(\"{11,22}\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"{11,22}\", v.get(0));    ", "+    ", "+    // but parsing this as a vector of integers will fail", "+    try { _ivo.parse(\"{11,22}\"); fail(\"Should not have parsed this as singleton list.\"); } "]}], "num": 17872}
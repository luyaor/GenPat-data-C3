{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1a8a24eff6d5449bc7aad768555334d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f775ab7c0a4ecbdb816dfdb4befbf8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 254, "signatureBeforeChange": "              public void dumpBounds()", "signatureAfterChange": "          public void appendConstraints()", "diff": ["-      ", "-      public void dumpBounds() {", "-        boolean printedFirst = false;", "-        for (int i = 0; i < _vars.size(); i++) {", "-          VariableType v = _vars.get(i);", "-          Type upper = v.symbol().upperBound();", "-          Type lower = v.symbol().lowerBound();", "-          boolean printUpper = !isEqual(upper, OBJECT) /*&& !isEqual(upper, TOP)*/;", "-          boolean printLower = !isEqual(lower, NULL) /*&& !isEqual(lower, BOTTOM)*/;", "-          if (printUpper || printLower) {", "-            if (printedFirst) { _result.append(\"; \"); }", "-            else { printedFirst = true; }", "-          }", "-          if (printUpper) { ", "-            _result.append(_names.get(v));", "-            _result.append(\" <: \");", "-            TypeWriter.this.run(upper); // may increase the size of _vars", "-          }", "-          if (printLower) {", "-            if (printUpper) { _result.append(\", \"); }", "-            _result.append(_names.get(v));", "-            _result.append(\" :> \");", "-            TypeWriter.this.run(lower); // may increase the size of _vars", "-          }", "-        }", "-      }", "+  ", "+      public void appendConstraints() {", "+        if (!_boundedVars.isEmpty()) {", "+          _result.append(\" [\");", "+          // not using an iterator because the list may grow during iteration", "+          for (int i = 0; i < _boundedVars.size(); i++) {", "+            if (i > 0) { _result.append(\"; \"); }", "+            VariableType v = _boundedVars.get(i);", "+            Type upper = v.symbol().upperBound();", "+            Type lower = v.symbol().lowerBound();", "+            boolean printUpper = !isEqual(upper, OBJECT) /*&& !isEqual(upper, TOP)*/;", "+            boolean printLower = !isEqual(lower, NULL) /*&& !isEqual(lower, BOTTOM)*/;", "+            if (printUpper) {", "+              _result.append(nameForVariable(v));", "+              _result.append(\" <: \");", "+              run(upper); // may increase the size of _vars", "+            }", "+            if (printLower) {", "+              if (printUpper) { _result.append(\", \"); }", "+              _result.append(nameForVariable(v));", "+              _result.append(\" :> \");", "+              run(lower); // may increase the size of _vars", "+            }", "+          }", "+          _result.append(\"]\");", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05115327c212e8fe7909264847565b2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PreemptingClassLoader.java", "commitBeforeChange": "e6763da4d9e1118450dc76cc396410e4a3b0e46a", "commitAfterChange": "9c8a785db081b77d8ac8b9698b67d2973d82d49a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private boolean shouldPreempt(String name)", "signatureAfterChange": "      private boolean shouldPreempt(String name)", "diff": ["-    if (_classNames.contains(name)) { return true; }", "-    int dollar = name.indexOf('$');", "-    while (dollar != -1) {", "-      if (_classNames.contains(name.substring(0, dollar))) { return true; }", "-      dollar = name.indexOf('$', dollar + 1);", "+    // TODO: improve efficiency by using a sorted data structure", "+    for (String p : _prefixes) {", "+      if (name.startsWith(p)) {", "+        if (name.equals(p) || name.startsWith(p + \".\") || name.startsWith(p + \"$\")) {", "+          return true;", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "765fb1f73f675a08b99eed6f4e812f32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classfile/JVMUtilities.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static String createMethodDescriptor(String rt, String[] pt)", "signatureAfterChange": "   public static String createMethodDescriptor(String rt, String[] pts)", "diff": ["+  public static String createMethodDescriptor(String rt, String[] pts) {", "+    if (pts != null) {", "+      StringBuffer result = new StringBuffer(\"(\");", "+      for (String pt: pts) result.append(pt);", "+      return result.append(')').append(rt).toString();  // Note: append operation modifies the receiver!", "+    } ", "+    return rt;", "-   */", "-  public static String createMethodDescriptor(String rt, String[] pt) {", "-    if (pt != null) {", "-      String result = \"(\";", "-      for (int i = 0; i < pt.length; i++) {", "-        result += pt[i];", "-      }", "-      return result + \")\" + rt;", "-    } else {", "-      return rt;", "-    }", "-  }"]}], "num": 9331}
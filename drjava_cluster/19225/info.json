{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "256f00a5833091ea0e142145d5ee941a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e638d988c41d4691573a5957b9aee39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/InnerAllocation.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args)", "signatureAfterChange": "   public InnerAllocation(Expression exp, String cn, Option<List<TypeName>> ctargs, List<? extends Expression> args)", "diff": ["-  public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args) {", "-    this(exp, cn, ctargs, args, SourceInfo.NONE);", "+  public InnerAllocation(Expression exp, String cn, Option<List<TypeName>> ctargs, List<? extends Expression> args) {", "+    this(exp, Option.<List<TypeName>>none(), cn, ctargs, args, SourceInfo.NONE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "651a2b482fa1121bc08ff97288d34eeb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/EmptyRelation.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 16, "signatureBeforeChange": "    public String toString()", "signatureAfterChange": "   public LambdaMap<T2, T1> injectionMap()", "diff": ["-  public String toString() { return \"[]\"; }", "+  public LambdaMap<T1, T2> functionMap() { return EmptyMap.make(); }", "+  public LambdaMap<T2, T1> injectionMap() { return EmptyMap.make(); }"]}], "num": 19225}
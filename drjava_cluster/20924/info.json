{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f16d494518b40c29e84fdd3899ccd15", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54cb82cc9f774c3157be1c1ecc59def3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "172b2d02551aa349912ace36cce3fe3011ec0453", "commitAfterChange": "b05c72360ee1d1e3de71e0b58a923a7cf06bebf6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["-    _replaceFindButton = new JButton(_replaceFindAction);", "+    _replaceFindButton = new JButton(_replaceFindNextAction);", "-    _replaceFindAction.setEnabled(false);", "+    _replaceFindNextAction.setEnabled(false);", "-      public void changedUpdate(DocumentEvent e) { updateHelper(); }", "+      public void changedUpdate(DocumentEvent e) { _updateHelper(); }", "-      public void insertUpdate(DocumentEvent e) { updateHelper(); }", "+      public void insertUpdate(DocumentEvent e) { _updateHelper(); }", "-      public void removeUpdate(DocumentEvent e) { updateHelper(); }", "+      public void removeUpdate(DocumentEvent e) { _updateHelper(); }", "-      private void updateHelper() {", "+      private void _updateHelper() {", "+        updateFirstDocumentInSearch();", "-        _replaceFindAction.setEnabled(false);", "+        _replaceFindNextAction.setEnabled(false);", "-    _findField.addFocusListener(_findEnterListener);", "-    _findField.addFocusListener(_findFieldSwitchFocusListener);", "-    _replaceField.addFocusListener(_replaceFieldSwitchFocusListener);", "-          ", "-    /** Listens for the Ctrl key being pressed and adds a listener for the Enter key. When Ctrl is released, the listener is removed. */", "-    _findField.addKeyListener(new KeyListener() {", "-      public void keyPressed(KeyEvent e) {", "-        if (e.getKeyCode() == KeyEvent.VK_CONTROL)", "-          if (_findField.getKeyListeners().length <= 1 )  _findField.addKeyListener(_newLineEnterListener); ", "-      }", "-      public void keyReleased(KeyEvent e) {", "-        if (e.getKeyCode() == KeyEvent.VK_CONTROL) _findField.removeKeyListener(_newLineEnterListener);", "-      }", "-      public void keyTyped(KeyEvent e) {}", "-    });   ", "+    //Information necessary to change the behavior of the Enter key in the _findField */", "+    final Hashtable<Object, Action> actions = new Hashtable<Object, Action>();", "+    EditorKit ek = _findField.getEditorKit();", "+    Action[] actionsArray = ek.getActions();", "+    ", "+    for (int k = 0; k < actionsArray.length; k++) {", "+      Action a = actionsArray[k];", "+      actions.put(a.getValue(Action.NAME), a);", "+    }", "+    ", "+    Keymap km = _findField.addKeymap(\"Find Field Bindings\",", "+                                         _findField.getKeymap());", "+      ", "+    KeyStroke findKey = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);", "+    km.addActionForKeyStroke(findKey, _findEnterAction); ", "+    ", "+    KeyStroke switchFocusKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0);", "+    km.addActionForKeyStroke(switchFocusKey, _findFieldSwitchFocusAction); ", "+    ", "+    Action newLineAction = actions.get(DefaultEditorKit.insertBreakAction);", "+    KeyStroke newLineKey = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, Event.CTRL_MASK);", "+    km.addActionForKeyStroke(newLineKey, newLineAction); ", "+    ", "+    Action tabAction = actions.get(DefaultEditorKit.insertTabAction);", "+    KeyStroke tabKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.CTRL_MASK);", "+    km.addActionForKeyStroke(tabKey, tabAction); ", "+    _findField.setKeymap(km);", "+", "+  ", "+    Keymap rkm = _replaceField.addKeymap(\"Replace Field Bindings\",", "+                                         _replaceField.getKeymap());", "+      ", "+    rkm.addActionForKeyStroke(switchFocusKey, _replaceFieldSwitchFocusAction); ", "+    rkm.addActionForKeyStroke(tabKey, tabAction); ", "+    _replaceField.setKeymap(rkm);", "+    ", "+    ", "+//    _findField.addFocusListener(_findEnterListener);", "+//    _findField.addFocusListener(_findFieldSwitchFocusListener);", "+//    _replaceField.addFocusListener(_replaceFieldSwitchFocusListener);", "+//          ", "+//    /** Listens for the Ctrl key being pressed and adds a listener for the Enter key. When Ctrl is released, the listener is removed. */", "+//    _findField.addKeyListener(new KeyListener() {", "+//      public void keyPressed(KeyEvent e) {", "+//        if (e.getKeyCode() == KeyEvent.VK_CONTROL)", "+//          if (_findField.getKeyListeners().length <= 1 )  _findField.addKeyListener(_newLineEnterListener); ", "+//      }", "+//      public void keyReleased(KeyEvent e) {", "+//        if (e.getKeyCode() == KeyEvent.VK_CONTROL) _findField.removeKeyListener(_newLineEnterListener);", "+//      }", "+//      public void keyTyped(KeyEvent e) {}", "+//    });   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca20a106685389bef5ee5ab9b467a19d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "e9819bcac9063ccfeb01923546017193945eeda1", "commitAfterChange": "53f486684a6904b9adaecc69971245889bce2d08", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["-    //Change the behavior of the Enter, Tab, and Ctrl-Enter keys in the _findField and _replaeField */", "-    final Hashtable<Object, Action> actions = new Hashtable<Object, Action>();", "-    EditorKit ek = _findField.getEditorKit();", "-    Action[] actionsArray = ek.getActions();", "-    ", "-    for (int k = 0; k < actionsArray.length; k++) {", "-      Action a = actionsArray[k];", "-      actions.put(a.getValue(Action.NAME), a);", "-    }", "-    ", "+    /************** Change behavior of findField ****************/", "+     ", "-//    Action newLineAction = new TextAction(\"NewLine Action\") {", "-//      public void actionPerformed(ActionEvent e) {", "-//        String text = _findField.getText();", "-//        int caretPos = _findField.getCaretPosition();", "-//        String textBeforeCaret = text.substring(0, caretPos);", "-//        String textAfterCaret = text.substring(caretPos);", "-//        _findField.setText(textBeforeCaret.concat(\"\\n\"/*System.getProperty(\"line.separator\")*/).concat(textAfterCaret));", "-//        _findField.setCaretPosition(caretPos+1);", "-//      }", "-//    };", "-    Action newLineAction = new DefaultEditorKit.InsertBreakAction();", "+    Action findNewLineAction = new TextAction(\"NewLine Action\") {", "+      public void actionPerformed(ActionEvent e) {", "+        String text = _findField.getText();", "+        int caretPos = _findField.getCaretPosition();", "+        String textBeforeCaret = text.substring(0, caretPos);", "+        String textAfterCaret = text.substring(caretPos);", "+        _findField.setText(textBeforeCaret.concat(\"\\n\").concat(textAfterCaret));", "+        _findField.setCaretPosition(caretPos+1);", "+      }", "+    };    ", "+//    Action newLineAction = new DefaultEditorKit.InsertBreakAction();", "-    km.addActionForKeyStroke(newLineKey, newLineAction); ", "+    km.addActionForKeyStroke(newLineKey, findNewLineAction); ", "-    Action tabAction = actions.get(DefaultEditorKit.insertTabAction);", "+    Action tabAction = new DefaultEditorKit.InsertTabAction();", "+    ", "+    /************** Change behavior of replaceField ****************/", "-      ", "+    ", "+    Action replaceNewLineAction = new TextAction(\"NewLine Action\") {", "+      public void actionPerformed(ActionEvent e) {", "+        String text = _replaceField.getText();", "+        int caretPos = _replaceField.getCaretPosition();", "+        String textBeforeCaret = text.substring(0, caretPos);", "+        String textAfterCaret = text.substring(caretPos);", "+        _replaceField.setText(textBeforeCaret.concat(\"\\n\").concat(textAfterCaret));", "+        _replaceField.setCaretPosition(caretPos+1);", "+      }", "+    };    ", "+    ", "+    rkm.addActionForKeyStroke(newLineKey, replaceNewLineAction);", "-    ", "-    ", "-//    _findField.addFocusListener(_findEnterListener);", "-//    _findField.addFocusListener(_findFieldSwitchFocusListener);", "-//    _replaceField.addFocusListener(_replaceFieldSwitchFocusListener);", "-//          ", "-//    /** Listens for the Ctrl key being pressed and adds a listener for the Enter key. When Ctrl is released, the listener is removed. */", "-//    _findField.addKeyListener(new KeyListener() {", "-//      public void keyPressed(KeyEvent e) {", "-//        if (e.getKeyCode() == KeyEvent.VK_CONTROL)", "-//          if (_findField.getKeyListeners().length <= 1 )  _findField.addKeyListener(_newLineEnterListener); ", "-//      }", "-//      public void keyReleased(KeyEvent e) {", "-//        if (e.getKeyCode() == KeyEvent.VK_CONTROL) _findField.removeKeyListener(_newLineEnterListener);", "-//      }", "-//      public void keyTyped(KeyEvent e) {}", "-//    });   "]}], "num": 20924}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a0012f457e44abfcda7937f9f6042e1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1249ecba3622744a5e4913b517670df5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "122a4aca1ff92eaf07930221c018670fe18c314a", "commitAfterChange": "ea58ebfcec38aad3c446138f5dc29fb9b0bd55b4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   private void _init(Component owner, File root, boolean allowMultiple, boolean showHidden)", "signatureAfterChange": "   private void _init(Window owner, File root, boolean allowMultiple, boolean showHidden)", "diff": ["-  private void _init(Component owner, File root, boolean allowMultiple, boolean showHidden) {", "+  private void _init(Window owner, File root, boolean allowMultiple, boolean showHidden) {", "+    _owner = owner;", "+    ", "+    _embedded = false;", "-    ", "-    Container cp = getContentPane();", "-    cp.setLayout(new BorderLayout());", "+    ////////////////", "-    cp.add(_northPanel, BorderLayout.NORTH);", "+    ", "-    Border outerBorder = BorderFactory.createEmptyBorder(0,10,0,10);", "-    _scroller.setBorder(BorderFactory.createCompoundBorder(outerBorder,innerBorder));", "-    JPanel spanel = new JPanel(new BorderLayout(5,5));", "-    spanel.add(_scroller);", "-    cp.add(spanel, BorderLayout.CENTER);", "+//    Border outerBorder = BorderFactory.createEmptyBorder(0,10,0,10);", "+//    Border fullBorder = BorderFactory.createCompoundBorder(outerBorder,innerBorder);", "+    _scroller.setBorder(innerBorder);", "-    _approveButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        // If the button was clicked when none were selected, it's an error.", "-        // The error option is default and doesn't need to be set.", "-        _tree.cancelEditing();", "-        if (_tree.getSelectionCount() > 0) {", "-          _finalResult = APPROVE_OPTION;", "-        }", "-        DirectoryChooser.this.setVisible(false);", "-      }", "-    });", "-    getRootPane().setDefaultButton(_approveButton);", "-    _cancelAction = new AbstractAction(_cancelText) {", "-      public void actionPerformed(ActionEvent e) {", "-        _finalResult = CANCEL_OPTION;", "-        _tree.cancelEditing();", "-        DirectoryChooser.this.setVisible(false);", "-      }", "-    };", "-    _cancelButton = new JButton(_cancelAction);", "-    String key = \"dc_cancel\";", "-    getRootPane().getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), key);", "-    getRootPane().getActionMap().put(key, _cancelAction);", "+    _cancelButton = new JButton(_cancelText);", "+    ", "-        launchCreateNewDirectory();", "+        startCreateNewDirectory();", "-    cp.add(_southPanel, BorderLayout.SOUTH);", "-    ", "-    ", "-    this.addWindowListener(new WindowAdapter() {", "-      public void windowClosing(WindowEvent e) {", "-        _finalResult = CANCEL_OPTION;", "-      }", "-    });", "-        _tree.startEditingAtPath(_tree.getSelectionPath());", "+        startRename();", "-        tryToDeletePath(_tree.getSelectionPath());", "+        startDelete();", "-        launchCreateNewDirectory(_tree.getSelectionPath());", "+        startCreateNewDirectory();", "-    setLocationRelativeTo(null);", "-    setSize(330, 400);", "+    this.setLayout(new BorderLayout());", "+    this.add(_scroller, BorderLayout.CENTER);", "+    this.setBackground(Color.blue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ed727e18b62414264bbcbdd14d8ba96", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "signatureAfterChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "diff": ["-    super(frame, \"Compiler Output\");", "-    _model = model;", "+    super(model, frame, \"Compiler Output\");", "-    /*", "-    _showAllButton = new JButton(\"Show all\");", "-    _showAllButton.addActionListener(new ActionListener() {", "-        public void actionPerformed(ActionEvent e) {", "-          _showAllErrors();", "-        }", "-    });", "-", "-    _nextButton = new JButton(\"Next\");", "-    _nextButton.addActionListener(new ActionListener() {", "-        public void actionPerformed(ActionEvent e) {", "-          int index = _errorListPane.getSelectedIndex() + 1;", "-          if (index < _numErrors) {", "-            _errorListPane.switchToError(index);", "-          }", "-        }", "-    });", "-", "-    _previousButton = new JButton(\"Previous\");", "-    _previousButton.addActionListener(new ActionListener() {", "-        public void actionPerformed(ActionEvent e) {", "-          int index = _errorListPane.getSelectedIndex() -1 ;", "-          if (index >= 0) {", "-            _errorListPane.switchToError(index);", "-          }", "-        }", "-    });", "-    */", "-", "-    _errorListPane = new ErrorListPane();", "+    _errorListPane = new CompilerErrorListPane();", "-    _compilerChoiceBox = new JComboBox(_model.getAvailableCompilers());", "+    _compilerChoiceBox = new JComboBox(getModel().getAvailableCompilers());", "-    _compilerChoiceBox.setSelectedItem(_model.getActiveCompiler());", "+    _compilerChoiceBox.setSelectedItem(getModel().getActiveCompiler());", "-          _model.setActiveCompiler(compiler);", "+          getModel().setActiveCompiler(compiler);", "-          _model.setActiveCompiler(NoCompilerAvailable.ONLY);", "+          getModel().setActiveCompiler(NoCompilerAvailable.ONLY);", "-        _model.resetCompilerErrors();", "-        _frame.updateErrorListeners();", "+        getModel().resetCompilerErrors();", "-    // Disable buttons. They don't totally work and who needs em.", "-    /*", "-    JPanel buttonPanel = new JPanel();", "-    buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));", "-    buttonPanel.add(_previousButton);", "-    buttonPanel.add(_nextButton);", "-    // Show all not yet implemented.", "-    // buttonPanel.add(_showAllButton);", "-    add(buttonPanel, BorderLayout.EAST);", "-    */", "-    ", "-        DefinitionsPane lastDefPane = _errorListPane.getLastDefPane();", "+        DefinitionsPane lastDefPane = getErrorListPane().getLastDefPane();", "-          _errorListPane.switchToError(_errorListPane.getSelectedIndex());", "+          getErrorListPane().switchToError(getErrorListPane().getSelectedIndex());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85b54fe040b6c138658480ab0032aa2b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "27c256ec9281e0464172656b15ccb73506c1cbc1", "commitAfterChange": "efe2cdfa860877c37343dbc5d29e380b33344492", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public VectorOptionComponent (VectorOption<File> opt, String text, Frame parent)", "signatureAfterChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, Frame parent)", "diff": ["-  public VectorOptionComponent (VectorOption<File> opt, String text, Frame parent) {", "+   */", "+  public VectorOptionComponent(VectorOption<T> opt, String text, Frame parent) {", "-    _fileFilter = ClasspathFilter.ONLY;", "-    // set up JFileChooser", "-    File workDir = DrJava.getConfig().getSetting(WORKING_DIRECTORY);", "-    if (workDir == FileOption.NULL_FILE) {", "-      workDir = new File( System.getProperty(\"user.dir\"));", "-    }", "-    if (workDir.isFile() && workDir.getParent() != null) {", "-      workDir = workDir.getParentFile();", "-    }", "-    _jfc = new JFileChooser(workDir);", "-    _jfc.setDialogTitle(\"Select\");", "-    _jfc.setApproveButtonText(\"Select\");", "-    _jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);", "-    _jfc.setMultiSelectionEnabled(true);", "-", "-    _addButton = new JButton(\"Add\");", "-    _addButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent ae) {", "-        chooseFile();", "-        _list.setSelectedIndex(_listModel.getSize() - 1);", "-      }", "-    });", "-", "-    _removeButton = new JButton(\"Remove\");", "-    _removeButton.addActionListener(new ActionListener() {", "+    _addButton = new JButton(_getAddAction());", "+    _removeButton = new JButton(new AbstractAction(\"Remove\") {", "-          else", "+          else {", "-        }", "-      }", "-    });", "-", "-    _moveUpButton = new JButton(\"Move Up\");", "-    _moveUpButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent ae) {", "-        if (!_list.isSelectionEmpty()) {", "-          int index = _list.getSelectedIndex();", "-          if (index > 0) {", "-            Object o = _listModel.getElementAt(index);", "-            _listModel.remove(index);", "-            _listModel.add(index - 1, o);", "-            _list.setSelectedIndex(index - 1);", "-    _moveDownButton = new JButton(\"Move Down\");", "-    _moveDownButton.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent ae) {", "-        if (!_list.isSelectionEmpty()) {", "-          int index = _list.getSelectedIndex();", "-          if (index < _listModel.getSize() - 1) {", "-            Object o = _listModel.getElementAt(index);", "-            _listModel.remove(index);", "-            _listModel.add(index + 1, o);", "-            _list.setSelectedIndex(index + 1);", "-          }", "-        }", "-      }", "-    });", "-", "-    JPanel buttons = new JPanel();", "+    _buttonPanel = new JPanel();", "+    _buttonPanel.add(_addButton);", "+    _buttonPanel.add(_removeButton);", "-    buttons.add(_addButton);", "-    buttons.add(_removeButton);", "-    buttons.add(_moveUpButton);", "-    buttons.add(_moveDownButton);", "-    _panel.add(buttons, BorderLayout.SOUTH);", "+    _panel.add(_buttonPanel, BorderLayout.SOUTH);", "+", "+    _listScrollPane.setPreferredSize(new Dimension(0, NUM_ROWS * PIXELS_PER_ROW));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab79e5198a8a9caba1b83254bb73aae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "e99723007606c50032c4a82ba80b9d94aaabe6bc", "commitAfterChange": "958f548f8cc751514e1497672b492b70657c4b6e", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": "    public JPanel _mainDocumentSelector()", "signatureAfterChange": "    public JPanel _mainDocumentSelector()", "diff": ["-    FileChooser chooser = new FileChooser(projRoot);", "+    final FileChooser chooser = new FileChooser(projRoot);", "-    File mainFile = _getMainFile();", "-    if (mainFile != FileOps.NULL_FILE) chooser.setSelectedFile(mainFile);", "+    //String mainClass = _getMainClass();", "+    File   mainFile  = _getMainFile();", "+    if (mainFile != FileOps.NULL_FILE){", "+      chooser.setSelectedFile(mainFile);", "+    }", "-    _mainDocumentSelector = new FileSelectorComponent(this, chooser, 20, 12f) {", "-      protected void _chooseFile() {", "-        _mainFrame.removeModalWindowAdapter(ProjectPropertiesFrame.this);", "-        super._chooseFile();", "-        _mainFrame.installModalWindowAdapter(ProjectPropertiesFrame.this, LambdaUtil.NO_OP, CANCEL);", "+    _mainDocumentSelector = new JTextField(20){", "+      public Dimension getMaximumSize() {", "+        return new Dimension(Short.MAX_VALUE, super.getPreferredSize().height);", "-    _mainDocumentSelector.getFileField().getDocument().addDocumentListener(_applyListener);", "-    return _mainDocumentSelector;", "+    _mainDocumentSelector.setFont(_mainDocumentSelector.getFont().deriveFont(12f));", "+    _mainDocumentSelector.setPreferredSize(new Dimension(22, 22));", "+    ", "+    _mainDocumentSelector.getDocument().addDocumentListener(_applyListener);", "+    ", "+    JButton selectFile = new JButton(\"...\");", "+    selectFile.addActionListener(new ActionListener(){", "+      public void actionPerformed(ActionEvent e){", "+        int ret = chooser.showOpenDialog(ProjectPropertiesFrame.this);", "+        ", "+        if(ret != JFileChooser.APPROVE_OPTION)", "+          return;", "+        ", "+        File mainClass = chooser.getSelectedFile();", "+        ", "+        File sourceRoot = _model.getProjectRoot();", "+        ", "+        if(sourceRoot == null || mainClass == null)", "+          return;", "+        ", "+        String qualifiedName = mainClass.getAbsolutePath().substring(sourceRoot.getAbsolutePath().length());", "+        ", "+        if(qualifiedName.startsWith(\"\"+File.separatorChar))", "+          qualifiedName = qualifiedName.substring(1);", "+        ", "+        if(qualifiedName.toLowerCase().endsWith(\".java\"))", "+          qualifiedName = qualifiedName.substring(0, qualifiedName.length() - 5);", "+          ", "+        _mainDocumentSelector.setText(qualifiedName.replace(File.separatorChar, '.'));", "+      }", "+    });", "+    ", "+    ", "+    selectFile.setMaximumSize(new Dimension(22, 22));", "+    selectFile.setMargin(new Insets(0, 5 ,0, 5));", "+    ", "+    JPanel toRet = new JPanel();", "+    javax.swing.BoxLayout layout = new javax.swing.BoxLayout(toRet, javax.swing.BoxLayout.X_AXIS);", "+    toRet.setLayout(layout);", "+    toRet.add(_mainDocumentSelector);", "+    toRet.add(selectFile);", "+    ", "+    return toRet;"]}], "num": 914}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee8f3b47d379e8f48939c1bdb881b153", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "349e54fcd58eadcec6f4bb8d4f2588cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testSetBuildDirectory() throws MalformedProjectFileException, IOException", "signatureAfterChange": "      public void testSetBuildDirectory() throws MalformedProjectFileException, IOException", "diff": ["-    _model.openProject(_projFile);", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        try { _model.openProject(_projFile); }", "+        catch(Exception e) { throw new UnexpectedException(e); }", "+      } ", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ddd82dfa4907267343aafb5366c7b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["+    ", "-//    System.err.println(\"Build directory is \" + buildDir);", "+//    Utilities.show(\"Running JUnit tests. Build directory is \" + buildDir);", "-    ", "+//    Utilities.show(\"Preparing to synchronize\");", "+//      Utilities.show(\"Finding test classes\");", "-     try {  /** Run the junit test suite that has already been set up on the slave JVM */", "+      try {  /** Run the junit test suite that has already been set up on the slave JVM */", "-        ", "-        // notify listeners that JUnit testing has finally started!", "-//        Utilities.invokeLater(new Runnable() { public void run() { ", "-          _notifier.junitStarted(); ", "-//        } });", "-        ", "-        _jvm.runTestSuite();", "-        ", "+//        System.err.println(\"Spawning test thread\");", "+        new Thread(new Runnable() {", "+          public void run() { ", "+            try {", "+//              Utilities.show(\"Starting JUnit\");", "+              _notifier.junitStarted(); ", "+              _jvm.runTestSuite();", "+            }", "+            catch(RemoteException e) { ", "+              /* System.err.println(\"Caught \" + e); */", "+              throw new UnexpectedException(e); ", "+            }", "+          }", "+        }).start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceb9b3ce6a5f0f837e4712d249aaa3a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "ae4333c8dd1b54b8a781008188f09b6786d95ae2", "commitAfterChange": "a42a1005ad3faca50638e0131df3bc7c45ba82de", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public JPDADebugger(DefaultGlobalModel model)", "signatureAfterChange": "   public JPDADebugger(DefaultGlobalModel model)", "diff": ["+    _watchListener = new DummySingleDisplayModelListener() {", "+      public void interactionEnded() {", "+        try {", "+          _updateWatches();", "+        }", "+        catch (DebugException de) {", "+          throw new UnexpectedException(de);", "+        }", "+      }", "+    };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6baeffec8344061311e35f8e31cc170", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "commitAfterChange": "1a00210ae1e41be9246fee06894f37a248cf99ce", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public void testGotoFileUnderCursorShowDialog() throws IOException", "signatureAfterChange": "   public void testGotoFileUnderCursorShowDialog() throws IOException", "diff": ["-    String goto1_string = \"GotoFileUnderCursor\";", "+    final String goto1_string = \"GotoFileUnderCursor\";", "-    SingleDisplayModel model = _frame.getModel();", "-    model.setActiveDocument(model.getDocumentForFile(goto1_file));", "-    ", "-    assertEquals(\"Document contains the incorrect text\", goto1_string, model.getActiveDocument().getText());", "-    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() {", "+      SingleDisplayModel model = _frame.getModel();", "+      try {", "+        model.setActiveDocument(model.getDocumentForFile(goto1_file));", "+        ", "+        assertEquals(\"Document contains the incorrect text\", goto1_string, model.getActiveDocument().getText());", "+      }", "+      catch(IOException ioe) { throw new UnexpectedException(ioe); }", "+    } });", "+"]}], "num": 2291}
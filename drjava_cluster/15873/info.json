{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6477c7ed18da7b1517cb67e96b843251", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c4a2b94d3d5b647c739b3c97d2570ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 384, "methodNumberAfterChange": 384, "signatureBeforeChange": "\r \r   public void forWhileStatement(WhileStatement that)", "signatureAfterChange": "    public void forWhileStatement(WhileStatement that)", "diff": ["-\r", "-  public void forWhileStatement(WhileStatement that) {\r", "-    forWhileStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCondition().visit(this);\r", "-    that.getCode().visit(this);\r", "-    forWhileStatementOnly(that);\r", "-  }\r", "+", "+  public void forWhileStatement(WhileStatement that) {", "+    forWhileStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCondition().visit(this);", "+    that.getCode().visit(this);", "+    forWhileStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3dfbd2a9c9691a5e7b986f100516a59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 394, "methodNumberAfterChange": 394, "signatureBeforeChange": "\r \r   public void forSynchronizedStatement(SynchronizedStatement that)", "signatureAfterChange": "    public void forSynchronizedStatement(SynchronizedStatement that)", "diff": ["-\r", "-  public void forSynchronizedStatement(SynchronizedStatement that) {\r", "-    forSynchronizedStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLockExpr().visit(this);\r", "-    that.getBlock().visit(this);\r", "-    forSynchronizedStatementOnly(that);\r", "-  }\r", "+", "+  public void forSynchronizedStatement(SynchronizedStatement that) {", "+    forSynchronizedStatementDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLockExpr().visit(this);", "+    that.getBlock().visit(this);", "+    forSynchronizedStatementOnly(that);", "+  }"]}], "num": 15873}
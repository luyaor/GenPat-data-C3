{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de7aeeef39aa429df72fa03b51dc0942", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4907ed9cdcd07ac00b934ce956d4c1bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsController.java", "commitBeforeChange": "684e63a5129d977349573eb45595e3cb9be51496", "commitAfterChange": "9d63ece51633bd296b8befa41ebe70b7a9eca3aa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _updatePreferences()", "signatureAfterChange": "   private void _updatePreferences()", "diff": ["+", "+    // Set the new interpreter JVM arguments", "+    String jvmArgs = store.getString(DrJavaConstants.JVM_ARGS);", "+    if (jvmArgs.equals(\"\") || !called) {", "+      _model.setOptionArgs(jvmArgs);", "+    }", "+    else {", "+      String confirmMessage =", "+        \"Specifying the command-line arguments to the Interactions JVM is an\\n\" +", "+        \"advanced option, and incorrect arguments may cause the Interactions\\n\" +", "+        \"Pane to stop responding. Are you sure you want to set this option?\\n\" +", "+        \"(You must reset the Interactions Pane before changes will take effect.)\";", "+      if (_view.showConfirmDialog(\"Setting JVM Arguments\", confirmMessage)) {", "+        _model.setOptionArgs(jvmArgs);", "+      }", "+      else {", "+        store.setValue(DrJavaConstants.JVM_ARGS, \"\");", "+      }", "+    }", "+    called = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b81fc8acefc14c3aac745832efcacaf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "diff": ["-    getBrowserHistoryManager().clearBrowserRegions();", "-    getBreakpointManager().clearRegions();", "-    getBookmarkManager().clearRegions();", "+", "+    if (! _browserHistoryManager.getRegions().isEmpty()) _browserHistoryManager.clearBrowserRegions();", "+    if (! _breakpointManager.getDocuments().isEmpty()) _breakpointManager.clearRegions();", "+    if (! _bookmarkManager.getDocuments().isEmpty()) _bookmarkManager.clearRegions();", "-      for (final Region bm: ir.getBookmarks()) {", "+      for (Region bm: ir.getBookmarks()) {", "-          final OpenDefinitionsDocument odd = getDocumentForFile(f);", "-          if (getOpenDefinitionsDocuments().contains(odd)) { // bookmark is not stale", "-            final Position startPos = odd.createPosition(bm.getStartOffset());", "-            final Position endPos = odd.createPosition(bm.getEndOffset());", "-            try { getBookmarkManager().addRegion(new DocumentRegion(odd, startPos, endPos)); }", "+          OpenDefinitionsDocument odd = getDocumentForFile(f);", "+          int start = bm.getStartOffset();", "+          int end = bm.getEndOffset();", "+          if (getOpenDefinitionsDocuments().contains(odd) && ", "+              _bookmarkManager.getRegionsOverlapping(odd, start, end).size() == 0) { // bookmark is valid", "+            Position startPos = odd.createPosition(start);", "+            Position endPos = odd.createPosition(end);", "+            try { _bookmarkManager.addRegion(new DocumentRegion(odd, startPos, endPos)); }"]}], "num": 30574}
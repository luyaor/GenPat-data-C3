{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1a6afce7cbe82b13256147079dd1397", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243813a6a9a866fe3ab36eb85341a197", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public CommandLineTest(String name)", "signatureAfterChange": "   public CommandLineTest(String name)", "diff": ["+      f4 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f4.deleteOnExit();", "+      f4_name = f4.getAbsolutePath();", "+      f4_contents = \"abcde\";", "+      FileWriter fw4 = new FileWriter(f4);", "+      fw4.write(f4_contents,0,f4_contents.length());", "+      fw4.close();", "+      f5 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f5.deleteOnExit();", "+      f5_name = f5.getAbsolutePath();", "+      f5_contents = \"fghijklm\";", "+      FileWriter fw5 = new FileWriter(f5);", "+      fw5.write(f5_contents,0,f5_contents.length());", "+      fw5.close();", "+      f6 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f6.deleteOnExit();", "+      f6_name = f6.getAbsolutePath();", "+      f6_contents = \"nopqrstuvwxyz\";", "+      FileWriter fw6 = new FileWriter(f6);", "+      fw6.write(f6_contents,0,f6_contents.length());", "+      fw6.close();", "+      f7 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f7.deleteOnExit();", "+      f7_name = f7.getAbsolutePath();", "+      f7_contents = \"abcde\";", "+      FileWriter fw7 = new FileWriter(f7);", "+      fw7.write(f7_contents,0,f7_contents.length());", "+      fw7.close();", "+      f8 = File.createTempFile(\"DrJava-test\", \".java\");", "+      f8.deleteOnExit();", "+      f8_name = f8.getAbsolutePath();", "+      f8_contents = \"fghijklm\";", "+      FileWriter fw8 = new FileWriter(f8);", "+      fw8.write(f8_contents,0,f8_contents.length());", "+      fw8.close();", "+      nof4 = File.createTempFile(\"DrJava-test\", \".java\");", "+      nof4_name = nof4.getAbsolutePath();", "+      nof4.delete();", "+      nof5 = File.createTempFile(\"DrJava-test\", \".java\");", "+      nof5_name = nof5.getAbsolutePath();", "+      nof5.delete();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e3dcfe4b76bb1406044b18a75e69653", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocumentTest.java", "commitBeforeChange": "26668262ef01a77108768ef35014f0c42dcfcb10", "commitAfterChange": "29c3a48aaad146d1b60a0606bb1625984a770c41", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testIsNum()", "signatureAfterChange": "   public void testIsNum()", "diff": ["-      assertTrue(AbstractDJDocument._isNum(\"0\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"0l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12L\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"00\"));", "-      assertTrue(AbstractDJDocument._isNum(\"01\"));", "-      assertTrue(AbstractDJDocument._isNum(\"012\"));", "-      assertTrue(AbstractDJDocument._isNum(\"00l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"01l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"012l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"00L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"01L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"012L\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"0x0\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x1\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x12\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x0l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x1l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x12l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x0L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x1L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x12L\"));", "-", "-      assertTrue(AbstractDJDocument._isNum(\"1.0\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1.0F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34F\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1.0D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34D\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2F\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"0l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12L\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"00\"));", "+    assertTrue(AbstractDJDocument._isNum(\"01\"));", "+    assertTrue(AbstractDJDocument._isNum(\"012\"));", "+    assertTrue(AbstractDJDocument._isNum(\"00l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"01l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"012l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"00L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"01L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"012L\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"0X0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X1\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X12\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0Xff\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFF\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFFFFFFF\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0XFFFFFFFFF\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0Xg\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X0l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X1l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X12l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0Xffl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFFFFFFFFFFFFFFFl\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0XFFFFFFFFFFFFFFFFFl\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0Xgl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X0L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X1L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X12L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XffL\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFL\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0XgL\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFFFFFFFFFFFFFFFL\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0XFFFFFFFFFFFFFFFFFL\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"0x0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x1\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x12\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xff\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFF\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFFFFFFF\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xFFFFFFFFF\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xg\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x0l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x1l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x12l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xffl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFFFFFFFFFFFFFFFl\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xFFFFFFFFFFFFFFFFFl\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xgl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x0L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x1L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x12L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xffL\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFL\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xgL\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFFFFFFFFFFFFFFFL\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xFFFFFFFFFFFFFFFFFL\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1.0F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34F\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1.0D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34D\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2F\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2D\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dc625f155f7c7027e8ad176fb6bebde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "a7c42e6b408bc2551d30854030021129f731f923", "commitAfterChange": "3d672b118ecc6f4a359a005302c6376fdd753150", "methodNumberBeforeChange": 262, "methodNumberAfterChange": 266, "signatureBeforeChange": "   private void _setUpContextMenus()", "signatureAfterChange": "   private void _setUpContextMenus()", "diff": ["+    _navPanePopupMenuForExternal = new JPopupMenu();", "+    _navPanePopupMenuForExternal.add(_saveAction);", "+    _navPanePopupMenuForExternal.add(_saveAsAction);", "+    _navPanePopupMenuForExternal.add(_revertAction);", "+    _navPanePopupMenuForExternal.addSeparator();", "+    _navPanePopupMenuForExternal.add(_closeAction);", "+    _navPanePopupMenuForExternal.addSeparator();", "+    _navPanePopupMenuForExternal.add(_printAction);", "+    _navPanePopupMenuForExternal.add(_printPreviewAction);", "+    _navPanePopupMenuForExternal.addSeparator();", "+    _navPanePopupMenuForExternal.add(_compileAction);", "+    _navPanePopupMenuForExternal.add(_junitAction);", "+    _navPanePopupMenuForExternal.add(_javadocCurrentAction);", "+    _navPanePopupMenuForExternal.add(_runAction);", "+    _navPanePopupMenuForExternal.addSeparator();", "+    _navPanePopupMenuForExternal.add(_moveToAuxiliaryAction);", "+    ", "+    _navPanePopupMenuForAuxiliary = new JPopupMenu();", "+    _navPanePopupMenuForAuxiliary.add(_saveAction);", "+    _navPanePopupMenuForAuxiliary.add(_saveAsAction);", "+    _navPanePopupMenuForAuxiliary.add(_revertAction);", "+    _navPanePopupMenuForAuxiliary.addSeparator();", "+    _navPanePopupMenuForAuxiliary.add(_closeAction);", "+    _navPanePopupMenuForAuxiliary.addSeparator();", "+    _navPanePopupMenuForAuxiliary.add(_printAction);", "+    _navPanePopupMenuForAuxiliary.add(_printPreviewAction);", "+    _navPanePopupMenuForAuxiliary.addSeparator();", "+    _navPanePopupMenuForAuxiliary.add(_compileAction);", "+    _navPanePopupMenuForAuxiliary.add(_junitAction);", "+    _navPanePopupMenuForAuxiliary.add(_javadocCurrentAction);", "+    _navPanePopupMenuForAuxiliary.add(_runAction);", "+    _navPanePopupMenuForAuxiliary.addSeparator();", "+    _navPanePopupMenuForAuxiliary.add(_removeAuxiliaryAction);", "-            _navPanePopupMenu.show(e.getComponent(), e.getX(), e.getY());", "+            try{", "+              String groupName = _model.getDocumentNavigator().getNameOfSelectedTopLevelGroup();", "+              if(groupName == \"[ Source Files ]\"){", "+                _navPanePopupMenu.show(e.getComponent(), e.getX(), e.getY());", "+              }else if(groupName == \"[ External Files ]\"){", "+                INavigatorItem n = _model.getDocumentNavigator().getCurrentSelectedLeaf();", "+                if(n == null){", "+                  // false alarm, a document is not really selected...", "+                }else{", "+                  OpenDefinitionsDocument d = _model.getODDGivenIDoc(n);", "+                  if(d.isUntitled()){", "+                    _navPanePopupMenu.show(e.getComponent(), e.getX(), e.getY());", "+                  }else{", "+                    _navPanePopupMenuForExternal.show(e.getComponent(), e.getX(), e.getY());", "+                  }", "+                }", "+              }else if(groupName == \"[ Auxiliary Files ]\"){", "+                _navPanePopupMenuForAuxiliary.show(e.getComponent(), e.getX(), e.getY());", "+              }", "+            }catch(GroupNotSelectedException ex){", "+              // noop", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e040024654024595a32ef342a7008a90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "0010b17f7e497304215b54fd325dae9e3e72e53d", "commitAfterChange": "ea3e6424f15db4c84a4f6218d2ea0c54fb67dfd7", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["+    // 1", "+    ", "+    ", "+    // 2", "+    ", "+    String commented = ", "+      \"// public class foo {\\n\" +", "+      \"//   int bar;\\n\" +", "+      \"// }\";", "+    ", "+    // Start a compound edit and verify the returned key", "+    key = _defModel.getUndoManager().startCompoundEdit();", "+    assertEquals(\"Should have returned the correct key.\", 2, key);", "+    ", "+    // Insert a test string into the document", "+    _defModel.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // End the outer compound edit trigger a second compound edit", "+    _defModel.getUndoManager().endCompoundEdit(key);", "+    _defModel.commentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have commented correctly.\", commented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Undo the second compound edit", "+    _defModel.getUndoManager().undo();", "+    assertEquals(\"Should have undone the commenting.\", indented,", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Undo the first compound edit", "+    _defModel.getUndoManager().undo();", "+    assertEquals(\"Should have undone the indenting and inserting.\", \"\",", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // 3    ", "+    ", "+    // Start a compound edit and verify the returned key", "+    key = _defModel.getUndoManager().startCompoundEdit();", "+    assertEquals(\"Should have returned the correct key.\", 5, key);", "+    ", "+    // Insert a test string into the document", "+    _defModel.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Try to undo the nested edit", "+    try {", "+      _defModel.getUndoManager().undo();", "+      fail(\"Should not have allowed undoing a nested edit.\");", "+    }", "+    catch (CannotUndoException e) {", "+      // Correct: cannot undo a nested edit", "+    }", "+    ", "+    // Try end the compound edit with a wrong key", "+    try {", "+      _defModel.getUndoManager().endCompoundEdit(key + 1);", "+      fail(\"Should not have allowed ending a compound edit with a wrong key.\");", "+    }", "+    catch (IllegalStateException e) {", "+      assertEquals(\"Should have printed the correct error message.\", ", "+                   \"Improperly nested compound edits.\", e.getMessage());", "+    }", "+    ", "+    // End the compound edit and undo", "+    _defModel.getUndoManager().endCompoundEdit(key);", "+    _defModel.getUndoManager().undo();", "+    assertEquals(\"Should have undone the indenting and inserting.\", \"\",", "+                 _defModel.getText(0, _defModel.getLength()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb922a53e4639763c024e1ba719a3d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "3c45024cce34a3ee10682b132490494920e9d45a", "commitAfterChange": "66e5a8936ddc9a6a54b90689df97ecc4178fb4cc", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   private void _updateWatches()", "signatureAfterChange": "   private void _updateWatches()", "diff": ["-      String val = _model.getInteractionsModel().getVariableToString(w.getName());", "+      String name = w.getName();", "+      String val = \"\";", "+      String type = \"\";", "+      ArrayList <Integer>arr_index = new ArrayList<Integer>();", "+      ", "+      if(name.indexOf(\"[\")!=-1 && name.indexOf(\"]\")!=-1) {", "+        name = name.substring(0, name.indexOf(\"[\"));", "+        arr_index.add(Integer.parseInt(w.getName().substring(w.getName().indexOf(\"[\")+1, w.getName().indexOf(\"]\"))));      ", "+        if(w.getName().indexOf(\"]\")<(w.getName().length()-1)) {", "+          String iter = w.getName().substring(w.getName().indexOf(\"]\")+1, w.getName().length());", "+          while(iter.indexOf(\"[\")!=-1 && iter.indexOf(\"]\")!=-1) {", "+            arr_index.add(Integer.parseInt(iter.substring(iter.indexOf(\"[\")+1, iter.indexOf(\"]\"))));      ", "+            if(iter.indexOf(\"]\")<(iter.length()-1))", "+              iter = iter.substring(iter.indexOf(\"]\")+1, iter.length());", "+            else ", "+              iter = \"\";", "+          }", "+        }", "+      }", "+     ", "+      if(!arr_index.isEmpty())  {", "+        int [] indices = new int[arr_index.size()];", "+        for (int i = 0; i < arr_index.size(); i++) {", "+          indices[i] = (Integer)arr_index.get(i);", "+        }", "+        val = _model.getInteractionsModel().getVariableToString(name, indices);", "+        type = _model.getInteractionsModel().getVariableType(name, indices);", "+      }", "+      else {", "+        val = _model.getInteractionsModel().getVariableToString(name);", "+        type = _model.getInteractionsModel().getVariableType(name);", "+      }", "+      ", "-      String type = _model.getInteractionsModel().getVariableType(w.getName());"]}], "num": 3130}
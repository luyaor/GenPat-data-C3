{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f18a3eff93389829da8badd9fbe48523", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280f75f202bc0d089b21a40a33a923f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "8907059ef43f15e7b338686159e3333fd997b238", "commitAfterChange": "191c3e4b63ea8ecc780014db5fc908a6ccd9ee7a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": "      public void setMachine(DefinitionsPane defPane)", "signatureAfterChange": "   private void _updateMachine()", "diff": ["-  ", "-  public void setMachine(DefinitionsPane defPane) {", "-    _defPane = defPane;", "-    OpenDefinitionsDocument doc = defPane.getOpenDocument();", "-    _machine = doc.createFindReplaceMachine();", "+   // caret has been changed", "+  private void _updateMachine() {", "+    if (_caretChanged) {", "+      OpenDefinitionsDocument doc = _model.getActiveDocument();", "+      _machine.setDocument(doc.getDocument());", "+      _machine.setStart(doc.getDocument().getCurrentLocation());", "+      _machine.setPosition(doc.getDocument().getCurrentLocation());", "+      _caretChanged = false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44286b6f8128a85d171532f6fe8a922d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void interpret(final String s)", "signatureAfterChange": "   public void interpret(final String s)", "diff": ["-    //  (will receive result in the interpretResult(...) method)", "-      _log.log(this + \".interpret(\" + s + \")\");", "+      debug.logStart(\"Interpreting \" + s);", "-      slave.interpret(s);", "+      InterpretResult result = slave.interpret(s);", "+      debug.logEnd();", "+      debug.logValue(\"result\", result);", "+      result.apply(getResultHandler());", "-    catch (java.rmi.UnmarshalException ume) {", "-      // Could not receive result from interpret; system probably exited.", "-      // We will silently fail and let the interpreter restart.", "-      _log.log(this + \".interpret threw UnmarshalException, so interpreter is dead:\\n\" + ume);", "+    catch (UnmarshalException ume) {", "+      debug.logEnd();", "+      Throwable cause = ume.getCause();", "+      if (cause != null && cause instanceof EOFException) {", "+        // Interpreter JVM has disappeared (perhaps reset); just ignore error and wait", "+        // for reset.", "+      }", "+      else { _threwException(ume); }", "-    catch (RemoteException re) { _threwException(re); }", "+    catch (RemoteException re) { debug.logEnd(); _threwException(re); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5efa94cc7405272ede2f99d49af2e448", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "f8e4975fc86eccfc2e1e190be55c64d1a287745a", "commitAfterChange": "1b5ef0eebd43a246e897081eb432b396efa2d20e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public synchronized static void main(String[] args)", "signatureAfterChange": "   public synchronized static void main(String[] args)", "diff": ["+    debug.logStart();", "+      debug.logValue(\"masterRemote\", masterRemote);", "+      ", "+      debug.log();", "+        debug.logValue(\"slave\", slave);", "-//        _log.log(\"Slave JVM exporting \" + slave + \" to RMI\");", "-        _log.log(\"SlaveJVMRunner exported stub \" + slaveRemote);", "-", "+        debug.logValue(\"slaveRemote\", slaveRemote);", "+        ", "-//        _log.log(\"Slave JVM invoking the method \" + slave + \".start(\" + masterRemote + \")\");", "-        _log.log(\"SlaveJVMRunner invoking the method registerSlave(\" + slave + \") in the Master JVM\");", "+        ", "+        debug.logStart(\"invoking masterRemote.registerSlave\");", "+        debug.logEnd();", "-      catch (Exception e) {", "+      catch (Throwable e) {", "+        debug.log(e);", "+          // TODO: these logging messages (to the default popup log) are breaking InteractionsDJDocumentTest.  Why?", "+          //error.log(re);", "+          //error.log(e);", "-    catch (Exception e) { // IOException, ClassNotFoundException", "+    catch (Throwable e) { // IOException, ClassNotFoundException", "+      // TODO: these logging messages (to the default popup log) are breaking InteractionsDJDocumentTest.  Why?", "+      //error.log(e);", "+    finally { debug.logEnd(); }"]}], "num": 17459}
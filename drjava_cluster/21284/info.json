{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7147a52d0d6f921334964892c212ffe7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "839881196b5e7795b5c57e5184980af7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "cf1b07a5f122d4faa57c9cb7ed7def1489ba2183", "commitAfterChange": "cf133e63dac33b490f37f86f2c16723ac73d3ddb", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public String getClasspathString()", "signatureAfterChange": "   public ClasspathVector getClasspath()", "diff": ["-  public String getClasspathString() {", "-    StringBuffer cp = new StringBuffer();", "+  public ClasspathVector getClasspath() {", "+    ClasspathVector ret = new ClasspathVector();", "+    List<ClasspathEntry> locpe;", "-    appendAllClasspaths(classpathManager.getProjectCP(),        cp);", "-    appendAllClasspaths(classpathManager.getBuildDirectoryCP(), cp);", "-    appendAllClasspaths(classpathManager.getProjectFilesCP(),   cp);", "-    appendAllClasspaths(classpathManager.getExternalFilesCP(),  cp);", "-    appendAllClasspaths(classpathManager.getExtraCP(),          cp);", "-    ", "-    // append system path last", "-    cp.append(System.getProperty(\"java.class.path\"));", "+    locpe = classpathManager.getProjectCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "-    return cp.toString();", "-  }", "+    locpe = classpathManager.getBuildDirectoryCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    ", "+    locpe = classpathManager.getProjectFilesCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    ", "+    locpe = classpathManager.getExternalFilesCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    ", "+    locpe = classpathManager.getExtraCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    ", "+    return ret;", "+  } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c57b1541afc7ee90bec515a43df9653b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public ClasspathVector getClasspath()", "signatureAfterChange": "   public ClassPathVector getClassPath()", "diff": ["-  public ClasspathVector getClasspath() {", "-    ClasspathVector ret = new ClasspathVector();", "-    List<ClasspathEntry> locpe;", "+  public ClassPathVector getClassPath() {", "+    ClassPathVector ret = new ClassPathVector();", "+    List<ClassPathEntry> locpe;", "-    locpe = classpathManager.getProjectCP();", "-    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    locpe = classPathManager.getProjectCP();", "+    for (ClassPathEntry e: locpe) ret.add(e.getEntry());", "-    locpe = classpathManager.getBuildDirectoryCP();", "-    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    locpe = classPathManager.getBuildDirectoryCP();", "+    for (ClassPathEntry e: locpe) ret.add(e.getEntry());", "-    locpe = classpathManager.getProjectFilesCP();", "-    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    locpe = classPathManager.getProjectFilesCP();", "+    for (ClassPathEntry e: locpe) ret.add(e.getEntry());", "-    locpe = classpathManager.getExternalFilesCP();", "-    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    locpe = classPathManager.getExternalFilesCP();", "+    for (ClassPathEntry e: locpe) ret.add(e.getEntry());", "-    locpe = classpathManager.getExtraCP();", "-    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    locpe = classPathManager.getExtraCP();", "+    for (ClassPathEntry e: locpe) ret.add(e.getEntry());"]}], "num": 21284}
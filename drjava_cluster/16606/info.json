{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbeae052e6a0132d233238e8d930fe2e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b219935cd5e606ef37798f55b51c5be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "97f4d18b1b96ab5f6fef892b2420a830c7869018", "commitAfterChange": "4cff41266c06ea238f993f3d8dac322323994e85", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 89, "signatureBeforeChange": "   public static String replaceVariables(String str, Hashtable<Object, Object> table)", "signatureAfterChange": "   public static String replaceVariables(String str, Map<String,Properties> props)", "diff": ["-  public static String replaceVariables(String str, Hashtable<Object, Object> table) {", "-    int pos = str.indexOf('%');", "-    // find every %", "+  public static String replaceVariables(String str, Map<String,Properties> props) {", "+    int pos = str.indexOf(\"${\");", "+    int bsPos = str.indexOf('\\\\');", "+    if ((bsPos!=-1) && (bsPos<pos)) { pos = bsPos; }", "+    // find every ${", "-      // see if this is an escaped % (\"%%\")", "-      // LOG.log(\"str = '\"+str+\"'\");", "-      // LOG.log(\"pos = \"+pos);", "-      if((pos<str.length()-1) && (str.charAt(pos+1)=='%')) {", "-        // skip the second % as well", "-        // LOG.log(\"\\t%%\");", "-        str = str.substring(0, pos+1) + str.substring(pos+2);", "+      // LOG.log(\"str = '\"+str+\"', pos = \"+pos);", "+      // see if this is an escaped \\ (\\\\)", "+      if ((str.charAt(pos)=='\\\\') &&", "+          (pos<str.length()-1) &&", "+          (str.charAt(pos+1)=='\\\\')) {", "+        // change the \\\\ into a single \\", "+        // LOG.log(\"\\t\\\\\\\\\");", "+        str = str.substring(0, pos) + str.substring(pos+1);", "-      else {", "-        // LOG.log(\"\\t%\");", "-        // look if this is str property name enclosed by %, e.g. \"%user.home%\"", "-        for(Object o: table.keySet()) {", "-          String key = o.toString();", "-          int endPos = pos + key.length() + 2;", "-          if (str.substring(pos, Math.min(str.length(), endPos)).equals(\"%\"+key+\"%\")) {", "-            // found property name", "-            // replace \"%property.name%\" with the value of the property, e.g. /home/user", "-            String value = table.get(key).toString();", "-            str = str.substring(0, pos) + value + str.substring(endPos);", "-            // advance to the last character of the value", "-            pos = pos + value.length() - 1;", "-            break;", "+      // see if this is an escaped $ (\\$)", "+      else if ((str.charAt(pos)=='\\\\') &&", "+               (pos<str.length()-1) &&", "+               (str.charAt(pos+1)=='$')) {", "+        // change the \\$ into a single $", "+        // LOG.log(\"\\t\\\\$\");", "+        str = str.substring(0, pos) + str.substring(pos+1);", "+        // and skip", "+        ++pos;", "+      }", "+      else if (str.charAt(pos)=='$') {", "+        // LOG.log(\"\\t$\");", "+        // look if this is str property name enclosed by ${...}, e.g. \"${user.home}\"", "+        for(Map.Entry<String, Properties> table: props.entrySet()) {", "+          Enumeration<?> e = table.getValue().propertyNames();", "+          while(e.hasMoreElements()) {", "+            String key = (String)e.nextElement();", "+            int endPos = pos + key.length() + 3;", "+            if (str.substring(pos, Math.min(str.length(), endPos)).equals(\"${\"+key+\"}\")) {", "+              // found property name", "+              // replace \"${property.name}\" with the value of the property, e.g. /home/user", "+              String value = table.getValue().getProperty(key);", "+              str = str.substring(0, pos) + value + str.substring(endPos);", "+              // advance to the last character of the value", "+              pos = pos + value.length() - 1;", "+              break;", "+            }", "-      pos = str.toLowerCase().indexOf('%', pos+1);", "+      pos = str.indexOf(\"${\", pos+1);", "+      bsPos = str.indexOf(\"\\\\\\\\\", pos+1);", "+      if ((bsPos!=-1) && (bsPos<pos)) { pos = bsPos; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "365e508ad9ba42b179fd1cfd4edff196", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "97f4d18b1b96ab5f6fef892b2420a830c7869018", "commitAfterChange": "4cff41266c06ea238f993f3d8dac322323994e85", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   protected void colorVariables(final JTextPane pane,                                 final DocumentListener dl,                                 final Properties props,                                 final SimpleAttributeSet normal,                                 final SimpleAttributeSet variable,                                 final SimpleAttributeSet error)", "signatureAfterChange": "   protected void colorVariables(final JTextPane pane,                                 final DocumentListener dl,                                 final SimpleAttributeSet normal,                                 final SimpleAttributeSet variable,                                 final SimpleAttributeSet error)", "diff": ["-                                final Properties props,", "-        String jvmtext = pane.getText();", "-        doc.setCharacterAttributes(0,jvmtext.length(),normal,true);", "+        String str = pane.getText();", "+        doc.setCharacterAttributes(0,str.length(),normal,true);", "+//          int pos = str.indexOf(\"${\");", "+//          int bsPos = str.indexOf(\"\\\\\\\\\");", "+//          if ((bsPos!=-1) && (bsPos<pos)) { pos = bsPos; }", "-          int styleIndex = 0; // style to use", "-          // LOG.log(jvmtext);", "-          while((pos=jvmtext.indexOf('%', pos))>=0) {", "+          // LOG.log(str);", "+          while(pos>=0) {", "-            if ((pos<jvmtext.length()-1) && (jvmtext.charAt(pos+1)=='%')) {", "-              // escaped % (\"%%\")", "+            // see if this is an escaped \\ (\\\\)", "+            if ((str.charAt(pos)=='\\\\') &&", "+                (pos<str.length()-1) &&", "+                (str.charAt(pos+1)=='\\\\')) {", "+              doc.setCharacterAttributes(pos,pos+1,normal,true);", "-            else {", "-              // beginning of what should be a %variable%", "+            else if ((str.charAt(pos)=='\\\\') &&", "+                     (pos<str.length()-1) &&", "+                     (str.charAt(pos+1)=='$')) {", "+              // escaped $ (\\$)", "+              doc.setCharacterAttributes(pos,pos+1,normal,true);", "+              pos += 2;", "+            }", "+            else if ((str.charAt(pos)=='$') &&", "+                     (pos<str.length()-1) &&", "+                     (str.charAt(pos+1)=='{')) {", "+              // beginning of what should be a ${variable}", "-              for(Object o: props.keySet()) {", "-                String key = o.toString();", "-                int endPos = pos + key.length() + 2;", "-                if (jvmtext.substring(pos, Math.min(jvmtext.length(), endPos)).equals(\"%\"+key+\"%\")) {", "-                  // found property name", "-                  found = true;", "-                  doc.setCharacterAttributes(pos,endPos-pos,variable,true);", "-                  pos = endPos;", "-                  break;", "+              for(Map.Entry<String, Properties> table: _props.entrySet()) {", "+                Enumeration<?> e = table.getValue().propertyNames();", "+                while(e.hasMoreElements()) {", "+                  String key = (String)e.nextElement();", "+                  int endPos = pos + key.length() + 3;", "+                  if (str.substring(pos, Math.min(str.length(), endPos)).equals(\"${\"+key+\"}\")) {", "+                    // found property name", "+                    found = true;", "+                    doc.setCharacterAttributes(pos,endPos-pos,variable,true);", "+                    pos = endPos;", "+                    break;", "+                  }", "-                doc.setCharacterAttributes(pos,1,error,true);", "-                ++pos;", "+                int closePos = str.indexOf('}', pos);", "+                if (closePos!=-1) {", "+                  doc.setCharacterAttributes(pos,closePos-pos+1,error,true);", "+                  pos = closePos+1;", "+                }", "+                else {", "+                  doc.setCharacterAttributes(pos,1,error,true);", "+                  ++pos;", "+                }", "+            }", "+            else {", "+              doc.setCharacterAttributes(pos,1,normal,true);", "+              ++pos;"]}], "num": 16606}
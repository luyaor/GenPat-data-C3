{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b6535ab655b2b1b6ce233d94ea64a32", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9bee59ee9130cfc8718ad40aaf85792", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "c1d8815fb3e924ec7fa72ebc3952fb83e44bb272", "commitAfterChange": "60be4eb231fc019d2cba3c47b5641b055be5dd90", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public Class visit(DivideExpression node)", "signatureAfterChange": "   public Class visit(DivideExpression node)", "diff": ["-", "-    // Compute the expression if it is constant", "-    if (ln.hasProperty(NodeProperties.VALUE) &&", "-        rn.hasProperty(NodeProperties.VALUE)) {", "-      node.setProperty", "-        (NodeProperties.VALUE,", "-         InterpreterUtilities.divide(c,", "-                                     ln.getProperty(NodeProperties.VALUE),", "-                                     rn.getProperty(NodeProperties.VALUE)));", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae4352f349600aaf73b3f7023087add1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "c1d8815fb3e924ec7fa72ebc3952fb83e44bb272", "commitAfterChange": "60be4eb231fc019d2cba3c47b5641b055be5dd90", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public Class visit(RemainderExpression node)", "signatureAfterChange": "   public Class visit(RemainderExpression node)", "diff": ["+   */", "+  public Class visit(RemainderExpression node) {", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ln.acceptVisitor(this);", "+    rn.acceptVisitor(this);", "+    Class c = visitNumericExpression(node, \"remainder.type\");", "+    return c;", "+  }", "-   */", "-  public Class visit(RemainderExpression node) {", "-    Node  ln = node.getLeftExpression();", "-    Node  rn = node.getRightExpression();", "-    ln.acceptVisitor(this);", "-    rn.acceptVisitor(this);", "-    Class c = visitNumericExpression(node, \"remainder.type\");", "-", "-    // Compute the expression if it is constant", "-    if (ln.hasProperty(NodeProperties.VALUE) &&", "-        rn.hasProperty(NodeProperties.VALUE)) {", "-      node.setProperty", "-        (NodeProperties.VALUE,", "-         InterpreterUtilities.remainder(c,", "-                                        ln.getProperty(NodeProperties.VALUE),", "-                                        rn.getProperty(NodeProperties.VALUE)));", "-    }", "-    return c;", "-  }"]}], "num": 8830}
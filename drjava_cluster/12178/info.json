{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9a9b275d2b7e9517ec314fada21c92a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bf7bfaadcebab79b1885e64d3f20e7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result)", "diff": ["-   */\r", "-  public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result) {\r", "-    if (value_result==null) {return null;}\r", "-    \r", "-    //make sure that lhs could be resolved (not PackageData)\r", "-    if (!assertFound(value_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    if (assertInstanceType(value_result, \"You cannot use a numeric unary operator (+, -) with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&\r", "-        !value_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-      \r", "-      _addError(\"You cannot apply this unary operator to something of type \" + value_result.getName() + \".  You can only apply it to a numeric type such as double, int, or char\", that);\r", "-      return value_result;\r", "-    }\r", "-    \r", "-    //call this so that chars and bytes are widened to an int.\r", "-    return _getLeastRestrictiveType(value_result.getSymbolData(), SymbolData.INT_TYPE).getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result) {", "+    if (value_result==null) {return null;}", "+    ", "+    //make sure that lhs could be resolved (not PackageData)", "+    if (!assertFound(value_result, that)) {", "+      return null;", "+    }", "+    ", "+    if (assertInstanceType(value_result, \"You cannot use a numeric unary operator (+, -) with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&", "+        !value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+      ", "+      _addError(\"You cannot apply this unary operator to something of type \" + value_result.getName() + \".  You can only apply it to a numeric type such as double, int, or char\", that);", "+      return value_result;", "+    }", "+    ", "+    //call this so that chars and bytes are widened to an int.", "+    return _getLeastRestrictiveType(value_result.getSymbolData(), SymbolData.INT_TYPE).getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef439dba309be0a74386d71d23546f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result)", "diff": ["-   */\r", "-  public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result) {\r", "-    if (value_result == null) {return null;}\r", "- \r", "-    //make sure that lhs could be resolved (not PackageData)\r", "-    if (!assertFound(value_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    if (assertInstanceType(value_result, \"You cannot increment or decrement \" + value_result.getName() + \", because it is a class name not an instance\", that)) {\r", "-      if (!value_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-        _addError(\"You cannot increment or decrement something that is not a number type.  You have specified something of type \" + value_result.getName(), that);\r", "-      }\r", "-    }\r", "-    return value_result.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result) {", "+    if (value_result == null) {return null;}", "+ ", "+    //make sure that lhs could be resolved (not PackageData)", "+    if (!assertFound(value_result, that)) {", "+      return null;", "+    }", "+    ", "+    if (assertInstanceType(value_result, \"You cannot increment or decrement \" + value_result.getName() + \", because it is a class name not an instance\", that)) {", "+      if (!value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"You cannot increment or decrement something that is not a number type.  You have specified something of type \" + value_result.getName(), that);", "+      }", "+    }", "+    return value_result.getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b6fd0ff3331de7703fa0ec2609867f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r   public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result)", "diff": ["-   */\r", "-  public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result) {\r", "-    if (value_result == null) {return null;}\r", "-    \r", "-    //make sure that lhs could be resolved (not PackageData)\r", "-    if (!assertFound(value_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    if (assertInstanceType(value_result, \"You cannot use the not (!) operator with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&\r", "-        !value_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, _targetVersion)) {\r", "-      \r", "-      _addError(\"You cannot use the not (!) operator with something of type \" + value_result.getName() + \". Instead, it should be used with an expression of boolean type\", that);\r", "-    }\r", "-    \r", "-    return SymbolData.BOOLEAN_TYPE.getInstanceData(); //it should always be a boolean type.\r", "-    \r", "-  }\r", "+   */", "+  public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result) {", "+    if (value_result == null) {return null;}", "+    ", "+    //make sure that lhs could be resolved (not PackageData)", "+    if (!assertFound(value_result, that)) {", "+      return null;", "+    }", "+    ", "+    if (assertInstanceType(value_result, \"You cannot use the not (!) operator with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&", "+        !value_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+      ", "+      _addError(\"You cannot use the not (!) operator with something of type \" + value_result.getName() + \". Instead, it should be used with an expression of boolean type\", that);", "+    }", "+    ", "+    return SymbolData.BOOLEAN_TYPE.getInstanceData(); //it should always be a boolean type.", "+    ", "+  }"]}], "num": 12178}
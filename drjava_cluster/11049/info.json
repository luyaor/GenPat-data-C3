{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a51f4867ea742a619e2c25bfc26f0529", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aecc7c0a5c4d0bf975ae34d6498f7b0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 134, "signatureBeforeChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "signatureAfterChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "diff": ["-    for (Pair<Type, Type> pair : IterUtil.zip(IterUtil.map(args, NORMALIZE), IterUtil.map(params, NORMALIZE))) {", "+    NormSubtyper sub = new NormSubtyper();", "+    Normalizer norm = new Normalizer(sub);", "+    for (Pair<Type, Type> pair : IterUtil.zip(IterUtil.map(args, norm), IterUtil.map(params, norm))) {", "-      constraints = constraints.and(inf.supertypeNorm(NORMALIZE.value(expected.unwrap()), NORMALIZE.value(returned)));", "+      constraints = constraints.and(inf.supertypeNorm(norm.value(expected.unwrap()), norm.value(returned)));", "-        cf = cf.and(inf.subtypeNorm(s.lowerBound(param), NORMALIZE.value(param.symbol().upperBound())));", "+        cf = cf.and(inf.subtypeNorm(s.lowerBound(param), norm.value(param.symbol().upperBound())));", "-        cf = cf.and(inf.supertypeNorm(s.upperBound(param), NORMALIZE.value(param.symbol().lowerBound())));", "+        cf = cf.and(inf.supertypeNorm(s.upperBound(param), norm.value(param.symbol().lowerBound())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5274779265e00a7e90cf7b9ad58d394", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJavaRoot.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] _filesToOpen)", "signatureAfterChange": "      public static void main(final String[] filesToOpen)", "diff": ["-", "-  public static void main(String[] _filesToOpen) {", "+  ", "+  public static void main(final String[] filesToOpen) {", "-    boolean _showDebugConsole = false;", "-    int len = _filesToOpen.length;", "-    if (len > 0 && _filesToOpen[len - 1] == System.getProperty(\"path.separator\")) {", "-      _showDebugConsole = true;", "+    boolean debugConsole = false;", "+    int len = filesToOpen.length;", "+    if (len > 0 && filesToOpen[len - 1] == System.getProperty(\"path.separator\")) {", "+      debugConsole = true;", "+    ", "+    final int numFiles = len;", "+    final boolean showDebugConsole = debugConsole;", "-    // files to open held in _filesToOpen[0:len] which may be an initial segment of _filesToOpen", "-    try {", "-      String configLAFName = DrJava.getConfig().getSetting(LOOK_AND_FEEL);", "-      String currLAFName = UIManager.getLookAndFeel().getClass().getName();", "-      if (! configLAFName.equals(currLAFName)) UIManager.setLookAndFeel(configLAFName);", "-      ", "-      // The MainFrame *must* be constructed after the compiler setup process has", "-      // occurred; otherwise, the list of compilers in the UI will be wrong.", "-      ", "+    /* files to open held in filesToOpen[0:numFiles-1] which may be an initial segment of filesToOpen */", "+    ", "+    /* In some unit test cases, creating a MainFrame in the main thread generated index out of bounds exceptions.  It appear that this", "+     * creation process generates some swing events that are processed by the event thread.  Hence we need to create the MainFrame in", "+     * the event thread.", "+     */", "+//    Utilities.invokeAndWait(new Runnable() {", "+//      public void run() {", "+        try {", "+          String configLAFName = DrJava.getConfig().getSetting(LOOK_AND_FEEL);", "+          String currLAFName = UIManager.getLookAndFeel().getClass().getName();", "+          if (! configLAFName.equals(currLAFName)) UIManager.setLookAndFeel(configLAFName);", "+          ", "+          // The MainFrame *must* be constructed after the compiler setup process has", "+          // occurred; otherwise, the list of compilers in the UI will be wrong.", "+          ", "-      ", "-      final MainFrame mf = new MainFrame();", "-      ", "+          ", "+          final MainFrame mf = new MainFrame();", "+          ", "-      ", "-      // Make sure all uncaught exceptions are shown in an DrJavaErrorHandler", "-      DrJavaErrorWindow.setFrame(mf);", "-      System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.DrJavaErrorHandler\");", "-      ", "-      _openCommandLineFiles(mf, _filesToOpen, len);", "-      ", "-      /* This call on invokeLater only runs in the main thread, so we use SwingUtilities rather than Utilities.", "-       * We use invokeLater here ensure all files have finished loading and added to the fileview before the MainFrame", "-       * is set visible.  When this was not done, we occasionally encountered a NullPointerExceptio on startup when ", "-       * specifying a file (ex: java -jar drjava.jar somefile.java)", "-       */", "-      SwingUtilities.invokeLater(new Runnable(){ public void run(){mf.setVisible(true);}});", "-      ", "-      // redirect stdout to DrJava's console", "-      System.setOut(new PrintStream(new OutputStreamRedirector() {", "-        public void print(String s) { mf.getModel().systemOutPrint(s); }", "-      }));", "-      ", "-      // redirect stderr to DrJava's console", "-      System.setErr(new PrintStream(new OutputStreamRedirector() {", "-        public void print(String s) { mf.getModel().systemErrPrint(s); }", "-      }));", "-      ", "+          ", "+          // Make sure all uncaught exceptions are shown in an DrJavaErrorHandler", "+          DrJavaErrorWindow.setFrame(mf);", "+          System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.DrJavaErrorHandler\");", "+          ", "+          _openCommandLineFiles(mf, filesToOpen, numFiles);", "+          ", "+          /* This call on invokeLater only runs in the main thread, so we use SwingUtilities rather than Utilities.", "+           * We use invokeLater here ensure all files have finished loading and added to the fileview before the MainFrame", "+           * is set visible.  When this was not done, we occasionally encountered a NullPointerExceptio on startup when ", "+           * specifying a file (ex: java -jar drjava.jar somefile.java)", "+           */", "+          SwingUtilities.invokeLater(new Runnable(){ public void run(){ mf.setVisible(true); } });", "+          ", "+          // redirect stdout to DrJava's console", "+          System.setOut(new PrintStream(new OutputStreamRedirector() {", "+            public void print(String s) { mf.getModel().systemOutPrint(s); }", "+          }));", "+          ", "+          // redirect stderr to DrJava's console", "+          System.setErr(new PrintStream(new OutputStreamRedirector() {", "+            public void print(String s) { mf.getModel().systemErrPrint(s); }", "+          }));", "+          ", "-      // Show debug console if enabled", "-      if (_showDebugConsole) showDrJavaDebugConsole(mf);", "-    }", "-    catch (Throwable t) {", "-      // Show any errors to the real System.err and in an DrJavaErrorHandler", "-      _consoleErr.println(t.getClass().getName() + \": \" + t.getMessage());", "-      t.printStackTrace(_consoleErr);System.out.println(\"error thrown\");", "-      new DrJavaErrorHandler().handle(t);", "-    }", "+          // Show debug console if enabled", "+          if (showDebugConsole) showDrJavaDebugConsole(mf);", "+        }", "+        catch (Throwable t) {", "+          // Show any errors to the real System.err and in an DrJavaErrorHandler", "+          _consoleErr.println(t.getClass().getName() + \": \" + t.getMessage());", "+          t.printStackTrace(_consoleErr);", "+          System.out.println(\"error thrown\");", "+          new DrJavaErrorHandler().handle(t);", "+        }", "+//      }", "+//    });"]}], "num": 11049}
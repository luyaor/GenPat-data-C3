{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72c6b6580e85939e913fc6ac25b9825b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e76578517b2a514a12c5132ab5b168d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "a7c42e6b408bc2551d30854030021129f731f923", "commitAfterChange": "3d672b118ecc6f4a359a005302c6376fdd753150", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 80, "signatureBeforeChange": "   public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "diff": ["+    Vector<File> auxFileVector = new Vector<File>();", "+        }else if(doc.isAuxiliaryFile()){", "+          DocumentInfoGetter g = info.get(doc);", "+          builder.addAuxiliaryFile(g);", "+          auxFileVector.add(g.getFile());", "+    ", "+    _auxiliaryFiles.clear();", "+    for(File file: auxFileVector){", "+      _auxiliaryFiles.add(file);", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a22adc2efe9c06a711a3e73a52b8ddd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 55, "signatureBeforeChange": "     ProjectFileGroupingState(File project)", "signatureAfterChange": "     ProjectFileGroupingState(File project)", "diff": ["-           IterUtil.<AbsRelFile>empty(), null, 0, false, null);", "+           IterUtil.<AbsRelFile>empty(), null, 0, false, null, new HashMap<OptionParser,String>());", "+      HashMap<OptionParser,String> defaultStoredPreferences = new HashMap<OptionParser,String>();", "+      // by default, put INDENT_LEVEL AND LANGUAGE_LEVEL into the project file", "+      defaultStoredPreferences.put(INDENT_LEVEL, DrJava.getConfig().getOptionMap().getString(INDENT_LEVEL));      ", "+      defaultStoredPreferences.put(LANGUAGE_LEVEL, DrJava.getConfig().getOptionMap().getString(LANGUAGE_LEVEL));", "+      setPreferencesStoredInProject(defaultStoredPreferences);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c64001c673e09afd59da9823b3c5a2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "e433bba86704c86b158b09f6c33458c252eb4b1b", "commitAfterChange": "009201ea5473f7ca59ef7e83c1f67ec0f1be92b0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-        // Add the string pathSep to _filesToOpen if _showDebugConsole is true", "-        if (_showDebugConsole) _filesToOpen.add(pathSep);  // THIS IS A KLUDGE TO PASS THIS BOOLEAN FLAG TO DrJava", "+        LinkedList<String> classArgsList = new LinkedList<String>();", "+        // need to make the paths absolute since the working directory might change", "+        for(String fn: _filesToOpen) {", "+            classArgsList.add(new File(fn).getAbsolutePath());", "+        }", "+", "+        // Add the parameters \"-debugConsole\" to classArgsList if _showDebugConsole is true", "+        if (_showDebugConsole) classArgsList.add(0,\"-debugConsole\");", "-        String[] classArgs = _filesToOpen.toArray(new String[0]);", "+        if (!_propertiesFile.equals(DEFAULT_PROPERTIES_FILE)) {", "+          classArgsList.add(0,\"-config\");", "+          // need to make the paths absolute since the working directory might change", "+          classArgsList.add(1,_propertiesFile.getAbsolutePath());", "+        }", "+        String[] classArgs = classArgsList.toArray(new String[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "861d8471b9a3000bbac149230f22a194", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 194, "signatureBeforeChange": "   public ProjectProfile _makeProjectProfile(File file, HashMap<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public ProjectProfile _makeProjectProfile(File file, HashMap<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "diff": ["+  @SuppressWarnings(\"unchecked\")", "+    // update preference values here", "+    Map<OptionParser,String> sp = _state.getPreferencesStoredInProject();", "+    for(OptionParser key: sp.keySet()) {", "+      sp.put(key, DrJava.getConfig().getOptionMap().getString(key));", "+    }", "+    builder.setPreferencesStoredInProject(sp);", "+    _state.setPreferencesStoredInProject(sp);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9430949273485c233881470cc36e444e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOpsTest.java", "commitBeforeChange": "ea54d5918e0742266441f70659af74f35bca898d", "commitAfterChange": "e6ef9e23d624990cf9fd00ec857466a046415b6a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void testGetFiles() throws IOException", "signatureAfterChange": "   public void testGetFiles() throws IOException", "diff": ["-    assertEquals(\"non-recursive FilesInDir test\", res1, FileOps.getFilesInDir(dir1, false, ff));", "-    assertEquals(\"recursive FileInDir test\", res2, FileOps.getFilesInDir(dir1, true, ff));", "+    List<File> nrfiles = new ArrayList<File>();", "+    for(File f : FileOps.getFilesInDir(dir1, false, ff)) {", "+      nrfiles.add(f.getCanonicalFile());", "+    }", "+", "+    List<File> rfiles = new ArrayList<File>();", "+    for(File f : FileOps.getFilesInDir(dir1, true, ff)) {", "+      rfiles.add(f.getCanonicalFile());", "+    }", "+        ", "+    assertEquals(\"non-recursive FilesInDir test\", res1, nrfiles);", "+    assertEquals(\"recursive FileInDir test\", res2, rfiles);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf9ea0c318bb7f3552c8a3374aa1863", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DefaultCompilerModel(GlobalModel m)", "signatureAfterChange": "   public DefaultCompilerModel(GlobalModel m, Iterable<? extends CompilerInterface> compilers)", "diff": ["-  public DefaultCompilerModel(GlobalModel m) {", "+  public DefaultCompilerModel(GlobalModel m, Iterable<? extends CompilerInterface> compilers) {", "+    _compilers = new ArrayList<CompilerInterface>();", "+    for (CompilerInterface i : compilers) { _compilers.add(i); }", "+    if (_compilers.size() > 0) { _active = _compilers.get(0); }", "+    else { _active = NoCompilerAvailable.ONLY; }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18573df88062e4b0762f44fb42f24e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "diff": ["+    // add breakpoints and watches", "+    try {", "+      ArrayList<DebugBreakpointData> l = new ArrayList<DebugBreakpointData>();", "+      for(Breakpoint bp: getDebugger().getBreakpoints()) { l.add(bp); }", "+      builder.setBreakpoints(l);", "+    }", "+    catch(DebugException de) { /* ignore, just don't store breakpoints */ }", "+    try {", "+      builder.setWatches(getDebugger().getWatches());", "+    }", "+    catch(DebugException de) { /* ignore, just don't store watches */ }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed46631d5463d834fceb84d50ad41893", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "e97d669e5368c283be3ec2a94ca1c792daab5138", "commitAfterChange": "d75bb4144501a8419376e0dc8dbe054c7511983f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "signatureAfterChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "diff": ["+    ArrayList<CompilerError> packageErrors = new ArrayList<CompilerError>();", "+        ", "+        try { doc.getSourceRoot(); }", "+        catch (InvalidPackageException e) {", "+          packageErrors.add(new CompilerError(f, e.getMessage(), false));", "+        }", "-    } ", "-    ", "-    File buildDir = _model.getBuildDirectory();", "-    if ((buildDir != null) && !buildDir.exists() && !buildDir.mkdirs()) {", "-      throw new IOException(\"Could not create build directory: \"+buildDir);", "-", "-    File workDir = _model.getWorkingDirectory(); ", "-    if ((workDir != null) && ! workDir.exists() && ! workDir.mkdirs()) {", "-      throw new IOException(\"Could not create working directory: \"+workDir);", "-    }", "-     ", "+      ", "-    try { _compileFiles(filesToCompile, buildDir); }", "-    catch (Throwable t) {", "-      CompilerError err = new CompilerError(t.toString(), false);", "-      _distributeErrors(Arrays.asList(err));", "+    try {", "+      if (!packageErrors.isEmpty()) { _distributeErrors(packageErrors); }", "+      else {", "+        try {", "+          File buildDir = _model.getBuildDirectory();", "+          if ((buildDir != null) && !buildDir.exists() && !buildDir.mkdirs()) {", "+            throw new IOException(\"Could not create build directory: \"+buildDir);", "+          }", "+          ", "+          File workDir = _model.getWorkingDirectory(); ", "+          if ((workDir != null) && ! workDir.exists() && ! workDir.mkdirs()) {", "+            throw new IOException(\"Could not create working directory: \"+workDir);", "+          }", "+          ", "+          _compileFiles(filesToCompile, buildDir);", "+        }", "+        catch (Throwable t) {", "+          CompilerError err = new CompilerError(t.toString(), false);", "+          _distributeErrors(Arrays.asList(err));", "+        }", "+      }", "-    finally { _notifier.compileEnded(workDir, excludedFiles); }", "+    finally { _notifier.compileEnded(_model.getWorkingDirectory(), excludedFiles); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe5ccea06b6975f46358376a82171466", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "c6857a248a65e4dc52a9c98c57b551279861859d", "commitAfterChange": "4118fb5987600e1ade6dff5b6d5f90e5fdaddc47", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public Vector<URL> getClasspath()", "signatureAfterChange": "   public Vector<URL> getClasspath()", "diff": ["-        Vector<URL> classpath = new Vector<URL>(_interpreterJVM().getAugmentedClasspath());", "+        Vector<String> strClasspath = new Vector<String>(_interpreterJVM().getAugmentedClasspath());", "+        Vector<URL> classpath = new Vector<URL>(strClasspath.size()+_startupClasspathVector.size());", "+        ", "+        for(String s : strClasspath) { ", "+          try { classpath.add(new URL(s)); }", "+          catch (MalformedURLException e) {", "+           throw new edu.rice.cs.util.UnexpectedException(e);", "+          }", "+        }", "+        "]}], "num": 1949}
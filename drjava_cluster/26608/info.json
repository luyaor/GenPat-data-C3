{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19cabd1af52b2414d3fcdabf2ed435d2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "033a1a287c32b251f94c6e6556a4db24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public Class<?> visit(NotEqualExpression node)", "signatureAfterChange": "   public Type visit(NotEqualExpression node)", "diff": ["-  public Class<?> visit(NotEqualExpression node) {", "+  public Type visit(NotEqualExpression node) {", "-    Class<?> lc = ln.acceptVisitor(this);", "-    Class<?> rc = rn.acceptVisitor(this);", "-", "+    Type lc1 = ln.acceptVisitor(this);", "+    Type rc1 = rn.acceptVisitor(this);", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "-", "+    ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ed570d46b931f93f9580fe2558ca61e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "   private Class<?> visitRelationalExpression(BinaryExpression node)", "signatureAfterChange": "   private Type visitRelationalExpression(BinaryExpression node)", "diff": ["-  private Class<?> visitRelationalExpression(BinaryExpression node) {", "+  private Type visitRelationalExpression(BinaryExpression node) {", "-    Class<?> lc = leftExp.acceptVisitor(this);", "-    Class<?> rc = rightExp.acceptVisitor(this);", "-", "+    Type lc1 = leftExp.acceptVisitor(this);", "+    Type rc1 = rightExp.acceptVisitor(this);", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "589db1ba783f2fc376d783cb35e71729", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public Class<?> visit(DivideAssignExpression node)", "signatureAfterChange": "   public Type visit(DivideAssignExpression node)", "diff": ["-  public Class<?> visit(DivideAssignExpression node) {", "+  public Type visit(DivideAssignExpression node) {", "-    Class<?> lc = ln.acceptVisitor(this);", "-    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "+    Type lc1 = ln.acceptVisitor(this);", "+    Type rc1 = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "-        !(rc.isPrimitive()  || TigerUtilities.isBoxingType(rc)) ) {", "+        !(rc.isPrimitive()  || TigerUtilities.isBoxingType(rc))) {", "-", "+    ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ade7d149e84fdf83e65feee9ceafdd3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public Class<?> visit(SubtractAssignExpression node)", "signatureAfterChange": "   public Type visit(SubtractAssignExpression node)", "diff": ["-  public Class<?> visit(SubtractAssignExpression node) {", "+  public Type visit(SubtractAssignExpression node) {", "-    Class<?> lc = ln.acceptVisitor(this);", "-    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "-", "-", "+    Type lc1 = ln.acceptVisitor(this);", "+    Type rc1 = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "-", "+    ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79f398e3ec206ab622a68a4a7f8d9c12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "   private Class<?> visitBitwiseAssign(BinaryExpression node)", "signatureAfterChange": "   private Type visitBitwiseAssign(BinaryExpression node)", "diff": ["-  private Class<?> visitBitwiseAssign(BinaryExpression node) {", "+  private Type visitBitwiseAssign(BinaryExpression node) {", "-    Class<?> lc = ln.acceptVisitor(this);", "-    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "-", "+    Type lc1 = ln.acceptVisitor(this);", "+    Type rc1 = node.getRightExpression().acceptVisitor(this);", "+    ", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "-        ((lc == boolean.class || lc == Boolean.class) ^ ", "-         (rc == boolean.class || rc == Boolean.class)) ||", "+        ((lc == boolean.class || lc == Boolean.class) ^ (rc == boolean.class || rc == Boolean.class)) ||", "-", "+    ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8586b489367c5fc8af4a113b344dc4d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public Class<?> visit(EqualExpression node)", "signatureAfterChange": "   public Type visit(EqualExpression node)", "diff": ["-  public Class<?> visit(EqualExpression node) {", "+  public Type visit(EqualExpression node) {", "-    Class<?> lc = ln.acceptVisitor(this);", "-    Class<?> rc = rn.acceptVisitor(this);", "-", "+    Type lc1 = ln.acceptVisitor(this);", "+    Type rc1 = rn.acceptVisitor(this);", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "-", "+    ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf67e51eb229a52f282c53a890448fbe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public Class<?> visit(AddAssignExpression node)", "signatureAfterChange": "   public Type visit(AddAssignExpression node)", "diff": ["-  public Class<?> visit(AddAssignExpression node) {", "+  public Type visit(AddAssignExpression node) {", "-    Class<?> lc = ln.acceptVisitor(this);", "-    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "-", "+    Type lc1 = ln.acceptVisitor(this);", "+    Type rc1 = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "-", "+    ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1a49eea5b3e7f564790b4f81f1db2eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public Class<?> visit(RemainderAssignExpression node)", "signatureAfterChange": "   public Type visit(RemainderAssignExpression node)", "diff": ["-  public Class<?> visit(RemainderAssignExpression node) {", "+  public Type visit(RemainderAssignExpression node) {", "-    Class<?> lc = ln.acceptVisitor(this);", "-    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "-", "+    Type lc1 = ln.acceptVisitor(this);", "+    Type rc1 = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "-", "+    ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fce0f56d4c5339e51bf92a0380388dbd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public Class<?> visit(MultiplyAssignExpression node)", "signatureAfterChange": "   public Type visit(MultiplyAssignExpression node)", "diff": ["-  public Class<?> visit(MultiplyAssignExpression node) {", "+  public Type visit(MultiplyAssignExpression node) {", "-    Class<?> lc = ln.acceptVisitor(this);", "-    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "-", "+    Type lc1 = ln.acceptVisitor(this);", "+    Type rc1 = node.getRightExpression().acceptVisitor(this);", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "-", "+    ", "-", "+    "]}], "num": 26608}
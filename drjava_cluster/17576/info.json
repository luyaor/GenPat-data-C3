{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db996a4ca49bfc7cba5f87271609c2b8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "800ae7309054ad20835fd2e111cac4bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "b818b8a0f0981edaebaa07c3dc3e655c941dcd48", "commitAfterChange": "e02b291d62bdaa0ea7b37dd3f2ab84515aaa6d58", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   protected void getDistToEnclosingBrace(IndentInfo braceInfo)", "signatureAfterChange": "   protected void getDistToEnclosingBrace(IndentInfo braceInfo)", "diff": ["-    int relDistance = braceInfo.distToLineEnclosingBraceStart + 1;  ", "-    /* This code is OBSCENE!  As a precondition, braceInfo.distToLineEnclosingBraceStart must hold the distance to the right edge of ", "+    int relDistance = braceInfo.distToNewline + 1;  ", "+    /* This code is OBSCENE!  As a precondition, braceInfo.distToNewline must hold the distance to the right edge of ", "-    if (braceInfo.distToLineEnclosingBraceStart == -1) {  // There is no preceding newline char.  (Why not give distance to line start?)", "+    if (braceInfo.distToNewline == -1) {  // There is no preceding newline char.  (Why not give distance to line start?)", "-    iter.move(-braceInfo.distToLineEnclosingBraceStart - 1);", "+    iter.move(-braceInfo.distToNewline - 1);", "-    braceInfo.distToLineEnclosingBraceStart = -1;", "+    braceInfo.distToNewline = -1;", "-                  braceInfo.distToLineEnclosingBrace = distance;", "+                  braceInfo.distToBrace = distance;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e62b00131bf0448815d1eddc46713b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "4a90aa5d0c3f437e0c1cdaccfb311a2852121f92", "commitAfterChange": "7ddc8e7f78b66ef8e4ed5561c33d8ef661ee32e6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   protected void getDistToEnclosingBrace(IndentInfo braceInfo)", "signatureAfterChange": "   protected void getDistToEnclosingBrace(IndentInfo braceInfo)", "diff": ["-    int relDistance = braceInfo.distToNewline + 1;  ", "-    /* This code is OBSCENE!  As a precondition, braceInfo.distToNewline must hold the distance to the right edge of ", "+    int relDistance = braceInfo.distToLineEnclosingBraceStart + 1;  ", "+    /* This code is OBSCENE!  As a precondition, braceInfo.distToLineEnclosingBraceStart must hold the distance to the right edge of ", "-    if (braceInfo.distToNewline == -1) {  // There is no preceding newline char.  (Why not give distance to line start?)", "+    if (braceInfo.distToLineEnclosingBraceStart == -1) {  // There is no preceding newline char.  (Why not give distance to line start?)", "-    iter.move(-braceInfo.distToNewline - 1);", "+    iter.move(-braceInfo.distToLineEnclosingBraceStart - 1);", "-    braceInfo.distToNewline = -1;", "+    braceInfo.distToLineEnclosingBraceStart = -1;", "-                  braceInfo.distToBrace = distance;", "+                  braceInfo.distToLineEnclosingBrace = distance;"]}], "num": 17576}
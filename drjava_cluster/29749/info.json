{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a25e067df0c1836f29d65892258cc55e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbe93cb05e5bb4bef7482be980295f2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "05f7af6256ad9de7647a20e85e5cc81c388873cd", "commitAfterChange": "d2b9532b43d33848c589e184dd41f72fb998a545", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public String getIndentOfCurrStmt(int pos, char[] delims) throws BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(int pos, char[] delims) throws BadLocationException", "diff": ["+    boolean ignoreParens;", "-      prevDelimiter = findPrevDelimiter(prevDelimiter, delims);", "+      ignoreParens = posInParenPhrase(prevDelimiter);", "+      prevDelimiter = findPrevDelimiter(prevDelimiter, delims, ignoreParens);", "+      try {", "+      if (getText(prevDelimiter,1).charAt(0) == '{') {", "+        break;", "+      }", "+      } catch (BadLocationException e) { }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62d08ea72a8d8e4669807ccbed51df7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "diff": ["+      final boolean wasDebuggerEnabled = getDebugger().isReady();", "+      ", "+          // Restart debugger if it was previously enabled and is now off", "+          if (wasDebuggerEnabled && (!getDebugger().isReady())) {", "+            try { getDebugger().startup(); } catch(DebugException de) { /* ignore, continue without debugger */ }", "+          }"]}], "num": 29749}
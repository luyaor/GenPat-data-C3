{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c0ad61bc1edd98163ec250f06800c9b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a0e663207a0d03d7739533d74869b61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testRequiresAutoboxing()", "signatureAfterChange": "   public void testRequiresAutoboxing()", "diff": ["-  /* Make sure that autoboxing is done appropriately*/", "+  /** Makes sure that autoboxing is done appropriately*/", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-    ", "-    for (int i = 0; i <testFiles.length; i++) {", "-      LanguageLevelConverter llc4 = new LanguageLevelConverter();", "-      result = llc4.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_1_4, EmptyIterable.<File>make()));", "-      assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "-    }", "-    ", "-    ", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-    /**Now make sure that the resulting java files are correct.*/", "-    for(int i = 0; i < testFiles.length; i++) {", "+//    for (int i = 0; i <testFiles.length; i++) {", "+//      LanguageLevelConverter llc5 = new LanguageLevelConverter();", "+//      result = llc5.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_5, EmptyIterable.<File>make()));", "+//      ", "+//      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+//      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+//    }", "+", "+    ", "+    /* Now make sure that the resulting java files are correct.*/", "+    for (int i = 0; i < testFiles.length; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73165c2ca91243cf1db4929236f5b45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 119, "signatureBeforeChange": "          public void testForClassImportStatementOnly()", "signatureAfterChange": "          public void testForClassImportStatementOnly()", "diff": ["-      Word[] words = new Word[] {new Word(SourceInfo.NO_INFO, \"alpha\"),", "-        new Word(SourceInfo.NO_INFO, \"beta\")};", "+      Word[] words = new Word[] { new Word(SourceInfo.NO_INFO, \"alpha\"), new Word(SourceInfo.NO_INFO, \"beta\")};", "-      assertEquals(\"There should be a continuation.\", sd, LanguageLevelConverter.symbolTable.get(\"alpha.beta\"));", "+      // continuations should not appear in symbolTable", "+//      assertEquals(\"There should be a continuation.\", sd, LanguageLevelConverter.symbolTable.get(\"alpha.beta\"));", "-      Word[] words2 = new Word[] {new Word(SourceInfo.NO_INFO, \"gamma\"),", "-        new Word(SourceInfo.NO_INFO, \"beta\")};", "+      Word[] words2 = new Word[] { new Word(SourceInfo.NO_INFO, \"gamma\"), new Word(SourceInfo.NO_INFO, \"beta\")};", "-      assertEquals(\"The error message should be correct\", \"The class beta has already been imported.\", ", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The class beta has already been imported.\", ", "-      //Test one that should throw an error: Importing a class from the current package", "-      testLLVisitor._package = \"myPackage\";", "-      Word[] words3 = ", "-        new Word[] { new Word(SourceInfo.NO_INFO, \"myPackage\"), new Word(SourceInfo.NO_INFO, \"cookie\")};", "-      CompoundWord cw3 = new CompoundWord(SourceInfo.NO_INFO, words3);", "-      ClassImportStatement cis3 = new ClassImportStatement(SourceInfo.NO_INFO, cw3);", "-      cis3.visit(testLLVisitor);", "-      ", "-      assertEquals(\"There should now be 2 errors\", 2, errors.size());", "-      assertEquals(\"The second error message should be correct\", \"You do not need to import myPackage.cookie.\" + ", "-                   \"  It is in your package so it is already visible\", errors.get(1).getFirst());", "-      ", "-      ", "+    // Consistent with javac,  the following test no longer throws an error.", "+//      //Test one that should throw an error: Importing a class from the current package", "+//      testLLVisitor._package = \"myPackage\";", "+//      Word[] words3 =  new Word[] { new Word(SourceInfo.NO_INFO, \"myPackage\"), new Word(SourceInfo.NO_INFO, \"cookie\")};", "+//      CompoundWord cw3 = new CompoundWord(SourceInfo.NO_INFO, words3);", "+//      ClassImportStatement cis3 = new ClassImportStatement(SourceInfo.NO_INFO, cw3);", "+//      cis3.visit(testLLVisitor);", "+//      ", "+//      assertEquals(\"There should now be 2 errors\", 2, errors.size());", "+//      assertEquals(\"The second error message should be correct\", ", "+//                   \"You do not need to import myPackage.cookie.  It is in your package so it is already visible\", ", "+//                   errors.get(1).getFirst());"]}], "num": 5665}
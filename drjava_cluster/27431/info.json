{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1587ca31bf2d1d4244e12264a67b4a85", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eb6d1a731e068a23848d2d43c8d6442", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "dac1911c42074b029b90bbb69267d350628d7300", "commitAfterChange": "6ac6b30c03b8f321199592a97e544cb4056701f0", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 200, "signatureBeforeChange": "   public Expression cast(Type target, final Expression e)      throws UnsupportedConversionException", "signatureAfterChange": "   public Expression cast(final Type target, final Expression e) throws UnsupportedConversionException", "diff": ["-  public Expression cast(Type target, final Expression e) ", "-    throws UnsupportedConversionException {", "+  public Expression cast(final Type target, final Expression e) throws UnsupportedConversionException {", "-      public Expression defaultCase(Type target) {", "+      @Override public Expression defaultCase(Type target) {", "-            // TODO: implement correctly instead of this simplified version (join might come in handy):           ", "-            if (isSubtype(target, source)) {", "+            if (validCheckedCast(target, source) ||", "+                (!_opt.prohibitUncheckedCasts() && validUncheckedCast(target, source))) {", "-              // TODO: unchecked warnings", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e965806bc2a9e8dddc11553cb2ca2e62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/error/ThrownException.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ThrownException(Throwable e, Node n)", "signatureAfterChange": "   public ThrownException(Throwable e, StackTraceElement[] filteredElements)", "diff": ["+   */", "+  public ThrownException(Throwable e, StackTraceElement[] filteredElements) {", "+    super(\"uncaught.exception\");", "+    StackTraceElement[] original = e.getStackTrace();", "+    int startMatch = original.length - filteredElements.length;", "+    boolean matches = startMatch >= 0;", "+    for (int i = 0; matches && i < filteredElements.length; i++) {", "+      matches &= original[startMatch+i].equals(filteredElements[i]);", "+    }", "+    if (matches) {", "+      StackTraceElement[] newStackTrace = new StackTraceElement[startMatch];", "+      for (int i = 0; i < startMatch; i++) { newStackTrace[i] = original[i]; }", "+      e.setStackTrace(newStackTrace);", "+    }", "+    thrown = e;    ", "+  }"]}], "num": 27431}
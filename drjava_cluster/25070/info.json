{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee4a6ce8ae655dbd14690c0eb206b6f7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b34849b4da49847aae7f089a05eb76d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "commitAfterChange": "5491f825d209840377d660c81134a657fe7ce675", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static File[] getToolsJarFiles(File toolsJar)", "signatureAfterChange": "   public static File[] getToolsJarFiles(File toolsJar)", "diff": ["-    // We must maintain insertion order, so that the first entries have priority;", "-    // at the same time, we want to eliminate duplicates so that the same tools.jar file", "-    // doesn't show up multiple times.", "+    /*", "+     * javaHomeParents is a set of (attempted) canonical paths that may not exist.", "+     * We must maintain insertion order, so that the first entries have priority;", "+     * at the same time, we want to eliminate duplicates so that the same tools.jar file", "+     * doesn't show up multiple times.", "+     */", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "-    javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "+    ", "+    String winPrograms = System.getenv(\"ProgramFiles\");", "+    if (winPrograms != null) {", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms, \"Java\")));", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(winPrograms)));", "+    }", "+    else {  // in case the environment variables aren't set up properly", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/Java/\")));", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Program Files/\")));", "+    }", "+", "+    String winSystem = System.getenv(\"SystemDrive\");", "+    if (winSystem != null) {", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem, \"Java\")));", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(winSystem)));", "+    }", "+    else { // in case the environment variables aren't set up properly", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/Java/\")));", "+      javaHomeParents.add(FileOps.getCanonicalFile(new File(\"/C:/\")));", "+    }", "+    ", "+    ", "+    /* javaHomes is a set of potential Java installations.  Each is an existing directory. */", "-    javaHomes.add(javaHome);", "+    ", "+    try {", "+      if (javaHome.isDirectory()) { javaHomes.add(javaHome); }", "+    }", "+    catch (SecurityException e) { /* ignore */ }", "+    ", "+    FileFilter matchHomes = new FileFilter() {", "+      public boolean accept(File f) {", "+        return f.isDirectory() && (f.getName().startsWith(prefix1) || f.getName().startsWith(prefix2));", "+      }", "+    };", "-      javaHomes.addAll(FileOps.getFilesInDir(parent, false, new FileFilter() {", "-        public boolean accept(File f) {", "-          String name = f.getName();", "-          return name.startsWith(prefix1) || name.startsWith(prefix2);", "+      try {", "+        File[] files = parent.listFiles(matchHomes);", "+        if (files != null) {", "+          for (File f : files) { javaHomes.add(f); }", "-      }));", "+      }", "+      catch (SecurityException e) { /* ignore */ }", "+    /* The result is a set of existing tools.jar files, (attempted) canonicalized */", "-    if (toolsJar.exists()) result.add(FileOps.getCanonicalFile(toolsJar));", "+    ", "+    try {", "+      if (toolsJar.isFile()) result.add(FileOps.getCanonicalFile(toolsJar));", "+    }", "+    catch (SecurityException e) { /* ignore */ }", "+    ", "-      File tools = new File(home, \"lib/tools.jar\");", "-      if (tools.exists()) { result.add(FileOps.getCanonicalFile(toolsJar)); }", "+      try {", "+        File tools = new File(home, \"lib/tools.jar\");", "+        if (tools.isFile()) { result.add(FileOps.getCanonicalFile(tools)); }", "+      }", "+      catch (SecurityException e) { /* ignore */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df8b470ce7a8a8ed316ce62cf564be13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOpsTest.java", "commitBeforeChange": "723910d837b2fcdd9f4127559df4832f71fb62e8", "commitAfterChange": "dfd810274f578220ac2bc25dd7ac216d6cba7d82", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testGetOffsetAndLength()", "signatureAfterChange": "   public void testGetOffsetAndLength()", "diff": ["-    Pair<Integer,Integer> oAndL = StringOps.getOffsetAndLength( test, 1, 1, 1, 9 );", "-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(0), oAndL.getFirst() );", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(9), oAndL.getSecond() );", "-   ", "-    oAndL = StringOps.getOffsetAndLength( test, 1, 1, 2, 3 );", "-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(0), oAndL.getFirst() );", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(12), oAndL.getSecond() );", "-    oAndL = StringOps.getOffsetAndLength( test, 1, 5, 2, 3 );", "-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(4), oAndL.getFirst() );", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(8), oAndL.getSecond() );", "+    // The offset is always one less than the first row/col", "+    // The length includes the start and end positions", "+    Pair<Integer,Integer> oAndL = StringOps.getOffsetAndLength(test, 1, 1, 1, 9);", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(0), oAndL.getFirst());", "+    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(9), oAndL.getSecond());", "+   ", "+    oAndL = StringOps.getOffsetAndLength(test, 1, 1, 2, 3);", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(0), oAndL.getFirst());", "+    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(13), oAndL.getSecond());", "+    ", "+    oAndL = StringOps.getOffsetAndLength(test, 1, 5, 2, 3);", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(4), oAndL.getFirst());", "+    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(9), oAndL.getSecond());", "-    oAndL = StringOps.getOffsetAndLength( test, 1, 1, 1, 1 );", "-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(0), oAndL.getFirst() );", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(1), oAndL.getSecond() );", "+    oAndL = StringOps.getOffsetAndLength(test, 1, 1, 1, 1);", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(0), oAndL.getFirst());", "+    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(1), oAndL.getSecond());", "+", "+    oAndL = StringOps.getOffsetAndLength(test, 3, 5, 3, 5);", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(24), oAndL.getFirst());", "+    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(1), oAndL.getSecond());", "+", "+    oAndL = StringOps.getOffsetAndLength(test, 2, 3, 3, 6);", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(12), oAndL.getFirst());", "+    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(14), oAndL.getSecond());", "+    ", "+    try {", "+      StringOps.getOffsetAndLength(test, 3, 2, 2, 3);", "+      fail(\"Should not have been able to compute offset where startRow > endRow\");", "+    }", "+    catch (IllegalArgumentException ex) {", "+      // correct behavior", "+    }", "+", "+    try {", "+      StringOps.getOffsetAndLength(test, 2, 4, 2, 3);", "+      fail(\"Should not have been able to compute offset where start > end\");", "+    }", "+    catch (IllegalArgumentException ex) {", "+      // correct behavior", "+    }", "+", "+    try {", "+      StringOps.getOffsetAndLength(test, 4, 4, 5, 5);", "+      fail(\"Should not have been able to compute offset where the\\n\" +", "+           \"given coordinates are not contained within the string\");", "+    }", "+    catch (IllegalArgumentException ex) {", "+      // correct behavior", "+    }", "+", "+    try {", "+      StringOps.getOffsetAndLength(test, 3, 4, 3, 12);", "+      fail(\"Should not have been able to compute offset where the\\n\" +", "+           \"given coordinates are not contained within the string\");", "+    }", "+    catch (IllegalArgumentException ex) {", "+      // correct behavior", "+    }", "+", "+    try {", "+      StringOps.getOffsetAndLength(test, 2, 15, 3, 1);", "+      fail(\"Should not have been able to compute offset where the\\n\" +", "+           \"given coordinates are not contained within the string\");", "+    }", "+    catch (IllegalArgumentException ex) {", "+      // correct behavior", "+    }"]}], "num": 25070}
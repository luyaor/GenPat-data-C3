{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79bb1c076d1c4edeac9d1574dd86dbca", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "443ec9f23f54ea4019db8d059ec88625", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyElementaryVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-   */\r", "-  public void forConcreteMethodDef(ConcreteMethodDef that) {\r", "-    forConcreteMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    md.addPublicMav(); //All methods are automatically public at the Elementary level.\r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Constructors are they only methods that can have the same name as the class they appear in, and they are not allowed at the Elementary level\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-    that.getBody().visit(new BodyBodyElementaryVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));\r", "-    forConcreteMethodDefOnly(that);\r", "-  }\r", "+   */", "+  public void forConcreteMethodDef(ConcreteMethodDef that) {", "+    forConcreteMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    MethodData md = createMethodData(that, _symbolData);", "+    md.addPublicMav(); // All methods are automatically public at the Elementary level.", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Constructors are they only methods that can have the same name as the class they appear in, and they are not allowed at the Elementary level\",", "+                         that);", "+    }", "+    else {", "+      _symbolData.addMethod(md);", "+    }", "+    that.getBody().visit(new BodyBodyElementaryVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));", "+    forConcreteMethodDefOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f3bccacd9389816b01600409698f16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyAdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r   public void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-   */\r", "-  public void forConcreteMethodDef(ConcreteMethodDef that) {\r", "-    forConcreteMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    \r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    \r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-    that.getBody().visit(new BodyBodyAdvancedVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));\r", "-  }\r", "+   */", "+  public void forConcreteMethodDef(ConcreteMethodDef that) {", "+    forConcreteMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    ", "+    MethodData md = createMethodData(that, _symbolData);", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    ", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+                         that);", "+    }", "+    else {", "+      _symbolData.addMethod(md);", "+    }", "+    that.getBody().visit(new BodyBodyAdvancedVisitor(md, _file, _package, _importedFiles, _importedPackages, _classNamesInThisFile, continuations));", "+  }"]}], "num": 16143}
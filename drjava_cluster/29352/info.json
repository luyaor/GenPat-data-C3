{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c07745d42ccf202d16d4c43d4aad273", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f30e69aaff2243c6d50c02f0d3fc2de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "          public void testForIncrementExpressionOnly()", "signatureAfterChange": "          public void testForIncrementExpressionOnly()", "diff": ["-      IncrementExpression ie = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "+      IncrementExpression ie = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, ", "+                                              new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forIncrementExpressionOnly(ie, SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forIncrementExpressionOnly(ie, SymbolData.INT_TYPE.getInstanceData()));", "-      //if value_result is null, return null but do not give error", "+      //if valueRes is null, return null but do not give error", "-      //if value_result is PackageData, give error and return null", "+      //if valueRes is PackageData, give error and return null", "-      //if value_result is not an instance type, give an error", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forIncrementExpressionOnly(ie, SymbolData.INT_TYPE));", "+      // if valueRes is not an instance type, give an error", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forIncrementExpressionOnly(ie, SymbolData.INT_TYPE));", "-      assertEquals(\"Error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      //if value result is not a number type, give an error", "-      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), _etc.forIncrementExpressionOnly(ie, _sd2.getInstanceData()));", "+      // if value result is not a number type, give an error", "+      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), ", "+                   _etc.forIncrementExpressionOnly(ie, _sd2.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"You cannot increment or decrement something that is not a number type.  You have specified something of type \" + _sd2.getName(), errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot increment or decrement something that is not a number type.  You have specified \"", "+                     + \"something of type \" + _sd2.getName(), ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22ff61bc293cc55e64569fd58da3fc74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": "               public void testForComplexSuperReference()", "signatureAfterChange": "               public void testForComplexSuperReference()", "diff": ["-      ComplexSuperReference csr = new ComplexSuperReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"context\")));", "+      ComplexSuperReference csr = ", "+        new ComplexSuperReference(SourceInfo.NONE, ", "+                                  new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"context\")));", "-      //if enclosing_result is null, return null", "+      // if enclosing_result is null, return null", "-      ", "-      ", "-      //if enclosing result is a PackageData, give appropriate error and return null", "+", "+      // if enclosing result is a PackageData, give appropriate error and return null", "-      //if enclosing_result is not an outer data of the current context, give an error", "+      // if enclosing_result is not an outer data of the current context, give an error", "-      ", "-      ", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass));", "-      assertEquals(\"The error message should be correct\", \"You cannot reference context.super from here, because context is not an outer class of i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot reference context.super from here, because context is not an outer class of i.like.monkey\", ", "+                   errors.getLast().getFirst());", "-      //if enclosing_result is an outer data of current context, everything is peachy", "+      // if enclosing_result is an outer data of current context, everything is peachy", "-      ", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass));", "-      ", "-      //if we are in a static method, throw appropriate error", "+      // if we are in a static method, throw appropriate error", "-      ", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass));", "-      assertEquals(\"The error message should be correct\", \"'super' cannot be referenced from within a static method\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", \"'super' cannot be referenced from within a static method\", ", "+                   errors.getLast().getFirst());", "-      //if the enclosing result is an instance type, throw an error", "+      // if the enclosing result is an instance type, throw an error", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass.getInstanceData()));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass.getInstanceData()));", "-      assertEquals(\"The error message should be correct\", \"'super' can only be referenced from a type name, but you have specified an instance of that type.\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", \"'super' can only be referenced from a type name, \"", "+                     + \"but you have specified an instance of that type.\", ", "+                   errors.getLast().getFirst());", "-      ", "-      //if current context is static, give an error", "+      // if current context is static, give an error", "-      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), _etc.forComplexSuperReferenceOnly(csr, contextClass));", "+      assertEquals(\"Should return instance of super\", _sd2.getInstanceData(), ", "+                   _etc.forComplexSuperReferenceOnly(csr, contextClass));", "-      assertEquals(\"Error message should be correct\", \"You cannot reference context.super from here, because i.like.monkey or one of its enclosing classes is static.  Thus, an enclosing instance of context does not exist\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot reference context.super from here, because i.like.monkey or one of its enclosing \"", "+                     + \"classes is static.  Thus, an enclosing instance of context does not exist\", ", "+                   errors.getLast().getFirst());"]}], "num": 29352}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1da1b5dd62cea0b37bdaf52db981274", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "455cfe961ea54a3e62396a3be5cd67da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public void testBackspace() throws BadLocationException", "signatureAfterChange": "   public void testBackspace()", "diff": ["-  public void testBackspace() throws BadLocationException {", "-    DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+  public void testBackspace() {", "+    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "-    doc.insertString(0, \"test\", null);", "+", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        doc.append(\"test\", null);", "+        definitions.setCaretPosition(4);", "+        int backspaceCode = KeyEvent.VK_BACK_SPACE;", "+        // The following is the sequence of key events for backspace", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0, ", "+                                                 backspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "+                                                 backspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "+                                                 KeyEvent.VK_UNDEFINED, '\\b'));", "+      }", "+    });", "-    definitions.setCaretPosition(4);", "-    int backspaceCode = KeyEvent.VK_BACK_SPACE;", "-     // The following is the sequence of key events for backspace", "-     definitions.processKeyEvent(new KeyEvent(definitions,", "-                                              KeyEvent.KEY_PRESSED,", "-                                              (new Date()).getTime(),", "-                                              0,", "-                                              backspaceCode,", "-                                              KeyEvent.CHAR_UNDEFINED));", "-     definitions.processKeyEvent(new KeyEvent(definitions,", "-                                              KeyEvent.KEY_RELEASED,", "-                                              (new Date()).getTime(),", "-                                              0,", "-                                              backspaceCode,", "-                                              KeyEvent.CHAR_UNDEFINED));", "-     definitions.processKeyEvent(new KeyEvent(definitions,", "-                                              KeyEvent.KEY_TYPED,", "-                                              (new Date()).getTime(),", "-                                              0,", "-                                              KeyEvent.VK_UNDEFINED,", "-                                              '\\b'));", "-     _assertDocumentContents(doc, \"tes\", \"Deleting with Backspace went wrong\");", "+    _assertDocumentContents(doc, \"tes\", \"Deleting with Backspace went wrong\");", "+    ", "+    _log.log(\"testBackSpace completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db87603e503c10b575e10963ae17583f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testTypeBraceNotInCode() throws BadLocationException", "signatureAfterChange": "   public void testTypeBraceNotInCode() throws BadLocationException", "diff": ["-   */", "+  /** Tests that typing a brace in a string/comment does not cause an indent. */", "-    DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "-    doc.insertString(0, \"  \\\"\", null);", "-    definitions.setCaretPosition(3);", "-    // The following is the sequence of key events for a left brace", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_TYPED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_UNDEFINED, '{'));", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        doc.append(\"  \\\"\", null);", "+        definitions.setCaretPosition(3);", "+        // The following is the sequence of key events for a left brace", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0, ", "+                                                 KeyEvent.VK_UNDEFINED, '{'));", "+      }", "+    });", "+        ", "+    _log.log(\"testTypeBraceNotIncode completed\");"]}], "num": 30450}
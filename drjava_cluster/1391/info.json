{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7329238dc3369a35cdd74808c124e87", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1437f33bc833ae71b043a8be980d2f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectTest.java", "commitBeforeChange": "c3fb656e676b9139addd78f759d02f23bc0ddcb3", "commitAfterChange": "0f1ebded0cf3f3c1433e87b9a6d077f0d67078af", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    public void testWriteFile() throws IOException, MalformedProjectFileException", "signatureAfterChange": "    public void testWriteFile() throws IOException, MalformedProjectFileException", "diff": ["-", "-    String expected = \"\";", "-    String received = \"\";", "+    StringBuilder received = new StringBuilder();", "-      received += (char) c;", "+      received.append((char)c);", "+    fr.close();", "-    assertEquals(\"first aux filename\", new File(parent,\"test/testfile6.java\").getPath(), ", "-                 pfir.getAuxiliaryFiles()[0].getPath());", "+    assertEquals(\"first aux filename\", new File(parent,\"test/testfile6.java\").getCanonicalPath(), ", "+                 pfir.getAuxiliaryFiles()[0].getCanonicalPath());", "-    assertEquals(\"build-dir name\", buildDir, pfir.getBuildDirectory());", "-    assertEquals(\"work-dir name\", srcDir, pfir.getWorkingDirectory());", "-    assertEquals(\"classpath name\", new File(parent,\"lib\"), IterUtil.first(pfir.getClassPaths()));", "-    assertEquals(\"main-class name\", new File(parent,\"/dir1/testfile1.java\"), pfir.getMainClass());", "+    assertEquals(\"build-dir name\", buildDir.getCanonicalPath(), pfir.getBuildDirectory().getCanonicalPath());", "+    assertEquals(\"work-dir name\", srcDir.getCanonicalPath(), pfir.getWorkingDirectory().getCanonicalPath());", "+    assertEquals(\"classpath name\", new File(parent,\"lib\").getCanonicalPath(),", "+                 IterUtil.first(pfir.getClassPaths()).getCanonicalPath());", "+    assertEquals(\"main-class name\", new File(parent,\"dir1/testfile1.java\").getCanonicalPath(),", "+                 pfir.getMainClass().getCanonicalPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afba2e61bff10c07a62077a9fee2e48a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectTest.java", "commitBeforeChange": "c3fb656e676b9139addd78f759d02f23bc0ddcb3", "commitAfterChange": "0f1ebded0cf3f3c1433e87b9a6d077f0d67078af", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testWriteFileXML() throws IOException, MalformedProjectFileException", "signatureAfterChange": "      public void testWriteFileXML() throws IOException, MalformedProjectFileException", "diff": ["-", "-    String expected = \"\";", "-    String received = \"\";", "+    StringBuilder received = new StringBuilder();", "-      received += (char) c;", "+      received.append((char)c);", "+    fr.close();", "-    assertEquals(\"first aux filename\", new File(parent,\"test/testfile6.java\").getPath(), ", "-                 pfir.getAuxiliaryFiles()[0].getPath());", "+    assertEquals(\"first aux filename\", new File(parent,\"test/testfile6.java\").getCanonicalPath(), ", "+                 pfir.getAuxiliaryFiles()[0].getCanonicalPath());", "-    assertEquals(\"build-dir name\", buildDir, pfir.getBuildDirectory());", "-    assertEquals(\"work-dir name\", srcDir, pfir.getWorkingDirectory());", "-    assertEquals(\"classpath name\", new File(parent,\"lib\"), IterUtil.first(pfir.getClassPaths()));", "-    assertEquals(\"main-class name\", new File(parent,\"/dir1/testfile1.java\"), pfir.getMainClass());", "+    assertEquals(\"build-dir name\", buildDir.getCanonicalPath(), pfir.getBuildDirectory().getCanonicalPath());", "+    assertEquals(\"work-dir name\", srcDir.getCanonicalPath(), pfir.getWorkingDirectory().getCanonicalPath());", "+    assertEquals(\"classpath name\", new File(parent,\"lib\").getCanonicalPath(),", "+                 IterUtil.first(pfir.getClassPaths()).getCanonicalPath());", "+    assertEquals(\"main-class name\", new File(parent,\"dir1/testfile1.java\").getCanonicalPath(),", "+                 pfir.getMainClass().getCanonicalPath());"]}], "num": 1391}
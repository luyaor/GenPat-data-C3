{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1406a51e63eed4ea22bc6185ac76b776", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dfcf19273a5a4c6347a151dd5141463", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     protected Object[] interpretArguments(Class c, \t\t\t\t\tConstructorParametersDescriptor cpd, \t\t\t\t\tObject[] args)", "signatureAfterChange": "   protected Object[] interpretArguments(Class c,                                         ConstructorParametersDescriptor cpd,                                         Object[] args)", "diff": ["-     */", "-    protected Object[] interpretArguments(Class c,", "-\t\t\t\t\tConstructorParametersDescriptor cpd,", "-\t\t\t\t\tObject[] args) {", "-\tif (cpd.variables == null) {", "-\t    cpd.importationManager.setClassLoader(classLoader);", "-", "-\t    Context ctx = new StaticContext(this, c, cpd.importationManager);", "-\t    ctx.setAdditionalClassLoaderContainer(classLoader);", "-\t    Visitor nv = new NameVisitor(ctx);", "-\t    Visitor tc = new TypeChecker(ctx);", "-", "-\t    // Check the parameters", "-\t    if (cpd.parameters != null) {", "-\t\tListIterator it = cpd.parameters.listIterator();", "-\t\twhile (it.hasNext()) {", "-\t\t    ((Node)it.next()).acceptVisitor(tc);", "-\t\t}", "-\t    }", "-", "-\t    if (cpd.arguments != null) {", "-\t\tListIterator it = cpd.arguments.listIterator();", "-\t\twhile (it.hasNext()) {", "-\t\t    Node   root = (Node)it.next();", "-\t\t    Object res  = root.acceptVisitor(nv);", "-\t\t    if (res != null) {", "-\t\t\tit.set(res);", "-\t\t    }", "-\t\t}", "-", "-\t\tit = cpd.arguments.listIterator();", "-\t\twhile (it.hasNext()) {", "-\t\t    ((Node)it.next()).acceptVisitor(tc);", "-\t\t}", "-\t    }", "-\t    cpd.variables = ctx.getCurrentScopeVariables();", "-\t}", "-", "-\tContext ctx = new StaticContext(this, c, cpd.variables);", "-\tctx.setAdditionalClassLoaderContainer(classLoader);", "-", "-\t// Set the arguments values", "-\tif (cpd.parameters != null) {", "-\t    Iterator it  = cpd.parameters.iterator();", "-\t    int      i   = 0;", "-\t    while (it.hasNext()) {", "-\t\tctx.set(((FormalParameter)it.next()).getName(), args[i++]);", "-\t    }", "-\t}", "-\t", "-\tObject[] result = new Object[0];", "-\t", "-\tif (cpd.arguments != null) {", "-\t    Visitor v = new EvaluationVisitor(ctx);", "-\t    ListIterator it = cpd.arguments.listIterator();", "-\t    result = new Object[cpd.arguments.size()];", "-\t    int i = 0;", "-\t    while (it.hasNext()) {", "-\t\tresult[i++] = ((Node)it.next()).acceptVisitor(v);", "-\t    }", "-\t}", "-\t", "-\treturn result;", "-    }", "+   */", "+  protected Object[] interpretArguments(Class c,", "+                                        ConstructorParametersDescriptor cpd,", "+                                        Object[] args) {", "+    if (cpd.variables == null) {", "+      cpd.importationManager.setClassLoader(classLoader);", "+      ", "+      Context ctx = new StaticContext(this, c, cpd.importationManager);", "+      ctx.setAdditionalClassLoaderContainer(classLoader);", "+      NameVisitor nv = new NameVisitor(ctx);", "+      TypeChecker tc = new TypeChecker(ctx);", "+      ", "+      // Check the parameters", "+      if (cpd.parameters != null) {", "+        ListIterator<FormalParameter> it = cpd.parameters.listIterator();", "+        while (it.hasNext()) {", "+         it.next().acceptVisitor(tc);", "+      }", "+      ", "+      if (cpd.arguments != null) {", "+        ListIterator<Expression> it = cpd.arguments.listIterator();", "+        while (it.hasNext()) {", "+          Expression root = it.next();", "+          Object res = root.acceptVisitor(nv);", "+          if (res != null) {", "+            it.set((Expression) res);   //This cast is a guess /**/", "+          }", "+        }", "+        // FIX THIS CODE !!!  The mutation and typing are abominations. /**/ ", "+        it = cpd.arguments.listIterator();", "+        while (it.hasNext()) {", "+          it.next().acceptVisitor(tc);", "+        }", "+      }", "+      cpd.variables = ctx.getCurrentScopeVariables();", "+    ", "+    Context ctx = new StaticContext(this, c, cpd.variables);", "+    ctx.setAdditionalClassLoaderContainer(classLoader);", "+    ", "+    // Set the arguments values", "+    if (cpd.parameters != null) {", "+      Iterator<FormalParameter> it  = cpd.parameters.iterator();", "+      int      i   = 0;", "+      while (it.hasNext()) {", "+        ctx.set(it.next().getName(), args[i++]);", "+      }", "+    }", "+    ", "+    Object[] result = new Object[0];", "+    ", "+    if (cpd.arguments != null) {", "+      EvaluationVisitor ev = new EvaluationVisitor(ctx);", "+      ListIterator<Expression> it = cpd.arguments.listIterator();", "+      result = new Object[cpd.arguments.size()];  ", "+      int i = 0;", "+      while (it.hasNext()) {", "+        result[i++] = it.next().acceptVisitor(ev);", "+      }", "+    }", "+    ", "+    return result;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd7743699bc0dba43029c1e4ee494b9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "     public Object visit(FunctionCall node)", "signatureAfterChange": "   public Object visit(FunctionCall node)", "diff": ["+   */", "+  public Object visit(FunctionCall node) {", "+    MethodDeclaration md;", "+    md = (MethodDeclaration)node.getProperty(NodeProperties.FUNCTION);", "+    ", "+    // Enter a new scope and define the parameters as local variables", "+    Context c = new GlobalContext(context.getInterpreter());", "+    if (node.getArguments() != null) {", "+      Iterator<FormalParameter> it1  = md.getParameters().iterator();", "+      Iterator<Expression> it2 = node.getArguments().iterator();", "+      while (it1.hasNext()) {", "+        FormalParameter fp = it1.next();", "+        if (fp.isFinal()) {", "+          c.setConstant(fp.getName(), it2.next().acceptVisitor(this));", "+          c.setVariable(fp.getName(), it2.next().acceptVisitor(this));", "+      }", "+    ", "+    // Do the type checking of the body if needed", "+    Node body = md.getBody();", "+    if (!body.hasProperty(\"visited\")) {", "+      body.setProperty(\"visited\", null);", "+      ImportationManager im =", "+        (ImportationManager)md.getProperty(NodeProperties.IMPORTATION_MANAGER);", "+      Context ctx = new GlobalContext(context.getInterpreter());", "+      ctx.setImportationManager(im);", "+      ", "+      NameVisitor nv = new NameVisitor(ctx);", "+      Iterator<FormalParameter> it = md.getParameters().iterator();", "+      while (it.hasNext()) {", "+        it.next().acceptVisitor(nv);", "+      }", "+      body.acceptVisitor(nv);", "+      ", "+      ctx = new GlobalContext(context.getInterpreter());", "+      ctx.setImportationManager(im);", "+      ctx.setFunctions((List<MethodDeclaration>)md.getProperty(NodeProperties.FUNCTIONS)); /**/  //Why does this work???", "+      ", "+      TypeChecker tc = new TypeChecker(ctx);", "+      it = md.getParameters().iterator();", "+      while (it.hasNext()) {", "+        it.next().acceptVisitor(tc);", "+      }", "+      body.acceptVisitor(tc);", "+    ", "+    // Interpret the body of the function", "+    try {", "+      body.acceptVisitor(new EvaluationVisitor(c));", "+    } catch (ReturnException e) {", "+      return e.getValue();", "+    return null;", "+  }", "-     */", "-    public Object visit(FunctionCall node) {", "-\tMethodDeclaration md;", "-\tmd = (MethodDeclaration)node.getProperty(NodeProperties.FUNCTION);", "-", "-\t// Enter a new scope and define the parameters as local variables", "-\tContext c = new GlobalContext(context.getInterpreter());", "-\tif (node.getArguments() != null) {", "-\t    Iterator it  = md.getParameters().iterator();", "-\t    Iterator it2 = node.getArguments().iterator();", "-\t    while (it.hasNext()) {", "-\t\tFormalParameter fp = (FormalParameter)it.next();", "-\t\tif (fp.isFinal()) {", "-\t\t    c.setConstant(fp.getName(), ((Node)it2.next()).acceptVisitor(this));", "-\t\t} else {", "-\t\t    c.setVariable(fp.getName(), ((Node)it2.next()).acceptVisitor(this));", "-\t\t}", "-\t    }", "-\t}", "-", "-\t// Do the type checking of the body if needed", "-\tNode body = md.getBody();", "-\tif (!body.hasProperty(\"visited\")) {", "-\t    body.setProperty(\"visited\", null);", "-\t    ImportationManager im =", "-\t\t(ImportationManager)md.getProperty(NodeProperties.IMPORTATION_MANAGER);", "-\t    Context ctx = new GlobalContext(context.getInterpreter());", "-\t    ctx.setImportationManager(im);", "-", "-\t    Visitor v = new NameVisitor(ctx);", "-\t    Iterator it = md.getParameters().iterator();", "-\t    while (it.hasNext()) {", "-\t\t((Node)it.next()).acceptVisitor(v);", "-\t    }", "-\t    body.acceptVisitor(v);", "-", "-\t    ctx = new GlobalContext(context.getInterpreter());", "-\t    ctx.setImportationManager(im);", "-\t    ctx.setFunctions((List)md.getProperty(NodeProperties.FUNCTIONS));", "-", "-\t    v = new TypeChecker(ctx);", "-\t    it = md.getParameters().iterator();", "-\t    while (it.hasNext()) {", "-\t\t((Node)it.next()).acceptVisitor(v);", "-\t    }", "-\t    body.acceptVisitor(v);", "-\t}", "-", "-\t// Interpret the body of the function", "-\ttry {", "-\t    body.acceptVisitor(new EvaluationVisitor(c));", "-\t} catch (ReturnException e) {", "-\t    return e.getValue();", "-\t}", "-\treturn null;", "-    }"]}], "num": 22157}
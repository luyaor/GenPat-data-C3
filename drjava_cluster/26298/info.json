{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e5809fb29d68035fc3fa6318f78ff5b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5faefd688fc20bec7729b96c67abc824", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 142, "signatureBeforeChange": "   public static <T1, T2, T3, T4> Runnable4<T1, T2, T3, T4>     compose(final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r1,              final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r2)", "signatureAfterChange": "   public static <T1, T2, T3, T4>      Runnable4<T1, T2, T3, T4> compose(Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r1,                                        Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r2)", "diff": ["-  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "-  public static <T1, T2, T3, T4> Runnable4<T1, T2, T3, T4>", "-    compose(final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r1, ", "-            final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r2) {", "-    return new Runnable4<T1, T2, T3, T4>() {", "-      public void run(T1 a1, T2 a2, T3 a3, T4 a4) { ", "-        r1.run(a1, a2, a3, a4); r2.run(a1, a2, a3, a4);", "-      }", "-    };", "+  /** Create a runnable that executes {@code r1} followed by {@code r2} with the same input. */", "+  public static <T1, T2, T3, T4> ", "+    Runnable4<T1, T2, T3, T4> compose(Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r1, ", "+                                      Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r2) {", "+    return new ComposedRunnable4<T1, T2, T3, T4>(IterUtil.<Runnable4<? super T1, ? super T2, ? super T3, ? super T4>>", "+                                                 make(r1, r2));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d222dc2e2dffcf228f0929613e55306", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 137, "signatureBeforeChange": "   public static <T1, T2, T3> Runnable3<T1, T2, T3>      compose(final Runnable3<? super T1, ? super T2, ? super T3> r1,              final Runnable3<? super T1, ? super T2, ? super T3> r2)", "signatureAfterChange": "   public static <T1, T2, T3> Runnable3<T1, T2, T3> compose(Runnable3<? super T1, ? super T2, ? super T3> r1,                                                             Runnable3<? super T1, ? super T2, ? super T3> r2)", "diff": ["-  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "-  public static <T1, T2, T3> Runnable3<T1, T2, T3> ", "-    compose(final Runnable3<? super T1, ? super T2, ? super T3> r1, ", "-            final Runnable3<? super T1, ? super T2, ? super T3> r2) {", "-    return new Runnable3<T1, T2, T3>() {", "-      public void run(T1 a1, T2 a2, T3 a3) { r1.run(a1, a2, a3); r2.run(a1, a2, a3); }", "-    };", "+  /** Create a runnable that executes {@code r1} followed by {@code r2} with the same input. */", "+  public static <T1, T2, T3> Runnable3<T1, T2, T3> compose(Runnable3<? super T1, ? super T2, ? super T3> r1, ", "+                                                           Runnable3<? super T1, ? super T2, ? super T3> r2) {", "+    return new ComposedRunnable3<T1, T2, T3>(IterUtil.<Runnable3<? super T1, ? super T2, ? super T3>>", "+                                             make(r1, r2));", "+  }"]}], "num": 26298}
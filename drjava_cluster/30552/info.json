{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e858567f6f227c75126173de122a9a19", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86ed2d084e1f61a35340e693f1f222fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a3306545963d95b8e7f45728ebf6e03a4f716f60", "commitAfterChange": "cc830d3cfb835e44d2498e98729c28536d682aad", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public synchronized int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public synchronized int findPrevCharPos(int pos, char[] whitespace)     throws BadLocationException", "diff": ["-  public synchronized int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException {", "+  public synchronized int findPrevCharPos(int pos, char[] whitespace)", "+    throws BadLocationException", "+  {", "+    // Check cache", "+    String key = \"findPrevCharPos:\" + pos;", "+    for (int i=0; i < whitespace.length; i++) {", "+      key += \":\" + whitespace[i];", "+    }", "+    Integer cached = (Integer) _checkCache(key);", "+    if (cached != null) {", "+      return cached.intValue();", "+    }", "+    ", "-    final int origLocation = _reduced.absOffset();", "+    final int origLocation = _currentLocation;", "-             // Ignore matching char", "-           } else { ", "-             if(_isEndOfComment(text, i)) {", "-               // Move i past the start of comment characters", "-               // and continue searching", "-               i = i - 1;", "-               _reduced.move(-1);", "-             } else {", "-               // Return position of matching char", "-               _reduced.move(origLocation - i);", "-               return i;", "-             }", "-           }", "+          // Ignore matching char", "+        }", "+        else { ", "+          if(_isEndOfComment(text, i)) {", "+            // Move i past the start of comment characters", "+            // and continue searching", "+            i = i - 1;", "+            _reduced.move(-1);", "+          }", "+          else {", "+            // Return position of matching char", "+            _reduced.move(origLocation - i);", "+            _storeInCache(key, new Integer(i));", "+            return i;", "+          }", "+        }", "+    _storeInCache(key, new Integer(ERROR_INDEX));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9321385c44b433483ce0346de2a49d63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a3306545963d95b8e7f45728ebf6e03a4f716f60", "commitAfterChange": "cc830d3cfb835e44d2498e98729c28536d682aad", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace)     throws BadLocationException", "diff": ["-  public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace) throws BadLocationException {", "+  public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace)", "+    throws BadLocationException", "+  {", "+    // Check cache", "+    String key = \"getFirstNonWSCharPos:\" + pos;", "+    for (int i=0; i < whitespace.length; i++) {", "+      key += \":\" + whitespace[i];", "+    }", "+    Integer cached = (Integer) _checkCache(key);", "+    if (cached != null) {", "+      return cached.intValue();", "+    }", "+    ", "-    final int origLocation = _reduced.absOffset();", "+    final int origLocation = _currentLocation;", "-           } else { ", "-             if(_isStartOfComment(text, i - pos)) {", "-               // Move i past the start of comment characters", "-               // and continue searching", "-               i = i + 1;", "-               _reduced.move(1);", "-             } else {", "-               // Return position of matching char", "-               _reduced.move(origLocation - i);", "-               return i;", "-             }", "-           }", "+        }", "+        else { ", "+          if(_isStartOfComment(text, i - pos)) {", "+            // Move i past the start of comment characters", "+            // and continue searching", "+            i = i + 1;", "+            _reduced.move(1);", "+          }", "+          else {", "+            // Return position of matching char", "+            _reduced.move(origLocation - i);", "+            _storeInCache(key, new Integer(i));", "+            return i;", "+          }", "+        }", "+    _storeInCache(key, new Integer(ERROR_INDEX));"]}], "num": 30552}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65316d1fb2ab493d53370bd1a0a3e16b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38cfa984f3a5716bdb71130f6d30bba6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "commitAfterChange": "22cb21cbc806aa257284ccfb5bed593a93cc9671", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public boolean isOnMatch()", "signatureAfterChange": "   public boolean isOnMatch()", "diff": ["-    int len = _findWord.length();", "-    int off = _current.getOffset();", "-    if(off < len) return false;", "+    String findWord = this._findWord;", "+    int len, off;", "+    len = findWord.length();", "+    if(!_searchBackwards) {", "+      off = _current.getOffset() - len;", "+    } else {", "+      off = _current.getOffset();", "+    }", "+", "+    if(off < 0){", "+      return false;", "+    } else if (off + len > _doc.getLength()){", "+      return false;", "+    }", "+", "-      String matchSpace = _doc.getText(off-len, len);", "-      if (_matchCase)", "-        return matchSpace.equals(_findWord);", "-      else", "-        return matchSpace.toLowerCase().equals(_findWord.toLowerCase());", "+      String matchSpace = _doc.getText(off, len);", "+      if (!_matchCase){", "+        matchSpace = matchSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+      return matchSpace.equals(findWord);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4306b70df0d26c1e30bea12321403c63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "commitAfterChange": "22cb21cbc806aa257284ccfb5bed593a93cc9671", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "    public int replaceAll()", "signatureAfterChange": "   public int replaceAll()", "diff": ["-   */ ", "+   */", "+    try {", "+      if (!_searchBackwards){", "+        _start = _doc.createPosition(0);", "+        setPosition(0);", "+      } else {", "+        _start = _doc.createPosition(_doc.getLength());", "+        setPosition(_doc.getLength());", "+      }", "+    } catch (BadLocationException e) {", "+      throw new UnexpectedException(e);", "+    }", "-    int wrapped = 0; ", "+    int wrapped = 0;", "-    // Checks that the findNext method has found something and has not ", "-    // wrapped once and gone beyond start. ", "-    while (found >= 0 && (wrapped == 0 || found <= _start.getOffset()) && ", "-    wrapped < 2) {", "+    // Checks that the findNext method has found something and has not", "+    // wrapped once and gone beyond start.", "+//    while (found >= 0 && (wrapped == 0 ||", "+//                         ((found < _start.getOffset() + _findWord.length() && !_searchBackwards)  ||", "+//                          (found > _start.getOffset() - _findWord.length() && _searchBackwards))) && wrapped < 2) {", "+", "+    //new while condition, since I started replacing from the beginning/end of the document only", "+    while(wrapped == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d7d7f788986a1d984a94d6d8656e31e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "149feb3f2af1920c19f6930f765f209a93ed7ca6", "commitAfterChange": "fe008ef5062ac4e4b569352517b1df11133d4fdd", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["-  /** Parameterized indentation called from within DJDocument */", "-  public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)", "-    throws OperationCanceledException {", "-    indentLines(selStart, selEnd, reason, pm, _currentLocation);", "-  }", "+  public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)", "+//          Utilities.showDebug(\"selStart = \" + selStart + \" currentLocation = \" + _currentLocation);", "+          Position oldCurrentPosition = createPosition(_currentLocation);", "+          ", "+//          Utilities.showDebug(\"Indenting line at offset \" + selStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4a7ddb9b43f78ae98421de6894d5992", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DocumentRegion.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DocumentRegion(OpenDefinitionsDocument doc, int so, int eo)", "signatureAfterChange": "   public DocumentRegion(OpenDefinitionsDocument doc, int start, int end)", "diff": ["-  public DocumentRegion(OpenDefinitionsDocument doc, int so, int eo) {", "-    this(doc, createPosition(doc, so), createPosition(doc, eo));", "-  }", "+  public DocumentRegion(OpenDefinitionsDocument doc, int start, int end) {", "+    try {", "+      _startPosition = doc.createPosition(start);", "+      _endPosition = doc.createPosition(end);", "+    }", "+    catch(BadLocationException e) { throw new UnexpectedException(e); }"]}], "num": 19005}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6851e80e28d0f0a92d46acc76142d3b8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48a09dfd50fe6ac0bcdfbf37e2b71be9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "4b21424812450d42c0dde2aef3c483c11b298e24", "commitAfterChange": "ede26ceaad5c407d940ac773a5e7f457dc1f5187", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 56, "signatureBeforeChange": "   private boolean validUncheckedCast(Type target, Type source)", "signatureAfterChange": "       @Override public Boolean forPrimitiveType(PrimitiveType that)", "diff": ["+      public abstract boolean recur(Type that);", "+      @Override public Boolean forPrimitiveType(PrimitiveType that) {", "+        return !isSubtype(that, _other) && !isSubtype(_other, that);", "+      }", "-   */", "-  private boolean validUncheckedCast(Type target, Type source) {", "-    return isSubtype(target, erase(source)) || isSubtype(source, erase(target));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c892204c488c4b476bbaa5d204d96979", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 259, "signatureBeforeChange": "       public Type forParameterizedClassType(ParameterizedClassType t)", "signatureAfterChange": "     public boolean hasMatch(Type t)", "diff": ["-      public Type forRawClassType(RawClassType t) { return immediateSupertype(t); }", "-      public Type forParameterizedClassType(ParameterizedClassType t) { return immediateSupertype(t); }", "+    /** Test whether a search of the given type produces at least one result. */", "+    public boolean hasMatch(Type t) { return !IterUtil.isEmpty(findFirst(t)); }"]}], "num": 27690}
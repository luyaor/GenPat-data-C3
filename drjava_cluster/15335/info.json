{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1899e90f5076d714d8c24ac2e46ef8c2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ffcb846fa047d998e2dd0f844361796", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)     throws BadLocationException", "diff": ["-    String key = \"findPrevDelimiter:\" + pos;", "-    for (int i = 0; i < delims.length; i++) { key += \":\" + delims[i]; }", "-    key += \":\" + skipParenPhrases;", "+    StringBuffer keyBuf = new StringBuffer(\"findPrevDelimiter:\").append(pos);", "+    for (char ch: delims) { keyBuf.append(':').append(ch); }", "+    keyBuf.append(':').append(skipParenPhrases);", "+    String key = keyBuf.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fe70ceda56dc82d0a36af6d7df6c33a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments)      throws BadLocationException", "signatureAfterChange": "   public int getFirstNonWSCharPos(int pos, char[] whitespace, boolean acceptComments)      throws BadLocationException", "diff": ["-    String key = \"getFirstNonWSCharPos:\" + pos;", "-    for (int i = 0; i < whitespace.length; i++) { key += \":\" + whitespace[i]; }", "+    StringBuffer keyBuf = new StringBuffer(\"getFirstNonWSCharPos:\").append(pos);", "+    for (char ch: whitespace) { keyBuf.append(':').append(ch); }", "+    String key = keyBuf.toString();", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad46e4713c188adf4c201c10059cc2a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public int findPrevCharPos(int pos, char[] whitespace)     throws BadLocationException", "signatureAfterChange": "   public int findPrevCharPos(int pos, char[] whitespace)     throws BadLocationException", "diff": ["-    String key = \"findPrevCharPos:\" + pos;", "-    for (int i = 0; i < whitespace.length; i++) { key += \":\" + whitespace[i]; }", "+    StringBuffer keyBuf = new StringBuffer(\"findPrevCharPos:\").append(pos);", "+    for (char ch: whitespace) { keyBuf.append( ':').append(ch); }", "+    String key = keyBuf.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc2fee3a10f10ee3b40b49f7e7fd4fa4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException", "diff": ["-    String key = \"getIndentOfCurrStmt:\" + pos;", "-    for (int i=0; i < delims.length; i++) {", "-      key += \":\" + delims[i];", "-    }", "+    StringBuffer keyBuf = new StringBuffer(\"getIndentOfCurrStmt:\").append(pos);", "+    for (char ch: delims) { keyBuf.append(':').append(ch); }", "+    String key = keyBuf.toString();", "+    ", "-    if (cached != null) {", "-      return cached;", "-    }", "+    if (cached != null) return cached;", "-    boolean ignoreParens;", "+    boolean ignoreParens = posInParenPhrase(prevDelimiter);", "-      ignoreParens = posInParenPhrase(prevDelimiter);", "-        if ((prevDelimiter > 0) && (prevDelimiter < getLength()) &&", "-            (getText(prevDelimiter,1).charAt(0) == '{')) {", "+        if (prevDelimiter > 0 && prevDelimiter < getLength() && getText(prevDelimiter,1).charAt(0) == '{')", "-        }", "-      catch (BadLocationException e) {", "-        // Shouldn't happen", "-        throw new UnexpectedException(e);", "-      }", "+      catch (BadLocationException e) { throw new UnexpectedException(e); }", "+      ", "-      if(prevDelimiter == ERROR_INDEX) {", "+      if (prevDelimiter == ERROR_INDEX) {", "-    } while(posInParenPhrase(prevDelimiter));  // this is being calculated twice...", "+      ignoreParens = posInParenPhrase(prevDelimiter);", "+    } while (ignoreParens);  ", "+    ", "-    if(reachedStart) {", "-      nextNonWSChar = getFirstNonWSCharPos(DOCSTART);", "-    }", "-    else {", "+    if (reachedStart) nextNonWSChar = getFirstNonWSCharPos(DOCSTART);", "+    else", "-    }", "+    ", "-    if(nextNonWSChar == ERROR_INDEX) {", "-      nextNonWSChar = getLength();", "-    }", "+    if (nextNonWSChar == ERROR_INDEX) nextNonWSChar = getLength();", "-    try {", "-      lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt);", "-    }", "-    catch(BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "+    try { lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt); }", "+    catch(BadLocationException e) { throw new UnexpectedException(e); }"]}], "num": 15335}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29a116e3cb604cd3cb7d5f927fb35a7a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa4be443b6af5f56cbfe3752cdc4b19", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "     public Object visit(SubtractExpression node)", "signatureAfterChange": "   public Class visit(SubtractExpression node)", "diff": ["+   */", "+  public Class visit(SubtractExpression node) {", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ln.acceptVisitor(this);", "+    rn.acceptVisitor(this);", "+    Class c = visitNumericExpression(node, \"subtraction.type\");", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.subtract(c,", "+                                       ln.getProperty(NodeProperties.VALUE),", "+                                       rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }", "-     */", "-    public Object visit(SubtractExpression node) {", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-        ln.acceptVisitor(this);", "-        rn.acceptVisitor(this);", "-        Class c = visitNumericExpression(node, \"subtraction.type\");", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.subtract(c,", "-                                               ln.getProperty(NodeProperties.VALUE),", "-                                               rn.getProperty(NodeProperties.VALUE)));", "-        }", "-        return c;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9983e126e9daec5c36fdd5b634d0c58f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "     public Object visit(MultiplyExpression node)", "signatureAfterChange": "   public Class visit(MultiplyExpression node)", "diff": ["+   */", "+  public Class visit(MultiplyExpression node) {", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ln.acceptVisitor(this);", "+    rn.acceptVisitor(this);", "+    Class c = visitNumericExpression(node, \"multiplication.type\");", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.multiply(c,", "+                                       ln.getProperty(NodeProperties.VALUE),", "+                                       rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }", "-     */", "-    public Object visit(MultiplyExpression node) {", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-        ln.acceptVisitor(this);", "-        rn.acceptVisitor(this);", "-        Class c = visitNumericExpression(node, \"multiplication.type\");", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.multiply(c,", "-                                               ln.getProperty(NodeProperties.VALUE),", "-                                               rn.getProperty(NodeProperties.VALUE)));", "-        }", "-        return c;", "-    }"]}], "num": 14443}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93ad2fc9008cb4c4ee350740d0f22508", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2412ab33d506dbd6cf51454e977552eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void testMatchBraceText()", "signatureAfterChange": "   public void testMatchBraceText()", "diff": ["-    try{", "-      DefinitionsPane definitions = _frame.getCurrentDefPane();", "-      OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "-      _assertDocumentEmpty(doc, \"before testing\");", "-      doc.insertString(0, ", "-                       \"{\\n\" +", "-                       \"public class Foo {\\n\" + //21", "-                       \"  private int whatev\\n\" + //42", "-                       \"  private void _method()\\n\" + //67", "-                       \"  {\\n\" + //71", "-                       \"     do stuff\\n\" + //85", "-                       \"     new Object() {\\n\" + //105", "-                       \"         }\\n\" + //116", "-                       \"  }\\n\" +", "-                       \"}\" +", "-                       \"}\"", "-                         , null);", "-      ", "-      String fileName = doc.getCompletePath();", "-      ", "-      definitions.setCaretPosition(4);", "-      assertEquals(\"Should display the document path\", fileName, _frame.getFileNameField());", "-      definitions.setCaretPosition(115);", "-      assertEquals(\"Should display the line matched\", \"Matches:      new Object() {\", _frame.getFileNameField());", "-      definitions.setCaretPosition(102);", "-      assertEquals(\"Should display the document matched\", fileName, _frame.getFileNameField());", "-      definitions.setCaretPosition(119);", "-      assertEquals(\"Should display the line matched\", \"Matches:   private void _method()...{\", _frame.getFileNameField());", "-      definitions.setCaretPosition(121);", "-      assertEquals(\"Should display the line matched\", \"Matches: public class Foo {\", _frame.getFileNameField());", "-      definitions.setCaretPosition(122);", "-      assertEquals(\"Should display only one brace when matching an open brace that is the first character in a line\",", "-                   \"Matches: {\", _frame.getFileNameField());", "-    }", "-    catch (BadLocationException e) {throw new UnexpectedException(e);}", "-  }", "+    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+    Utilities.clearEventQueue();", "+    ", "+    _assertDocumentEmpty(doc, \"before testing\");", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        doc.append( ", "+                   \"{\\n\" +", "+                   \"public class Foo {\\n\" + //21", "+                   \"  private int whatev\\n\" + //42", "+                   \"  private void _method()\\n\" + //67", "+                   \"  {\\n\" + //71", "+                   \"     do stuff\\n\" + //85", "+                   \"     new Object() {\\n\" + //105", "+                   \"         }\\n\" + //116", "+                   \"  }\\n\" +", "+                   \"}\" +", "+                   \"}\"", "+                     , null);", "+        ", "+        definitions.setCaretPosition(4); ", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    ", "+    /* Ensure that DocumentListeners complete. */", "+    Utilities.clearEventQueue(); ", "+    ", "+    final String fileName = doc.getCompletePath();", "+", "+    assertEquals(\"Should display the document path\", fileName, _result);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(115); ", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display the line matched\", \"Matches:      new Object() {\", _result);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(102);", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display the document matched\", fileName, _result);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(119); ", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display the line matched\", \"Matches:   private void _method()...{\", _result);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(121); ", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display the line matched\", \"Matches: public class Foo {\", _frame.getFileNameField());", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(122);", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display only one brace when matching an open brace that is the first character in a line\",", "+                 \"Matches: {\", _result);", "+    ", "+    _log.log(\"testMatchBraceTest completed\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca11cff7162029843bbea499e21098e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testShiftBackspace() throws BadLocationException", "signatureAfterChange": "   public void testShiftBackspace() throws BadLocationException", "diff": ["-    DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+//    _log.log(\"Starting testShiftBackSpace\");", "+    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "-    doc.insertString(0, \"test\", null);", "-    definitions.setCaretPosition(4);", "-    int shiftBackspaceCode =", "-      OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "-    // The following is the sequence of key events for shift+backspace", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftBackspaceCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftBackspaceCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        doc.append(\"test\", null);", "+        definitions.setCaretPosition(4);", "+    ", "+        int shiftBackspaceCode = OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "+        ", "+        // The following is the sequence of key events for shift+backspace", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+                                                 InputEvent.SHIFT_MASK, shiftBackspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        _log.log(\"first key event processed\");", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+                                                 InputEvent.SHIFT_MASK, shiftBackspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        _log.log(\"second key event processed\");", "+      }", "+    });", "+    _log.log(\"Halfway through testShiftBackspace\");", "-    int shiftDeleteCode =", "-      OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "-    definitions.setCaretPosition(1);", "-    // The following is the sequence of key events for shift+delete", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftDeleteCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftDeleteCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        int shiftDeleteCode =", "+          OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "+        definitions.setCaretPosition(1);", "+        // The following is the sequence of key events for shift+delete", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), InputEvent.SHIFT_MASK,", "+                                                 shiftDeleteCode, KeyEvent.CHAR_UNDEFINED));", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), InputEvent.SHIFT_MASK,", "+                                                 shiftDeleteCode, KeyEvent.CHAR_UNDEFINED));", "+      }", "+    });", "+    ", "+    _log.log(\"testShiftBackSpace completed\");"]}], "num": 26599}
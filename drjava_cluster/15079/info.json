{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5174b494829077b053a4e88ae2175881", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "130445aff05c4aa66da00a665493cbdb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public Object visit(ObjectFieldAccess node)", "signatureAfterChange": "   public Node visit(ObjectFieldAccess node)", "diff": ["+   */", "+  public Node visit(ObjectFieldAccess node) {", "+    // Visit the expression", "+    Node o = node.getExpression().acceptVisitor(this);", "+    if (o != null) {", "+      if (o instanceof ReferenceType) {", "+        return new StaticFieldAccess((ReferenceType)o,", "+                                     node.getFieldName(),", "+                                     node.getFilename(),", "+                                     node.getBeginLine(),", "+                                     node.getBeginColumn(),", "+                                     node.getEndLine(),", "+                                     node.getEndColumn()", "+      );", "+      } else {", "+        node.setExpression((Expression)o);", "+      }", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(ObjectFieldAccess node) {", "-        // Visit the expression", "-        Object o = node.getExpression().acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof ReferenceType) {", "-                return new StaticFieldAccess((ReferenceType)o,", "-\t\t\t\t\t     node.getFieldName(),", "-\t\t\t\t\t     node.getFilename(),", "-\t\t\t\t\t     node.getBeginLine(),", "-\t\t\t\t\t     node.getBeginColumn(),", "-\t\t\t\t\t     node.getEndLine(),", "-\t\t\t\t\t     node.getEndColumn());", "-            } else {", "-                node.setExpression((Expression)o);", "-            }", "-        }", "-\treturn null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39dc92755e2ef33231077a845745cfe2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 77, "signatureBeforeChange": "     private void visitBinaryExpression(BinaryExpression node)", "signatureAfterChange": "   private void visitBinaryExpression(BinaryExpression node)", "diff": ["+   */", "+  private void visitBinaryExpression(BinaryExpression node) {", "+    // Visit the left expression", "+    Node o = node.getLeftExpression().acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,node);", "+      node.setLeftExpression((Expression)o);", "+      }", "+    ", "+    // Visit the right expression", "+    o = node.getRightExpression().acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,node);", "+      node.setRightExpression((Expression)o);", "+    }", "+  }", "-     */", "-    private void visitBinaryExpression(BinaryExpression node) {", "-        // Visit the left expression", "-        Object o = node.getLeftExpression().acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof Expression) {", "-                node.setLeftExpression((Expression)o);", "-            } else {", "-                throw new ExecutionError(\"left.operand\", node);", "-            }", "-        }", "-", "-        // Visit the right expression", "-        o = node.getRightExpression().acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof Expression) {", "-                node.setRightExpression((Expression)o);", "-            } else {", "-                throw new ExecutionError(\"right.operand\", node);", "-            }", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1e0b79d10565f1830a1b7e1da5dc4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "7100bfae3584eff8b8b1993fd999385d8f88ea13", "commitAfterChange": "6bcdef7d4202e06be1c5717fc181a0fdfcc7756a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private void _updateMenuItem (KeyStrokeData data)", "signatureAfterChange": "      private void updateMenuItem(KeyStrokeData data)", "diff": ["+  ", "+  private void updateMenuItem(KeyStrokeData data) {", "+    JMenuItem jmi = data.getJMenuItem();", "+    ", "+    // Check associated Menu Item. If jmi is null, this keystroke maps to an action that isn't in the menu", "+    if (jmi != null) {", "+      Vector<KeyStroke> keys = data.getKeyStrokes();", "+      if (keys.size()>0) {", "+        // Since we can have multiple keys mapped to the same action, we use the first key as menu item accelerator", "+        jmi.setAccelerator(keys.get(0));", "+      }", "+      else {", "+        // Clear the menu item's accelerator", "+        jmi.setAccelerator(null);", "+      }", "+    }", "+  }", "-    private void _updateMenuItem (KeyStrokeData data) {", "-      JMenuItem jmi = data.getJMenuItem();", "-", "-      //Check associated Menu Item", "-      // If jmi is null, this keystroke maps to an action that isn't in the menu", "-      if (jmi != null) {", "-        KeyStroke ks = data.getKeyStroke();", "-        if (ks != KeyStrokeOption.NULL_KEYSTROKE) {", "-          // If ks is NULL_KEYSTROKE, we don't want it \"active\", since some", "-          //  Windows keys generate NULL_KEYSTROKE", "-          jmi.setAccelerator(ks);", "-        }", "-        else {", "-          // Clear the menu item's accelerator", "-          jmi.setAccelerator(null);", "-        }", "-    }"]}], "num": 15079}
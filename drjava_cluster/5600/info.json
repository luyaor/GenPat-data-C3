{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e954827eabd3b673b09840d68267c56b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3621e047da4c93381c429d87a4ed9a19", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "8a3aaf6e3fe6fafb27249a8ad4b2c013ef4ae05a", "commitAfterChange": "102797244429ae58868d0037b49467f5a00bbd6a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public void windowDeactivated(WindowEvent ev)", "signatureAfterChange": "      private PageChangerUpdater createPageChanger()", "diff": ["-    public void windowDeactivated(WindowEvent ev) {}", "+  ", "+  private PageChangerUpdater createPageChanger() {", "+    //_pageTextField.setAction(_goToPageAction);", "+    // _goToPageAction.putValue(Action.SHORT_DESCRIPTION, \"Goto Page\");", "+    try {", "+      Class spinnerClass = Class.forName(\"javax.swing.JSpinner\");", "+      final JComponent spinner = (JComponent) spinnerClass.newInstance();", "+      final Method getter = spinnerClass.getMethod(\"getValue\",null);", "+      Object model = callMethod(spinner,spinnerClass,\"getModel\",null,null);", "+      Class modelClass = model.getClass();", "+      Class[] ca = new Class[] {Comparable.class};", "+      Object[] aa = new Object[] {new Integer(1)};", "+      callMethod(model,modelClass,\"setMinimum\",ca,aa);", "+      aa[0] = new Integer(_print.getNumberOfPages());", "+      callMethod(model,modelClass,\"setMaximum\",ca,aa);", "+      ca[0] = ChangeListener.class;", "+      aa[0] = new ChangeListener() {", "+        public void stateChanged(ChangeEvent ev) {", "+          int num = _pageNumber;", "+          try {", "+            num = ((Number) getter.invoke(spinner,null)).intValue()-1;", "+            if((num >= 0) && (num < _print.getNumberOfPages())) {", "+              _goToPage(num);", "+            } else {", "+            _updateActions();", "+            }", "+          } catch(Exception ex) {", "+            _updateActions();", "+          }", "+        }", "+      };", "+      callMethod(spinner,spinnerClass,\"addChangeListener\",ca,aa);", "+      return new JSpinnerChanger(spinnerClass,spinner);", "+    } catch(Exception e) {", "+      /** Displays the previous page of the document. */", "+      final JTextField tf = new JTextField();", "+      tf.addActionListener(new ActionListener() {", "+        public void actionPerformed(ActionEvent ae) {", "+          try {", "+            int pageToGoTo = Integer.parseInt(tf.getText()) - 1;", "+            ", "+            if ((pageToGoTo < 0) || (pageToGoTo >= _print.getNumberOfPages())) {", "+              _updateActions();", "+            } else {", "+              _goToPage(pageToGoTo);", "+            }", "+          } catch (NumberFormatException e) {", "+            _updateActions();", "+          }", "+        }", "+      });", "+      return new JTextFieldChanger(tf);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8d7426a0e3b19f9a78d60fd29d8e191", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testCancelOpenMultipleFiles() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCancelOpenMultipleFiles() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestIOListener() {", "+    final TestListener listener = new TestIOListener() {", "-    try {", "-      //OpenDefinitionsDocument newDoc =", "-      _model.openFiles(new CancelingSelector());", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // we expect this to be thrown", "-    }", "-    finally {", "-      assertNumOpenDocs(3);", "-      listener.assertOpenCount(0);", "-      listener.assertCloseCount(0);", "-      ", "-      List<OpenDefinitionsDocument> docs = _model.getSortedOpenDefinitionsDocuments();", "-      doc1 = docs.get(1);", "-      assertModified(true, doc1);", "-      assertContents(FOO_TEXT, doc1);", "-      ", "-      doc2 = docs.get(2);", "-      assertModified(true, doc2);", "-      assertContents(BAR_TEXT, doc2);", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          try {", "+            //OpenDefinitionsDocument newDoc =", "+            _model.openFiles(new CancelingSelector());", "+          }", "+          catch (AlreadyOpenException aoe) {", "+            // Should not be open", "+            fail(\"File was already open!\");", "+          }", "+          catch (OperationCanceledException oce) {", "+            // we expect this to be thrown", "+          }", "+          finally {", "+            assertNumOpenDocs(3);", "+            listener.assertOpenCount(0);", "+            listener.assertCloseCount(0);", "+            ", "+            List<OpenDefinitionsDocument> docs = _model.getSortedOpenDefinitionsDocuments();", "+            OpenDefinitionsDocument newDoc1 = docs.get(1);", "+            assertModified(true, newDoc1);", "+            assertContents(FOO_TEXT, newDoc1);", "+            ", "+            OpenDefinitionsDocument newDoc2 = docs.get(2);", "+            assertModified(true, newDoc2);", "+            assertContents(BAR_TEXT, newDoc2);", "+          }", "+        }", "+        catch (Exception e) {", "+          // should never happen", "+          fail(\"Exception thrown in testCancelOpenMultipleFiles.  Traceback: \\n\" + e);", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf1bdf0b7c994cbd7254390ae5a06d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 47, "signatureBeforeChange": "   private void _attachToVM() throws DebugException", "signatureAfterChange": "   private void _attachToVM() throws DebugException", "diff": ["-  /** Handles the details of attaching to the interpreterJVM. Assume lock is already held. */", "-  private void _attachToVM() throws DebugException {", "-    // Blocks until the interpreter has registered if hasn't already.  Blocks all synchronized methods in this class.", "-    _model.waitForInterpreter();", "-", "-    // Get the connector", "-    AttachingConnector connector = _getAttachingConnector();", "-", "-    // Try to connect on our debug port", "-    Map<String, Connector.Argument> args = connector.defaultArguments();", "-    Connector.Argument port = args.get(\"port\");", "-    Connector.Argument host = args.get(\"hostname\");", "-    try {", "-      int debugPort = _model.getDebugPort();", "-      port.setValue(\"\" + debugPort);", "-      host.setValue(\"127.0.0.1\"); // necessary if hostname can't be resolved", "-      _vm = connector.attach(args);", "-      _eventManager = _vm.eventRequestManager();", "-    }", "-    catch(Exception e) { throw new DebugException(\"Could not connect to VM: \" + e); }", "-", "-    _interpreterJVM = _getInterpreterJVMRef();", "-  }", "+  /** Handles the details of attaching to the interpreterJVM. Assume lock is already held. */", "+  private void _attachToVM() throws DebugException {", "+    // Blocks until the interpreter has registered if hasn't already.  Blocks all synchronized methods in this class.", "+    _model.waitForInterpreter();", "+", "+    // Get the connector", "+    AttachingConnector connector = _getAttachingConnector();", "+", "+    // Try to connect on our debug port", "+    Map<String, Connector.Argument> args = connector.defaultArguments();", "+    Connector.Argument port = args.get(\"port\");", "+    Connector.Argument host = args.get(\"hostname\");", "+    try {", "+      int debugPort = _model.getDebugPort();", "+      port.setValue(\"\" + debugPort);", "+      host.setValue(\"127.0.0.1\"); // necessary if hostname can't be resolved", "+      _vm = connector.attach(args);", "+      _eventManager = _vm.eventRequestManager();", "+    }", "+    catch(Exception e) { throw new DebugException(\"Could not connect to VM: \" + e); }", "+", "+    _interpreterJVM = (ObjectReference) _getStaticField(_getClass(InterpreterJVM.class.getName()), \"ONLY\");", "+  }"]}], "num": 5600}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e2c396d854b131382cefe979551a5e5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ac780df88b3b47fb8f266652a6f5244", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "4b6c56880670c4bb0f37de6a58c9d30d501c274a", "commitAfterChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   private void _switchPaneFocus(boolean next)", "signatureAfterChange": "   private synchronized void _switchPaneFocus(boolean next)", "diff": ["-  private void _switchPaneFocus(boolean next) {", "+  private synchronized void _switchPaneFocus(boolean next) {", "+    int numTabs = _tabbedPane.getTabCount();", "+    int selectedIndex = _tabbedPane.getSelectedIndex();", "-//      if (_currentDefPane.hasFocus()) {", "-        _switchToPane(_interactionsPane);", "-//      }     ", "-//      else if (_interactionsPane.hasFocus()) {", "-//        _switchToPane(_consolePane);", "-//      }", "-//      else if (_consolePane.hasFocus()) {", "-//        _switchToPane(_currentDefPane);", "-//      }", "+      if (_currentDefPane.hasFocus()) {", "+        // switch to the first tab if there is one", "+        if (numTabs > 0) {          ", "+          _switchToPane(_tabbedPane.getComponentAt(0));", "+        }", "+      }     ", "+      else if (numTabs == selectedIndex + 1) {", "+        // we're at the last tab, switch to the current def pane", "+        _switchToPane(_currentDefPane);", "+      }", "+      else {", "+        // switch to the next tab pane", "+        _switchToPane(_tabbedPane.getComponentAt(selectedIndex + 1));", "+      }", "-//      if (_interactionsPane.hasFocus()) {", "+      if (_currentDefPane.hasFocus()) {", "+        // switch to the last tab if there is one", "+        if (numTabs > 0) {          ", "+          _switchToPane(_tabbedPane.getComponentAt(numTabs - 1));", "+        }", "+      }     ", "+      else if (selectedIndex == 0) {", "+        // we're at the first tab, switch to the current def pane", "-//      }", "-//      else if (_currentDefPane.hasFocus()) {", "-//        _switchToPane(_consolePane);", "-//      }", "-//      else if (_consolePane.hasFocus()) {", "-//        _switchToPane(_interactionsPane);", "-//      }", "+      }", "+      else {", "+        // switch to the previous tab pane", "+        _switchToPane(_tabbedPane.getComponentAt(selectedIndex - 1));", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbba3ed0c5c8a427bda69456f15ef8fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhrase.java", "commitBeforeChange": "1cb762451f589947c585a2a219ca59cd916faaa1", "commitAfterChange": "33157731339c994882aa1f63ed4a691707c328ca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    throw new RuntimeException(\"Not yet implemented.\");", "-    ", "-    /**", "-    int startPos = startOfLine(doc, pos);", "-    IndentInfo ii = doc.getIndentInfo(pos);", "-    int delimPos = findPrevDelimiter(doc, startPos, {';',',','(','['});", "-    return (non-WS/comment after delimPos?);", "-", "-    */", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      if (startLine > DefinitionsDocument.DOCSTART) {", "+        // Find previous delimiter", "+        char[] delims = {';', ',', '(', '['};", "+        int prevDelim = doc.findPrevDelimiter(here, delims);", "+        ", "+        if (prevDelim == DefinitionsDocument.ERROR_INDEX) {", "+          return false;", "+        }", "+        ", "+        // Make sure the delim is the previous non-WS char", "+        int nextNonWS = doc.getFirstNonWSCharPos(prevDelim + 1);", "+        if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "+          nextNonWS = startLine;", "+        }", "+        return (nextNonWS >= startLine);", "+      }", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }", "+    // On first line", "+    return false;"]}], "num": 10771}
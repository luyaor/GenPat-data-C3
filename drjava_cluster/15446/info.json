{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72a620242d5a8bb989cad86d581aa028", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15d47d1e766c09d55182b35c8539d85e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private synchronized void _stepHelper(int flag, boolean shouldNotify)     throws DebugException", "signatureAfterChange": "   private synchronized void _stepHelper(int flag, boolean shouldNotify)     throws DebugException", "diff": ["-    List steps = _eventManager.stepRequests();  // Add parameterization <StepRequest>. JDK 1.5 will eliminate this type warning", "+    List<StepRequest> steps = _eventManager.stepRequests();  // Added parameterization <StepRequest>. JDK 1.5 will eliminate this type warning", "-      StepRequest step = (StepRequest)steps.get(i);", "+      StepRequest step = steps.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "293832d4288b4e0f13e1b6f3e1e2cd62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private synchronized void _stepHelper(int flag, boolean shouldNotify)     throws DebugException", "signatureAfterChange": "   private synchronized void _stepHelper(int flag, boolean shouldNotify)     throws DebugException", "diff": ["-    List steps = _eventManager.stepRequests();  // Add parameterization <StepRequest>. JDK 1.5 will eliminate this type warning", "+    List<StepRequest> steps = _eventManager.stepRequests();  // Added parameterization <StepRequest>. JDK 1.5 will eliminate this type warning", "-      StepRequest step = (StepRequest)steps.get(i);", "+      StepRequest step = steps.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ec0f7cfc2d7fa38614dfd1c74249bc3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDABreakpoint.java", "commitBeforeChange": "fa92455fedb412729f98f82d7ebe32526434dfc9", "commitAfterChange": "901df797e3b0df4a97e4f748f929fa2a582d5380", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected void _createRequests(Vector<ReferenceType> refTypes) throws DebugException", "signatureAfterChange": "   protected void _createRequests(Vector<ReferenceType> refTypes) throws DebugException", "diff": ["-        List lines = rt.locationsOfLine(_lineNumber);", "+        List<Location> lines = rt.locationsOfLine(_lineNumber);", "-        Location loc = (Location) lines.get(0);", "+        Location loc = lines.get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e6554d31cb3ab771c11ce55567ee66", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InteractionsProcessor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public String preProcess(String s) throws ParseException", "signatureAfterChange": "   public String preProcess(String s) throws ParseException", "diff": ["-    InteractionsInput tree = new GJParser( new StringReader( s ) ).InteractionsInput();", "-    JavaASTVisitor typeEraser = new TypeEraser();", "-    JavaAST typeErasedTree = (JavaAST) tree.accept( typeEraser );", "-    String source =  InteractionsPrinter.generateSource( typeErasedTree );", "+    InteractionsInput tree = new GJParser(new StringReader(s)) . InteractionsInput();", "+    JavaASTVisitor<JavaAST> typeEraser = new TypeEraser();", "+    JavaAST typeErasedTree = tree.accept(typeEraser);", "+    String source =  InteractionsPrinter.generateSource(typeErasedTree);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "643e7f44cbc21bef5ec62a4dd494fc3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public synchronized void scrollToSource(DebugStackData stackData)     throws DebugException", "signatureAfterChange": "   public synchronized void scrollToSource(DebugStackData stackData)     throws DebugException", "diff": ["-    Iterator i = null;", "+    Iterator<StackFrame> i = null;", "-      i = threadRef.frames().iterator();", "+      i = threadRef.frames().iterator(); // JDK 1.5 will eliminate this warning", "-      StackFrame frame = (StackFrame) i.next();", "+      StackFrame frame = i.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "948e7c6be7d305f3c01271dd6f619398", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected ObjectReference _getInterpreterJVMRef()     throws DebugException", "signatureAfterChange": "   protected ObjectReference _getInterpreterJVMRef()     throws DebugException", "diff": ["-    List referenceTypes = _vm.classesByName(className);  // Add parameterization <ReferenceType>. JDK 1.5 will eliminate this check", "+    List<ReferenceType> referenceTypes = _vm.classesByName(className);  // Added parameterization <ReferenceType>. JDK 1.5 will eliminate this warning", "-      ReferenceType rt = (ReferenceType)referenceTypes.get(0);", "+      ReferenceType rt = referenceTypes.get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b022d5ba73b3a085866dfa4b547f6705", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected ObjectReference _getInterpreterJVMRef()     throws DebugException", "signatureAfterChange": "   protected ObjectReference _getInterpreterJVMRef()     throws DebugException", "diff": ["-    List referenceTypes = _vm.classesByName(className);  // Add parameterization <ReferenceType>. JDK 1.5 will eliminate this check", "+    List<ReferenceType> referenceTypes = _vm.classesByName(className);  // Added parameterization <ReferenceType>. JDK 1.5 will eliminate this warning", "-      ReferenceType rt = (ReferenceType)referenceTypes.get(0);", "+      ReferenceType rt = referenceTypes.get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c685ace3e2e79095d9542fe7fed32126", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   private String _getValue(Value value) throws DebugException", "signatureAfterChange": "   private String _getValue(Value value) throws DebugException", "diff": ["-    List toStrings = rt.methodsByName(\"toString\");", "+    List<Method> toStrings = rt.methodsByName(\"toString\");  // JDK 1.5 will eliminate this warning", "-    Method method = (Method)toStrings.get(0);", "+    Method method = toStrings.get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f14d493ef47b392a321cb747697f9f0c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   private String _getValue(Value value) throws DebugException", "signatureAfterChange": "   private String _getValue(Value value) throws DebugException", "diff": ["-    List toStrings = rt.methodsByName(\"toString\");", "+    List<Method> toStrings = rt.methodsByName(\"toString\");  // JDK 1.5 will eliminate this warning", "-    Method method = (Method)toStrings.get(0);", "+    Method method = toStrings.get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c7ecb741a27fbfd9eadb607e23455d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public synchronized void scrollToSource(DebugStackData stackData)     throws DebugException", "signatureAfterChange": "   public synchronized void scrollToSource(DebugStackData stackData)     throws DebugException", "diff": ["-    Iterator i = null;", "+    Iterator<StackFrame> i = null;", "-      i = threadRef.frames().iterator();", "+      i = threadRef.frames().iterator(); // JDK 1.5 will eliminate this warning", "-      StackFrame frame = (StackFrame) i.next();", "+      StackFrame frame = i.next();"]}], "num": 15446}
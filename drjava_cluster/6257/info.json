{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcdfb467fb158a917391830417e79376", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "644961f9001159e372d351d8d2553f1c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public Object visit(DivideAssignExpression node)", "signatureAfterChange": "   public Object visit(DivideAssignExpression node)", "diff": ["-    Object lhs = mod.prepare(this, context);", "+    Object lhs = mod.prepare(this, context);", "+    Object rhs = node.getRightExpression().acceptVisitor(this);", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "-    Object result = InterpreterUtilities.divide", "-      (NodeProperties.getType(node),", "-       lhs,", "-       node.getRightExpression().acceptVisitor(this));", "+    Object result = InterpreterUtilities.divide(calcType, lhs, rhs);", "-    result = performCast(NodeProperties.getType(left), result);", "+    result = performCast(calcType, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de5578ccf9d54cea4c98ea322a7bb367", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "   public Object visit(BitAndAssignExpression node)", "signatureAfterChange": "   public Object visit(BitAndAssignExpression node)", "diff": ["-    Object lhs = mod.prepare(this, context);", "+    Object lhs = mod.prepare(this, context);", "+    Object rhs = node.getRightExpression().acceptVisitor(this);", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "-    Object result = InterpreterUtilities.bitAnd", "-      (NodeProperties.getType(node),", "-       lhs,", "-       node.getRightExpression().acceptVisitor(this));", "+    Object result = InterpreterUtilities.bitAnd(calcType, lhs,rhs);", "-    result = performCast(NodeProperties.getType(left), result);", "+    result = performCast(calcType, result);", "+"]}], "num": 6257}
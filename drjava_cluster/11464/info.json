{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ed360302f72eb81f6e408b9c9bacf66", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13c6ff72ff39123d38785454ae2a98d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "ac74694bc04d721627e42d2b643f6ad2c115d536", "commitAfterChange": "292a7b0b5fa9ea11914642715c7c5f691490df9f", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void testClassFileSynchronizationAfterRename()     throws BadLocationException, IOException, IllegalStateException,     InterruptedException", "signatureAfterChange": "   public void testClassFileSynchronizationAfterRename()     throws BadLocationException, IOException, IllegalStateException,     InterruptedException", "diff": ["-    _model.setResetAfterCompile(false);", "-    ", "+    assertTrue(_name() + \"Class file should not exist before compile\", ", "+               doc.getDocument().getCachedClassFile() == null);", "-    //synchronized(listener) {", "-      doc.startCompile();", "-      if (_model.getNumErrors() > 0) {", "-        fail(\"compile failed: \" + getCompilerErrorString());", "-      }", "-      //listener.wait();", "-    //}", "+    doc.startCompile();", "+    if (_model.getNumErrors() > 0) {", "+      fail(\"compile failed: \" + getCompilerErrorString());", "+    }", "-    ", "-    _model.setResetAfterCompile(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa920eb2dd2e081d77befa60cef73720", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "ac74694bc04d721627e42d2b643f6ad2c115d536", "commitAfterChange": "292a7b0b5fa9ea11914642715c7c5f691490df9f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void testClassFileSynchronization()     throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testClassFileSynchronization()     throws BadLocationException, IOException, InterruptedException", "diff": ["-    _model.setResetAfterCompile(false);", "-    ", "+    assertTrue(_name() + \"Class file should not exist before compile\", ", "+               doc.getDocument().getCachedClassFile() == null);", "-    //synchronized(listener) {", "-      doc.startCompile();", "-      if (_model.getNumErrors() > 0) {", "-        fail(\"compile failed: \" + getCompilerErrorString());", "-      }", "-      //listener.wait();", "-    //}", "+    doc.startCompile();", "+    if (_model.getNumErrors() > 0) {", "+      fail(\"compile failed: \" + getCompilerErrorString());", "+    }", "-    // Have to wait 1 second so file will have a different timestamp", "+    // Have to wait 2 seconds so file will have a different timestamp", "-    ", "-    _model.setResetAfterCompile(true);"]}], "num": 11464}
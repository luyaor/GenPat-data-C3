{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62b5900afa175470573dc24308f4e42a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae68e5a0391ba47c36ef77bcd1c31a45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/ColoringView.java", "commitBeforeChange": "ece33a1eca956a4c4fa241038cad534de212ef70", "commitAfterChange": "5481b029dfc07ee092049dc1e5006c0f887620a2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ColoringView(Element elem)", "signatureAfterChange": "   public ColoringView(Element elem)", "diff": ["-//      ((DefinitionsDocument)doc).addOptionListener( OptionConstants.DEFINITIONS_TYPE_COLOR, col);", "-//", "-//      ", "-//      // remove the listeners when the document closes", "-//      ((DefinitionsDocument)doc).addDocumentClosedListener(new DocumentClosedListener(){", "-//        public void close(){", "-//          ((DefinitionsDocument)doc).clearOptionListeners();", "-//        }", "-//      });", "+    //      ((DefinitionsDocument)doc).addOptionListener( OptionConstants.DEFINITIONS_TYPE_COLOR, col);", "+    //", "+    //      ", "+    //      // remove the listeners when the document closes", "+    //      ((DefinitionsDocument)doc).addDocumentClosedListener(new DocumentClosedListener(){", "+    //        public void close(){", "+    //          ((DefinitionsDocument)doc).clearOptionListeners();", "+    //        }", "+    //      });", "-      if(doc instanceof DefinitionsDocument) {", "-        // remove the listeners when the document closes", "-        ((DefinitionsDocument)doc).addDocumentClosedListener(new DocumentClosedListener(){", "-          public void close(){", "-            DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_COMMENT_COLOR, col);", "-            DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, col);", "-            DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, col);", "-            DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_NORMAL_COLOR, col);", "-            DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_KEYWORD_COLOR, col);", "-            DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_NUMBER_COLOR, col);", "-            DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_TYPE_COLOR, col);", "-            DrJava.getConfig().removeOptionListener( OptionConstants.FONT_MAIN, fol);", "-          }", "-        });", "-      }", "+      DrJava.getConfig().addOptionListener( OptionConstants.SYSTEM_ERR_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.SYSTEM_IN_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.SYSTEM_OUT_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.INTERACTIONS_ERROR_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_MESSAGE_COLOR, col);", "+      ", "+    }", "+    ", "+    if(doc instanceof DefinitionsDocument) {", "+      // remove the listeners when the document closes", "+      ((DefinitionsDocument)doc).addDocumentClosedListener(new DocumentClosedListener(){", "+        public void close(){", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_COMMENT_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_NORMAL_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_KEYWORD_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_NUMBER_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_TYPE_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.FONT_MAIN, fol);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.SYSTEM_ERR_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.SYSTEM_IN_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.SYSTEM_OUT_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.INTERACTIONS_ERROR_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEBUG_MESSAGE_COLOR, col);", "+          ", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c27999ca61854f046fd85efda968272b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "\r   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "signatureAfterChange": "   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "diff": ["-   */\r", "-  protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2) {\r", "-    if ((sd1.isDoubleType(_targetVersion) && sd2.isNumberType(_targetVersion)) ||\r", "-        (sd2.isDoubleType(_targetVersion) && sd1.isNumberType(_targetVersion))) {\r", "-      return SymbolData.DOUBLE_TYPE;\r", "-    }\r", "-    else if ((sd1.isFloatType(_targetVersion) && sd2.isNumberType(_targetVersion)) ||\r", "-             (sd2.isFloatType(_targetVersion) && sd1.isNumberType(_targetVersion))) {\r", "-      return SymbolData.FLOAT_TYPE;\r", "-    }\r", "-    else if ((sd1.isLongType(_targetVersion) && sd2.isNumberType(_targetVersion)) ||\r", "-             (sd2.isLongType(_targetVersion) && sd1.isNumberType(_targetVersion))) {\r", "-      return SymbolData.LONG_TYPE;\r", "-    }\r", "-    else if (sd1.isBooleanType(_targetVersion) && sd2.isBooleanType(_targetVersion)) {\r", "-      return SymbolData.BOOLEAN_TYPE;\r", "-    }\r", "-    else return SymbolData.INT_TYPE; // NOTE: It seems like any binary operation on number types with only ints, shorts, chars, or bytes will return an int\r", "-  }\r", "+   */", "+  protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2) {", "+    if ((sd1.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "+         sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+        (sd2.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "+         sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+      return SymbolData.DOUBLE_TYPE;", "+    }", "+    else if ((sd1.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+             (sd2.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+      return SymbolData.FLOAT_TYPE;", "+    }", "+    else if ((sd1.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+             (sd2.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+      return SymbolData.LONG_TYPE;", "+    }", "+    else if (sd1.isBooleanType(LanguageLevelConverter.OPT.javaVersion()) &&", "+             sd2.isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+      return SymbolData.BOOLEAN_TYPE;", "+    }", "+    else return SymbolData.INT_TYPE; // NOTE: It seems like any binary operation on number types with only ints, shorts, chars, or bytes will return an int", "+  }"]}], "num": 7398}
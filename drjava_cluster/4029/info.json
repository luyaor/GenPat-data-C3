{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7303e515c4f7cd8cc8025d134b33e808", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf5502c585ab07bd0e24f7d6cf87cbb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "ab0ded3db9141ff4121c607c60b106535592b093", "commitAfterChange": "d74188241db90ffeca61708e1d5c82b1650e2c97", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   static void checkForCompilersAndDebugger(String[] args)", "signatureAfterChange": "   static void checkForCompilersAndDebugger(String[] args)", "diff": ["-    // Check to see if we need to restart for JSR14 (not working yet)", "-    //boolean restartForJSR14 = shouldPrependJSR14ToBootclasspath();", "-    boolean restartForJSR14 = false;", "-", "-    restartIfNecessary(restartForToolsJar, restartForJSR14, args);", "+    // Originally this also took in a flag if it was necessary to", "+    // restart to be able to use JSR-14 on OS X.  That is no longer", "+    // necessary, but I'll leave the contract like this for the time", "+    // being (in case another condition comes up).", "+    restartIfNecessary(restartForToolsJar, args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e595d3200c1990ac19aa78b67a96ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "6ec50bbad6902867dbbd689ce421d583e985cd75", "commitAfterChange": "40c5d59f4d83560f5b1a6adb2abd1bc3bc016193", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected void handleSlaveConnected(SlaveRemote newSlave)", "signatureAfterChange": "   protected void handleSlaveConnected(SlaveRemote newSlave)", "diff": ["-    Boolean allowAccess = DrJava.getConfig().getSetting(OptionConstants.ALLOW_PRIVATE_ACCESS);", "-    try { slaveCast.setPrivateAccessible(allowAccess); }", "-    catch (RemoteException re) { _handleRemoteException(re); }", "-", "-    synchronized (_startupLock) {", "-      _restart = true;", "-      _cleanlyRestarting = false;", "-      _startupAttempts = 0;", "-      _slaveJVMUsed = false;", "-      _interpreterJVM.set(slaveCast); // initialized after all other state is set", "-      _startupComplete.signal();", "-    }", "-    _interactionsModel.interpreterReady(_workingDir);", "-    _junitModel.junitJVMReady();", "+    _state.value().started(slaveCast);"]}], "num": 4029}
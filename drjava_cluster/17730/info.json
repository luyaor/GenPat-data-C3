{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "670b9de3289ad489958e76b008132ed1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5a7138c3eb0fb1204f37a753ecc8eea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/sexp/SExpParser.java", "commitBeforeChange": "f4bc3bcffd0605705e0a0b1481ab0a56ae21344e", "commitAfterChange": "62a60c4b746d2a0603d2c223e7e3b1d46d413a58", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private Atom parseAtom(SExpToken t)", "signatureAfterChange": "     private Atom parseAtom(Tokens.SExpToken t)", "diff": ["-    private Atom parseAtom(SExpToken t) {", "-      if (t instanceof BooleanToken) {", "-        if (((BooleanToken)t).getValue())", "+    private Atom parseAtom(Tokens.SExpToken t) {", "+      if (t instanceof Tokens.BooleanToken) {", "+        if (((Tokens.BooleanToken)t).getValue())", "-      else if (t instanceof NumberToken) {", "-        return new NumberAtom(((NumberToken)t).getValue());", "+      else if (t instanceof Tokens.NumberToken) {", "+        return new NumberAtom(((Tokens.NumberToken)t).getValue());", "-      else if (t instanceof QuotedTextToken) {", "+      else if (t instanceof Tokens.QuotedTextToken) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb096005d5c1d46b94d4080d690c2817", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/sexp/Lexer.java", "commitBeforeChange": "f4bc3bcffd0605705e0a0b1481ab0a56ae21344e", "commitAfterChange": "62a60c4b746d2a0603d2c223e7e3b1d46d413a58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public SExpToken readToken()", "signatureAfterChange": "   public Tokens.SExpToken readToken()", "diff": ["-   *  Returns the SExpToken object representing this SExpToken */", "-  public SExpToken readToken() {", "+   *  Returns the Tokens.SExpToken object representing this Tokens.SExpToken */", "+  public Tokens.SExpToken readToken() {", "-      SExpToken token = buffer;", "+      Tokens.SExpToken token = buffer;", "-    // Process the SExpToken returned by StreamTokenizer", "+    // Process the Tokens.SExpToken returned by StreamTokenizer", "-        return new NumberToken(nval);", "+        return new Tokens.NumberToken(nval);", "-        SExpToken regToken = wordTable.get(s);", "-        if (regToken == null) return new WordToken(sval);", "+        Tokens.SExpToken regToken = wordTable.get(s);", "+        if (regToken == null) return new Tokens.WordToken(sval);", "-      case '(': return LeftParenToken.ONLY;", "-      case ')': return RightParenToken.ONLY;", "-      case '\"': return new QuotedTextToken(sval);", "+      case '(': return Tokens.LeftParenToken.ONLY;", "+      case ')': return Tokens.RightParenToken.ONLY;", "+      case '\"': return new Tokens.QuotedTextToken(sval);", "-//          return new WordToken(\"\\\"\");", "+//          return new Tokens.WordToken(\"\\\"\");", "-//          return new WordToken(\"\\\\\");", "+//          return new Tokens.WordToken(\"\\\\\");", "-//          return new WordToken(\" \");", "+//          return new Tokens.WordToken(\" \");", "-//          return new WordToken(\"\\n\");", "+//          return new Tokens.WordToken(\"\\n\");", "-//          return new WordToken(\"\\t\");", "+//          return new Tokens.WordToken(\"\\t\");", "-          return BackSlashToken.ONLY;", "+          return Tokens.BackSlashToken.ONLY;", "-        return new WordToken(\"\" + (char)tokenType);", "+        return new Tokens.WordToken(\"\" + (char)tokenType);"]}], "num": 17730}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dff331f9f00d0276e66f546ecb4e1974", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ad14c6cbc4eb8a464686e95a20750ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["+    assert isWriteLocked();", "+    ", "-    acquireWriteLock();", "+//    acquireWriteLock();", "-        Position oldCurrentPosition = createUnwrappedPosition(_currentLocation);", "-        int lineStart = getLineStartPos(selStart);", "-        if (lineStart <  0) lineStart = 0;", "-        setCurrentLocation(lineStart);", "+        Position oldPosition = createUnwrappedPosition(_currentLocation);", "+        int lineStart = _getLineStartPos(selStart);", "+        if (lineStart <  0) lineStart = 0;  // selStart on first line", "+        _setCurrentLocation(lineStart);", "-          _setCurrentLocation(oldCurrentPosition.getOffset());", "-          if (onlyWhiteSpaceBeforeCurrent()) {", "-            int space = getWhiteSpace();", "-            _reduced.move(space);", "-            _currentLocation = _currentLocation + space;", "-          }", "+          _setCurrentLocation(oldPosition.getOffset()); // moves currentLocation back to original offset on line", "+          if (onlyWhiteSpaceBeforeCurrent()) _move(_getWhiteSpace());  // passes any additional spaces before firstNonWS", "-    catch (Throwable t) { throw new UnexpectedException(t); }", "-    finally { releaseWriteLock(); } ", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+//    finally { releaseWriteLock(); } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bd38953c5392955880b167711e4e087", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   protected void _updateInterpreterClassPath(JavaInterpreter interpreter)", "signatureAfterChange": "   protected void _updateInterpreterClassPath(JavaInterpreter interpreter)", "diff": ["-    for (ClassPathEntry e: _classPathManager.getProjectCP())", "-      interpreter.addProjectClassPath(e.getEntry());", "+    for (File f : _classPathManager.getProjectCP())", "+      interpreter.addProjectClassPath(f);", "-    for (ClassPathEntry e: _classPathManager.getBuildDirectoryCP())", "-      interpreter.addBuildDirectoryClassPath(e.getEntry());", "+    for (File f : _classPathManager.getBuildDirectoryCP())", "+      interpreter.addBuildDirectoryClassPath(f);", "-    for (ClassPathEntry e: _classPathManager.getProjectFilesCP())", "-      interpreter.addProjectFilesClassPath(e.getEntry());", "+    for (File f : _classPathManager.getProjectFilesCP())", "+      interpreter.addProjectFilesClassPath(f);", "-    for (ClassPathEntry e: _classPathManager.getExternalFilesCP())", "-      interpreter.addExternalFilesClassPath(e.getEntry());", "+    for (File f : _classPathManager.getExternalFilesCP())", "+      interpreter.addExternalFilesClassPath(f);", "-    for (ClassPathEntry e: _classPathManager.getExtraCP())", "-      interpreter.addExtraClassPath(e.getEntry());", "+    for (File f : _classPathManager.getExtraCP())", "+      interpreter.addExtraClassPath(f);"]}], "num": 5978}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "519e634821440daea73dbc0bf2a08a89", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5abc8c9127fdd1c93212a3032ec56a13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ClassAndInterfaceFinderTest.java", "commitBeforeChange": "1392181b9829e035056138875c745248b84e7ae5", "commitAfterChange": "f15def3e7ab21266c84052df071b37f147d8ecf6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testGetClassInterfaceName()", "signatureAfterChange": "   public void testStringPackageRecognition()", "diff": ["- ", "-  public void testGetClassInterfaceName()", "-  {", "-    one = new ClassAndInterfaceFinder(new File(INPUT1));", "-    ", "-    assertEquals(\"Find a Class\", OUTPUT1, one.getClassName());", "-    ", "-    two = new ClassAndInterfaceFinder(new File(INPUT2));", "-    ", "-    assertEquals(\"Find an Interface\", OUTPUT2, two.getClassOrInterfaceName());", "+   */", "+  public void testStringPackageRecognition(){", "+    try {", "+      Reader r = new StringReader(\"//\\n /**/package x public interface Aa.12_34 {}\");", "+      ClassAndInterfaceFinder finder = new ClassAndInterfaceFinder(r);", "+      String s = finder.getClassOrInterfaceName();", "+      assertEquals(\"stringNameRecognition\",\"x.Aa.12_34\", s);", "+    }", "+    catch (Exception e) {", "+      fail(\"stringPackageRecognition threw \" + e);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acb13fc8b2f928367120ddad5a357369", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/BooleanOptionTest.java", "commitBeforeChange": "2de5de833fec6c0fefce3e0dfbb07764b1900707", "commitAfterChange": "fa036878036cfa9b3fdfb0b92616499d17bb99f7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testParse()", "signatureAfterChange": "        public void testParse()", "diff": ["-  ", "-  public void testParse()", "-  {", "-    BooleanOption bo = new BooleanOption(\"enable JUnit\",null);", "-    ", "-    assertEquals(Boolean.TRUE, bo.parse(\"true\"));", "-    assertEquals(Boolean.FALSE, bo.parse(\"false\"));", "-    ", "-    try { bo.parse(\"3\"); fail(); }", "-    catch (IllegalArgumentException e) {}", "-    ", "-    try { bo.parse(\"True\"); fail(); }", "-    catch (IllegalArgumentException e) {}", "-  }", "+   ", "+   public void testParse()", "+   {", "+     BooleanOption bo = new BooleanOption(\"enable JUnit\",null);", "+     ", "+     assertEquals(Boolean.TRUE, bo.parse(\"true\"));", "+     assertEquals(Boolean.FALSE, bo.parse(\"false\"));", "+     ", "+     try { bo.parse(\"3\"); fail(); }", "+     catch (OptionParseException e) {}", "+     ", "+     try { bo.parse(\"True\"); fail(); }", "+     catch (OptionParseException e) {}", "+   }"]}], "num": 6942}
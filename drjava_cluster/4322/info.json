{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9acc54b71cb366b997334ad8954b557", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b585c7da6aa33bb6aca1b71ba41e6374", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVMTest.java", "commitBeforeChange": "60798300f32b2ec4f4cff0f390993b3a5984e6c1", "commitAfterChange": "6fa1e9e0526601b88fed849b111530adacda855f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testSwitchingActiveInterpreter() throws ExceptionReturnedException", "signatureAfterChange": "   public void testSwitchingActiveInterpreter() throws ExceptionReturnedException", "diff": ["-    jvm.getActiveInterpreter().defineVariable(var0, val0);", "-    assertEquals(val0, jvm.getActiveInterpreter().interpret(var0));", "+    JavaInterpreter interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "+    interpreter.defineVariable(var0, val0);", "+    assertEquals(val0, interpreter.interpret(var0));", "+    interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "-      jvm.getActiveInterpreter().interpret(var0);", "+      interpreter.interpret(var0);", "-    jvm.getActiveInterpreter().defineVariable(var1,val1);", "-    assertEquals(val1, jvm.getActiveInterpreter().interpret(var1));", "+    interpreter.defineVariable(var1,val1);", "+    assertEquals(val1, interpreter.interpret(var1));", "+    interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "-      jvm.getActiveInterpreter().interpret(var0);", "+      interpreter.interpret(var0);", "-      jvm.getActiveInterpreter().interpret(var1);", "+      interpreter.interpret(var1);", "-    jvm.getActiveInterpreter().defineVariable(var2,val2);", "-    assertEquals(val2, jvm.getActiveInterpreter().interpret(var2));", "+    interpreter.defineVariable(var2,val2);", "+    assertEquals(val2, interpreter.interpret(var2));", "-    jvm.setDefaultInterpreter();", "+    jvm.setToDefaultInterpreter();", "+    interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "-      jvm.getActiveInterpreter().interpret(var1);", "+      interpreter.interpret(var1);", "-      jvm.getActiveInterpreter().interpret(var2);", "+      interpreter.interpret(var2);", "+    interpreter = (JavaInterpreter) jvm.getActiveInterpreter();", "-      jvm.getActiveInterpreter().interpret(var0);", "+      interpreter.interpret(var0);", "-      jvm.getActiveInterpreter().interpret(var2);", "+      interpreter.interpret(var2);", "-    assertEquals(val1, jvm.getActiveInterpreter().interpret(var1));", "+    assertEquals(val1, interpreter.interpret(var1));", "-      assertEquals(\"Interpreter <not an interpreter> does not exist.\", ex.getMessage());", "+      assertEquals(\"Interpreter 'not an interpreter' does not exist.\", ex.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ea0a6cffba674e64dc6acbc10c809f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "0bbc4205cb6cdac938c33646446cffe67a254d86", "commitAfterChange": "32c1a96bda59745efd4d13dbac97b7a11f8d7d24", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["+    CompoundUndoManager undoManager = _defModel.getUndoManager();", "-    _defModel.addUndoableEditListener(_defModel.getUndoManager());", "+    _defModel.addUndoableEditListener(undoManager);", "-    int key = _defModel.getUndoManager().startCompoundEdit();", "+    int key = undoManager.startCompoundEdit();", "+    undoManager.startCompoundEdit();", "-    // End the outer compound edit and verify that both get undone", "-    _defModel.getUndoManager().endCompoundEdit(key);", "-    _defModel.getUndoManager().undo();", "+    undoManager.undo();", "-    // End the outer compound edit trigger a second compound edit", "-    _defModel.getUndoManager().endCompoundEdit(key);", "+    undoManager.startCompoundEdit();", "-    assertEquals(\"Should have returned the correct key.\", 5, key);", "+    assertEquals(\"Should have returned the correct key.\", 4, key);", "-      _defModel.getUndoManager().endCompoundEdit(key + 1);", "-      fail(\"Should not have allowed ending a compound edit with a wrong key.\");", "+      _defModel.getUndoManager().endCompoundEdit(key + 2);", "+//      fail(\"Should not have allowed ending a compound edit with a wrong key.\");", "+    undoManager.startCompoundEdit();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce645a4af205577c903e3ba828481e65", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "eee347fd3fa2c22c95183dc23b859e14d297bb1b", "commitAfterChange": "a72aa0a4c1f252999ab0a9a3163ec82bfbbfaea2", "methodNumberBeforeChange": 508, "methodNumberAfterChange": 532, "signatureBeforeChange": "      private void _restoreJUnitActionsEnabled()", "signatureAfterChange": "   private void _setUpGUIComponentAvailability()", "diff": ["-  ", "-  private void _restoreJUnitActionsEnabled() {", "-    _compileProjectAction = _junit_compileProjectDecoratedAction.getUpdatedDecoree();", "-    _compileAllAction = _junit_compileAllDecoratedAction.getUpdatedDecoree();", "-    _compileFolderAction = _junit_compileFolderDecoratedAction.getUpdatedDecoree();", "-    _junitFolderAction = _junit_junitFolderDecoratedAction.getUpdatedDecoree();", "-    _junitAllAction = _junit_junitAllDecoratedAction.getUpdatedDecoree();", "-    _junitAction = _junit_junitDecoratedAction.getUpdatedDecoree();", "-    _junitProjectAction = _junit_junitOpenProjectFilesDecoratedAction.getUpdatedDecoree();", "-    _cleanAction = _junit_cleanDecoratedAction.getUpdatedDecoree();", "-    _autoRefreshAction = _junit_autoRefreshDecoratedAction.getUpdatedDecoree();", "-    _projectPropertiesAction = _junit_projectPropertiesDecoratedAction.getUpdatedDecoree();", "-    _runProjectAction = _junit_runProjectDecoratedAction.getUpdatedDecoree();", "-    _runAction = _junit_runDecoratedAction.getUpdatedDecoree();", "-    _runAppletAction = _junit_runAppletDecoratedAction.getUpdatedDecoree();", "-    _javadocCurrentAction = _junit_javadocCurrentAction.getUpdatedDecoree();", "-    _javadocAllAction = _junit_javadocAllAction.getUpdatedDecoree();", "+    */", "+  private void _setUpGUIComponentAvailability() {", "+//    _displayGUIComponentAvailabilityFrame();", "+    ", "+    _guiAvailabilityNotifier.ensureUnavailable(GUIAvailabilityListener.ComponentType.PROJECT);", "+    _guiAvailabilityNotifier.ensureUnavailable(GUIAvailabilityListener.ComponentType.PROJECT_BUILD_DIR);", "+    _guiAvailabilityNotifier.ensureUnavailable(GUIAvailabilityListener.ComponentType.PROJECT_MAIN_CLASS);", "+    _guiAvailabilityNotifier.ensureUnavailable(GUIAvailabilityListener.ComponentType.DEBUGGER);", "+    _guiAvailabilityNotifier.ensureUnavailable(GUIAvailabilityListener.ComponentType.DEBUGGER_SUSPENDED);", "+    _guiAvailabilityNotifier.ensureAvailable(GUIAvailabilityListener.ComponentType.JUNIT);", "+    _guiAvailabilityNotifier.ensureAvailable(GUIAvailabilityListener.ComponentType.COMPILER);", "+    _guiAvailabilityNotifier.ensureAvailabilityIs(GUIAvailabilityListener.ComponentType.JAVADOC,", "+                                                  _model.getJavadocModel().isAvailable());", "+  }"]}], "num": 4322}
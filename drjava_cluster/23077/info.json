{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af6319a6e5f4644fe7d60c24b6c78c78", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88e7690e526fc9047f7713d669b6c296", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void evaluateExpression(SEList e, ProjectFileIRImpl pfir, FileListVisitor flv)", "signatureAfterChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir)", "diff": ["-  private void evaluateExpression(SEList e, ProjectFileIRImpl pfir, FileListVisitor flv) {", "+  private void evaluateExpression(SEList e, ProjectFileIR pfir) {", "-      List<DocFile> fList = exp.getRest().accept(flv);", "-      pfir.setSourceFiles(fList);", "+      List<DocFile> dfList = exp.getRest().accept(docFileListVisitor);", "+      pfir.setSourceFiles(dfList);", "+    }", "+    if (name.compareToIgnoreCase(\"proj-root\") == 0) {", "+      List<File> fList = exp.getRest().accept(fileListVisitor);", "+      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have multiple source roots\");", "+      else if (fList.size() == 0) pfir.setProjectRoot(null);", "+      pfir.setProjectRoot(fList.get(0));", "-      List<DocFile> fList = exp.getRest().accept(flv);", "-      pfir.setAuxiliaryFiles(fList);", "+      List<DocFile> dfList = exp.getRest().accept(docFileListVisitor);", "+      pfir.setAuxiliaryFiles(dfList);", "-      List<DocFile> fList = exp.getRest().accept(flv);", "+      List<File> fList = exp.getRest().accept(fileListVisitor);", "+//      System.err.println(\"BuildDir fList = \" + fList);", "-      List<DocFile> fList = exp.getRest().accept(flv);", "+      List<File> fList = exp.getRest().accept(fileListVisitor);", "-      List<DocFile> fList = exp.getRest().accept(flv);", "+      List<File> fList = exp.getRest().accept(fileListVisitor);", "-      List<DocFile> fList = exp.getRest().accept(flv);", "-      if (fList.size() > 1) {", "-        throw new PrivateProjectException(\"Cannot have multiple main classes\");", "-      }", "-      else if (fList.size() == 0) {", "-        pfir.setMainClass(null);", "-      }", "-      else {", "-        pfir.setMainClass(fList.get(0));", "-      }", "+      List<File> fList = exp.getRest().accept(fileListVisitor);", "+      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have multiple main classes\");", "+      else if (fList.size() == 0) pfir.setMainClass(null);", "+      else pfir.setMainClass(fList.get(0));", "-      List<DocFile> fList = exp.getRest().accept(flv);", "-      if (fList.size() > 1) {", "-        throw new PrivateProjectException(\"Cannot have multiple project roots\");", "-      }", "-      else if (fList.size() == 0) {", "-        pfir.setProjectRoot(null);", "-      }", "-      else {", "-        pfir.setProjectRoot(fList.get(0));", "-      }", "+      List<File> fList = exp.getRest().accept(fileListVisitor);", "+      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have multiple project roots\");", "+      else if (fList.size() == 0) pfir.setProjectRoot(null);", "+      else pfir.setProjectRoot(fList.get(0));", "-      List<DocFile> fList = exp.getRest().accept(flv);", "-      if (fList.size() > 1) {", "-        throw new PrivateProjectException(\"Cannot have more than one \\\"create jar\\\" file\");", "-      }", "-      else if (fList.size() == 0) {", "-        pfir.setCreateJarFile(null);", "-      }", "-      else {", "-        pfir.setCreateJarFile(fList.get(0));", "-      }", "+      List<File> fList = exp.getRest().accept(fileListVisitor);", "+      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have more than one \\\"create jar\\\" file\");", "+      else if (fList.size() == 0) pfir.setCreateJarFile(null);", "+      else pfir.setCreateJarFile(fList.get(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd12bde3bb2dace446b1b5327df0c95b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "99105223925683ee669479026ce3b62dfa0eda84", "commitAfterChange": "94ede5fc3e289a571a76fcd6a91c26510fe57b12", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir)", "signatureAfterChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir) throws IOException", "diff": ["-  private void evaluateExpression(SEList e, ProjectFileIR pfir) {", "+  private void evaluateExpression(SEList e, ProjectFileIR pfir) throws IOException {", "-      List<DocFile> dfList = exp.getRest().accept(docFileListVisitor);", "+      ListVisitor<DocFile> srcFileListVisitor = new ListVisitor<DocFile>(_srcFileBase);", "+      List<DocFile> dfList = exp.getRest().accept(srcFileListVisitor);", "-    else if (name.compareToIgnoreCase(\"proj-root\") == 0) {", "+    else if (name.compareToIgnoreCase(\"proj-root\") == 0) {  // legacy node form; all paths relative to project file", "-      else if (fList.size() == 0) pfir.setProjectRoot(null);", "+      else if (fList.size() == 0) pfir.setProjectRoot(null); // can this ever happen?", "+    }", "+    else if (name.compareToIgnoreCase(\"proj-root-and-base\") == 0) { // source file paths are relative to project root", "+      List<File> fList = exp.getRest().accept(fileListVisitor);", "+      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have multiple source roots\");", "+      File root = fList.get(0);", "+      if (! root.exists()) throw new IOException(\"Project root \" + root + \" no longer exists\");", "+      pfir.setProjectRoot(root);", "+      _srcFileBase = root.getCanonicalPath();", "-    else if (name.compareToIgnoreCase(\"proj-root\") == 0) {", "-      List<File> fList = exp.getRest().accept(fileListVisitor);", "-      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have multiple project roots\");", "-      else if (fList.size() == 0) pfir.setProjectRoot(null);", "-      else pfir.setProjectRoot(fList.get(0));", "-    }", "-    else if (name.compareToIgnoreCase(\"create-jar-file\") == 0) {", "-      List<File> fList = exp.getRest().accept(fileListVisitor);", "-      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have more than one \\\"create jar\\\" file\");", "-      else if (fList.size() == 0) pfir.setCreateJarFile(null);", "-      else pfir.setCreateJarFile(fList.get(0));", "-    }", "-    else if (name.compareToIgnoreCase(\"create-jar-flags\") == 0) {", "-      Integer i = exp.getRest().accept(NumberVisitor.ONLY);", "-      pfir.setCreateJarFlags(i);", "-    }", "+//    else if (name.compareToIgnoreCase(\"create-jar-file\") == 0) {", "+//      List<File> fList = exp.getRest().accept(fileListVisitor);", "+//      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have more than one \\\"create jar\\\" file\");", "+//      else if (fList.size() == 0) pfir.setCreateJarFile(null);", "+//      else pfir.setCreateJarFile(fList.get(0));", "+//    }", "+//    else if (name.compareToIgnoreCase(\"create-jar-flags\") == 0) {", "+//      Integer i = exp.getRest().accept(NumberVisitor.ONLY);", "+//      pfir.setCreateJarFlags(i);", "+//    }"]}], "num": 23077}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c071c6f883daa15649402b37dfe466c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3751a875391f5a390375c1b0804f5f52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 53, "signatureBeforeChange": "   private Type handleNumericAssignmentExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleNumericAssignmentExpression(BinaryExpression node)", "diff": ["+     */", "+    private Type handleNumericAssignmentExpression(BinaryExpression node) {", "+      Type result = check(node.getLeftExpression());", "+      check(node.getRightExpression());", "+        ", "+        if (!hasVariableType(node.getLeftExpression())) {", "+          throw new ExecutionError(\"numeric.expression.type\", node);", "+        }", "+        return setType(node, result);", "-   */", "-  private Type handleNumericAssignmentExpression(BinaryExpression node) {", "-    Type result = node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());", "-      Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "-      ", "-      if (!hasVariableType(node.getLeftExpression())) {", "-      setLeftExpression(node, promoted.first()); // not to be confused with node.setLeftExpression(...)", "-      node.setRightExpression(promoted.second());", "-      return setType(node, result);", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"numeric.expression.type\", node);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ed943be76ffea32a0107b5d826a689", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 48, "signatureBeforeChange": "   private Type handleNumericExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleNumericExpression(BinaryExpression node)", "diff": ["+     */", "+    private Type handleNumericExpression(BinaryExpression node) {", "+      check(node.getLeftExpression());", "+      check(node.getRightExpression());", "+        throw new ExecutionError(\"numeric.expression.type\", node);", "-   */", "-  private Type handleNumericExpression(BinaryExpression node) {", "-    node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());", "-      Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "-      node.setLeftExpression(promoted.first());", "-      node.setRightExpression(promoted.second());", "-      return setType(node, getType(promoted.first()));", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"numeric.expression.type\", node);", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cef8072cb015f458d2de469927087f4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 61, "signatureBeforeChange": "   private Type handleRelationalExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleRelationalExpression(BinaryExpression node)", "diff": ["+     */", "+    private Type handleRelationalExpression(BinaryExpression node) {", "+      check(node.getLeftExpression());", "+      check(node.getRightExpression());", "+      try {", "+        Expression left = ts.makePrimitive(node.getLeftExpression());", "+        Expression right = ts.makePrimitive(node.getRightExpression());", "+        Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "+        node.setLeftExpression(promoted.first());", "+        node.setRightExpression(promoted.second());", "+        return setType(node, TypeSystem.BOOLEAN);", "+      }", "+      catch (UnsupportedConversionException e) {", "-   */", "-  private Type handleRelationalExpression(BinaryExpression node) {", "-    node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());", "-      Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "-      node.setLeftExpression(promoted.first());", "-      node.setRightExpression(promoted.second());", "-      return setType(node, TypeSystem.BOOLEAN);", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"compare.type\", node);", "-    }", "-  }"]}], "num": 16007}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b6eb421abc16ae62fa92835811a83c1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b34e93ce2422b0a46b80817e982f1b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "8212ce9ce43b34bb82672d4de3ee06245bf52614", "commitAfterChange": "d88fb548627bde19f7cf516c794ed4211e0bf63d", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   public Class visit(AndExpression node)", "signatureAfterChange": "   public Class visit(AndExpression node)", "diff": ["-    Node  ln = node.getLeftExpression();", "-    Node  rn = node.getRightExpression();", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = rn.acceptVisitor(this);", "+    Expression le = node.getLeftExpression();", "+    Expression re = node.getRightExpression();", "+    Class lc = le.acceptVisitor(this);", "+    Class rc = re.acceptVisitor(this);", "-    if (lc != boolean.class || rc != boolean.class) {", "+    if (!(lc == boolean.class || lc == Boolean.class) || ", "+        !(rc == boolean.class || rc == Boolean.class) ) {", "+    // Auto-unbox, if necessary", "+    if (lc == Boolean.class) {", "+      node.setLeftExpression(_unbox(le, lc));", "+    }", "+    if (rc == Boolean.class) {", "+      node.setRightExpression(_unbox(re, rc));", "+    }", "+    ", "-    if (ln.hasProperty(NodeProperties.VALUE) &&", "-        rn.hasProperty(NodeProperties.VALUE)) {", "+    if (le.hasProperty(NodeProperties.VALUE) &&", "+        re.hasProperty(NodeProperties.VALUE)) {", "-         (((Boolean)ln.getProperty(NodeProperties.VALUE)).booleanValue() &&", "-          ((Boolean)rn.getProperty(NodeProperties.VALUE)).booleanValue())", "+         (((Boolean)le.getProperty(NodeProperties.VALUE)).booleanValue() &&", "+          ((Boolean)re.getProperty(NodeProperties.VALUE)).booleanValue())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3796c5283ead90402eaa6c9c856c5c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public Class visit(NotExpression node)", "signatureAfterChange": "   public Class visit(NotExpression node)", "diff": ["-    Node  n = node.getExpression();", "-    Class c = n.acceptVisitor(this);", "+    Expression exp = node.getExpression();", "+    Class c = exp.acceptVisitor(this);", "-    if (c != boolean.class) {", "+    if (c != boolean.class && c != Boolean.class) {", "-    node.setProperty(NodeProperties.TYPE, c);", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(c)) {", "+      node.setExpression(_unbox(exp, c));", "+    }", "-    if (n.hasProperty(NodeProperties.VALUE)) {", "-      if (((Boolean)n.getProperty(NodeProperties.VALUE)).booleanValue()) {", "+    if (exp.hasProperty(NodeProperties.VALUE)) {", "+      if (((Boolean) exp.getProperty(NodeProperties.VALUE)).booleanValue()) {", "-      } else {", "+      } ", "+      else {", "-    return c;", "+    return boolean.class;"]}], "num": 16483}
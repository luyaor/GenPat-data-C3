{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfd6cbbeba2bf10807c4493d25241efe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ee3ea6c8b91dca6862623c3013a5824", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testShiftRight()", "signatureAfterChange": "   public void testShiftRight() throws ExceptionReturnedException", "diff": ["-  public void testShiftRight() {", "-    Node exp = _parseCode(\"(new Short(1) >> new Short(2));\").get(0);", "+  public void testShiftRight() throws ExceptionReturnedException {", "+    String text = \"(new Short(\\\"1\\\") >> new Short(\\\"2\\\"));\";", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: shortValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Short) [(koala.dynamicjava.tree.StringLiteral: \\\"1\\\" 1 class java.lang.String)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: shortValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Short) [(koala.dynamicjava.tree.StringLiteral: \\\"2\\\" 2 class java.lang.String)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3fce8fcc8c2aa233451d7463c692d90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void testShiftLeft()", "signatureAfterChange": "   public void testShiftLeft() throws ExceptionReturnedException", "diff": ["-  public void testShiftLeft() {", "-    Node exp = _parseCode(\"new Short(-10) << new Short(2);\").get(0);", "+  public void testShiftLeft() throws ExceptionReturnedException {", "+    String text = \"new Short(\\\"-10\\\") << new Short(\\\"2\\\");\";", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: shortValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Short) [(koala.dynamicjava.tree.StringLiteral: \\\"-10\\\" -10 class java.lang.String)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: shortValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Short) [(koala.dynamicjava.tree.StringLiteral: \\\"2\\\" 2 class java.lang.String)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}], "num": 11211}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d1376f4ba47f320c68b0d123049164d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fe9a020ba2fb346b7e3f5d87c77fa4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 88, "signatureBeforeChange": "   private Class visitShiftExpression(BinaryExpression node)", "signatureAfterChange": "   private Class visitShiftExpression(BinaryExpression node)", "diff": ["-    Class lc = node.getLeftExpression().acceptVisitor(this);", "-    Class rc = node.getRightExpression().acceptVisitor(this);", "+    Expression leftExp = node.getLeftExpression();", "+    Expression rightExp = node.getRightExpression();", "+    Class lc = leftExp.acceptVisitor(this);", "+    Class rc = rightExp.acceptVisitor(this);", "+        lc == Float.class   || rc == Float.class   ||", "-        !lc.isPrimitive()   || !rc.isPrimitive()) {", "-      throw new ExecutionError(\"shift.expression.type\", node);", "-    } else if (lc == long.class) {", "+        lc == Double.class  || rc == Double.class  ||", "+        !(lc.isPrimitive()  || _isBoxingType(lc))  || ", "+        !(rc.isPrimitive()  || _isBoxingType(rc)) ) {", "+      throw new RuntimeException(\"lc: \" + lc + \", rc: \" + rc);", "+//      throw new ExecutionError(\"shift.expression.type\", node);", "+    } ", "+    ", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(lc) && !leftExp.hasProperty(NodeProperties.MODIFIER)) {", "+      node.setLeftExpression(_unbox(leftExp, lc));", "+    }", "+    if (_isBoxingType(rc)) {", "+      node.setRightExpression(_unbox(rightExp, rc));", "+    }", "+    ", "+    if (lc == long.class || lc == Long.class) {", "-    } else {", "+    } ", "+    else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e12dde43802151469d77a54aeb546ecd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "   private static Class visitNumericExpression(BinaryExpression node, String s)", "signatureAfterChange": "   private static Class visitNumericExpression(BinaryExpression node, String s)", "diff": ["+    Expression leftExp = node.getLeftExpression();", "+    Expression rightExp = node.getRightExpression();", "+    ", "-    Class lc = NodeProperties.getType(node.getLeftExpression());", "-    Class rc = NodeProperties.getType(node.getRightExpression());", "+    Class lc = NodeProperties.getType(leftExp);", "+    Class rc = NodeProperties.getType(rightExp);", "+    // Check to make sure the left and right types are valid", "-        !lc.isPrimitive()    || !rc.isPrimitive()   ||", "+        !(lc.isPrimitive()   || _isBoxingType(lc))  || ", "+        !(rc.isPrimitive()   || _isBoxingType(rc))  ||", "-    } else if (lc == double.class || rc == double.class) {", "-      node.setProperty(NodeProperties.TYPE, c = double.class);", "-    } else if (lc == float.class || rc == float.class) {", "-      node.setProperty(NodeProperties.TYPE, c = float.class);", "-    } else if (lc == long.class || rc == long.class) {", "-      node.setProperty(NodeProperties.TYPE, c = long.class);", "-    } else {", "-      node.setProperty(NodeProperties.TYPE, c = int.class);", "+    } ", "+", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(lc)) {", "+      node.setLeftExpression(_unbox(leftExp, lc));", "+    if (_isBoxingType(rc)) {", "+      node.setRightExpression(_unbox(rightExp, rc));", "+    }", "+    ", "+    // Set the type of the node to be the binary promotion", "+    if (lc == double.class || lc == Double.class || ", "+        rc == double.class || rc == Double.class) {", "+      c = double.class;", "+      node.setProperty(NodeProperties.TYPE, c);", "+    } ", "+    else if (lc == float.class || lc == Float.class ||", "+             rc == float.class || rc == Float.class) {", "+      c = float.class;", "+      node.setProperty(NodeProperties.TYPE, c);", "+    } ", "+    else if (lc == long.class || lc == Long.class ||", "+             rc == long.class || rc == Long.class) {", "+      c = long.class;", "+      node.setProperty(NodeProperties.TYPE, c);", "+    } ", "+    else {", "+      c = int.class;", "+      node.setProperty(NodeProperties.TYPE, c);", "+    }", "+    ", "+    // Return the type of the node"]}], "num": 21665}
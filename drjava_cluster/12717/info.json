{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "041f212c234e2dcb8b1b94381b870a4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca7465e018eb0cd37082a06be9a5f1a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "eceb1efda2a64c0d1777a241a780b6640565e74e", "commitAfterChange": "985a2a7aa160a776eff6e6187000ef0ccbcb7ce0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["+    if (ks.getKeyCode() == KeyEvent.VK_BACK_SPACE) {", "+    }", "+      endCompoundEdit();", "+        // We're breaking up compound edits at the granularity of \"enter\"'s.", "+        if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "+          endCompoundEdit();", "+        }", "+            endCompoundEdit();", "+        ", "+        // If the KeyEvent is not a pressed event, process it before we do", "+        // granular undo or _inCompoundEdit may get set incorrectly.", "+        if (e.getID() != KeyEvent.KEY_TYPED) {", "+            super.processKeyEvent(e);", "+          e.consume();", "+          return;", "+        }", "-        // backspace deletes twice without this check, overrides other keystrokes", "-        // that use the mask modifier", "+          // backspace deletes twice without this check, overrides other keystrokes", "+        // that use the mask modifier          ", "+          int _keyval = (int)e.getKeyChar();", "+          if(_keyval >= 32 && _keyval <= 126) {", "+            CompoundUndoManager undoMan = _doc.getDocument().getUndoManager();", "+            if(!_inCompoundEdit) {", "+              _inCompoundEdit = true;", "+              _compoundEditKey = undoMan.startCompoundEdit();", "+              getUndoAction().updateUndoState();", "+              getRedoAction().updateRedoState();", "+              //              super.processKeyEvent(e);", "+            }", "+            //            else {", "+            //              UndoableEdit lastEdit = undoMan.getNextUndo();", "+            //              lastEdit.die();", "+            //              _compoundEditKey = undoMan.startCompoundEdit();", "+            //              super.processKeyEvent(e);", "+            //              undoMan.addEdit(lastEdit);", "+            //              undoMan.endCompoundEdit(_compoundEditKey);", "+            //            }", "+          }", "+        ", "+        //          else {", "+        e.consume();", "+        //            _inCompoundEdit = false;", "+        //          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edbac51b9da95c50120e36624842f2a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "ff27298276d0b205036fe4b017017ca3896e9890", "commitAfterChange": "4ddb555fbb20c498ee5f44bc087ce9c848b2e79c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-      // The following conditional fixes bug 676586 by ignoring typed events when the meta key is down", "-      if (((e.getModifiers() & InputEvent.META_MASK) != 0) && e.getKeyCode() == KeyEvent.VK_UNDEFINED) {", "-        return;", "+      // Allows one step undoing of the keystrokes defined on the keymap (e.g. enter, tab, '{', '}', ':').", "+      Keymap km = getKeymap();", "+      if (km.isLocallyDefined(ks) || km.isLocallyDefined(KeyStroke.getKeyStroke(ks.getKeyChar()))) {  ", "+        CompoundUndoManager undoMan = _doc.getDocument().getUndoManager();", "+        int key = undoMan.startCompoundEdit();        ", "+        super.processKeyEvent(e);", "+        undoMan.endCompoundEdit(key);", "+        e.consume();", "-      ", "-      // The following conditional fixes ease of use issue 693253 by checking if a typed event is", "-      // shift-delete or shift-backspace and then performing a delete or backspace operation,", "-      // respectively", "-      if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {", "-        int newModifiers = e.getModifiers() & ~(InputEvent.SHIFT_MASK);", "-        ", "-        KeyStroke newKs = KeyStroke.getKeyStroke(ks.getKeyCode(), newModifiers, ks.isOnKeyRelease());", "-        String name = KeyBindingManager.Singleton.getName(newKs);", "-        ", "-        if (name != null && (name.equals(\"Delete Previous\") || name.equals(\"Delete Next\"))) {", "-          // We are unsure about the third and fourth arguments (e and e.getSource()); we simply", "-            // reuse the original values", "-          SwingUtilities.notifyAction(KeyBindingManager.Singleton.get(newKs), newKs, e, e.getSource(), newModifiers);", "-          e.consume();", "+      else {", "+        // The following conditional fixes bug 676586 by ignoring typed events when the meta key is down", "+        if (((e.getModifiers() & InputEvent.META_MASK) != 0) && e.getKeyCode() == KeyEvent.VK_UNDEFINED) {", "-      }", "-      ", "-      // backspace deletes twice without this check, overrides other keystrokes", "-      // that use the mask modifier", "-      if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\010') {", "-        super.processKeyEvent(e);", "-      }", "-    }    ", "+        ", "+        // The following conditional fixes ease of use issue 693253 by checking if a typed event is", "+        // shift-delete or shift-backspace and then performing a delete or backspace operation,", "+        // respectively", "+        if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {", "+          int newModifiers = e.getModifiers() & ~(InputEvent.SHIFT_MASK);", "+          ", "+          KeyStroke newKs = KeyStroke.getKeyStroke(ks.getKeyCode(), newModifiers, ks.isOnKeyRelease());", "+          String name = KeyBindingManager.Singleton.getName(newKs);", "+          ", "+          if (name != null && (name.equals(\"Delete Previous\") || name.equals(\"Delete Next\"))) {", "+            // We are unsure about the third and fourth arguments (e and e.getSource()); we simply", "+            // reuse the original values", "+            SwingUtilities.notifyAction(KeyBindingManager.Singleton.get(newKs), newKs, e, e.getSource(), newModifiers);", "+            e.consume();", "+            return;", "+          }", "+        }", "+        ", "+        // backspace deletes twice without this check, overrides other keystrokes", "+        // that use the mask modifier", "+        if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\010') {", "+          super.processKeyEvent(e);", "+        }", "+      }    ", "+    }"]}], "num": 12717}
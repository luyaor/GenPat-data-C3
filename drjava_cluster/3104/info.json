{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa28836c64de02400f248fa60443102c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "244d7fd8c7421394c16328ec114cb584", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public IndentInfo getIndentInformation()", "signatureAfterChange": "   public IndentInfo _getIndentInformation()", "diff": ["-    // Check cache", "+  /* Performs same computation as getIndentInformation, except it assumes that the read lock is alreay held. */", "+  public IndentInfo _getIndentInformation() {", "+    // check cache", "+    final int pos = _currentLocation;", "+    Query key = new Query.IndentInformation(pos);", "+    IndentInfo cached = (IndentInfo) _checkCache(key);", "+    if (cached != null) return cached; ", "-    acquireReadLock();", "-    try {", "-      final int pos = _currentLocation;", "-      Query key = new Query.IndentInformation(pos);", "-      ", "-      IndentInfo cached = (IndentInfo) _checkCache(key);", "-      if (cached != null) return cached; ", "-      synchronized(_reduced) { ", "-        info = _reduced.getIndentInformation(); ", "-      } ", "-      _storeInCache(key, info, pos - 1);", "-      ", "-      return info;", "-    }", "-    finally { releaseReadLock(); }  ", "+    synchronized(_reduced) { info = _reduced.getIndentInformation(); } ", "+    _storeInCache(key, info, pos - 1);", "+    ", "+    return info;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316f3a539278ff352706644d3f36ce90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "2919b00ac4d2ee454b5c39e2cb25df5741f249c4", "commitAfterChange": "015b52859794da8a4f6abec918df9f44201a31b5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public boolean hasHistoryPrevious()", "signatureAfterChange": "   private boolean hasHistoryPrevious()", "diff": ["-  /** Returns whether there is a previous command in the history. */", "-  public boolean hasHistoryPrevious() { ", "-    acquireReadLock();", "-    try { return _history.hasPrevious(); }", "-    finally { releaseReadLock(); }", "-  }", "+  /** Returns whether there is a previous command in the history.  Assumes that WriteLock is already held!*/", "+  private boolean hasHistoryPrevious() { return _history.hasPrevious(); }"]}], "num": 3104}
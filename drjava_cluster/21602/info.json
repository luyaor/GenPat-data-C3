{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fd820bb1f79ddcf625f441a95dbc6a7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464e9569be4b8ad0cba344bb1c819b59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected void loadClass(String name) throws ClassNotFoundException", "signatureAfterChange": "   protected void loadClass(String name) throws ClassNotFoundException", "diff": ["-     */", "-    protected void loadClass(String name) throws ClassNotFoundException {", "-\tif (classPool.contains(name)) {", "-\t    return;", "-\t}", "-", "-\t// Is there a tree associated with this name ?", "-\tTypeDeclaration td = classLoader.getTree(name);", "-\tif (td != null) {", "-\t    ImportationManager im = (ImportationManager)td.getProperty", "-\t\t(NodeProperties.IMPORTATION_MANAGER);", "-\t    Context ctx = new GlobalContext(interpreter, classInfoLoader);", "-\t    im.setClassLoader(classInfoLoader);", "-\t    ctx.setImportationManager(im);", "-\t    ClassFinder cfinder = new TreeClassFinder(ctx,", "-\t\t\t\t\t\t      interpreter,", "-\t\t\t\t\t\t      classPool);", "-\t    classPool.add(name, new TreeClassInfo(td, cfinder));", "-\t    return;", "-\t}", "-", "-\t// Is the class tree already loaded ?", "-\tLibraryFinder lf = interpreter.getLibraryFinder();", "-\ttry {", "-\t    String cun = lf.findCompilationUnitName(name);", "-\t    td = classLoader.getTree(cun);", "-\t    if (td != null) {", "-\t\tImportationManager im = (ImportationManager)td.getProperty", "-\t\t    (NodeProperties.IMPORTATION_MANAGER);", "-\t\tContext ctx = new GlobalContext(interpreter, classInfoLoader);", "-\t\tim.setClassLoader(classInfoLoader);", "-\t\tctx.setImportationManager(im);", "-\t\tClassFinder cfinder = new TreeClassFinder(ctx,", "-\t\t\t\t\t\t\t  interpreter,", "-\t\t\t\t\t\t\t  classPool);", "-\t\tclassPool.add(cun, new TreeClassInfo(td, cfinder));", "-\t\treturn;", "-\t    }", "-\t} catch (ClassNotFoundException e) {", "-\t}", "-", "-\ttry {", "-\t    File f = lf.findCompilationUnit(name);", "-\t    FileInputStream fis = new FileInputStream(f);", "-", "-\t    ParserFactory pf = interpreter.getParserFactory();", "-\t    SourceCodeParser p = pf.createParser(fis, f.getCanonicalPath());", "-\t    List stmts = p.parseCompilationUnit();", "-", "-\t    Iterator it = stmts.iterator();", "-\t    Visitor  v  = new CompilationUnitVisitor();", "-\t    while (it.hasNext()) {", "-\t\t((Node)it.next()).acceptVisitor(v);", "-\t    }", "-\t} catch (IOException e) {", "-\t    throw new ClassNotFoundException(name);", "-\t}", "+   */", "+  protected void loadClass(String name) throws ClassNotFoundException {", "+    if (classPool.contains(name)) {", "+      return;", "+    ", "+    // Is there a tree associated with this name ?", "+    TypeDeclaration td = classLoader.getTree(name);", "+    if (td != null) {", "+      ImportationManager im = (ImportationManager)td.getProperty", "+        (NodeProperties.IMPORTATION_MANAGER);", "+      Context ctx = new GlobalContext(interpreter, classInfoLoader);", "+      im.setClassLoader(classInfoLoader);", "+      ctx.setImportationManager(im);", "+      ClassFinder cfinder = new TreeClassFinder(ctx,", "+                                                interpreter,", "+                                                classPool);", "+      classPool.add(name, new TreeClassInfo(td, cfinder));", "+      return;", "+    ", "+    // Is the class tree already loaded ?", "+    LibraryFinder lf = interpreter.getLibraryFinder();", "+    try {", "+      String cun = lf.findCompilationUnitName(name);", "+      td = classLoader.getTree(cun);", "+      if (td != null) {", "+        ImportationManager im = (ImportationManager)td.getProperty", "+          (NodeProperties.IMPORTATION_MANAGER);", "+        Context ctx = new GlobalContext(interpreter, classInfoLoader);", "+        im.setClassLoader(classInfoLoader);", "+        ctx.setImportationManager(im);", "+        ClassFinder cfinder = new TreeClassFinder(ctx,", "+                                                  interpreter,", "+                                                  classPool);", "+        classPool.add(cun, new TreeClassInfo(td, cfinder));", "+        return;", "+      }", "+    } catch (ClassNotFoundException e) {", "+    ", "+    try {", "+      File f = lf.findCompilationUnit(name);", "+      FileInputStream fis = new FileInputStream(f);", "+      ", "+      ParserFactory pf = interpreter.getParserFactory();", "+      SourceCodeParser p = pf.createParser(fis, f.getCanonicalPath());", "+      List<Node> stmts = p.parseCompilationUnit();", "+      ", "+      Iterator<Node> it = stmts.iterator();", "+      CompilationUnitVisitor v  = new CompilationUnitVisitor();", "+      while (it.hasNext()) {", "+        it.next().acceptVisitor(v);", "+      }", "+    } catch (IOException e) {", "+      throw new ClassNotFoundException(name);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dfcf19273a5a4c6347a151dd5141463", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     protected Object[] interpretArguments(Class c, \t\t\t\t\tConstructorParametersDescriptor cpd, \t\t\t\t\tObject[] args)", "signatureAfterChange": "   protected Object[] interpretArguments(Class c,                                         ConstructorParametersDescriptor cpd,                                         Object[] args)", "diff": ["-     */", "-    protected Object[] interpretArguments(Class c,", "-\t\t\t\t\tConstructorParametersDescriptor cpd,", "-\t\t\t\t\tObject[] args) {", "-\tif (cpd.variables == null) {", "-\t    cpd.importationManager.setClassLoader(classLoader);", "-", "-\t    Context ctx = new StaticContext(this, c, cpd.importationManager);", "-\t    ctx.setAdditionalClassLoaderContainer(classLoader);", "-\t    Visitor nv = new NameVisitor(ctx);", "-\t    Visitor tc = new TypeChecker(ctx);", "-", "-\t    // Check the parameters", "-\t    if (cpd.parameters != null) {", "-\t\tListIterator it = cpd.parameters.listIterator();", "-\t\twhile (it.hasNext()) {", "-\t\t    ((Node)it.next()).acceptVisitor(tc);", "-\t\t}", "-\t    }", "-", "-\t    if (cpd.arguments != null) {", "-\t\tListIterator it = cpd.arguments.listIterator();", "-\t\twhile (it.hasNext()) {", "-\t\t    Node   root = (Node)it.next();", "-\t\t    Object res  = root.acceptVisitor(nv);", "-\t\t    if (res != null) {", "-\t\t\tit.set(res);", "-\t\t    }", "-\t\t}", "-", "-\t\tit = cpd.arguments.listIterator();", "-\t\twhile (it.hasNext()) {", "-\t\t    ((Node)it.next()).acceptVisitor(tc);", "-\t\t}", "-\t    }", "-\t    cpd.variables = ctx.getCurrentScopeVariables();", "-\t}", "-", "-\tContext ctx = new StaticContext(this, c, cpd.variables);", "-\tctx.setAdditionalClassLoaderContainer(classLoader);", "-", "-\t// Set the arguments values", "-\tif (cpd.parameters != null) {", "-\t    Iterator it  = cpd.parameters.iterator();", "-\t    int      i   = 0;", "-\t    while (it.hasNext()) {", "-\t\tctx.set(((FormalParameter)it.next()).getName(), args[i++]);", "-\t    }", "-\t}", "-\t", "-\tObject[] result = new Object[0];", "-\t", "-\tif (cpd.arguments != null) {", "-\t    Visitor v = new EvaluationVisitor(ctx);", "-\t    ListIterator it = cpd.arguments.listIterator();", "-\t    result = new Object[cpd.arguments.size()];", "-\t    int i = 0;", "-\t    while (it.hasNext()) {", "-\t\tresult[i++] = ((Node)it.next()).acceptVisitor(v);", "-\t    }", "-\t}", "-\t", "-\treturn result;", "-    }", "+   */", "+  protected Object[] interpretArguments(Class c,", "+                                        ConstructorParametersDescriptor cpd,", "+                                        Object[] args) {", "+    if (cpd.variables == null) {", "+      cpd.importationManager.setClassLoader(classLoader);", "+      ", "+      Context ctx = new StaticContext(this, c, cpd.importationManager);", "+      ctx.setAdditionalClassLoaderContainer(classLoader);", "+      NameVisitor nv = new NameVisitor(ctx);", "+      TypeChecker tc = new TypeChecker(ctx);", "+      ", "+      // Check the parameters", "+      if (cpd.parameters != null) {", "+        ListIterator<FormalParameter> it = cpd.parameters.listIterator();", "+        while (it.hasNext()) {", "+         it.next().acceptVisitor(tc);", "+      }", "+      ", "+      if (cpd.arguments != null) {", "+        ListIterator<Expression> it = cpd.arguments.listIterator();", "+        while (it.hasNext()) {", "+          Expression root = it.next();", "+          Object res = root.acceptVisitor(nv);", "+          if (res != null) {", "+            it.set((Expression) res);   //This cast is a guess /**/", "+          }", "+        }", "+        // FIX THIS CODE !!!  The mutation and typing are abominations. /**/ ", "+        it = cpd.arguments.listIterator();", "+        while (it.hasNext()) {", "+          it.next().acceptVisitor(tc);", "+        }", "+      }", "+      cpd.variables = ctx.getCurrentScopeVariables();", "+    ", "+    Context ctx = new StaticContext(this, c, cpd.variables);", "+    ctx.setAdditionalClassLoaderContainer(classLoader);", "+    ", "+    // Set the arguments values", "+    if (cpd.parameters != null) {", "+      Iterator<FormalParameter> it  = cpd.parameters.iterator();", "+      int      i   = 0;", "+      while (it.hasNext()) {", "+        ctx.set(it.next().getName(), args[i++]);", "+      }", "+    }", "+    ", "+    Object[] result = new Object[0];", "+    ", "+    if (cpd.arguments != null) {", "+      EvaluationVisitor ev = new EvaluationVisitor(ctx);", "+      ListIterator<Expression> it = cpd.arguments.listIterator();", "+      result = new Object[cpd.arguments.size()];  ", "+      int i = 0;", "+      while (it.hasNext()) {", "+        result[i++] = it.next().acceptVisitor(ev);", "+      }", "+    }", "+    ", "+    return result;", "+  }"]}], "num": 21602}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7f9ed16309a48a9fe097d8711d1539e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03090770638e32c946cc4938a0328dc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint)", "signatureAfterChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint)      throws DebugException", "diff": ["-  public synchronized void removeBreakpoint(final Breakpoint breakpoint) {", "-    if (!isReady()) return;", "+  public synchronized void removeBreakpoint(final Breakpoint breakpoint) ", "+    throws DebugException", "+  {", "+    _ensureReady();", "-    if ( requests.size() > 0 && _eventManager != null) {", "+    if (requests.size() > 0 && _eventManager != null) {", "+      // Remove all event requests for this breakpoint", "+        _log(\"VMMismatch when removing breakpoint.\", vme);", "+        _log(\"VMDisconnected when removing breakpoint.\", vmde);", "-    //else {", "-    // Now always remove from pending request, since it's always there", "+", "+    // Always remove from pending request, since it's always there", "-    //}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38cc548c2649232c36733ca8c9337962", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public synchronized Vector<DebugStackData> getCurrentStackFrameData() throws DebugException", "signatureAfterChange": "   public synchronized Vector<DebugStackData> getCurrentStackFrameData() throws DebugException", "diff": ["-      Iterator<StackFrame> iter = thread.frames().iterator();  // Added <StackFrame> parameterization; warning will go away in JDK 1.5", "-      while (iter.hasNext()) {", "-        frames.add(new JPDAStackData(iter.next()));", "-      }", "+      for (StackFrame f : thread.frames()) { frames.add(new JPDAStackData(f)); }", "-      _log(\"Unable to obtain stack frame.\", itse);", "+      error.log(\"Unable to obtain stack frame.\", itse);", "-      _log(\"VMDisconnected when getting the current stack frame data.\", vmde);", "+      error.log(\"VMDisconnected when getting the current stack frame data.\", vmde);", "-      _log(\"The stack frame requested is invalid.\", isfe);", "+      error.log(\"The stack frame requested is invalid.\", isfe);", "-  }"]}], "num": 31011}
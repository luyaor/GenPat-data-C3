{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eeb0857246c3e106be59de301fb5bbdd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a64d74b32a251fc3052d0abdb776609", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testStepOverWithPackage()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testStepOverWithPackage()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-  public void testStepOverWithPackage() ", "+  public synchronized void testStepOverWithPackage() ", "-   ", "+    ", "-    // Resume until finished", "-    synchronized(_notifierLock) {", "-      _debugger.resume();", "-      _waitForNotifies(1);  // threadDied", "-      _notifierLock.wait();", "+    // Resume until finished, waiting for interpret call to finish", "+    InterpretListener interpretListener = new InterpretListener();", "+    _model.addListener(interpretListener);", "+    synchronized(interpretListener) {", "+      synchronized(_notifierLock) {", "+        _debugger.resume();", "+        interpretListener.wait();  // wait for interactionEnded", "+        _waitForNotifies(1);  // threadDied", "+        _notifierLock.wait();", "+      }", "+    interpretListener.assertInteractionEndCount(1);", "+    _model.removeListener(interpretListener);", "+", "-    // Remove listener at end", "+    // Shutdown the debugger", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91677b782d9b81e388bf164d0ce23a1a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "3c002733e6bec1f112ca58ec38806686ba48b477", "commitAfterChange": "781f0d0cc2beb96bc72b49283dde3e8cd187c6ba", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public synchronized void testMultiThreadedBreakpointsAndStep()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testMultiThreadedBreakpointsAndStep()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    _debugger.toggleBreakpoint(doc,index,5);", "-    index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I just woke up.  I\\'m a big boy now.\\\");\");", "+    index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I just woke up.  I\\'m a big boy now.\\\");\");", "+    _debugger.toggleBreakpoint(doc,index,16);", "-    ", "+     _debugger.addListener(debugListener);", "+    // Resume until finished, waiting for interpret call to end", "+     InterpretListener interpretListener = new InterpretListener();", "+     _model.addListener(interpretListener);", "+     synchronized(_notifierLock) {", "+       _debugger.resume();", "+       _waitForNotifies(2);  // interactionEnded, currThreadDied", "+       _notifierLock.wait();", "+     }", "+     interpretListener.assertInteractionEndCount(1);", "+     _model.removeListener(interpretListener);", "+     ", "-    _debugger.addListener(debugListener);", "-      _model.resetInteractions();", "+      _debugger.shutdown();"]}], "num": 1319}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e44a7d80349d2b3fec750853922a209d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da296791e254df7ebde9b13ced0d39e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "7228cea597c372946661a7e1f1db20fd24b9dee1", "commitAfterChange": "8bb2649bd077e2bf6ccaf611ff49da8ad083e7b7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public DefinitionsPane(MainFrame mf, final OpenDefinitionsDocument doc)", "signatureAfterChange": "   public DefinitionsPane(MainFrame mf, final OpenDefinitionsDocument doc)", "diff": ["-    addFocusListener(new FocusListener() {", "+    addFocusListener(new FocusAdapter() {", "-      public void focusLost(FocusEvent e) {  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b5fa931a2ff95c504d6e1d71aadb71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ClipboardHistoryFrame.java", "commitBeforeChange": "7228cea597c372946661a7e1f1db20fd24b9dee1", "commitAfterChange": "8bb2649bd077e2bf6ccaf611ff49da8ad083e7b7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r   private void init()", "signatureAfterChange": "   private void init()", "diff": ["-   */\r", "-  private void init() {\r", "-    addWindowListener(new java.awt.event.WindowAdapter() {\r", "-      public void windowClosing(WindowEvent winEvt) {\r", "-        cancelButtonPressed();\r", "-      }\r", "-    });\r", "-    addComponentListener(new java.awt.event.ComponentAdapter() {\r", "-      public void componentResized(ComponentEvent e) {\r", "-        validate();\r", "-        _historyList.ensureIndexIsVisible(_historyList.getSelectedIndex());\r", "-      }\r", "-    });\r", "-    \r", "-    JRootPane rootPane = this.getRootPane();\r", "-    InputMap iMap = rootPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\r", "-    iMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), \"escape\");\r", "-    \r", "-    ActionMap aMap = rootPane.getActionMap();\r", "-    aMap.put(\"escape\", new AbstractAction() {\r", "-      public void actionPerformed(ActionEvent e) {\r", "-        cancelButtonPressed();\r", "-      }\r", "-    });\r", "-\r", "-    _historyList = new JList();\r", "-    _historyList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r", "-    _historyList.addListSelectionListener(new ListSelectionListener() {\r", "-      public void valueChanged(ListSelectionEvent e) {\r", "-        updatePreview();\r", "-      }\r", "-    });\r", "-    _historyList.setFont(DrJava.getConfig().getSetting(OptionConstants.FONT_MAIN));\r", "-    _historyList.setCellRenderer(new DefaultListCellRenderer()  {\r", "-      public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\r", "-        Component c = super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);\r", "-        c.setForeground(DrJava.getConfig().getSetting(OptionConstants.DEFINITIONS_NORMAL_COLOR));\r", "-        return c;\r", "-      }\r", "-    });\r", "-    _historyList.addFocusListener(new FocusListener() {\r", "-      public void focusGained(FocusEvent e) {\r", "-      }\r", "-\r", "-      public void focusLost(FocusEvent e) {\r", "-        if ((e.getOppositeComponent()!=_previewArea) && \r", "-            (e.getOppositeComponent()!=_okButton) && \r", "-            (e.getOppositeComponent()!=_cancelButton)) {\r", "-          _historyList.requestFocus();\r", "-        }\r", "-      }\r", "-    });\r", "-\r", "-    // buttons\r", "-    _okButton = new JButton(\"OK\");\r", "-    _okButton.addActionListener(new ActionListener() {\r", "-      public void actionPerformed(ActionEvent e) {\r", "-        okButtonPressed();\r", "-      }\r", "-    });\r", "-\r", "-    _cancelButton = new JButton(\"Cancel\");\r", "-    _cancelButton.addActionListener(new ActionListener() {\r", "-      public void actionPerformed(ActionEvent e) {\r", "-        cancelButtonPressed();\r", "-      }\r", "-    });\r", "-        \r", "-    // put everything together\r", "-    Container contentPane = getContentPane();\r", "-    \r", "-    GridBagLayout layout = new GridBagLayout();\r", "-    contentPane.setLayout(layout);\r", "-    \r", "-    GridBagConstraints c = new GridBagConstraints();\r", "-    c.anchor = GridBagConstraints.NORTHWEST;\r", "-    c.weightx = 1.0;\r", "-    c.weighty = 0.0;\r", "-    c.gridwidth = GridBagConstraints.REMAINDER; // end row\r", "-    c.insets.top = 2;\r", "-    c.insets.left = 2;\r", "-    c.insets.bottom = 2;\r", "-    c.insets.right = 2;\r", "-\r", "-    c.fill = GridBagConstraints.BOTH;\r", "-    c.weighty = 1.0;\r", "-    contentPane.add(new JScrollPane(_historyList, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, \r", "-                                    JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED), \r", "-                    c);\r", "-    \r", "-    _previewArea = new JTextArea(\"\");\r", "-    _previewArea.setEditable(false);\r", "-    _previewArea.setDragEnabled(false);\r", "-    _previewArea.setEnabled(false);\r", "-    _previewArea.setFont(DrJava.getConfig().getSetting(OptionConstants.FONT_MAIN));\r", "-    _previewArea.setDisabledTextColor(DrJava.getConfig().getSetting(OptionConstants.DEFINITIONS_NORMAL_COLOR));\r", "-    c.weighty = 2.0;\r", "-    contentPane.add(new JScrollPane(_previewArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, \r", "-                                    JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED), \r", "-                    c);\r", "-    \r", "-    c.anchor = GridBagConstraints.SOUTH;\r", "-    \r", "-    JPanel buttonPanel = new JPanel(new GridBagLayout());\r", "-    GridBagConstraints bc = new GridBagConstraints();\r", "-    bc.insets.left = 2;\r", "-    bc.insets.right = 2;\r", "-    buttonPanel.add(_okButton, bc);\r", "-    buttonPanel.add(_cancelButton, bc);\r", "-    \r", "-    c.weighty = 0.0;\r", "-    contentPane.add(buttonPanel, c);\r", "-\r", "-    Dimension parentDim = (_mainFrame != null) ? _mainFrame.getSize() : getToolkit().getScreenSize();\r", "-    int xs = (int)parentDim.getWidth()/3;\r", "-    int ys = (int)parentDim.getHeight()/4;\r", "-    setSize(Math.max(xs,400), Math.max(ys, 300));\r", "-    MainFrame.setPopupLoc(this, _mainFrame);\r", "-\r", "-    updateView();\r", "-  }\r", "+   */", "+  private void init() {", "+    addWindowListener(new java.awt.event.WindowAdapter() {", "+      public void windowClosing(WindowEvent winEvt) {", "+        cancelButtonPressed();", "+      }", "+    });", "+    addComponentListener(new java.awt.event.ComponentAdapter() {", "+      public void componentResized(ComponentEvent e) {", "+        validate();", "+        _historyList.ensureIndexIsVisible(_historyList.getSelectedIndex());", "+      }", "+    });", "+    ", "+    JRootPane rootPane = this.getRootPane();", "+    InputMap iMap = rootPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);", "+    iMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), \"escape\");", "+    ", "+    ActionMap aMap = rootPane.getActionMap();", "+    aMap.put(\"escape\", new AbstractAction() {", "+      public void actionPerformed(ActionEvent e) {", "+        cancelButtonPressed();", "+      }", "+    });", "+", "+    _historyList = new JList();", "+    _historyList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "+    _historyList.addListSelectionListener(new ListSelectionListener() {", "+      public void valueChanged(ListSelectionEvent e) {", "+        updatePreview();", "+      }", "+    });", "+    _historyList.setFont(DrJava.getConfig().getSetting(OptionConstants.FONT_MAIN));", "+    _historyList.setCellRenderer(new DefaultListCellRenderer()  {", "+      public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {", "+        Component c = super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);", "+        c.setForeground(DrJava.getConfig().getSetting(OptionConstants.DEFINITIONS_NORMAL_COLOR));", "+        return c;", "+      }", "+    });", "+    _historyList.addFocusListener(new FocusAdapter() {", "+", "+      public void focusLost(FocusEvent e) {", "+        if ((e.getOppositeComponent()!=_previewArea) && ", "+            (e.getOppositeComponent()!=_okButton) && ", "+            (e.getOppositeComponent()!=_cancelButton)) {", "+          _historyList.requestFocus();", "+        }", "+      }", "+    });", "+", "+    // buttons", "+    _okButton = new JButton(\"OK\");", "+    _okButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        okButtonPressed();", "+      }", "+    });", "+", "+    _cancelButton = new JButton(\"Cancel\");", "+    _cancelButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        cancelButtonPressed();", "+      }", "+    });", "+        ", "+    // put everything together", "+    Container contentPane = getContentPane();", "+    ", "+    GridBagLayout layout = new GridBagLayout();", "+    contentPane.setLayout(layout);", "+    ", "+    GridBagConstraints c = new GridBagConstraints();", "+    c.anchor = GridBagConstraints.NORTHWEST;", "+    c.weightx = 1.0;", "+    c.weighty = 0.0;", "+    c.gridwidth = GridBagConstraints.REMAINDER; // end row", "+    c.insets.top = 2;", "+    c.insets.left = 2;", "+    c.insets.bottom = 2;", "+    c.insets.right = 2;", "+", "+    c.fill = GridBagConstraints.BOTH;", "+    c.weighty = 1.0;", "+    contentPane.add(new JScrollPane(_historyList, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, ", "+                                    JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED), ", "+                    c);", "+    ", "+    _previewArea = new JTextArea(\"\");", "+    _previewArea.setEditable(false);", "+    _previewArea.setDragEnabled(false);", "+    _previewArea.setEnabled(false);", "+    _previewArea.setFont(DrJava.getConfig().getSetting(OptionConstants.FONT_MAIN));", "+    _previewArea.setDisabledTextColor(DrJava.getConfig().getSetting(OptionConstants.DEFINITIONS_NORMAL_COLOR));", "+    c.weighty = 2.0;", "+    contentPane.add(new JScrollPane(_previewArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, ", "+                                    JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED), ", "+                    c);", "+    ", "+    c.anchor = GridBagConstraints.SOUTH;", "+    ", "+    JPanel buttonPanel = new JPanel(new GridBagLayout());", "+    GridBagConstraints bc = new GridBagConstraints();", "+    bc.insets.left = 2;", "+    bc.insets.right = 2;", "+    buttonPanel.add(_okButton, bc);", "+    buttonPanel.add(_cancelButton, bc);", "+    ", "+    c.weighty = 0.0;", "+    contentPane.add(buttonPanel, c);", "+", "+    Dimension parentDim = (_mainFrame != null) ? _mainFrame.getSize() : getToolkit().getScreenSize();", "+    int xs = (int)parentDim.getWidth()/3;", "+    int ys = (int)parentDim.getHeight()/4;", "+    setSize(Math.max(xs,400), Math.max(ys, 300));", "+    MainFrame.setPopupLoc(this, _mainFrame);", "+", "+    updateView();", "+  }"]}], "num": 1338}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b479af73b962bcd62ce27869db935ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcc6aca4b034c6ab6db87406720b7bd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "    public void killInterpreter(File wd)", "signatureAfterChange": "    public void killInterpreter(File wd)", "diff": ["+    boolean restart;", "-        _workDir = wd;", "-        _restart = (wd != null);", "-        _cleanlyRestarting = true;", "-        if (_restart) _interactionsModel.interpreterResetting();", "-      }", "-    /* Dropped lock before making remote call. */", "-    try { quitSlave(); } // new slave JVM is restarted by call on startInterpreterJVM on death of current slave", "+      _workDir = wd;", "+      _restart = (wd != null);", "+      _cleanlyRestarting = true;", "+      restart = _restart;", "+    }", "+      ", "+    /* Dropping lock before performing operations on the interactions document/pane and making remote call. */", "+    try { ", "+      if (restart) _interactionsModel.interpreterResetting();", "+      quitSlave(); ", "+    } // new slave JVM is restarted by call on startInterpreterJVM on death of current slave"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd3f9721475a1ff4f977df7073daeb50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected void handleSlaveConnected()", "signatureAfterChange": "   protected void handleSlaveConnected(SlaveRemote newSlave)", "diff": ["+   */", "+  protected void handleSlaveConnected(SlaveRemote newSlave) {", "+    InterpreterJVMRemoteI slaveCast = (InterpreterJVMRemoteI) newSlave;", "+    Boolean allowAccess = DrJava.getConfig().getSetting(OptionConstants.ALLOW_PRIVATE_ACCESS);", "+    try { slaveCast.setPrivateAccessible(allowAccess); }", "+    catch (RemoteException re) { _handleRemoteException(re); }", "+", "+    synchronized (_startupLock) {", "+      _restart = true;", "+      _cleanlyRestarting = false;", "+      _startupAttempts = 0;", "+      _slaveJVMUsed = false;", "+      _interpreterJVM.set(slaveCast); // initialized after all other state is set", "+      _startupComplete.signal();", "+    }", "+    _interactionsModel.interpreterReady(_workingDir);", "+    _junitModel.junitJVMReady();", "+  }", "-  /** Called when Interpreter JVM connects to us after being started. Assumes that _masterJVMLock is already held. */", "-  protected void handleSlaveConnected() {", "-    debug.logStart();", "-    // we reset the enabled flag since, unless told otherwise via", "-    // killInterpreter(false), we want to automatically respawn", "-//    System.out.println(\"handleSlaveConnected() called in MainJVM\");  // DEBUG", "-    _restart = true;", "-    _cleanlyRestarting = false;", "-    ", "-    Boolean allowAccess = DrJava.getConfig().getSetting(OptionConstants.ALLOW_PRIVATE_ACCESS);", "-    setPrivateAccessible(allowAccess.booleanValue());", "-    ", "-//    System.out.println(\"Calling interpreterReady(\" + _workDir + \") called in MainJVM\");  // DEBUG", "-    _interactionsModel.interpreterReady(_workDir);  // not running in the event thread!", "-    _junitModel.junitJVMReady();", "-    ", "-    _log.log(\"Main JVM Thread for slave connection is: \" + Thread.currentThread());", "-    ", "-    // notify a thread that is waiting in ensureInterpreterConnected", "-    synchronized(_interpreterLock) {", "-      _interpreterLock.notifyAll();", "-    }", "-    debug.logEnd();", "-  }"]}], "num": 1855}
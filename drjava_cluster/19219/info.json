{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce0ea191d9a2cb27d0a97b2a53d1f653", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58eec5e8cbb31538f92f48210988e6ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 139, "signatureBeforeChange": "   public static <T> ConsList<T> asConsList(Iterable<T> iter)", "signatureAfterChange": "   public static <T> ConsList<T> asConsList(Iterable<T> iter)", "diff": ["-   */", "-  public static <T> ConsList<T> asConsList(Iterable<T> iter) {", "-    if (iter instanceof ConsList<?>) { return (ConsList<T>) iter; }", "-    else {", "-      ConsList<T> result = ConsList.empty();", "-      for (T elt : ReverseIterable.make(iter)) {", "-        result = ConsList.cons(elt, result);", "-      }", "-      return result;", "-    }", "-  }", "+   */", "+  public static <T> ConsList<T> asConsList(Iterable<T> iter) {", "+    if (iter instanceof ConsList<?>) { return (ConsList<T>) iter; }", "+    else {", "+      ConsList<T> result = ConsList.empty();", "+      for (T elt : reverse(iter)) { result = ConsList.cons(elt, result); }", "+      return result;", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a8c9958d08c84c43a0fd53ef73b7db7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static int sizeOf(Iterable<?> iter, int bound)", "signatureAfterChange": "   public static int sizeOf(Iterable<?> iter, int bound)", "diff": ["-    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).size(); }", "-    else if (iter instanceof Collection<?>) { return ((Collection<?>) iter).size(); }", "+    if (iter instanceof SizedIterable<?>) { return ((SizedIterable<?>) iter).size(bound); }", "+    else if (iter instanceof Collection<?>) {", "+      int result = ((Collection<?>) iter).size();", "+      return result <= bound ? result : bound;", "+    }", "-      for (Object o : iter) {", "-        result++;", "-        if (result >= bound) { return bound; }", "-      }", "+      for (Object o : iter) { result++; if (result == bound) break; }"]}], "num": 19219}
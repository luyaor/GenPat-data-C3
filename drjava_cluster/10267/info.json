{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e9759fbf2baa6b90710d1938668c3a4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17c03a957d31bcf947bb946d7a1213c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/AFindReplaceMachineState.java", "commitBeforeChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "commitAfterChange": "d61b8181e3991377c3e72e5da1d438e3d26d3479", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public boolean isOnMatch()", "signatureAfterChange": "   public boolean isOnMatch()", "diff": ["+   */", "+  public boolean isOnMatch() {", "+    String findWord = _findWord;", "+    int len, off;", "+    len = findWord.length();", "+    if (!_searchBackwards) {", "+      off = _current.getOffset() - len;", "+    }", "+    else {", "+      off = _current.getOffset();", "+    if (off < 0) {", "+      return false;", "+    }", "+    else if (off + len > _doc.getLength()) {", "+      return false;", "+    try {", "+      String matchSpace = _doc.getText(off, len);", "+      if (!_matchCase) {", "+        matchSpace = matchSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+      return matchSpace.equals(findWord);", "+    catch (BadLocationException e) {", "+      throw new UnexpectedException(e);", "+  }", "-     */", "-    public boolean isOnMatch() {", "-\tString findWord = this._findWord;", "-\tint len, off;", "-\tlen = findWord.length();", "-\tif(!_searchBackwards) {", "-\t    off = _current.getOffset() - len;", "-\t} else {", "-\t    off = _current.getOffset();", "-\t}", "-", "-\tif(off < 0){", "-\t    return false;", "-\t} else if (off + len > _doc.getLength()){", "-\t    return false;", "-\t}", "-", "-\ttry {", "-\t    String matchSpace = _doc.getText(off, len);", "-\t    if (!_matchCase){", "-\t\tmatchSpace = matchSpace.toLowerCase();", "-\t\tfindWord = findWord.toLowerCase();", "-\t    }", "-\t    return matchSpace.equals(findWord);", "-\t}", "-\tcatch (BadLocationException e) {", "-\t    throw new UnexpectedException(e);", "-\t}", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0b962e08d41fb5decb5e3e6b017e37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 232, "methodNumberAfterChange": 235, "signatureBeforeChange": "   public void setAllowKeyEvents(boolean a)", "signatureAfterChange": "      public void setAllowKeyEvents(boolean a)", "diff": ["-  private boolean allow_key_events = true;", "-  public void setAllowKeyEvents(boolean a) { this.allow_key_events = a; }", "+  public void setAllowKeyEvents(boolean a) { _allowKeyEvents = a; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62dc91bc810a4e0f451c44b6951d1aa1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/AFindReplaceMachineState.java", "commitBeforeChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "commitAfterChange": "d61b8181e3991377c3e72e5da1d438e3d26d3479", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void setSearchBackwards(boolean searchBackwards)", "signatureAfterChange": "    public void setSearchBackwards(boolean searchBackwards)", "diff": ["+", "+  public void setSearchBackwards(boolean searchBackwards) {", "+    if (_searchBackwards != searchBackwards) {", "+      // If we switch from searching forward to searching backwards,", "+      // isOnMatch is true, and _findword is the same as the _lastFindWord,", "+      // we know the user just found _findWord, so skip one find.", "+      if (isOnMatch() && _findWord.equals(_lastFindWord)) {", "+        _skipOneFind = true;", "+      }", "+    }", "+    _searchBackwards = searchBackwards;", "+  }", "-    public void setSearchBackwards(boolean searchBackwards) {", "-\tif (_searchBackwards != searchBackwards) {", "-\t    // If we switch from searching forward to searching backwards,", "-\t    // isOnMatch is true, and _findword is the same as the _lastFindWord,", "-\t    // we know the user just found _findWord, so skip one find.", "-\t    if (isOnMatch() && _findWord.equals(_lastFindWord)) {", "-\t\t_skipOneFind = true;", "-\t    }", "-\t}", "-\tthis._searchBackwards = searchBackwards;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6623a21a91d8e1e4f81a7634a52d5ada", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 72, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "          public void run()", "diff": ["-      synchronized(AbstractDJDocument.this){", "+      synchronized(_reduced){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab5af50ccc3fe241d217abb69713d163", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindAnyOccurrenceState.java", "commitBeforeChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "commitAfterChange": "d61b8181e3991377c3e72e5da1d438e3d26d3479", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["+   */", "+  public FindResult findNext() {", "+    try {", "+      FindResult tempFr = new FindResult(_doc, -1, false);", "+      // If the user just found and toggled the \"Search Backwards\"", "+      // option, we should skip the first find.", "+      if (_skipOneFind) {", "+        int wordLength = _lastFindWord.length();", "+        if (!_searchBackwards) {", "+          setPosition(getCurrentOffset() + wordLength);", "+        }", "+        else {", "+          setPosition(getCurrentOffset() - wordLength);", "+        }", "+        positionChanged();", "+      }", "+      int start, len;", "+      String findWord = _findWord;", "+      // get the search space in the document", "+      String findSpace;", "+      if (!_searchBackwards) {", "+        start = _current.getOffset();", "+        len = _doc.getLength() - start;", "+      }", "+      else {", "+        start = 0;", "+        len = _current.getOffset();", "+      }", "+      findSpace = _doc.getText(start, len);", "+      if (!_matchCase) {", "+        findSpace = findSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+", "+      // find the first occurrence of findWord", "+      int foundOffset;", "+      foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                    : findSpace.lastIndexOf(findWord);", "+      // if we've found it", "+      if (foundOffset >= 0) {", "+        _found = true;", "+        foundOffset += start;", "+        if (!_searchBackwards) {", "+          foundOffset += findWord.length();", "+        }", "+        _current = _doc.createPosition(foundOffset);", "+      }", "+      else {", "+        // if we haven't found it", "+        if (_searchAllDocuments) {", "+          tempFr = _findNextInAllDocs(!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "+                                      _docIterator.getPrevDocument(_doc));", "+          foundOffset = tempFr.getFoundOffset();", "+        }", "+        // we still haven't found it", "+        if (foundOffset == -1) {", "+          _wrapped = true;", "+          //When we wrap, we need to include some text that was already searched before wrapping.", "+          //Otherwise, we won't find an only match that has the caret in it already.", "+          if (!_searchBackwards) {", "+            start = 0;", "+            len = _current.getOffset() + (_findWord.length() - 1);", "+            if (len > _doc.getLength()) {", "+              len = _doc.getLength();", "+            }", "+          }", "+          else {", "+            start = _current.getOffset() - (_findWord.length() - 1);", "+            if (start < 0) {", "+              start = 0;", "+            }", "+            len = _doc.getLength() - start;", "+          }", "+          findSpace = _doc.getText(start, len);", "+", "+          if (!_matchCase) {", "+            findSpace = findSpace.toLowerCase();", "+          }", "+          foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                        : findSpace.lastIndexOf(findWord);", "+", "+          if (foundOffset >= 0) {", "+            foundOffset += start;", "+            if (!_searchBackwards) {", "+              foundOffset += findWord.length();", "+            }", "+            _current = _doc.createPosition(foundOffset);", "+          }", "+        }", "+      }", "+      // flag the return value so that they can tell that we had to wrap", "+      // the file to determine the info.", "+", "+      //This means we have found the word before, just not in this call", "+      //      if(foundOffset == -1 && _found) {", "+      //        _current = _start;", "+      //        _found = false;", "+      //        return findNext();", "+      //      }", "+      //      else {", "+      FindResult fr = new FindResult(tempFr.getDocument(), foundOffset, _wrapped);", "+      _wrapped = false;", "+      return fr;", "+      //      }", "-     */", "-    public FindResult findNext() {", "-\ttry {", "-\t    FindResult tempFr = new FindResult(_doc, -1, false);", "-\t    // If the user just found and toggled the \"Search Backwards\"", "-\t    // option, we should skip the first find.", "-\t    if (_skipOneFind) {", "-\t\tint wordLength = _lastFindWord.length();", "-\t\tif (!_searchBackwards) {", "-\t\t    setPosition(getCurrentOffset() + wordLength);", "-\t\t}", "-\t\telse {", "-\t\t    setPosition(getCurrentOffset() - wordLength);", "-\t\t}", "-\t\tpositionChanged();", "-\t    }", "-\t    int start, len;", "-\t    String findWord = this._findWord;", "-\t    // get the search space in the document", "-\t    String findSpace;", "-\t    if(!_searchBackwards){", "-\t\tstart = _current.getOffset();", "-\t\tlen = _doc.getLength() - start;", "-\t    } else {", "-\t\tstart = 0;", "-\t\tlen = _current.getOffset();", "-\t    }", "-\t    findSpace = _doc.getText(start, len);", "-\t    if (!_matchCase){", "-\t\tfindSpace = findSpace.toLowerCase();", "-\t\tfindWord = findWord.toLowerCase();", "-\t    }", "-", "-\t    // find the first occurrence of findWord", "-\t    int foundOffset;", "-\t    foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-\t\t: findSpace.lastIndexOf(findWord);", "-\t    // if we've found it", "-\t    if (foundOffset >= 0) {", "-\t\t_found = true;", "-\t\tfoundOffset += start;", "-\t\tif (!_searchBackwards){", "-\t\t    foundOffset += findWord.length();", "-\t\t}", "-\t\t_current = _doc.createPosition(foundOffset);", "-\t    }", "-\t    else {", "-\t\t// if we haven't found it", "-\t\tif (_searchAllDocuments) {", "-\t\t    tempFr = _findNextInAllDocs(!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "-\t\t\t    _docIterator.getPrevDocument(_doc));", "-\t\t    foundOffset = tempFr.getFoundOffset();", "-\t\t}", "-\t\t// we still haven't found it", "-\t\tif (foundOffset == -1) {", "-\t\t    _wrapped = true;", "-\t\t    //When we wrap, we need to include some text that was already searched before wrapping.", "-\t\t    //Otherwise, we won't find an only match that has the caret in it already.", "-\t\t    if(!_searchBackwards){", "-\t\t\tstart = 0;", "-\t\t\tlen = _current.getOffset() + (_findWord.length() - 1);", "-\t\t\tif(len > _doc.getLength()){", "-\t\t\t    len = _doc.getLength();", "-\t\t\t}", "-\t\t    }", "-\t\t    else {", "-\t\t\tstart = _current.getOffset() - (_findWord.length() - 1);", "-\t\t\tif (start < 0){", "-\t\t\t    start = 0;", "-\t\t\t}", "-\t\t\tlen = _doc.getLength() - start;", "-\t\t    }", "-\t\t    findSpace = _doc.getText(start, len);", "-", "-\t\t    if (!_matchCase) {", "-\t\t\tfindSpace = findSpace.toLowerCase();", "-\t\t    }", "-\t\t    foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-\t\t\t: findSpace.lastIndexOf(findWord);", "-", "-\t\t    if (foundOffset >= 0) {", "-\t\t\tfoundOffset += start;", "-\t\t\tif (!_searchBackwards) {", "-\t\t\t    foundOffset += findWord.length();", "-\t\t\t}", "-\t\t\t_current = _doc.createPosition(foundOffset);", "-\t\t    }", "-\t\t}", "-\t    }", "-\t    // flag the return value so that they can tell that we had to wrap", "-\t    // the file to determine the info.", "-", "-\t    //This means we have found the word before, just not in this call", "-\t    //      if(foundOffset == -1 && _found) {", "-\t    //        _current = _start;", "-\t    //        _found = false;", "-\t    //        return findNext();", "-\t    //      }", "-\t    //      else {", "-\t    FindResult fr = new FindResult(tempFr.getDocument(), foundOffset, _wrapped);", "-\t    _wrapped = false;", "-\t    return fr;", "-\t    //      }", "-\t}", "-\tcatch (BadLocationException e) {", "-\t    throw new UnexpectedException(e);", "-\t}", "+    catch (BadLocationException e) {", "+      throw new UnexpectedException(e);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6b4937b3214154e644a6a121d42f2db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 74, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "          public void run()", "diff": ["-      synchronized(AbstractDJDocument.this){", "+      synchronized (_reduced){"]}], "num": 10267}
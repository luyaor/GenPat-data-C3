{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3efd7d7f5a4c5416cfe4f7215bd4b71f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a8ce3795af4e05a8e37fcb6a0f7e70", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "commitAfterChange": "ba6205cad42ae00df3c37c5cbd4625770848df66", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "signatureAfterChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "diff": ["-        KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(_a);", "-        _keyToDataMap.remove(_ks);", "+        KeyStrokeData data = _actionToDataMap.get(_a);", "+        if (data == null) {", "+          // Nothing to change", "+          return;", "+        }", "+", "+        // Only remove the old keystroke from the map if it", "+        //  is currently mapped to our data.  If not, our old", "+        //  keystroke has already been redefined and should not", "+        //  be removed!", "+        if (data.equals(_keyToDataMap.get(_ks))) {", "+          _keyToDataMap.remove(_ks);", "+        }", "-          KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(oce.value);", "+          KeyStrokeData conflictKSD = _keyToDataMap.get(oce.value);", "-        Action shiftAction = (Action) data.getShiftAction();", "+        Action shiftAction = data.getShiftAction();", "-          KeyStrokeData shiftKSD = (KeyStrokeData) _actionToDataMap.get(shiftAction);", "+          KeyStrokeData shiftKSD = _actionToDataMap.get(shiftAction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fabeed5c46e6b513f08c3b0a4b6f6ab1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/InterpreterUtilities.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected static Object binaryArithmeticOperation(Class c, Object l, Object r, \t\t\t\t\t\t   BinaryArithmeticOperation o)", "signatureAfterChange": "   protected static Object binaryArithmeticOperation(Class c, Object l, Object r,                                                     BinaryArithmeticOperation o)", "diff": ["-     */", "-    protected static Object binaryArithmeticOperation(Class c, Object l, Object r,", "-\t\t\t\t\t\t   BinaryArithmeticOperation o) {", "-\tif (l instanceof Character) {", "-\t    l = new Integer(((Character)l).charValue());", "-\t}", "-\tif (r instanceof Character) {", "-\t    r = new Integer(((Character)r).charValue());", "-\t}", "-\tif (c == int.class) {", "-\t    return new Integer", "-\t\t(o.invoke(((Number)l).intValue(), ((Number)r).intValue()));", "-\t} else if (c == long.class) {", "-\t    return new Long", "-\t\t(o.invoke(((Number)l).longValue(), ((Number)r).longValue()));", "-\t} else if (c == float.class) {", "-\t    return new Float", "-\t\t(o.invoke(((Number)l).floatValue(), ((Number)r).floatValue()));", "-\t} else {", "-\t    return new Double", "-\t\t(o.invoke(((Number)l).doubleValue(), ((Number)r).doubleValue()));", "-\t}", "-    }", "+   */", "+  protected static Object binaryArithmeticOperation(Class c, Object l, Object r,", "+                                                    BinaryArithmeticOperation o) {", "+    if (l instanceof Character) {", "+      l = new Integer(((Character)l).charValue());", "+    if (r instanceof Character) {", "+      r = new Integer(((Character)r).charValue());", "+    ", "+    Number leftNum = (Number) l;", "+    Number rightNum = (Number) r;", "+    ", "+    if (c == int.class) {", "+      return new Integer(o.invoke(leftNum.intValue(), ", "+                                  rightNum.intValue()));", "+    } ", "+    else if (c == long.class) {", "+      return new Long(o.invoke(leftNum.longValue(), ", "+                               rightNum.longValue()));", "+    } ", "+    else if (c == float.class) {", "+      return new Float(o.invoke(leftNum.floatValue(), ", "+                                rightNum.floatValue()));", "+    } ", "+    else {", "+      return new Double(o.invoke(leftNum.doubleValue(), ", "+                                 rightNum.doubleValue()));", "+  }"]}], "num": 8032}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c36a9d82253a748f35e8392c007410c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "240d1542353c86c2c3215db08b7989a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, InvocationTargetException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "diff": ["-      throws InterruptedException, InvocationTargetException, IOException {", "-    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder, onExit).value(); }", "+      throws InterruptedException, ExecutionException, IOException {", "+    Thunk<Remote> task = new ExportRemoteTask(factory);", "+    try { return new ProcessTaskController<Remote>(jvmBuilder, DIRECT_EXECUTOR, task, onExit).get(); }", "+    // an interrupt on this thread translates into a \"cancel\" because DIRECT_EXECUTOR runs the task on this thread", "+    catch (CancellationException e) { throw new InterruptedException(); }", "-      Throwable cause = e.getCause();", "-      if (cause instanceof InterruptedException) { throw (InterruptedException) cause; }", "-      else if (cause instanceof InvocationTargetException) { throw (InvocationTargetException) cause; }", "-      else if (cause instanceof IOException) { throw (IOException) cause; }", "+      if (e.getCause() instanceof IOException) { throw (IOException) e.getCause(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6596cd49a958508c9fa4e66083f19d81", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "701cda038bdbb4505f738d5f2728e5888b8608b3", "commitAfterChange": "a2c3a24c2af61d289658b8fde0de718a948c97d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Object interpret(String s) throws ExceptionReturnedException", "signatureAfterChange": "   public Object interpret(String s) throws ExceptionReturnedException", "diff": ["-    /**", "-     * trims the whitespace from beginning and end of string", "-     * checks the end to see if it is a semicolon", "-     * adds a semicolon if necessary", "+    ", "+    /* Trims the whitespace from beginning and end of string", "+     * Checks the end to see if it is a semicolon", "+     * Adds a semicolon if necessary", "-      if (print)", "-        return result;", "-      else", "-        return JavaInterpreter.NO_RESULT;", "+      if (print) return result;", "+      else return JavaInterpreter.NO_RESULT;", "-      if (cause instanceof ThrownException) {", "-        cause = ((ThrownException) cause).getException();", "-      }", "-      else if (cause instanceof CatchedExceptionError) {", "-        cause = ((CatchedExceptionError) cause).getException();", "-      }", "+      if (cause instanceof ThrownException) cause = ((ThrownException) cause).getException();", "+      else if (cause instanceof CatchedExceptionError) cause = ((CatchedExceptionError) cause).getException();"]}], "num": 27427}
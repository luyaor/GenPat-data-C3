{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b006431624f4bdab93123241a48c0415", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03ce47f1aff9a3b171ac06ffd3ccd9af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0c8d146c06eba1c2298f0daceb39048930ad6325", "commitAfterChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": "     private void _setUpPanes()", "signatureAfterChange": "     private void _setUpPanes()", "diff": ["-    _debugPanel = new JPanel();", "+    //_debugPanel = new JPanel();", "+", "+    // Try to create debug panel (see if JSwat is around)", "+    if (_model.getDebugManager() != null) {", "+      try {", "+        _debugPanel = new DebugPanel(_model, this, _model.getDebugManager());", "+      }", "+      catch(NoClassDefFoundError e) {", "+        // Don't use the debugger", "+        _debugPanel = null;", "+      }", "+    } else {", "+      _debugPanel = null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44c03baea1a4c7d436175579a2165ffa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void updateData()", "signatureAfterChange": "   public void updateData()", "diff": ["-      _watches = _debugger.getWatches();", "-      // Get threads and stack (thread suspended); the debugger will pass empty", "-      // vectors if there are no threads or stack frames", "-      _threads = _debugger.getCurrentThreadData();", "-      _stackFrames = _debugger.getCurrentStackFrameData();", "+      try {", "+        if (_debugger.isCurrentThreadSuspended()) {", "+          _watches = _debugger.getWatches();", "+          _stackFrames = _debugger.getCurrentStackFrameData();", "+        }", "+        else {", "+          _watches = new Vector<DebugWatchData>();", "+          _stackFrames = new Vector<DebugStackData>();", "+        }", "+        _threads = _debugger.getCurrentThreadData();", "+      }", "+      catch (DebugException de) {", "+        // Thrown if", "+        _frame._showDebugError(de);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70fa99ff9ac3681a465fb9bc35197c74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/repl/EclipseInteractionsModel.java", "commitBeforeChange": "9e872e89ecbb011ef008c884ca8c25835ce56230", "commitAfterChange": "643b18bac8370f79aefcf668722f7c98ff72b6b4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "   protected void _visitDelta(IJavaElementDelta delta, int depth)", "signatureAfterChange": "   protected void _visitDelta(IJavaElementDelta delta, int depth)", "diff": ["+    ", "+    // Case: project opened", "+    else if (kind == IJavaElementDelta.ADDED) {", "+      if (element instanceof IJavaProject) {", "+        try {", "+          _addProjectToClasspath((IJavaProject)element);", "+        }", "+        catch(CoreException e) {", "+          throw new UnexpectedException(e);", "+        }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f8541e7b118fbf61a1d39f43de876e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "90ef69282c46168e0825e1541e1aac142b594af9", "commitAfterChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private void resumeThread(ThreadReference thread)", "signatureAfterChange": "      private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException", "diff": ["-  private void resumeThread(ThreadReference thread){", "+  private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException{", "+    ", "+    if( printMessages )  System.out.println(\"Getting suspendCount = \" + suspendCount);", "+", "-    currThreadResumed();", "+    if( shouldCopyBack ){", "+      _doCopyBack(); /* copy variables back into the thread */", "+    }", "+    try{", "+      currThreadResumed();", "+    }", "+    catch(DebugException e){", "+      throw new UnexpectedException(e);", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d6d711fa8f95a409667bfbf185311ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6e34d4d1ec398b411afe19e18ef9d4f818f7ef95", "commitAfterChange": "54959d257f6ab5c887e756aeffb18148d403866a", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": "         private void _saveProjectAs()", "signatureAfterChange": "         private void _saveProjectAs()", "diff": ["-      _openProjectHelper(file);", "+      try {", "+        if (file.getCanonicalPath().endsWith(\".pjt\")) {", "+          _openProjectHelper(file);", "+        }", "+        else {", "+          _openProjectHelper(new File(file.getCanonicalPath() + \".pjt\"));", "+        }", "+      }", "+      catch (IOException e) {", "+        throw new UnexpectedException(e);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10780ab9a37fe9c9c78bb27ea44e185", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "72c953c3c4f509998630ec89f0f6ab473b5c78c1", "commitAfterChange": "b04c072cc6c2afa2120f5e98663d5a900c3a128f", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": "      public void javadocEnded()", "signatureAfterChange": "      public void javadocEnded(final boolean success, final File destDir)", "diff": ["-    public void javadocEnded() {", "+    public void javadocEnded(final boolean success, final File destDir) {", "+          ", "+          // Display the results.", "+//             System.out.println(\"did we get this far?\");", "+          if (success) {", "+            try {", "+              _javadocFrame = new JavadocFrame(destDir);", "+              _javadocFrame.show();", "+            }", "+            catch (MalformedURLException me) {", "+              throw new UnexpectedException(me);", "+            }", "+          }"]}], "num": 15311}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf607e7442ffc7a60f24245c563fd093", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2b9beb3656bc3f43b7cd6448e5fe3b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 58, "signatureBeforeChange": "   private Method getDefineVariableMethod(ReferenceType interpreterRef, Value val)", "signatureAfterChange": "   private Method getDefineVariableMethod(ReferenceType interpreterRef,                                           Value val)     throws DebugException", "diff": ["-  private Method getDefineVariableMethod(ReferenceType interpreterRef, Value val){", "+  private Method getDefineVariableMethod(ReferenceType interpreterRef, ", "+                                         Value val)", "+    throws DebugException", "+  {", "+    String signature_mid = \"\";", "-      signature = signature_beginning + \"Ljava/lang/Object;\" + signature_end;", "+      signature_mid = \"Ljava/lang/Object;\";", "-      signature = signature_beginning + \"Z\" + signature_end;      ", "+      signature_mid = \"Z\";    ", "-      signature = signature_beginning + \"B\" + signature_end;      ", "+      signature_mid = \"B\";", "-      signature = signature_beginning + \"C\" + signature_end;", "+      signature_mid = \"C\";", "-      signature = signature_beginning + \"D\" + signature_end;      ", "+      signature_mid = \"D\";", "-      signature = signature_beginning + \"F\" + signature_end;", "+      signature_mid = \"F\";", "-      signature = signature_beginning + \"I\" + signature_end;", "+      signature_mid = \"I\";", "-      signature = signature_beginning + \"J\" + signature_end;", "+      signature_mid = \"J\";", "-      signature = signature_beginning + \"S\" + signature_end;", "+      signature_mid = \"S\";", "- ", "+    ", "+    signature = signature_beginning + signature_mid + signature_end;", "+    if (methods.size() <= 0) {", "+      throw new DebugException(\"Could not find defineVariable method.\");", "+    }", "-    int i = 0;    ", "-    Method tempMethod = (Method)methods.get(i);", "-    ", "-    while( tempMethod.isAbstract() ){", "-      ++i;", "-      tempMethod = (Method)methods.get(i);", "+    // Make sure we have a concrete method", "+    Method tempMethod = (Method) methods.get(0);", "+    for (int i = 1; i < methods.size() && tempMethod.isAbstract(); i++) {", "+      tempMethod = (Method) methods.get(i);", "+    }", "+    if (tempMethod.isAbstract()) {", "+      throw new DebugException(\"Could not find concrete defineVariable method.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4d87e23ecd3125926e1772cc5fa6628", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "d41b5de79662496f09ec590840d7e35134702a41", "commitAfterChange": "fd26cc12b714205eb66ef1427d78a124c29d57fc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "signatureAfterChange": "   public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "diff": ["-  public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "+  public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "-    String packageName = \"\";", "-    try {", "-      doc.getDocument().getPackageName();", "-    }", "-    catch (InvalidPackageException e) {", "-      // Couldn't find package, pretend there's none", "-    }", "-    String className = packageName + doc.getClassName();", "-    //System.out.println(\"Setting breakpoint in class: \" + className + ", "-    //                   \", line: \" + lineNumber);", "+", "+    Breakpoint breakpoint = new Breakpoint (doc, lineNumber, _vm);", "+", "+    System.out.println(breakpoint);", "-    // Get all classes that match this name", "-    List classes = _vm.classesByName(className);", "-    //System.out.println(\"Num of classes found: \" + classes.size());", "-    ReferenceType rt = null;", "-    Iterator it = classes.iterator();", "-    // Assume first one is correct, for now", "-    if (it.hasNext()) {", "-      rt = (ReferenceType) it.next();", "-    }", "-    if (rt == null) {", "-      //System.out.println(\"No reference type found\");", "-      return false;", "-    }", "-    ", "-    // Get locations for the line number, use the first", "-    try {", "-      List lines = rt.locationsOfLine(lineNumber);", "-      if (lines.size() == 0) {", "-        // Can't find a location on this line", "-        //System.out.println(\"No locations found.\");", "-        return false;", "-      }", "-      Location loc = (Location) lines.get(0);", "-      BreakpointRequest req = _eventManager.createBreakpointRequest(loc);", "-      req.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);", "-      req.enable();", "-      //System.out.println(\"Breakpoint: \" + req);", "-      return true;", "-    }", "-    catch (AbsentInformationException aie) {", "-      throw new DebugException(\"Could not find line number: \" + aie);", "-    }", "-    ", "-    /**", "-    BreakpointManager bpManager = (BreakpointManager)_session.getManager(BreakpointManager.class);", "-    try {", "-      bpManager.createBreakpoint(className, lineNumber);", "-    } catch (ResolveException re) {", "-      throw new DebugException(re.toString());", "-    } catch (ClassNotFoundException cnfe) {", "-      throw new DebugException(cnfe.toString());", "-    }", "-    writeToLog(\"Breakpoint added: \" + className + \":\" + lineNumber + \"\\n\");", "-    */", "+    _breakpoints.put(breakpoint.getRequest(), breakpoint);", "+    doc.addBreakpoint(breakpoint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3c971fd01521c8637ad1fb1a2a56290", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 8, "signatureBeforeChange": "       protected void setBreakpoint(String className, int lineNumber) throws DebugException", "signatureAfterChange": "   public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "diff": ["-   */    ", "-  protected void setBreakpoint(String className, int lineNumber) throws DebugException {", "+   */", "+  public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "+    throws DebugException", "+  {", "+    String packageName = \"\";", "+    try {", "+      doc.getDocument().getPackageName();", "+    }", "+    catch (InvalidPackageException e) {", "+      // Couldn't find package, pretend there's none", "+    }", "+    String className = packageName + doc.getClassName();", "+    //System.out.println(\"Setting breakpoint in class: \" + className + ", "+    //                   \", line: \" + lineNumber);", "+    ", "+    // Get all classes that match this name", "+    List classes = _vm.classesByName(className);", "+    //System.out.println(\"Num of classes found: \" + classes.size());", "+    ReferenceType rt = null;", "+    Iterator it = classes.iterator();", "+    // Assume first one is correct, for now", "+    if (it.hasNext()) {", "+      rt = (ReferenceType) it.next();", "+    }", "+    if (rt == null) {", "+      //System.out.println(\"No reference type found\");", "+      return false;", "+    }", "+    ", "+    // Get locations for the line number, use the first", "+    try {", "+      List lines = rt.locationsOfLine(lineNumber);", "+      if (lines.size() == 0) {", "+        // Can't find a location on this line", "+        //System.out.println(\"No locations found.\");", "+        return false;", "+      }", "+      Location loc = (Location) lines.get(0);", "+      BreakpointRequest req = _eventManager.createBreakpointRequest(loc);", "+      req.setSuspendPolicy(EventRequest.SUSPEND_ALL);", "+      req.enable();", "+      //System.out.println(\"Breakpoint: \" + req);", "+      return true;", "+    }", "+    catch (AbsentInformationException aie) {", "+      throw new DebugException(\"Could not find line number: \" + aie);", "+    }", "+    ", "+    /**", "+    */"]}], "num": 7839}
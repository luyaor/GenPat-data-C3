{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac7ef7023dfeb6b77b0d70699f791374", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12b8cf9a4cfebf0f5716ac3a9d89d53c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "73b7f0a42ebcf824c132189e958d58c40bbacf0e", "commitAfterChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   private void _findAll()", "signatureAfterChange": "   private void _findAll()", "diff": ["+    String title = searchStr;", "+    OpenDefinitionsDocument startDoc = _defPane.getOpenDefDocument();", "+    boolean searchAll = _machine.getSearchAllDocuments();", "+    if (title.length() > 10) { title = title.substring(0,10) + \"...\"; }", "+    title = \"Find: \" + title;", "+    RegionManager<MovingDocumentRegion> rm = _model.createFindResultsManager();", "+    FindResultsPanel panel = _frame.createFindResultsPanel(rm, title, searchStr, searchAll,", "+                                                           new WeakReference<OpenDefinitionsDocument>(startDoc),", "+                                                           this);", "+    findAll(searchStr, searchAll, startDoc, rm, panel);", "+  }", "-    String title = searchStr;", "-    if (title.length() > 10) { title = title.substring(0,10) + \"...\"; }", "-    title = \"Find: \" + title;", "-    ", "-    final RegionManager<MovingDocumentRegion> rm = _model.createFindResultsManager();", "-    final FindResultsPanel panel = _frame.createFindResultsPanel(rm, title);", "-    ", "-    _updateMachine();", "-    final OpenDefinitionsDocument startDoc = _defPane.getOpenDefDocument();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35fa5238bbf48d72bca4862533d8a32f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 67, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches()", "diff": ["-  private synchronized void _updateWatches() throws DebugException {", "+  private synchronized void _updateWatches() {", "-    if (_suspendedThreads.size() <= 0) {", "-      // Not suspended, get values in interpreter", "-      for (int i = 0; i < _watches.size(); i++) {", "-        DebugWatchData currWatch = _watches.get(i);", "-        if (!_getWatchFromInterpreter(currWatch)) currWatch.hideValueAndType();", "-      }", "-      return;", "-//      for (int i = 0; i < _watches.size(); i++) {", "-//        DebugWatchData currWatch = _watches.get(i);", "-//        currWatch.hideValueAndType();", "-//      }", "-//      return;", "-    }", "-", "-    try {", "-      StackFrame currFrame;", "-      List<StackFrame> frames;", "-      ThreadReference thread = _suspendedThreads.peek();", "-      if (thread.frameCount() <= 0 ) {", "-        printMessage(\"Could not update watch values. The current thread had no stack frames.\");", "-        return;", "-      }", "-      frames = thread.frames(); // JDK 1.5 will eliminate this warning", "-      currFrame = frames.get(0);", "-      Location location = currFrame.location();", "-", "-      ReferenceType rt = location.declaringType();", "-      ObjectReference obj = currFrame.thisObject();", "-      // note: obj is null if we're in a static context", "-", "-      // Get the name to determine how many $'s there are", "-      String rtName = rt.name();", "-      int numDollars = 0;", "-      int dollarIndex = rtName.indexOf(\"$\", 0);", "-      while (dollarIndex != -1) {", "-        numDollars++;", "-        dollarIndex = rtName.indexOf(\"$\", dollarIndex+1);", "-      }", "-", "-      for (int i = 0; i < _watches.size(); i++) {", "-        DebugWatchData currWatch = _watches.get(i);", "-        String currName = currWatch.getName();", "-        if (_getWatchFromInterpreter(currWatch)) {", "-          continue;", "-        }", "-//        // check for \"this\"", "-//        if (currName.equals(\"this\")) {", "-//          if (obj != null) {", "-//            currWatch.setValue(_getValue(obj));", "-//            currWatch.setType(String.valueOf(obj.type()));", "-//          }", "-//          else {", "-//            // \"this\" is not defined in a static context", "-//            currWatch.setNoValue();", "-//            currWatch.setNoType();", "-//          }", "-//          continue;", "-//        }", "-", "-//        // Look for a variable with this name", "-//        LocalVariable localVar = null;", "-//        try {", "-//          frames = thread.frames();", "-//          currFrame = (StackFrame) frames.get(0);", "-//          localVar = currFrame.visibleVariableByName(currName);", "-//        }", "-//        catch (AbsentInformationException aie) {", "-//          // Not compiled with debug flag.... ignore", "-//        }", "-//        catch (InvalidStackFrameException isfe) {", "-//          currWatch.setNoValue();", "-//          currWatch.setNoType();", "-//          _log(\"Failed to get local var from stack frame\", isfe);", "-//          continue;", "-//        }", "-//", "-//        if (localVar != null) {", "-//          // currWatch.setValue(_getValue(currFrame.getValue(localVar)));", "-//          try {", "-//            Value v = _getValueOfLocalVariable(localVar, thread);", "-//            if (v == null) {", "-//              currWatch.setValue(_getValue(null));", "-//              try {", "-//                currWatch.setType(localVar.type().name());", "-//              }", "-//              catch (ClassNotLoadedException cnle) {", "-//                List classes = _vm.classesByName(localVar.typeName());", "-//                if (!classes.isEmpty()) {", "-//                  currWatch.setType(((Type)classes.get(0)).name());", "-//                }", "-//                else {", "-//                  currWatch.setTypeNotLoaded();", "-//                }", "-//              }", "-//            }", "-//            else {", "-//              currWatch.setValue(_getValue(v));", "-//              currWatch.setType(v.type().name());", "-//            }", "-//          }", "-//          catch (Exception ex) {", "-//            _log(\"Exception when getting the value of a local variable\", ex);", "-//            currWatch.setNoValue();", "-//            currWatch.setNoType();", "-//          }", "-//        }", "-        // if the variable being watched is not a local variable,", "-        //  check if it's a field", "-        ReferenceType outerRt = rt;", "-        ObjectReference outer = obj;  // (null if static context)", "-        Field field = outerRt.fieldByName(currName);", "-", "-        if (obj != null) {", "-          // We're not in a static context", "-", "-          // If we don't find it in this class, loop through any enclosing", "-          // classes. Start at this$N, where N is the number of dollar signs in", "-          // the reference type's name, minus one.", "-          int outerIndex = numDollars - 1;", "-          if (hasAnonymous(outerRt)) {", "-            // We don't know the appropriate this$N to look for so we have to", "-            // search for a field that begins with this$.", "-            List<Field> fields = outerRt.allFields();  // This type warning will go away in JDK 1.5", "-            Iterator<Field> iter = fields.iterator();", "-            while (iter.hasNext()) {", "-              Field f = iter.next();", "-              String name = f.name();", "-              if (name.startsWith(\"this$\")) {", "-                int lastIndex = name.lastIndexOf(\"$\");", "-                outerIndex = Integer.valueOf(name.substring(lastIndex+1, name.length())).intValue();", "-                break;", "-              }", "-            }", "-          }", "-          Field outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "-          if (field == null) {", "-            // Try concatenating \"val$\" to the beginning of the field in", "-            // case it's a final local variable of the outer class", "-            field = outerRt.fieldByName(\"val$\" + currName);", "-          }", "-", "-          while ((field == null) && (outerThis != null)) {", "-            outer = (ObjectReference) outer.getValue(outerThis);", "-            if (outer == null) {", "-              // We're probably in the constructor and this$N has", "-              // not yet been initialized. We can't do anything, so just", "-              // break display no value.", "-              break;", "-            }", "-            outerRt = outer.referenceType();", "-            field = outerRt.fieldByName(currName);", "-", "-            if (field == null) {", "-              // Try concatenating \"val$\" to the beginning of the field in", "-              // case it's a final local variable of the outer class", "-              field = outerRt.fieldByName(\"val$\" + currName);", "-", "-              if (field == null) {", "-                // Enter the loop again with the next outer enclosing class", "-                outerIndex--;", "-                outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "-              }", "-            }", "-          }", "-        }", "-        else {", "-          // We're in a static context", "-", "-          // If we don't find it in this class, loop through any enclosing", "-          // classes. Do this by loading any outer classes by invoking the", "-          // method on the class loader that loaded this class and passing", "-          // it the class name with the last class removed each time.", "-          String rtClassName = outerRt.name();", "-          int index = rtClassName.lastIndexOf(\"$\");", "-          while ((field == null) && (index != -1)) {", "-            rtClassName = rtClassName.substring(0, index);", "-            List<ReferenceType> l = _vm.classesByName(rtClassName); // JDK 1.5 will eliminate this warning", "-            if (l.isEmpty()) {", "-              // field is null, we will end up setting", "-              // the value to no value", "-              break;", "-            }", "-            outerRt = l.get(0);", "-            field = outerRt.fieldByName(currName);", "-", "-            if (field == null) {", "-              // Enter the loop again with the next outer enclosing class", "-              index = rtClassName.lastIndexOf(\"$\");", "-            }", "-          }", "-        }", "-", "-        // Try to set the value and type of the field.", "-        //  If the field is not static and we are in a static context", "-        //  (outer==null), we have to setNoValue.", "-        if ((field != null) &&", "-            (field.isStatic() || (outer != null))) {", "-          Value v = (field.isStatic()) ?", "-            outerRt.getValue(field) :", "-            outer.getValue(field);", "-          currWatch.setValue(_getValue(v));", "-          try {", "-            currWatch.setType(field.type().name());", "-          }", "-          catch (ClassNotLoadedException cnle) {", "-            List<ReferenceType> classes = _vm.classesByName(field.typeName());  // JDK 1.5 will eliminate this warning", "-            if (!classes.isEmpty()) {", "-              currWatch.setType(classes.get(0).name());", "-            }", "-            else {", "-              currWatch.setTypeNotLoaded();", "-            }", "-          }", "-        }", "-        else {", "-          currWatch.setNoValue();", "-          currWatch.setNoType();", "-        }", "-", "-      }", "-    }", "-    catch (IncompatibleThreadStateException itse) {", "-      _log(\"Exception updating watches.\", itse);", "-    }", "-    catch (InvalidStackFrameException isfe) {", "-      _log(\"Exception updating watches.\", isfe);", "-    }", "-    catch (VMDisconnectedException vmde) {", "-      _log(\"Exception updating watches.\", vmde);", "-      shutdown();", "+    for (DebugWatchData w : _watches) {", "+      String val = _model.getInteractionsModel().getVariableToString(w.getName());", "+      if (val == null) { w.setNoValue(); }", "+      else { w.setValue(val); }", "+      String type = _model.getInteractionsModel().getVariableType(w.getName());", "+      if (type == null) { w.setNoType(); }", "+      else { w.setType(type); }"]}], "num": 1556}
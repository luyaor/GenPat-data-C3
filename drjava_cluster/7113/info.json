{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cfea03ee0e42940ee0904596eec890e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95d31c529d390132b192fdcd4255ad41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   private void emitUnbox(final MethodVisitor mv, Type expectedT, final StackSizeTracker stack)", "signatureAfterChange": "   private void emitConvert(final MethodVisitor mv, Type expectedT, final StackSizeTracker stack)", "diff": ["-  /** Convert the value on the stack to the given type, unboxing if necessary. */", "-  private void emitUnbox(final MethodVisitor mv, Type expectedT, final StackSizeTracker stack) {", "-    expectedT.apply(new TypeAbstractVisitor_void() {", "-      @Override public void defaultCase(Type t) { /* do nothing */ }", "-      ", "+  /** Convert the value on the stack to the given type, casting or unboxing if necessary. */", "+  private void emitConvert(final MethodVisitor mv, Type expectedT, final StackSizeTracker stack) {", "+    _opt.typeSystem().erase(expectedT).apply(new TypeAbstractVisitor_void() {", "+      @Override public void forClassType(ClassType t) {", "+        if (!t.equals(TypeSystem.OBJECT)) {", "+          mv.visitTypeInsn(CHECKCAST, className(t.ofClass()));", "+        }", "+      }", "-", "-      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7bed7aa675cbed77ebb0b62ebdacb8a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "3128b34625edff5cab8d9e6ffbefd636ec646e03", "commitAfterChange": "199e047b938086cdc5d6842c124eb2c446a7e7b1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "       public void actionPerformed(ActionEvent e)", "signatureAfterChange": "     public void itemStateChanged(ItemEvent e)", "diff": ["-  class MatchWholeWordListener implements ActionListener {", "-      public void actionPerformed(ActionEvent e) {", "-          _machine.setMatchWholeWord();", "+  class MatchWholeWordListener implements ItemListener {", "+    public void itemStateChanged(ItemEvent e) {", "+      if (e.getStateChange() == ItemEvent.DESELECTED) {", "+        _machine.setFindAnyOccurrence();", "+      else if (e.getStateChange() == ItemEvent.SELECTED) {", "+        _machine.setMatchWholeWord();", "+      _findField.requestFocus();", "+    }"]}], "num": 7113}
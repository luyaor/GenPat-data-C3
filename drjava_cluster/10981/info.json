{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5936d4421b56ab33adb807fb3b2fe026", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16590e9933b3d15978f1a3a0fdba5c53", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "065b1e3954d46e1086ba2f867744163daf14462d", "commitAfterChange": "54ea28bb82d3e1f546423de8d56e416e257bade5", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   private void _setupMiscPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.LIGHTWEIGHT_PARSING_ENABLED, ", "-                                                  \"Perform lightweight parsing\", this,", "-                                                  \"<html>Whether to continuously parse the source file for useful information.<br>\" +", "-                                                  \"Enabling this option might introduce delays when editing files.<html>\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.DIALOG_LIGHTWEIGHT_PARSING_DELAY, \"Light-weight parsing delay in milliseconds\", this,", "-                                                  \"The amount of time DrJava will wait after the last keypress before beginning to parse.\"));", "+// Any lightweight parsing has been disabled until we have something that is beneficial and works better in the background.", "+//    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.LIGHTWEIGHT_PARSING_ENABLED, ", "+//                                                  \"Perform lightweight parsing\", this,", "+//                                                  \"<html>Whether to continuously parse the source file for useful information.<br>\" +", "+//                                                  \"Enabling this option might introduce delays when editing files.<html>\"));", "+//    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.DIALOG_LIGHTWEIGHT_PARSING_DELAY, \"Light-weight parsing delay in milliseconds\", this,", "+//                                                  \"The amount of time DrJava will wait after the last keypress before beginning to parse.\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757f6446ea23628026da55df0261f000", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "commitAfterChange": "cb297201cc08624c537abfd29974e65bdfd2f397", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "\r   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["-   */", "-  public static Iterable<JarJDKToolsLibrary> search(GlobalModel model) {", "-    String javaHome = System.getProperty(\"java.home\");", "-    String envJavaHome = null;", "-    String programFiles = null;", "-    String systemDrive = null;", "-    if (JavaVersion.CURRENT.supports(JavaVersion.JAVA_5)) {", "-      // System.getenv is deprecated under 1.3 and 1.4, and may throw a java.lang.Error (!),", "-      // which we'd rather not have to catch", "-      envJavaHome = System.getenv(\"JAVA_HOME\");", "-      programFiles = System.getenv(\"ProgramFiles\");", "-      systemDrive = System.getenv(\"SystemDrive\");", "-    }", "-    ", "-    /* roots is a list of possible parent directories of Java installations; we want to eliminate duplicates & ", "-     * remember insertion order", "-     */", "-    LinkedHashSet<File> roots = new LinkedHashSet<File>();", "-    ", "-    if (javaHome != null) {", "-      addIfDir(new File(javaHome), roots);", "-      addIfDir(new File(javaHome, \"..\"), roots);", "-      addIfDir(new File(javaHome, \"../..\"), roots);", "-    }", "-    if (envJavaHome != null) {", "-      addIfDir(new File(envJavaHome), roots);", "-      addIfDir(new File(envJavaHome, \"..\"), roots);", "-      addIfDir(new File(envJavaHome, \"../..\"), roots);", "-    }", "-    ", "-    if (programFiles != null) {", "-      addIfDir(new File(programFiles, \"Java\"), roots);", "-      addIfDir(new File(programFiles), roots);", "-    }", "-    addIfDir(new File(\"/C:/Program Files/Java\"), roots);", "-    addIfDir(new File(\"/C:/Program Files\"), roots);", "-    if (systemDrive != null) {", "-      addIfDir(new File(systemDrive, \"Java\"), roots);", "-      addIfDir(new File(systemDrive), roots);", "-    }", "-    addIfDir(new File(\"/C:/Java\"), roots);", "-    addIfDir(new File(\"/C:\"), roots);", "-    ", "-    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), roots);", "-    ", "-    addIfDir(new File(\"/usr/java\"), roots);", "-    addIfDir(new File(\"/usr/j2se\"), roots);", "-    addIfDir(new File(\"/usr\"), roots);", "-    addIfDir(new File(\"/usr/local/java\"), roots);", "-    addIfDir(new File(\"/usr/local/j2se\"), roots);", "-    addIfDir(new File(\"/usr/local\"), roots);", "-", "-    /* Entries for Linux java packages */", "-    addIfDir(new File(\"/usr/lib/jvm\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), roots);", "-", "-    addIfDir(new File(\"/home/mgricken/usr/lib/jvm\"), roots);", "-    addIfDir(new File(\"/home/mgricken/usr/lib/jvm/java-6-sun\"), roots);", "-    addIfDir(new File(\"/home/mgricken/usr/lib/jvm/java-1.5.0-sun\"), roots);", "-    addIfDir(new File(\"/home/mgricken/usr/lib/jvm/java-6-openjdk\"), roots);", "-    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), roots);", "-", "-    /* jars is a list of possible tools.jar (or classes.jar) files; we want to eliminate duplicates & ", "-     * remember insertion order", "-     */", "-    LinkedHashSet<File> jars = new LinkedHashSet<File>();", "-    // matches: starts with \"j2sdk\", starts with \"jdk\", has form \"[number].[number].[number]\" (OS X), starts with \"java-\" (Linux)", "-    Predicate<File> subdirFilter = LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"j2sdk.*\"),", "-                                                 IOUtil.regexCanonicalCaseFilePredicate(\"jdk.*\"),", "-                                                 LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d + \"),", "-                                                               IOUtil.regexCanonicalCaseFilePredicate(\"java.*\")));", "-    for (File root : roots) {", "-      for (File subdir : IOUtil.attemptListFilesAsIterable(root, subdirFilter)) {", "-        addIfFile(new File(subdir, \"lib/tools.jar\"), jars);", "-        addIfFile(new File(subdir, \"Classes/classes.jar\"), jars);", "-      }", "-    }", "-    ", "-    // We store everything in reverse order, since that's the natural order of the versions", "-    Map<FullVersion, Iterable<JarJDKToolsLibrary>> results = ", "-      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();", "-    for (File jar : jars) {", "-      JarJDKToolsLibrary lib = makeFromFile(jar, model);", "-      if (lib.isValid()) {", "-        FullVersion v = lib.version();", "-        if (results.containsKey(v)) { results.put(v, IterUtil.compose(lib, results.get(v))); }", "-        else { results.put(v, IterUtil.singleton(lib)); }", "-      }", "-    }", "-    return IterUtil.reverse(IterUtil.collapse(results.values()));", "-  }", "+   */\r", "+  public static Iterable<JarJDKToolsLibrary> search(GlobalModel model) {\r", "+    String javaHome = System.getProperty(\"java.home\");\r", "+    String envJavaHome = null;\r", "+    String programFiles = null;\r", "+    String systemDrive = null;\r", "+    if (JavaVersion.CURRENT.supports(JavaVersion.JAVA_5)) {\r", "+      // System.getenv is deprecated under 1.3 and 1.4, and may throw a java.lang.Error (!),\r", "+      // which we'd rather not have to catch\r", "+      envJavaHome = System.getenv(\"JAVA_HOME\");\r", "+      programFiles = System.getenv(\"ProgramFiles\");\r", "+      systemDrive = System.getenv(\"SystemDrive\");\r", "+    }\r", "+    \r", "+    /* roots is a list of possible parent directories of Java installations; we want to eliminate duplicates & \r", "+     * remember insertion order\r", "+     */\r", "+    LinkedHashSet<File> roots = new LinkedHashSet<File>();\r", "+    \r", "+    if (javaHome != null) {\r", "+      addIfDir(new File(javaHome), roots);\r", "+      addIfDir(new File(javaHome, \"..\"), roots);\r", "+      addIfDir(new File(javaHome, \"../..\"), roots);\r", "+    }\r", "+    if (envJavaHome != null) {\r", "+      addIfDir(new File(envJavaHome), roots);\r", "+      addIfDir(new File(envJavaHome, \"..\"), roots);\r", "+      addIfDir(new File(envJavaHome, \"../..\"), roots);\r", "+    }\r", "+    \r", "+    if (programFiles != null) {\r", "+      addIfDir(new File(programFiles, \"Java\"), roots);\r", "+      addIfDir(new File(programFiles), roots);\r", "+    }\r", "+    addIfDir(new File(\"/C:/Program Files/Java\"), roots);\r", "+    addIfDir(new File(\"/C:/Program Files\"), roots);\r", "+    if (systemDrive != null) {\r", "+      addIfDir(new File(systemDrive, \"Java\"), roots);\r", "+      addIfDir(new File(systemDrive), roots);\r", "+    }\r", "+    addIfDir(new File(\"/C:/Java\"), roots);\r", "+    addIfDir(new File(\"/C:\"), roots);\r", "+    \r", "+    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), roots);\r", "+    \r", "+    addIfDir(new File(\"/usr/java\"), roots);\r", "+    addIfDir(new File(\"/usr/j2se\"), roots);\r", "+    addIfDir(new File(\"/usr\"), roots);\r", "+    addIfDir(new File(\"/usr/local/java\"), roots);\r", "+    addIfDir(new File(\"/usr/local/j2se\"), roots);\r", "+    addIfDir(new File(\"/usr/local\"), roots);\r", "+\r", "+    /* Entries for Linux java packages */\r", "+    addIfDir(new File(\"/usr/lib/jvm\"), roots);\r", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), roots);\r", "+    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), roots);\r", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), roots);\r", "+\r", "+    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), roots);\r", "+\r", "+    /* jars is a list of possible tools.jar (or classes.jar) files; we want to eliminate duplicates & \r", "+     * remember insertion order\r", "+     */\r", "+    LinkedHashSet<File> jars = new LinkedHashSet<File>();\r", "+    // matches: starts with \"j2sdk\", starts with \"jdk\", has form \"[number].[number].[number]\" (OS X), starts with \"java-\" (Linux)\r", "+    Predicate<File> subdirFilter = LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"j2sdk.*\"),\r", "+                                                 IOUtil.regexCanonicalCaseFilePredicate(\"jdk.*\"),\r", "+                                                 LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d + \"),\r", "+                                                               IOUtil.regexCanonicalCaseFilePredicate(\"java.*\")));\r", "+    for (File root : roots) {\r", "+      for (File subdir : IOUtil.attemptListFilesAsIterable(root, subdirFilter)) {\r", "+        addIfFile(new File(subdir, \"lib/tools.jar\"), jars);\r", "+        addIfFile(new File(subdir, \"Classes/classes.jar\"), jars);\r", "+      }\r", "+    }\r", "+    \r", "+    // We store everything in reverse order, since that's the natural order of the versions\r", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> results = \r", "+      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();\r", "+    for (File jar : jars) {\r", "+      JarJDKToolsLibrary lib = makeFromFile(jar, model);\r", "+      if (lib.isValid()) {\r", "+        FullVersion v = lib.version();\r", "+        if (results.containsKey(v)) { results.put(v, IterUtil.compose(lib, results.get(v))); }\r", "+        else { results.put(v, IterUtil.singleton(lib)); }\r", "+      }\r", "+    }\r", "+    return IterUtil.reverse(IterUtil.collapse(results.values()));\r", "+  }\r"]}], "num": 10981}
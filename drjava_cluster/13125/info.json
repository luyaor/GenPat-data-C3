{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afe9f2e9cd08027b368d828903d0a776", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "386c7a5ab6cea784cf739ad524459c28", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPane.java", "commitBeforeChange": "a520786d8d1520e61a5d09f9965e3e703ead8f0f", "commitAfterChange": "9a95c6b81fc6b72a8f3091fca3e6d024396b35a0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "    public InteractionsPane(GlobalModel model)", "signatureAfterChange": "    public InteractionsPane(GlobalModel model)", "diff": ["+    ", "+    // Left needs to be prevented from rolling cursor back before the prompt.", "+    // Both left and right should lock when caret is before the prompt.", "+    // Caret is allowed before the prompt for the purposes of mouse-based copy-", "+    // and-paste.", "+    ourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_LEFT, 0),", "+                                 _moveLeft);", "+    ourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),", "+                                 _moveLeft);", "+    ", "+    ourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_RIGHT, 0),", "+                                 _moveRight);", "+    ourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0),", "+                                 _moveRight);", "+    ", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f088a5a75b4bdc529c34c27803e0190", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPane.java", "commitBeforeChange": "62cd56918db49abf5170cd3da7ff92f86724ef97", "commitAfterChange": "afb4d888e2c907babf9fe3737eb7d3791cf965d8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic InteractionsView()", "signatureAfterChange": " \t \tpublic InteractionsView()", "diff": ["-\t\t//add actions for enter key", "+\t\t//add actions for enter key, etc.", "+    // Up and down need to be bound both for keypad and not", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_UP, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyPrevAction);", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyPrevAction);", "+", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_DOWN, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyNextAction);", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyNextAction);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a10bef1fa35f513f8bf9e1638c31303", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/InteractionsView.java", "commitBeforeChange": "62cd56918db49abf5170cd3da7ff92f86724ef97", "commitAfterChange": "afb4d888e2c907babf9fe3737eb7d3791cf965d8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic InteractionsView()", "signatureAfterChange": " \t \tpublic InteractionsView()", "diff": ["-\t\t//add actions for enter key", "+\t\t//add actions for enter key, etc.", "+    // Up and down need to be bound both for keypad and not", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_UP, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyPrevAction);", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyPrevAction);", "+", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_DOWN, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyNextAction);", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyNextAction);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e779f8e71cebfa1d9ec13a08d54cdc9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/InteractionsPane.java", "commitBeforeChange": "62cd56918db49abf5170cd3da7ff92f86724ef97", "commitAfterChange": "afb4d888e2c907babf9fe3737eb7d3791cf965d8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic InteractionsView()", "signatureAfterChange": " \t \tpublic InteractionsView()", "diff": ["-\t\t//add actions for enter key", "+\t\t//add actions for enter key, etc.", "+    // Up and down need to be bound both for keypad and not", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_UP, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyPrevAction);", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyPrevAction);", "+", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_DOWN, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyNextAction);", "+\t\tourMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _historyNextAction);", "+"]}], "num": 13125}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "917269abad8fc75d73c1dc14e5f01bb7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171fe3b940723fe25fefb7c220c28ee0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "9c56cd9d9775329b3a5e6a7701ab0c05369850af", "commitAfterChange": "a7a439f9a53360ece86e113cdb8203e5c8b2acda", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 158, "signatureBeforeChange": "   public File[] getSourceRootSet()", "signatureAfterChange": "   public File[] getSourceRootSet()", "diff": ["-    synchronized (_documentsRepos) {", "-      for (OpenDefinitionsDocument doc: _documentsRepos.values()) {", "-        try {", "-          File root = doc.getSourceRoot();", "-          if (!roots.contains(root)) { roots.add(root); } // Don't add duplicate Files, based on path", "-        }", "-        catch (InvalidPackageException e) { /* file has invalid package statement; ignore it */ }", "+    OpenDefinitionsDocument[] docs;", "+    ", "+    synchronized (_documentsRepos) { docs =  _documentsRepos.valuesArray(new OpenDefinitionsDocument[0]); }", "+    for (OpenDefinitionsDocument doc: docs) {", "+      try {", "+        File root = doc.getSourceRoot();", "+        if (!roots.contains(root)) { roots.add(root); } // Don't add duplicate Files, based on path", "-      return roots.toArray(new File[0]);", "+      catch (InvalidPackageException e) { /* file has invalid package statement; ignore it */ }", "+    return roots.toArray(new File[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d28eeb9c6509e118fb89267866e07a9b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "9c56cd9d9775329b3a5e6a7701ab0c05369850af", "commitAfterChange": "a7a439f9a53360ece86e113cdb8203e5c8b2acda", "methodNumberBeforeChange": 318, "methodNumberAfterChange": 323, "signatureBeforeChange": "   private OpenDefinitionsDocument _getOpenDocument(File file)", "signatureAfterChange": "   private OpenDefinitionsDocument _getOpenDocument(File file)", "diff": ["-", "-    synchronized (_documentsRepos) { ", "-      for (OpenDefinitionsDocument doc: _documentsRepos.values()) {", "-        try {", "-          File thisFile = null;", "-          try { thisFile = doc.getFile(); }", "-          catch (FileMovedException fme) {", "-            // Ok, file is invalid, but compare anyway", "-            thisFile = fme.getFile();", "-          }", "-          finally {", "-            // Always do the comparison", "-            if (thisFile != null) {", "-              try {", "-                // Compare canonical paths if possible", "-                if (thisFile.getCanonicalFile().equals(file.getCanonicalFile())) return doc;", "-              }", "-              catch (IOException ioe) {", "-                // Can be thrown from getCanonicalFile.", "-                //  If so, compare the files themselves", "-                if (thisFile.equals(file)) return doc;", "-              }", "+    ", "+    OpenDefinitionsDocument[] docs;", "+    ", "+    synchronized (_documentsRepos) { docs = _documentsRepos.valuesArray(new OpenDefinitionsDocument[0]); }", "+    for (OpenDefinitionsDocument doc: docs) {", "+      try {", "+        File thisFile = null;", "+        try { thisFile = doc.getFile(); }", "+        catch (FileMovedException fme) { thisFile = fme.getFile(); } // File is invalid, but compare anyway", "+        finally {", "+          // Always do the comparison", "+          if (thisFile != null) {", "+            try {", "+              // Compare canonical paths if possible", "+              if (thisFile.getCanonicalFile().equals(file.getCanonicalFile())) return doc;", "+            }", "+            catch (IOException ioe) {", "+              // Can be thrown from getCanonicalFile.", "+              //  If so, compare the files themselves", "+              if (thisFile.equals(file)) return doc;", "-        catch (IllegalStateException ise) { /* No file in doc; fail silently */ }", "+      catch (IllegalStateException ise) { /* No file in doc; fail silently */ }"]}], "num": 14306}
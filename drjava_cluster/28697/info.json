{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59c3d25079ed540a0ac64b8404ec6500", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baddcffccbd7ec436b110e31cb1ba75f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testWSAfterBrace() throws BadLocationException", "signatureAfterChange": "      public void testWSAfterBrace() throws BadLocationException", "diff": ["-    assertTrue(\"START immediatly follows an open brace.\", _rule.applyRule(_doc, 14, Indenter.OTHER));", "-    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 15, Indenter.OTHER));", "-    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23, Indenter.OTHER));", "-    assertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25, Indenter.OTHER));", "+    assertTrue(\"START immediatly follows an open brace.\", _rule.applyRule(_doc, 14, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 15, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c0c00eaa9d802dfabf1cd59a1bd669", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testWSAfterBrace() throws BadLocationException", "signatureAfterChange": "      public void testWSAfterBrace() throws BadLocationException", "diff": ["-    assertTrue(\"START immediatly follows an open brace.\", _rule.applyRule(_doc, 14));     ", "-    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 15));     ", "-    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23));     ", "-    assertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25));     ", "+    assertTrue(\"START immediatly follows an open brace.\", _rule.applyRule(_doc, 14, Indenter.OTHER));", "+    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 15, Indenter.OTHER));", "+    assertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23, Indenter.OTHER));", "+    assertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25, Indenter.OTHER));"]}], "num": 28697}
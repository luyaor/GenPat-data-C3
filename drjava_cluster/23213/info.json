{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1d0d7665324c95b9cec71c954f2426e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f8fde256e739f5659570f07fd095c88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDJDocumentTest.java", "commitBeforeChange": "b6c98c2729d523213cf8ee6bbc9636575f25da66", "commitAfterChange": "4bdaddc150401ace7c16f01fa5c54525f5642ceb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStylesListContentAndReset() throws EditDocumentException, InterruptedException", "signatureAfterChange": "   public void testStylesListContentAndReset() throws EditDocumentException, InterruptedException", "diff": ["+    System.err.println(\"Styles:\\n\" + Arrays.toString(_adapter.getStyles()));", "+    System.err.println(\"StartUpBanner:\\n'\" + _model.getStartUpBanner() + \"'\");", "+    System.err.println(\"length = \" +  _model.getStartUpBanner().length());", "+    System.err.println(\"Banner:\\n'\" + _model.getBanner() + \"'\");", "+    System.err.println(\"length = \" +  _model.getBanner().length());                   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a40dabae3338ed45ca9f7f01d5355b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "536c00239bf186b1c81bb087b131d4cbb6302c23", "commitAfterChange": "ed1069955672117b4c9aac0875c5704fb5071788", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "\r   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["+        msg(\"MINT_HOME environment variable set to: \"+mint_home);\r", "+      }\r", "+      else {\r", "+        msg(\"MINT_HOME not set\");\r", "-//      msg(\"mintLib: \"+mintLib.version());\r", "-//      msg(\"\\t\"+mintLib.location());\r", "+      msg(\"mintLib: \"+mintLib.version());\r", "+      msg(\"\\t\"+mintLib.location());\r", "-//        msg(\"\\texact? \"+javaLib.version());\r", "+        msg(\"\\texact? \"+javaLib.version());\r", "-//          msg(\"\\t\\tfound\");\r", "+          msg(\"\\t\\tfound\");\r", "-//          msg(\"\\tmajor? \"+javaLib.version());\r", "+          msg(\"\\tmajor? \"+javaLib.version());\r", "-//            msg(\"\\t\\tfound\");\r", "+            msg(\"\\t\\tfound\");\r", "-//          msg(\"\\t==> \"+lib.version());\r", "+          msg(\"\\t==> \"+lib.version());\r", "-    return IterUtil.compose(collapsed,IterUtil.reverse(IterUtil.collapse(javaMintResults.values())));\r", "+    msg(\"Result:\");\r", "+    Iterable<JarJDKToolsLibrary> result = IterUtil.\r", "+      compose(collapsed,IterUtil.reverse(IterUtil.collapse(javaMintResults.values())));\r", "+    for(JarJDKToolsLibrary lib: result) {\r", "+      msg(\"Found library: \"+lib);\r", "+    }\r", "+    return result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b64f84dd0764200f2535190737721c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "          public void testCompareThrownAndCaught()", "signatureAfterChange": "          public void testCompareThrownAndCaught()", "diff": ["-      JExpression j = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myMethod\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "+      ", "+      JExpression j = ", "+        new SimpleMethodInvocation(SourceInfo.NO_INFO, ", "+                                   new Word(SourceInfo.NO_INFO, \"myMethod\"), ", "+                                   new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "-      FormalParameter param = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "+      UninitializedVariableDeclarator uvd = ", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "+      FormalParameter param = ", "+        new FormalParameter(SourceInfo.NO_INFO, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[] {new CatchBlock(SourceInfo.NO_INFO,  param, b)});", "+      NormalTryCatchStatement ntcs = ", "+        new NormalTryCatchStatement(SourceInfo.NO_INFO, ", "+                                    b, ", "+                                    new CatchBlock[] {new CatchBlock(SourceInfo.NO_INFO,  param, b)});", "-      SymbolData javaLangThrowable =  _bbtc.getSymbolData(\"java.lang.Throwable\", ntcs, false, true); ", "+      SymbolData javaLangThrowable =  _bbtc.getSymbolData(\"java.lang.Throwable\", ntcs, false, true);", "+      System.err.println(\"**** In symbol table, java.lang.Throwable = \" + symbolTable.get(\"java.lang.Throwable\"));", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      javaLangThrowable.setPackage(\"java.lang\");  // Don't know why it is not properly set already", "+ ", "+      System.err.println(\"***Name for java.lang.Throwable = \" + javaLangThrowable.getName());", "+      System.err.println(\"***notRightPackage for java.lang.Throwable = \" + _bbtc.notRightPackage(javaLangThrowable));", "+      System.err.println(\"***Package for java.lang.Throwable = \" + javaLangThrowable.getPackage());", "+                        ", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      for (int i = 0; i < errors.size(); i++) ", "+        System.err.println(\"Error \" + i + \":\\n\" + errors.get(i).getFirst());"]}], "num": 23213}
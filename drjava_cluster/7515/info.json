{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcafe67e72de86ab6cbef5194bc6d50e", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59514920113d5903dc58bc10483b5900", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public synchronized void startup() throws DebugException", "signatureAfterChange": "   public synchronized void startup() throws DebugException", "diff": ["+      ", "+      // re-set breakpoints that have already been set", "+      Vector<Breakpoint> oldBreakpoints = new Vector<Breakpoint>(_breakpoints);", "+      removeAllBreakpoints();", "+      for (int i = 0; i < oldBreakpoints.size(); i++) {", "+        Breakpoint bp = oldBreakpoints.get(i);", "+        setBreakpoint(new Breakpoint(bp.getDocument(), bp.getOffset(), bp.getLineNumber(), this));", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b5db902eeb6ff9e3491816a29d4cf0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": "   public boolean closeFileWithoutPrompt(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean closeFileWithoutPrompt(final OpenDefinitionsDocument doc)", "diff": ["+        ", "+    // remove breakpoints for this file", "+    Debugger dbg = getDebugger();", "+    if (dbg.isAvailable()) {", "+      Vector<Breakpoint> bps = new Vector<Breakpoint>(doc.getBreakpoints());", "+      for (int i = 0; i < bps.size(); i++) {", "+        Breakpoint bp = bps.get(i);", "+        try { dbg.removeBreakpoint(bp); }", "+        catch(DebugException de) { /* ignore */ }", "+      }", "+    }"]}], "num": 7515}
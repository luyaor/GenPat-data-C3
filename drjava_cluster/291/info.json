{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8ad9c800351b148b2845d669fa52e17", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b003f9aa28a0eccee8a94216d0b0bc89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBraceTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testNoEquals() throws BadLocationException", "signatureAfterChange": "   public void testNoEquals() throws BadLocationException", "diff": ["-    assertTrue(\"At DOCSTART.\",    ! rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.OTHER));", "-    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.OTHER));", "+    assertTrue(\"At DOCSTART.\",    ! rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Before start of inner array\", ! rule.applyRule(_doc, 50, Indenter.OTHER));", "-    assertTrue(\"Same line as inner {.\", !rule.applyRule(_doc, 54, Indenter.OTHER));", "-    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.OTHER));", "-    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.OTHER));", "+    assertTrue(\"Before start of inner array\", ! rule.applyRule(_doc, 50, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Same line as inner {.\", !rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d8afff693674df011e79eec721399b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStartsWithPrefixWithText() throws BadLocationException", "signatureAfterChange": "   public void testStartsWithPrefixWithText() throws BadLocationException", "diff": ["-    assertTrue(\"line before brace (no space)\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"just before brace (no space)\", rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"just after brace (no space)\", rule.applyRule(_doc, 9, Indenter.OTHER));", "-    assertTrue(\"line after brace (no space)\", !rule.applyRule(_doc, 15, Indenter.OTHER));", "+    assertTrue(\"line before brace (no space)\", !rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just before brace (no space)\", rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just after brace (no space)\", rule.applyRule(_doc, 9, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after brace (no space)\", !rule.applyRule(_doc, 15, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line before star (with space)\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"just before star (with space)\", rule.applyRule(_doc, 4, Indenter.OTHER));", "-    assertTrue(\"just after star (with space)\", rule.applyRule(_doc, 6, Indenter.OTHER));", "-    assertTrue(\"line after star (with space)\", !rule.applyRule(_doc, 15, Indenter.OTHER));", "+    assertTrue(\"line before star (with space)\", !rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just before star (with space)\", rule.applyRule(_doc, 4, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just after star (with space)\", rule.applyRule(_doc, 6, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after star (with space)\", !rule.applyRule(_doc, 15, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f370ad43bc1b3ebe0b741b4e243f11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartingNewStmtTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStartOfStmtIgnoreWhiteSpaceAndCommentsInBetween() throws BadLocationException", "signatureAfterChange": "   public void testStartOfStmtIgnoreWhiteSpaceAndCommentsInBetween() throws BadLocationException", "diff": ["-        rule.applyRule(_doc, Indenter.OTHER));", "+        rule.applyRule(_doc, Indenter.IndentReason.OTHER));", "-        rule.applyRule(_doc, Indenter.OTHER));", "+        rule.applyRule(_doc, Indenter.IndentReason.OTHER));", "-        rule.applyRule(_doc, Indenter.OTHER));", "+        rule.applyRule(_doc, Indenter.IndentReason.OTHER));", "-        rule.applyRule(_doc, Indenter.OTHER));", "+        rule.applyRule(_doc, Indenter.IndentReason.OTHER));", "-        rule.applyRule(_doc, Indenter.OTHER));", "+        rule.applyRule(_doc, Indenter.IndentReason.OTHER));", "-        rule.applyRule(_doc, Indenter.OTHER));", "+        rule.applyRule(_doc, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe93048093dcc463c7ee90adb8ed481b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testStartsWithPrefixNoText() throws BadLocationException", "signatureAfterChange": "   public void testStartsWithPrefixNoText() throws BadLocationException", "diff": ["-    assertTrue(\"line before brace (no space)\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"just before brace (no space)\", rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"just after brace (no space)\", rule.applyRule(_doc, 8, Indenter.OTHER));", "-    assertTrue(\"line after brace (no space)\", !rule.applyRule(_doc, 10, Indenter.OTHER));", "+    assertTrue(\"line before brace (no space)\", !rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just before brace (no space)\", rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just after brace (no space)\", rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after brace (no space)\", !rule.applyRule(_doc, 10, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line before brace (with space)\", !rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"just before brace (with space)\", rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"just after brace (with space)\", rule.applyRule(_doc, 11, Indenter.OTHER));", "-    assertTrue(\"line after brace (with space)\", !rule.applyRule(_doc, 14, Indenter.OTHER));", "+    assertTrue(\"line before brace (with space)\", !rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just before brace (with space)\", rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just after brace (with space)\", rule.applyRule(_doc, 11, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after brace (with space)\", !rule.applyRule(_doc, 14, Indenter.IndentReason.OTHER));"]}], "num": 291}
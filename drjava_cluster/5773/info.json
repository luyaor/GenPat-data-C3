{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef64fb5151b5e82b5be86506912a4f85", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1561b1c456dd1140bf12c77a0b22ec20", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public JUnitErrorModel(DefinitionsDocument doc, JUnitError[] errors)", "signatureAfterChange": "   public JUnitErrorModel(JUnitError[] errors, GlobalModel model, boolean testsHaveRun)", "diff": ["-  public JUnitErrorModel(DefinitionsDocument doc, JUnitError[] errors) {", "-    _document = doc;", "-    _testsHaveRun = true;", "-    _numErrors = errors.length;", "-    try {", "-      _file = doc.getFile();", "-    }", "-    catch (FileMovedException fme) {", "-      // Recover, even though file was deleted", "-      _file = fme.getFile();", "-    }", "-    catch (IllegalStateException ise) {", "-      _file = null;", "-    }", "-    ", "-    //Create the array of errors and failures, ordered by line number", "-    ", "-    /* while ( (i < errors.length) && ( (tFail != null) || (tErr != null) ) ) {", "-     ", "-      if ( (jFail != null) && ( (jErr == null) || (jFail.lineNumber() < jErr.lineNumber()) ) ) {", "-        errors[i] = jFail;", "-        System.out.println(jFail.lineNumber());", "-        if (failures.hasMoreElements()) {", "-          tFail = (TestFailure)failures.nextElement();", "-          jFail = _makeJUnitError(tFail, theclass, false);", "-        }", "-        else {", "-          tFail = null;", "-          jFail = null;", "-        }", "-      }", "-      ", "-      else if ( (jErr != null) && ( (jFail == null) || (jErr.lineNumber() <= jFail.lineNumber()) ) ) {", "-        errors[i] = jErr;", "-        System.out.println(jErr.lineNumber());", "-        if (errEnum.hasMoreElements()) {", "-          tErr = (TestFailure)errEnum.nextElement();", "-          jErr = _makeJUnitError(tErr, theclass, true);", "-        }", "-        else {", "-          tErr = null;", "-          jErr = null;", "-        }", "-      }", "-       ", "-      i++;", "-    }*/", "-   ", "-    _groupErrors(errors);", "+  public JUnitErrorModel(JUnitError[] errors, GlobalModel model, boolean testsHaveRun) {", "+    super(errors, model);", "+    _testsHaveRun = testsHaveRun;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8de163db1b9a82cbc13688f6f42c12b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/TypeCheckerExtension.java", "commitBeforeChange": "623dbae8bf369adeb4e3b2a78ab2b5a3f4b29e9b", "commitAfterChange": "d0501f87d274a5806c24d0d105495acde5ccbe13", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public Object visit(MethodDeclaration node)", "signatureAfterChange": "   public Object visit(DivideExpression node)", "diff": ["-  ", "-  public Object visit(MethodDeclaration node) {", "-    super.visit(node);", "-    Class c = (Class)node.getProperty(NodeProperties.TYPE);", "-    BlockStatement bs = node.getBody();", "-    List l = bs.getStatements();", "-    Iterator iter = l.iterator();", "-    boolean foundCorrectType = false;", "-    while(iter.hasNext()) {", "-      Statement s = (Statement)iter.next();", "-      if (s instanceof ReturnStatement) {", "-        Class returnExpClass;", "-        Expression expression = ((ReturnStatement)s).getExpression();", "-        if (expression == null) {", "-          returnExpClass = null;", "-        }", "-        else {", "-          returnExpClass = (Class)expression.acceptVisitor(this);", "-        }", "-        // will void return type mean c is null?", "-        if (c == null) {", "-          if (returnExpClass != null) {", "-            // returning a value in a void method", "-            throw new ExecutionError(\"assignment.types\", node);", "-          }", "-        }", "-        else if (returnExpClass == null) {", "-          // returning nothing in a non-void method", "-          throw new ExecutionError(\"assignment.types\", node);    ", "-        }", "-        else if (!c.isAssignableFrom(returnExpClass)) {", "-          // returning an unassignable type", "-          throw new ExecutionError(\"assignment.types\", node);", "-        }", "-        else {", "-          // returning an assignable type", "-          foundCorrectType = true;", "-        }", "-      }", "-    }", "-    if (c != null) {", "-      if (!foundCorrectType) {", "-        // we were supposed to return a type, but did not", "-        throw new ExecutionError(\"assignment.types\", node);", "-      }", "-    }", "-    return null;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba81a8aa57a30ae36297dc825d229771", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/platform/PlatformFactory.java", "commitBeforeChange": "8e07fa29bb174e064817d47030f50a01ab046b09", "commitAfterChange": "dfb9c0d61ab732af3eb4768e715fdd3a38a2bf72", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   private static PlatformSupport getPlatformSupport()", "signatureAfterChange": "   private static PlatformSupport getPlatformSupport()", "diff": ["-    // Check for Mac OS X.", "-    String mrjVer = System.getProperty(\"mrj.version\");", "+", "+    // Get OS name string; we expect one of \"windows xp\", \"mac os x\", etc.", "+    String os = System.getProperty(\"os.name\").toLowerCase();", "-    // Check for other OS types.", "-    String os = System.getProperty(\"os.name\");", "-    ", "-    if (mrjVer != null) {", "-      // This must be a Mac, but what JDK version?", "-      String jdkVer = System.getProperty(\"java.specification.version\");", "-      ", "-      if (jdkVer.equals(\"1.4\")) {", "-        // This is a 1.4 compliant JDK.", "-        // System.out.println(\"Mac14Platform\");", "-        return Mac14Platform.ONLY;", "-      }", "-      else if (jdkVer.equals(\"1.3\")) {", "-        // This is a 1.3 compliant JDK.", "-        // System.out.println(\"Mac13Platform\");", "-        return Mac13Platform.ONLY;", "-      }", "-      else {", "-        // We don't know what version of the JDK this is, so use a default for OS X.", "-        // System.out.println(\"MacPlatform\");", "-        return MacPlatform.ONLY;", "-      }", "-    }", "-    // Check for Windows platform.", "-    else if ((os != null) && (os.toLowerCase().indexOf(\"windows\") == 0)) {", "-      // This must be a Windows OS.", "-      // System.out.println(\"WindowsPlatform\");", "-      return WindowsPlatform.ONLY;", "-    }", "-    else {", "-      // This isn't one of our specifically-supported platforms, so use the default.", "-      // System.out.println(\"DefaultPlatform\");", "-      return DefaultPlatform.ONLY;", "-    }", "+\tif (os.startsWith(\"mac os x\")) { return MacPlatform.ONLY; }", "+\telse if (os.startsWith(\"windows\")) { return WindowsPlatform.ONLY; }", "+\telse { return DefaultPlatform.ONLY; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc159975df8ca5e5447db0c667439d3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/TypeCheckerExtension.java", "commitBeforeChange": "405bec7d97445f0020939e0560dc10393430aac1", "commitAfterChange": "070ce5905e33fc289f79bfc0035862d6493d03f5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Object visit(RemainderExpression node)", "signatureAfterChange": "      public Object visit(MethodDeclaration node)", "diff": ["+  ", "+  public Object visit(MethodDeclaration node) {", "+    super.visit(node);", "+    Class c = (Class)node.getProperty(NodeProperties.TYPE);", "+    BlockStatement bs = node.getBody();", "+    List l = bs.getStatements();", "+    Iterator iter = l.iterator();", "+    boolean foundCorrectType = false;", "+    while(iter.hasNext()) {", "+      Statement s = (Statement)iter.next();", "+      if (s instanceof ReturnStatement) {", "+        Class returnExpClass;", "+        Expression expression = ((ReturnStatement)s).getExpression();", "+        if (expression == null) {", "+          returnExpClass = null;", "+        }", "+        else {", "+          returnExpClass = (Class)expression.acceptVisitor(this);", "+        }", "+        // will void return type mean c is null?", "+        if (c == null) {", "+          if (returnExpClass != null) {", "+            // returning a value in a void method", "+            throw new ExecutionError(\"assignment.types\", node);", "+          }", "+        }", "+        else if (returnExpClass == null) {", "+          // returning nothing in a non-void method", "+          throw new ExecutionError(\"assignment.types\", node);    ", "+        }", "+        else if (!c.isAssignableFrom(returnExpClass)) {", "+          // returning an unassignable type", "+          throw new ExecutionError(\"assignment.types\", node);", "+        }", "+        else {", "+          // returning an assignable type", "+          foundCorrectType = true;", "+        }", "+      }", "+    }", "+    if (c != null) {", "+      if (!foundCorrectType) {", "+        // we were supposed to return a type, but did not", "+        throw new ExecutionError(\"assignment.types\", node);", "+      }", "+    }", "+    return null;", "+  }"]}], "num": 5773}
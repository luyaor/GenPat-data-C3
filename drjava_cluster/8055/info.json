{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33af79d0d1f8971702f032a5c9c1d766", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "141e1af84791a5bd277dfadbdc6e8f56", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "7cfeec5d0573a05afa60f045397b7528ba2aa086", "commitAfterChange": "b155114812a8cbcc9237269e7062e3599ab1f574", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "signatureAfterChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "diff": ["-    if (propagate.containsKey(\"plt.debug.log\") || propagate.containsKey(\"plt.error.log\") || ", "-        propagate.containsKey(\"plt.log.factory\")) {", "+    if (!propagate.containsKey(\"plt.log.working.dir\") &&", "+        (propagate.containsKey(\"plt.debug.log\") || propagate.containsKey(\"plt.error.log\") || ", "+         propagate.containsKey(\"plt.log.factory\"))) {", "+          debug.logValues(\"Starting slave JVM\",", "+                          new String[]{\"RUNNER\", \"args\", \"cp\", \"jvmArgsArray\", \"workDir\"},", "+                          RUNNER, args, cp, jvmArgsArray, workDir);", "+              error.log(\"Slave process died without registering\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec03a80af88aa8dd3816c82be31c1197", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir, DocFileListVisitor flv) throws IOException", "signatureAfterChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir, DocFileListVisitor flv) throws IOException", "diff": ["+    }", "+    else if (name.compareToIgnoreCase(\"bookmarks\") == 0) {", "+       List<DocumentRegion> bmList = exp.getRest().accept(bookmarkListVisitor);", "+       pfir.setBookmarks(bmList);"]}], "num": 8055}
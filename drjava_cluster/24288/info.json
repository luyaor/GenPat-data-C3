{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16797633488d0f05027d0dbb9e7178c0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b9a0bbf10d244439374ade4e93357e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "42465b0c95801c83cae0d8e781c43cb17e95c775", "commitAfterChange": "dd7f7fbbfae186b155b4ab01f1629e1623154745", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "   private static void checkAssignmentStaticRules(Class lc, Class rc,                                                  Node node, Node v)", "signatureAfterChange": "   private static Expression checkAssignmentStaticRules(Class lc, Class rc,                                                  Node node, Expression v)", "diff": ["-  private static void checkAssignmentStaticRules(Class lc, Class rc,", "-                                                 Node node, Node v) {", "+  private static Expression checkAssignmentStaticRules(Class lc, Class rc,", "+                                                 Node node, Expression v) {", "+          if (rc == Boolean.class) {", "+            return _unbox(v,Boolean.class);", "+          }", "+          if (rc == Byte.class) {", "+            return _unbox(v,Byte.class);", "+          }", "-              return;", "+              return v;", "-        else if ((lc == short.class || rc == char.class) &&", "-                   (rc != byte.class && rc != short.class && rc != char.class)) {", "+        else if ((lc == short.class || lc == char.class) &&", "+                 (rc != byte.class && rc != short.class && rc != char.class)) {", "+          if (lc == short.class && rc == Short.class) {", "+            return _unbox(v, Short.class);", "+          }", "+          if (lc == char.class && rc == Character.class) {", "+            return _unbox(v, Character.class);", "+          }", "-              return;", "+              return v;", "-                   (rc != byte.class  &&", "-                    rc != short.class &&", "-                    rc != char.class  &&", "-                    rc != int.class)) {", "+                 (rc != byte.class  &&", "+                  rc != short.class &&", "+                  rc != char.class  &&", "+                  rc != int.class)) {", "+          if (rc == Byte.class      || rc == Short.class ||", "+              rc == Character.class || rc == Integer.class) {", "+            return _unbox(v, rc);", "+          }", "-                   (rc == null          ||", "-                    !rc.isPrimitive()   ||", "-                    rc == void.class    ||", "-                    rc == boolean.class ||", "-                    rc == float.class   ||", "-                    rc == double.class)) {", "+                 (rc == null          ||", "+                  !rc.isPrimitive()   ||", "+                  rc == void.class    ||", "+                  rc == boolean.class ||", "+                  rc == float.class   ||", "+                  rc == double.class)) {", "+          if (_isBoxingType(rc) && _isIntegralType(rc)) {", "+            return _unbox(v, rc);", "+          }", "-                   (rc == null          ||", "-                    !rc.isPrimitive()   ||", "-                    rc == void.class    ||", "-                    rc == boolean.class ||", "-                    rc == double.class)) {", "+                 (rc == null          ||", "+                  !rc.isPrimitive()   ||", "+                  rc == void.class    ||", "+                  rc == boolean.class ||", "+                  rc == double.class)) {", "+          if (_isBoxingType(rc) && rc != Boolean.class && rc != Double.class) {", "+            return _unbox(v, rc);", "+          }", "-                   (rc == null        ||", "-                    !rc.isPrimitive() ||", "-                    rc == void.class  ||", "-                    rc == boolean.class)) {", "+                 (rc == null        ||", "+                  !rc.isPrimitive() ||", "+                  rc == void.class  ||", "+                  rc == boolean.class)) {", "+          if (_isBoxingType(rc) && rc != Boolean.class) {", "+            return _unbox(v, rc);", "+          }", "+        if (_boxesTo(rc, lc)) { ", "+          return _box(v, rc);", "+        }", "+    return v;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fadb59ea3ac400170c558000a6a5ff8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "1ef951d20d276f3c46e1cf20ba51ab4b6ce00f53", "commitAfterChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public static boolean isCompatible(Class c1, Class c2)", "signatureAfterChange": "   public static boolean isCompatible(Class c1, Class c2)", "diff": ["-    return isBoxCompatible(c1, c2, Float.valueOf(System.getProperty(\"java.specification.version\")) >= 1.5);", "-    ", "-    /** Commented by Jonathan Lugo 2004-05-18.  Code moved to isBoxCompatible**/", "-//    if (c1.isPrimitive()) {", "-//      if (c1 != c2) {", "-//        if (c1 == int.class) {", "-//          return (c2 == byte.class  ||", "-//                  c2 == short.class ||", "-//                  c2 == char.class);", "-//        } ", "-//        else if (c1 == long.class) {", "-//          return (c2 == byte.class  ||", "-//                  c2 == short.class ||", "-//                  c2 == int.class);", "-//        } ", "-//        else if (c1 == short.class) {", "-//          return c2 == byte.class;", "-//        } ", "-//        else if (c1 == float.class) {", "-//          return (c2 == byte.class  ||", "-//                  c2 == short.class ||", "-//                  c2 == int.class   ||", "-//                  c2 == long.class);", "-//        } ", "-//        else if (c1 == double.class) {", "-//          return (c2 == byte.class  ||", "-//                  c2 == short.class ||", "-//                  c2 == int.class   ||", "-//                  c2 == long.class  ||", "-//                  c2 == float.class);", "-//        } ", "-//        else { // it's a boolean && c1 != c2", "-//          return false;", "-//        }", "-//      }", "-//      else { // c1 == c2", "-//        return true;", "-//      }", "-//    } ", "-//    else { // It's a reference type", "-//      return (c2 == null) ? true : c1.isAssignableFrom(c2);", "-//    }", "-  }", "+    if (c1.isPrimitive()) {", "+      if (c1 != c2) {", "+        if (c1 == int.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == char.class);", "+        }", "+        else if (c1 == long.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class);", "+        } ", "+        else if (c1 == short.class) {", "+          return c2 == byte.class;", "+        } ", "+        else if (c1 == float.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class);", "+        } ", "+        else if (c1 == double.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class  ||", "+                  c2 == float.class);", "+        } ", "+        else { // it's a boolean && c1 != c2", "+          return false;", "+        }", "+      }", "+      else { // c1 == c2", "+        return true;", "+      }", "+    } ", "+    else { // It's a reference type", "+      return (c2 == null) ? true : c1.isAssignableFrom(c2);", "+    }"]}], "num": 24288}
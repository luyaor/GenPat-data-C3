{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e890e49dda7b54489f32be5255175e46", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d0ef90c87b2d6c6d8d89199acf317f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "9953c5f787113bb8bfb39d4af2a2ba9a2a873081", "commitAfterChange": "cf43b71b7afba8ecd60ed8b71f23b327139aa802", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder)       throws InterruptedException, InvocationTargetException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, InvocationTargetException, IOException", "diff": ["-    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder).value(); }", "+   */", "+  public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,", "+                                       Runnable1<? super Process> onExit)", "+      throws InterruptedException, InvocationTargetException, IOException {", "+    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder, onExit).value(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a77e5ea886899bd20a8d5e1cb03b5809", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final JVMBuilder jvmBuilder,                                                        boolean start)", "signatureAfterChange": "   public static <I, R>       IncrementalTaskController<I, R> computeInProcess(IncrementalTask<? extends I, ? extends R> task,                                                        JVMBuilder jvmBuilder, boolean start)", "diff": ["-    return computeInProcess(task, jvmBuilder, start, null);", "-  }", "+   */", "+  public static <I, R>", "+      IncrementalTaskController<I, R> computeInProcess(IncrementalTask<? extends I, ? extends R> task,", "+                                                       JVMBuilder jvmBuilder, boolean start) {", "+    return computeInProcess(task, jvmBuilder, start, false);", "+  }"]}], "num": 13830}
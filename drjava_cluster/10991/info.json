{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9af462383ff8a8230fbf1bfdd2773b8b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02acf96428a4699bb6fd9ef622745d90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DetachedFrame.java", "commitBeforeChange": "54a2d5af359edd99cce3e2b74ded93b4c8c0d9e9", "commitAfterChange": "7c8486700bb21647b6fbe2818464471123c8ab80", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public DetachedFrame(String name, MainFrame mf, Runnable1<DetachedFrame> detach, Runnable1<DetachedFrame> reattach)", "signatureAfterChange": "   public DetachedFrame(String name, MainFrame mf, Runnable1<DetachedFrame> detach, Runnable1<DetachedFrame> reattach)", "diff": ["+    ", "+    // not strictly necessary on Mac, because Mac DetachedFrames have a menu bar", "+    final InputMap im = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);", "+    // First clone the InputMap so we can change the keystroke mappings", "+    if (im.keys()!=null) { // keys() may return null!", "+      for(KeyStroke ks: im.keys()) { _oldInputMap.put(ks, im.get(ks)); }", "+    }", "+    // Add listeners to all key bindings", "+    for (KeyStrokeData ksd: KeyBindingManager.ONLY.getKeyStrokeData()) {", "+      if (ksd.getOption() != null) {", "+        DrJava.getConfig().addOptionListener(ksd.getOption(), _keyBindingOptionListener);", "+      }", "+    }", "+    // Then update the key bindings", "+    updateKeyBindings();", "+", "+  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34215eee74b62d730aea06094c771915", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "5d703906feb40e67075dbe3ea0fe3662921f3d60", "commitAfterChange": "310ad6d573c9d5b05b96345b8e88424e666118bd", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public void indent(final int reason)", "signatureAfterChange": "   public void indent(final int reason)", "diff": ["+", "+    ", "-", "-//    final SwingWorker worker = new SwingWorker() {", "-//      public Object construct() {", "-        _mainFrame.hourglassOn();", "-", "-//        // Use a progress monitor to show a progress dialog only if necessary.", "-        ProgressMonitor pm = null; //new ProgressMonitor(_mainFrame, \"Indenting...\",", "-//                                                 null, 0, selEnd - selEnd);", "-//", "-//        pm.setProgress(0);", "-//        // 3 seconds before displaying the progress bar.", "-//        pm.setMillisToDecideToPopup(3000);", "-", "-        // XXX: Temporary hack because of slow indent...", "-        //  Prompt if more than 10000 characters to be indented", "-        boolean doIndent = true;", "-        if (selEnd > (selStart + 10000)) {", "-          Object[] options = {\"Yes\", \"No\"};", "-          int n = JOptionPane.showOptionDialog", "-            (_mainFrame,", "-             \"Re-indenting this block may take a very long time.  Are you sure?\",", "-             \"Confirm Re-indent\",", "-             JOptionPane.YES_NO_OPTION,", "-             JOptionPane.QUESTION_MESSAGE,", "-             null,", "-             options,", "-             options[1]);", "-          switch (n) {", "-            case JOptionPane.CANCEL_OPTION:", "-            case JOptionPane.CLOSED_OPTION:", "-            case JOptionPane.NO_OPTION:", "-              doIndent = false;", "-              break;", "-            default:", "-              doIndent = true;", "-              break;", "-          }", "-        }", "-", "-        // Do the indent", "-        if (doIndent) {", "-          try {", "-            _doc.indentLinesInDefinitions(selStart, selEnd, reason, pm);", "-            //      _indentLines(reason, pm)", "-          }", "-          catch (OperationCanceledException oce) {", "-            // if canceled, undo the indent", "-//          _doc.getDocument().getUndoManager().undo(key);", "-            throw new UnexpectedException(oce);", "-          }", "-          finally {", "-            setCaretPosition(_doc.getCurrentDefinitionsLocation());", "-//          pm.close();", "-          }", "-", "-          _mainFrame.hourglassOff();", "-//        return null;", "-//      }", "-//    };", "-//    worker.start();", "-        }", "+    ", "+    //    final SwingWorker worker = new SwingWorker() {", "+    //      public Object construct() {", "+    ", "+    //        // Use a progress monitor to show a progress dialog only if necessary.", "+    ProgressMonitor pm = null;", "+    //= new ProgressMonitor(_mainFrame, \"Indenting...\",", "+    //                    null, 0, selEnd - selStart);", "+    ", "+    //pm.setProgress(0);", "+    // 3 seconds before displaying the progress bar.", "+    //pm.setMillisToDecideToPopup(3000);", "+    ", "+    // XXX: Temporary hack because of slow indent...", "+    //  Prompt if more than 10000 characters to be indented", "+    boolean doIndent = true;", "+    if (selEnd > (selStart + 10000)) {", "+      Object[] options = {\"Yes\", \"No\"};", "+      int n = JOptionPane.showOptionDialog", "+        (_mainFrame,", "+         \"Re-indenting this block may take a very long time.  Are you sure?\",", "+         \"Confirm Re-indent\",", "+         JOptionPane.YES_NO_OPTION,", "+         JOptionPane.QUESTION_MESSAGE,", "+         null,", "+         options,", "+         options[1]);", "+      switch (n) {", "+        case JOptionPane.CANCEL_OPTION:", "+        case JOptionPane.CLOSED_OPTION:", "+        case JOptionPane.NO_OPTION:", "+          doIndent = false;", "+          break;", "+        default:", "+          doIndent = true;", "+          break;", "+    }", "+    ", "+    // Do the indent", "+    if (doIndent) {", "+      _mainFrame.hourglassOn();", "+      final int key = _doc.getDocument().getUndoManager().startCompoundEdit();", "+      try {", "+        _doc.indentLinesInDefinitions(selStart, selEnd, reason, pm);", "+        //      _indentLines(reason, pm);", "+        _doc.getDocument().getUndoManager().endCompoundEdit(key);", "+      }", "+      catch (OperationCanceledException oce) {", "+        // if canceled, undo the indent; but first, end compound edit", "+        _doc.getDocument().getUndoManager().endCompoundEdit(key);", "+        _doc.getDocument().getUndoManager().undo(key);", "+        // pm = null, so cancel can't be pressed", "+        throw new UnexpectedException(oce);", "+      }", "+      catch (RuntimeException e) {", "+        //catches the exception to turn off the the hourglass", "+        //and close the compound edit before throwing out to", "+        //the main frame.", "+        _mainFrame.hourglassOff();", "+        //pm.close();", "+        _doc.getDocument().getUndoManager().endCompoundEdit(key);", "+        throw e;", "+      }", "+      ", "+      //_doc.syncCurrentLocationWithDefinitions(caretPos);", "+      setCaretPosition(_doc.getCurrentDefinitionsLocation());", "+      _mainFrame.hourglassOff();", "+      //pm.close();", "+      ", "+      //        return null;", "+      //      }", "+      //    };", "+      //    worker.start();", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c7134403db7eda35112e9ae0a0a3dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "commitAfterChange": "1e5237b2401d25a04c08b7b54162568a6d55c836", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public void indent(int reason)", "signatureAfterChange": "   public void indent(final int reason)", "diff": ["-  public void indent(int reason) {", "+  public void indent(final int reason) {", "+    final int key = _doc.getDocument().getUndoManager().startCompoundEdit();", "+    ", "-    int selStart = getSelectionStart();", "-    int selEnd = getSelectionEnd();", "-", "-    // Show a wait cursor for reasonable sized blocks", "-    boolean showWaitCursor = selEnd > (selStart + 100);", "-", "-    // XXX: Temporary hack because of slow indent...", "-    //  Prompt if more than 10000 characters to be indented", "-    boolean doIndent = true;", "-    if (selEnd > (selStart + 10000)) {", "-      Object[] options = {\"Yes\", \"No\"};", "-      int n = JOptionPane.showOptionDialog", "-        (_mainFrame,", "-         \"Re-indenting this block may take a very long time.  Are you sure?\",", "-         \"Confirm Re-indent\",", "-         JOptionPane.YES_NO_OPTION,", "-         JOptionPane.QUESTION_MESSAGE,", "-         null,", "-         options,", "-         options[1]);", "-      if (n == JOptionPane.NO_OPTION) { doIndent = false; }", "-    }", "-", "-    // Do the indent", "-    if (doIndent) {", "-      if (showWaitCursor) {", "+    final int selStart = getSelectionStart();", "+    final int selEnd = getSelectionEnd();", "+    ", "+//    final SwingWorker worker = new SwingWorker() {", "+//      public Object construct() {", "-      }", "-      //_doc.indentLinesInDefinitions(selStart, selEnd);", "-      _indentLines(reason);", "-      setCaretPosition(_doc.getCurrentDefinitionsLocation());", "-      if (showWaitCursor) {", "+        ", "+//        // Use a progress monitor to show a progress dialog only if necessary.", "+        ProgressMonitor pm = null; //new ProgressMonitor(_mainFrame, \"Indenting...\",", "+//                                                 null, 0, selEnd - selEnd);", "+//        ", "+//        pm.setProgress(0);", "+//        // 3 seconds before displaying the progress bar.", "+//        pm.setMillisToDecideToPopup(3000);", "+        ", "+          // Show a wait cursor for reasonable sized blocks", "+        boolean showWaitCursor = selEnd > (selStart + 100);", "+        ", "+        // XXX: Temporary hack because of slow indent...", "+        //  Prompt if more than 10000 characters to be indented", "+        boolean doIndent = true;", "+        if (selEnd > (selStart + 10000)) {", "+          Object[] options = {\"Yes\", \"No\"};", "+          int n = JOptionPane.showOptionDialog", "+            (_mainFrame,", "+             \"Re-indenting this block may take a very long time.  Are you sure?\",", "+             \"Confirm Re-indent\",", "+             JOptionPane.YES_NO_OPTION,", "+             JOptionPane.QUESTION_MESSAGE,", "+             null,", "+             options,", "+             options[1]);", "+          if (n == JOptionPane.NO_OPTION) { doIndent = false; }", "+        }", "+        ", "+        // Do the indent", "+        try {", "+          _doc.indentLinesInDefinitions(selStart, selEnd, reason, pm);", "+          //      _indentLines(reason, pm);", "+          ", "+          _doc.getDocument().getUndoManager().endCompoundEdit(key);", "+        }", "+        catch (OperationCanceledException oce) {", "+          // if canceled, undo the indent", "+//          _doc.getDocument().getUndoManager().undo(key);", "+          throw new UnexpectedException(oce);", "+        }", "+        finally {", "+          setCaretPosition(_doc.getCurrentDefinitionsLocation());", "+//          pm.close();", "+        }", "+        ", "-      }", "-    }", "+//        return null;", "+//      }", "+//    };", "+//    worker.start();"]}], "num": 10991}
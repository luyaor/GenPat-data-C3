{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e9cd8869fb4de7b46087c80824bcc58", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e02db8d87308ad5025c908e8c978c98d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "2cd89063cbfbf0917c73ab6eef3bf3a4c73e4766", "commitAfterChange": "b7a80f7ccc058818677874970560634a8628aea6", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 65, "signatureBeforeChange": "   private ArrayList extractErrors(LinkedList lines)", "signatureAfterChange": "   private ArrayList extractErrors(LinkedList lines)", "diff": ["+    final String ERROR_INDICATOR = \"Error: \";", "+      // Check for the telltale signs of a thrown exception or error.", "-      // Check for the telltale signs of a thrown exception.", "-      errStart = output.indexOf(EXCEPTION_INDICATOR);", "+      errStart = output.indexOf(ERROR_INDICATOR);", "+      ", "+      // If we haven't found an error, look for an exception.", "+      if (errStart == -1) {", "+        errStart = output.indexOf(EXCEPTION_INDICATOR);", "+      }", "+            ", "-        do {", "-          buf.append(output);", "+        buf.append(output);", "+        while (lines.size() > 0) {", "-        } while (lines.size() > 0);", "+          buf.append('\\n');", "+          buf.append(output);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed9b4c4d4f7db316cdeb47e84f8cdfcf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerError.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public int compareTo(Object o)", "signatureAfterChange": "   public int compareTo(Object o)", "diff": ["-  /** Compare by line, then by column. */", "+   */", "+", "+    // Determine if I have a file", "+    if (_file != null) {", "+      if (other.file() == null) {", "+        // Errors with files are bigger", "+        return 1;", "+      }", "+      else {", "+        // Compare by file", "+        int fileComp = _file.compareTo(other.file());", "+        if (fileComp != 0) {", "+          return fileComp;", "+        }", "+        else {", "+          // Compare by position", "+          return compareByPosition(other);", "+        }", "+      }", "+    }", "+    else {", "+      // My file is null", "+      if (other.file() == null) {", "+        return 0;", "+      }", "+      else {", "+        // Errors without files are smaller", "+        return -1;", "+      }", "+    }", "+  }", "-    } "]}], "num": 2629}
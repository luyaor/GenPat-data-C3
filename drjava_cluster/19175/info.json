{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4621ebc56a1bbbb68f9ce595fd6da4c8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0270957c2f1a9df81730d2c355d7204d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "commitAfterChange": "22cb21cbc806aa257284ccfb5bed593a93cc9671", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["+      int start, len;", "+      String findWord = this._findWord;", "-      String findSpace = _doc.getText(_current.getOffset(), ", "-                                      _doc.getLength()-_current.getOffset());", "-      // find the first occurrence of _findWord", "+      String findSpace;", "+      if(!_searchBackwards){", "+        start = _current.getOffset();", "+        len = _doc.getLength() - start;", "+      } else {", "+        start = 0;", "+        len = _current.getOffset();", "+      }", "+      findSpace = _doc.getText(start, len);", "+      if (!_matchCase){", "+        findSpace = findSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+", "+      // find the first occurrence of findWord", "-      if (_matchCase) ", "-        foundOffset = findSpace.indexOf(_findWord);", "-      else", "-        foundOffset = findSpace.toLowerCase().indexOf(_findWord.toLowerCase());", "+      foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                                      : findSpace.lastIndexOf(findWord);", "-        foundOffset += _current.getOffset() + _findWord.length();", "+        foundOffset += start;", "+        if (!_searchBackwards){", "+           foundOffset += findWord.length();", "+        }", "-      }", "-      else {", "+      } else {", "-        findSpace = _doc.getText(0, _start.getOffset());", "-        if (_matchCase) ", "-          foundOffset = findSpace.indexOf(_findWord);", "-        else", "-          foundOffset = findSpace.toLowerCase().indexOf(_findWord.toLowerCase());", "+        //When we wrap, we need to include some text that was already searched before wrapping.", "+        //Otherwise, we won't find an only match that has the caret in it already.", "+        if(!_searchBackwards){", "+          start = 0;", "+          len = _start.getOffset() + (_findWord.length() - 1);", "+          if(len > _doc.getLength()){", "+            len = _doc.getLength();", "+          }", "+        } else {", "+          start = _start.getOffset() - (_findWord.length() - 1);", "+          if (start < 0){", "+            start = 0;", "+          }", "+          len = _doc.getLength() - start;", "+        }", "+        findSpace = _doc.getText(start, len);", "+", "+        if (!_matchCase) {", "+          findSpace = findSpace.toLowerCase();", "+        }", "+", "+        foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "+                                        : findSpace.lastIndexOf(findWord);", "+", "-          foundOffset += _findWord.length();", "+          foundOffset += start;", "+          if (!_searchBackwards) {", "+            foundOffset += findWord.length();", "+          }", "-      // flag the return value so that they can tell that we had to wrap ", "+      // flag the return value so that they can tell that we had to wrap", "-    ", "+", "+      //This means we have found the word before, just not in this call", "-      } ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e89b72af2e7e1cda431a0225a33cc74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/AFindReplaceMachineState.java", "commitBeforeChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "commitAfterChange": "d61b8181e3991377c3e72e5da1d438e3d26d3479", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private int _replaceAllInCurrentDoc()", "signatureAfterChange": "   private int _replaceAllInCurrentDoc()", "diff": ["+   */", "+  private int _replaceAllInCurrentDoc() {", "+    try {", "+      if (!_searchBackwards) {", "+        _start = _doc.createPosition(0);", "+        setPosition(0);", "+      }", "+      else {", "+        _start = _doc.createPosition(_doc.getLength());", "+        setPosition(_doc.getLength());", "+      }", "+    catch (BadLocationException e) {", "+      throw new UnexpectedException(e);", "+    int count = 0;", "+    FindResult fr = findNext();", "+    _doc = fr.getDocument();", "+//    int found = fr.getFoundOffset(); // This is never used", "+//    int wrapped = 0;", "+//    if (fr.getWrapped())", "+//      wrapped++;", "+// Checks that the findNext method has found something and has not", "+// wrapped once and gone beyond start.", "+//    while (found >= 0 && (wrapped == 0 ||", "+//                         ((found < _start.getOffset() + _findWord.length() && !_searchBackwards)  ||", "+//                          (found > _start.getOffset() - _findWord.length() && _searchBackwards))) && wrapped < 2) {", "+//new while condition, since I started replacing from the beginning/end of the document only", "+    while (!fr.getWrapped()) {// wrapped == 0) {", "+      replaceCurrent();", "+      count++;", "+      fr = findNext();", "+      _doc = fr.getDocument();", "+//      found = fr.getFoundOffset();", "+      //      if (fr.getWrapped())", "+      //        wrapped++;", "+    return count;", "+  }", "-     */", "-    private int _replaceAllInCurrentDoc() {", "-\ttry {", "-\t    if (!_searchBackwards){", "-\t\t_start = _doc.createPosition(0);", "-\t\tsetPosition(0);", "-\t    } else {", "-\t\t_start = _doc.createPosition(_doc.getLength());", "-\t\tsetPosition(_doc.getLength());", "-\t    }", "-\t} ", "-\tcatch (BadLocationException e) {", "-\t    throw new UnexpectedException(e);", "-\t}", "-\tint count = 0;", "-\tFindResult fr = findNext();", "-\t_doc = fr.getDocument();", "-\tint found = fr.getFoundOffset();", "-\t//    int wrapped = 0;", "-\t//    if (fr.getWrapped())", "-\t//      wrapped++;", "-\t// Checks that the findNext method has found something and has not", "-\t// wrapped once and gone beyond start.", "-\t//    while (found >= 0 && (wrapped == 0 ||", "-\t//                         ((found < _start.getOffset() + _findWord.length() && !_searchBackwards)  ||", "-\t//                          (found > _start.getOffset() - _findWord.length() && _searchBackwards))) && wrapped < 2) {", "-", "-\t//new while condition, since I started replacing from the beginning/end of the document only", "-\twhile(!fr.getWrapped()) {// wrapped == 0) {", "-\t    replaceCurrent();", "-\t    count++;", "-\t    fr = findNext();", "-\t    _doc = fr.getDocument();", "-\t    found = fr.getFoundOffset();", "-\t    //      if (fr.getWrapped())", "-\t    //        wrapped++;", "-\t}", "-\treturn count;", "-    }"]}], "num": 19175}
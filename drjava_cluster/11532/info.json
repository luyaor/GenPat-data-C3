{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd28d77b9535b7c7cc1ac4698e522b2e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "006f7088371330ea5bafa408590f5727", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/SingleDisplayModel.java", "commitBeforeChange": "7bb32c28070a4b5d5697c7c88ea0d664289c76e8", "commitAfterChange": "b2ad80c49aaa09f293a5bc1f6664d4cc5243219e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public DefinitionsEditorKit getEditorKit()", "signatureAfterChange": "   public String getDisplayFilename(OpenDefinitionsDocument doc)", "diff": ["+   */", "+  public String getDisplayFilename(OpenDefinitionsDocument doc) {", "+", "+    String filename = \"(untitled)\";", "+    try {", "+      File file = doc.getFile();", "+      filename = file.getName();", "+    }", "+    catch (IllegalStateException ise) {", "+      // No file, filename stays \"Untitled\"", "+    }", "+    // Remove \".java\"", "+    int extIndex = filename.lastIndexOf(\".java\");", "+    if (extIndex > 0) {", "+      filename = filename.substring(0, extIndex);", "+    }", "+", "+    // Mark if modified", "+    if (doc.isModifiedSinceSave()) {", "+      filename = filename + \" *\";", "+    }", "+    return filename;", "+  }", "-   */", "-  public DefinitionsEditorKit getEditorKit() {", "-    return super.getEditorKit();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f54b44030bd218d2cd7ebc8dec55872b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public CompilerError[] getErrorsWithPositions()", "signatureAfterChange": "   public boolean hasErrorsWithPositions(OpenDefinitionsDocument odd)", "diff": ["-   */", "-  public CompilerError[] getErrorsWithPositions() {", "+   */", "+  public boolean hasErrorsWithPositions(OpenDefinitionsDocument odd){", "+    File file = null;", "+    try {", "+      file = odd.getFile();", "+    } catch (IllegalStateException ise) {", "+      //no associated file, do nothing", "+    } catch (FileMovedException fme) {", "+      file = fme.getFile();", "+    }", "+    if (file == null){", "+      return false;", "+    }", "+", "+    StartAndEndIndex saei = _filesToIndexes.get(file);", "+    if (saei == null){", "+      return false;", "+    }", "+    if (saei.getStartPos() == saei.getEndPos()){", "+      return false;", "+    }", "+    return true;", "+  }"]}], "num": 11532}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58a6a9c9b9a4de51c422ad88221b9a5d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d2cd7e96feda73cd093ff2f253fadad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["-    Map<VerDescPair, JDKToolsLibrary> results = new TreeMap<VerDescPair, JDKToolsLibrary>();", "+    Map<LibraryKey, JDKToolsLibrary> results = new TreeMap<LibraryKey, JDKToolsLibrary>();", "-        results.put(getVerDescPair(fromConfig), fromConfig);", "+        results.put(getLibraryKey(LibraryKey.PRIORITY_CONFIG, fromConfig), fromConfig);", "-        if (!results.containsKey(getVerDescPair(fromRuntime))) {", "+        if (!results.containsKey(getLibraryKey(LibraryKey.PRIORITY_RUNTIME, fromRuntime))) {", "-          results.put(getVerDescPair(fromRuntime), fromRuntime);", "+          results.put(getLibraryKey(LibraryKey.PRIORITY_RUNTIME, fromRuntime), fromRuntime);", "-      if (!results.containsKey(getVerDescPair(t))) {", "+      // give a lower priority to built-in compilers", "+      int priority = (edu.rice.cs.util.FileOps.getDrJavaFile().equals(tVersion.location()))?LibraryKey.PRIORITY_BUILTIN:LibraryKey.PRIORITY_SEARCH;", "+      if (!results.containsKey(getLibraryKey(priority, t))) {", "-        results.put(getVerDescPair(t), t);", "+        results.put(getLibraryKey(priority, t), t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afeb3ce645371770c625dc7dfdacadfa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "8e720afa329dc77cc45a6aba8a5a211e38ce857f", "commitAfterChange": "8a50a7d4180dfbf8ce4f8b3b2ddf43887adf7c81", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["-    JDKToolsLibrary fromRuntime = JDKToolsLibrary.makeFromRuntime(this);", "+    Iterable<JDKToolsLibrary> allFromRuntime = JDKToolsLibrary.makeFromRuntime(this);", "-    JavaVersion.FullVersion runtimeVersion = fromRuntime.version();", "-    if (fromRuntime.isValid()) {", "-      if (!results.containsKey(coarsenVersion(runtimeVersion))) {", "-        JarJDKToolsLibrary.msg(\"From runtime: \"+fromRuntime);", "-        results.put(coarsenVersion(runtimeVersion), fromRuntime);", "+    for(JDKToolsLibrary fromRuntime: allFromRuntime) {", "+      JavaVersion.FullVersion runtimeVersion = fromRuntime.version();", "+      if (fromRuntime.isValid()) {", "+        if (!results.containsKey(coarsenVersion(runtimeVersion))) {", "+          JarJDKToolsLibrary.msg(\"From runtime: \"+fromRuntime);", "+          results.put(coarsenVersion(runtimeVersion), fromRuntime);", "+        }", "+        else { JarJDKToolsLibrary.msg(\"From runtime: duplicate \"+fromRuntime); }", "-      else { JarJDKToolsLibrary.msg(\"From runtime: duplicate \"+fromRuntime); }", "+      else { JarJDKToolsLibrary.msg(\"From runtime: invalid \"+fromRuntime); }", "-    else { JarJDKToolsLibrary.msg(\"From runtime: invalid \"+fromRuntime); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d3e39bccc43647660c6384dc455247", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "503a4c8c883d0c0e1badd33935b5da20910f7033", "commitAfterChange": "bc15f82b93b6ffb78da3a3058742b383768e7aa6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["+  ", "-    Map<JavaVersion.FullVersion, JDKToolsLibrary> results = new TreeMap<JavaVersion.FullVersion, JDKToolsLibrary>();", "+    Map<VerDescPair, JDKToolsLibrary> results = new TreeMap<VerDescPair, JDKToolsLibrary>();", "-        results.put(coarsenVersion(fromConfig.version()), fromConfig);", "+        results.put(getVerDescPair(fromConfig), fromConfig);", "-      JavaVersion.FullVersion runtimeVersion = fromRuntime.version();", "-        if (!results.containsKey(coarsenVersion(runtimeVersion))) {", "+        if (!results.containsKey(getVerDescPair(fromRuntime))) {", "-          results.put(coarsenVersion(runtimeVersion), fromRuntime);", "+          results.put(getVerDescPair(fromRuntime), fromRuntime);", "-      if (!results.containsKey(coarsenedVersion)) {", "+      if (!results.containsKey(getVerDescPair(t))) {", "-        results.put(coarsenedVersion, t);", "+        results.put(getVerDescPair(t), t);"]}], "num": 17477}
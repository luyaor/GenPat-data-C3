{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eef3e7988a1431d80e4e767d298e5332", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94ac7c907fe0b1a52101b44dc6719db0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 353, "methodNumberAfterChange": 256, "signatureBeforeChange": "     public ClassType lookupClass(Type t, final String name, Iterable<? extends Type> typeArgs)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "      public ClassType lookupClass(Type t, final String name, Iterable<? extends Type> typeArgs)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["+  ", "+  public ClassType lookupClass(Type t, final String name, Iterable<? extends Type> typeArgs)", "+    throws InvalidTypeArgumentException, UnmatchedLookupException {", "+    return new ClassFinder(name, typeArgs, false).findSingleClass(t);", "+  }", "-   */  ", "-  public ClassType lookupClass(Type t, final String name, Iterable<? extends Type> typeArgs)", "-    throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException {", "-    debug.logStart(new String[]{\"t\", \"name\", \"typeArgs\"}, t, name, typeArgs); try {", "-      ", "-    Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "-      public Predicate<DJClass> value(final Boolean includePrivate) {", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              return includePrivate || !c.accessibility().equals(Access.PRIVATE);", "-            }", "-            else { return false; }", "-          }", "-        };", "-      }", "-    };", "-    return lookupClass(t, makePred, typeArgs, name);", "-    ", "-    } finally { debug.logEnd(); }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6cfd7d5ae6a2a05806af30faaecb607", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 346, "methodNumberAfterChange": 253, "signatureBeforeChange": "         public boolean containsClass(Type t, final String name)", "signatureAfterChange": "      public boolean containsClass(Type t, final String name)", "diff": ["+  public boolean containsClass(Type t, final String name) {", "+    return new ClassFinder(name, EMPTY_TYPE_ITERABLE, false).hasMatch(t);", "-  ", "-  public boolean containsClass(Type t, final String name) {", "-    debug.logStart(new String[]{\"t\",\"name\"}, wrap(t), name); try {", "-    ", "-    // TODO: We allow nonstatic classes and ambiguous references here.  Is that correct?", "-    Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "-      public Predicate<DJClass> value(final Boolean includePrivate) {", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              return includePrivate || !c.accessibility().equals(Access.PRIVATE);", "-            }", "-            else { return false; }", "-          }", "-        };", "-      }", "-    };", "-    Iterable<? extends ClassType> classes = lookupClasses(t, makePred, EMPTY_TYPE_ITERABLE);", "-    return !IterUtil.isEmpty(classes);", "-    ", "-    } finally { debug.logEnd(); }", "-  }"]}], "num": 27345}
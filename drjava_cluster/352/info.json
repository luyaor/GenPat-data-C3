{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db078e9a5c045fc1fab6d4167d402a80", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c50827067213499960c5cd40490dedf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 282, "methodNumberAfterChange": 365, "signatureBeforeChange": "           public SignatureChecker value(DJConstructor k)", "signatureAfterChange": "     public Iterable<? extends Type> parameterTypes()", "diff": ["+    public Iterable<Type> thrownTypes() { return IterUtil.relax(substitute(_delegate.thrownTypes(), _sigma)); }", "+    public Iterable<? extends Type> parameterTypes() {", "+      return substitute(SymbolUtil.declaredParameterTypes(_delegate), _sigma);", "+    }", "-          new Lambda<DJConstructor, SignatureChecker>() {", "-          public SignatureChecker value(DJConstructor k) {", "-            //debug.logValues(new String[]{\"k\", \"declaredParameterTypes\"}, k, SymbolUtil.declaredParameterTypes(k));", "-            return makeChecker(k.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(k),", "-                               args, t, expected);", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "893d3a96aff33c451a533ff123ecd4f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 343, "signatureBeforeChange": "           public SignatureChecker value(DJMethod m)", "signatureAfterChange": "     public ErasedMethod(DJMethod m)", "diff": ["+  private class ErasedMethod extends DelegatingMethod {", "+    public ErasedMethod(DJMethod m) { super(m); }", "-        Lambda<DJMethod, SignatureChecker> makeChecker = new Lambda<DJMethod, SignatureChecker>() {", "-          public SignatureChecker value(DJMethod m) {", "-            // TODO: substitute out class type parameters from the method's parameters' bounds", "-            //       (how does the JLS handle this?)", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, ", "-                               substitute(SymbolUtil.declaredParameterTypes(m), classSigma),", "-                               args, m.returnType(), expected);", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf3bd2d39da0cdd8578ec2ba07b39b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 321, "methodNumberAfterChange": 304, "signatureBeforeChange": "           public SignatureChecker value(DJMethod m)", "signatureAfterChange": "          protected Iterable<Type> parameterTypes()", "diff": ["+    ", "+    protected Iterable<Type> parameterTypes() { return SymbolUtil.declaredParameterTypes(_f); }", "-        Lambda<DJMethod, SignatureChecker> makeChecker = new Lambda<DJMethod, SignatureChecker>() {", "-          public SignatureChecker value(DJMethod m) {", "-            // TODO: substitute out class type parameters from the method's parameters' bounds", "-            //       (how does the JLS handle this?)", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, ", "-                               substitute(SymbolUtil.declaredParameterTypes(m), classSigma),", "-                               args, m.returnType(), expected);", "-          }"]}], "num": 352}
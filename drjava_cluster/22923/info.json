{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04029ab7a738cfae78b457336916ba9c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d89edc344a3026449301fbcb937a67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 46, "signatureBeforeChange": "   synchronized Vector<ReferenceType> getReferenceTypes(String className, int lineNumber)", "signatureAfterChange": " Vector<ReferenceType> getReferenceTypes(String className, int lineNumber)", "diff": ["-  synchronized Vector<ReferenceType> getReferenceTypes(String className, int lineNumber) {", "+  /* synchronized */ Vector<ReferenceType> getReferenceTypes(String className, int lineNumber) {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "078a1132d1dbb831637913a28f3b6b5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "commitAfterChange": "f998596e58db467638fd2c5025aacbfb31d4199f", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 254, "signatureBeforeChange": "   public void debuggerToggle()", "signatureAfterChange": "   public void debuggerToggle()", "diff": ["-   *  event thread. */", "+    * event thread. */", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0977b4f3e4a9f338342a1a985122897e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "8ccb5b5787c23c1ec149415240d859632e14b0eb", "commitAfterChange": "de735ebb692c41fde6f4d0600cc3fb90b66c892a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void endCompoundEdit(int key)", "signatureAfterChange": "   public void endCompoundEdit(int key)", "diff": ["-    if(_keys.get(0).intValue() == key) {", "-      CompoundEdit compoundEdit = _compoundEdits.remove(0);", "-      compoundEdit.end();", "-", "-      if (compoundEdit.canUndo()) {", "-        if (!_compoundEditInProgress()) {", "-          super.addEdit(compoundEdit);", "+    if(_keys.size() > 0) {", "+      if(_keys.get(0).intValue() == key) {", "+        CompoundEdit compoundEdit = _compoundEdits.remove(0);", "+        compoundEdit.end();", "+        ", "+        if (compoundEdit.canUndo()) {", "+          if (!_compoundEditInProgress()) {", "+            super.addEdit(compoundEdit);", "-          _notifyUndoHappened();", "+            _notifyUndoHappened();", "+          }", "+          else {", "+            _compoundEdits.get(0).addEdit(compoundEdit);", "+          }", "-        else {", "-          _compoundEdits.get(0).addEdit(compoundEdit);", "-        }", "-      }", "-      _keys.remove(0);", "+        _keys.remove(0);", "-    }", "-    else {", "-      throw new IllegalStateException(\"Improperly nested compound edits.\");", "+      }", "+      else {", "+        throw new IllegalStateException(\"Improperly nested compound edits.\");", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bd6b804de30a5edbad4e8910848e8a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Class<?> visit(SwitchStatement node)", "signatureAfterChange": "   public Class<?> visit(SwitchStatement node)", "diff": ["-            !TigerUtilities.isEnum(lc)) {", "+            (TigerUtilities.isTigerEnabled() && !TigerUtilities.isEnum(lc))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8f3edf7deaee17e9d1936f5982fdb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/jedit/src/edu/rice/cs/drjava/plugins/jedit/repl/JEditInteractionsModel.java", "commitBeforeChange": "273b9e6fd6b611d74f03283118f3b2c112f6192d", "commitAfterChange": "236aa7df79220d757b2ee9df059be4a4c3d5fd28", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "   private boolean _isJavaFile(Buffer b)", "signatureAfterChange": "   private boolean _isJavaFile(Buffer b)", "diff": ["-    return !b.isNewFile() && !b.isUntitled() && b.getName().endsWith(\".java\");", "+    return b.isLoaded() && !b.isNewFile() && !b.isUntitled() && b.getName().endsWith(\".java\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ec289a6aa9517fdd4a2bee74c5830e4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 675, "methodNumberAfterChange": 675, "signatureBeforeChange": "      public void nonTestCase(boolean isTestAll)", "signatureAfterChange": "      public void nonTestCase(boolean isTestAll)", "diff": ["+      assert EventQueue.isDispatchThread();", "-      // Not necessarily invoked from event-handling thread!", "-      ", "-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() {", "-//        }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1080834262ab75eff955bc55102dc216", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6207c0d4b83ee23d6d4624c513f270e47c43cc83", "commitAfterChange": "f4c8eb851d98f4da2479f32fb767dac4b3a40e1c", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 542, "signatureBeforeChange": "   private JMenu _setUpLanguageLevelMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpLanguageLevelMenu(int mask)", "diff": ["-    rbMenuItem.setSelected(true); // by default select Full Java", "+    if (currentLanguageLevel != OptionConstants.FUNCTIONAL_JAVA_LEVEL) { rbMenuItem.setSelected(true); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12eddcfe18410ad9759c28ef82539af7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 558, "methodNumberAfterChange": 558, "signatureBeforeChange": "          public void interpreterExited(final int status)", "signatureAfterChange": "          public void interpreterExited(final int status)", "diff": ["-      if (DrJava.getConfig().getSetting(INTERACTIONS_EXIT_PROMPT).booleanValue() && ! Utilities.TEST_MODE) {", "+      if (DrJava.getConfig().getSetting(INTERACTIONS_EXIT_PROMPT).booleanValue() && ! Utilities.TEST_MODE && ", "+          MainFrame.this.isVisible()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1385f7b7af3062b7804d6069a6b5fe86", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void currThreadDied()", "signatureAfterChange": "   public void currThreadDied()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1401f097ae74e9165990a9c1487308bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public synchronized void setBreakpoint(final Breakpoint breakpoint) throws DebugException", "signatureAfterChange": "   public void setBreakpoint(final Breakpoint breakpoint) throws DebugException", "diff": ["-  public synchronized void setBreakpoint(final Breakpoint breakpoint) throws DebugException {", "+  public /* synchronized */ void setBreakpoint(final Breakpoint breakpoint) throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15d2f66a873c44e0540216dc1c62f5a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void updateData()", "signatureAfterChange": "   public void updateData()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "177afebabc39ecef74e90ceabc3cb68a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorCaretListener.java", "commitBeforeChange": "0d6a1751a06319b8d446186ea0aafba68239ee0c", "commitAfterChange": "50d54a2cc075d489d4814ce780949e6748ba1350", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "   public void updateHighlight(int curPos)", "diff": ["-", "-      // No need to move the caret since it's already here!", "-      _highlightErrorInSource(shouldSelect);", "-", "+  ", "+      if (_errorListPane.shouldShowHighlightsInSource()) {", "+        // No need to move the caret since it's already here!", "+        _highlightErrorInSource(shouldSelect);", "+      }", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17a1d66a23d08cf1ad52218bfb70778b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void setUp()", "signatureAfterChange": "   public void setUp()", "diff": ["-    ", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17d15cb9f8c9a14a37fc401431edb49c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "4ddd7404761b70fbc7f3b729484fc360047df6c1", "commitAfterChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public ArrayList<HighlightStatus> _getHighlightStatus(int start, int end)", "signatureAfterChange": "   public ArrayList<HighlightStatus> _getHighlightStatus(int start, int end)", "diff": ["-    // assert isReadLocked();", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "190b5417ba2129f1d8de4abaac9f4f77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOption.java", "commitBeforeChange": "7bc6765693343476fc2f77685ee6bc931bf3b3f3", "commitAfterChange": "7f2688df99750a8a6042f231ca2bc23d3f2c923c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public String format(KeyStroke k)", "signatureAfterChange": "   public String format(KeyStroke k)", "diff": ["-      s += \" \";", "+      if (!s.equals(\"\"))", "+        s += \" \";", "-        return s; ", "-        /*String key = new String();", "-         switch(k.getKeyCode()) {", "-         // COMMA", "-         case 44:key = \"COMMA\";", "-         break;", "-         // PERIOD", "-         case 46:key = \"PERIOD\";", "-         break;", "-         // SLASH", "-         case 47:key = \"SLASH\";", "-         break;", "-         // SEMICOLON", "-         case 59:key = \"SEMICOLON\";", "-         break;", "-         // EQUALS", "-         case 61:key = \"EQUALS\";", "-         break;", "-         // OPEN BRACKET", "-         case 91:key = \"OPEN_BRACKET\";", "-         break;", "-         // BACKSLASH", "-         case 92:key = \"BACKSLASH\";", "-         break;", "-         // CLOSE BRACKET", "-         case 93:key = \"CLOSE_BRACKET\";", "-         break;", "-         default:key = KeyEvent.getKeyText(k.getKeyCode()).toUpperCase()", "-         .replace(' ', '_');", "-         }", "-         s += key;*/", "+        return s;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19598b03803830a0b0c511f19216fe41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/Breakpoint.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public Breakpoint(OpenDefinitionsDocument doc, int offset, int lineNumber, JPDADebugger manager)     throws DebugException", "signatureAfterChange": "   public Breakpoint(OpenDefinitionsDocument doc, int offset, int lineNumber, JPDADebugger manager)     throws DebugException", "diff": ["-    _initializeRequests(_manager.getReferenceTypes(_className, _lineNumber));", "+    if (_manager.isReady()) {", "+      // the debugger is on, so initialize now", "+      // otherwise breakpoint gets re-set when debugger is enabled", "+      _initializeRequests(_manager.getReferenceTypes(_className, _lineNumber));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a559d80b93f1ca7606ee8a2f6a75c69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testCompileResetsInteractions() throws BadLocationException, IOException, InterruptedException,     EditDocumentException", "signatureAfterChange": "   public void testCompileResetsInteractions() throws BadLocationException, IOException, InterruptedException,     EditDocumentException", "diff": ["-  /** Tests that the interactions pane is reset after a successful compile if it has been used. */", "+  /** Tests that the interactions pane is reset after a successful compile. */", "+    ", "+//    System.err.println(\"Starting testCompileResetsInteractions\");", "-", "-    // Interpret something to force a reset", "-    // Note: the interpreter should reset now without any interactions.", "-//    interpret(\"Object o = new Object();\");", "+    ", "+//    /** Temporarily set the WORKING_DIRECTORY option to same file as the System \"user.dir\" property in the testing", "+//     *  JVM.  When the interactions pane is reset, the new slave JVM holds onto the created temp directory as ", "+//     * \"user.dir\". */", "+//    File savedWorkDir = _model.getRawWorkingDirectory();", "+//    _model.setWorkingDirectory(new File(System.getProperty(\"user.dir\")));", "+//        System.err.println(\"Compile failed\");", "-      listener.wait();", "+      while (listener.notDone()) listener.wait();", "+//    System.err.println(\"Reached end of compilation\");", "+    ", "+//    /* Restore original WORKING_DIRECTORY property in .drjava */", "+//    _model.setWorkingDirectory(savedWorkDir);", "+    ", "+//    System.err.println(\"Checked that compile occurred\");", "+//    System.err.println(\"Removed compilation listener\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1beeba01a6c01176766502425c17ebe1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public synchronized Breakpoint getBreakpoint(int line, String className)", "signatureAfterChange": "   public Breakpoint getBreakpoint(int line, String className)", "diff": ["-  public synchronized Breakpoint getBreakpoint(int line, String className) {", "+  public /* synchronized */ Breakpoint getBreakpoint(int line, String className) {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ed3ee0b3d4ac5af9122d4f173018d3c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "ce0ecf66ce1ecec7e4abe0bd534cf2fbbb576f91", "commitAfterChange": "4e52eec7688cbd5ec3584417f424923ba61a75e0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "   protected SymbolData makeContinuation(SourceInfo si, String qualClassName)", "signatureAfterChange": "   protected SymbolData makeContinuation(SourceInfo si, String qualClassName)", "diff": ["+//    System.err.println(\"***** makeContinuation called for \" + qualClassName);", "+    if (qualClassName.equals(\"D.E\")) assert false;", "-//    System.err.println(\"Creating continuation for \" + referencedClassName + \" at LLV:1124\");", "+//    System.err.println(\"Created continuation for \" + qualClassName + \" at LLV:1124\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "215ec1c5420dec14748f73e3fbe73702", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void caretUpdate(final CaretEvent evt)", "signatureAfterChange": "   public void caretUpdate(final CaretEvent evt)", "diff": ["+    if (_frame.getSelectedErrorPanel() == null) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21cb576726c17a677e51e44b8e166a58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/TokenList.java", "commitBeforeChange": "102797244429ae58868d0037b49467f5a00bbd6a", "commitAfterChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     void insertBraceToGap(String text)", "signatureAfterChange": "     void insertBraceToGap(String text)", "diff": ["-      this.insert(new Gap(this.getBlockOffset(), getStateAtCurrent()));", "-      this.next(); // now pointing at new brace", "+      // add a new gap to account for the remainder from the split gap", "+      // if block offset is zero, do NOT add a Gap of size 0.", "+      if (this.getBlockOffset() > 0) {", "+        this.insert(new Gap(this.getBlockOffset(), getStateAtCurrent()));", "+        this.next(); //now point at new brace", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2787de8c1133e4d9d003d24dc85c9fba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public synchronized boolean hasRunningThread() throws DebugException", "signatureAfterChange": "   public boolean hasRunningThread() throws DebugException", "diff": ["-  public synchronized boolean hasRunningThread() throws DebugException {", "+  public /* synchronized */ boolean hasRunningThread() throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b1b897a81370a53cb098cd464f4531f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 366, "methodNumberAfterChange": 366, "signatureBeforeChange": "   public void showDebugger()", "signatureAfterChange": "   public void showDebugger()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e4369717d8c2672df21a6fcefe920f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void watchRemoved(DebugWatchData w)", "signatureAfterChange": "   public void watchRemoved(DebugWatchData w)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "314e3c3738d74869892827075e1ffde4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "cb572b3617cad32fd1949d7534520be983606d43", "commitAfterChange": "1333e43055475a45337275f9dfa731c5b2042d69", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "diff": ["-      if (!doc.isUntitled()) {", "-        DocumentInfoGetter g = info.get(doc); ", "+      if (!doc.isUntitled() && doc.isInProjectPath()) {", "+        DocumentInfoGetter g = info.get(doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31ca0bdb66eb2f0a5503401b9aa3ecba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "37ff27cd96cbab2c1d1fedd5b6fb9abe124be61d", "commitAfterChange": "34ce8483136d91f9eff46f1971dc8a612f363868", "methodNumberBeforeChange": 331, "methodNumberAfterChange": 331, "signatureBeforeChange": "      private void _quit()", "signatureAfterChange": "      private void _quit()", "diff": ["+    if (! _model.closeAllFilesOnQuit()) { return; /* if user pressed cancel, do not quit */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32110f22320ac2a537e7786d955e9c5f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public boolean replaceCurrent()", "signatureAfterChange": "   public boolean replaceCurrent()", "diff": ["-  /** If we're on a match for the find word, replace it with the replace word. */", "+  /** If we're on a match for the find word, replace it with the replace word.  Only executes in event thread. */", "+    ", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "329cd749a4ebf8421e72c363aa6b7e0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 45, "signatureBeforeChange": "   synchronized boolean setCurrentThread(ThreadReference thread)", "signatureAfterChange": " boolean setCurrentThread(ThreadReference thread)", "diff": ["-  synchronized boolean setCurrentThread(ThreadReference thread) {", "+  /* synchronized */ boolean setCurrentThread(ThreadReference thread) {", "+    assert EventQueue.isDispatchThread();", "-      if ((_suspendedThreads.isEmpty() || !_suspendedThreads.contains(thread.uniqueID())) &&", "+      if ((_suspendedThreads.isEmpty() || ! _suspendedThreads.contains(thread.uniqueID())) &&"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34baa403198e8ede60a63979d3aaf89d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 55, "signatureBeforeChange": "   private void scrollToSource(Location location, boolean shouldHighlight)", "signatureAfterChange": "   private void scrollToSource(Location location, boolean shouldHighlight)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3724d5ee1b53445c0389ce4d23e9a88e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void testResultOfNonPublicTestCase() throws Exception", "signatureAfterChange": "   public void testResultOfNonPublicTestCase() throws Exception", "diff": ["-    final TestResult testResults = doc.startJUnit();", "+    TestResult testResults;", "+    synchronized(listener) {", "+      testResults = doc.startJUnit();", "+      listener.wait();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f2667c13935611484be5d3b5c6e43b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber,  boolean shouldHighlight)", "signatureAfterChange": "   public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber,  boolean shouldHighlight)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3adc67bf766af31e39dab506098e72ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 283, "methodNumberAfterChange": 285, "signatureBeforeChange": "     public void setFile(File file)", "signatureAfterChange": "     public void setFile(final File file)", "diff": ["-    public void setFile(File file) {", "-      _file = file;", "-      if (_file != null) _timestamp = _file.lastModified();", "+    public void setFile(final File file) {  ", "+      synchronized(this) { // ensures that _file and _timestamp are consistent", "+        _file = file;", "+        if (! AbstractGlobalModel.isUntitled(file)) _timestamp = file.lastModified();", "+        else _timestamp = 0L;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b0aecdc665821c030113f70ee4fbe06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public synchronized void removeBreakpoint(Breakpoint bp) throws DebugException", "signatureAfterChange": "   public void removeBreakpoint(Breakpoint bp) throws DebugException", "diff": ["-  public synchronized void removeBreakpoint(Breakpoint bp) throws DebugException {", "+  public /* synchronized */ void removeBreakpoint(Breakpoint bp) throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4177025157c6d1f210e5dd44839246de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "3944766b414e9b28f72d0266991dc3ced69d30b0", "commitAfterChange": "30114c083c07270248f814f8a3cab4ee5196d9c1", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 328, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["-          resetModification();", "-          if (! oldFile.equals(file)) {", "-            /* remove regions for this document */", "-            removeFromDebugger();", "-            _breakpointManager.removeRegions(this);", "-            _bookmarkManager.removeRegions(this);", "-            for (RegionManager<MovingDocumentRegion> rm: getFindResultsManagers()) rm.removeRegions(this);", "-            clearBrowserRegions();", "-          }", "-          synchronized(_documentsRepos) {", "-            File f = getRawFile();", "-//            OpenDefinitionsDocument d = _documentsRepos.get(f);", "-            // d == this except in some unit tests where documents are not entered in _documentsRepos", "-//            assert d == this;", "-            _documentsRepos.remove(f);", "-            _documentsRepos.put(file, this);", "-          }", "-          setFile(file);", "-          // this.getPackageName does not return \"\" if this is untitled and contains a legal package declaration     ", "+          if (com.shouldUpdateDocumentState()) {", "+            resetModification();", "+            if (! oldFile.equals(file)) {", "+              /* remove regions for this document */", "+              removeFromDebugger();", "+              _breakpointManager.removeRegions(this);", "+              _bookmarkManager.removeRegions(this);", "+              for (RegionManager<MovingDocumentRegion> rm: getFindResultsManagers()) rm.removeRegions(this);", "+              clearBrowserRegions();", "+            }", "+            synchronized(_documentsRepos) {", "+              File f = getRawFile();", "+//            OpenDefinitionsDocument d = _documentsRepos.get(f);", "+              // d == this except in some unit tests where documents are not entered in _documentsRepos", "+//            assert d == this;", "+              _documentsRepos.remove(f);", "+              _documentsRepos.put(file, this);", "+            }", "+            setFile(file);", "+            ", "+            // this.getPackageName does not return \"\" if this is untitled and contains a legal package declaration     ", "-          setCachedClassFile(FileOps.NULL_FILE);", "-          checkIfClassFileInSync();", "-          ", "+            setCachedClassFile(FileOps.NULL_FILE);", "+            checkIfClassFileInSync();", "+            ", "-          _notifier.fileSaved(openDoc);", "-          ", "-          // Make sure this file is on the appropriate classpaths (does nothing in AbstractGlobalModel)", "-          addDocToClassPath(this);", "-          ", "-          /* update the navigator */", "-          _documentNavigator.refreshDocument(this, fixPathForNavigator(file.getCanonicalPath()));", "-          ", "-          /* set project changed flag */", "-          setProjectChanged(true);          ", "+            _notifier.fileSaved(openDoc);", "+            ", "+            // Make sure this file is on the appropriate classpaths (does nothing in AbstractGlobalModel)", "+            addDocToClassPath(this);", "+            ", "+            /* update the navigator */", "+            _documentNavigator.refreshDocument(this, fixPathForNavigator(file.getCanonicalPath()));", "+            ", "+            /* set project changed flag */", "+            setProjectChanged(true);          ", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "458e5ccee2cc2a2ae2f2f73976ba1b98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 193, "signatureBeforeChange": "   public boolean hasModifiedDocuments()", "signatureAfterChange": "   public boolean hasModifiedDocuments()", "diff": ["-    for (OpenDefinitionsDocument doc: docs) { if (doc.isModifiedSinceSave()) return true; }", "+    for (OpenDefinitionsDocument doc: docs) { if (doc.isSourceFile() && doc.isModifiedSinceSave()) return true; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "459c56d42cf3ff8bd27f179a8df55a1c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private void _highlightErrorInSource(Position pos)", "signatureAfterChange": "   private void _highlightErrorInSource(Position pos)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45ab3f4629d8968c8c3827be4bd129d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public synchronized void notifyBreakpointChange(Breakpoint breakpoint)", "signatureAfterChange": "   public void notifyBreakpointChange(Breakpoint breakpoint)", "diff": ["-  public synchronized void notifyBreakpointChange(Breakpoint breakpoint) {", "+  public /* synchronized */ void notifyBreakpointChange(Breakpoint breakpoint) {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "460a5be101c3b5ef12b11b688de66966", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void addDocument(ItemT doc)", "signatureAfterChange": "   public void addDocument(ItemT doc)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e8b92cdbb222af222a59b1d919ee36", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "diff": ["+      assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49fb760a21d18d8ca6e9d73a0a73093c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 347, "methodNumberAfterChange": 347, "signatureBeforeChange": "     public boolean canAbandonFile()", "signatureAfterChange": "     public boolean canAbandonFile()", "diff": ["-      File f = _file;", "-      if (isModifiedSinceSave() || (f != null && ! f.exists() && _cacheAdapter.isReady()))", "+      File f = _file;", "+      if (isModifiedSinceSave() || (! AbstractGlobalModel.isUntitled(f) && ! f.exists() && _cacheAdapter.isReady()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a1e54d95f81572cc3fb06b52bdfb523", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "commitAfterChange": "fa5a46f3cc65ec85b9fa37599dc6542e75cee25e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void setUnmanaged()", "signatureAfterChange": "          public void documentModified()", "diff": ["+    public void documentModified() {", "+      synchronized(_cacheLock) { ", "+        _residentQueue.remove(this); // remove modified document from queue if present", "+        _stat = UNMANAGED;", "+      }", "+    }", "-    private boolean isUnmanagedOrUntitled() { return (_stat & 0x1) != 0; }  // tests if _stat is odd", "-    private void setUnmanaged() { _stat = UNMANAGED; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aa677c0819643bd071acd788d5a8047", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "commitAfterChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "methodNumberBeforeChange": 316, "methodNumberAfterChange": 316, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["+      assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad7172de409d3e33c75f89309e138c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled)      throws DebugException", "signatureAfterChange": "   public void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled)      throws DebugException", "diff": ["-  public synchronized void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled) ", "+  public /* synchronized */ void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled) ", "+        assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d0cb50b90882c40305dbb213997c478", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "af1eb2bf0d9c9c21950a26d58b7d3250b6cf7431", "commitAfterChange": "ba7bb9791eb66188927c0d0910ec99f369dab883", "methodNumberBeforeChange": 195, "methodNumberAfterChange": 196, "signatureBeforeChange": "      public void showTab(Component c)", "signatureAfterChange": "   public void showTab(Component c)", "diff": ["+   */", "-        // interactions & console", "-        _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);", "+        // interactions & console        ", "+        if (!tp.isDisplayed()) {", "+          _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);", "+          tp.setDisplayed(true);", "+        }", "-        tp.setDisplayed(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1d307d79e91b2e8da80c9c2f03a8a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "e656613109a12add4ad6c51f7040ce36731c0f8b", "commitAfterChange": "838397e908a24e107f724695c1466c1c498ec946", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": "   public boolean hasOutOfSyncDocuments()", "signatureAfterChange": "   public boolean hasOutOfSyncDocuments()", "diff": ["-      for (OpenDefinitionsDocument doc: _documentsRepos) { if (! doc.checkIfClassFileInSync()) return true; }", "+      for (OpenDefinitionsDocument doc: _documentsRepos) { ", "+        if (doc.isSourceFile() && ! doc.checkIfClassFileInSync()) return true; ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e87ad1b6b90f2ee6ee2294cdfdd718b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public synchronized void removeAllWatches() throws DebugException", "signatureAfterChange": "   public void removeAllWatches() throws DebugException", "diff": ["-  public synchronized void removeAllWatches() throws DebugException {", "+  public /* synchronized */ void removeAllWatches() throws DebugException {", "-    ", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50cb4ac26b3a67ea84e0c80f948e7591", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public synchronized void scrollToSource(DebugStackData stackData) throws DebugException", "signatureAfterChange": "   public void scrollToSource(DebugStackData stackData) throws DebugException", "diff": ["-  public synchronized void scrollToSource(DebugStackData stackData) throws DebugException {", "+  public /* synchronized */ void scrollToSource(DebugStackData stackData) throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d562246671855048af5cb9cfef2889", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "0d6a1751a06319b8d446186ea0aafba68239ee0c", "commitAfterChange": "50d54a2cc075d489d4814ce780949e6748ba1350", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "    private void _updateWatches()", "signatureAfterChange": "    private void _updateWatches()", "diff": ["+    if (!isReady() || (_thread == null)) return;", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51c2c708baf49cd66629f999d4c165ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "a7e3e055ae9aaae858bddacb7f1970b753865e99", "commitAfterChange": "d028ff865526d4b7b4597a44ca4c386e858c8df7", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 60, "signatureBeforeChange": "      protected DefaultMutableTreeNode makeFileNode(File f)", "signatureAfterChange": "      protected DefaultMutableTreeNode makeFileNode(File f)", "diff": ["-    n.add(new EmptyTreeNode()); // dummy node so it's not a leaf", "-", "+    if (f.isDirectory()) n.add(new EmptyTreeNode()); // dummy node so it's not a leaf"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5205f9fb9b8f704b9dd5ae7d1f1108be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void currThreadResumed()", "signatureAfterChange": "   public void currThreadResumed()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5294b6895182ec6ee11b076fff6e3afd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,      InterruptedException", "signatureAfterChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,      InterruptedException", "diff": ["-      listener.wait();", "+      while (listener.notDone()) listener.wait();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52a227380ace138cee35507ff7e39cde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public synchronized Vector<DebugThreadData> getCurrentThreadData() throws DebugException", "signatureAfterChange": "   public Vector<DebugThreadData> getCurrentThreadData() throws DebugException", "diff": ["-  public synchronized Vector<DebugThreadData> getCurrentThreadData() throws DebugException {", "+  public /* synchronized */ Vector<DebugThreadData> getCurrentThreadData() throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "564b8b8e83f56712dceeee5942e7465b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f28cc1df1806224e361f5125bf0fdd8c055cbda8", "commitAfterChange": "df2b79c4755a48b6d68cea0053ee5b504fa8b5d0", "methodNumberBeforeChange": 587, "methodNumberAfterChange": 595, "signatureBeforeChange": "          public void interactionEnded()", "signatureAfterChange": "          public void interactionEnded()", "diff": ["+            else if (lastError.startsWith(\"java.lang.OutOfMemoryError\")) {", "+              askToIncreaseSlaveMaxHeap();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58560ec94683df51d74545ab1444f99c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "54a2d5af359edd99cce3e2b74ded93b4c8c0d9e9", "commitAfterChange": "7c8486700bb21647b6fbe2818464471123c8ab80", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "          public InputBox(boolean endOfStream)", "signatureAfterChange": "          public InputBox(boolean endOfStream)", "diff": ["-      for(KeyStroke ks: im.keys()) { _oldInputMap.put(ks, im.get(ks)); }", "+      if (im.keys()!=null) { // im.keys() may be null!", "+        for(KeyStroke ks: im.keys()) { _oldInputMap.put(ks, im.get(ks)); }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58b603b4cbdc8486b6f8492a96bee8e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "commitAfterChange": "ee2a4f62f26e8f47974ad5d674dd24e422820bcc", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private void notifyRegistrationListeners(final OpenDefinitionsDocument odd, final DocManager man)", "signatureAfterChange": "   private void notifyRegistrationListeners(final OpenDefinitionsDocument odd, final DocManager man)", "diff": ["+  // Only used in DocumentCacheTest; must be synchronous for test to succeed.", "-    Utilities.invokeAndWait(new Runnable() {", "-      public void run() { for (RegistrationListener list : _regListeners) { list.registered(odd, man); } }", "-    });", "+    synchronized(_regListeners) {", "+      if (_regListeners.isEmpty()) return; ", "+      Utilities.invokeAndWait(new Runnable() {", "+        public void run() { for (RegistrationListener list : _regListeners) { list.registered(odd, man); } }", "+      });", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58eaf5cb98988998a65df9de21e085b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "d4a2d68c03fa1b918347931c3e594614ce00cce5", "commitAfterChange": "1cda89f41e5a82d37339ff20e08702987c32bbfc", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "   protected static boolean checkDifferentReturnTypes(MethodData md, SymbolData sd, boolean addError, JavaVersion version)", "signatureAfterChange": "   protected static boolean checkDifferentReturnTypes(MethodData md, SymbolData sd, boolean addError, JavaVersion version)", "diff": ["-   */", "+    */", "+        if (matchingMd.hasModifier(\"private\")) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a0f2ea6edeef37241aa23421957e644", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   private int processAll(Lambda<Void, FindResult> findAction, boolean searchAll)", "signatureAfterChange": "   private int processAll(Lambda<Void, FindResult> findAction, boolean searchAll)", "diff": ["+    ", "+    assert EventQueue.isDispatchThread();", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bdc25350989e433022eb4684e112a84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName)", "signatureAfterChange": "   public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName)", "diff": ["-    ", "+    // TODO: should probably log this error, or figure out what causes it", "+    // it does not seem to affect the program negatively, though", "+    if (message.equals(\"Connection refused to host: 127.0.0.1; nested exception is: \\n\" +", "+                       \"\\tjava.net.ConnectException: Connection refused: connect\")) return;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d19fc6e1f4f27a7dbabd9f6c0426fa0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public OpenDefinitionsDocument preloadDocument(Location location)", "signatureAfterChange": "   public OpenDefinitionsDocument preloadDocument(Location location)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e0752e05de7a1a24ccf0370495c56f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "814284d39419cda17539ef3e84c25f9daceecb37", "commitAfterChange": "64a8c66e035bf38023367affc1e8d913a52663ca", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     protected void _updateWithErrors(String failureName, String failureMeaning, SwingDocument doc)       throws BadLocationException", "signatureAfterChange": "     protected void _updateWithErrors(String failureName, String failureMeaning, SwingDocument doc)       throws BadLocationException", "diff": ["-      // Select the first error", "-      getErrorListPane().switchToError(0);", "+      // Select the first error if there are some errors (i.e. does not select if there are only warnings)", "+      if (!getErrorModel().hasOnlyWarnings())", "+        getErrorListPane().switchToError(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b6484fec4125a2646e22c6f232468f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void debuggerStarted()", "signatureAfterChange": "   public void debuggerStarted()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "611952919f1d7aee5a5e7838908aae82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/BrowserHistoryManager.java", "commitBeforeChange": "5fcb38a9e5144c9ef6a799230bac118e680b79fd", "commitAfterChange": "1d939764a7a48ee57c8c9b9e857d49b241cabd3e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public synchronized void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier)", "signatureAfterChange": "      public void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier)", "diff": ["-  public synchronized void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier) {", "+  public void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier) {", "+    ", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61cc7c949631b0cb480dc147d82b05c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/IntegratedMasterSlaveTest.java", "commitBeforeChange": "84a85300cfd775431a96c9067859d46fc9913a39", "commitAfterChange": "db64d6218289f5b8c2c9777bfd38b4160001ceaa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "          protected synchronized void handleSlaveQuit(int status)", "signatureAfterChange": "          protected synchronized void handleSlaveQuit(int status)", "diff": ["-      // 5 letter calls must have occurred, so 'f' should be next", "-      assertEquals(\"last letter returned\", 'f', _letter);", "+      if (_currentTest.equals(\"runTestSequence\")) {", "+        // 5 letter calls must have occurred, so 'f' should be next", "+        assertEquals(\"last letter returned\", 'f', _letter);", "+      }", "-", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650be275caa191892222adf7b4f93178", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "8bb2649bd077e2bf6ccaf611ff49da8ad083e7b7", "commitAfterChange": "eca3b617ca770b1edeca1b781443e3dec4cbba2b", "methodNumberBeforeChange": 567, "methodNumberAfterChange": 569, "signatureBeforeChange": "     public void javadocStarted()", "signatureAfterChange": "     public void javadocStarted()", "diff": ["+      ", "+      assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67d4667c497bbc94c9b8e8c4ad6543d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void stepRequested()", "signatureAfterChange": "   public void stepRequested()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6939cf49237d2c9f4b5898d8faee1a6b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "   public void _toggleBookmark(int pos1, int pos2)", "signatureAfterChange": "   public void _toggleBookmark(int pos1, int pos2)", "diff": ["-    final OpenDefinitionsDocument doc = getActiveDocument();", "-//    assert doc.isReadLocked();", "+    assert EventQueue.isDispatchThread();", "+    final OpenDefinitionsDocument doc = getActiveDocument();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a173277b28fcb89e9a86c49c634d7e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "   public TypeData forStringLiteralOnly(StringLiteral that)", "signatureAfterChange": "   public TypeData forStringLiteralOnly(StringLiteral that)", "diff": ["+    assert symbolTable.get(\"java.lang.String\") != null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a3f8ffef1dd6834d7562d8a7007d216", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDABreakpoint.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public JPDABreakpoint(OpenDefinitionsDocument doc, int offset, int lineNumber, boolean isEnabled, JPDADebugger manager)     throws DebugException", "signatureAfterChange": "   public JPDABreakpoint(OpenDefinitionsDocument doc, int offset, int lineNumber, boolean isEnabled, JPDADebugger manager)     throws DebugException", "diff": ["+    assert EventQueue.isDispatchThread();", "-    catch (BadLocationException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7275791d5a1ac8a3b48c81282d8ba101", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 616, "methodNumberAfterChange": 616, "signatureBeforeChange": "   protected void _enableInteractionsPane()", "signatureAfterChange": "   protected void _enableInteractionsPane()", "diff": ["-    ", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74bb5ca9f7586cb847d267db7e06d143", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void addTopLevelGroupToRoot(InnerNode<?, ItemT> parent)", "signatureAfterChange": "      private void addTopLevelGroupToRoot(InnerNode<?, ItemT> parent)", "diff": ["-    ", "-    synchronized(_model) {", "+    assert EventQueue.isDispatchThread();", "+    synchronized(_model) { // lock for mutation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76053a8ea5fcd157396ea32456baf4db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private void _doCompile(OpenDefinitionsDocument doc, File file)     throws IOException", "signatureAfterChange": "   private void _doCompile(OpenDefinitionsDocument doc, File file)     throws IOException, InterruptedException", "diff": ["-    throws IOException", "+    throws IOException, InterruptedException", "-    doc.startCompile();", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7623ca6d89efa56a265c75e2995c1857", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void testCompileAnyUnsavedButSaveWhenAsked()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileAnyUnsavedButSaveWhenAsked()     throws BadLocationException, IOException, InterruptedException", "diff": ["-    throws BadLocationException, IOException", "+    throws BadLocationException, IOException, InterruptedException", "-    doc.startCompile();", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76ad6854269662d78eb2024cf0996e7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2f4a42f54aaa74c25ba0a929e664640f896ec43a", "commitAfterChange": "d73d2cacf79884db0dae830f87bb3795eb5cd6ef", "methodNumberBeforeChange": 759, "methodNumberAfterChange": 759, "signatureBeforeChange": "   public static void setPopupLoc(Window popup, Component owner)", "signatureAfterChange": "   public static void setPopupLoc(Window popup, Component owner)", "diff": ["-    if (owner != null) {", "+    if ((owner != null) && (owner.isVisible())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77a90a9bca503367558182cfbfd6783b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassMemberChecker.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 24, "signatureBeforeChange": "          @Override public Void visit(MethodDeclaration node)", "signatureAfterChange": "          @Override public Void visit(MethodDeclaration node)", "diff": ["-      DJMethod m = getMethod(node);", "-      TypeContext sigContext = new FunctionSignatureContext(_context, m);", "-      TypeContext bodyContext = new FunctionContext(sigContext, m);", "-      node.getBody().acceptVisitor(new StatementChecker(bodyContext, _opt));", "+      if (node.getBody() != null) {", "+        DJMethod m = getMethod(node);", "+        TypeContext sigContext = new FunctionSignatureContext(_context, m);", "+        TypeContext bodyContext = new FunctionContext(sigContext, m);", "+        node.getBody().acceptVisitor(new StatementChecker(bodyContext, _opt));", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7839a8a278fe55f7780825266496d0ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": "   public void configNewProject() throws IOException", "signatureAfterChange": "   public void configNewProject() throws IOException", "diff": ["+    assert EventQueue.isDispatchThread();", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "783d2d239b192ba0ef404adce703f789", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void addNavigationListener(INavigationListener<? super ItemT> listener)", "signatureAfterChange": "   public void addNavigationListener(INavigationListener<? super ItemT> listener)", "diff": ["-   */", "+    */", "-    synchronized (_model) { navListeners.add(listener); }", "+    assert EventQueue.isDispatchThread();", "+    synchronized (_model) { navListeners.add(listener); }  // locks out mutation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "789b7c7970b8890317be3294d78e785d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 70, "signatureBeforeChange": "   synchronized void currThreadSuspended()", "signatureAfterChange": " void currThreadSuspended()", "diff": ["-  synchronized void currThreadSuspended() {", "+  /* synchronized */ void currThreadSuspended() {", "+    assert EventQueue.isDispatchThread();", "-    catch(DebugException de) {", "-      throw new UnexpectedException(de);", "-    }", "+    catch(DebugException de) { throw new UnexpectedException(de); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c42531b56ec80a3b638c00eb5077e2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorCaretListener.java", "commitBeforeChange": "0d6a1751a06319b8d446186ea0aafba68239ee0c", "commitAfterChange": "50d54a2cc075d489d4814ce780949e6748ba1350", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "   public void updateHighlight(int curPos)", "diff": ["-      // No need to move the caret since it's already here!", "-      _highlightErrorInSource(shouldSelect);", "-", "+      ", "+      if (_errorListPane.shouldShowHighlightsInSource()) {", "+        // No need to move the caret since it's already here!", "+        _highlightErrorInSource(shouldSelect);", "+      }", "+       "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ccf1eeaf97a5ede5c58fc5785d20ea0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 331, "methodNumberAfterChange": 331, "signatureBeforeChange": "     public void preparePrintJob() throws BadLocationException, FileMovedException", "signatureAfterChange": "     public void preparePrintJob() throws BadLocationException, FileMovedException", "diff": ["-      File sourceFile = getFile();", "-      if (sourceFile != null)  fileName = sourceFile.getAbsolutePath();", "+      File sourceFile = getFile();  // single read of _file", "+      if (! AbstractGlobalModel.isUntitled(sourceFile)) fileName = sourceFile.getAbsolutePath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e0a743d2bbe4884196f69501e5463c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "   public void _toggleBookmark(int pos1, int pos2)", "signatureAfterChange": "   public void _toggleBookmark(int pos1, int pos2)", "diff": ["-//    assert doc.isReadLocked();", "+    assert doc.isReadLocked();", "+//    doc.acquireReadLock();  // Must follow readers/writers protocol even in event thread", "+//    finally { doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820e5fcc0e928917c6adedf87b8fb922", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 62, "signatureBeforeChange": "   private synchronized void _updateWatches()", "signatureAfterChange": "   private void _updateWatches()", "diff": ["-  private synchronized void _updateWatches() {", "+  private /* synchronized */ void _updateWatches() {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83ee1ca6452e5e87a388d8819b5eacb5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f743eab51273b837fbfd0fee9aa664f2f031c583", "commitAfterChange": "0ad47f4e9ecbbfc43121de14376bb3d222538453", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "    private void _saveAll()", "signatureAfterChange": "    private void _saveAll()", "diff": ["-      _saveProject();", "+      if(_model.isProjectActive()){", "+        _saveProject();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85427096d9143cdc218b98bbcba53b15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 341, "methodNumberAfterChange": 341, "signatureBeforeChange": "     public boolean modifiedOnDisk()", "signatureAfterChange": "     public boolean modifiedOnDisk()", "diff": ["-      final File f = _file;", "-", "-      if (f != null) ret = (f.lastModified() > _timestamp);", "+      final File f = _file;  // single read of f", "+      if (! AbstractGlobalModel.isUntitled(f)) ret = (f.lastModified() > _timestamp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85ac001a0f7ff57cf6b147f1fa98fe20", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public synchronized boolean hasSuspendedThreads() throws DebugException", "signatureAfterChange": "   public boolean hasSuspendedThreads() throws DebugException", "diff": ["-  public synchronized boolean hasSuspendedThreads() throws DebugException {", "+  public /* synchronized */ boolean hasSuspendedThreads() throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85d3c30230ccbcc6fc6930d590f315b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public void setJUnitInProgress()", "signatureAfterChange": "     public void setJUnitInProgress()", "diff": ["-    /** Puts the error pane into \"junit in progress\" state. */", "+    /** Puts the error pane into \"junit in progress\" state.  Only runs in event thread. */", "+      assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88019967b37aad8155b2a7931fb8c816", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "5fcb38a9e5144c9ef6a799230bac118e680b79fd", "commitAfterChange": "1d939764a7a48ee57c8c9b9e857d49b241cabd3e", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 251, "signatureBeforeChange": "   public void addToBrowserHistory()", "signatureAfterChange": "   public void addToBrowserHistory()", "diff": ["-    assert doc != null;", "+    assert doc != null && EventQueue.isDispatchThread();", "-//    Utilities.invokeLater(new Runnable() { ", "-//      public void run() {   ", "-        Position startPos = null;  // required by javac", "-        Position endPos = null;    // required by javac", "-        File file = FileOps.NULL_FILE;  // required by javac", "-        try {", "-          int pos = doc.getCurrentLocation();", "-          startPos = doc.createPosition(pos);", "-          endPos = doc.createPosition(doc._getLineEndPos(pos));", "-//          file = doc.getFile();", "-        }", "-//        catch (FileMovedException fme) { /* ignore */ }", "-        catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "-        ", "+    Position startPos = null;  // required by javac", "+    Position endPos = null;    // required by javac", "+    File file = FileOps.NULL_FILE;  // required by javac", "+    try {", "+      int pos = doc.getCurrentLocation();", "+      startPos = doc.createPosition(pos);", "+      endPos = doc.createPosition(doc._getLineEndPos(pos));", "+    }", "+    ", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+    ", "-        _browserHistoryManager.addBrowserRegion(new BrowserDocumentRegion(doc, startPos, endPos), _notifier);", "-//      }", "-//    });", "+    _browserHistoryManager.addBrowserRegion(new BrowserDocumentRegion(doc, startPos, endPos), _notifier);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bdf7e31c93acee08e55ccae56c1fe0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 617, "methodNumberAfterChange": 617, "signatureBeforeChange": "   public void commentLines()", "signatureAfterChange": "   public void commentLines()", "diff": ["+    assert EventQueue.isDispatchThread();", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c65339d540b00fe5015d53dae6a12bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public synchronized void resume(DebugThreadData threadData) throws DebugException", "signatureAfterChange": "   public void resume(DebugThreadData threadData) throws DebugException", "diff": ["-  public synchronized void resume(DebugThreadData threadData) throws DebugException {", "+  public /* synchronized */ void resume(DebugThreadData threadData) throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e48790b6176cf2d7c40933f2f22d60a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e90dbd1bb170d6fe2e453ef725d9c5a3af468fcc", "commitAfterChange": "e653942b63325e47383bb429e833afeb308dbf22", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 40, "signatureBeforeChange": "      public void saveProject(String filename) throws IOException", "signatureAfterChange": "   public void saveProject(String filename) throws IOException", "diff": ["+   */", "-    while(odds.hasNext())", "-    {", "+    while(odds.hasNext()){", "-      builder.addSourceFile(doc.getFile());", "+      if (!doc.isUntitled()) {", "+        builder.addSourceFile(doc.getFile());", "+      }", "-    for(int i = 0; i<currentclasspaths.size(); i++)", "-    {", "+    for(int i = 0; i<currentclasspaths.size(); i++){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7a79994b5ea599331a50260a8136c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "420215825e681a0b291c00f3cf7aa39a982faffe", "commitAfterChange": "c657da4404f6681bffc368045343d4bc04e51744", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 109, "signatureBeforeChange": "     public boolean isModifiedSinceSave()", "signatureAfterChange": "     public boolean isModifiedSinceSave()", "diff": ["-      return getDocument().isModifiedSinceSave();", "+      /* if the document is not in the cache, then we know that it's not modified, so", "+       * only check if the DDoc is in the cache */", "+      if(_cache.isDDocInCache(this)){", "+        return getDocument().isModifiedSinceSave();", "+      }else{", "+        return false;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff4749a2b0beef9f5396dd021258989", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public void setPositionAndScroll(int pos)", "signatureAfterChange": "   public void setPositionAndScroll(int pos)", "diff": ["-   */", "+    */", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9356d32a81d017c5125791653313ba2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 676, "methodNumberAfterChange": 676, "signatureBeforeChange": "      public void classFileError(ClassFileError e)", "signatureAfterChange": "      public void classFileError(ClassFileError e)", "diff": ["+      assert EventQueue.isDispatchThread();", "+      ", "-      ", "-      // Not necessarily invoked from event-handling thread!", "-      ", "-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() {", "+", "-//        }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94836721c22dfb46c16548b3673ec31b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public synchronized void resume() throws DebugException", "signatureAfterChange": "   public void resume() throws DebugException", "diff": ["-  public synchronized void resume() throws DebugException {", "+  public /* synchronized */ void resume() throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96df0719bc3426975a63350082628aac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public synchronized void setCurrentThread(DebugThreadData threadData) throws DebugException", "signatureAfterChange": "   public void setCurrentThread(DebugThreadData threadData) throws DebugException", "diff": ["-  public synchronized void setCurrentThread(DebugThreadData threadData) throws DebugException {", "+  public /* synchronized */ void setCurrentThread(DebugThreadData threadData) throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97078e16a8317399759f4801c56307f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public void startCompile() throws IOException", "signatureAfterChange": "     public void startCompile() throws IOException", "diff": ["-    /** Starting compiling this document.  Used only for unit testing */", "-    public void startCompile() throws IOException { _compilerModel.compile(ConcreteOpenDefDoc.this); }", "+    /** Starting compiling this document.  Used only for unit testing.  Only rus in the event thread. */", "+    public void startCompile() throws IOException { ", "+      assert EventQueue.isDispatchThread();", "+      _compilerModel.compile(ConcreteOpenDefDoc.this); ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "973577348f45648e51c2a304f8308272", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "8bb2649bd077e2bf6ccaf611ff49da8ad083e7b7", "commitAfterChange": "eca3b617ca770b1edeca1b781443e3dec4cbba2b", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": "   public void showFindResultsPanel(final FindResultsPanel panel)", "signatureAfterChange": "   public void showFindResultsPanel(final FindResultsPanel panel)", "diff": ["-  /** Shows a find results tab. */", "+  /** Shows a find results tab. Only runs in event thread. */", "+    assert EventQueue.isDispatchThread();", "-    if (! panel.isDisplayed()) {", "-      showTab(panel);", "-    }", "+    if (! panel.isDisplayed()) showTab(panel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98b5c5f22478e836d85fd8c5956c3f11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testRunJUnitUnsavedButSaveWhenAsked()     throws Exception", "signatureAfterChange": "   public void testRunJUnitUnsavedButSaveWhenAsked()     throws Exception", "diff": ["-    doc.startJUnit();", "+    synchronized(listener) {", "+      doc.startJUnit();", "+      listener.wait();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b957f42dd8b040690e5a6470fd0f7ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static int sizeOf(Iterable<?> iter)", "signatureAfterChange": "   public static int sizeOf(Iterable<?> iter)", "diff": ["-      for (Object o : iter) { result++; }", "+      for (Object o : iter) { result++; if (result == Integer.MAX_VALUE) break; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c66cdc8b90907257b6717415adb3007", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/DisplayVisitor.java", "commitBeforeChange": "bc2ff71530c43866f8f779132c88a0e166f012d7", "commitAfterChange": "b07bf619da13edb1c36c3126406ad7908514445f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Void visit(ReturnStatement node)", "signatureAfterChange": "   public Void visit(ReturnStatement node)", "diff": ["-    node.getExpression().acceptVisitor(this);", "+    //Bug fix to allow for \"return;\"", "+    if( node.getExpression() != null )", "+      node.getExpression().acceptVisitor(this);", "+    else", "+      print(\"null\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dac20b5ae76a55173830ee110623860", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void clear()", "signatureAfterChange": "   public void clear()", "diff": ["-  /** Removes all <code>IDocuments</code> from this <code>IDocumentNavigator</code>. */", "-  public void clear() { ", "+  /** Removes all <code>IDocuments</code> from this <code>IDocumentNavigator</code>.  Only executes in event thread. */", "+  public void clear() {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f0531d5160317dae02b90a385713286", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void watchSet(DebugWatchData w)", "signatureAfterChange": "   public void watchSet(DebugWatchData w)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f97e2e08275930c9f429a10fbe0976", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "dd87e87bd7504e54354041075b7fdfd1298dfd10", "commitAfterChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 197, "signatureBeforeChange": "   public void debuggerToggle()", "signatureAfterChange": "   public void debuggerToggle()", "diff": ["-//    if (!debugger.isAvailable()) return;  // Redundant! This test is the first check made by inDebugMode()", "+    if (!debugger.isAvailable()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3fd7a2dbc5b154f608a0db2435f83da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "8d3cdbacfda748aaaf1451c3632bfbbb860b1d39", "commitAfterChange": "69a380647f3d586f130ea02ad1e8381a390045e3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void removeHighlight()", "signatureAfterChange": "   public void removeHighlight()", "diff": ["-  public void removeHighlight() { _definitionsPane.removeErrorHighlight(); }", "+  public void removeHighlight() { ", "+    assert EventQueue.isDispatchThread();", "+    _definitionsPane.removeErrorHighlight(); ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a529d868961cad98438e2024cf35258d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 662, "methodNumberAfterChange": 662, "signatureBeforeChange": "               public void javadocEnded(final boolean success, final File destDir, final boolean allDocs)", "signatureAfterChange": "               public void javadocEnded(final boolean success, final File destDir, final boolean allDocs)", "diff": ["-//      Runnable command = new Runnable() {", "-//        public void run() {", "+      assert EventQueue.isDispatchThread();", "-          // If there is no class name, pass the empty string as a flag.", "-          // We don't want to blow up here.", "+          // If there is no class name, pass the empty string as a flag.  We don't want to blow up here.", "-//        }", "-//      };", "-//      Utilities.invokeLater(command);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5cb4d3e6004d26db32c6adb4f161845", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "c1c9eac4e19bc59469201ee2ac4b0d20897056f9", "commitAfterChange": "8453dc6c4207f1842ab4bcab6f7b87a3005d0d74", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void setVisible(boolean b)", "signatureAfterChange": "   public void setVisible(boolean b)", "diff": ["-    super.setVisible(b);", "-    if (!b) _owner.toFront();", "+    super.setVisible(b);", "+    if (b) {", "+      _textField.requestFocus();", "+    }", "+    else {", "+      _owner.toFront();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6f97196b4e000be1cf1b685b69c3c24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 654, "methodNumberAfterChange": 655, "signatureBeforeChange": "     public void junitStarted()", "signatureAfterChange": "     public void junitStarted()", "diff": ["+      assert EventQueue.isDispatchThread();", "-      ", "-      // Only change GUI from event-dispatching thread", "-//      new ScrollableDialog(null, \"junitStarted(\" + docs + \") called in MainFrame\", \"\", \"\").show();", "-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() {", "-      // new ScrollableDialog(null, \"Ready for hourglassOn in junitStarted\", \"\", \"\").show();", "-      finally { hourglassOff(); }  ", "-//        }", "-//      });", "+      finally { ", "+//        Utilities.show(\"Turning hourglassOff\");", "+        hourglassOff();", "+      }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9ccbf893a871f746e286966ce32f579", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 313, "methodNumberAfterChange": 316, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["+      assert EventQueue.isDispatchThread();", "+//      System.err.println(\"AbstractGlobalModel.saveFileAs called on \" + this);", "+        ", "+//        System.err.println(\"AbstractGlobalModel.saveFileAs.openInOtherDoc = \" + openInOtherDoc);", "-          if(file.exists() && ! file.canWrite()) {", "+          if (file.exists() && ! file.canWrite()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac2d5fdeb5dcc736a62a5099ebc970e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d012414100e088dfd0a2ea6e642cc05f11fbf32b", "commitAfterChange": "762f9487498790edfa8d7b58c3d83cb6592af447", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": "   private void _updateDefScrollRowHeader()", "signatureAfterChange": "   private void _updateDefScrollRowHeader()", "diff": ["-    ", "-    boolean ruleEnabled = DrJava.CONFIG.getSetting(LINEENUM_ENABLED).booleanValue();", "-    ", "-    Iterator scrollPanes = _defScrollPanes.values().iterator();", "-    while (scrollPanes.hasNext()) {  ", "-      JScrollPane scroll = (JScrollPane) scrollPanes.next();", "-      if (scroll != null) {", "-        DefinitionsPane pane = (DefinitionsPane) scroll.getViewport().getView();", "-        if (scroll.getRowHeader() == null || scroll.getRowHeader().getView() == null) {", "-          if (ruleEnabled) {", "-            scroll.setRowHeaderView(new Rule(pane));", "+    if (CodeStatus.DEVELOPMENT) {  // no line enumeration in stable", "+      boolean ruleEnabled = DrJava.CONFIG.getSetting(LINEENUM_ENABLED).booleanValue();", "+      ", "+      Iterator scrollPanes = _defScrollPanes.values().iterator();", "+      while (scrollPanes.hasNext()) {  ", "+        JScrollPane scroll = (JScrollPane) scrollPanes.next();", "+        if (scroll != null) {", "+          DefinitionsPane pane = (DefinitionsPane) scroll.getViewport().getView();", "+          if (scroll.getRowHeader() == null || scroll.getRowHeader().getView() == null) {", "+            if (ruleEnabled) {", "+              scroll.setRowHeaderView(new LineEnumRule(pane));", "+            }", "-        }", "-        else {", "-          if (!ruleEnabled) {", "-            scroll.setRowHeaderView(null);", "+          else {", "+            if (!ruleEnabled) {", "+              scroll.setRowHeaderView(null);", "+            }", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc3074f35cd7f59acbf77a3f1663197", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testCompileActiveSavedAnyUnsavedButSaveWhenAsked()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileActiveSavedAnyUnsavedButSaveWhenAsked()     throws BadLocationException, IOException, InterruptedException", "diff": ["-    throws BadLocationException, IOException", "+    throws BadLocationException, IOException, InterruptedException", "-    doc.startCompile();", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff4865a781b253ba62e626a43b6fc3d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 287, "methodNumberAfterChange": 289, "signatureBeforeChange": "     public void setParentDirectory(File pd)", "signatureAfterChange": "     public void setParentDirectory(File pd)", "diff": ["-      if (_file != null)", "-        throw new IllegalArgumentException(\"The parent directory can only be set for untitled documents\");", "-      _parentDir = pd;  ", "+      synchronized(this) {", "+        if (! AbstractGlobalModel.isUntitled(_file))", "+          throw new IllegalArgumentException(\"The parent directory can only be set for untitled documents\");", "+        _parentDir = pd;  ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "affebbf827dae2d7aaa16e5981aae9e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "aabf32dfcb159caa0bf37490cd0936b3ae5f1fb6", "commitAfterChange": "32543485a6c30402f49deaf8c43253937744fd6f", "methodNumberBeforeChange": 217, "methodNumberAfterChange": 222, "signatureBeforeChange": "       private void _runProject()", "signatureAfterChange": "       private void _runProject()", "diff": ["-    try {", "-      final File f = _model.getMainClass();", "-      if(f != null){", "-        OpenDefinitionsDocument doc = _model.getDocumentForFile(f);", "-        doc.runMain();", "+    if (_model.isProjectActive()){", "+      try {", "+        final File f = _model.getMainClass();", "+        if(f != null){", "+          OpenDefinitionsDocument doc = _model.getDocumentForFile(f);", "+          doc.runMain();", "+        }", "+      }", "+      catch (ClassNameNotFoundException e) {", "+        // Display a warning message if a class name can't be found.", "+        String msg =", "+          \"DrJava could not find the top level class name in the\\n\" +", "+          \"current document, so it could not run the class.  Please\\n\" +", "+          \"make sure that the class is properly defined first.\";", "+        ", "+        JOptionPane.showMessageDialog(MainFrame.this, msg, \"No Class Found\",", "+                                      JOptionPane.ERROR_MESSAGE);", "+      }", "+      catch (FileMovedException fme) {", "+        _showFileMovedError(fme);", "+      }", "+      catch (IOException ioe) {", "+        _showIOError(ioe);", "-    catch (ClassNameNotFoundException e) {", "-      // Display a warning message if a class name can't be found.", "-      String msg =", "-        \"DrJava could not find the top level class name in the\\n\" +", "-        \"current document, so it could not run the class.  Please\\n\" +", "-        \"make sure that the class is properly defined first.\";", "-", "-      JOptionPane.showMessageDialog(MainFrame.this, msg, \"No Class Found\",", "-                                    JOptionPane.ERROR_MESSAGE);", "-    }", "-    catch (FileMovedException fme) {", "-      _showFileMovedError(fme);", "-    }", "-    catch (IOException ioe) {", "-      _showIOError(ioe);", "+    else {", "+      _runMain();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b11ffda1e7c1efc2333d20ad19b20354", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 597, "methodNumberAfterChange": 597, "signatureBeforeChange": "   void _switchDefScrollPane()", "signatureAfterChange": "   void _switchDefScrollPane()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b388fcc5ba1402db1be42c779c646b60", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/PendingRequestManager.java", "commitBeforeChange": "30865706505ac032f7839e76656d4d5fb3416a82", "commitAfterChange": "4893120686ef565e3d3aef4c648604d7a3f2e9fc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "signatureAfterChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "diff": ["+      // Must have been a different class with a matching prefix, ignore it", "+      // since we're not interested in this class.", "+      return;", "+    }", "+    else if (actions.isEmpty()) { "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5d6706d1439b45af2def5aaf51fd132", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 573, "methodNumberAfterChange": 573, "signatureBeforeChange": "     private void _saveAllBeforeProceeding(String message, BooleanOption option, String checkMsg)", "signatureAfterChange": "     private void _saveAllBeforeProceeding(String message, BooleanOption option, String checkMsg)", "diff": ["-     */", "+      */", "-        if (!DrJava.getConfig().getSetting(option).booleanValue()) {", "+        if (! DrJava.getConfig().getSetting(option).booleanValue() && ! Utilities.TEST_MODE) {", "-            new ConfirmCheckBoxDialog(MainFrame.this,", "-                                      \"Must Save All Files to Continue\",", "-                                      message,", "-                                      checkMsg);", "+            new ConfirmCheckBoxDialog(MainFrame.this, \"Must Save All Files to Continue\", message, checkMsg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5e5d7fd5ecf488d83e99168bf88a322", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPane.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 16, "signatureBeforeChange": "   protected void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)", "signatureAfterChange": "   protected void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b91177950750a9bdf4ac6c0cfa48399c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "3c18a1d03b53a699adfbc2df00845e9d60f9d1f5", "commitAfterChange": "4ec6eda5e5d4bd8e2b6e61afae08eb8548f8c4b5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-    KeyStroke ks = KeyStroke.getKeyStrokeForEvent(e);", "-    Action a = KeyBindingManager.Singleton.get(ks);", "-    // Don't perform the action if the keystroke is NULL_KEYSTROKE,", "-    //  which can get generated by some Windows keys", "-    if ((ks != KeyStrokeOption.NULL_KEYSTROKE) && (a != null)) {", "-//      System.out.println(\"Keystroke was null\");", "-      endCompoundEdit();", "-      // Performs the action a", "-      SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "-", "-      // Make sure we don't consume it again", "-      e.consume();", "-    }", "-    else {", "-      // Allows one step undoing of the keystrokes defined on the keymap (e.g. enter, tab, '{', '}', ':').", "-      Keymap km = getKeymap();", "-", "-      if (km.isLocallyDefined(ks) || km.isLocallyDefined(KeyStroke.getKeyStroke(ks.getKeyChar()))) {", "-        // We're breaking up compound edits at the granularity of \"enter\"'s.", "-        if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "-          endCompoundEdit();", "-        }", "-", "-        CompoundUndoManager undoMan = _doc.getUndoManager();", "-        int key = undoMan.startCompoundEdit();", "-//        System.out.println(\"supering 1 \" + isAltF4);", "-        super.processKeyEvent(e);", "-        undoMan.endCompoundEdit(key);", "-//        e.consume();", "+    if(_mainFrame.getAllowKeyEvents()){", "+      KeyStroke ks = KeyStroke.getKeyStrokeForEvent(e);", "+      Action a = KeyBindingManager.Singleton.get(ks);", "+      // Don't perform the action if the keystroke is NULL_KEYSTROKE,", "+      //  which can get generated by some Windows keys", "+      if ((ks != KeyStrokeOption.NULL_KEYSTROKE) && (a != null)) {", "+        //      System.out.println(\"Keystroke was null\");", "+        endCompoundEdit();", "+        // Performs the action a", "+        SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "+        ", "+        // Make sure we don't consume it again", "+        e.consume();", "-        // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down", "-        // and fixes bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when", "-        // the alt key is down.", "-        if ((((e.getModifiers() & InputEvent.META_MASK) != 0) || ((e.getModifiers() & InputEvent.ALT_MASK) != 0))", "-              && e.getKeyCode() == KeyEvent.VK_UNDEFINED) {", "-//          System.out.println(\"not supering 1 \" + isAltF4);", "-          return;", "-        }", "-", "-        // The following conditional fixes ease of use issue 693253 by checking if a typed event is", "-        // shift-delete or shift-backspace and then performing a delete or backspace operation,", "-        // respectively", "-        if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {", "-          int newModifiers = e.getModifiers() & ~(InputEvent.SHIFT_MASK);", "-", "-          KeyStroke newKs = KeyStroke.getKeyStroke(ks.getKeyCode(), newModifiers, ks.isOnKeyRelease());", "-          String name = KeyBindingManager.Singleton.getName(newKs);", "-", "-          if (name != null && (name.equals(\"Delete Previous\") || name.equals(\"Delete Next\"))) {", "+        // Allows one step undoing of the keystrokes defined on the keymap (e.g. enter, tab, '{', '}', ':').", "+        Keymap km = getKeymap();", "+        ", "+        if (km.isLocallyDefined(ks) || km.isLocallyDefined(KeyStroke.getKeyStroke(ks.getKeyChar()))) {", "+          // We're breaking up compound edits at the granularity of \"enter\"'s.", "+          if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "-            // We are unsure about the third and fourth arguments (e and e.getSource()); we simply", "-            // reuse the original values", "-            SwingUtilities.notifyAction(KeyBindingManager.Singleton.get(newKs), newKs, e, e.getSource(), newModifiers);", "-            e.consume();", "-//            System.out.println(\"not supering 2 \" + isAltF4);", "+          }", "+          ", "+          CompoundUndoManager undoMan = _doc.getUndoManager();", "+          int key = undoMan.startCompoundEdit();", "+          //        System.out.println(\"supering 1 \" + isAltF4);", "+          super.processKeyEvent(e);", "+          undoMan.endCompoundEdit(key);", "+          //        e.consume();", "+        }", "+        else {", "+          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down", "+          // and fixes bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when", "+          // the alt key is down.", "+          if ((((e.getModifiers() & InputEvent.META_MASK) != 0) || ((e.getModifiers() & InputEvent.ALT_MASK) != 0))", "+                && e.getKeyCode() == KeyEvent.VK_UNDEFINED) {", "+            //          System.out.println(\"not supering 1 \" + isAltF4);", "-        }", "-", "-        // If the KeyEvent is not a pressed event, process it before we do", "-        // granular undo or _inCompoundEdit may get set incorrectly.", "-        // This code breaks Alt-F4, and may break other system keybindings", "-        // since the event is consumed by us.  For now, just check Alt-F4.", "-        if (e.getID() != KeyEvent.KEY_TYPED) {", "-//          System.out.println(\"supering 2 \" + isAltF4);", "-//          boolean isAltF4 = e.getKeyCode() == KeyEvent.VK_F4 && (KeyEvent.ALT_MASK & e.getModifiers()) != 0;", "-//          if (!isAltF4) {", "-          super.processKeyEvent(e);", "-//            e.consume();", "-//          }", "-          return;", "-        }", "-", "-        // backspace deletes twice without this check, overrides other keystrokes", "-        // that use the mask modifier", "-        if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\b') {", "-          int _keyval = (int) e.getKeyChar();", "-          if (_keyval >= 32 && _keyval <= 126) {", "-            CompoundUndoManager undoMan = _doc.getUndoManager();", "-            if (!_inCompoundEdit) {", "-              _inCompoundEdit = true;", "-              _compoundEditKey = undoMan.startCompoundEdit();", "-              getUndoAction().updateUndoState();", "-              getRedoAction().updateRedoState();", "-              //super.processKeyEvent(e);", "+          ", "+          // The following conditional fixes ease of use issue 693253 by checking if a typed event is", "+          // shift-delete or shift-backspace and then performing a delete or backspace operation,", "+          // respectively", "+          if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {", "+            int newModifiers = e.getModifiers() & ~(InputEvent.SHIFT_MASK);", "+            ", "+            KeyStroke newKs = KeyStroke.getKeyStroke(ks.getKeyCode(), newModifiers, ks.isOnKeyRelease());", "+            String name = KeyBindingManager.Singleton.getName(newKs);", "+            ", "+            if (name != null && (name.equals(\"Delete Previous\") || name.equals(\"Delete Next\"))) {", "+              endCompoundEdit();", "+              // We are unsure about the third and fourth arguments (e and e.getSource()); we simply", "+              // reuse the original values", "+              SwingUtilities.notifyAction(KeyBindingManager.Singleton.get(newKs), newKs, e, e.getSource(), newModifiers);", "+              e.consume();", "+              //            System.out.println(\"not supering 2 \" + isAltF4);", "+              return;", "-//            else {", "-//              UndoableEdit lastEdit = undoMan.getNextUndo();", "-//              lastEdit.die();", "-//              _compoundEditKey = undoMan.startCompoundEdit();", "-//              super.processKeyEvent(e);", "-//              undoMan.addEdit(lastEdit);", "-//              undoMan.endCompoundEdit(_compoundEditKey);", "-//            }", "-//          System.out.println(\"supering 3 \" + isAltF4);", "-          super.processKeyEvent(e);", "+          ", "+          // If the KeyEvent is not a pressed event, process it before we do", "+          // granular undo or _inCompoundEdit may get set incorrectly.", "+          // This code breaks Alt-F4, and may break other system keybindings", "+          // since the event is consumed by us.  For now, just check Alt-F4.", "+          if (e.getID() != KeyEvent.KEY_TYPED) {", "+            //          System.out.println(\"supering 2 \" + isAltF4);", "+            //          boolean isAltF4 = e.getKeyCode() == KeyEvent.VK_F4 && (KeyEvent.ALT_MASK & e.getModifiers()) != 0;", "+            //          if (!isAltF4) {", "+            super.processKeyEvent(e);", "+            //            e.consume();", "+            //          }", "+            return;", "+          }", "+          ", "+          // backspace deletes twice without this check, overrides other keystrokes", "+          // that use the mask modifier", "+          if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\b') {", "+            int _keyval = (int) e.getKeyChar();", "+            if (_keyval >= 32 && _keyval <= 126) {", "+              CompoundUndoManager undoMan = _doc.getUndoManager();", "+              if (!_inCompoundEdit) {", "+                _inCompoundEdit = true;", "+                _compoundEditKey = undoMan.startCompoundEdit();", "+                getUndoAction().updateUndoState();", "+                getRedoAction().updateRedoState();", "+                //super.processKeyEvent(e);", "+              }", "+              //            else {", "+              //              UndoableEdit lastEdit = undoMan.getNextUndo();", "+              //              lastEdit.die();", "+              //              _compoundEditKey = undoMan.startCompoundEdit();", "+              //              super.processKeyEvent(e);", "+              //              undoMan.addEdit(lastEdit);", "+              //              undoMan.endCompoundEdit(_compoundEditKey);", "+              //            }", "+            }", "+            //          System.out.println(\"supering 3 \" + isAltF4);", "+            super.processKeyEvent(e);", "+          }", "+          //        else {", "+          //          e.consume();", "+          //          _inCompoundEdit = false;", "+          //        }", "-//        else {", "-//          e.consume();", "-//          _inCompoundEdit = false;", "-//        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b999b381ff212601d5f32452ed4a2b9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    public void insertChar(char ch)", "signatureAfterChange": "    public void insertChar(char ch)", "diff": ["-        _insertBrace(\"\" + ch);", "+        _insertBrace(String.valueOf(ch));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9dce26ebbae6b76f2168ff120959d8f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "3bb525675df17c5cd50695a90ffe7d8bb2eb200c", "commitAfterChange": "cb572b3617cad32fd1949d7534520be983606d43", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 229, "signatureBeforeChange": "      public void resetUndoManager()", "signatureAfterChange": "      public void resetUndoManager()", "diff": ["-      getDocument().resetUndoManager();", "+      // if it's not in the cache, the undo manager will be ", "+      // reset when it's reconstructed", "+      if(_cache.isDDocInCache(this)){", "+        getDocument().resetUndoManager();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beee67e9eddf9f008879a315f7ee6ffe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   private boolean _shouldIgnore(int foundOffset, OpenDefinitionsDocument odd)", "signatureAfterChange": "   private boolean _shouldIgnore(int foundOffset, OpenDefinitionsDocument odd)", "diff": ["-   */", "+    */", "+    ", "+    assert EventQueue.isDispatchThread();", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c29323f21745d7ced38cf856fd9f74ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public synchronized void step(StepType type) throws DebugException", "signatureAfterChange": "   public void step(StepType type) throws DebugException", "diff": ["-  public synchronized void step(StepType type) throws DebugException {", "+  public /* synchronized */ void step(StepType type) throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a488055146eafd9b8e2be086b94982", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void nonCurrThreadDied()", "signatureAfterChange": "   public void nonCurrThreadDied()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c48d55602b40f227aa6cc6639ae544e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void breakpointReached(Breakpoint bp)", "signatureAfterChange": "   public void breakpointReached(Breakpoint bp)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71ed6f470e09b1a450eee17720f36e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 265, "signatureBeforeChange": "   public void addToBrowserHistory(boolean before)", "signatureAfterChange": "   public void addToBrowserHistory(boolean before)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cebf50ed189863669aabf43993bd101c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void setProjectRoot(File root)", "signatureAfterChange": "   public void setProjectRoot(File root)", "diff": ["-  public void setProjectRoot(File root) { _projRoot = root; }", "+  /** Assumes that root.getParentFile != null */", "+  public void setProjectRoot(File root) { ", "+    _projectRoot = root; ", "+    assert root.getParentFile() != null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cffc454c6ece96d108e3cf76e778063b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/Utilities.java", "commitBeforeChange": "739371db1261b11c3be5fd70233012a49b45b7ca", "commitAfterChange": "cd3fdc4192308881ec8f5fad639265e225a75848", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static void clearEventQueue(boolean newEvents)", "signatureAfterChange": "   public static void clearEventQueue(boolean newEvents)", "diff": ["+    assert ! EventQueue.isDispatchThread();", "-    } while(newEvents && (null!=q.peekEvent()));", "+    } while (newEvents && (null != q.peekEvent()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d05810d1c1db3ae71e1520f1703fc66e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "commitAfterChange": "71f0cebe149c327097ea40ca09774e0c57cdec3a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private boolean _javadoc_1_3(String[] args, String[] classpath)     throws IOException, ClassNotFoundException, InterruptedException", "signatureAfterChange": "   private boolean _javadoc_1_3(String[] args, String[] classpath)     throws IOException, ClassNotFoundException, InterruptedException", "diff": ["-      ((CompilerError[])(errors.toArray(new CompilerError[0])), getter);", "+      ((CompilerError[])(errors.toArray(new CompilerError[errors.size()])), getter);", "-    return (errors.size() == 0);", "+    return _javadocErrorModel.hasOnlyWarnings();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d24dce6772d457d8b51f6d50890c34ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testCompileAllDifferentSourceRoots()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileAllDifferentSourceRoots()     throws BadLocationException, IOException, InterruptedException", "diff": ["-    throws BadLocationException, IOException", "+    throws BadLocationException, IOException, InterruptedException", "-    _model.compileAll();", "+    synchronized(listener) {", "+      _model.compileAll();", "+      listener.wait();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3062a1a848e8a28e1e9e3cb0fb845e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "commitAfterChange": "c2cccf3d2cd557fff7d01a0111e1dc7df943b427", "methodNumberBeforeChange": 483, "methodNumberAfterChange": 483, "signatureBeforeChange": "     public void currThreadDied()", "signatureAfterChange": "     public void currThreadDied()", "diff": ["+      assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4071589ff0257731b52f260255f9986", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public void removeNavigationListener(INavigationListener<? super ItemT> listener)", "signatureAfterChange": "   public void removeNavigationListener(INavigationListener<? super ItemT> listener)", "diff": ["-   */", "+    */", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d416106fbf9c397006628e42d44da6c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "22b4c39d718130f293a6ada596d425525ecbc6e8", "commitAfterChange": "ed15f1e3933f222801a436b129bc84e5a740d057", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public CompilerInterface[] getAvailableCompilers()", "diff": ["-        availableCompilers.add(compiler);", "+        if (compiler.isAvailable()) {", "+          availableCompilers.add(compiler);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4d2829a01cf3d258b25ba691456df82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public synchronized boolean isCurrentThreadSuspended() throws DebugException", "signatureAfterChange": "   public boolean isCurrentThreadSuspended() throws DebugException", "diff": ["-  public synchronized boolean isCurrentThreadSuspended() throws DebugException {", "+  public /* synchronized */ boolean isCurrentThreadSuspended() throws DebugException {", "+    assert EventQueue.isDispatchThread();", "-    return hasSuspendedThreads() && !hasRunningThread();", "+    return hasSuspendedThreads() && ! hasRunningThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5e68acdb90cf05d39533c15288a87ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "17590567cb9f06269b33249dad955c39164a9028", "commitAfterChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)     throws DebugException", "signatureAfterChange": "   private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)     throws DebugException", "diff": ["+    if (!_suspendedThreads.isEmpty()) {", "+      _switchToSuspendedThread();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6ef07ec9d6739b9e739793fc69da14", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDABreakpoint.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void setEnabled(boolean isEnabled)", "signatureAfterChange": "   public void setEnabled(boolean isEnabled)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddd6955c1b04ec5c129e79f2c9dae72a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0acb22a1f5b2329a270795e5839a4690952252ed", "commitAfterChange": "b6bfdc97713285768c8b922127b436d974f9f1e4", "methodNumberBeforeChange": 762, "methodNumberAfterChange": 762, "signatureBeforeChange": "   public synchronized void removeModalWindowAdapter(Window w)", "signatureAfterChange": "   public void removeModalWindowAdapter(Window w)", "diff": ["-  public synchronized void removeModalWindowAdapter(Window w) {", "+  public /* synchronized */ void removeModalWindowAdapter(Window w) {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de3256b3685cb69d4083ed4c96f119cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 473, "methodNumberAfterChange": 473, "signatureBeforeChange": "   private void _storePositionInfo()", "signatureAfterChange": "   private void _storePositionInfo()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03c166fc2646c2f8723cf40279d4cf2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0acb22a1f5b2329a270795e5839a4690952252ed", "commitAfterChange": "b6bfdc97713285768c8b922127b436d974f9f1e4", "methodNumberBeforeChange": 721, "methodNumberAfterChange": 721, "signatureBeforeChange": "   public synchronized void drop(DropTargetDropEvent dropTargetDropEvent)", "signatureAfterChange": "   public void drop(DropTargetDropEvent dropTargetDropEvent)", "diff": ["-  public synchronized void drop(DropTargetDropEvent dropTargetDropEvent) {", "+  public /* synchronized */ void drop(DropTargetDropEvent dropTargetDropEvent) {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e09ce46bdffc1264e3fbd08b67ef2110", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0acb22a1f5b2329a270795e5839a4690952252ed", "commitAfterChange": "b6bfdc97713285768c8b922127b436d974f9f1e4", "methodNumberBeforeChange": 753, "methodNumberAfterChange": 753, "signatureBeforeChange": "   public synchronized void installModalWindowAdapter(final Window w,                                                      final Lambda<Void,WindowEvent> toFrontAction,                                                      final Lambda<Void,WindowEvent> closeAction)", "signatureAfterChange": "   public void installModalWindowAdapter(final Window w, final Lambda<Void,WindowEvent> toFrontAction,                                         final Lambda<Void,WindowEvent> closeAction)", "diff": ["-  public synchronized void installModalWindowAdapter(final Window w,", "-                                                     final Lambda<Void,WindowEvent> toFrontAction,", "-                                                     final Lambda<Void,WindowEvent> closeAction) {", "+  public void installModalWindowAdapter(final Window w, final Lambda<Void,WindowEvent> toFrontAction,", "+                                        final Lambda<Void,WindowEvent> closeAction) {", "+    assert EventQueue.isDispatchThread();", "+    ", "-    if (_modalWindowAdapterOwner==null) {", "+    if (_modalWindowAdapterOwner == null) {", "-      // modal listener is already owned by another window", "-      // create a window adapter that just performs the closeAction.", "-      // it does not perform the toFrontAction, since that can lead to", "-      // two windows bouncing back and forth, both trying to stay on top.", "+      /* The modal listener is already owned by another window.  The code block creates a window adapter that performs ", "+       * closeActions but not toFrontActions because the latter could generate an endless loop with this window ", "+       * competing with the modal listener window to stay on top.", "+       */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e110257b7bb698af463f1908983f27f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "34ce8483136d91f9eff46f1971dc8a612f363868", "commitAfterChange": "cfd4689ec89c3908ea0306a11510c85ea5436de0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   static boolean handleCommandLineArgs(String[] args)", "signatureAfterChange": "   static boolean handleCommandLineArgs(String[] args)", "diff": ["-   */", "+    */", "+      else if (arg.equals(\"-new\")) _forceNewInstance = true;", "+      ", "-", "+    ", "-        ", "+    ", "-", "+    ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e25b27f7de9fbca2d5cac4e8c3efded3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "   void _gotoFileUnderCursor()", "signatureAfterChange": "   void _gotoFileUnderCursor()", "diff": ["-    if ((docs==null) || (docs.size() == 0)) return; // do nothing", "+    if ((docs == null) || (docs.size() == 0)) return; // do nothing", "-    odd.readLock();", "+    odd.acquireReadLock();", "-        if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "+        if (! Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "-        if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "+        if (! Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "-    finally { odd.readUnlock(); }", "+    finally { odd.releaseReadLock(); }", "-        _gotoFileDialog.setVisible(true);", "+        /* The following predicate suppresses the display of the dialog during unit testing.  If the unit test is revised", "+         * to confirm that the dialog is displayed, this test must be removed. */", "+        if (MainFrame.this.isVisible()) _gotoFileDialog.setVisible(true);  // predicate suppresses display in unit tests"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27071e28fefc9d4f142dbce634715f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 618, "methodNumberAfterChange": 618, "signatureBeforeChange": "   public void uncommentLines()", "signatureAfterChange": "   public void uncommentLines()", "diff": ["+    assert EventQueue.isDispatchThread();", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e46147b86be333276e5b91248f791788", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "1a00210ae1e41be9246fee06894f37a248cf99ce", "commitAfterChange": "ab8f72f86c6d8f3288d1ca14d0e3a244649e4202", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void setUp() throws Exception", "signatureAfterChange": "   public void setUp() throws Exception", "diff": ["+    debug.logStart();", "+    _log.log(\"Setting up \" + this);", "+    _model = new TestGlobalModel();", "-        try {", "-          debug.logStart();", "-          _log.log(\"Setting up \" + this);", "-          _model = new TestGlobalModel();", "-          // ensure that the JVM is ready to run; the GlobalModelJUnitTest test cases sometimes received a", "-          // late _junitModel.junitJVMReady() notification after the unit tests had already been started, and", "-          // that was interpreted as trying to start JUnit tests while tests were already running.", "-          _model.ensureJVMStarterFinished();", "-          // create an interactions pane which is essential to the function of the interactions model; ", "-          _interactionsController =  // InteractionsController constructor creates an interactions pane", "-            new InteractionsController(_model.getInteractionsModel(), _model.getSwingInteractionsDocument(),", "-                                       new Runnable() { public void run() { } });", "-          _log.log(\"Global model created for \" + this);", "-          DrJava.getConfig().resetToDefaults();", "-          String user = System.getProperty(\"user.name\");", "-          ", "-          _tempDir = /* IOUtil.createAndMarkTempDirectory */ FileOps.createTempDirectory(\"DrJava-test-\" + user /*, \"\"*/);", "-//          System.err.println(\"Temp Directory is \" + _tempDir.getAbsolutePath());", "-          ", "-          _model.setResetAfterCompile(false);", "-          _log.log(\"Completed (GlobalModelTestCase) set up of \" + this);", "-          debug.logEnd();", "-          ", "-//          _model.getOpenDefinitionsDocuments().get(0).saveFile(new FileSelector(new File(_tempDir, \"blank document\")));", "-        }", "+        // ensure that the JVM is ready to run; the GlobalModelJUnitTest test cases sometimes received a", "+        // late _junitModel.junitJVMReady() notification after the unit tests had already been started, and", "+        // that was interpreted as trying to start JUnit tests while tests were already running.", "+        _model.ensureJVMStarterFinished();", "+        // create an interactions pane which is essential to the function of the interactions model; ", "+        _interactionsController =  // InteractionsController constructor creates an interactions pane", "+          new InteractionsController(_model.getInteractionsModel(),", "+                                     _model.getSwingInteractionsDocument(),", "+                                     new Runnable() { public void run() { } });", "+        _log.log(\"Global model created for \" + this);", "+        DrJava.getConfig().resetToDefaults();", "+        String user = System.getProperty(\"user.name\");", "+        try { _tempDir = FileOps.createTempDirectory(\"DrJava-test-\" + user /*, \"\"*/); }", "+        ", "+    Utilities.clearEventQueue(); // Let some pending event queue operations complete", "+    _model.setResetAfterCompile(false);", "+    ", "+    _log.log(\"Completed (GlobalModelTestCase) set up of \" + this);", "+    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4a8e4f6e82f0152f6c5e921ccb6d2f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "72a0d444dc62ca781c9b91acdee71819a6f4cdd3", "commitAfterChange": "7144a04f8cef658fdd6189df9de3fd59eb678bec", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public FindReplacePanel(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplacePanel(MainFrame frame, SingleDisplayModel model)", "diff": ["+        assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5d008186948eada1468248eb43e6c8d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void regionAdded(Breakpoint bp, int index)", "signatureAfterChange": "   public void regionAdded(Breakpoint bp, int index)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7e304e777fe92fe08a1362b0a13da86", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public synchronized Vector<DebugStackData> getCurrentStackFrameData() throws DebugException", "signatureAfterChange": "   public Vector<DebugStackData> getCurrentStackFrameData() throws DebugException", "diff": ["-  public synchronized Vector<DebugStackData> getCurrentStackFrameData() throws DebugException {", "+  public /* synchronized */ Vector<DebugStackData> getCurrentStackFrameData() throws DebugException {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea4487fe5323f639c7316fed053596ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/SingleDisplayModel.java", "commitBeforeChange": "07e4da5973e0c6fb136b88bb51b79becbac0e22f", "commitAfterChange": "2fb658b48f226ac294dbfa5245389f7e3e0f2a45", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public String getDisplayFilename(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public String getDisplayFilename(OpenDefinitionsDocument doc)", "diff": ["-    // Remove \".java\"", "-    int extIndex = filename.lastIndexOf(\".java\");", "-    if (extIndex > 0) {", "-      filename = filename.substring(0, extIndex);", "+    // Remove \".java\" if at the end of name", "+    if (filename.endsWith(\".java\")) {", "+      int extIndex = filename.lastIndexOf(\".java\");", "+      if (extIndex > 0) {", "+        filename = filename.substring(0, extIndex);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb91117581fa94eb2348d5e259620aae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void regionChanged(Breakpoint bp, int index)", "signatureAfterChange": "   public void regionChanged(Breakpoint bp, int index)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec4687721f86ea9872c594a6c6ead7fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "1e5237b2401d25a04c08b7b54162568a6d55c836", "commitAfterChange": "81f7bc68ef7285bacd5689ea0a54ea5647d9a1d8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public static void saveFile(FileSaver fileSaver) throws IOException", "signatureAfterChange": "   public static void saveFile(FileSaver fileSaver) throws IOException", "diff": ["-    if (!file.canWrite()) {", "+    // file.canWrite() is false if file.exists() is false", "+    // but we want to be able to save a file that doesn't", "+    // yet exist.", "+    if (file.exists() && !file.canWrite()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecbf6fcae228e5931a809649c5f769f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void debuggerShutdown()", "signatureAfterChange": "   public void debuggerShutdown()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edad6f8508f40f3e208ca9cacfd90d88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public synchronized void shutdown()", "signatureAfterChange": "   public void shutdown()", "diff": ["-  public synchronized void shutdown() {", "+  public /* synchronized */ void shutdown() {", "+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edeb98022ec59f532b31f18d1656fcb8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 318, "methodNumberAfterChange": 319, "signatureBeforeChange": "     public boolean isUntitled()", "signatureAfterChange": "     public boolean isUntitled()", "diff": ["-    public boolean isUntitled() { return _file == null; }", "+    public boolean isUntitled() { return AbstractGlobalModel.isUntitled(_file); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee8b1e176a80e7d35715d09dad22d827", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "62a60c4b746d2a0603d2c223e7e3b1d46d413a58", "commitAfterChange": "87398b58408451c65d21071c7d35ec479ae703e4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public static File getCanonicalFile(File f)", "signatureAfterChange": "   public static File getCanonicalFile(File f)", "diff": ["-    try { if (f.exists()) return f.getCanonicalFile(); }", "-    catch(IOException e) { /* do nothing */ }", "-    finally { return f.getAbsoluteFile(); }", "+    try { ", "+      if (f.exists()) return f.getCanonicalFile();", "+      else return f.getAbsoluteFile();", "+    }", "+    catch(IOException e) { return f.getAbsoluteFile(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeee98622bfca71fef15f4bbd8853b5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "8d3cdbacfda748aaaf1451c3632bfbbb860b1d39", "commitAfterChange": "69a380647f3d586f130ea02ad1e8381a390045e3", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   protected void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)", "signatureAfterChange": "   protected void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "effb573aa1f62a3d79b66a9b2f28e948", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void regionRemoved(Breakpoint bp)", "signatureAfterChange": "   public void regionRemoved(Breakpoint bp)", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1072ecc904d7f8fee52995f68bf5e84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "d61b8181e3991377c3e72e5da1d438e3d26d3479", "commitAfterChange": "a8ba898ce33911122e91ee2c93e5825d2f8c0e22", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public abstract String getConsoleInput();", "signatureAfterChange": "   public String getConsoleInput()", "diff": ["-  public abstract String getConsoleInput();", "+  public String getConsoleInput() {", "+    return _inputListener.getConsoleInput();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1b29058901cbb3ad0ae19b326105017", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractDJPane.java", "commitBeforeChange": "8d3cdbacfda748aaaf1451c3632bfbbb860b1d39", "commitAfterChange": "69a380647f3d586f130ea02ad1e8381a390045e3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected void _removePreviousHighlight()", "signatureAfterChange": "   protected void _removePreviousHighlight()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2519dd91c2c70279325493708177879", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "a7b492b5dc0c5b51f07f6d1e45c42a6f55e8cb91", "commitAfterChange": "5096aaab648cea3686054749f4edbb0813185db1", "methodNumberBeforeChange": 422, "methodNumberAfterChange": 423, "signatureBeforeChange": "          public void interpreterExited(final int status)", "signatureAfterChange": "          public void interpreterExited(final int status)", "diff": ["-      // Only show prompt if option is set", "-      if (DrJava.getConfig().getSetting(INTERACTIONS_EXIT_PROMPT).booleanValue()) {", "+      // Only show prompt if option is set and not in TEST_MODE", "+      if (DrJava.getConfig().getSetting(INTERACTIONS_EXIT_PROMPT).booleanValue() && ", "+          ! Utilities.TextAreaMessageDialog.TEST_MODE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4749be72632350ff040c7e02bcf6d53", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "420215825e681a0b291c00f3cf7aa39a982faffe", "commitAfterChange": "c657da4404f6681bffc368045343d4bc04e51744", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 140, "signatureBeforeChange": "      private void _saveProject()", "signatureAfterChange": "      private void _saveProject()", "diff": ["-        _openProjectHelper(file);", "+        if(!(_model.getDocumentNavigator() instanceof JTreeSortNavigator)){", "+          _openProjectHelper(file);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f53851cb3c3c3a68fbb025a70c264174", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "34165d14e4d7d5138ad316dc07c21ed2c5c60ba7", "commitAfterChange": "6df23b9d947a754084cff460e34d203b0d81fd48", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void endCompoundEdit(int key)", "signatureAfterChange": "   public void endCompoundEdit(int key)", "diff": ["-      if (!_compoundEditInProgress()) {", "-        super.addEdit(compoundEdit);", "-        _notifyUndoHappened();", "-      }", "-      else {", "-        _compoundEdits.get(0).addEdit(compoundEdit);", "+      if (compoundEdit.canUndo()) {", "+        if (!_compoundEditInProgress()) {", "+          super.addEdit(compoundEdit);", "+          _notifyUndoHappened();", "+        }", "+        else {", "+          _compoundEdits.get(0).addEdit(compoundEdit);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f621435ab97239b2021cd09b7fc305c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugEventNotifier.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void threadStarted()", "signatureAfterChange": "   public void threadStarted()", "diff": ["+    assert EventQueue.isDispatchThread();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6f1543263fbcefdf51ca0518c6c083a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void testNonTestCaseError() throws Exception", "signatureAfterChange": "   public void testNonTestCaseError() throws Exception", "diff": ["-    doc.startJUnit();", "+    synchronized(listener) {", "+      doc.startJUnit();", "+      listener.wait();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb81d0d41d3155812932166451468281", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "4ddd7404761b70fbc7f3b729484fc360047df6c1", "commitAfterChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public int _findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "signatureAfterChange": "   public int _findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "diff": ["-    // assert isReadLocked();", "+     assert EventQueue.isDispatchThread();", "-//    try {      ", "-//    synchronized(_reduced) {", "+", "-//    }  // end synchronized", "-//    }", "-//    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fce0631537059beddfa6e3154233671a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "930b1ef6cc279650a085c7c6499b1b57cb240018", "commitAfterChange": "73b3ce3968c13472938fea3d36b496150c938bd2", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["-      // add listener to debug manager", "-      _model.getDebugManager().setListener(new UIDebugListener());", "+      if (_model.getDebugManager() != null) {", "+        // add listener to debug manager", "+        _model.getDebugManager().addListener(new UIDebugListener());", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdf1218692636a6de9de5506f22e9534", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "364d0b19a9e3896eddcd174b6cb5aa4a53e74f1f", "commitAfterChange": "65d59a6eb5c83a25b9e6bfdf698fd61ca6d2f695", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 134, "signatureBeforeChange": "     public void activeDocumentChanged(OpenDefinitionsDocument active)", "signatureAfterChange": "     public void activeDocumentChanged(OpenDefinitionsDocument active)", "diff": ["+      // Update FileChoosers' directory", "+      // Update title and position", "-      try {", "-        active.revertIfModifiedOnDisk();", "-      } catch (IOException e) {", "-        _showIOError(e);", "+      // Check if modified (but only if we're not closing all files)", "+      if (!_model.isClosingAllFiles()) {", "+        try {", "+          active.revertIfModifiedOnDisk();", "+        } catch (IOException e) {", "+          _showIOError(e);", "+        }", "-      if(_findReplace.isDisplayed()) {", "+      ", "+      // Change Find/Replace to the new defpane", "+      if (_findReplace.isDisplayed()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fea9c2df71347d467bbbbf7148e32d65", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "a33beea01f3d2263a618fa7843cb52ddfdaa4ccf", "commitAfterChange": "2b371f46cbe5fba581bc2ddd38ce1509ce9a6d65", "methodNumberBeforeChange": 582, "methodNumberAfterChange": 584, "signatureBeforeChange": "   protected void _disableInteractionsPane()", "signatureAfterChange": "   protected void _disableInteractionsPane()", "diff": ["-    // Only change GUI from event-dispatching thread", "-//    Runnable command = new Runnable() {", "-//      public void run() {", "+    assert EventQueue.isDispatchThread();", "-//      }", "-//    };", "-//    Utilities.invokeLater(command);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff256bb06934bf29601a8b7bd8153248", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public void startCompile() throws IOException", "signatureAfterChange": "     public void startCompile() throws IOException", "diff": ["-    /** Starting compiling this document.  Used only for unit testing */", "-    public void startCompile() throws IOException { _compilerModel.compile(ConcreteOpenDefDoc.this); }", "+    /** Starting compiling this document.  Used only for unit testing.  Only rus in the event thread. */", "+    public void startCompile() throws IOException { ", "+      assert EventQueue.isDispatchThread();", "+      _compilerModel.compile(ConcreteOpenDefDoc.this); ", "+    }"]}], "num": 22923}
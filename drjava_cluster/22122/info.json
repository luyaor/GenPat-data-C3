{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "753bf4bc167af52141ccc4448e0f8627", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a61c955d796700f4e89668f2b99ab7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "e664df55ae0a7bd09b3050ad4027139ea59836cd", "commitAfterChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "diff": ["-      TreeClass c = new TreeClass(context.makeAnonymousClassName(), null, node,", "-                                  new TreeClassLoader(context.getClassLoader(), opt), opt);", "+      TreeClassLoader loader = new TreeClassLoader(context.getClassLoader(), opt);", "+      TreeClass c = new TreeClass(context.makeAnonymousClassName(), null, node, loader, opt);", "-      ClassMemberChecker checker = new ClassMemberChecker(new ClassContext(context, c), opt);", "-      checker.checkClassSignatures(node.getMembers());", "-      checker.checkBodies(node.getMembers());", "-      ", "+      ClassChecker checker = new ClassChecker(c, loader, context, opt);", "+      checker.initializeClassSignatures(node);", "+      checker.checkSignatures(node);", "+      checker.checkBodies(node);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e730022e7765e96ea598f11e0284a3f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "e664df55ae0a7bd09b3050ad4027139ea59836cd", "commitAfterChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     @Override public Type visit(AnonymousAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousAllocation node)", "diff": ["-      TreeClass c = new TreeClass(context.makeAnonymousClassName(), null, node,", "-                                  new TreeClassLoader(context.getClassLoader(), opt), opt);", "+      TreeClassLoader loader = new TreeClassLoader(context.getClassLoader(), opt);", "+      TreeClass c = new TreeClass(context.makeAnonymousClassName(), null, node, loader, opt);", "-      ClassMemberChecker checker = new ClassMemberChecker(new ClassContext(context, c), opt);", "-      checker.checkClassSignatures(node.getMembers());", "-      checker.checkBodies(node.getMembers());", "+      ClassChecker checker = new ClassChecker(c, loader, context, opt);", "+      checker.initializeClassSignatures(node);", "+      checker.checkSignatures(node);", "+      checker.checkBodies(node);"]}], "num": 22122}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ef6d5830dde03150d28419e0cf61c99", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66cd410c34018ad4f20d4005889fdd69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "\r     \r     public void test_isAssignable()", "signatureAfterChange": "          public void test_isAssignable()", "diff": ["-    \r", "-    public void test_isAssignable() {\r", "-      MethodData md = new MethodData(\"Overwritten\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));\r", "-      MethodData md2 = new MethodData(\"Overwriting\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));\r", "-\r", "-      //tests a wide variety of possibilities, but not all possibilities.\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md.setMav(_protectedMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md.setMav(_privateMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md.setMav(_packageMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md2.setMav(_protectedMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md2.setMav(_privateMav);\r", "-      assertFalse(\"Should not be assignable\", _isAssignable(md, md2));\r", "-      md2.setMav(_packageMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      \r", "-    }\r", "+    ", "+    public void test_isAssignable() {", "+      MethodData md = new MethodData(\"Overwritten\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData md2 = new MethodData(\"Overwriting\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+", "+      //tests a wide variety of possibilities, but not all possibilities.", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md.setMav(_protectedMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md.setMav(_privateMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md.setMav(_packageMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md2.setMav(_protectedMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md2.setMav(_privateMav);", "+      assertFalse(\"Should not be assignable\", _isCompatible(md, md2));", "+      md2.setMav(_packageMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d658563dac91acad758ca2f27f3c3d5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/CompletionMonitorTest.java", "commitBeforeChange": "4c6ea82220432e241db0b4fb1cb40b44b6d98377", "commitAfterChange": "82896652cf54077fb09a0c01380b5de955346d36", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testRealSignal() throws InterruptedException", "signatureAfterChange": "      public void testRealSignal() throws InterruptedException", "diff": ["-    assertFalse(as.isSignalled());", "+    assertFalse(as.isSignaled());", "-    as.ensureSignalled();", "+    as.ensureSignaled();", "-    assertTrue(as.isSignalled());", "+    assertTrue(as.isSignaled());", "-    assertTrue(as.isSignalled());", "-    as.ensureSignalled(); // should not block", "+    assertTrue(as.isSignaled());", "+    as.ensureSignaled(); // should not block", "-    assertFalse(as.isSignalled());", "+    assertFalse(as.isSignaled());", "-    try { as.ensureSignalled(); fail(\"Monitor should not be signalled\"); }", "+    try { as.ensureSignaled(); fail(\"Monitor should not be signalled\"); }"]}], "num": 14020}
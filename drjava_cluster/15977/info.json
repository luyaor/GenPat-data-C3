{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81d80651777157a0194bd07280b87b91", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e24e630e2d06a22b0855f50d2b1f46d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistryTest.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testLimitAllAtOnce()", "signatureAfterChange": "   public void testLimitAllAtOnce()", "diff": ["-   */", "+  /** Tests that list of available compilers effectively is restricted when all default compilers are not available. */", "-    assertEquals(\"Number of available compilers should be 1 \" +", "-                   \"because all real compilers are restricted.\",", "-                 1,", "+    assertEquals(\"Number of available compilers should be 1 because all real compilers are restricted.\", 1,", "-    assertEquals(\"Only available compiler should be NoCompilerAvailable.ONLY\",", "-                 NoCompilerAvailable.ONLY,", "+    assertEquals(\"Only available compiler should be NoCompilerAvailable.ONLY\", NoCompilerAvailable.ONLY,", "-    assertEquals(\"Active compiler\",", "-                 NoCompilerAvailable.ONLY,", "-                 _registry.getActiveCompiler());", "+    assertEquals(\"Active compiler\",  NoCompilerAvailable.ONLY, _registry.getActiveCompiler());", "-    assertEquals(\"DrJava.java should not see an available compiler\",", "-                 false,", "-                 DrJava.hasAvailableCompiler());", "+    /* The following test is commented out because DrJava uses the ToolsJarLoader to look for a compiler in the plausible", "+     * locations.  The ONLY way to force it not to find a compiler would be to move tools.jar to a nonstandard location in", "+     * the build environment which is a terrible idea.", "+     */   ", "+//    assertEquals(\"DrJava.java should not see an available compiler\", false, DrJava.hasAvailableCompiler());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ea3831cb367942f3d7a6af559a8a3f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "commitAfterChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testCompileAllFailsDifferentSourceRoots()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException", "diff": ["-  public void testCompileAllFailsDifferentSourceRoots()", "-    throws BadLocationException, IOException", "-  {", "+  public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException {", "+", "-", "-    CompileShouldFailListener listener = new CompileShouldFailListener();", "-    _model.addListener(listener);", "-    _model.getCompilerModel().compileAll();", "+    ", "+    _compileDone = false;", "+    _model.addListener(_failListener);", "+    CompilerModel cm = _model.getCompilerModel();", "+    cm.compileAll();", "+    _waitCompileDone();", "+    ", "-    assertEquals(\"Should have 2 compiler errors\", 2,", "-                 _model.getCompilerModel().getNumErrors());", "-    listener.checkCompileOccurred();", "+    assertEquals(\"Should have 2 compiler errors\", 2, _model.getCompilerModel().getNumErrors());", "+    _failListener.checkCompileOccurred();", "-    assertEquals(_name() + \"Class file exists after failing compile (1)\",", "-                 false,", "-                 compiled.exists());", "+    assertEquals(_name() + \"Class file exists after failing compile (1)\", false, compiled.exists());", "-    assertEquals(_name() + \"Class file exists after failing compile (2)\",", "-                 false,", "-                 compiled2.exists());", "-    _model.removeListener(listener);", "+    assertEquals(_name() + \"Class file exists after failing compile (2)\", false, compiled2.exists());", "+    _model.removeListener(_failListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4ebc56f4d0f47e00b2d2ea7027f7731", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testResetConsole()     throws DocumentAdapterException, InterruptedException", "signatureAfterChange": "   public void testResetConsole() throws DocumentAdapterException, InterruptedException", "diff": ["-   */", "-  public void testResetConsole()", "-    throws DocumentAdapterException, InterruptedException", "-  {", "+  /** Checks that reset console works. */", "+  public void testResetConsole() throws DocumentAdapterException, InterruptedException {", "-        synchronized(this) {", "+        synchronized(_interactionDoneLock) {", "-          this.notify();", "+          _interactionDone = true;", "+          _interactionDoneLock.notify();", "-      public void consoleReset() {", "-        consoleResetCount++;", "-      }", "+      public void consoleReset() { consoleResetCount++; }", "-    assertEquals(\"Length of console text\",", "-                 0,", "-                 _model.getConsoleDocument().getDocLength());", "+    assertEquals(\"Length of console text\", 0, _model.getConsoleDocument().getDocLength());", "-", "-    synchronized(listener) {", "+    _interactionDone = false;", "+    synchronized(_interactionDoneLock) {", "-      listener.wait();  // notified on interactionEnded", "+      _interactionDoneLock.wait();  // notified on interactionEnded", "-    assertEquals(\"Length of console text\",", "-                 1,", "-                 _model.getConsoleDocument().getDocLength());", "+    assertEquals(\"Length of console text\", 1, _model.getConsoleDocument().getDocLength());", "-    assertEquals(\"Length of console text\",", "-                 0,", "-                 _model.getConsoleDocument().getDocLength());", "+    assertEquals(\"Length of console text\", 0, _model.getConsoleDocument().getDocLength());"]}], "num": 15977}
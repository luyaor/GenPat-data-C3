{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "531ad1ecc11edba060e54bb8be4bf845", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "180d3410f8bc59ac0bee653cae329dca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/HistorySaveDialog.java", "commitBeforeChange": "f7d7f9408f2057a9b6a01f331a339bb27027bc95", "commitAfterChange": "03dd354632fbfc12bf279640160bfd934404dc39", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public HistorySaveDialog (MainFrame frame, FileSaveSelector selector, String history)", "signatureAfterChange": "      public HistorySaveDialog (MainFrame frame)", "diff": ["-  public HistorySaveDialog (MainFrame frame, FileSaveSelector selector, String history) {", "-    _frame = frame;", "-    _selector = selector;", "-    _history = history;", "-    ", "-    Container content = this.getContentPane();", "+  ", "+  public HistorySaveDialog (MainFrame frame) {", "+    _dialog = new JDialog(frame,\"Save Interactions History\", true);    ", "+    Container content = _dialog.getContentPane();", "-    _textArea.append(_history);", "-    _saveButton = new JButton(\"Save\");", "-    _saveButton.addActionListener(_saveAction);", "-    _cancelButton = new JButton(\"Cancel\");", "-    _cancelButton.addActionListener(_cancelAction);", "+    JButton _saveButton = new JButton(\"Save\"),", "+      _cancelButton = new JButton(\"Cancel\");", "+    _cancelButton.addActionListener(_cancelListener);", "+    _saveButton.addActionListener(_saveListener);", "-    this.setTitle(\"Save Interactions History\");", "-    this.setSize(400,300);", "-    this.setLocation(300,300);", "+    _dialog.setSize(400,300);", "+    _dialog.setLocationRelativeTo(frame);", "-    _textScroll = new JScrollPane(_textArea,", "-                                  JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "-                                  JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "-    ", "-    _buttonPanel = new JPanel();", "-    _buttonPanel.setLayout(new BoxLayout(_buttonPanel, BoxLayout.X_AXIS));", "-    _buttonPanel.add(Box.createGlue());", "-    _buttonPanel.add(_saveButton);", "+    JScrollPane _textScroll = ", "+      new BorderlessScrollPane(_textArea,", "+                               JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,", "+                               JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "+    JPanel scrollWrapper = new JPanel(new BorderLayout(0,5));", "+    scrollWrapper.setBorder(new EmptyBorder(5,5,0,5));", "+    scrollWrapper.add(new JLabel(\"Make your editing changes, and then click \\\"Save\\\".\"),BorderLayout.NORTH);", "+    scrollWrapper.add(_textScroll,BorderLayout.CENTER);", "+    JPanel bottomPanel = new JPanel(new BorderLayout());", "+    JPanel _buttonPanel = new JPanel(new GridLayout(1,0,5,5));", "+", "+    _buttonPanel.add(_saveButton);", "+    bottomPanel.add(_buttonPanel,BorderLayout.EAST);", "+    bottomPanel.setBorder(new EmptyBorder(5,5,5,5));", "+    content.add(scrollWrapper, BorderLayout.CENTER);", "+    content.add(bottomPanel, BorderLayout.SOUTH);", "-    content.add(_textScroll, BorderLayout.CENTER);", "-    content.add(_buttonPanel, BorderLayout.SOUTH);", "-    ", "-    this.show();    ", "+    _dialog.getRootPane().setDefaultButton(_saveButton);", "+    _textArea.requestDefaultFocus();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3854377e07430cac68f357e213d9f5ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "8a3aaf6e3fe6fafb27249a8ad4b2c013ef4ae05a", "commitAfterChange": "102797244429ae58868d0037b49467f5a00bbd6a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "              private void _setupStackTraceFrame()", "signatureAfterChange": "              private void _setupStackTraceFrame()", "diff": ["-      _stackFrame = new JFrame(\"JUnit Error Stack Trace\");", "+      JDialog _dialog = new JDialog(_frame,\"JUnit Error Stack Trace\",false);", "+      _stackFrame = _dialog;", "-      JScrollPane scroll = new JScrollPane(_stackTextArea, ", "-                                           JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "-                                           JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "+      JScrollPane scroll = new ", "+        BorderlessScrollPane(_stackTextArea, ", "+                             JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "+                             JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "-      Action closeAction = new AbstractAction(\"Close\") {", "+      ActionListener closeListener = new ActionListener() {", "-      JButton closeButton = new JButton(closeAction);", "+      JButton closeButton = new JButton(\"Close\");", "+      closeButton.addActionListener(closeListener);", "+      closePanel.setBorder(new EmptyBorder(5,5,0,0));", "-            ", "-      _stackFrame.getContentPane().setLayout(new BorderLayout());", "-      _stackFrame.getContentPane().add(scroll, BorderLayout.CENTER);", "-      _stackFrame.getContentPane().add(closePanel, BorderLayout.SOUTH);", "-      _stackFrame.setSize(600, 500);", "-      ", "+      JPanel cp = new JPanel(new BorderLayout());", "+      _dialog.setContentPane(cp);", "+      cp.setBorder(new EmptyBorder(5,5,5,5));", "+      cp.add(scroll, BorderLayout.CENTER);", "+      cp.add(closePanel, BorderLayout.SOUTH);", "+      JPanel topPanel = new JPanel(new GridLayout(0,1,0,5));", "+      topPanel.setBorder(new EmptyBorder(0,0,5,0));", "+      topPanel.add(_fileLabel);", "+      topPanel.add(_testLabel);", "+      topPanel.add(_errorLabel);", "+      cp.add(topPanel, BorderLayout.NORTH);", "+      _dialog.setSize(600, 500);", "+      /**", "-                        (screenSize.height - frameSize.height) / 2);", "-      ", "+                              (screenSize.height - frameSize.height) / 2);", "+      **/", "+      // initial location is relative to parent (MainFrame)", "+      _dialog.setLocationRelativeTo(_frame);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e72021b474292f9f440b0880ccb9ead", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/HelpFrame.java", "commitBeforeChange": "b4e48852da60211c31b0141438d3f04d6c627263", "commitAfterChange": "4402afa3c67a362593909f349f9fbb816e477bed", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public HelpFrame()", "signatureAfterChange": "   public HelpFrame()", "diff": ["-    super(\"Help\");", "+    super(\"Help on using DrJava\");", "-    _contentsDocPane.addHyperlinkListener(this);", "-    JScrollPane contentsScroll = new JScrollPane(_contentsDocPane);", "+    _contentsDocPane.addHyperlinkListener(_linkListener);", "+    JScrollPane contentsScroll = new BorderlessScrollPane(_contentsDocPane);", "-    _mainDocPane.addHyperlinkListener(this);", "-    JScrollPane mainScroll = new JScrollPane(_mainDocPane);", "+    _mainDocPane.addHyperlinkListener(_linkListener);", "+    JScrollPane mainScroll = new BorderlessScrollPane(_mainDocPane);", "-    ", "+    JPanel tempPanel = new JPanel(new GridLayout(1,1));", "+    tempPanel.setBorder(new EmptyBorder(0,5,0,5));", "+    tempPanel.add(_splitPane);", "+    // _splitPane.setBorder(new CompoundBorder(new EmptyBorder(0,5,0,5),_splitPane.getBorder()));", "+    _backButton = new JButton(_backAction);", "+    _forwardButton = new JButton(_forwardAction);", "+    _backAction.setEnabled(false);", "+    _forwardAction.setEnabled(false);", "-    ", "+    _closePanel.setBorder(new EmptyBorder(5,5,5,5)); // padding", "+    _navPane = new JPanel();", "+    _navPane.setLayout(new BoxLayout(_navPane,BoxLayout.X_AXIS));", "+    _navPane.add(_backButton);", "+    _navPane.add(_forwardButton);", "+    _navPane.setBorder(new EmptyBorder(5,5,5,5));", "-    cp.add(_splitPane, BorderLayout.CENTER);", "+    cp.add(_navPane, BorderLayout.NORTH);", "+    cp.add(tempPanel, BorderLayout.CENTER);", "-    URL indexUrl = this.getClass().getResource(HELP_PATH + CONTENTS_PAGE);", "+    URL indexUrl = HelpFrame.class.getResource(HELP_PATH + CONTENTS_PAGE);", "-    }", "-    else {", "+    } else {", "-    URL introUrl = this.getClass().getResource(HELP_PATH + HOME_PAGE);", "+    URL introUrl = HelpFrame.class.getResource(HELP_PATH + HOME_PAGE);", "-      displayPage(introUrl);", "-    }", "-    else {", "+      _history = new HistoryList(introUrl);", "+      _displayPage(introUrl);", "+    } else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3b896023acb21896745e28f4ebbbf8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewVersionPopup.java", "commitBeforeChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "commitAfterChange": "442c59b932709a9e16b8bf4afb9e7306f5a80d8b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "      @SuppressWarnings(\"fallthrough\")   protected String[] getMessage(Box<Boolean> availableRef)", "signatureAfterChange": "      @SuppressWarnings(\"fallthrough\")   protected String[] getMessage(Box<Boolean> availableRef)", "diff": ["+    Box<String> weeklyString = new SimpleBox<String>(\"\");", "+    Box<Date> weeklyTime = new SimpleBox<Date>(new Date(0));", "+      case 3: if (getTargetFile().toString().endsWith(\".jar\")) { // only consider weekly builds if using *.jar file", "+        newVersion |= checkNewWeeklyVersion(weeklyString,weeklyTime); // fall-through required, not a mistake", "+      }", "-          String newestType = \"\";", "-          if (stableTime.value().after(betaTime.value())) {", "-            // stable newer than beta", "-            if (stableTime.value().after(devTime.value())) {", "-              // stable newer than beta and dev", "-              _newestVersionString = stableString.value();", "-              newestType = \"stable \";", "-            }", "-            else {", "-              // stable newer than beta, but dev is even newer", "-              _newestVersionString = devString.value();", "-              newestType = \"development \";              ", "-            }", "-          }", "-          else {", "-            // beta newer than stable", "-            if (betaTime.value().after(devTime.value())) {", "-              // beta newer than stable and dev", "-              _newestVersionString = betaString.value();", "-              newestType = \"beta \";", "-            }", "-            else {", "-              // beta newer than stable, but dev is even newer", "-              _newestVersionString = devString.value();", "-              newestType = \"development \";              ", "-            }", "-          }", "-          ", "+          TreeMap<Date,String[]> versionSorter = new TreeMap<Date,String[]>();", "+          versionSorter.put(stableTime.value(),new String[] {\"stable release\",      stableString.value() });", "+          versionSorter.put(betaTime.value(),  new String[] {\"beta release\",        betaString.value() });", "+          versionSorter.put(devTime.value(),   new String[] {\"development release\", devString.value() });", "+          versionSorter.put(weeklyTime.value(),new String[] {\"weekly build\",        weeklyString.value() });", "+          String newestType = versionSorter.get(versionSorter.lastKey())[0];", "+          _newestVersionString = versionSorter.get(versionSorter.lastKey())[1];", "+", "-            \"A new \"+newestType+\"version has been found.\",", "+            \"A new \"+newestType+\" has been found.\","]}], "num": 15033}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bd0d6b30cbc4cfa383ef66989918480", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5194904d6688935460cf72bf69a2db4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "commitAfterChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 190, "signatureBeforeChange": "    final public TypeParameter TypeParameter() throws ParseException", "signatureAfterChange": "    final public TypeParameter TypeParameter() throws ParseException", "diff": ["-      jj_la1[211] = jj_gen;", "+      jj_la1[210] = jj_gen;", "-          //if(hook == null){", "-        if(bound instanceof ReferenceType){", "-          {if (true) return new TypeParameter(_loc(first), name, (ReferenceType)bound);}", "-        } else {", "-          {if (true) throw new ParseException(\"Primitives are not allowed as bound\"+", "-                                   \"types, and array types are temporarily disabled due to a \"+", "-                                   \"DynamicJava AST hierarchy bug!\");}", "-        }", "-          //} else { // process wildcard", "-          //  throw new ParseException(\"DynamicJava Parser does not support wildcards yet\");", "-          //}", "-", "+      if(bound instanceof ReferenceType){", "+        {if (true) return new TypeParameter(_loc(first), name, (ReferenceType)bound);}", "+      } else {", "+        {if (true) throw new ParseException(\"Primitives are not allowed as bound\"+", "+                                 \"types, and array types are temporarily disabled due to a \"+", "+                                 \"DynamicJava AST hierarchy bug!\");}", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee5b0d1cf9c0429b29aaac5deb441d78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/MintCompiler.java", "commitBeforeChange": "c1c33f1060f9022135b7f75a813b69c4045f6b46", "commitAfterChange": "0de85ca2b785d7ad489463f9a174133a91014910", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public int compile(String[] args,                        List<File> files,                        Context context,                        List<JavaFileObject> fileObjects,                        Iterable<? extends Processor> processors)", "signatureAfterChange": "     public int compile(String[] args,                        List<File> files,                        Context context,                        List<JavaFileObject> fileObjects,                        Iterable<? extends Processor> processors)", "diff": ["-            if (log.expectDiagKeys != null) {", "-                if (log.expectDiagKeys.size() == 0) {", "-                    Log.printLines(log.noticeWriter, \"all expected diagnostics found\");", "-                    return EXIT_OK;", "-                } else {", "-                    Log.printLines(log.noticeWriter, \"expected diagnostic keys not found: \" + log.expectDiagKeys);", "-                    return EXIT_ERROR;", "-                }", "-            }", "+            // TODO: Is this necessary?", "+//            if (log.expectDiagKeys != null) {", "+//                if (log.expectDiagKeys.size() == 0) {", "+//                    Log.printLines(log.noticeWriter, \"all expected diagnostics found\");", "+//                    return EXIT_OK;", "+//                } else {", "+//                    Log.printLines(log.noticeWriter, \"expected diagnostic keys not found: \" + log.expectDiagKeys);", "+//                    return EXIT_ERROR;", "+//                }", "+//            }"]}], "num": 5723}
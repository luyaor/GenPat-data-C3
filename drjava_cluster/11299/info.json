{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2be9b7bda4f83cc78fd9c21a3674aab", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2635e8a3ef7738d3501b34d4aaafdcff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void dispose() throws RemoteException", "signatureAfterChange": "   protected void dispose()", "diff": ["+   */", "+  protected void dispose() {", "+    while (!_monitor.compareAndSet(State.FRESH, State.DISPOSED)) {", "+      debug.logValue(\"Waiting for FRESH state\", \"current state\", _monitor.value());", "+      try { _monitor.ensureState(State.FRESH); }", "+      catch (InterruptedException e) { throw new UnexpectedException(e); }", "+    }", "+    debug.log(\"Entered DISPOSED state\");", "+    try { UnicastRemoteObject.unexportObject(this, true); }", "+    catch (NoSuchObjectException e) { error.log(e); }", "-  /** Withdraws RMI exports for this. */", "-  public void dispose() throws RemoteException {", "-    _log.log(this + \".dispose() called; slaveRemote is \" + _slave);", "-    if (_startupInProgress) _log.log(this + \".dispose() is KILLing startUp in process; dying slave reference does not yet exist\");", "-    SlaveRemote dyingSlave;", "-    synchronized(_masterJVMLock) {", "-      _masterStub = null;", "-      if (_monitorThread != null) _monitorThread = null;", "-      dyingSlave = _slave;  // save value of _slave in case it is not null", "-      _slave = null;", "-      ", "-      // Withdraw RMI exports", "-      // Slave in process of starting will die because master is inaccessible.", "-      _log.log(this + \".dispose() UNEXPORTing \" + this);", "-      UnicastRemoteObject.unexportObject(this, true);", "-    }", "-    if (dyingSlave != null) { ", "-      _log.log(this + \".dispose() QUITing \" + dyingSlave);", "-      dyingSlave.quit();  // unsynchronized; may hasten the death of dyingSlave", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a63918b757b2198e2b80c0bd57090d5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "314c962d7f6ed2c6b00f5edc6e764b582b016016", "commitAfterChange": "3b2b8c4279d3d3c19a0254256362d4d46aeeddaf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException", "signatureAfterChange": "   public ProjectFileIR parse(File projFile)      throws IOException, FileNotFoundException, MalformedProjectFileException", "diff": ["-  public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException {", "-    BufferedReader r = new BufferedReader(new FileReader(projFile));", "-    /* we actually want the path to the project file, not the file itself */", "-    if( projFile.isFile() ) {", "-      projFile = projFile.getParentFile();", "-    SourceTag st = TagFactory.makeSourceTag(projFile, r);", "-    ResourceTag rt = TagFactory.makeResourceTag(projFile, r);", "-    BuildDirTag mt = TagFactory.makeBuildDirTag(projFile, r);", "-    ClasspathTag ct = TagFactory.makeClasspathTag(projFile, r);", "-    JarTag jt = TagFactory.makeJarTag(projFile, r);", "+   */", "+  public ProjectFileIR parse(File projFile) ", "+    throws IOException, FileNotFoundException, MalformedProjectFileException{", "+    List<SEList> forest = null;", "+    try {", "+      forest = SExpParser.parse(projFile);", "+    }", "+    catch(SExpParseException e) {", "+      throw new MalformedProjectFileException(\"Parse Error: \" + e.getMessage());", "+    }", "-    return new ProjectFileIRImpl(st, rt, mt, ct, jt);", "+    ProjectFileIRImpl pfir = new ProjectFileIRImpl();", "+    ", "+    try{", "+      for(SEList exp : forest) {", "+        evaluateExpression(exp, pfir);", "+      }", "+    }catch(PrivateProjectException e){", "+      throw new MalformedProjectFileException(\"Parse Error: \" + e.getMessage());", "+    }", "+    ", "+    return pfir;", "+  }"]}], "num": 11299}
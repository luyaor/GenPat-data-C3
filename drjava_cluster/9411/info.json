{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "816e0852d1b47d6025c0eb7aebee5730", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917a4604337d5db28c01f9f0d3c7dd7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "54ea28bb82d3e1f546423de8d56e416e257bade5", "commitAfterChange": "d11247645bb07934951554afdf566907fa77ed82", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public void testExactClassName() throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   public void testExactClassName() throws BadLocationException, ClassNameNotFoundException", "diff": ["-    ", "-    //", "-//    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-//    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "-//    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-//    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"/*Test$Outer$Middle$1*/\";", "+    exp1   = \"Temp.Test$Outer$Middle$1\";", "+    exp2   = \"1\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"Test$Outer$Middle$1\\\"\";", "+    exp1   = \"Temp.Test$Outer$Middle$1\";", "+    exp2   = \"1\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"/*Test$9*/\";", "+    exp1   = \"Temp.Test$9\";", "+    exp2   = \"9\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"Test$9\\\"\";", "+    exp1   = \"Temp.Test$9\";", "+    exp2   = \"9\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"/*Test$10*/\";", "+    exp1   = \"Temp.Test$10\";", "+    exp2   = \"10\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"Test$10\\\"\";", "+    exp1   = \"Temp.Test$10\";", "+    exp2   = \"10\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c702c3f1cf3b4971a9cc70bac4391808", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "065b1e3954d46e1086ba2f867744163daf14462d", "commitAfterChange": "54ea28bb82d3e1f546423de8d56e416e257bade5", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public void testExactClassName() throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   public void testExactClassName() throws BadLocationException, ClassNameNotFoundException", "diff": ["+    ", "+    //", "+", "+    substr = \"abstract void feeDo()\";", "+    exp1   = \"Temp.Fee\";", "+    exp2   = \"Fee\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"class FeeConc extends Fee\";", "+    exp1   = \"Temp.Fee\";", "+    exp2   = \"Fee\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"/*Fee$FeeConc*/\";", "+    exp1   = \"Temp.Fee$FeeConc\";", "+    exp2   = \"FeeConc\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"FeeConc/feeDo\\\"\";", "+    exp1   = \"Temp.Fee$FeeConc\";", "+    exp2   = \"FeeConc\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"FeeConc/feeAct\\\"\";", "+    exp1   = \"Temp.Fee$FeeConc\";", "+    exp2   = \"FeeConc\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"FeeConc/s\\\"\";", "+    exp1   = \"Temp.Fee$FeeConc\";", "+    exp2   = \"FeeConc\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+//    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+//    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"FeeConc/t\\\"\";", "+    exp1   = \"Temp.Fee$FeeConc\";", "+    exp2   = \"FeeConc\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"FeeConc/u\\\"\";", "+    exp1   = \"Temp.Fee$FeeConc\";", "+    exp2   = \"FeeConc\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"/*Fee$1*/\";", "+    exp1   = \"Temp.Fee$1\";", "+    exp2   = \"1\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"Fee$1/feeDo\\\"\";", "+    exp1   = \"Temp.Fee$1\";", "+    exp2   = \"1\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"Fee$1/feeAct\\\"\";", "+    exp1   = \"Temp.Fee$1\";", "+    exp2   = \"1\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"Fee$1/s\\\"\";", "+    exp1   = \"Temp.Fee$1\";", "+    exp2   = \"1\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+//    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+//    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"Fee$1/t\\\"\";", "+    exp1   = \"Temp.Fee$1\";", "+    exp2   = \"1\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+", "+    substr = \"\\\"Fee$1/u\\\"\";", "+    exp1   = \"Temp.Fee$1\";", "+    exp2   = \"1\";", "+    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "+    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);"]}], "num": 9411}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa468622c995b5ec5797d9f19bdafb8e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a312b12708b2f4d79c28e55c61148c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "                public void testForNumericAssignmentExpressionOnly()", "signatureAfterChange": "      public void testForNumericAssignmentExpressionOnly()", "diff": ["-      NumericAssignmentExpression nae = new MinusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      NumericAssignmentExpression nae = ", "+        new MinusAssignmentExpression(SourceInfo.NO_INFO, ", "+                                      new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")),", "+                                      new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());  // Generated duplicate error message", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type int.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      ", "-      //if rhs not instance data, give error", "+      assertEquals(\"Should be 2 errors\", 2, errors.size());  // Generated a duplicate error message", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type int.  Perhaps you meant to create \" +", "+                   \"a new instance of int\", ", "+                   errors.get(1).getFirst());", "+      // if rhs not instance data, give error", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use the type name char on the left hand side of a numeric assignment (-=, %=, *=, /=).  Perhaps you meant to create a new instance of char\", errors.getLast().getFirst());", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use the type name char on the left hand side of a numeric assignment (-=, %=, *=, /=).\" +", "+                   \"  Perhaps you meant to create a new instance of char\", ", "+                   errors.get(2).getFirst());", "-      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), _etc.forNumericAssignmentExpressionOnly(nae, _sd2.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), ", "+                   _etc.forNumericAssignmentExpressionOnly(nae, _sd2.getInstanceData(), ", "+                                                           SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The left side of this expression is not a number.  Therefore, you cannot apply \" + ", "+                   \"a numeric assignment (-=, %=, *=, /=) to it\", ", "+                   errors.get(3).getFirst());", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericAssignmentExpressionOnly(nae, SymbolData.INT_TYPE.getInstanceData(), _sd2.getInstanceData()));", "-      assertEquals(\"Should be 6 errors\", 6, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Should return int instance\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericAssignmentExpressionOnly(nae, ", "+                                                           SymbolData.INT_TYPE.getInstanceData(), ", "+                                                           _sd2.getInstanceData()));", "+      assertEquals(\"Should still be 5 errors\", 5, errors.size());  // Generated a duplicate error message", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The right side of this expression is not a number.  Therefore, you cannot apply \" +", "+                   \"a numeric assignment (-=, %=, *=, /=) to it\", ", "+                   errors.get(4).getFirst());", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericAssignmentExpressionOnly(nae, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 7 errors\", 7, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type int with something of type double\", errors.getLast().getFirst());", "+      assertEquals(\"Should return int instance\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericAssignmentExpressionOnly(nae, ", "+                                                           SymbolData.INT_TYPE.getInstanceData(), ", "+                                                           SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should be 6 errors\", 6, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type int with something of \" +", "+                   \"type double\", ", "+                   errors.get(5).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbf277f984f3fb16600c591ac6bbefcc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "                     public void testForSimpleAssignmentExpressionOnly()", "signatureAfterChange": "                     public void testForSimpleAssignmentExpressionOnly()", "diff": ["-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Should only be 1 error\", 1, errors.size());  // Generated error is duplicate", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forSimpleAssignmentExpressionOnly(sae, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a value to the type double.  Perhaps you meant to create a new instance of double\", errors.get(2).getFirst());", "+      assertEquals(\"Should return double instance\", ", "+                   SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forSimpleAssignmentExpressionOnly(sae, ", "+                                                          SymbolData.DOUBLE_TYPE, ", "+                                                          SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 2 errors\", 2, errors.size());  // Generated one new error; one duplicate", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a value to the type double.  Perhaps you meant to create a new instance of double\", ", "+                   errors.get(1).getFirst());", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forSimpleAssignmentExpressionOnly(sae, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE));", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use the type name int on the right hand side of an assignment.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Should return double instance\", ", "+                   SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forSimpleAssignmentExpressionOnly(sae, ", "+                                                          SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                                          SymbolData.INT_TYPE));", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use the type name int on the right hand side of an assignment.  \" +", "+                   \"Perhaps you meant to create a new instance of int\", ", "+                   errors.get(2).getFirst());", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forSimpleAssignmentExpressionOnly(sae, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should now be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot assign something of type double to something of type int\", errors.getLast().getFirst());", "+      assertEquals(\"Should return int instance\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forSimpleAssignmentExpressionOnly(sae, ", "+                                                          SymbolData.INT_TYPE.getInstanceData(), ", "+                                                          SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign something of type double to something of type int\", ", "+                   errors.get(3).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cab4b621c660294b6619f9daf258f723", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": "      public void testForArrayAccessOnly()", "signatureAfterChange": "      public void testForArrayAccessOnly()", "diff": ["-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Could not resolve symbol bad_reference\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());  // Generated a duplicate error", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Could not resolve symbol bad_reference\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad, SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot access an array element of a type name.  Perhaps you meant to create a new instance of int[]\", errors.getLast().getFirst());", "+      assertEquals(\"Should return int\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad, SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 2 errors\", 2, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot access an array element of a type name.  Perhaps you meant to create \" +", "+                   \"a new instance of int[]\", ", "+                   errors.get(1).getFirst());", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The variable referred to by this array access is a char, not an array\", errors.getLast().getFirst());", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The variable referred to by this array access is a char, not an array\", ", "+                   errors.get(2).getFirst());", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You have used a type name in place of an array index.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-", "+      assertEquals(\"Should now be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You have used a type name in place of an array index.  Perhaps you meant to create \" +", "+                   \"a new instance of int\", ", "+                   errors.get(3).getFirst());", "-      assertEquals(\"Should be 6 errors\", 6, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot reference an array element with an index of type double.  Instead, you must use an int\", errors.getLast().getFirst());", "-", "-      ", "+      assertEquals(\"Should now be 5 errors\", 5, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot reference an array element with an index of type double.  Instead, you must use an int\",", "+                   errors.get(4).getFirst());   "]}], "num": 5860}
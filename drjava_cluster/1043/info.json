{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fea6354d398bcfe684cd45d08e5407b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52a71f93cade71469959faae8cabb7b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "034592db30d33c0ac1a392bea16579d041875914", "commitAfterChange": "35d9365226ba0771f8b6c75f7ce46695407e7805", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver,                          List<String> classpath,                          final JavadocListener listener)     throws IOException", "signatureAfterChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver,                          List<String> classpath,                          final JavadocListener listener)     throws IOException", "diff": ["-    boolean ask = config.getSetting(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION).booleanValue();", "-      // If we no destination is set, or the user has asked for prompts,", "-      // ask the user for a destination directory.", "-      if (destDir.equals(FileOption.NULL_FILE) || ask) {", "-        if (!destDir.equals(FileOption.NULL_FILE)) {", "-          destDir = select.getDirectory(destDir);", "+      if (destDir.equals(FileOption.NULL_FILE)) {", "+        // This is the default, stock behavior of a new install.", "+        // If no destination is set, don't pass anything to the ui command.", "+        // Let the command object decide what to do.", "+        destDir = select.getDirectory(null);", "+      }", "+      else {", "+        // Otherwise, tell the command object to prefer the config's default.", "+        destDir = select.getDirectory(destDir);", "+      }", "+        ", "+      // Make sure the destination is usable.", "+      while (!destDir.exists() || !destDir.isDirectory() || !destDir.canWrite()) {", "+        if (!destDir.exists()) {", "+          // If the choice doesn't exist, ask to create it.", "+          boolean create = select.askUser", "+            (\"The destination directory you have chosen\\n\" +", "+             \"does not exist.  Would you like to create it?\",", "+             \"Create Directory?\");", "+          if (create) {", "+            boolean dirMade = destDir.mkdir();", "+            if (!dirMade) {", "+              throw new IOException(\"Could not create directory: \" + destDir);", "+            }", "+          }", "+          else {", "+            return;", "+          }", "+        }", "+        else if (!destDir.isDirectory()) {", "+          // We can't use it if it isn't a directory", "+          select.warnUser(\"The file you have chosen is not a directory.\\n\" +", "+                          \"Please choose another.\",", "+                          \"Not a Directory!\");", "+          destDir = select.getDirectory(null);", "+          //If the directory isn't writable, tell the user and ask again.", "+          select.warnUser(\"The destination directory you have chosen is\\n\" +", "+                          \"not writeable. Please choose another directory.\",", "+                          \"Cannot Write to Destination!\");", "-        ", "-      // Make sure the destination is writable.", "-      while (!destDir.exists() || !destDir.canWrite()) {", "-        // If the choice was rejected, tell the user and ask again.", "-        select.warnUser(\"The destination directory you have chosen\\n\"", "-                          + \"does not exist or is not readable. Please\\n\"", "-                          + \"choose another directory.\",", "-                        \"Bad Destination\");", "-        destDir = select.getDirectory(null);", "-      }", "-      // If the user cancels the dialog, silently return.", "+      // If the user cancels anywhere, silently return."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb58f71614c1a3435e01351779a3e9ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "576713321d388945af9795f8f5bacbafa14cd87f", "commitAfterChange": "b814c7e145dc4411f1437e59c56bc53ee860800f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "   static void checkForCompilersAndDebugger(String[] args)", "signatureAfterChange": "   static boolean checkForCompilersAndDebugger(String[] args)", "diff": ["-   */", "-  static void checkForCompilersAndDebugger(String[] args) {", "-    ", "-    boolean needCompiler = ! hasAvailableCompiler();", "-    boolean needDebugger = ! hasAvailableDebugger();", "-", "-    // Try to make sure both compiler and debugger are available", "-    if (needCompiler || needDebugger) promptForToolsJar(needCompiler, needDebugger);", "+    */", "+  static boolean checkForCompilersAndDebugger(String[] args) {", "+    if (canLoad(_thisLoader, TEST_COMPILER_CLASS) && canLoad(_thisLoader, TEST_DEBUGGER_CLASS)) {", "+      return true;", "+    }", "+    else {", "+      boolean haveCompiler = canLoad(_thisLoader, TEST_COMPILER_CLASS) || ", "+                             canLoad(_toolsLoader, TEST_COMPILER_CLASS);", "+      boolean haveDebugger = canLoad(_thisLoader, TEST_DEBUGGER_CLASS) || ", "+                             canLoad(_toolsLoader, TEST_DEBUGGER_CLASS);", "+      if (!haveCompiler || !haveDebugger) { promptForToolsJar(!haveCompiler, !haveDebugger); }", "+      return false;", "+    }"]}], "num": 1043}
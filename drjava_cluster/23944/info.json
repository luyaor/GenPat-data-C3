{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5fd3b7376c9e765bea0604b27d1b377", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f3e7512e4ab1d109c1146c67025e2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public JUnitErrorListPane()", "signatureAfterChange": "     public JUnitErrorListPane()", "diff": ["-      // If we set this pane to be of type text/rtf, it wraps based on words", "-      // as opposed to based on characters.", "-      super(\"text/rtf\", \"\");", "-      ", "-      _createPopupMenu();", "-      _popupAdapter = new PopupAdapter();", "-      addMouseListener(_popupAdapter);", "-      //addMouseListener(_mouseListener);", "+      super();", "+      this.removeMouseListener(defaultMouseListener);", "+      this.addMouseListener(_popupAdapter);", "+    }", "-      _selectedIndex = 0;", "-      _errorTable = new Hashtable();", "-      _lastDefPane = _frame.getCurrentDefPane();", "-      //System.out.println(\"lastDefPane = \" + _lastDefPane);", "-      JUnitErrorListPane.this.setFont(new Font(\"Courier\", 0, 20));", "-      ", "-      // We set the editor pane disabled so it won't get keyboard focus,", "-      // which makes it uneditable, and so you can't select text inside it.", "-      //setEnabled(false);", "-      ", "-      // Set the editor pane to be uneditable, but allow selecting text.", "-      setEditable(false);", "-      ", "-      DrJava.getConfig().addOptionListener( OptionConstants.COMPILER_ERROR_COLOR, new CompilerErrorColorOptionListener());    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5742964370e6b157638d6052e6f22b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/KeyStrokeOptionComponent.java", "commitBeforeChange": "1635ebcc866330c5b8ab6470e164e0d8b3584d8f", "commitAfterChange": "df716c1c0097e3026300a60a646a72121f921c3d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public KeyStrokeOptionComponent(KeyStrokeOption opt,                                   String text,                                   final Frame parent)", "signatureAfterChange": "    public KeyStrokeOptionComponent(KeyStrokeOption opt,                                   String text,                                   final Frame parent)", "diff": ["-        String oldText = _keyField.getText();", "+        String oldText = _button.getText();", "-        if (!_keyField.getText().equals(oldText)) {", "+        if (!_button.getText().equals(oldText)) {", "-    _button.setText(\"...\");", "-    _button.setMaximumSize(new Dimension(10,10));", "-    _button.setMinimumSize(new Dimension(10,10));", "+    _button.setText(_option.format(_key));", "-    _keyField = new JTextField();", "-    _keyField.setEditable(false);", "-    _keyField.setBackground(Color.white);", "-    _keyField.setHorizontalAlignment(JTextField.CENTER);", "-    _keyField.setText(_option.format(_key));", "-    _panel.add(_keyField, BorderLayout.CENTER);", "-    _panel.add(_button, BorderLayout.EAST);", "+    _panel.add(_button, BorderLayout.CENTER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eef3c2353bc07cc172e468810878ef80", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public SymbolData(String name)", "signatureAfterChange": "   public SymbolData(String name)", "diff": ["-  /** Called to create a continuation when all you know is the name */", "-  public SymbolData(String name) {", "+  /** Creates a continuation symbol for the specified name; does not enter this name in any table. */", "+  public SymbolData(String name) { this(name, SourceInfo.NO_INFO); }", "-    _modifiersAndVisibility = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[0]);", "-    _interfaces = new LinkedList<SymbolData>();"]}], "num": 23944}
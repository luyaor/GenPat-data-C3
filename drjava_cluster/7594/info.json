{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b26e9e8261db7ece293f9a765d79ccfe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "174a9a11fe75e192ac6a7413bfeee16f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorWindow.java", "commitBeforeChange": "f7fe3d35bd562b548ecea0f3cfa106ec01660447", "commitAfterChange": "b7584494b2aa0216aacee11c778709ed6dea34c0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private void updateErrorInfo()", "signatureAfterChange": "   private void updateErrorInfo()", "diff": ["-      String trace;", "+      StringBuilder b = new StringBuilder();", "-        StringBuilder b = new StringBuilder();", "-        trace = b.toString();", "-        trace = StringOps.getStackTrace(_error);", "+        b.append(StringOps.getStackTrace(_error));", "-          trace = trace + \"\\nCaused by:\\n\" + StringOps.getStackTrace(t);", "+          b.append(\"\\nCaused by:\\n\");", "+          b.append(StringOps.getStackTrace(t));", "-      _stackTrace.setText(trace);", "+      ", "+      b.append(\"\\n\\nSystem Properties:\\n\");", "+      java.util.Properties props = System.getProperties();", "+      int size = props.size();", "+      java.util.Iterator entries = props.entrySet().iterator();", "+      while(entries.hasNext()) {", "+        java.util.Map.Entry entry = (java.util.Map.Entry)entries.next();", "+        b.append(entry.getKey());", "+        b.append(\" = \");", "+        if (entry.getKey().equals(\"line.separator\")) {", "+          b.append(\"\\\"\");", "+          String ls = (String)entry.getValue();", "+          for(int i=0; i<ls.length(); ++i) {", "+            int ch = ls.charAt(i);", "+            b.append(\"\\\\u\");", "+            b.append(String.format(\"%04x\", ch));", "+          }", "+          b.append(\"\\\"\");", "+        }", "+        else {", "+          b.append(entry.getValue());", "+        }", "+        b.append(\"\\n\");", "+      }", "+", "+      _stackTrace.setText(b.toString());", "-      msg[0] = String.valueOf(_errorCount)+\" error\"+((_errorCount>1)?\"s\":\"\")+\" occured!\";", "-      _errorInfo = new JOptionPane(msg,JOptionPane.ERROR_MESSAGE,", "-                                       JOptionPane.DEFAULT_OPTION,null,", "-                                       new Object[0]);      ", "+      ", "+      b = new StringBuilder();", "+      b.append(HEADER_HTML);", "+      b.append(_errorCount);", "+      b.append(\" error\");", "+      b.append(((_errorCount>1)?\"s\":\"\"));", "+      b.append(\" occured!<br>\");", "+      b.append(ERRORS_FOOTER_HTML);", "+      _errorInfo = new JEditorPane(\"text/html\", b.toString());", "+      _errorInfo.addHyperlinkListener(new HyperlinkListener() {", "+        public void hyperlinkUpdate(HyperlinkEvent e) {", "+          if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {", "+            try {", "+              PlatformFactory.ONLY.openURL(e.getURL());", "+            } catch(Exception ex) { /* ignore, just not open web page */ }", "+          }", "+        }", "+      });", "+      _errorInfo.setEditable(false);", "+      _errorInfo.setBackground(getContentPane().getBackground());", "-      _errorInfo = new JOptionPane(new String[] {\"No errors occurred!\", \" \", \" \", \" \", \" \", \" \"},JOptionPane.INFORMATION_MESSAGE,", "-                                       JOptionPane.DEFAULT_OPTION,null,", "-                                       new Object[0]);", "+      _errorInfo = new JEditorPane(\"text/html\", HEADER_HTML+NO_ERRORS_HTML);", "+      _errorInfo.addHyperlinkListener(new HyperlinkListener() {", "+        public void hyperlinkUpdate(HyperlinkEvent e) {", "+          if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {", "+            try {", "+              PlatformFactory.ONLY.openURL(e.getURL());", "+            } catch(Exception ex) { /* ignore, just not open web page */ }", "+          }", "+        }", "+      });", "+      _errorInfo.setEditable(false);", "+      _errorInfo.setBackground(getContentPane().getBackground());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b933ef9c89adf4006afa1d22f932926", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "ef7dc3345b6835fe8ebb574f1a9119ee4c786794", "commitAfterChange": "21836dcccd81c2207652ee85b319b723ac9ff10b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void testParse()", "signatureAfterChange": "    public void testParse()", "diff": ["-    assertTrue(_ivo.parse(\"[]\").isEmpty());", "-    assertTrue(_bvo.parse(\"[]\").isEmpty());", "+    assertTrue(_svo.parse(\"\").isEmpty());", "+    assertTrue(_bvo.parse(\"\").isEmpty());", "+    ", "+    Vector<String> v = _svo.parse(\"[]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"\", v.get(0));", "+    ", "+    v = _svo.parse(\"[x]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"x\", v.get(0));", "-    try { _ivo.parse(\"[,]\"); fail(\"Comma at beginning.\"); } ", "+    v = _svo.parse(\"[\\\\\\\\]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"\\\\\", v.get(0));", "+    ", "+    v = _svo.parse(\"[\\\\,]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\",\", v.get(0));", "+    ", "+    v = _svo.parse(\"[\\\\,]\");", "+    assertEquals(1, v.size());", "+    assertEquals(\",\", v.get(0));", "+", "+    v = _svo.parse(\"[,]\");", "+    assertEquals(2, v.size());", "+    assertEquals(\"\", v.get(0));", "+    assertEquals(\"\", v.get(1));", "+    ", "+    try { _svo.parse(\"[\\\\x]\"); fail(\"Backslash not in front of another backslash or delimiter.\"); } ", "-    try { _ivo.parse(\"[11\"); fail(\"Missing footer.\"); } ", "-    catch (OptionParseException e) { }", "-    try { _ivo.parse(\"[11,]\"); fail(\"Comma w/o following list element.\"); } ", "+    try { _svo.parse(\"[11\"); fail(\"Missing footer.\"); } ", "-    try { _ivo.parse(\"11]\"); fail(\"Missing header.\"); } ", "+    v = _svo.parse(\"[11,]\");", "+    assertEquals(2, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"\", v.get(1));", "+    ", "+    try { _svo.parse(\"11]\"); fail(\"Missing header.\"); } ", "-    try { _ivo.parse(\"[11,,22]\"); fail(\"Missing list element.\"); } ", "-    catch (OptionParseException e) { }", "+    v = _svo.parse(\"[11,,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "-    try { _ivo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\"); } ", "-    catch (OptionParseException e) { }", "+    v = _svo.parse(\"[11,\\\\,,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\",\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "-    try { _ivo.parse(\"[11;22]\"); fail(\"Illegal delimiter.\"); } ", "+    v = _svo.parse(\"[11,abc\\\\,def,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"abc,def\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "+", "+    v = _svo.parse(\"[11,\\\\\\\\,22]\");", "+    assertEquals(3, v.size());", "+    assertEquals(\"11\", v.get(0));", "+    assertEquals(\"\\\\\", v.get(1));", "+    assertEquals(\"22\", v.get(2));", "+", "+    try { _svo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\"); } ", "+    ", "+    try { _bvo.parse(\"[true;false]\"); fail(\"Illegal delimiter.\"); } ", "+    catch (OptionParseException e) { }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bc59342aafe9c2db44e056a7264b4d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 64, "signatureBeforeChange": "          private void compareObjects(String name, Object leftVal, SourceInfo.Wrapper left,                                  Object rightVal, SourceInfo.Wrapper right)", "signatureAfterChange": "          private void compareObjects(String context, Object leftVal, SourceInfo.Wrapper left,                                  Object rightVal, SourceInfo.Wrapper right)", "diff": ["-    private void compareObjects(String name, Object leftVal, SourceInfo.Wrapper left,", "+    private void compareObjects(String context, Object leftVal, SourceInfo.Wrapper left,", "-          mismatch(\"Different \" + name, \"\"+leftVal, left, \"\"+rightVal, right);", "+          _log.mismatch(\"Different value\", context, \"\"+leftVal, left, \"\"+rightVal, right);", "+      ", "+      else if (leftVal instanceof Object[] && rightVal instanceof Object[]) {", "+        compareObjects(context, Arrays.asList((Object[]) leftVal), left, Arrays.asList((Object[]) rightVal), right);", "+      }", "+      ", "+      else if (leftVal instanceof Thunk<?> && rightVal instanceof Thunk<?> ||", "+                leftVal instanceof Lambda<?,?> && rightVal instanceof Lambda<?,?> ||", "+                leftVal instanceof Lambda2<?,?,?> && rightVal instanceof Lambda2<?,?,?>)  {} // ignore", "-          mismatch(\"Different \" + name, leftName, left, rightName, right);", "+          _log.mismatch(\"Different value\", context, leftName, left, rightName, right);", "-        compare((Node) leftVal, (Node) rightVal);", "+        compare(context, (Node) leftVal, (Node) rightVal);", "-            compareObjects(\"element of \" + name, p.first(), left, p.second(), right);", "+            compareObjects(\"element of \" + context, p.first(), left, p.second(), right);", "-          mismatch(\"Different lengths of \" + name, \"\"+leftList.size(), left, \"\"+rightList.size(), right);", "+          _log.mismatch(\"Different lengths\", context, \"\"+leftList.size(), left, \"\"+rightList.size(), right);", "-          compareObjects(name, leftOpt.unwrap(), left, rightOpt.unwrap(), right);", "+          compareObjects(context, leftOpt.unwrap(), left, rightOpt.unwrap(), right);", "-          mismatch(\"Different \" + name, leftVal.toString(), left, rightVal.toString(), right);", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "-      else if (supportedObject(leftVal) && supportedObject(rightVal)) {", "+      else if (leftVal instanceof Pair<?,?> && rightVal instanceof Pair<?,?>) {", "+        Pair<?,?> leftPair = (Pair<?,?>) leftVal;", "+        Pair<?,?> rightPair = (Pair<?,?>) rightVal;", "+        compareObjects(context, leftPair.first(), left, rightPair.first(), right);", "+        compareObjects(context, leftPair.second(), left, rightPair.second(), right);", "+      }", "+      ", "+      else if (leftVal instanceof DJClass && rightVal instanceof DJClass) {", "+        if (!sameClass((DJClass) leftVal, (DJClass) rightVal)) {", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "+        }", "+      }", "+      ", "+      else if (leftVal instanceof Variable && rightVal instanceof Variable) {", "+        if (!sameVariable((Variable) leftVal, (Variable) rightVal)) {", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "+        }", "+      }", "+      ", "+      else if (leftVal instanceof Function && rightVal instanceof Function) {", "+        if (!sameFunction((Function) leftVal, (Function) rightVal)) {", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "+        }", "+      }", "+      ", "+      else if (leftVal instanceof Type && rightVal instanceof Type) {", "+        if (!sameType((Type) leftVal, (Type) rightVal)) {", "+          _log.mismatchedType(context, (Type) leftVal, left, (Type) rightVal, right);", "+        }", "+      }", "+      ", "+      else if (supportedAtom(leftVal) && supportedAtom(rightVal)) {", "-          mismatch(\"Different \" + name, leftVal.toString(), left, rightVal.toString(), right);", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "-        mismatch(\"Unsupported object type in \" + name,", "-                 leftVal.getClass().getName(), left, rightVal.getClass().getName(), right);", "+        _log.mismatch(\"Unsupported object type\", context,", "+                      leftVal.getClass().getName(), left, rightVal.getClass().getName(), right);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c756949c68dda2488d09db880030403d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "467e5b5cdd1dcb74e3af8270c3f2ac9d390a6395", "commitAfterChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public String getVariableType(String var, int... indices)", "signatureAfterChange": "   public String getVariableType(String var)", "diff": ["-  public String getVariableType(String var, int... indices) {", "-//    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "-//    if (env == null) { return null; }", "-//    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "-//    if (lv == null) { return null; }", "-//    else {", "-//      Type t = lv.type();", "-//      for(int i = 0; i < indices.length; ++i) {", "-//        if (!_interpreterOptions.typeSystem().isArray(t)) { return \"<error: value is not an array>\"; }", "-//        t = _interpreterOptions.typeSystem().arrayElementType(t);", "-//      }", "-//      return _interpreterOptions.typeSystem().typePrinter().print(t);", "-//    }", "-    Object[] val = getVariable(var);", "-    if (val.length == 0) { return null; }", "-    else {", "-      Object o = val[0];", "-      Class<?> c = o.getClass();", "-      for(int i = 0; i < indices.length; ++i) {", "-        if (!c.isArray()) { return \"<error: value is not an array>\"; }", "-        c = c.getComponentType();;", "-      }", "-      return c.getName();", "+  public String getVariableType(String var) {", "+    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "+    if (env == null) { return \"\"; }", "+    DJClass djThis = env.first().getThis();", "+    if (djThis == null) { return \"<unknown>\"; }", "+    Class<?> thisC = djThis.load();", "+    Object thisO = env.second().getThis(djThis);", "+    Pair<Boolean,Class<?>> validAndType = getValidFieldType(var, thisC, thisO);", "+", "+    if (!validAndType.first()) {", "+      // not a field, may be a local variable", "+      // TODO: implement this", "+      return \"\";", "+    Class<?> c = validAndType.second();", "+    ", "+    // print the right number of [] for each level of arrays", "+    StringBuilder sb = new StringBuilder();", "+    while(c.isArray()) {", "+      sb.append(\"[]\");", "+      c = c.getComponentType();", "+    }", "+    ", "+    // we can't distinguish primitive types from their boxed types right now", "+    if (c.equals(Byte.class))      { return \"byte\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); } ", "+    if (c.equals(Short.class))     { return \"short\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Integer.class))   { return \"int\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Long.class))      { return \"long\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Float.class))     { return \"float\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Double.class))    { return \"double\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Boolean.class))   { return \"boolean\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Character.class)) { return \"char\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    else return c.getName()+sb.toString();"]}], "num": 7594}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "912d91ef54753440358d42f29c259058", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "327c8cb20d5cb4422243c319b46af98f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "90ef69282c46168e0825e1541e1aac142b594af9", "commitAfterChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 55, "signatureBeforeChange": "   private ObjectReference getDebugInterpreter(String interpreterName)      throws InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException", "signatureAfterChange": "    private ObjectReference getDebugInterpreter(String interpreterName, ThreadReference threadRef)      throws InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException", "diff": ["-    int i = 0;", "+", "+  private ObjectReference getDebugInterpreter(String interpreterName, ThreadReference threadRef) ", "+    throws InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException{", "+    int i = 0;", "+    if( printMessages ) System.out.println(\"Getting methods...\");", "+    if( printMessages ) System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "+    if( printMessages ) System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "-                                                                                     ObjectReference.INVOKE_SINGLE_THREADED);", "+                                                                                   ObjectReference.INVOKE_SINGLE_THREADED);", "+    if( printMessages ) System.out.println(\"Returning...\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f54fef04256f81888481a5e3addfb0d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "90ef69282c46168e0825e1541e1aac142b594af9", "commitAfterChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 69, "signatureBeforeChange": "   synchronized void currThreadResumed()", "signatureAfterChange": "   synchronized void currThreadResumed() throws DebugException", "diff": ["-  synchronized void currThreadResumed() {", "-    //     ((DefaultInteractionsModel)_model.getInteractionsModel()).setToDefaultInterpreter();", "-    //     String oldInterpreterName = _getUniqueThreadName(_runningThread);", "-    //     ((DefaultInteractionsModel)_model.getInteractionsModel()).removeInterpreter(oldInterpreterName);", "+   */", "+  synchronized void currThreadResumed() throws DebugException {", "+    // uncomment line 334 and the lines in currThreadSuspended to make the new functionality work", "+    if( printMessages ) System.out.println(\"In currThreadResumed()\");", "+    ", "+    /* switch to next interpreter on the stack */", "+    if( _suspendedThreads.isEmpty() ){", "+      ((DefaultInteractionsModel)_model.getInteractionsModel()).setToDefaultInterpreter();", "+    }", "+    else{", "+      ThreadReference threadRef = _suspendedThreads.peek();", "+      _switchToInterpreterForThreadReference(threadRef);", "+    }", "+    ", "+    if( printMessages ) System.out.println(\"Out of _copyBack()\");", "+    String oldInterpreterName = _getUniqueThreadName(_runningThread);", "+    ((DefaultInteractionsModel)_model.getInteractionsModel()).removeInterpreter(oldInterpreterName);", "+  }"]}], "num": 14043}
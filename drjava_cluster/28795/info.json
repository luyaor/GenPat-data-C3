{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26a7b248bb440753a1203f3b5946c909", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "414626d9ef88e219c49c2967ee11a65e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "623dbae8bf369adeb4e3b2a78ab2b5a3f4b29e9b", "commitAfterChange": "d0501f87d274a5806c24d0d105495acde5ccbe13", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testGranularUndo() throws BadLocationException", "signatureAfterChange": "      public void testGranularUndo() throws BadLocationException", "diff": ["-    KeyStroke ks = DrJava.getConfig().getSetting(OptionConstants.KEY_UNDO);", "-    Action a = KeyBindingManager.Singleton.get(ks);", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             ks.getModifiers(),", "-                                             ks.getKeyCode(), KeyEvent.CHAR_UNDEFINED));", "+    final KeyStroke ks = DrJava.getConfig().getSetting(OptionConstants.KEY_UNDO);", "+    final Action a = KeyBindingManager.Singleton.get(ks);", "+    ", "+    final KeyEvent e = new KeyEvent(definitions,", "+                                    KeyEvent.KEY_PRESSED,", "+                                    0,", "+                                    ks.getModifiers(),", "+                                    ks.getKeyCode(),", "+                                    KeyEvent.CHAR_UNDEFINED);", "+    definitions.processKeyEvent(e);", "+    ", "+    // 2", "+    /* Test bug #905405 Undo Alt+Anything Causes Exception */", "+    ", "+    // Type 'Alt-B'", "+    definitions.processKeyEvent(new KeyEvent(definitions, ", "+                                             KeyEvent.KEY_PRESSED, ", "+                                             (new Date()).getTime(),", "+                                             InputEvent.ALT_MASK,", "+                                             KeyEvent.VK_Q, KeyEvent.CHAR_UNDEFINED));", "+    definitions.processKeyEvent(new KeyEvent(definitions, ", "+                                             KeyEvent.KEY_TYPED, ", "+                                             (new Date()).getTime(),", "+                                             InputEvent.ALT_MASK,", "+                                             KeyEvent.VK_UNDEFINED, 'Q'));", "+    definitions.processKeyEvent(new KeyEvent(definitions, ", "+                                             KeyEvent.KEY_RELEASED, ", "+                                             (new Date()).getTime(),", "+                                             InputEvent.ALT_MASK,", "+                                             KeyEvent.VK_Q, KeyEvent.CHAR_UNDEFINED));", "+    ", "+    /*", "+     * If the bug is not fixed in DefinitionsPane.processKeyEvent, this test", "+     * will not fail because the exception is thrown in another thread. ", "+     * However, the stack trace will get printed onto the console.  I don't", "+     * know how to fix this problem in case someone unfixes the bug.", "+     */", "+    SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "+//    definitions.setCaretPosition(doc.getLength());", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c73a9e4b9dbe349e26530145e239c76", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/HelpFrame.java", "commitBeforeChange": "1551b3a480a22638c82545f9f78ddcdd4c3680e6", "commitAfterChange": "bbf3746bbcee6a4413d47d7cf809100cc7bb81e7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public HelpFrame()", "signatureAfterChange": "   public HelpFrame()", "diff": ["-    _backButton = new JButton(_backAction);", "-    _forwardButton = new JButton(_forwardAction);", "+    _backButton = makeButton(_backAction,JButton.RIGHT,0,3);", "+    _forwardButton = makeButton(_forwardAction,JButton.LEFT,3,0);", "+    _navPane.setBackground(new Color(0xCCCCFF));", "+    JLabel icon = new JLabel(MainFrame.getIcon(\"DrJavaHelp.gif\"));", "+    _navPane.add(icon);", "+    _navPane.add(Box.createHorizontalStrut(8));", "+    _navPane.add(Box.createHorizontalGlue());", "+    _navPane.add(Box.createHorizontalStrut(8));", "+    _navPane.add(Box.createHorizontalStrut(3));", "+    JPanel navContainer = new JPanel(new GridLayout(1,1));", "+    navContainer.setBorder(new CompoundBorder(new EmptyBorder(5,5,5,5),", "+                                              new EtchedBorder()));", "+                                              //new BevelBorder(BevelBorder.LOWERED)));", "+    navContainer.add(_navPane);", "-    cp.add(_navPane, BorderLayout.NORTH);", "+    cp.add(navContainer, BorderLayout.NORTH);"]}], "num": 28795}
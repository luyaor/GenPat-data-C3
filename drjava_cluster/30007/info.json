{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7ad2febb0c8a667d905c1f8ee7c1846", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277202428a1dd84a6254c257dc2d066b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b128df4fa9d8df79a76ba9e19a170c160365e646", "commitAfterChange": "e16fd9dc1aa815e303a7aa80be407f3a031e237d", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "diff": ["-    // clear browser history", "+    // clear browser, breakpoint, and bookmark histories", "-    ", "-    // set breakpoints", "-    for (DebugBreakpointData dbd: ir.getBreakpoints()) {", "-      try {", "-        int lnr = dbd.getLineNumber();", "-        OpenDefinitionsDocument odd = getDocumentForFile( dbd.getFile());", "-        getDebugger().toggleBreakpoint(odd, odd.getOffset(lnr), lnr, dbd.isEnabled());", "-      }", "-      catch(DebugException de) { /* ignore, just don't add breakpoint */ }", "-    }", "-    ", "-    // set watches", "-    try { getDebugger().removeAllWatches(); }", "-    catch(DebugException de) { /* ignore, just don't remove old watches */ }", "-    for (DebugWatchData dwd: ir.getWatches()) {", "-      try { getDebugger().addWatch( dwd.getName()); }", "-      catch(DebugException de) { /* ignore, just don't add watch */ }", "-    }", "-    ", "-    // set bookmarks", "-    try {", "-      for (final DocumentRegion bm: ir.getBookmarks()) {", "-        final OpenDefinitionsDocument odd = getDocumentForFile(bm.getFile());", "-        final Position startPos = odd.createPosition(bm.getStartOffset());", "-        final Position endPos = odd.createPosition(bm.getEndOffset());", "-        getBookmarkManager().addRegion(new SimpleDocumentRegion(odd, startPos, endPos));", "-      }", "-    }", "-    catch(BadLocationException e) { throw new UnexpectedException(e); }", "-//    final List<OpenDefinitionsDocument> oldDocs = getOpenDefintionsDocuments();", "+//    final List<OpenDefinitionsDocument> oldDocs = getOpenDefinitionsDocuments();", "-    ArrayList<DocumentRegion> expiredBookmarks = new ArrayList<DocumentRegion>();", "-    ArrayList<Breakpoint> expiredBreakpoints = new ArrayList<Breakpoint>();", "+    ", "+    // Collection of documents that have been modified outside of DrJava", "+    ArrayList<DocFile> modifiedFiles = new ArrayList<DocFile>();", "-        for (DocumentRegion r: getBookmarkManager().getRegions())", "-          if (r.getFile().equals( f )) expiredBookmarks.add( r );", "-        for (Breakpoint r: getBreakpointManager().getRegions())", "-          if (r.getFile().equals( f )) expiredBreakpoints.add( r );", "+        modifiedFiles.add(f);", "+", "-        for (DocumentRegion r: getBookmarkManager().getRegions())", "-          if (r.getFile().equals( f )) expiredBookmarks.add( r );", "-        for (Breakpoint r: getBreakpointManager().getRegions())", "-          if (r.getFile().equals( f )) expiredBreakpoints.add( r );", "+        modifiedFiles.add(f);", "-    // Remove bookmarks and breakpoints for files that were modified outside of DrJava", "-    for (DocumentRegion r: expiredBookmarks) getBookmarkManager().removeRegion( r );", "-    for (Breakpoint r: expiredBreakpoints) getBreakpointManager().removeRegion( r );", "-    _notifier.projectOpened(projectFile, new FileOpenSelector() {", "+    _notifier.openProject(projectFile, new FileOpenSelector() {", "+    for (DebugBreakpointData dbd: ir.getBreakpoints()) {", "+      try {", "+        File f = dbd.getFile();", "+        if (! modifiedFiles.contains(f)) {", "+          int lnr = dbd.getLineNumber();", "+          OpenDefinitionsDocument odd = getDocumentForFile(f);", "+          getDebugger().toggleBreakpoint(odd, odd.getOffset(lnr), lnr, dbd.isEnabled());", "+        }", "+      }", "+      catch(DebugException de) { /* ignore, just don't add breakpoint */ }", "+    }", "+", "-    if(active != null) {", "+    if (active != null) {", "+", "+    ", "+    // set watches", "+    try { getDebugger().removeAllWatches(); }", "+    catch(DebugException de) { /* ignore, just don't remove old watches */ }", "+    for (DebugWatchData dwd: ir.getWatches()) {", "+      try { getDebugger().addWatch( dwd.getName()); }", "+      catch(DebugException de) { /* ignore, just don't add watch */ }", "+    }", "+    ", "+    // set bookmarks", "+", "+    try {", "+      for (final Region bm: ir.getBookmarks()) {", "+        File f = bm.getFile();", "+        if (! modifiedFiles.contains(f)) {", "+          final OpenDefinitionsDocument odd = getDocumentForFile(f);", "+          final Position startPos = odd.createPosition(bm.getStartOffset());", "+          final Position endPos = odd.createPosition(bm.getEndOffset());", "+          getBookmarkManager().addRegion(new DocumentRegion(odd, startPos, endPos));", "+        }", "+      }", "+    }", "+    catch(BadLocationException e) { throw new UnexpectedException(e); }", "-    ", "-    // perform a project auto-refresh if specified", "-    if(_state.getAutoRefreshStatus()) { autoRefreshProject(); }", "+", "+    if (_state.getAutoRefreshStatus()) openNewFilesInProject(); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fe4086dbc05d42659bd6508f292f419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "e4597735ed480ff103992a6b4edd98783ce62b7c", "commitAfterChange": "c918fda29945e681706734ce52051eaf13078f8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    System.err.println(\"QuestionStartAfterOpenBrace\");", "-", "-    int start = doc.getLineStartPos(doc.getCurrentLocation());", "-    BraceReduction reduced = doc.getReduced();", "-    int origin = reduced.absOffset();", "-    String text;", "-    char c, peek;", "-", "-    try", "-    {", "-\ttext = doc.getText(DefinitionsDocument.DOCSTART, start);", "+    int here = doc.getCurrentLocation();", "+    int origin = doc.getReduced().absOffset();", "+    int lineStart = doc.getLineStartPos(doc.getCurrentLocation());", "+    ", "+    // Get brace for start of line", "+    doc.getReduced().move(lineStart - origin);", "+    IndentInfo info = doc.getReduced().getIndentInformation();", "+    doc.getReduced().move(origin - lineStart);", "+    ", "+    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+        (info.distToBrace < 0)) {", "+      // Precondition not met: we should have a brace", "+      return false;", "-    catch (BadLocationException e)", "-    {", "-\t// Control flow should never reach this point.", "-\tthrow new UnexpectedException(new RuntimeException(e.getMessage()));", "+    int bracePos = lineStart - info.distToBrace;    ", "+    ", "+    // Get brace's end of line", "+    int braceEndLinePos = doc.getLineEndPos(bracePos);", "+    ", "+    // Get position of next non-WS char (not in comments)", "+    int nextNonWS = -1;", "+    try {", "+      nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "-    for (int i = start-1; i >= DefinitionsDocument.DOCSTART; i--)", "-    {", "-\t", "-      c = text.charAt(i);", "-", "-      if (c != ' ' && c != '\\t' && c != '\\n') ", "-      {", "-\t  // c is not a whitespace character.", "-", "-          reduced.move(i - origin);", "-          ReducedModelState state = reduced.getStateAtCurrent();", "-          reduced.move(origin - i);", "-", "-          if (state.equals(ReducedModelState.FREE))", "-\t  {", "-\t      peek = text.charAt(i - 1);", "-", "-\t      if (c == '/' && (peek == '/' || peek == '*'))", "-\t\t  i--;", "-\t      else if (c == '*' && peek == '/')", "-\t\t  i--;", "-\t      else", "-\t\t  return c == '{';", "-\t  }", "-      }", "+    catch (BadLocationException e) {", "+      // This shouldn't happen", "+      throw new UnexpectedException(e);", "-    return false;", "+    ", "+    if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "+      return true;", "+    }", "+    ", "+    return (nextNonWS >= lineStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9958a6a021973c7045958b7e4016a0e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-hj/edu/rice/cs/drjava/model/compiler/HjCompiler.java", "commitBeforeChange": "a0957e8972dd51e027c20f0e7d4410268a6b47b8", "commitAfterChange": "d911293c92d7a3fb39bbc2ab054e9452132d9003", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,                                                    java.util.List<? extends File> classPath,                                                     java.util.List<? extends File> sourcePath,                                                    File destination,                                                     java.util.List<? extends File> bootClassPath,                                                    String sourceVersion,                                                    boolean showWarnings)", "signatureAfterChange": "   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,                                                    java.util.List<? extends File> classPath,                                                     java.util.List<? extends File> sourcePath,                                                    File destination,                                                     java.util.List<? extends File> bootClassPath,                                                    String sourceVersion,                                                    boolean showWarnings)", "diff": ["-                                                   boolean showWarnings) {", "-   ", "-    java.util.List<File> filteredClassPath = null;", "-    if (classPath!=null) {", "-      filteredClassPath = new LinkedList<File>(classPath);", "-      ", "-      if (_filterExe) {", "-        FileFilter filter = IOUtil.extensionFilePredicate(\"exe\");", "-        Iterator<? extends File> i = filteredClassPath.iterator();", "-        while (i.hasNext()) {", "-          if (filter.accept(i.next())) { i.remove(); }", "-        }", "-        if (_tempJUnit!=null) { filteredClassPath.add(_tempJUnit); }", "-      }", "-    }", "+                                                   boolean showWarnings) {   ", "+    java.util.List<File> filteredClassPath = getFilteredClassPath(classPath);", "+    ", "-    Iterator<? extends File> ti = _defaultBootClassPath.listIterator();", "-    while(ti.hasNext()){", "-     s += \":\" + ti.next().getPath();", "+    if (bootClassPath == null) { bootClassPath = _defaultBootClassPath; }", "+    ", "+    for(File f: bootClassPath) {", "+      s += \":\" + f.getAbsolutePath();", "-    String [] testCommand = new String[11];", "-        ", "+    if (s.length()>0) { s = s.substring(1); }", "+    ", "+    String [] testCommand = new String[11];    ", "-    testCommand[9] = \"-pp\";", "+    testCommand[9] = \"-pp\";    ", "-    ", "-    Iterator<? extends File> it = files.listIterator();", "-    while(it.hasNext()){", "-     File next = it.next();", "-      testCommand[3] = next.getParent();", "-      Dir = testCommand[3];", "-      testCommand[7] = next.getParent();", "+    for(File next: files) {", "+      testCommand[3] = next.getParentFile().getAbsolutePath();", "+      testCommand[7] = next.getParentFile().getAbsolutePath();", "-      File path = new File(next.getParent());", "-     // File path = new File(\"/Users/triplezero163/Work/workspace/hj.trunk/Eclipse-license-code/hj/hj.release/lib/hjc.jar\");", "-      String name = next.getName().replace(\".hj\", \"\");", "+      ", "+      for(String cmd: testCommand) System.out.print(\" \"+cmd);", "+      System.out.println();", "+      ", "-      soot.Main.mainEntry(testCommand); ", "-     // new PathClassLoader(JarJDKToolsLibrary.class.getClassLoader(), path).loadClass(name);", "+        soot.Main.mainEntry(testCommand); ", "-       e.printStackTrace();", "+        e.printStackTrace();", "+        throw new edu.rice.cs.util.UnexpectedException(e);", "-", "-   ", "-", "-       return Collections.emptyList();", "+    return Collections.emptyList();"]}], "num": 30007}
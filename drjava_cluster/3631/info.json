{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1db81168901f920a3238339c1ef24018", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0937330d82b2b394143d5c0aaceea408", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "69317eecda3235d4815eb5d9a5b9e536b8481c4a", "commitAfterChange": "3549437d3f0aec05949cb330cf74662cd269bb15", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "diff": ["-      while (trace.indexOf(\"junit.framework.Assert\") != -1 &&", "-             trace.indexOf(\"junit.framework.Assert\") < trace.indexOf(\"(\")) {", "-        /* the format of the trace will have \"at junit.framework.Assert...\"", "-         * on each line until the line of the actual source file.", "-         * if the exception was thrown from the test case (so the test failed", "-         * without going through assert), then the source file will be on", "-         * the first line of the stack trace", "-         */", "-        trace = trace.substring(trace.indexOf('\\n') + 1);", "-      }", "-      trace = trace.substring(trace.indexOf('(')+1);", "-      trace = trace.substring(0, trace.indexOf(')'));", "-      ", "-      // If the exception occurred in a subclass of the test class, then update our", "-      // concept of the class and test name. Otherwise, we're only here to pick up the", "-      // line number.", "-      if (combined.indexOf(className) == -1) {", "-        className = trace.substring(0,trace.lastIndexOf('.'));", "-        classNameAndTest = className + \".\" + testName;", "-      }", "-      ", "-      try {", "-        lineNum = Integer.parseInt(trace.substring(trace.indexOf(':') + 1)) - 1;", "-      }", "-      catch (NumberFormatException e) { throw new UnexpectedException(e); }", "+      if (trace.trim().length()>0) {", "+        while (trace.indexOf(\"junit.framework.Assert\") != -1 &&", "+               trace.indexOf(\"junit.framework.Assert\") < trace.indexOf(\"(\")) {", "+          /* the format of the trace will have \"at junit.framework.Assert...\"", "+           * on each line until the line of the actual source file.", "+           * if the exception was thrown from the test case (so the test failed", "+           * without going through assert), then the source file will be on", "+           * the first line of the stack trace", "+           */", "+          trace = trace.substring(trace.indexOf('\\n') + 1);", "+        }", "+        trace = trace.substring(trace.indexOf('(')+1);", "+        trace = trace.substring(0, trace.indexOf(')'));", "+        // If the exception occurred in a subclass of the test class, then update our", "+        // concept of the class and test name. Otherwise, we're only here to pick up the", "+        // line number.", "+        if (combined.indexOf(className) == -1) {", "+          int dotPos = trace.lastIndexOf('.');", "+          if (dotPos!=-1) {", "+            className = trace.substring(0,dotPos);", "+            classNameAndTest = className + \".\" + testName;", "+          }", "+        }", "+        ", "+        try {", "+          lineNum = Integer.parseInt(trace.substring(trace.indexOf(':') + 1)) - 1;", "+        }", "+        catch (NumberFormatException e) { lineNum = 0; } // may be native method", "+      }      ", "-//    for dubugging    ", "+//    for debugging    ", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2517b640e9003df7709ed928d9e40689", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/LogTest.java", "commitBeforeChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "commitAfterChange": "58507a81b298eda1c95791a37194e9f75288a8af", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   @SuppressWarnings(\"deprecation\")   private static Date parse(String s)", "signatureAfterChange": "   private static Date parse(String s)", "diff": ["-  /** Parses a date printed by Date.toString(); returns null if there is a parse error. */", "-  @SuppressWarnings(\"deprecation\")", "+  /** Parses a date printed by Date.toString(); returns null if there is a parse error or if there is no date. */", "-    try { return new Date(Date.parse(datePrefix(s)));  }  // the undeprecated version of parse DOES NOT WORK", "-    catch(RuntimeException e) { return null; }  // either IllegalArgument or StringIndexOutOfBounds", "+    int pos = s.indexOf(\"GMT: \");", "+    if (pos==-1) { return null; }", "+    try {", "+      return Log.DATE_FORMAT.parse(s.substring(0,pos+3));", "+    }", "+    catch(ParseException pe) { return null; }"]}], "num": 3631}
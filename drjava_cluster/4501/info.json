{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4e4cfed9d1d671fbc3313a4bc52238b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44d377effa3d3ea009948500492b2da5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "   @Override public Type visit(CharTypeName node)", "signatureAfterChange": "     @Override public Type visit(CastExpression node)", "diff": ["-   */", "-  @Override public Type visit(CharTypeName node) { return setType(node, TypeSystem.CHAR); }", "+     */", "+    @Override public Type visit(CastExpression node) {", "+      Type t = checkTypeName(node.getTargetType());", "+      Type fromT = check(node.getExpression());", "+        Expression exp = ts.cast(t, node.getExpression());", "+        node.setExpression(exp);", "+        return setType(node, ts.capture(t));", "+      catch (UnsupportedConversionException e) {", "+        setErrorStrings(node, ts.userRepresentation(fromT), ts.userRepresentation(t));", "+        throw new ExecutionError(\"cast.types\", node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aeb70dabf9c5bd312c28739287dcad2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "6ac6b30c03b8f321199592a97e544cb4056701f0", "commitAfterChange": "69317eecda3235d4815eb5d9a5b9e536b8481c4a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     @Override public Type visit(AnonymousAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousAllocation node)", "diff": ["-        throw new ExecutionError(\"allocation.type\", node);", "+        setErrorStrings(node, ts.userRepresentation(t));", "+        throw new ExecutionError(\"invalid.supertype\", node);", "-        if (enclosingThis == null) { throw new ExecutionError(\"allocation.type\", node); }", "+        if (enclosingThis == null) {", "+          setErrorStrings(node, ts.userRepresentation(t), ts.userRepresentation(dynamicOuter.unwrap()));", "+          throw new ExecutionError(\"inner.allocation\", node);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1f174d96956cbbd6cd166cde2077040", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "6ac6b30c03b8f321199592a97e544cb4056701f0", "commitAfterChange": "69317eecda3235d4815eb5d9a5b9e536b8481c4a", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     @Override public Type visit(SimpleAllocation node)", "signatureAfterChange": "     @Override public Type visit(SimpleAllocation node)", "diff": ["-      if (!ts.isConcrete(t)) { throw new ExecutionError(\"allocation.type\", node); }", "+      if (!ts.isConcrete(t)) {", "+        setErrorStrings(node, ts.userRepresentation(t));", "+        throw new ExecutionError(\"allocation.type\", node);", "+      }", "-        if (enclosingThis == null) { throw new ExecutionError(\"allocation.type\", node); }", "+        if (enclosingThis == null) {", "+          setErrorStrings(node, ts.userRepresentation(t), ts.userRepresentation(dynamicOuter.unwrap()));", "+          throw new ExecutionError(\"inner.allocation\", node);", "+        }"]}], "num": 4501}
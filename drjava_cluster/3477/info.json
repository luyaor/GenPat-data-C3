{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3787c5dbdbb49c41f443508619f7e797", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ea0b5920f66f14959deec8af448e885", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "f835199d645f480bb352cc51cff6dc5ae32e7dc4", "commitAfterChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 124, "signatureBeforeChange": "          public ConstraintSet andUpperBound(VariableType var, Type bound)", "signatureAfterChange": "      private ConstraintFormula upperBound(VariableType var, Type upper)", "diff": ["-    ", "-    public ConstraintSet andUpperBound(VariableType var, Type bound) {", "-      if (isSubtype(lowerBound(var), bound)) {", "-        // The meet is also a supertype of lowerBound(var)", "-        Type currentUpper = upperBound(var);", "-        Type newUpper = meet(currentUpper, bound);", "-        if (currentUpper == newUpper) { return this; }", "-        else {", "-          ConstraintSet result = new ConstraintSet(this);", "-          result._upperBounds.put(var, newUpper);", "-          return result;", "-        }", "-      }", "-      else { return UNSATISFIABLE_CONSTRAINTS; }", "-    }", "+  ", "+  private ConstraintFormula upperBound(VariableType var, Type upper) {", "+    NormSubtype sub = new NormSubtype();", "+    if (sub.contains(NULL, upper) && sub.contains(upper, OBJECT)) { return new ConstraintScenario(var, upper); }", "+    else { return FALSE; }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7404311589e635f72d6454772784917", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "f835199d645f480bb352cc51cff6dc5ae32e7dc4", "commitAfterChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 123, "signatureBeforeChange": "          public ConstraintSet andLowerBound(VariableType var, Type bound)", "signatureAfterChange": "      private ConstraintFormula lowerBound(VariableType var, Type lower)", "diff": ["-    ", "-    public ConstraintSet andLowerBound(VariableType var, Type bound) {", "-      if (isSubtype(bound, upperBound(var))) {", "-        // The join is also a subtype of upperBound(var)", "-        Type currentLower = lowerBound(var);", "-        Type newLower = join(currentLower, bound);", "-        if (currentLower == newLower) { return this; }", "-        else {", "-          ConstraintSet result = new ConstraintSet(this);", "-          result._lowerBounds.put(var, newLower);", "-          return result;", "-        }", "-      }", "-      else { return UNSATISFIABLE_CONSTRAINTS; }", "-    }", "+  ", "+  private ConstraintFormula lowerBound(VariableType var, Type lower) {", "+    NormSubtype sub = new NormSubtype();", "+    if (sub.contains(NULL, lower) && sub.contains(lower, OBJECT)) { return new ConstraintScenario(lower, var); }", "+    else { return FALSE; }", "+  }"]}], "num": 3477}
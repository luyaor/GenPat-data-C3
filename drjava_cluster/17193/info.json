{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "526af4491ad0b10ac82a17f7e6bc8884", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24a877fdf5a78c188e594a132b3ae823", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public int getDebugPort() throws IOException", "signatureAfterChange": "   public int getDebugPort() throws IOException", "diff": ["-      try {", "-        ServerSocket socket = new ServerSocket(0);", "-        _debugPort = socket.getLocalPort();", "-        socket.close();", "-      }", "-      catch (java.net.SocketException se) {", "-        // something wrong with sockets, can't use for debugger", "-        _debugPort = -1;", "-      }", "-      _debugPortSet = true;", "-      if (CodeStatus.DEVELOPMENT) {", "-        System.setProperty(\"drjava.debug.port\", String.valueOf(_debugPort));", "-      }", "+      _createNewDebugPort();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a58637ba77d5e13c95566797e50934", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-eclipse/edu/rice/cs/drjava/model/compiler/descriptors/EclipseDescriptor.java", "commitBeforeChange": "b7d4cb04f4bb848380a14b3825abe047db8dc58f", "commitAfterChange": "101c103fed282ea73966b5bc0dce7152a188fba5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public boolean containsCompiler(File f)", "signatureAfterChange": "   public boolean containsCompiler(File f)", "diff": ["-  ", "-  public boolean containsCompiler(File f) {", "-    if (f.isFile()) {", "-      try {", "-        JarFile jf = new JarFile(f);", "-        return (jf.getJarEntry(\"org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.class\")!=null);", "-      }", "-      catch(IOException ioe) { return false; }", "-    }", "-    else if (f.isDirectory()) {", "-      return (new File(f,\"org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.class\").exists());", "-    }", "+    * @return true if the file contains the compiler */", "+  public boolean containsCompiler(File f) {", "+    return Util.exists(f, \"org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.class\");", "+  }"]}], "num": 17193}
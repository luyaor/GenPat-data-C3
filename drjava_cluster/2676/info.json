{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4e5c4af63d33daed4202bdb1972e57a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9187310ca49a6476e686e5bdfc4a317b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public SymbolData getInnerClassOrInterface(String name)", "signatureAfterChange": "   public SymbolData getInnerClassOrInterface(String relName)", "diff": ["-  public SymbolData getInnerClassOrInterface(String name) {", "-    int firstIndexOfDot = name.indexOf(\".\");", "-    int firstIndexOfDollar = name.indexOf(\"$\");", "-    if (firstIndexOfDot == -1) {", "-      firstIndexOfDot = firstIndexOfDollar;", "-    }", "-    else {", "-      if (firstIndexOfDollar >= 0 && firstIndexOfDollar < firstIndexOfDot)", "-        firstIndexOfDot = firstIndexOfDollar;", "-    }", "+  public SymbolData getInnerClassOrInterface(String relName) {", "+//    if (relName.endsWith(\"Rod\")) System.err.println(\"getInnerClass('\" + relName + \"') called on '\" + this + \"'\");", "+    int firstIndexOfDot = relName.indexOf('.');", "+    int firstIndexOfDollar = relName.indexOf(\"$\");", "+    if (firstIndexOfDot == -1) firstIndexOfDot = firstIndexOfDollar;", "+    else if (firstIndexOfDollar >= 0 && firstIndexOfDollar < firstIndexOfDot) firstIndexOfDot = firstIndexOfDollar;", "-    //First, look through the inner classes/interfaces of this class", "+    // First, look through the inner classes/interfaces of this class", "-    SymbolData result = getInnerClassOrInterfaceHelper(name, firstIndexOfDot);", "+    SymbolData result = getInnerClassOrInterfaceHelper(relName, firstIndexOfDot);", "+    if (relName.endsWith(\"Rod\")) {", "+      System.err.println(\"getInnerClassOrInterfaceHelper('\" + relName + \"', \" + firstIndexOfDot + \")\");", "+      System.err.println(\"_innerClasses = \" + _innerClasses);", "+    }", "+      System.err.println(\"Result is: '\" + result + \"'\");", "-        outerPiece = getInnerClassOrInterfaceHelper(name.substring(0, firstIndexOfDot), -1);", "+        outerPiece = getInnerClassOrInterfaceHelper(relName.substring(0, firstIndexOfDot), -1);", "-      if (TypeChecker.checkAccessibility(outerPiece.getMav(), outerPiece, this.getSymbolData())) {return result;}", "-      else {privateResult = result; result = null;}", "+      if (TypeChecker.checkAccessibility(outerPiece.getMav(), outerPiece, getSymbolData())) return result;", "+      else {", "+        privateResult = result; ", "+        result = null;", "+      }", "-      result = _outerData.getInnerClassOrInterface(name);", "-      if (result != null) {return result;}", "+      result = _outerData.getInnerClassOrInterface(relName);", "+      if (result != null) return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9581d03b424c0d2f73fef3ee5eb23293", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "3c5a933a3b7bdbbae2845e4b6fe81e012901940b", "commitAfterChange": "98a0206bc90f5eb73be3e2e6e290a67ee1cd136d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "diff": ["-    String className1 = testString.substring(firstIndex, secondIndex);", "-    String className2 = testString.substring(0, firstIndex-1);", "-    if (firstIndex == secondIndex) className = className2;", "-    else className = className1;", "+    if (firstIndex != secondIndex)", "+      className = testString.substring(firstIndex, secondIndex);", "+    else", "+      className = testString.substring(0, firstIndex-1);", "-    /** If the classname is not in the stacktrace, then the test that failed was inherited from a superclass. let's look", "-      * for the classname.", "-      */", "-    if (stackTrace.indexOf(className) == -1) {", "+    /* Check to see if the class and test name appear directly in the stack trace. If", "+     * they don't, then we'll have to do additional work to find the line number. Additionally,", "+     * if the exception occured in a subclass of the test class, we'll need to adjust our conception", "+     * of the class name.", "+     */", "+    int lineNum = -1;", "+    if (stackTrace.indexOf(classNameAndTest) == -1) {", "-      className = trace.substring(0,trace.indexOf(':'));", "-      className = trace.substring(0,trace.lastIndexOf('.'));", "-      classNameAndTest = className + \".\" + testName;", "+      ", "+      // If the exception occurred in a subclass of the test class, then update our", "+      // concept of the class and test name. Otherwise, we're only here to pick up the", "+      // line number.", "+      if (stackTrace.indexOf(className) == -1) {", "+        className = trace.substring(0,trace.lastIndexOf('.'));", "+        classNameAndTest = className + \".\" + testName;", "+      }", "+", "+      try {", "+        lineNum = Integer.parseInt(trace.substring(trace.indexOf(':') + 1)) - 1;", "+      }", "+      catch (NumberFormatException e) { throw new UnexpectedException(e); }", "-    ", "-    ", "-    int lineNum = _lineNumber(stackTrace, classNameAndTest);", "+    if (lineNum < 0) {", "+      lineNum = _lineNumber(stackTrace, classNameAndTest);", "+    }"]}], "num": 2676}
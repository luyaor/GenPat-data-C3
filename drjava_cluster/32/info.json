{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca75f01a7a6c7260d5af3456d311b4ea", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "103413be58a6d98851dc5434231de763", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "signatureAfterChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "diff": ["+      boolean inTestCase = (_doc.getFileName().endsWith(\"Test.java\"));", "+      if (!_ignoreTestCases || !inTestCase) {", "-      ", "+        ", "-      ", "-      ", "-      // find next match in _doc", "-      _doc.acquireReadLock();", "-      FindResult fr;", "-      try { fr = _findNextInDocSegment(_doc, 0, _doc.getLength(), false, allWrapped); } ", "-      finally { _doc.releaseReadLock(); }", "-      ", "-      if (fr.getFoundOffset() >= 0) return fr;", "-      ", "+        ", "+        ", "+        // find next match in _doc", "+        _doc.acquireReadLock();", "+        FindResult fr;", "+        try { fr = _findNextInDocSegment(_doc, 0, _doc.getLength(), false, allWrapped); } ", "+        finally { _doc.releaseReadLock(); }", "+        ", "+        if (fr.getFoundOffset() >= 0) return fr;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f200fd3c5fbe9f1f23a96c746ea066b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1824c23d7190107a20690dc4a2840a5d74f14a93", "commitAfterChange": "3b64166f1d62b17dc65eb373f58379c1d93452e7", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "signatureAfterChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "diff": ["+    ", "+    final int wordLen =  _findWord.length();", "-    assert (start >= 0 && start <= docLen) && (len >= 0 && len <= docLen);", "+    assert (start >= 0 && start <= docLen) && (len >= 0 && len <= docLen) && wordLen > 0;", "-", "-    if (docLen == 0) return new FindResult(doc, -1, true, allWrapped); // failure result", "-    final int newStart;", "+    int newStart;", "-    final int adjustment = _findWord.length() - 1; // max size of the findWord suffix (prefix) within preceding text", "+    final int adjustment = wordLen - 1; // non-negative max size of the findWord suffix (prefix) within preceding text", "+      if (newLen > docLen) newLen = docLen;", "-      newStart = len;", "-      newLen = (docLen - len) + adjustment;", "+      newStart = len - adjustment;", "+      if (newStart < 0) newStart = 0;", "+      newLen = docLen - newStart;", "-      ", "-    if (newLen > docLen) newLen = docLen;"]}], "num": 32}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65738909f0d86669bb3e48c0880595be", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "563408961589774c15a137fb1642eda1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean isEqual(Type t1, Type t2)", "signatureAfterChange": "   public boolean isEqual(Type t1, Type t2)", "diff": ["+    //debug.logStart(new String[]{\"t1\",\"t2\"}, wrap(t1), wrap(t2)); try {", "+      ", "-      Type t1Norm = NORMALIZE.value(t1);", "-      Type t2Norm = NORMALIZE.value(t2);", "+      Normalizer norm = new Normalizer(sub);", "+      Type t1Norm = norm.value(t1);", "+      Type t2Norm = norm.value(t2);", "+    ", "+    //} finally { debug.logEnd(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ab388a0b59c10a19fc9e3e6efde6c44", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 85, "signatureBeforeChange": "     @Override public Type forIntersectionTypeOnly(IntersectionType t, Iterable<? extends Type> normTypes)", "signatureAfterChange": "          @Override public Type forIntersectionTypeOnly(IntersectionType t, Iterable<? extends Type> normTypes)", "diff": ["-  private final TypeUpdateVisitor NORMALIZE = new TypeUpdateVisitor() {", "+    ", "-      debug.logStart(new String[]{\"t\",\"normTypes\"}, wrap(t), wrap(normTypes));", "-      Type result = MEET_NORM.value(normTypes);", "-      debug.logEnd(\"result\", wrap(result));", "+      //debug.logStart(new String[]{\"t\",\"normTypes\"}, wrap(t), wrap(normTypes)); try {", "+      Type result = new NormMeeter(_subtyper).value(normTypes);", "+      //} finally { debug.logEnd(); }"]}], "num": 28597}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5fc8abbc55c1c88cf130884a53129a4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd6957335bd278980c1d78b88bfafb34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 136, "signatureBeforeChange": "   public static FileFilter extensionFileFilter(String extension, FileFilter also)", "signatureAfterChange": "     public boolean accept(File f)", "diff": ["-  public static FileFilter extensionFileFilter(String extension, FileFilter also) {", "-    return asFileFilter(extensionFilePredicate(extension, asPredicate(also)));", "+    public SamePathFilePredicate(File f) { _f = canonicalCase(f); }", "+    public boolean accept(File f) {", "+      File candidate = canonicalCase(attemptAbsoluteFile(f));", "+      for (File compareTo = _f; compareTo != null; compareTo = compareTo.getParentFile()) {", "+        if (candidate == null || !compareTo.getName().equals(candidate.getName())) {", "+          return false;", "+        }", "+        candidate = candidate.getParentFile();", "+      }", "+      return true;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccabe779f1d8bf72109adf3b9cb322ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 278, "methodNumberAfterChange": 308, "signatureBeforeChange": "   private boolean isMoreSpecific(SignatureChecker sig1, SignatureChecker sig2)", "signatureAfterChange": "     public boolean moreSpecificThan(FunctionInvocationCandidate<I> c)", "diff": ["+     */", "+    public boolean moreSpecificThan(FunctionInvocationCandidate<I> c) {", "+      SignatureMatcher m = makeMatcher(c.typeParameters(), EMPTY_TYPE_ITERABLE, c.parameterTypes(), ", "+                                       IterUtil.mapSnapshot(parameterTypes(), EMPTY_EXPRESSION_FOR_TYPE),", "+                                       BOTTOM, NONE_TYPE_OPTION);", "+      return m.matches();", "+    }", "-   */", "-  private boolean isMoreSpecific(SignatureChecker sig1, SignatureChecker sig2) {", "-    SignatureChecker c = makeChecker(sig2.typeParameters(), EMPTY_TYPE_ITERABLE, sig2.parameters(), ", "-                                     IterUtil.mapSnapshot(sig1.parameters(), EMPTY_EXPRESSION_FOR_TYPE),", "-                                     BOTTOM, NONE_TYPE_OPTION);", "-    return c.matches();", "-  }"]}], "num": 7895}
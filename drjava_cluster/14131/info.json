{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "864b09b8ffec6dee484e1a6e10542461", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07da5ebc197f99a3d829467fd87f81ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ArrayData.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "          public void setUp()", "signatureAfterChange": "          public void setUp()", "diff": ["-      llv = new LanguageLevelVisitor(new File(\"\"), \"\", new LinkedList<String>(), new LinkedList<String>(),", "-                                                          new LinkedList<String>(), new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>(), ", "-                                                          new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+      llv = new LanguageLevelVisitor(new File(\"\"), ", "+                                     \"\", ", "+                                     new LinkedList<String>(), ", "+                                     new LinkedList<String>(),", "+                                     new LinkedList<String>(), ", "+                                     new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "-      LanguageLevelConverter.symbolTable = llv.symbolTable = new Symboltable();", "+      LanguageLevelConverter.symbolTable.clear();", "+      LanguageLevelConverter._newSDs.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "153808956867d076f495eb7c15e713b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public SymbolData getSymbolData(String className, JExpression jexpr, boolean giveException, boolean runnableNotOkay)", "signatureAfterChange": "   public SymbolData getSymbolData(String className, JExpression jexpr, boolean giveException, boolean runnableNotOkay)", "diff": ["-                               _package, ", "+                               _package,", "+                               null,  // enclosing class for top level traversal", "-                               new LinkedList<String>(), ", "-                               new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>(), ", "-                               new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "-//    LanguageLevelConverter.symbolTable = llv.symbolTable = this.symbolTable;", "+                               new HashSet<String>(), ", "+                               new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>(),", "+                               new LinkedList<Command>());", "+", "-    SymbolData sd = llv.getSymbolData(className, si, false, false, false, true); // TODO: Is this right?", "+    assert LanguageLevelConverter.symbolTable.containsKey(\"java.lang.Object\");", "+    SymbolData sd = llv.getSymbolData(className, si, false, true); // TODO: Is this right?", "+//    if (sd == null) {", "+//      System.err.println(\"***ALARM*** The following symbol was not found in symbolTable: \" + className);", "+//    }", "+//    else if (sd.getName().equals(\"java.lang.Throwable\"))", "+//          System.err.println(\"*** Package for retrieved java.lang.Throwable is \" + sd.getPackage());"]}], "num": 14131}
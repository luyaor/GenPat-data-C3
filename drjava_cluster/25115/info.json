{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e18e8509df942f3c1960f1f5e7503bc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bb36452d54555a9c2058f4f2a4ba39d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private int _highlightKeywords(Vector<HighlightStatus> v, int i)", "signatureAfterChange": "   private int _highlightKeywords(Vector<HighlightStatus> v, int i)", "diff": ["-    // throwErrorHuh();", "-    try {", "-      text = getText(original.getLocation(), original.getLength());", "-    }", "-    catch (BadLocationException e) {", "-      e.printStackTrace();", "-      throw new RuntimeException(e.toString());", "-    }", "+    try { text = getText(original.getLocation(), original.getLength()); }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "-    // Because this text is not quoted or commented, we can use the simpler", "-    // tokenizer StringTokenizer.", "-    // We have to return delimiters as tokens so we can keep track of positions", "-    // in the original string.", "+    // Because this text is not quoted or commented, we can use the simpler tokenizer StringTokenizer. We have ", "+    // to return delimiters as tokens so we can keep track of positions in the original string.", "-    // start and length of the text that has not yet been put back into the", "-    // vector.", "+    // start and length of the text that has not yet been put back into the vector.", "-    // Index where we are in the vector. It's the location we would insert", "-    // new things into.", "+    // Index where we are in the vector. It's the location we would insert new things into."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4306b70df0d26c1e30bea12321403c63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "commitAfterChange": "22cb21cbc806aa257284ccfb5bed593a93cc9671", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "    public int replaceAll()", "signatureAfterChange": "   public int replaceAll()", "diff": ["-   */ ", "+   */", "+    try {", "+      if (!_searchBackwards){", "+        _start = _doc.createPosition(0);", "+        setPosition(0);", "+      } else {", "+        _start = _doc.createPosition(_doc.getLength());", "+        setPosition(_doc.getLength());", "+      }", "+    } catch (BadLocationException e) {", "+      throw new UnexpectedException(e);", "+    }", "-    int wrapped = 0; ", "+    int wrapped = 0;", "-    // Checks that the findNext method has found something and has not ", "-    // wrapped once and gone beyond start. ", "-    while (found >= 0 && (wrapped == 0 || found <= _start.getOffset()) && ", "-    wrapped < 2) {", "+    // Checks that the findNext method has found something and has not", "+    // wrapped once and gone beyond start.", "+//    while (found >= 0 && (wrapped == 0 ||", "+//                         ((found < _start.getOffset() + _findWord.length() && !_searchBackwards)  ||", "+//                          (found > _start.getOffset() - _findWord.length() && _searchBackwards))) && wrapped < 2) {", "+", "+    //new while condition, since I started replacing from the beginning/end of the document only", "+    while(wrapped == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44a863a6eb69a7f0817141f0f96e5c07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private String getTextFor(OpenDefinitionsDocument doc)", "signatureAfterChange": "      private String getTextFor(OpenDefinitionsDocument doc)", "diff": ["-    try{", "-      text = doc.getText(0, doc.getLength());", "-    }catch(BadLocationException e){", "-      text = \"\";", "-    }", "+    try { text = doc.getText(0, doc.getLength()); }", "+    catch(BadLocationException e) { text = \"\"; }", "+    ", "-    for(int i=0;i<4;i++){", "-      if(start > 0){", "-        start = text.lastIndexOf(endl, start-endl.length());", "-      }", "+    for (int i = 0; i < 4; i++) {", "+      if (start > 0) start = text.lastIndexOf(endl, start-endl.length());", "-    if(start == -1) start = 0;", "+    if (start == -1) start = 0;", "+    ", "-    if(doc.getLength() >= endl.length() && text.substring(start, start+endl.length()) == endl) start+=endl.length();", "-    ", "-    ", "+    // if (doc.getLength() >= endl.length() && text.substring(start, start+endl.length()) == endl) start+=endl.length();", "+    if (doc.getLength() >= endl.length() && text.substring(start, start+endl.length()).equals(endl)) start+=endl.length();", "-    for(int i=0;i<4;i++){", "-      if(end < doc.getLength()){", "+    for (int i=0;i<4;i++) {", "+      if (end < doc.getLength()) {", "-        if(index != -1) end = index;", "+        if (index != -1) end = index;", "-    if(end < start) end = start;", "+    if (end < start) end = start;"]}], "num": 25115}
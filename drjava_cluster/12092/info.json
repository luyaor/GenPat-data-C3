{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56dbc99a0a7b6ca98aa7ff3b356b7bfb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42c8060dd92436208e11c22ffc368400", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ea3de3bd50de8d728bdb5d615bd9b8838d2e94b4", "commitAfterChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 273, "signatureBeforeChange": "   void _moveToAuxiliary()", "signatureAfterChange": "   void _moveToAuxiliary()", "diff": ["-    OpenDefinitionsDocument d = _model.getDocumentNavigator().getCurrent();", "-    if (d != null) {", "-      if (! d.isUntitled()) {", "-        _model.addAuxiliaryFile(d);", "-        try{", "-          _model.getDocumentNavigator().refreshDocument(d, _model.fixPathForNavigator(d.getFile().getCanonicalPath()));", "+    // now works with multiple files", "+    java.util.List<OpenDefinitionsDocument> l = _model.getDocumentNavigator().getSelectedDocuments();", "+    for (OpenDefinitionsDocument d: l) {", "+      if (d != null) {", "+        if (! d.isUntitled()) {", "+          _model.addAuxiliaryFile(d);", "+          try{", "+            _model.getDocumentNavigator().refreshDocument(d, _model.fixPathForNavigator(d.getFile().getCanonicalPath()));", "+          }", "+          catch(IOException e) { /* do nothing */ }", "-        catch(IOException e) { /* do nothing */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afeb3ce645371770c625dc7dfdacadfa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "8e720afa329dc77cc45a6aba8a5a211e38ce857f", "commitAfterChange": "8a50a7d4180dfbf8ce4f8b3b2ddf43887adf7c81", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["-    JDKToolsLibrary fromRuntime = JDKToolsLibrary.makeFromRuntime(this);", "+    Iterable<JDKToolsLibrary> allFromRuntime = JDKToolsLibrary.makeFromRuntime(this);", "-    JavaVersion.FullVersion runtimeVersion = fromRuntime.version();", "-    if (fromRuntime.isValid()) {", "-      if (!results.containsKey(coarsenVersion(runtimeVersion))) {", "-        JarJDKToolsLibrary.msg(\"From runtime: \"+fromRuntime);", "-        results.put(coarsenVersion(runtimeVersion), fromRuntime);", "+    for(JDKToolsLibrary fromRuntime: allFromRuntime) {", "+      JavaVersion.FullVersion runtimeVersion = fromRuntime.version();", "+      if (fromRuntime.isValid()) {", "+        if (!results.containsKey(coarsenVersion(runtimeVersion))) {", "+          JarJDKToolsLibrary.msg(\"From runtime: \"+fromRuntime);", "+          results.put(coarsenVersion(runtimeVersion), fromRuntime);", "+        }", "+        else { JarJDKToolsLibrary.msg(\"From runtime: duplicate \"+fromRuntime); }", "-      else { JarJDKToolsLibrary.msg(\"From runtime: duplicate \"+fromRuntime); }", "+      else { JarJDKToolsLibrary.msg(\"From runtime: invalid \"+fromRuntime); }", "-    else { JarJDKToolsLibrary.msg(\"From runtime: invalid \"+fromRuntime); }"]}], "num": 12092}
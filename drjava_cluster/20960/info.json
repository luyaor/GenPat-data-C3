{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07a459f47b4c897e1cec512d24543db1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0045f5e951c21b0cb2ec410b7aaa9298", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 444, "methodNumberAfterChange": 444, "signatureBeforeChange": "\r \r   public void forDivideExpression(DivideExpression that)", "signatureAfterChange": "    public void forDivideExpression(DivideExpression that)", "diff": ["-\r", "-  public void forDivideExpression(DivideExpression that) {\r", "-    forDivideExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forDivideExpressionOnly(that);\r", "-  }\r", "+", "+  public void forDivideExpression(DivideExpression that) {", "+    forDivideExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forDivideExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2069293f57c16b09b1a580e399a450f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 428, "methodNumberAfterChange": 428, "signatureBeforeChange": "\r \r   public void forAndExpression(AndExpression that)", "signatureAfterChange": "    public void forAndExpression(AndExpression that)", "diff": ["-\r", "-  public void forAndExpression(AndExpression that) {\r", "-    forAndExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forAndExpressionOnly(that);\r", "-  }\r", "+", "+  public void forAndExpression(AndExpression that) {", "+    forAndExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forAndExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1aab2d44e368d480e7379ac2f52b9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 445, "methodNumberAfterChange": 445, "signatureBeforeChange": "\r \r   public void forModExpression(ModExpression that)", "signatureAfterChange": "    public void forModExpression(ModExpression that)", "diff": ["-\r", "-  public void forModExpression(ModExpression that) {\r", "-    forModExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forModExpressionOnly(that);\r", "-  }\r", "+", "+  public void forModExpression(ModExpression that) {", "+    forModExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forModExpressionOnly(that);", "+  }"]}], "num": 20960}
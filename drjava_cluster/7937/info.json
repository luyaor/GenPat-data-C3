{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e63c9edaeb49acbad29350a2f75070b4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5470aef0a15a2f43bc0f805c941dbe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "commitAfterChange": "bd7a2dd06a797f540fad2fc718c0924e6e0b267b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "signatureAfterChange": "      public void testSaveProject()", "diff": ["-  public void testSaveProject() throws IOException, MalformedProjectFileException {", "-    ", "+  public void testSaveProject() {  ", "-      public void run() { ", "-        _frame.openProject(new FileOpenSelector() {", "-          public File[] getFiles() throws OperationCanceledException { return new File[] {_projFile}; }", "-        });", "-        ", "-        // open a new file and make it an auxiliary file", "-        _frame.open(new FileOpenSelector() {", "-          public File[] getFiles() throws OperationCanceledException { return new File[] {_auxFile}; }", "-        });", "-        _frame._moveToAuxiliary();", "-", "-        List<OpenDefinitionsDocument> auxDocs = _model.getAuxiliaryDocuments();", "-        assertEquals(\"One auxiliary document\", 1, auxDocs.size());", "-        _frame.saveProject();", "-        _frame._closeProject();", "-      } ", "+      public void run() {", "+        try {", "+          _frame.openProject(new FileOpenSelector() {", "+            public File[] getFiles() throws OperationCanceledException { return new File[] { _projFile}; }", "+          });", "+          ", "+          // open a new file and make it an auxiliary file", "+          _frame.open(new FileOpenSelector() {", "+            public File[] getFiles() throws OperationCanceledException { return new File[] { _auxFile}; }", "+          });", "+          _frame._moveToAuxiliary();", "+          ", "+          List<OpenDefinitionsDocument> auxDocs = _model.getAuxiliaryDocuments();", "+          assertEquals(\"One auxiliary document\", 1, auxDocs.size());", "+          _frame.saveProject();", "+          _frame._closeProject();", "+          ", "+          List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+          assertEquals(\"One empty document remaining\", 1, docs.size());", "+          assertEquals(\"Name is (Untitled)\", \"(Untitled)\", _model.getActiveDocument().toString());", "+          ", "+          ProjectFileIR pfir = ProjectFileParserFacade.ONLY.parse(_projFile);", "+          DocFile[] src = pfir.getSourceFiles();", "+//          System.err.println(Arrays.toString(src));", "+          DocFile[] aux = pfir.getAuxiliaryFiles();", "+//          System.err.println(Arrays.toString(aux));", "+          assertEquals(\"Number of saved src files\", 2, src.length);", "+          assertEquals(\"Number of saved aux files\", 1, aux.length);", "+          assertEquals(\"wrong name for _file2\", _file2.getCanonicalPath(), src[1].getCanonicalPath()); // assumes same (not reverse) order", "+          assertEquals(\"Wrong name for _file1\", _file1.getCanonicalPath(), src[0].getCanonicalPath());", "+          assertEquals(\"Wrong aux file\", _auxFile.getCanonicalPath(), aux[0].getCanonicalPath());", "+        }", "+        catch(Exception e) { throw new UnexpectedException(e); }", "+      }", "-    Utilities.clearEventQueue();", "-    ", "-    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "-    assertEquals(\"One empty document remaining\", 1, docs.size());", "-    assertEquals(\"Name is (Untitled)\", \"(Untitled)\", _model.getActiveDocument().toString());", "-    ", "-    ProjectFileIR pfir = ProjectFileParserFacade.ONLY.parse(_projFile);", "-    DocFile[] src = pfir.getSourceFiles();", "-//    System.err.println(Arrays.toString(src));", "-    DocFile[] aux = pfir.getAuxiliaryFiles();", "-//    System.err.println(Arrays.toString(aux));", "-    assertEquals(\"Number of saved src files\", 2, src.length);", "-    assertEquals(\"Number of saved aux files\", 1, aux.length);", "-    assertEquals(\"wrong name for _file2\", _file2.getCanonicalPath(), src[1].getCanonicalPath()); // assumes same (not reverse) order", "-    assertEquals(\"Wrong name for _file1\", _file1.getCanonicalPath(), src[0].getCanonicalPath());", "-    assertEquals(\"Wrong aux file\", _auxFile.getCanonicalPath(), aux[0].getCanonicalPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f36ccc86502cd8bc0c62436e5fc36e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/TigerUtilities.java", "commitBeforeChange": "66067a3f1d3a007b2ddad388dba56bb3c6f9df80", "commitAfterChange": "81d6db8320cf4667127c44e5b1de134b58b6f3dc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static boolean isEnum(Class<?> c)", "signatureAfterChange": "     public static boolean isEnum(Class<?> c)", "diff": ["-    return _tigerEnabled && c.isEnum();", "+    try {", "+      return _tigerEnabled && (c.getSuperclass() == Class.forName(\"java.lang.Enum\"));", "+    }", "+    // this try/catch block should in fact not be there, but to use", "+    // c.isEnum() instead if the value of the ENUM flag", "+    // was known (see commented line below)", "+    catch(ClassNotFoundException e){", "+      throw new ExecutionError(\"Tiger is enabled, but cannot find class java.lang.Enum! Please contact the DynamicJava/DrJava team (javaplt@cs.rice.edu).\");", "+    }", "+    ", "+    //return _tigerEnabled && c.isEnum();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eeb9c3f12a45bab329e7d68a48f005f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachineTest.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "      private void _testFindNextSucceeds(FindReplaceMachine frm, ContinueCommand cont,                                      int start, int found, AbstractDocumentInterface doc)", "signatureAfterChange": "      private void _testFindNextSucceeds(FindReplaceMachine frm, ContinueCommand cont, int start, int found,                                       OpenDefinitionsDocument doc)", "diff": ["-  private void _testFindNextSucceeds(FindReplaceMachine frm, ContinueCommand cont,", "-                                     int start, int found, AbstractDocumentInterface doc)", "-  {", "-    FindResult fr = frm.findNext();", "-    AbstractDocumentInterface d = fr.getDocument();", "-    if (frm.getDocument() != d) {", "-      // do FindReplaceDialog's _updateMachine", "-      frm.setDocument(d);", "-      frm.setStart(found);", "-      frm.setPosition(found);", "-    }", "-    Utilities.clearEventQueue();", "+  private void _testFindNextSucceeds(FindReplaceMachine frm, ContinueCommand cont, int start, int found, ", "+                                     OpenDefinitionsDocument doc) {", "+    try {", "+      FindResult fr = frm.findNext();", "+      OpenDefinitionsDocument d = fr.getDocument();", "+      if (frm.getDocument() != d) {", "+        // do FindReplaceDialog's _updateMachine", "+//        Utilities.show(\"return doc = \" + d + \" distinct from current machine doc = \" + frm.getDocument());", "+        frm.setDocument(d);", "+        frm.setPosition(found);", "+      }", "+      Utilities.clearEventQueue();", "-    assertEquals(\"findNext return value\", found, fr.getFoundOffset());", "-    _assertOffsets(frm, start, found);", "-    assertTrue(\"on find text\", frm.isOnMatch());", "+      assertEquals(\"findNext return value\", found, fr.getFoundOffset());", "+      _assertOffsets(frm, start, found);", "+      assertTrue(\"on find text\", frm.isOnMatch());", "+    }", "+    catch(Exception e) { fail(\"Threw exception: \" + e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85efd721a087268c8906a4652ce8e327", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public synchronized void setBuildDirectory(File f)", "signatureAfterChange": "   public synchronized void setBuildDirectory(File f)", "diff": ["-      _interpreterControl.addClassPath(f.getAbsolutePath());", "+      try{", "+        _interpreterControl.addBuildDirectoryClassPath(new File(f.getAbsolutePath()).toURL());", "+      }catch(MalformedURLException murle){", "+        // this is bad! change this! we should handle this exception better!", "+        // show a popup like \"invalide build directory\" or something", "+        throw new RuntimeException(murle);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc1f5729787c62911f7059ec68f71db3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ClassAndInterfaceFinder.java", "commitBeforeChange": "816e415ebd3619964409d5b7c5a5d20fa993a7b5", "commitAfterChange": "79e38a44be6c4c379730bdfb5468461330077836", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public ClassAndInterfaceFinder(File f)", "signatureAfterChange": "   public ClassAndInterfaceFinder(File f)", "diff": ["-  public ClassAndInterfaceFinder(File f){", "-    _file = f;", "+  /* normal constructor */", "+  public ClassAndInterfaceFinder(File f) {", "+    Reader r;", "+    try {", "+      r = new FileReader(f);", "+    }", "+    catch(FileNotFoundException e) { /* create a Reader for an \"empty\" file */", "+      r = new StringReader(\"\");", "+    }", "+    initialize(r);", "+  }"]}], "num": 7937}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba49004e3b686a6bb8feb1aa27c0dfac", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f8194315966c296735dec6c03d7f75a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testDups() throws BadLocationException", "signatureAfterChange": "   public void testDups() throws BadLocationException", "diff": ["-    ListModel docs = _mf.getModel().getDefinitionsDocs();", "-    assertEquals(\"Exactly two documents?\", 2, docs.getSize());", "-    OpenDefinitionsDocument doc1 = (OpenDefinitionsDocument)docs.getElementAt(0);", "-    assertEquals(\"Correct length of file 1?\", ", "-                 f1_contents.length(), ", "+    List<OpenDefinitionsDocument> docs = _mf.getModel().getDefinitionsDocuments();", "+    assertEquals(\"Exactly two documents?\", 2, docs.size());", "+    OpenDefinitionsDocument doc1 = docs.get(0);", "+    assertEquals(\"Correct length of file 1?\",", "+                 f1_contents.length(),", "-                 f1_contents, ", "+                 f1_contents,", "-    OpenDefinitionsDocument doc2 = (OpenDefinitionsDocument)docs.getElementAt(1);", "-    assertEquals(\"Correct length of file 2?\", ", "-                 f2_contents.length(), ", "+    OpenDefinitionsDocument doc2 = docs.get(1);", "+    assertEquals(\"Correct length of file 2?\",", "+                 f2_contents.length(),", "-                 f2_contents, ", "+                 f2_contents,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d30d0458b3f54e648e1e10b3a3a5abc4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "edb6c56f8ad5495255b4157f1e495f302271cd2d", "commitAfterChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void testInteractionsCanSeeCompile()     throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testInteractionsCanSeeCompiledClasses()     throws BadLocationException, IOException, InterruptedException", "diff": ["-  public void testInteractionsCanSeeCompile()", "+  public void testInteractionsCanSeeCompiledClasses()", "-    OpenDefinitionsDocument doc = setupDocument(FOO_TEXT);", "-    _doCompile(doc, tempFile());", "+    // Compile Foo", "+    OpenDefinitionsDocument doc1 = setupDocument(FOO_TEXT);", "+    File dir1 = new File(_tempDir, \"dir1\");", "+    dir1.mkdir();", "+    File file1 = new File(dir1, \"TestFile1.java\");", "+    _doCompile(doc1, file1);", "-", "+    assertEquals(\"interactions result\",", "+                 \"DrJavaTestFoo\",", "+                 result);", "+    ", "+    // Add directory 1 to extra classpath and close doc1", "+    Vector<File> cp = new Vector<File>();", "+    cp.addElement(dir1);", "+    DrJava.CONFIG.setSetting(EXTRA_CLASSPATH, cp);", "+    _model.closeFile(doc1);", "+    ", "+    // Compile Baz which extends Foo in another directory.", "+    OpenDefinitionsDocument doc2 = setupDocument(BAZ_TEXT);", "+    File dir2 = new File(_tempDir, \"dir2\");", "+    dir2.mkdir();", "+    File file2 = new File(dir2, \"TestFile1.java\");", "+    _doCompile(doc2, file2);", "+    ", "+    // Ensure that Baz can use the Foo class from extra classpath", "+    result = interpret(\"new DrJavaTestBaz().getClass().getName()\");", "+    assertEquals(\"interactions result\",", "+                 \"DrJavaTestBaz\",", "+                 result);", "+    ", "+    // Also ensure that Foo can be used directly", "+    result = interpret(\"new DrJavaTestFoo().getClass().getName()\");"]}], "num": 15432}
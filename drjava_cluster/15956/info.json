{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccc523cf152336547baf8e9806e516ca", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4369fef60a12d4d5ac9b92ce168cad38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "commitAfterChange": "1e5237b2401d25a04c08b7b54162568a6d55c836", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 67, "signatureBeforeChange": "   private synchronized void _indentBlock(final int start, final int end, int reason)", "signatureAfterChange": "   private synchronized void _indentBlock(final int start, final int end,                                          int reason, ProgressMonitor pm)       throws OperationCanceledException", "diff": ["-  private synchronized void _indentBlock(final int start, final int end, int reason) {", "+  private synchronized void _indentBlock(final int start, final int end,", "+                                         int reason, ProgressMonitor pm)", "+      throws OperationCanceledException {", "+        // We currently ignore current location info from each line, because", "+        // it probably doesn't make sense in a block context.", "+        ", "+        if (pm != null) {", "+          // Update ProgressMonitor.", "+          pm.setProgress(walker);", "+          ", "+          // Check for cancel button-press.", "+          if (pm.isCanceled()) {", "+            throw new OperationCanceledException();", "+          }", "+        }", "+        ", "-    } catch (BadLocationException e) {", "+    }", "+    catch (BadLocationException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "538d610d4fbcf4802bc0f4ec66c58cce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d331e9af4b7210b21c235397f4a55183e132c12e", "commitAfterChange": "4a4ec2d05d53f85461639265168dfd632b3bdad1", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "     public TestResult startJUnit() throws IOException", "signatureAfterChange": "     public TestResult startJUnit() throws IOException", "diff": ["-        TestRunner testRunner = getTestRunner();", "+        JUnitTestRunner testRunner = getTestRunner();", "-        Test suite= testRunner.getTest(testFilename);", "+        try {", "+          if (! testRunner.isTestCase(testFilename)) {", "+            notifyListeners(new EventNotifier() {", "+              public void notifyListener(GlobalModelListener l) {", "+              l.nonTestCase();", "+              l.junitEnded();", "+            }", "+            });", "+            return null;", "+          }", "+        }", "+        catch (ClassNotFoundException e) {", "+          throw new UnexpectedException(e);", "+        }", "+        ", "+        Test suite = testRunner.getTest(testFilename);", "-      } catch (IllegalStateException e) {", "+      } ", "+      catch (IllegalStateException e) {"]}], "num": 15956}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1243904c3298fcd8c1656d0c0b2725b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23243264b0f1d0bd6fefa1f8666bd0d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void _init()", "signatureAfterChange": "     private void _init()", "diff": ["-      public Boolean itemCase(OpenDefinitionsDocument doc) {", "+      public Boolean itemCase(OpenDefinitionsDocument doc, Object... p) {", "+        Boolean modelInitiated = (Boolean)p[0];", "+//        if (!modelInitiated) {", "+//          IDocumentNavigator.LOG.log(\"_gainVisitor; modelInitiated = false\");", "+//        }", "+        if (!modelInitiated) { addToBrowserHistory(); }", "+        if (!modelInitiated) { addToBrowserHistory(); }", "-      public Boolean fileCase(File f) {", "+      public Boolean fileCase(File f, Object... p) {", "-      public Boolean stringCase(String s) { return Boolean.valueOf(false); }", "+      public Boolean stringCase(String s, Object... p) { return Boolean.valueOf(false); }", "-      public void gainedSelection(NodeData<? extends OpenDefinitionsDocument> dat) { dat.execute(_gainVisitor); }", "-      public void lostSelection(NodeData<? extends OpenDefinitionsDocument> dat) {", "-      // not important, only one document selected at a time", "-      }", "+      public void gainedSelection(NodeData<? extends OpenDefinitionsDocument> dat, boolean modelInitiated) {", "+        dat.execute(_gainVisitor, modelInitiated); }", "+      public void lostSelection(NodeData<? extends OpenDefinitionsDocument> dat, boolean modelInitiated) {", "+        /* not important, only one document selected at a time */ }", "-    clipboardHistorySizeListener.optionChanged(new OptionEvent<Integer>(CLIPBOARD_HISTORY_SIZE,", "-                                                                        DrJava.getConfig().getSetting(CLIPBOARD_HISTORY_SIZE).intValue()));", "+    ClipboardHistoryModel.singleton().resize(DrJava.getConfig().getSetting(CLIPBOARD_HISTORY_SIZE).intValue());", "+    ", "+    // setup option listener for browser history", "+    OptionListener<Integer> browserHistoryMaxSizeListener = new OptionListener<Integer>() {", "+      public void optionChanged(OptionEvent<Integer> oce) {", "+        AbstractGlobalModel.this.getBrowserHistoryManager().setMaximumSize(oce.value);", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(BROWSER_HISTORY_MAX_SIZE, browserHistoryMaxSizeListener);", "+    getBrowserHistoryManager().setMaximumSize(DrJava.getConfig().getSetting(BROWSER_HISTORY_MAX_SIZE).intValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95867146e9b9e70cc1bad853c54a1eb6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/ColoringView.java", "commitBeforeChange": "f743eab51273b837fbfd0fee9aa664f2f031c583", "commitAfterChange": "0ad47f4e9ecbbfc43121de14376bb3d222538453", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   ColoringView(Element elem)", "signatureAfterChange": "   ColoringView(Element elem)", "diff": ["-", "-    ColorOptionListener col = new ColorOptionListener();", "+    final ColorOptionListener col = new ColorOptionListener();", "+//", "+//    final Document doc = getDocument();", "+//    if(doc instanceof DefinitionsDocument){", "+//      // delete the old color listeners, because they're hanging onto the wrong coloringview", "+//      // add color listeners to highlight keywords etc", "+//      ((DefinitionsDocument)doc).clearOptionListeners();", "+//      ((DefinitionsDocument)doc).addOptionListener( OptionConstants.DEFINITIONS_COMMENT_COLOR, col);", "+//      ((DefinitionsDocument)doc).addOptionListener( OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, col);", "+//      ((DefinitionsDocument)doc).addOptionListener( OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, col);", "+//      ((DefinitionsDocument)doc).addOptionListener( OptionConstants.DEFINITIONS_NORMAL_COLOR, col);", "+//      ((DefinitionsDocument)doc).addOptionListener( OptionConstants.DEFINITIONS_KEYWORD_COLOR, col);", "+//      ((DefinitionsDocument)doc).addOptionListener( OptionConstants.DEFINITIONS_NUMBER_COLOR, col);", "+//      ((DefinitionsDocument)doc).addOptionListener( OptionConstants.DEFINITIONS_TYPE_COLOR, col);", "+//", "+//      ", "+//      // remove the listeners when the document closes", "+//      ((DefinitionsDocument)doc).addDocumentClosedListener(new DocumentClosedListener(){", "+//        public void close(){", "+//          ((DefinitionsDocument)doc).clearOptionListeners();", "+//        }", "+//      });", "+    ", "+    Document doc = getDocument();", "+    if(doc instanceof DefinitionsDocument){", "+      // delete the old color listeners, because they're hanging onto the wrong coloringview", "+      // add color listeners to highlight keywords etc", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_COMMENT_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_NORMAL_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_KEYWORD_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_NUMBER_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_TYPE_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_COMMENT_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_NORMAL_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_KEYWORD_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_NUMBER_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_TYPE_COLOR, col);", "+      ", "+      // remove the listeners when the document closes", "+      ((DefinitionsDocument)doc).addDocumentClosedListener(new DocumentClosedListener(){", "+        public void close(){", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_COMMENT_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_NORMAL_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_KEYWORD_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_NUMBER_COLOR, col);", "+          DrJava.getConfig().removeOptionListener( OptionConstants.DEFINITIONS_TYPE_COLOR, col);", "+        }", "+      });", "+}"]}], "num": 6220}
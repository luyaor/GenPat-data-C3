{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c91db13ec2f20d98c6816e44458ca2c2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c29efe0cebfdad052b37c6ddf063e3c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data)", "signatureAfterChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, SymbolData enclosing)", "diff": ["-  public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data) {", "-    forComplexAnonymousClassInstantiationDoFirst(that);", "-    if (prune(that)) return;", "-    ", "-    //visit the enclosing ", "-    that.getEnclosing().visit(this);", "-    ", "-    // no need to resolve the super class of the type being instantiated, because it is a complex type, so its enclosing ", "-    // data should get added to the symbolTable along with it wherever we resolved its enclosing data.", "-    ", "-    //originally, make super class null.  This will be updated in the TypeChecker pass.", "-    anonymousClassInstantiationHelper(that, data, null);", "-", "-    ", "-    forComplexAnonymousClassInstantiationOnly(that);", "+  public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, SymbolData enclosing) {", "+    /* Nested inner computation (e.g., new E().new W()) breaks conformity checking.  So we suppress it. */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97b86e5f65fff6ac017843a943b66274", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void simpleAnonymousClassInstantiationHelper(SimpleAnonymousClassInstantiation that, Data data)", "signatureAfterChange": "   public void simpleAnonymousClassInstantiationHelper(SimpleAnonymousClassInstantiation that, SymbolData enclosing)", "diff": ["-  public void simpleAnonymousClassInstantiationHelper(SimpleAnonymousClassInstantiation that, Data data) {", "-    forSimpleAnonymousClassInstantiationDoFirst(that);", "-    if (prune(that)) return;", "-", "-    //resolve the super class and make sure it will be in the SymbolTable.", "-    SymbolData superC = getSymbolData(that.getType().getName(), that.getSourceInfo());", "-    ", "-    anonymousClassInstantiationHelper(that, data, superC);", "-", "-    forSimpleAnonymousClassInstantiationOnly(that);", "+  public void simpleAnonymousClassInstantiationHelper(SimpleAnonymousClassInstantiation that, SymbolData enclosing) {", "+    /* Nested inner computation (e.g., new E().new W()) breaks conformity checking.  So we suppress it. */"]}], "num": 3732}
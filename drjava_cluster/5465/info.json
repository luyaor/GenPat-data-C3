{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a2ee86d87941d900151b9b31c9f324c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e7d1e3bc9c3308142829f43a6497254", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   protected static void writeSafeToString(SymbolData sd, int baseIndent, String valueToStringName, MethodData[] accessors)", "signatureAfterChange": "   protected static void writeSafeToString(SymbolData sd, int baseIndent, String valueToStringName,                                            MethodData[] accessors)", "diff": ["-  protected static void writeSafeToString(SymbolData sd, int baseIndent, String valueToStringName, MethodData[] accessors) {", "+  protected static void writeSafeToString(SymbolData sd, int baseIndent, String valueToStringName, ", "+                                          MethodData[] accessors) {", "-    VariableData toStringFlag = new VariableData(flagName, new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[]{ \"private\", \"static\" }),", "-                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", JExprParser.NO_SOURCE_INFO, false, false, false, false),", "+    VariableData toStringFlag = new VariableData(flagName, ", "+                                                 new ModifiersAndVisibility(NO_INFO, ", "+                                                                            new String[]{ \"private\", \"static\" }),", "+                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", SourceInfo.NO_INFO, ", "+                                                          false, false, false, false),", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This field is automatically generated by the Language Level Converter. */\" + newLine);", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + ", "+                    \"/** This field is automatically generated by the Language Level Converter. */\" + newLine);", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\" + newLine);", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) +", "+                    \"/** This method is automatically generated by the Language Level Converter. */\" + newLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "624ad44eaf705fcec374da39e247525b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   protected static void writeSafeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef,                                            String valueHashCodeName, MethodData[] accessors)", "signatureAfterChange": "   protected static void writeSafeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef,                                            String valueHashCodeName, MethodData[] accessors)", "diff": ["-    VariableData hashCodeList = new VariableData(listName, new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[]{ \"private\", \"static\" }),", "-                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", JExprParser.NO_SOURCE_INFO, false, false, false, false),", "-                                 true, sd);", "+    VariableData hashCodeList =", "+      new VariableData(listName, new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[]{ \"private\", \"static\" }),", "+                       _llv.getSymbolDataHelper(\"java.util.LinkedList\", SourceInfo.NO_INFO, false, false, false, false),", "+                       true, sd);", "-        _endOfClassVarDefs.add(\"private static java.util.LinkedList<Object> \" + listName + \" = new java.util.LinkedList<Object>();\");", "+        _endOfClassVarDefs.add(\"private static java.util.LinkedList<Object> \" + listName + ", "+                               \" = new java.util.LinkedList<Object>();\");", "-      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This field is automatically generated by the Language Level Converter. */\");", "+      _writeToFileOut(newLine + indentString(baseIndent, 1) + ", "+                      \"/** This field is automatically generated by the Language Level Converter. */\");", "-        _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private static java.util.LinkedList<\" + className + \"> \" + listName + \" = new java.util.LinkedList<\" + className + \">();\" + newLine);", "+        _writeToFileOut(newLine + indentString(baseIndent, 1) +", "+                        \"private static java.util.LinkedList<\" + className + \"> \" + listName + ", "+                        \" = new java.util.LinkedList<\" + className + \">();\" + newLine);", "-        _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private static java.util.LinkedList \" + listName + \" = new java.util.LinkedList();\" + newLine);", "+        _writeToFileOut(newLine + indentString(baseIndent, 1) + ", "+                        \"private static java.util.LinkedList \" + listName + \" = new java.util.LinkedList();\" + newLine);", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\");", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + ", "+                    \"/** This method is automatically generated by the Language Level Converter. */\");"]}], "num": 5465}
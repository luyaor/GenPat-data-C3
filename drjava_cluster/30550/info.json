{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a306c593db6a4245d9429c92b9f7f8a5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "869823509596a394cccf1fcc124eafde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "84ce5397e59f2c9953a60bb68d966b69ec59ad8c", "commitAfterChange": "62cd56918db49abf5170cd3da7ff92f86724ef97", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "    public void indentBlock(int start, int end)", "signatureAfterChange": "   public void indentBlock(final int start, final int end)", "diff": ["-  public void indentBlock(int start, int end)", "+   */", "+  public void indentBlock(final int start, final int end)", "-      int moved = 0;", "-      Position endPos = this.createPosition(end);", "+      // Keep marker at the end. This Position will be the ", "+      // correct endpoint no matter how we change the doc", "+      // doing the indentLine calls.", "+      final Position endPos = this.createPosition(end);", "-      while(start < endPos.getOffset()){", "-        moved = _reduced.getDistToNextNewline();", "-        start += moved;", "-        setCurrentLocation(start);", "+      // Iterate, line by line, until we get to/past the end", "+      int walker = start;", "+", "+      while(walker < endPos.getOffset()) {", "+        setCurrentLocation(walker);", "+", "+        // Keep pointer to walker position that will stay current", "+        // regardless of how indentLine changes things", "+        Position walkerPos = this.createPosition(walker);", "+", "+        // Indent current line", "-        //keeps track of the start and end position", "-        start += endPos.getOffset() - end;", "-        end = endPos.getOffset();", "-        if(start < end)", "-          start++;", "-        setCurrentLocation(start);", "+        // Move back to walker spot", "+        setCurrentLocation(walkerPos.getOffset());", "+        walker = walkerPos.getOffset();", "+", "+        // Adding 1 makes us point to the first character AFTER the", "+        // next newline.", "+        // We don't actually move yet. That happens at the top of the loop,", "+        // after we check if we're past the end.", "+        walker += _reduced.getDistToNextNewline() + 1;", "-    catch (Exception e) {e.printStackTrace();}", "+    catch (BadLocationException e) {", "+      throw new RuntimeException(\"Impossible bad loc except: \" + e);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feaa41945b2f69c83bb6e2663cdf1357", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DefinitionsDocument.java", "commitBeforeChange": "84ce5397e59f2c9953a60bb68d966b69ec59ad8c", "commitAfterChange": "62cd56918db49abf5170cd3da7ff92f86724ef97", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "    public void indentBlock(int start, int end)", "signatureAfterChange": "   public void indentBlock(final int start, final int end)", "diff": ["-  public void indentBlock(int start, int end)", "+   */", "+  public void indentBlock(final int start, final int end)", "-      int moved = 0;", "-      Position endPos = this.createPosition(end);", "+      // Keep marker at the end. This Position will be the ", "+      // correct endpoint no matter how we change the doc", "+      // doing the indentLine calls.", "+      final Position endPos = this.createPosition(end);", "-      while(start < endPos.getOffset()){", "-        moved = _reduced.getDistToNextNewline();", "-        start += moved;", "-        setCurrentLocation(start);", "+      // Iterate, line by line, until we get to/past the end", "+      int walker = start;", "+", "+      while(walker < endPos.getOffset()) {", "+        setCurrentLocation(walker);", "+", "+        // Keep pointer to walker position that will stay current", "+        // regardless of how indentLine changes things", "+        Position walkerPos = this.createPosition(walker);", "+", "+        // Indent current line", "-        //keeps track of the start and end position", "-        start += endPos.getOffset() - end;", "-        end = endPos.getOffset();", "-        if(start < end)", "-          start++;", "-        setCurrentLocation(start);", "+        // Move back to walker spot", "+        setCurrentLocation(walkerPos.getOffset());", "+        walker = walkerPos.getOffset();", "+", "+        // Adding 1 makes us point to the first character AFTER the", "+        // next newline.", "+        // We don't actually move yet. That happens at the top of the loop,", "+        // after we check if we're past the end.", "+        walker += _reduced.getDistToNextNewline() + 1;", "-    catch (Exception e) {e.printStackTrace();}", "+    catch (BadLocationException e) {", "+      throw new RuntimeException(\"Impossible bad loc except: \" + e);", "+    }"]}], "num": 30550}
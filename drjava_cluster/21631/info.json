{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34c09c6d6f2a97dc0c59229881715340", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e70b23c304442e19358fd0ee7af9e37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public TypeData forSimpleNameReference(SimpleNameReference that)", "signatureAfterChange": "   public TypeData forSimpleNameReference(SimpleNameReference that)", "diff": ["-    //first, try to resolve this name as a field or variable reference", "+    // first, try to resolve this name as a field or variable reference", "-      if (!reference.hasValue()) {", "+      if (! reference.hasValue()) {", "-      //if reference is non-static, but context is static, give error", "-      if (!reference.hasModifier(\"static\") && inStaticMethod()) {", "-        _addError(\"Non static field or variable \" + reference.getName() + \" cannot be referenced from a static context\", that);", "+      // if reference is non-static (and not a local variable), but context is static, give error", "+      if (inStaticMethod() && ! reference.hasModifier(\"static\")  && ! reference.isLocalVariable()) {", "+        _addError(\"Non-static variable or field \" + reference.getName() + \" cannot be referenced from a static context\", that);", "-      return reference.getType().getInstanceData();", "-        ", "+      return reference.getType().getInstanceData();  ", "-      ", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e8a54e0cdc23593e69b15debb4fc4f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public TypeData forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that)", "signatureAfterChange": "   public TypeData forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that)", "diff": ["-   */", "+    */", "-    //It is an error to instantiate a non-static inner class from a static context (i.e. new A.B() where B is not a static inner class).", "-    //Here, we make sure that if B is non-static, it is not an inner class of anything.", "+    // Cannot instantiate a non-static inner class from a static context (i.e. new A.B() where B is dynamic).", "+    // Here, we make sure that if B is non-static, it is not an inner class of anything.", "-      _addError(Data.dollarSignsToDots(type.getName()) + \" is not a static inner class, and thus cannot be instantiated from this context.  Perhaps you meant to use an instantiation of the form new \" + firstPart + \"().new \" + secondPart + \"()\", that);", "+      _addError(Data.dollarSignsToDots(type.getName()) + \" is not a static inner class, and thus cannot be \" + ", "+                \"instantiated from this context.  Perhaps you meant to use an instantiation of the form new \" + ", "+                firstPart + \"().new \" + secondPart + \"()\", that);"]}], "num": 21631}
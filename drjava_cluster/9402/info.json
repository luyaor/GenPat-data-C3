{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8727e18b8920a9aab76f0b674d4848f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5226af594d5450d83a74ea3c7ec011", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BreakpointsPanel.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void _initPopup()", "signatureAfterChange": "   protected AbstractAction[] makePopupMenuActions()", "diff": ["-   */", "-  private void _initPopup() {", "-    _breakpointPopupMenu = new JPopupMenu(\"Breakpoint\");", "-    _breakpointPopupMenu.add(new AbstractAction(\"Go to Breakpoint\") {", "-      public void actionPerformed(ActionEvent e) {", "-        _goToBreakpoint();", "-    });", "-    _breakpointPopupMenu.add(new AbstractAction(\"Remove Breakpoint\") {", "-      public void actionPerformed(ActionEvent e) {", "-        _removeBreakpoint();", "-      }", "-    });", "-    _bpTree.addMouseListener(new BreakpointMouseAdapter());", "-  }", "+  /** Makes the popup menu actions. Should be overridden if additional actions besides \"Go to\" and \"Remove\" are added. */", "+  protected AbstractAction[] makePopupMenuActions() {", "+    AbstractAction[] acts = new AbstractAction[] {", "+      new AbstractAction(\"Go to\") {", "+        public void actionPerformed(ActionEvent e) {", "+          goToRegion();", "+        }", "+      },", "+        ", "+        new AbstractAction(\"Remove\") {", "+          public void actionPerformed(ActionEvent e) {", "+            _model.getBreakpointManager().removeRegion(getSelectedRegion());", "+          }", "+        }", "+    };", "+    return acts;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "217d039b1fc70ba95ad96f3fd2651746", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "e2dfab60fe06b4a75e9a9d17c0a9c2d622def7c7", "commitAfterChange": "9ee7f82d7f7234787f3748460b46ad8c5d1fc967", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     void switchToError(CompilerError error)", "signatureAfterChange": "     void switchToError(CompilerError error)", "diff": ["-      _frame.getCurrentDefPane().removeErrorHighlight();  // hide previous error highlight", "+      SingleDisplayModel model = getModel();", "-      ", "+      DefinitionsPane prevPane = _frame.getCurrentDefPane();", "+      prevPane.removeErrorHighlight();  // hide previous error highlight", "+      OpenDefinitionsDocument prevDoc = prevPane.getOpenDefDocument();", "-          OpenDefinitionsDocument doc = getModel().getDocumentForFile(error.file());", "+          OpenDefinitionsDocument doc = model.getDocumentForFile(error.file());", "-          getModel().setActiveDocument(doc);", "+          if (! prevDoc.equals(doc)) model.setActiveDocument(doc);", "+          else model.refreshActiveDocument();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af014a92817e07c47c595a0a17afd5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk6/edu/rice/cs/drjava/model/compiler/Javac160Compiler.java", "commitBeforeChange": "fdceac19a315aa89dd2730a793dce89c488bf5c8", "commitAfterChange": "616a73b61604c7af8836357cef2e57a77aa96d3b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["+    List<File> filteredClassPath = null;", "+    if (classPath!=null) {", "+      filteredClassPath = new LinkedList<File>(classPath);", "+      ", "+      if (_filterExe) {", "+        FileFilter filter = IOUtil.extensionFilePredicate(\"exe\");", "+        Iterator<? extends File> i = filteredClassPath.iterator();", "+        while (i.hasNext()) {", "+          if (filter.accept(i.next())) { i.remove(); }", "+        }", "+        if (_tempJUnit!=null) { filteredClassPath.add(_tempJUnit); }", "+      }", "+    }", "-    Context context = _createContext(classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    Context context = _createContext(filteredClassPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2faae6de1d3ab179b8cb538e6e9c10a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "   public int getWhiteSpace()", "signatureAfterChange": "   private int getWhiteSpace()", "diff": ["+    */", "+  private int getWhiteSpace() {", "+    acquireReadLock();", "+    String text = \"\";", "+    try {", "+      synchronized (_reduced) {", "+        text = getText(_currentLocation, getLength() - _currentLocation); ", "+      }", "-    */", "-  public int getWhiteSpace() {", "-    try { return  getWhiteSpaceBetween(0, getLength() - _currentLocation); } ", "-    catch (BadLocationException e) { e.printStackTrace(); }", "-    return  -1;", "-  }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    finally { releaseReadLock(); }", "+    ", "+    while (i < text.length() && text.charAt(i) == ' ' ) i++;", "+    return i;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48691d2696f15a9b522dc5075b3295e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void setCacheSize(int size)", "signatureAfterChange": "   public synchronized void setCacheSize(int size)", "diff": ["-  ", "-  public void setCacheSize(int size) {", "-    if (size < 0) {", "-      throw new IllegalArgumentException(\"Cannot set the cache size less than 0\");", "-    }", "+  public synchronized void setCacheSize(int size) {", "+    if (_lru.size() >= CACHE_SIZE) {", "+      ListIterator<DocManager> it = _lru.listIterator();", "+      int i = 0;", "+      while (it.hasNext()) {", "+        it.next();", "+        if (i >= CACHE_SIZE) {", "+          it.remove();", "+        }", "+        i++;", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a144b03ff1f40be2bfbe6c30123349", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "3f81b37285813b52f5c285ae3a68ee4a21753a7e", "commitAfterChange": "844a54657c2f878fc1ea01131f59375a436ab7c8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public ListModel getDefinitionsDocuments()", "signatureAfterChange": "   public List<OpenDefinitionsDocument> getDefinitionsDocuments()", "diff": ["-  public ListModel getDefinitionsDocuments() {", "+   */", "+  public List<OpenDefinitionsDocument> getDefinitionsDocuments() {", "+    ArrayList<OpenDefinitionsDocument> docs =", "+      new ArrayList<OpenDefinitionsDocument>(_definitionsDocs.size());", "+    java.util.Enumeration en = _definitionsDocs.elements();", "+  ", "+    while (en.hasMoreElements()) {", "+      docs.add((OpenDefinitionsDocument) en.nextElement());", "+    }", "+  ", "+    return docs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "516f3438150fb92067a46f943a6c9d7b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileTest.java", "commitBeforeChange": "0c506ac270d6b542eb2c43fb49629be8c2634151", "commitAfterChange": "b79f1fd71b5b5ee0af9a3873de718f0b6e4d7b2c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testClasspathTag() throws Exception", "signatureAfterChange": "      public void testClasspathTag() throws Exception", "diff": ["+    ", "+    File classpath_1 = new File(CLASSPATH_1);", "+    File classpath_2 = new File(CLASSPATH_2);", "+    File classpath_3 = new File(CLASSPATH_3);", "+    ", "-    assertTrue(tag.entries()[0].getAbsolutePath().equals(CLASSPATH_1));", "-    assertTrue(tag.entries()[1].getAbsolutePath().equals(CLASSPATH_2));", "-    assertTrue(tag.entries()[2].getAbsolutePath().equals(CLASSPATH_3));", "+    assertTrue(tag.entries()[0].getAbsolutePath().equals(classpath_1.getAbsolutePath()));", "+    assertTrue(tag.entries()[1].getAbsolutePath().equals(classpath_2.getAbsolutePath()));", "+    assertTrue(tag.entries()[2].getAbsolutePath().equals(classpath_3.getAbsolutePath()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dfea79e93b6eb61bf583d5df7b3c622", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d57a4715eeda5394b496008be220f6252b47b950", "commitAfterChange": "ac02f569f5916c295bec9f11458dcf6db5964244", "methodNumberBeforeChange": 376, "methodNumberAfterChange": 378, "signatureBeforeChange": "     public RegionManager<DocumentRegion> getBrowserHistoryManager()", "signatureAfterChange": "     public void clearBrowserRegions()", "diff": ["-    /** @return manager for browser history regions for this document. */", "-    public RegionManager<DocumentRegion> getBrowserHistoryManager() { return _browserHistoryManager; }", "+    /** @return clear the browser history regions for this document. */", "+    public void clearBrowserRegions() { ", "+      BrowserDocumentRegion[] regions = _browserRegions.toArray(new BrowserDocumentRegion[0]);", "+      for (BrowserDocumentRegion r: regions) _browserHistoryManager.remove(r);", "+      _browserRegions.clear();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b0b5b0b93d22e0a1b29f56d07f643e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/Step.java", "commitBeforeChange": "45d0a7affd7689ee8a900d941096751c2f95e51f", "commitAfterChange": "2cd89063cbfbf0917c73ab6eef3bf3a4c73e4766", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   protected void _createRequests() throws DebugException", "signatureAfterChange": "   protected void _createRequests() throws DebugException", "diff": ["-    boolean stepDrJava = DrJava.getConfig().getSetting(DEBUG_STEP_DRJAVA).booleanValue();  ", "+    boolean stepDrJava = DrJava.getConfig().getSetting(DEBUG_STEP_DRJAVA).booleanValue();", "+    String exclude = DrJava.getConfig().getSetting(DEBUG_STEP_EXCLUDE);", "+    StringTokenizer st = new StringTokenizer(exclude, \",\");", "+    while (st.hasMoreTokens()) {", "+      request.addClassExclusionFilter(st.nextToken().trim());", "+    }", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "754e5861478a161bc01341d1c5a80f10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 377, "signatureBeforeChange": "   public String getDisplayFileName(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public List<OpenDefinitionsDocument> getNonProjectDocuments()", "diff": ["-   */", "-  public String getDisplayFileName(OpenDefinitionsDocument doc) { return doc.getDisplayFileName(); }", "+  /** Returns the OpenDefinitionsDocuments that are NOT identified as project source files. */", "+    List<OpenDefinitionsDocument> selectedDocs = new LinkedList<OpenDefinitionsDocument>();", "+    for (OpenDefinitionsDocument d : allDocs) {", "+      if (! d.isInProjectPath() && ! d.isAuxiliaryFile()) selectedDocs.add(d);", "+    return selectedDocs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fafbd59a7451543d104ab0ac36c2fbd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk16/edu/rice/cs/drjava/model/compiler/Javac160Compiler.java", "commitBeforeChange": "0d0c5947e7ead7115690128690c9c431a119fb4d", "commitAfterChange": "e65e40659fdfd375a763123b318964023ee18036", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["+    if (_filterExe) {", "+      FileFilter filter = IOUtil.extensionFileFilter(\"exe\");", "+      Iterator<? extends File> i = classPath.iterator();", "+      while (i.hasNext()) {", "+        if (filter.accept(i.next())) { i.remove(); }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "810f6c0908210fe1a055926276c57ee9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "cf1b07a5f122d4faa57c9cb7ed7def1489ba2183", "commitAfterChange": "cf133e63dac33b490f37f86f2c16723ac73d3ddb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public boolean saveSettings()", "signatureAfterChange": "   public boolean saveSettings()", "diff": ["-//    _mainFrame.saveProject();", "-    return true;", "+    ", "+    Vector<File> extras = _extraClasspathList.getValue();", "+    ClasspathVector cpv = new ClasspathVector();", "+    for(File cf : extras) {", "+      cpv.add(cf);", "+    _mainFrame.getModel().setProjectExtraClasspath(cpv);", "+    ", "+    //    _mainFrame.saveProject();", "+    ", "+    return true;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8972c1875f89553d300cefb865e0115f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 195, "methodNumberAfterChange": 378, "signatureBeforeChange": "   public String getDisplayFullPath(int index)", "signatureAfterChange": "   public List<OpenDefinitionsDocument> getAuxiliaryDocuments()", "diff": ["-  /** Return the absolute path of the file with the given index, or \"(untitled)\" if no file exists. */", "-  public String getDisplayFullPath(int index) {", "-    OpenDefinitionsDocument doc = getOpenDefinitionsDocuments().get(index);", "-    if (doc == null) throw new RuntimeException( \"Document not found with index \" + index);", "-    return doc.getDisplayFullPath();", "-  }", "+   /** Returns the OpenDefinitionsDocuments that are identified as auxiliary project source files. */", "+  public List<OpenDefinitionsDocument> getAuxiliaryDocuments() {", "+    List<OpenDefinitionsDocument> allDocs = getOpenDefinitionsDocuments();", "+    List<OpenDefinitionsDocument> selectedDocs = new LinkedList<OpenDefinitionsDocument>();", "+    for (OpenDefinitionsDocument d : allDocs)", "+      if (d.isAuxiliaryFile()) selectedDocs.add(d);", "+    return selectedDocs;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f1ab6e7bac1f3b08519d0c038009bb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsController.java", "commitBeforeChange": "201b599e7e14dfbbe8e927af829c37bc841f5d12", "commitAfterChange": "21fabb90978768abb803c1055129fe3f21f171fa", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 33, "signatureBeforeChange": "               public void run()", "signatureAfterChange": "   private ImageDescriptor _getStandardIcon(ActionFactory f, IWorkbenchWindow w)", "diff": ["+   */", "+  private ImageDescriptor _getStandardIcon(ActionFactory f, IWorkbenchWindow w) {", "+    ActionFactory.IWorkbenchAction a = f.create(w);", "+    try { return a.getImageDescriptor(); }", "+    finally { a.dispose(); }", "-    ", "-    public void run() { ", "-      //get selection", "-      Object selection = _clipboard.getContents(TextTransfer.getInstance());", "-      if (selection != null) {", "-        _text.insert(selection.toString());", "-      }", "-      //if (selection instanceof String) {", "-      //_text.insert( (String)selection);", "-      //}", "-      ", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b0703ee38ed748772d3639dcf9715bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "34165d14e4d7d5138ad316dc07c21ed2c5c60ba7", "commitAfterChange": "6df23b9d947a754084cff460e34d203b0d81fd48", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public FindReplaceMachine createFindReplaceMachine()", "signatureAfterChange": "      private int _getIndexOfDocument(Document doc)", "diff": ["+  ", "+  private int _getIndexOfDocument(Document doc) {", "+    int index = 0;", "+    Enumeration en = _definitionsDocs.elements();", "+    while (en.hasMoreElements()) {", "+      if (doc == ((OpenDefinitionsDocument)en.nextElement()).getDocument()) {", "+        return index;", "+      }", "+      else {", "+        index++;", "+      }", "+    }", "+    return -1;", "+  }", "-    public FindReplaceMachine createFindReplaceMachine() {", "-      return new FindReplaceMachine();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2ca502bc276c323b74d04745902aacb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/BrowserHistoryManager.java", "commitBeforeChange": "29114a3ab27f49e46885f181f9f058e018ee6b61", "commitAfterChange": "667a3b3eeb7df33831045c52d97320979614b89d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public synchronized void addBrowserRegion(final BrowserDocumentRegion r)", "signatureAfterChange": "      public synchronized void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier)", "diff": ["-  public synchronized void addBrowserRegion(final BrowserDocumentRegion r) {", "-    ", "-    // ignore addition if the same region is on top of region \"stack\"", "-    if (! _regions.isEmpty() && equals(r, _regions.last())) return;", "+  ", "+  public synchronized void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier) {", "+    if (_current != null) {", "+      // flush the stack of regions above _current", "+//      Utilities.show(\"Flushing elements above current = \" + _current);", "+      SortedSet<BrowserDocumentRegion> tail = _regions.tailSet(_current); ", "+//      Utilities.show(\"Tail set above current is \" + tail);", "+      Iterator<BrowserDocumentRegion> it = tail.iterator();", "+      if (it.hasNext()) {", "+        BrowserDocumentRegion nr = it.next();  // skip over current", "+        assert nr == _current;", "+//        Utilities.show(\"Skipped \" + nr);", "+      }", "+      while (it.hasNext()) { ", "+        BrowserDocumentRegion nr = it.next(); ", "+        it.remove(); ", "+//        Utilities.show(\"Removed \" + nr + \", leaving \" + _regions);", "+      }", "+    }", "+//    Utilities.show(\"Before adding, regions = \" + _regions);", "+    notifier.browserChanged();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81cb77ea53c72356e3e7bad79e61376", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AboutDialog.java", "commitBeforeChange": "c302d1db72cb508e0cec30d24e39d48cce8fd663", "commitAfterChange": "68d14b52468e7fad6eb9d5f26ee2e88ac93b395f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "                              public static JComponent createCopyrightTab()", "signatureAfterChange": "                              public static JComponent createCopyrightTab()", "diff": ["+    FileConfiguration config = DrJava.getConfig();", "+    if (config!=null) {", "+      String customDrJavaJarVersionSuffix = config.getSetting(OptionConstants.CUSTOM_DRJAVA_JAR_VERSION_SUFFIX);", "+      if (customDrJavaJarVersionSuffix.length()>0)  {", "+        sb.append(\" with \");", "+        sb.append(customDrJavaJarVersionSuffix);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de8e5812f82b13d77ef98f7d87f3c6c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "530cb3b64455d081e962324602750973729aa1fb", "commitAfterChange": "edb6c56f8ad5495255b4157f1e495f302271cd2d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   synchronized ReferenceType getReferenceType(String className, int lineNumber)", "signatureAfterChange": "   synchronized Vector<ReferenceType> getReferenceTypes(String className,                                                         int lineNumber)", "diff": ["-  synchronized ReferenceType getReferenceType(String className, int lineNumber) {", "+  synchronized Vector<ReferenceType> getReferenceTypes(String className, ", "+                                                       int lineNumber) {", "-    ReferenceType ref = null;", "-    if (classes.size() > 0) {", "-      ref = (ReferenceType) classes.get(0);", "+    //if (classes.size() > 0) {", "+    ", "+    // Return each valid reference type", "+    Vector<ReferenceType> refTypes = new Vector<ReferenceType>();", "+    ReferenceType ref = null;", "+    for (int i=0; i < classes.size(); i++) {", "+      ref = (ReferenceType) classes.get(i);", "-          for (int i = 0; i < innerRefs.size(); i++) {", "+          for (int j = 0; j < innerRefs.size(); j++) {", "-              ReferenceType currRef = (ReferenceType) innerRefs.get(i);", "+              ReferenceType currRef = (ReferenceType) innerRefs.get(j);", "-      if (ref != null && !ref.isPrepared()) {", "-         return null;", "+      if ((ref != null) && ref.isPrepared()) {", "+        refTypes.addElement(ref);", "+      //if (ref != null && !ref.isPrepared()) {", "+      //   return null;", "+      //}", "-    return ref;", "+    return refTypes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8714b44ba7fb4cc3b1730723e5f5749", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "2ce092662f68aa401d3206a9a3bf36bc4d9e733f", "commitAfterChange": "420215825e681a0b291c00f3cf7aa39a982faffe", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "          public InternalCellRenderer(JList list)", "signatureAfterChange": "   public boolean selectDocumentAt(int x, int y)", "diff": ["-    ", "-    public InternalCellRenderer(JList list) {", "-      _list = list;", "-      setOpaque(true);", "-    }", "+   */", "+  public boolean selectDocumentAt(int x, int y) {", "+    int idx = locationToIndex(new java.awt.Point(x,y));", "+    java.awt.Rectangle rect = getCellBounds(idx, idx);", "+    ", "+    if(rect.contains(x, y)){", "+      setActiveDoc(_docs.get(idx));", "+      return true;", "+    }else{", "+      return false;", "+    }", "+  }"]}], "num": 9402}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88a691d4a17d747a0d56d638b204951f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "418e46e52d877fedb47c1187ff6ef624", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public synchronized void testMultiThreadedSetCurrentThread()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testMultiThreadedSetCurrentThread() throws Exception", "diff": ["-  public synchronized void testMultiThreadedSetCurrentThread()", "-    throws DebugException, BadLocationException, DocumentAdapterException,", "-    IOException, InterruptedException", "-  {", "+  public synchronized void testMultiThreadedSetCurrentThread() throws Exception {", "+    _debugger.addListener(debugListener);", "-     // Compile the class", "-     OpenDefinitionsDocument doc = doCompile(MONKEY_CLASS, tempFile());", "-     _debugger.addListener(debugListener);", "-     // Start debugger", "-     synchronized(_notifierLock) {", "-       _debugger.startup();", "-       _waitForNotifies(1);  // startup", "-       _notifierLock.wait();", "-     }", "-     ", "-     // Set two breakpoints", "-     int index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I\\'m a thread! Yeah!\\\");\");", "-     _debugger.toggleBreakpoint(doc,index,11);", "-     index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"James likes bananas!\\\");\");", "-     _debugger.toggleBreakpoint(doc,index,17);", "-     ", "-      // Run the main() method, hitting both breakpoints in different threads", "-     synchronized(_notifierLock) {", "-       interpretIgnoreResult(\"java Monkey\");", "-       _waitForNotifies(6); // (suspended, updated, breakpointReached) * 2", "-       _notifierLock.wait();", "-     }", "-     DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "-     DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "-     synchronized(_notifierLock) {", "-       _asyncDoSetCurrentThread(threadB);", "-       _waitForNotifies(2);  // updated, suspended", "-       _notifierLock.wait();", "-     }", "-     ", "-     DebugThreadData thread1 = new DebugThreadData(_debugger.getThreadAt(1));", "-     DebugThreadData thread2 = new DebugThreadData(_debugger.getCurrentThread());", "-     ", "-     // make sure threads have switched places", "-     assertTrue(thread1.getUniqueID() == threadA.getUniqueID());", "-     assertTrue(thread2.getUniqueID() == threadB.getUniqueID());", "-     ", "-       // Close doc and make sure breakpoints are removed", "-     _model.closeFile(doc);", "-     ", "-     // Shutdown the debugger", "-     if (printMessages) System.out.println(\"Shutting down...\");", "-     InterpretListener interpretListener = new InterpretListener() {", "-       public void interpreterChanged(boolean inProgress){", "-         // Don't notify: happens in the same thread", "-        interpreterChangedCount++;", "-       }", "-     };", "-     _model.addListener(interpretListener);", "-     synchronized(_notifierLock) {", "-       //_asyncResume();", "-       //_asyncResume();", "-       _debugger.shutdown();", "-       _waitForNotifies(2);  // shutdown, interactionEnded", "-       _notifierLock.wait();", "-     }", "-     interpretListener.assertInterpreterChangedCount(1);", "-     debugListener.assertDebuggerShutdownCount(1);  //fires", "-     if (printMessages) System.out.println(\"Shut down.\");", "-     _model.removeListener(interpretListener);", "-     _debugger.removeListener(debugListener);", "+    // Start up", "+    OpenDefinitionsDocument doc = _startupDebugger(\"Monkey.java\",", "+                                                   MONKEY_CLASS);", "+    ", "+    // Set two breakpoints", "+    int index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I\\'m a thread! Yeah!\\\");\");", "+    _debugger.toggleBreakpoint(doc,index,11);", "+    index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"James likes bananas!\\\");\");", "+    _debugger.toggleBreakpoint(doc,index,17);", "+    ", "+    // Run the main() method, hitting both breakpoints in different threads", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"java Monkey\");", "+      _waitForNotifies(6); // (suspended, updated, breakpointReached) * 2", "+      _notifierLock.wait();", "+    }", "+    DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "+    DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "+    synchronized(_notifierLock) {", "+      _asyncDoSetCurrentThread(threadB);", "+      _waitForNotifies(2);  // updated, suspended", "+      _notifierLock.wait();", "+    }", "+    ", "+    DebugThreadData thread1 = new DebugThreadData(_debugger.getThreadAt(1));", "+    DebugThreadData thread2 = new DebugThreadData(_debugger.getCurrentThread());", "+    ", "+    // make sure threads have switched places", "+    assertTrue(thread1.getUniqueID() == threadA.getUniqueID());", "+    assertTrue(thread2.getUniqueID() == threadB.getUniqueID());", "+    ", "+    // Shut down", "+    _shutdownAndWaitForInteractionEnded();", "+    _debugger.removeListener(debugListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7646e56ced3f9ab0d234af02e4aafaf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 10;\"), 7);", "+    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 12;\"), 9);", "-      interpretIgnoreResult(\"new Monkey().new MonkeyInner().innerMethod()\");", "+      interpretIgnoreResult(\"new Monkey().new MonkeyInner().new MonkeyInnerInner().innerMethod()\");", "+    _debugger.addWatch(\"innerInnerFoo\");", "-    // Step over once", "+    // Step to line 10", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch value incorrect\", DebugWatchUndefinedValue.ONLY.toString(), watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", \"12\", watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    // Step over twice", "+    // Step to line 11", "-    // Step over thrice", "+    // Step to line 12", "-    // Step over frice(?)", "+    // Step to line 13", "+    if (printMessages) {", "+      System.out.println(\"fifth step\");", "+    }", "+    // Step to line 14", "+    synchronized(_notifierLock){", "+      _asyncStep(Debugger.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(5);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(5); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(6);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(6);  // fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    ", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch value incorrect\", DebugWatchUndefinedValue.ONLY.toString(), watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", \"13\", watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "+    ", "+    if (printMessages) {", "+      System.out.println(\"sixth step\");", "+    }", "+    // Step into static method (line 15)", "+    synchronized(_notifierLock){", "+      _asyncStep(Debugger.STEP_INTO);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(6);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(6); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(7);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(7);  // fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    ", "+    // Test watches in a static context.", "+    watches = _debugger.getWatches();", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "+    assertEquals(\"watch value incorrect\", \"7\", watches.elementAt(0).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(1).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(2).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());"]}], "num": 31044}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "537df23d809919ffac4b38d52f5441fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36f0bc6a0fee98f2c45c6dbf348d73cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "74f78a37f662a82d90e6d47182c226ff9314be8c", "commitAfterChange": "56fdc380f0aee79a90c160b06fcb5549f8bb95f4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "signatureAfterChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "diff": ["-\t    // _log.log(\"Not augmenting \" + f + \" no mediator\");", "+     // _log.log(\"Not augmenting \" + f + \" no mediator\");", "-            BufferedWriter bw = new BufferedWriter(new FileWriter(augmentedFile));", "+            StringWriter sw = new StringWriter();", "+            BufferedWriter bw = new BufferedWriter(sw);", "+            ", "+            // write out the line number map and the augmented java file", "+            PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(augmentedFile)));", "+            SortedMap<Integer,Integer> lineNumberMap = a.getLineNumberMap();", "+            pw.println(\"// Language Level Converter line number map: dj*->java. Entries: \"+lineNumberMap.size());", "+            // We print out LINE_NUM_MAPPINGS_PER_LINE mappings per line, so we need numLines", "+            // at the top of the file, and one more for a descriptive comment.", "+            // That means we need to increase the line numbers in the generated java file by numLines+1", "+            int numLines = (int)Math.ceil(((double)lineNumberMap.size())/LINE_NUM_MAPPINGS_PER_LINE);", "+            int mapCount = 0;", "+            for(Map.Entry<Integer,Integer> e: lineNumberMap.entrySet()) {", "+              // e.getKey(): dj* line number; e.getValue(): java line number (must be increased by numLines)", "+              if (mapCount%LINE_NUM_MAPPINGS_PER_LINE==0) pw.print(\"//\");", "+              pw.printf(\" %5d->%-5d\", e.getKey(), (e.getValue()+numLines+1));", "+              if (mapCount%LINE_NUM_MAPPINGS_PER_LINE==LINE_NUM_MAPPINGS_PER_LINE-1) pw.println();", "+              ++mapCount;", "+            }", "+            if (mapCount%LINE_NUM_MAPPINGS_PER_LINE!=0) pw.println(); // print a newline unless we just printed one", "+            ", "+            String augmented = sw.toString();", "+            pw.write(augmented, 0, augmented.length());", "+            pw.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5ba022617a094e32a718cbc96a61774", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6a170ab14316cceed86d0cd5eef7d1a5e1482088", "commitAfterChange": "8de007bf6be2b43ee2e0404f529aa96c640a30ed", "methodNumberBeforeChange": 545, "methodNumberAfterChange": 545, "signatureBeforeChange": "          public void interactionEnded()", "signatureAfterChange": "          public void interactionEnded()", "diff": ["+      InteractionsModel im = _model.getInteractionsModel();", "+      edu.rice.cs.plt.tuple.Pair<String,String> lastError = im.getLastError();", "+      if (DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.DIALOG_AUTOIMPORT_ENABLED)) {", "+        if (lastError!=null) {", "+          // the interaction ended and there was an error", "+          String exceptionClass = lastError.first();", "+          String message = lastError.second();", "+          edu.rice.cs.plt.tuple.Pair<String,String> secondToLastError = im.getSecondToLastError();", "+          if ((secondToLastError==null) || // either there was no 2nd to last error", "+              (!secondToLastError.first().equals(exceptionClass)) || // or it is different", "+              (!secondToLastError.second().equals(message))) {", "+            // this aborts the auto-importing if the same class comes up twice in a row", "+            if (\"koala.dynamicjava.interpreter.error.ExecutionError\".equals(exceptionClass) &&", "+                message != null &&", "+                message.startsWith(\"Undefined class '\") &&", "+                message.endsWith(\"'\")) {", "+              // it was an \"undefined class\" exception", "+              // show auto-import dialog", "+              String undefinedClassName = message.substring(message.indexOf('\\'')+1,message.lastIndexOf('\\''));", "+              _showAutoImportDialog(undefinedClassName);          ", "+            }", "+          }", "+        }", "+      } else {", "+        // reset the last errors, so the dialog works again if it is re-enabled", "+        im.resetLastErrors();", "+      }", "+"]}], "num": 10722}
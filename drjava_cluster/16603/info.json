{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91b6b2debc24f4b3471b770e0b709fb2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30ee130ca4ffa88ad8ea84ba6b2690a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "a24082414064ecb42431a2e612770e1ab3e9fefa", "commitAfterChange": "b2a145d8d3ea1ad947e0937f542b0780baf31d45", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "signatureAfterChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "diff": ["-      Type firstBound = param.getBound().acceptVisitor(v);", "-      Iterable<Type> restBounds = checkList(param.getInterfaceBounds());", "-      BoundedSymbol bounds = getTypeVariable(param).symbol();", "-      if (IterUtil.isEmpty(restBounds)) { bounds.initializeUpperBound(firstBound); }", "-      else {", "-        bounds.initializeUpperBound(new IntersectionType(IterUtil.compose(firstBound, restBounds)));", "+      Type upperBound = param.getBound().acceptVisitor(v);", "+      for (Type t : checkList(param.getInterfaceBounds())) {", "+        upperBound = ts.meet(upperBound, t);", "+      BoundedSymbol bounds = getTypeVariable(param).symbol();", "+      bounds.initializeUpperBound(upperBound);", "-  }  ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbfc1a3513d3f0f99adb8e5a43b91c93", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "signatureAfterChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "diff": ["-    TypeNameVisitor v = new TypeNameVisitor();", "-      Type upperBound = param.getBound().acceptVisitor(v);", "-      for (Type t : checkList(param.getInterfaceBounds())) {", "-        upperBound = ts.meet(upperBound, t);", "-      }", "-      BoundedSymbol bounds = getTypeVariable(param).symbol();", "-      bounds.initializeUpperBound(upperBound);", "-      bounds.initializeLowerBound(TypeSystem.NULL);", "+      Iterable<ReferenceTypeName> bounds = IterUtil.compose(param.getBound(), param.getInterfaceBounds());", "+      // meet is guaranteed to be nonempty, and thus not TOP", "+      Type upperBound = ts.meet(checkList(bounds));", "+      BoundedSymbol b = getTypeVariable(param).symbol();", "+      b.initializeUpperBound(upperBound);", "+      b.initializeLowerBound(TypeSystem.NULL);"]}], "num": 16603}
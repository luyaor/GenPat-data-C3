{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "787c372f7c110f28f7b0715dd8ba4873", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a0a87e703a19ed07fdaa7b576633e94", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public boolean isOnMatch()", "signatureAfterChange": "   public boolean isOnMatch()", "diff": ["-     */", "-    public boolean isOnMatch() { return _state.isOnMatch(); }", "+   */", "+  public boolean isOnMatch() {", "+    String findWord = _findWord;", "+    int len, off;", "+    if(_current == null) return false;", "+    ", "+    len = findWord.length();", "+    if (!_searchBackwards) off = _current.getOffset() - len;", "+    else off = _current.getOffset();", "+    if (off < 0) return false;", "+    if (off + len > _doc.getLength()) return false;", "+    try {", "+      String matchSpace = _doc.getText(off, len);", "+      if (!_matchCase) {", "+        matchSpace = matchSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+      return matchSpace.equals(findWord);", "+    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b717ea4eb98a4e474fe1cf35c6a17eed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public boolean replaceCurrent()", "signatureAfterChange": "   public boolean replaceCurrent()", "diff": ["-    /** If we're on a match for the find word, replace it with the replace word. */", "-    public boolean replaceCurrent() { return _state.replaceCurrent(); }", "+  /** If we're on a match for the find word, replace it with the replace word. */", "+  public boolean replaceCurrent() {", "+    _doc.acquireWriteLock();", "+    try {", "+      if (isOnMatch()) {", "+        boolean atStart = false;", "+        int position = getCurrentOffset();", "+        if (!_searchBackwards) position -= _findWord.length();", "+        _doc.remove(position, _findWord.length());", "+        if (position == 0) atStart = true;", "+        _doc.insertString(getCurrentOffset(), _replaceWord, null);", "+        // the current offset will be the end of the inserted word", "+        //since we keep track of current as a Position.", "+        //The exception is if we are at the beginning of the document,", "+        //in which case the text is inserted AFTER the current position", "+        //So, current offset is correct for forwards searching unless", "+        //we were at the start of the document, in which case it is", "+        //correct for backwards searching.", "+        if (atStart && !_searchBackwards) setPosition(_replaceWord.length());", "+        else if (!atStart && _searchBackwards) setPosition(getCurrentOffset() - _replaceWord.length());", "+", "+        return true;", "+      }", "+      return false;", "+    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    finally { _doc.releaseWriteLock(); }", "+  }"]}], "num": 23716}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f07f33385219eac70c04d1b2a1626f1f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ba64d5d3448a819797ee91072c17343", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 20, "signatureBeforeChange": "   @Override public Type visit(SuperFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(SuperFieldAccess node)", "diff": ["+     */", "+    @Override public Type visit(SuperFieldAccess node) {", "+      Type t = context.getSuperType(ts);", "+        throw new ExecutionError(\"super.undefined\", node);", "-   */", "-  @Override public Type visit(SuperFieldAccess node) {", "-    Type t = context.getSuperType(ts);", "-    if (t == null) {", "-      throw new ExecutionError(\"super.undefined\", node);", "-    }", "-    Expression obj = TypeUtil.makeEmptyExpression(node);", "-    setType(obj, t);", "-    try {", "-      TypeSystem.FieldReference ref = ts.lookupField(obj, node.getFieldName());", "-      // TODO: Check accessibility of field", "-      setField(node, ref.field());", "-      setDJClass(node, context.getThis());", "-      setVariableType(node, ref.type());", "-      Type result = ts.capture(ref.type());", "-      addRuntimeCheck(node, result, ref.field().type());", "-      return setType(node, result);", "-    }", "-    catch (TypeSystemException e) {", "-      setErrorStrings(node, ts.userRepresentation(t), node.getFieldName());", "-      throw new ExecutionError(\"no.such.field\", node);", "-    }", "-  }", "+      Expression obj = TypeUtil.makeEmptyExpression(node);", "+      setType(obj, t);", "+        FieldReference ref = ts.lookupField(obj, node.getFieldName());", "+        // TODO: Check accessibility of field", "+        setField(node, ref.field());", "+        setDJClass(node, context.getThis());", "+        setVariableType(node, ref.type());", "+        Type result = ts.capture(ref.type());", "+        addRuntimeCheck(node, result, ref.field().type());", "+        return setType(node, result);", "+      catch (TypeSystemException e) {", "+        setErrorStrings(node, ts.userRepresentation(t), node.getFieldName());", "+        throw new ExecutionError(\"no.such.field\", node);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ceb1ce0366270fad8676c8b518ffe0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 21, "signatureBeforeChange": "   @Override public Type visit(StaticFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(StaticFieldAccess node)", "diff": ["-   */", "-  @Override public Type visit(StaticFieldAccess node) {", "-    Type t = node.getFieldType().acceptVisitor(this);", "-    try {", "-      TypeSystem.FieldReference ref = ts.lookupStaticField(t, node.getFieldName());", "-      // TODO: Check accessibility of field", "-      setField(node, ref.field());", "-      setVariableType(node, ref.type());", "-      Type result = ts.capture(ref.type());", "-      addRuntimeCheck(node, result, ref.field().type());", "-      return setType(node, result);", "-    }", "-    catch (TypeSystemException e) {", "-      setErrorStrings(node, ts.userRepresentation(t), node.getFieldName());", "-      throw new ExecutionError(\"no.such.field\", node);", "-    }", "-  }", "+     */", "+    @Override public Type visit(StaticFieldAccess node) {", "+      Type t = checkTypeName(node.getFieldType());", "+      try {", "+        FieldReference ref = ts.lookupStaticField(t, node.getFieldName());", "+        // TODO: Check accessibility of field", "+        setField(node, ref.field());", "+        setVariableType(node, ref.type());", "+        Type result = ts.capture(ref.type());", "+        addRuntimeCheck(node, result, ref.field().type());", "+        return setType(node, result);", "+      }", "+      catch (TypeSystemException e) {", "+        setErrorStrings(node, ts.userRepresentation(t), node.getFieldName());", "+        throw new ExecutionError(\"no.such.field\", node);", "+      }", "+    }"]}], "num": 2063}
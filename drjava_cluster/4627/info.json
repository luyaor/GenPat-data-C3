{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c99c93aa3edfe723ca9bac72a5398bbb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37f9e7d38874253d16218ed81283bfa1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testGetIndentOfCurrStmtDelimiters() throws BadLocationException", "signatureAfterChange": "     public void testGetIndentOfCurrStmtDelimiters() throws BadLocationException", "diff": ["-    assertEquals(\"prev delimiter 0, no indent\",", "-                 \"\",", "-                 _doc.getIndentOfCurrStmt(3));", "+    assertEquals(\"prev delimiter 0, no indent\", 0, _doc.getIndentOfCurrStmt(3));", "-    assertEquals(\"prev delimiter 0, indent two spaces\",", "-                 \"  \",", "-                 _doc.getIndentOfCurrStmt(7));", "+    assertEquals(\"prev delimiter 0, indent two spaces\", 2, _doc.getIndentOfCurrStmt(7));", "-    assertEquals(\"prev delimiter ';', no indent\",", "-                 \"\",", "-                 _doc.getIndentOfCurrStmt(7));", "+    assertEquals(\"prev delimiter ';', no indent\", 0, _doc.getIndentOfCurrStmt(7));", "-    assertEquals(\"prev delimiter ';', indent two spaces\",", "-                 \"  \",", "-                 _doc.getIndentOfCurrStmt(9));", "+    assertEquals(\"prev delimiter ';', indent two spaces\", 2, _doc.getIndentOfCurrStmt(9));", "-    assertEquals(\"prev delimiter '{', no indent\",", "-                 \"\",", "-                 _doc.getIndentOfCurrStmt(13));", "+    assertEquals(\"prev delimiter '{', no indent\", 0, _doc.getIndentOfCurrStmt(13));", "-    assertEquals(\"prev delimiter '{', indent two spaces\",", "-                 \"  \",", "-                 _doc.getIndentOfCurrStmt(13));", "+    assertEquals(\"prev delimiter '{', indent two spaces\", 2, _doc.getIndentOfCurrStmt(13));", "-    assertEquals(\"prev delimiter '}', no indent\",", "-                 \"\",", "-                 _doc.getIndentOfCurrStmt(2));", "+    assertEquals(\"prev delimiter '}', no indent\", 0, _doc.getIndentOfCurrStmt(2));", "-    assertEquals(\"prev delimiter '}', indent two spaces\",", "-                 \"  \",", "-                 _doc.getIndentOfCurrStmt(2));", "+    assertEquals(\"prev delimiter '}', indent two spaces\", 2, _doc.getIndentOfCurrStmt(2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dcada77336aec46a538479f0bb7e19a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree(int indentLevel)", "signatureAfterChange": "   public void buildTree(int indentLevel)", "diff": ["-      rule37 = new ActionStartCurrStmtPlus(oneLevel),", "-      rule36 = new ActionStartStmtOfBracePlus(oneLevel),", "+      rule37 = new ActionStartCurrStmtPlus(indentLevel),", "+      rule36 = new ActionStartStmtOfBracePlus(indentLevel),", "-      rule32 = new ActionStartCurrStmtPlus(\"\"),", "+      rule32 = new ActionStartCurrStmtPlus(0),", "-      rule39 = new ActionStartPrevStmtPlus(\"\", true),  // Indent line that starts new statement", "+      rule39 = new ActionStartPrevStmtPlus(0, true),  // Indent line that starts new statement", "-      rule28 = new ActionStartPrevStmtPlus(\"\", false),", "+      rule28 = new ActionStartPrevStmtPlus(0, false),", "-      rule19 = new ActionStartStmtOfBracePlus(\"\"),  // indents the line to match whitespace preceding the line enclosing brace", "+      rule19 = new ActionStartStmtOfBracePlus(0),  // indents the line to match whitespace preceding the line enclosing brace", "-      rule18 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule19, rule20),  // Does current line begin with '}' ignoring comment text", "+      rule18 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule19, rule20),  // Does current line begin with '}' ignoring comment text, WS", "-      rule16 = new ActionBracePlus(\" \" + oneLevel),", "-      rule15 = new ActionBracePlus(\" \"),", "+      rule16 = new ActionBracePlus(1 + indentLevel),", "+      rule15 = new ActionBracePlus(1),", "-      rule38 = new ActionBracePlus(\"\"),", "+      rule38 = new ActionBracePlus(0),"]}], "num": 4627}
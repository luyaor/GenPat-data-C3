{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "753e051ac615d3a328c21758746e221f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58ee786327a55543e9d3830a98fdd8d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "762f9487498790edfa8d7b58c3d83cb6592af447", "commitAfterChange": "1ea7874872b93b44444c8711a298524cf05a221e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private boolean shouldUpdate(KeyStroke ks, Action a)", "signatureAfterChange": "   private boolean shouldUpdate(KeyStroke ks, Action a)", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      /*", "+    if (CodeStatus.DEVELOPMENT) {      ", "-        return false;", "-      */", "+        return true;", "+      ", "-        KeyStrokeOption opt = new KeyStrokeOption(null,null);", "-        KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(ks);", "-        String key = opt.format(ks);", "-        KeyStrokeData newKSD = (KeyStrokeData)_actionToDataMap.get(a);", "-        String text = \"\\\"\"+ key +\"\\\"\" + \" is already assigned to \\\"\" + conflictKSD.getName() + ", "-          \"\\\".\\nWould you like to assign \\\"\" + key + \"\\\" to \\\"\" + newKSD.getName() + \"\\\"?\";", "-        int rc = JOptionPane.showConfirmDialog(_mainFrame,", "-                                               text,", "-                                               \"DrJava\",", "-                                               JOptionPane.YES_NO_CANCEL_OPTION);", "-        ", "-        switch (rc) {", "-          case JOptionPane.YES_OPTION:", "-            return true;", "-          case JOptionPane.NO_OPTION:", "-            return false;", "-          case JOptionPane.CLOSED_OPTION:", "-            return false;", "-          case JOptionPane.CANCEL_OPTION:", "-            return false;", "-          default:", "-            throw new RuntimeException(\"Invalid rc: \" + rc);", "+        if (_shouldCheckConflict) {", "+          KeyStrokeOption opt = new KeyStrokeOption(null,null);", "+          KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(ks);", "+          String key = opt.format(ks);", "+          KeyStrokeData newKSD = (KeyStrokeData)_actionToDataMap.get(a);", "+          String text = \"\\\"\"+ key +\"\\\"\" + \" is already assigned to \\\"\" + conflictKSD.getName() + ", "+            \"\\\".\\nWould you like to assign \\\"\" + key + \"\\\" to \\\"\" + newKSD.getName() + \"\\\"?\";", "+          int rc = JOptionPane.showConfirmDialog(_mainFrame,", "+                                                 text,", "+                                                 \"DrJava\",", "+                                                 JOptionPane.YES_NO_CANCEL_OPTION);", "+          ", "+          switch (rc) {", "+            case JOptionPane.YES_OPTION:", "+              return true;", "+            case JOptionPane.NO_OPTION:", "+              return false;", "+            case JOptionPane.CLOSED_OPTION:", "+              return false;", "+            case JOptionPane.CANCEL_OPTION:", "+              return false;", "+            default:", "+              throw new RuntimeException(\"Invalid rc: \" + rc);", "+          }", "+        else", "+          return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8afea7061a7b77dc51875b500fb142e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private boolean shouldUpdate(KeyStroke ks, Action a)", "signatureAfterChange": "   private boolean shouldUpdate(KeyStroke ks, Action a)", "diff": ["-    if (CodeStatus.DEVELOPMENT) {      ", "-      if (ks == KeyStrokeOption.NULL_KEYSTROKE) ", "-        // then there should be no keystroke for this action", "-        return true;", "+    if (ks == KeyStrokeOption.NULL_KEYSTROKE) {", "+      // then there should be no keystroke for this action", "+      return true;", "+    }", "-      if (!_keyToDataMap.containsKey(ks) ) { ", "-        // the key is not in the Hashtable, put it in", "-        //_keyToActionMap.put(ks, a);", "-        //need to update map", "-        //KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(a);", "-        //data.setKeyStroke(ks);", "-        //_keyToDataMap.put(ks,data);", "+    if (!_keyToDataMap.containsKey(ks) ) { ", "+      // the key is not in the Hashtable, put it in", "+      //_keyToActionMap.put(ks, a);", "+      //need to update map", "+      //KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(a);", "+      //data.setKeyStroke(ks);", "+      //_keyToDataMap.put(ks,data);", "+      ", "+      return true;", "+    } ", "+    else if (((KeyStrokeData)_keyToDataMap.get(ks)).getAction().equals(a)) { ", "+      // this KeyStroke/Action pair is already in the Hashtable", "+      return false;", "+    }", "+    else { // key-binding conflict", "+      if (_shouldCheckConflict) {", "+        KeyStrokeOption opt = new KeyStrokeOption(null,null);", "+        KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(ks);", "+        String key = opt.format(ks);", "+        KeyStrokeData newKSD = (KeyStrokeData)_actionToDataMap.get(a);", "+        String text = \"\\\"\"+ key +\"\\\"\" + \" is already assigned to \\\"\" + conflictKSD.getName() + ", "+          \"\\\".\\nWould you like to assign \\\"\" + key + \"\\\" to \\\"\" + newKSD.getName() + \"\\\"?\";", "+        int rc = JOptionPane.showConfirmDialog(_mainFrame,", "+                                               text,", "+                                               \"DrJava\",", "+                                               JOptionPane.YES_NO_CANCEL_OPTION);", "-        return true;", "-      } ", "-      else if (((KeyStrokeData)_keyToDataMap.get(ks)).getAction().equals(a)) { ", "-        // this KeyStroke/Action pair is already in the Hashtable", "-        return false;", "-      }", "-      else { // key-binding conflict", "-        if (_shouldCheckConflict) {", "-          KeyStrokeOption opt = new KeyStrokeOption(null,null);", "-          KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(ks);", "-          String key = opt.format(ks);", "-          KeyStrokeData newKSD = (KeyStrokeData)_actionToDataMap.get(a);", "-          String text = \"\\\"\"+ key +\"\\\"\" + \" is already assigned to \\\"\" + conflictKSD.getName() + ", "-            \"\\\".\\nWould you like to assign \\\"\" + key + \"\\\" to \\\"\" + newKSD.getName() + \"\\\"?\";", "-          int rc = JOptionPane.showConfirmDialog(_mainFrame,", "-                                                 text,", "-                                                 \"DrJava\",", "-                                                 JOptionPane.YES_NO_CANCEL_OPTION);", "-          ", "-          switch (rc) {", "-            case JOptionPane.YES_OPTION:", "-              return true;", "-            case JOptionPane.NO_OPTION:", "-              return false;", "-            case JOptionPane.CLOSED_OPTION:", "-              return false;", "-            case JOptionPane.CANCEL_OPTION:", "-              return false;", "-            default:", "-              throw new RuntimeException(\"Invalid rc: \" + rc);", "-          }", "+        switch (rc) {", "+          case JOptionPane.YES_OPTION:", "+            return true;", "+          case JOptionPane.NO_OPTION:", "+            return false;", "+          case JOptionPane.CLOSED_OPTION:", "+            return false;", "+          case JOptionPane.CANCEL_OPTION:", "+            return false;", "+          default:", "+            throw new RuntimeException(\"Invalid rc: \" + rc);", "-        else", "-          return true;", "+      }", "+      else {", "+        return true;", "-    else", "-      return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cace6328a825134bd20a3478aa811ba8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6bd1f449c6b6476464bf38d05b5455668d0d2ac5", "commitAfterChange": "c6857a248a65e4dc52a9c98c57b551279861859d", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": "   private void _close()", "signatureAfterChange": "   private void _close()", "diff": ["-//    LinkedList<OpenDefinitionsDocument> l = new LinkedList<OpenDefinitionsDocument>();", "-//    l.add(_model.getActiveDocument());", "-//    _model.closeFiles(l);", "-    ", "+    //    LinkedList<OpenDefinitionsDocument> l = new LinkedList<OpenDefinitionsDocument>();", "+    //    l.add(_model.getActiveDocument());", "+    //    _model.closeFiles(l);", "+    String filename = null;", "-      if(_model.getActiveDocument().isAuxiliaryFile() || ", "-         _model.getActiveDocument().isProjectFile()){", "-        String text = \"Closing this file will permanently remove it from the current project.\" + ", "-          \"\\nAre you sure that you want to close this file?\";", "-        ", "-        int rc = JOptionPane.showConfirmDialog(MainFrame.this,", "-                                             text,", "-                                             \"Close \" + ", "-                                               _model.getActiveDocument().getFile().getName() + ", "-                                               \"?\",", "-                                             JOptionPane.YES_NO_OPTION);", "-        if(rc != JOptionPane.YES_OPTION)", "-          return;", "-      }", "-      ", "-      //Either this is an external file or user actually wants to close it", "-      _model.closeFile(_model.getActiveDocument());", "-        ", "+      filename = _model.getActiveDocument().getFile().getName();", "-      //Not sure what exactly should be done.", "-      //For now, let's just say the error is unexpected.", "-      throw new UnexpectedException(e);", "+      filename = \"File\";", "+    if(_model.getActiveDocument().isAuxiliaryFile() || ", "+       _model.getActiveDocument().isProjectFile()){", "+      String text = \"Closing this file will permanently remove it from the current project.\" + ", "+        \"\\nAre you sure that you want to close this file?\";", "+      ", "+      Object[] options = {\"Yes\", \"No\"};", "+      int rc = JOptionPane.showOptionDialog(MainFrame.this,", "+                                            text,", "+                                            \"Close \" + filename + \"?\",", "+                                            JOptionPane.YES_NO_OPTION,", "+                                            JOptionPane.QUESTION_MESSAGE,", "+                                            null,", "+                                            options,", "+                                            options[1]);", "+      if(rc != JOptionPane.YES_OPTION)", "+        return;", "+    }", "+    ", "+    //Either this is an external file or user actually wants to close it", "+    _model.closeFile(_model.getActiveDocument());", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2e2f9f339662209935d10470caa19e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "3f81b37285813b52f5c285ae3a68ee4a21753a7e", "commitAfterChange": "844a54657c2f878fc1ea01131f59375a436ab7c8", "methodNumberBeforeChange": 243, "methodNumberAfterChange": 247, "signatureBeforeChange": "      public void saveAllBeforeProceeding(GlobalModelListener.SaveReason reason)", "signatureAfterChange": "      private void _saveAllBeforeProceeding(String message)", "diff": ["-    public void saveAllBeforeProceeding(GlobalModelListener.SaveReason reason) {", "-      String message;", "-      if (reason == COMPILE_REASON) {", "-        message =", "-          \"To compile, you must first save ALL modified files.\\n\" +", "-          \"Would you like to save and then compile?\";", "-      }", "-      else if (reason == JUNIT_REASON) {", "-        message =", "-          \"To run JUnit, you must first save and compile ALL modified\\n\" +", "-          \"files. Would you like to save and then compile?\";", "-      }", "-      else if (reason == JAVADOC_REASON) {", "-        message =", "-          \"To run JavaDoc, you must first save ALL modified files.\\n\" +", "-          \"Would you like to save and then run JavaDoc?\"; ", "-      }", "-      else if (reason == DEBUG_REASON) {", "-        message =", "-          \"To use debugging commands, you must first save and compile\\n\" +", "-          \"ALL modified files. Would you like to save and then compile?\";", "-      }", "-      else {", "-        throw new RuntimeException(\"Invalid reason for forcing a save.\");", "-      }", "-      int rc = JOptionPane.showConfirmDialog(MainFrame.this, message,", "-                                             \"Must save all files to continue\",", "-                                             JOptionPane.YES_NO_OPTION);", "-      switch (rc) {", "-        case JOptionPane.YES_OPTION:", "-          _saveAll();", "-          break;", "-        case JOptionPane.NO_OPTION:", "-        case JOptionPane.CANCEL_OPTION:", "-        case JOptionPane.CLOSED_OPTION:", "-          // do nothing", "-          break;", "-        default:", "-          throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+    private void _saveAllBeforeProceeding(String message) {", "+      if (_model.hasModifiedDocuments()) {", "+        int rc = JOptionPane.showConfirmDialog(MainFrame.this, message,", "+                                               \"Must save all files to continue\",", "+                                               JOptionPane.YES_NO_OPTION);", "+        switch (rc) {", "+          case JOptionPane.YES_OPTION:", "+            _saveAll();", "+            break;", "+          case JOptionPane.NO_OPTION:", "+          case JOptionPane.CANCEL_OPTION:", "+          case JOptionPane.CLOSED_OPTION:", "+            // do nothing", "+            break;", "+          default:", "+            throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c6f315661ef9574c6973d7e350f960", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ea3de3bd50de8d728bdb5d615bd9b8838d2e94b4", "commitAfterChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "methodNumberBeforeChange": 292, "methodNumberAfterChange": 298, "signatureBeforeChange": "   private void _close()", "signatureAfterChange": "   private void _close()", "diff": ["-    if ((_model.isProjectActive() && _model.getActiveDocument().inProjectPath()) ||", "-        _model.getActiveDocument().isAuxiliaryFile()) {", "-      ", "-      String fileName = null;", "-      OpenDefinitionsDocument doc = _model.getActiveDocument();", "-      try {", "-        if (doc.isUntitled()) fileName = \"File\";", "-        else fileName = _model.getActiveDocument().getFile().getName();", "+    // this works with multiple selected files now", "+    java.util.List<OpenDefinitionsDocument> l = _model.getDocumentNavigator().getSelectedDocuments();", "+    boolean queryNecessary = false; // is a query necessary because the files are project or auxiliary files?", "+    for (OpenDefinitionsDocument doc: l) {", "+      if ((_model.isProjectActive() && doc.inProjectPath()) || doc.isAuxiliaryFile()) {", "+        queryNecessary = true;", "+        break;", "-      catch(FileMovedException e) { fileName = e.getFile().getName(); }", "-      String text = \"Closing this file will permanently remove it from the current project.\" + ", "-        \"\\nAre you sure that you want to close this file?\";", "-      ", "+    }", "+    if (queryNecessary) {", "+      int rc;", "+      String fileName = null;", "-      int rc = ", "-        JOptionPane.showOptionDialog(MainFrame.this, text,\"Close \" + fileName + \"?\", JOptionPane.YES_NO_OPTION,", "-                                     JOptionPane.QUESTION_MESSAGE, null, options, options[1]);", "+      if (l.size()==1) {", "+        OpenDefinitionsDocument doc = l.get(0);", "+        try {", "+          if (doc.isUntitled()) fileName = \"File\";", "+          else fileName = _model.getActiveDocument().getFile().getName();", "+        }", "+        catch(FileMovedException e) { fileName = e.getFile().getName(); }", "+        String text = \"Closing this file will permanently remove it from the current project.\" + ", "+          \"\\nAre you sure that you want to close this file?\";", "+        ", "+        rc = JOptionPane.showOptionDialog(MainFrame.this, text,\"Close \" + fileName + \"?\", JOptionPane.YES_NO_OPTION,", "+                                          JOptionPane.QUESTION_MESSAGE, null, options, options[1]);", "+      }", "+      else {", "+        fileName = l.size()+\" files\";", "+        String text = \"Closing these \"+fileName+\" will permanently remove them from the current project.\" + ", "+          \"\\nAre you sure that you want to close these files?\";", "+        ", "+        rc = JOptionPane.showOptionDialog(MainFrame.this, text, \"Close \"+l.size()+\" files?\", JOptionPane.YES_NO_OPTION,", "+                                          JOptionPane.QUESTION_MESSAGE, null, options, options[1]);", "+      }", "-    //Either this is an external file or user actually wants to close it", "-    _model.closeFile(_model.getActiveDocument());", "+    // Either this is an external file or user actually wants to close it", "+    for(OpenDefinitionsDocument doc: l) {", "+      _model.closeFile(doc);", "+    }"]}], "num": 28812}
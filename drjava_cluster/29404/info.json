{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c4f03d197e471f72afd9b1432f19883", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01ef938893d04c7c9d88e525a7b783f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected InstanceData[] getArgTypesForInvocation(ParenthesizedExpressionList pel)", "signatureAfterChange": "   protected InstanceData[] getArgTypesForInvocation(ParenthesizedExpressionList pel)", "diff": ["-    ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+    ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages,", "+                                                          _vars, _thrown);", "-        _addError(\"Cannot pass a class or interface name as a constructor argument.  Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);", "+        _addError(\"Cannot pass a class or interface name as a constructor argument.  \" + ", "+                  \"Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82841552264795f28914c2d739f4777f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type)", "signatureAfterChange": "   public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type)", "diff": ["-   */", "+    */", "-    if (!(type instanceof ArrayData)) {_addError(\"You cannot initialize the non-array type \" + type.getName() + \" with an array initializer\", that); return type.getInstanceData();}", "+    if (!(type instanceof ArrayData)) {_addError(\"You cannot initialize the non-array type \" + type.getName() + ", "+                                                 \" with an array initializer\", that); return type.getInstanceData();}", "-        ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+        ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages,", "+                                                              _vars, _thrown);", "-        thingsThatHaveBeenAssigned.addAll(etc.thingsThatHaveBeenAssigned); //incorporate the things that were assigned in the expression here", "+        ", "+        // Incorporate the things that were assigned in the expression here", "+        thingsThatHaveBeenAssigned.addAll(etc.thingsThatHaveBeenAssigned); ", "+", "-              _addError(\"The elements of this initializer should have type \" + elementType.getName() + \" but element \" + i + \" has type \" + result[i].getSymbolData().getName(), (JExpression) that.getItems()[i]);", "+              _addError(\"The elements of this initializer should have type \" + elementType.getName() + \" but element \"", "+                          + i + \" has type \" + result[i].getSymbolData().getName(), (JExpression) that.getItems()[i]);", "-              assertInstanceType(result[i], \"The elements of this initializer should all be instances, but you have specified the type name \" + result[i].getName(), (JExpression) that.getItems()[i]);", "+              assertInstanceType(result[i], \"The elements of this initializer should all be instances,\" + ", "+                                 \" but you have specified the type name \" + result[i].getName(), ", "+                                 (JExpression) that.getItems()[i]);", "-    ", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "869dafcfa471b390ccc191d2aaef0b84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public TypeData forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that)", "signatureAfterChange": "   public TypeData forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that)", "diff": ["-   */", "+    */", "-      checkAccessibility(that, enclosingType.getSymbolData().getMav(), enclosingType.getSymbolData().getName(), enclosingType.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "+      checkAccessibility(that, enclosingType.getSymbolData().getMav(), enclosingType.getSymbolData().getName(), ", "+                         enclosingType.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "-      checkAccessibility(that, innerClass.getMav(), innerClass.getName(), innerClass, _data.getSymbolData(), \"class or interface\", true);", "+      checkAccessibility(that, innerClass.getMav(), innerClass.getName(), innerClass, _data.getSymbolData(), ", "+                         \"class or interface\", true);", "-               _addError (\"The constructor of a non-static inner class can only be called on an instance of its containing class (e.g. new \" + ", "-                   Data.dollarSignsToDots(enclosingType.getName()) + \"().new \" + that.getType().getName() + \"())\", that);", "+               _addError (\"The constructor of a non-static inner class can only be called on an instance of its\" + ", "+                          \" containing class (e.g. new \" + Data.dollarSignsToDots(enclosingType.getName()) + \"().new \" +", "+                          that.getType().getName() + \"())\", that);"]}], "num": 29404}
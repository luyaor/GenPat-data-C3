{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d39b130532819b7922b81b3ff5b5b5b2", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9325f93d088c66ef4dd7c3570afc8794", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "35ca78e33b0503c2a6070986170dae99ba9dcb1a", "commitAfterChange": "6136e4c5753a47e4bcb40afa831b9c58e353fd69", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 17, "signatureBeforeChange": "         public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass,                                                           final File buildDir,                                                           final File projectFile,                                                           final File[] projectFiles,                                                          final ClasspathVector classpath)", "signatureAfterChange": "      protected FileGroupingState      makeProjectFileGroupingState(File main, File dir, File project, File[] files, ClasspathVector cp)", "diff": ["+  protected FileGroupingState ", "+    makeProjectFileGroupingState(File main, File dir, File project, File[] files, ClasspathVector cp) {", "+    return new ProjectFileGroupingState(main, dir, project, files, cp);", "-  ", "-  public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass, ", "-                                                         final File buildDir, ", "-                                                         final File projectFile, ", "-                                                         final File[] projectFiles,", "-                                                         final ClasspathVector classpath) {", "-    return new FileGroupingState() {", "-      private File _builtDir = buildDir;", "-      private File _mainFile = jarMainClass;", "-      ", "-      private volatile boolean _isProjectChanged = false;", "-      ", "-      //private ArrayList<File> _auxFiles = new ArrayList<File>();", "-      ", "-      HashSet<String> _projFilePaths = new HashSet<String>();", "-      ", "-      private ClasspathVector _projExtraClasspath = classpath;", "-      ", "-      /** Initialization Block */", "-      { ", "-        try {  for (File file : projectFiles) { _projFilePaths.add(file.getCanonicalPath()); } }", "-        catch(IOException e) { }", "-      }", "-      ", "-      public boolean isProjectActive() { return true; }", "-      ", "-      /** Determines whether the specified doc in within the project file tree.", "-       *  No synchronization is required because only immutable data is accessed.", "-       */", "-      public boolean isInProjectPath(OpenDefinitionsDocument doc) {", "-        File projectRoot = projectFile.getParentFile();", "-        if (doc.isUntitled()) return false;", "-        ", "-        // If the file does not exist, we still want to tell if it's in the correct", "-        // path.  The file may have been in at one point and had been removed, in which", "-        // case we should treat it as an untitled project file that should be resaved.", "-        try {", "-          File f;", "-          try { f = doc.getFile(); } ", "-          catch(FileMovedException fme) { f = fme.getFile(); }", "-          ", "-          String filePath = f.getParentFile().getCanonicalPath() + File.separator;", "-          String projectPath = projectRoot.getCanonicalPath() + File.separator;", "-          return (filePath.startsWith(projectPath));", "-        }", "-        catch(IOException e) {", "-          //          System.out.println(e); // What should we do in this case?", "-          return false;", "-        }", "-      }", "-      ", "-      /** @return the absolute path to the project file.  Since projectFile is final, no synchronization", "-       *   is necessary.", "-       */", "-      public File getProjectFile() { return projectFile; }", "-      ", "-      public boolean isProjectFile(File f) {", "-        String path;", "-        ", "-        if (f == null) return false;", "-        ", "-        try { ", "-          path = f.getCanonicalPath();", "-          return _projFilePaths.contains(path);", "-        }", "-        catch(IOException ioe) { return false; }", "-        /*", "-         for (File file : projectFiles) {", "-         try {", "-         if (file.getCanonicalPath().equals(path))", "-         return true;", "-         }", "-         catch(IOException ioe) {", "-         //continue", "-         }", "-         }", "-         return false;*/", "-        ", "-      }", "-      ", "-      public File[] getProjectFiles() { return projectFiles; }", "-      ", "-      public File getBuildDirectory() { return _builtDir; }", "-      ", "-      public void setBuildDirectory(File f) { _builtDir = f; }", "-      ", "-      public File getMainClass() { return _mainFile; }", "-      ", "-      public void setJarMainClass(File f) { _mainFile = f; }", "-      ", "-      public boolean isProjectChanged() { return _isProjectChanged; }", "-      ", "-      public void setProjectChanged(boolean changed) { _isProjectChanged = changed; }", "-      ", "-      public boolean isAuxiliaryFile(File f) {", "-        String path;", "-        ", "-        if (f == null) return false;", "-        ", "-        try { path = f.getCanonicalPath();}", "-        catch(IOException ioe) { return false; }", "-        ", "-        synchronized(_auxiliaryFiles) {", "-          for (File file : _auxiliaryFiles) {", "-            try { if (file.getCanonicalPath().equals(path)) return true; }", "-            catch(IOException ioe) { /* ignore file */ }", "-          }", "-          return false;", "-        }", "-      }", "-      ", "-      public void cleanBuildDirectory() throws FileMovedException, IOException{", "-        File dir = this.getBuildDirectory();", "-        cleanHelper(dir);", "-        if (! dir.exists()) dir.mkdirs();", "-      }", "-      ", "-      private void cleanHelper(File f) {", "-        if (f.isDirectory()) {", "-          ", "-          File fs[] = f.listFiles(new FilenameFilter() {", "-            public boolean accept(File parent, String name) {", "-              return new File(parent, name).isDirectory() || name.endsWith(\".class\");", "-            }", "-          });", "-          ", "-          for (File kid: fs) { cleanHelper(kid); }", "-          ", "-          if (f.listFiles().length == 0)  f.delete();", "-          ", "-        } else if (f.getName().endsWith(\".class\")) f.delete();", "-      }", "-      ", "-      ", "-      /**", "-       * returns the name of the package from a fully qualified classname", "-       */", "-      ", "-      // ----- FIND ALL DEFINED CLASSES IN FOLDER ---", "-      public void compileAll() throws IOException{", "-        File dir = getProjectFile().getParentFile();", "-        final ArrayList<File> files = FileOps.getFilesInDir(dir, true, new FileFilter() {", "-          public boolean accept(File pathname) {", "-            return pathname.isDirectory() || ", "-              pathname.getPath().toLowerCase().endsWith(\".java\") ||", "-              pathname.getPath().toLowerCase().endsWith(\".dj0\") ||", "-              pathname.getPath().toLowerCase().endsWith(\".dj1\") ||", "-              pathname.getPath().toLowerCase().endsWith(\".dj2\");", "-          }", "-        });", "-        ", "-        ", "-        ClassAndInterfaceFinder finder;", "-        List<File> lof = new LinkedList<File>(); // the list of files to compile", "-        List<File> los = new LinkedList<File>(); // the list of sourceroots for the files", "-        ", "-        for (File f: files) {", "-          finder = new ClassAndInterfaceFinder(f);", "-          String classname = finder.getClassOrInterfaceName();", "-          String packagename = getPackageName(classname);", "-            File sourceroot = getSourceRoot(packagename, f);", "-            if (!los.contains(sourceroot)) los.add(sourceroot);", "-            lof.add(f);", "-        ", "-//        ScrollableDialog sd1 = new ScrollableDialog(null, \"Constructed list of files to compile: \" + lof, \"\", \"\");", "-//        sd1.show();", "-        ", "-        String[] exts = new String[]{\".java\", \".dj0\", \".dj1\", \".dj2\"};", "-        List<OpenDefinitionsDocument> lod = getOpenDefinitionsDocuments();", "-        for (OpenDefinitionsDocument d: lod) {", "-          if (d.isAuxiliaryFile()) {", "-            try {", "-              File f;", "-              File sourceRoot = d.getSourceRoot();", "-              try {", "-                f = d.getFile();", "-                for (String ext: exts) {", "-                  if (f.getName().endsWith(ext)) {", "-                    lof.add(f);", "-                    los.add(sourceRoot);", "-                  }", "-                }", "-              } ", "-              catch(FileMovedException fme) {", "-                // the file's not on disk, but send it in anyways", "-                f = fme.getFile();", "-                lof.add(f);", "-                los.add(sourceRoot);", "-              } ", "-              catch(IllegalStateException e) { /* do nothing */ }", "-            } ", "-            catch(InvalidPackageException e) { /* do nothing */ }", "-          }", "-        }", "-        getCompilerModel().compileAll(los, lof);", "-      }", "-      ", "-      // ----- FIND ALL DEFINED CLASSES IN FOLDER ---", "-      public void junitAll() {", "-        File dir = getProjectFile().getParentFile();", "-        final ArrayList<File> files = FileOps.getFilesInDir(dir, true, new FileFilter() {", "-          public boolean accept(File pathname) {", "-            return pathname.isDirectory() || ", "-              pathname.getPath().toLowerCase().endsWith(\".java\") ||", "-              pathname.getPath().toLowerCase().endsWith(\".dj0\") ||", "-              pathname.getPath().toLowerCase().endsWith(\".dj1\") ||", "-              pathname.getPath().toLowerCase().endsWith(\".dj2\");", "-          }", "-        });", "-        ClassAndInterfaceFinder finder;", "-        List<String> los = new LinkedList<String>();", "-        List<File> lof = new LinkedList<File>();", "-        for (File f: files) {", "-          finder = new ClassAndInterfaceFinder(f);", "-          String classname = finder.getClassName();", "-          if (classname.length() > 0) {", "-            los.add(classname);", "-            lof.add(f);", "-          }", "-        List<OpenDefinitionsDocument> lod = getOpenDefinitionsDocuments();", "-        for (OpenDefinitionsDocument d: lod) {", "-          if (d.isAuxiliaryFile()) {", "-              File f;", "-              String classname = d.getQualifiedClassName();", "-              try {", "-                f = d.getFile();", "-                lof.add(f);", "-                los.add(classname);", "-              }", "-              catch(FileMovedException fme) {", "-                // the file's not on disk, but send it in anyways", "-                f = fme.getFile();", "-                lof.add(f);", "-                los.add(classname);", "-              }", "-              catch(IllegalStateException e) {", "-                // it doesn't have a file, so don't try and test it...", "-              }", "-            catch(ClassNameNotFoundException e) {", "-              // don't add it if we don't have a classname", "-        getJUnitModel().junitAll(los, lof);", "-      ", "-      /**", "-       * Jars all the files in this project", "-       */", "-      public void jarAll() {", "-        //********************************", "-      }", "-      ", "-      public ClasspathVector getExtraClasspath() {", "-        return _projExtraClasspath;", "-      }", "-      ", "-      public void setExtraClasspath(ClasspathVector cp) {", "-        _projExtraClasspath = cp;", "-      }", "-    };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5bf748100cf49015347d0920fd470d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "35ca78e33b0503c2a6070986170dae99ba9dcb1a", "commitAfterChange": "6136e4c5753a47e4bcb40afa831b9c58e353fd69", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 13, "signatureBeforeChange": "         public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass,                                                           final File buildDir,                                                           final File projectFile,                                                           final File[] projectFiles,                                                          final ClasspathVector classpath)", "signatureAfterChange": "      protected FileGroupingState      makeProjectFileGroupingState(File main, File dir, File project, File[] files, ClasspathVector cp)", "diff": ["+  protected FileGroupingState ", "+    makeProjectFileGroupingState(File main, File dir, File project, File[] files, ClasspathVector cp) {", "+    return new ProjectFileGroupingState(main, dir, project, files, cp);", "+  }", "-  ", "-  public FileGroupingState _makeProjectFileGroupingState(final File jarMainClass, ", "-                                                         final File buildDir, ", "-                                                         final File projectFile, ", "-                                                         final File[] projectFiles,", "-                                                         final ClasspathVector classpath) {", "-    return new FileGroupingState() {", "-      private File _builtDir = buildDir;", "-      private File _mainFile = jarMainClass;", "-      ", "-      private volatile boolean _isProjectChanged = false;", "-      ", "-      //private ArrayList<File> _auxFiles = new ArrayList<File>();", "-      ", "-      HashSet<String> _projFilePaths = new HashSet<String>();", "-      ", "-      private ClasspathVector _projExtraClasspath = classpath;", "-      ", "-      /** Initialization Block */", "-      { ", "-        try {  for (File file : projectFiles) { _projFilePaths.add(file.getCanonicalPath()); } }", "-        catch(IOException e) { }", "-      }", "-      ", "-      public boolean isProjectActive() { return true; }", "-      ", "-      /** Determines whether the specified doc in within the project file tree.", "-       *  No synchronization is required because only immutable data is accessed.", "-       */", "-      public boolean isInProjectPath(OpenDefinitionsDocument doc) {", "-        if (doc.isUntitled()) return false;", "-        ", "-        // If the file does not exist, we still want to tell if it's in the correct", "-        // path.  The file may have been in at one point and had been removed, in which", "-        // case we should treat it as an untitled project file that should be resaved.", "-        try {", "-          File f;", "-          try { f = doc.getFile(); } ", "-          catch(FileMovedException fme) { f = fme.getFile(); }", "-          ", "-          String filePath = f.getParentFile().getCanonicalPath() + File.separator;", "-          String projectPath = projectRoot.getCanonicalPath() + File.separator;", "-          return (filePath.startsWith(projectPath));", "-        }", "-        catch(IOException e) {", "-          //          System.out.println(e); // What should we do in this case?", "-          return false;", "-        }", "-      /** @return the absolute path to the project file.  Since projectFile is final, no synchronization", "-       *   is necessary.", "-       */", "-      public File getProjectFile() { return projectFile; }", "-      public boolean isProjectFile(File f) {", "-        String path;", "-        ", "-        if (f == null) return false;", "-        ", "-        try { ", "-          path = f.getCanonicalPath();", "-          return _projFilePaths.contains(path);", "-        }", "-        catch(IOException ioe) { return false; }", "-        /*", "-         for (File file : projectFiles) {", "-         try {", "-         if (file.getCanonicalPath().equals(path))", "-         return true;", "-         }", "-         catch(IOException ioe) {", "-         //continue", "-         }", "-         }", "-         return false;*/", "-        ", "-      public File[] getProjectFiles() { return projectFiles; }", "-      public File getBuildDirectory() { return _builtDir; }", "-      public void setBuildDirectory(File f) { _builtDir = f; }", "-      ", "-      public File getMainClass() { return _mainFile; }", "-      ", "-      public void setJarMainClass(File f) { _mainFile = f; }", "-      ", "-      public boolean isProjectChanged() { return _isProjectChanged; }", "-      ", "-      public void setProjectChanged(boolean changed) { _isProjectChanged = changed; }", "-      ", "-      public boolean isAuxiliaryFile(File f) {", "-        String path;", "-        if (f == null) return false;", "-        ", "-        try { path = f.getCanonicalPath();}", "-        catch(IOException ioe) { return false; }", "-        ", "-        synchronized(_auxiliaryFiles) {", "-          for (File file : _auxiliaryFiles) {", "-            try { if (file.getCanonicalPath().equals(path)) return true; }", "-            catch(IOException ioe) { /* ignore file */ }", "-          return false;", "-        }", "-      }", "-      ", "-      public void cleanBuildDirectory() throws FileMovedException, IOException{", "-        File dir = this.getBuildDirectory();", "-        cleanHelper(dir);", "-        if (! dir.exists()) dir.mkdirs();", "-      }", "-      ", "-      private void cleanHelper(File f) {", "-        if (f.isDirectory()) {", "-          ", "-          File fs[] = f.listFiles(new FilenameFilter() {", "-            public boolean accept(File parent, String name) {", "-              return new File(parent, name).isDirectory() || name.endsWith(\".class\");", "-            }", "-          });", "-          ", "-          for (File kid: fs) { cleanHelper(kid); }", "-          ", "-          if (f.listFiles().length == 0)  f.delete();", "-          ", "-        } else if (f.getName().endsWith(\".class\")) f.delete();", "-      }", "-      ", "-      ", "-      /**", "-       * returns the name of the package from a fully qualified classname", "-       */", "-      ", "-      //throws UnsupportedOperationException", "-      public void compileAll() throws IOException{", "-        throw new UnsupportedOperationException(\"AbstractGlobalModel does not support compilation\");", "-        }", "-      ", "-      // ----- FIND ALL DEFINED CLASSES IN FOLDER ---", "-      //throws UnsupportedOperationException", "-      public void junitAll() {", "-        throw new UnsupportedOperationException(\"AbstractGlobalModel does not support JUnit testing\");", "-      }", "-//      ", "-//      /**", "-//       * Jars all the files in this project", "-//       * throws UnsupportedOperationException", "-//       */", "-      public void jarAll() {", "-        throw new UnsupportedOperationException(\"AbstractGlobaModel does not support jarring\");", "-      }", "-      ", "-      public ClasspathVector getExtraClasspath() {", "-        return _projExtraClasspath;", "-      }", "-      ", "-      public void setExtraClasspath(ClasspathVector cp) {", "-        _projExtraClasspath = cp;", "-      }", "-    };"]}], "num": 1258}
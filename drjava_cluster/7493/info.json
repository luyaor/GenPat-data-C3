{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4e7306a7686f09be364bfaf227c73e4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071e6238179947e3d893ee443e9e2765", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "    public Object visit(StaticMethodCall node)", "signatureAfterChange": "    public Object visit(StaticMethodCall node)", "diff": ["-    return super.visit(node);", "+    Method m = (Method) node.getProperty(NodeProperties.METHOD);", "+", "+    // DynamicJava doesn't check that the method is really static!", "+    if (! Modifier.isStatic(m.getModifiers())) {", "+      StringBuffer buf = new StringBuffer();", "+      buf.append(m.getDeclaringClass());", "+      buf.append(\".\");", "+      buf.append(m.getName());", "+      buf.append(\"(\");", "+      ", "+      boolean first = true;", "+      Class[] params = m.getParameterTypes();", "+      for (int i = 0; i < params.length; i++) {", "+        if (first) {", "+          first = false;", "+        }", "+        else {", "+          buf.append(\", \");", "+        }", "+", "+        buf.append(params[i].getName());", "+      }", "+      ", "+      buf.append(\")\");", "+      buf.append(\" is not a static method.\");", "+", "+      throw new InteractionsException(buf.toString());", "+    }", "+", "+    Object ret = super.visit(node);", "+    ", "+    // workaround to not return null for void returns", "+    if (m.getReturnType().equals(Void.TYPE)) {", "+      return JavaInterpreter.NO_RESULT;", "+    }", "+    else {", "+      return ret;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de9f6c251f506fc31ba142fcbb19284a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 251, "signatureBeforeChange": "      public String userRepresentation(Function f)", "signatureAfterChange": "          public String print(Function f)", "diff": ["-  ", "-  public String userRepresentation(Function f) {", "-    TypeWriter w = new TypeWriter();", "-    if (!IterUtil.isEmpty(f.typeParameters())) {", "-      w.append(\"<\");", "-      w.runOnList(f.typeParameters(), \", \");", "-      w.append(\"> \");", "-    }", "-    if (!(f instanceof DJConstructor)) {", "-      w.run(f.returnType());", "-      w.append(\" \");", "-    }", "-    w.append(f.declaredName());", "-    w.append(\"(\");", "-    w.runOnList(SymbolUtil.parameterTypes(f), \", \");", "-    w.append(\")\");", "-    w.appendConstraints();", "-    return w.result();", "-  }", "+    ", "+    public String print(Function f) {", "+      Visitor v = new Visitor();", "+      if (!IterUtil.isEmpty(f.typeParameters())) {", "+        v.append(\"<\");", "+        v.runOnList(f.typeParameters(), \", \");", "+        v.append(\"> \");", "+      }", "+      if (!(f instanceof DJConstructor)) {", "+        v.run(f.returnType());", "+        v.append(\" \");", "+      }", "+      v.append(f.declaredName());", "+      v.append(\"(\");", "+      v.runOnList(SymbolUtil.parameterTypes(f), \", \");", "+      v.append(\")\");", "+      v.appendConstraints();", "+      return v.result();", "+    }"]}], "num": 7493}
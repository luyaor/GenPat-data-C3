{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7ff4ab879b1962fe3a2500829c67d52", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e76e028ed4d086b89b5a7bb3ef4c3b9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 52, "signatureBeforeChange": "          private void mismatch(String description, String leftData, SourceInfo.Wrapper left,                            String rightData, SourceInfo.Wrapper right)", "signatureAfterChange": "      public void mismatch(String description, String context, String leftData, SourceInfo.Wrapper left,                            String rightData, SourceInfo.Wrapper right)", "diff": ["+", "+    public void mismatch(String description, String context, String leftData, SourceInfo.Wrapper left,", "+                           String rightData, SourceInfo.Wrapper right) {", "+      System.out.println(\"*** \" + description + \" in \" + context);", "+      System.out.println(\"Left (\" + left.getSourceInfo() + \"): \" + leftData);", "+      System.out.println(\"Right (\" + right.getSourceInfo() + \"): \" + rightData);", "+    }", "-    private void mismatch(String description, String leftData, SourceInfo.Wrapper left,", "-                           String rightData, SourceInfo.Wrapper right) {", "-      System.out.println(\"*** \" + description);", "-      System.out.println(\"Left (\" + left.getSourceInfo() + \"): \" + leftData);", "-      System.out.println(\"Right (\" + right.getSourceInfo() + \"): \" + rightData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8381bde001751c9b5b900e2cd0641ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "   private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException, AbsentInformationException", "signatureAfterChange": "   private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException, AbsentInformationException", "diff": ["-    if (printMessages) {", "-      printStream.println(\"dumpVariablesIntoInterpreterAndSwitch\");", "-    }", "+    _log.log(this + \" invoked dumpVariablesIntoInterpreterAndSwitch\");", "-      if (printMessages) {", "-        printStream.println(\"frame = suspendedThreadRef.frame(0);\");", "-      }", "+      _log.log(this + \" executing: frame = suspendedThreadRef.frame(0);\");", "-      if (printMessages) {", "-        printStream.println(\"got visibleVariables\");", "-      }", "+      _log.log(this + \" got visibleVariables\");", "-        if (printMessages) {", "-          printStream.println(\"local variable: \" + localVar);", "-        }", "+        _log.log(this + \" defined local variable: \" + localVar);", "-      if (printMessages) {", "-        printStream.println(\"setting active interpreter\");", "-      }", "+      _log.log(this + \" is setting active interpreter\");", "-      if (printMessages) {", "-        printStream.println(\"got active interpreter\");", "-      }"]}], "num": 19133}
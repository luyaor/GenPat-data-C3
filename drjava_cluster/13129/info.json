{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcc177a208af89b138c9ba67b793fbe1", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3445e26ecaa6be1ecc12d17a8c1385d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public int findNextEnclosingBrace(int pos, char opening, char closing) throws BadLocationException", "signatureAfterChange": "   public int findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "diff": ["-  public int findNextEnclosingBrace(int pos, char opening, char closing) throws BadLocationException {", "+  public int findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException {", "-    final StringBuilder keyBuf = ", "-      new StringBuilder(\"findNextEnclosingBrace:\").append(opening).append(':').append(closing).append(':').append(pos);", "-    final String key = keyBuf.toString();", "+    final Query key = new Query.NextEnclosingBrace(pos, opening, closing);", "-    if (pos >= getLength()-1) { return ERROR_INDEX; }", "+    if (pos >= getLength() - 1) { return -1; }", "-      if (i == text.length()) reducedPos = ERROR_INDEX; // No matching char was found", "+      if (i == text.length()) reducedPos = -1; // No matching char was found", "-      // Return position of matching char or ERROR_INDEX     ", "+      // Return position of matching char or ERROR_INDEX (-1)     ", "-    ", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a37e62a1c6c3b1d2a7571f5040d28c5c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace) throws      BadLocationException", "diff": ["-  public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException {", "+  public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace) throws ", "+    BadLocationException {", "-    final StringBuilder keyBuf = new StringBuilder(\"getIndentOfCurrStmt:\").append(pos).append(':').append(whitespace);", "-    final String key = keyBuf.toString();", "+    final Query key = new Query.IndentOfCurrStmt(pos, delims, whitespace);", "-          if (prevDelim == ERROR_INDEX) { // no delimiter found", "+          if (prevDelim == -1) { // no delimiter found", "-        if (reachedStart) nextNonWSChar = getFirstNonWSCharPos(DOCSTART);", "+        if (reachedStart) nextNonWSChar = getFirstNonWSCharPos(0);", "-        if (nextNonWSChar == ERROR_INDEX) nextNonWSChar = getLength();", "+        if (nextNonWSChar == -1) nextNonWSChar = getLength();", "-        _storeInCache(key, lineText, pos);", "+        _storeInCache(key, lineText, pos - 1);"]}], "num": 13129}
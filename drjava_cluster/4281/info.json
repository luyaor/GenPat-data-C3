{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b94caccea36972f2968b913ca56f3fe5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05932a8de82a16696995e03a6db99e48", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/EmptyRelation.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public boolean addAll(Collection<? extends Pair<T1, T2>> c)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\")   public OneToOneRelation<T2, T1> inverse()", "diff": ["-  public boolean containsAll(Collection<?> c) { return c.isEmpty(); }", "-  public boolean addAll(Collection<? extends Pair<T1, T2>> c) {", "-    if (c.isEmpty()) { return false; }", "-    else { throw new UnsupportedOperationException(); }", "-  }", "+ ", "+  @SuppressWarnings(\"unchecked\")", "+  public OneToOneRelation<T2, T1> inverse() { return (EmptyRelation<T2, T1>) INSTANCE; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ac585ea475e4f8fca09d17ec03ad176", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public static <T> SizedIterable<T> makeIterable(T v1, T v2)", "signatureAfterChange": "   public static <T> SizedIterable<T> make()", "diff": ["+  /** Create an immutable SizedIterable containing the given values. */", "+  public static <T> SizedIterable<T> make() {", "+    @SuppressWarnings(\"unchecked\") EmptyIterable<T> result = (EmptyIterable<T>) EmptyIterable.INSTANCE;", "+    return result;", "+  }", "-  /** Create an immutable SizedIterable containing the given values */", "-  public static <T> SizedIterable<T> makeIterable(T v1, T v2) {", "-    SizedIterable<T> result = SingletonIterable.make(v1);", "-    result = ComposedIterable.make(result, v2);", "-    return result;", "-  }"]}], "num": 4281}
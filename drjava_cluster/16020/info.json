{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f30815f45df27438938245533350f9e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f1558a022cba87204d57f212b0cf7d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public int commentLines(int selStart, int selEnd)", "signatureAfterChange": "   public int commentLines(int selStart, int selEnd)", "diff": ["-//      acquireWriteLock(); ", "-//      try {", "-//      synchronized(_reduced) {", "-        _setCurrentLocation(_getLineStartPos(selStart));", "+      acquireWriteLock(); ", "+      try {", "+        synchronized(_reduced) {", "+          _setCurrentLocation(_getLineStartPos(selStart));", "-        _commentLine();", "-        toReturn += WING_COMMENT_OFFSET;", "-//      }", "-//      }", "-//      finally { releaseWriteLock(); }", "+          _commentLine();", "+          toReturn += WING_COMMENT_OFFSET;", "+        }", "+      }", "+      finally { releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cf5f31135da8774b965ca192d65e854", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   private int _findKeywordAtToplevel(String keyword, String text, int textOffset)", "signatureAfterChange": "   private int _findKeywordAtToplevel(String keyword, String text, int textOffset)", "diff": ["-//    acquireReadLock();", "-//    synchronized(_reduced) {", "+    acquireReadLock();", "+    synchronized(_reduced) {", "-//      try {", "-      while (true) {", "-        index = text.indexOf(keyword, index);", "-        if (index == -1) break; // not found", "-        else {", "-          // found a match, check quality", "-          _setCurrentLocation(textOffset + index);", "-          ", "-          // check that the keyword is not in a comment and is followed by whitespace", "-          int indexPastKeyword = index + keyword.length();", "-          if (indexPastKeyword < text.length()) {", "-            if (! _isShadowed() && Character.isWhitespace(text.charAt(indexPastKeyword))) {", "-              // found a match but may not be at top level", "-              if (! notInBlock(index)) index = -1; //in a paren phrase, gone too far", "+      try {", "+        while (true) {", "+          index = text.indexOf(keyword, index);", "+          if (index == -1) break; // not found", "+          else {", "+            // found a match, check quality", "+            _setCurrentLocation(textOffset + index);", "+            ", "+            // check that the keyword is not in a comment and is followed by whitespace", "+            int indexPastKeyword = index + keyword.length();", "+            if (indexPastKeyword < text.length()) {", "+              if (! _isShadowed() && Character.isWhitespace(text.charAt(indexPastKeyword))) {", "+                // found a match but may not be at top level", "+                if (! notInBlock(index)) index = -1; //in a paren phrase, gone too far", "+                break;", "+              }", "+              else index++;  //move past so we can search again", "+            }", "+            else { // No space found past the keyword", "+              index = -1;", "-            else index++;  //move past so we can search again", "-          }", "-          else { // No space found past the keyword", "-            index = -1;", "-            break;", "-      }", "-      _setCurrentLocation(oldPos);", "+        _setCurrentLocation(oldPos);", "-      return index;", "-//      }", "-//      finally { releaseReadLock(); }", "-//    }", "+        return index;", "+      }", "+      finally { releaseReadLock(); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8792bb5d5e138df5c2e533325fb8c829", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["-    // throwErrorHuh();", "-    //long start = System.currentTimeMillis();", "+ ", "+    // Begins a compound edit.", "+    // int key = startCompoundEdit(); // commented out in connection with the FrenchKeyBoard Fix", "+    ", "+    writeLock();", "-      // Begins a compound edit.", "-     // int key = startCompoundEdit(); // commented out in connection with the FrenchKeyBoard Fix", "-      ", "-      if (selStart == selEnd) {", "-        Position oldCurrentPosition = createPosition(_currentLocation);", "-        // Indent, updating current location if necessary.", "-        if (_indentLine(reason)) {", "-          //int caretPos = getCaretPosition();", "-          //_doc().setCurrentLocation(caretPos);", "-          setCurrentLocation(oldCurrentPosition.getOffset());", "-          int space = getWhiteSpace();", "-          move(space);", "-          //setCaretPosition(caretPos + space);", "+      synchronized (_reduced) {", "+        if (selStart == selEnd) {  // single line to indent", "+          Position oldCurrentPosition = createPosition(_currentLocation);", "+          // Indent, updating current location if necessary.", "+          if (_indentLine(reason)) {", "+            setCurrentLocation(oldCurrentPosition.getOffset());", "+            int space = getWhiteSpace();", "+            move(space);", "+          }", "+        else _indentBlock(selStart, selEnd, reason, pm);", "-      else _indentBlock(selStart, selEnd, reason, pm);", "-      // Ends the compound edit.", "-      //endCompoundEdit(key);   //Changed to endLastCompoundEdit in connection with the FrenchKeyBoard Fix", "-      endLastCompoundEdit();", "-    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    catch (Throwable t) { throw new UnexpectedException(t); }", "+    finally { writeUnlock(); } ", "-    //long end = System.currentTimeMillis();", "-    //DrJava.consoleOut().println(\"Elapsed Time (sec): \" + ((end-start)/1000));", "-    //DrJava.consoleOut().println(\"   Cache size: \" + _helperCache.size());", "-    //DrJava.consoleOut().println(\"   Cache History size: \" + _helperCacheHistory.size());", "-    ", "-    //DrJava.consoleOut().println(\"   Longest: \" + maxHelpDelay + \"ms from \" + maxKey);", "-    //maxHelpDelay = 0;  maxKey = \"none\";", "-    ", "+    // Ends the compound edit.", "+    //endCompoundEdit(key);   //Changed to endLastCompoundEdit in connection with the FrenchKeyBoard Fix", "+    endLastCompoundEdit();"]}], "num": 16020}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2345693ea673e00a9596f02132b01248", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5379762b4ea8b0bdcad536f6cb1de661", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "d999f0af23b00e87ee091cf6b7f8d16576621e4d", "commitAfterChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public boolean isOnMatch()", "signatureAfterChange": "   public boolean isOnMatch()", "diff": ["-    if (off + len > _doc.getLength()) return false;", "-", "+    ", "+     String matchSpace;", "+    _doc.acquireReadLock();", "-      String matchSpace = _doc.getText(off, len);", "-      if (!_matchCase) {", "-        matchSpace = matchSpace.toLowerCase();", "-        findWord = findWord.toLowerCase();", "-      }", "-      return matchSpace.equals(findWord);", "+      if (off + len > _doc.getLength()) return false;", "+      matchSpace = _doc.getText(off, len);", "+    finally { _doc.releaseReadLock(); }", "+    ", "+    if (!_matchCase) {", "+      matchSpace = matchSpace.toLowerCase();", "+      findWord = findWord.toLowerCase();", "+    }", "+    return matchSpace.equals(findWord);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a0a87e703a19ed07fdaa7b576633e94", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public boolean isOnMatch()", "signatureAfterChange": "   public boolean isOnMatch()", "diff": ["-     */", "-    public boolean isOnMatch() { return _state.isOnMatch(); }", "+   */", "+  public boolean isOnMatch() {", "+    String findWord = _findWord;", "+    int len, off;", "+    if(_current == null) return false;", "+    ", "+    len = findWord.length();", "+    if (!_searchBackwards) off = _current.getOffset() - len;", "+    else off = _current.getOffset();", "+    if (off < 0) return false;", "+    if (off + len > _doc.getLength()) return false;", "+    try {", "+      String matchSpace = _doc.getText(off, len);", "+      if (!_matchCase) {", "+        matchSpace = matchSpace.toLowerCase();", "+        findWord = findWord.toLowerCase();", "+      }", "+      return matchSpace.equals(findWord);", "+    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+  }"]}], "num": 9183}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dda8b67d6b457482a5fdab0f40ff6bb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "867ced6568ffa3d77ed285e05319b637", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testRightAfterBrace() throws BadLocationException", "signatureAfterChange": "      public void testRightAfterBrace() throws BadLocationException", "diff": ["-  public void testRightAfterBrace() throws BadLocationException ", "-  {", "+  public void testRightAfterBrace() throws BadLocationException {", "-    assertTrue(\"START immediately follows an open brace.\", _rule.applyRule(_doc, 19, Indenter.IndentReason.OTHER));", "-    ", "+    assertTrue(\"START immediately follows an open brace.\", _rule.testApplyRule(_doc, 19, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START immediately follows an open paren.\", !_rule.applyRule(_doc, 40, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START immediately follows an open brace.\", _rule.applyRule(_doc, 41, Indenter.IndentReason.OTHER));", "-    ", "+    assertTrue(\"START immediately follows an open paren.\", !_rule.testApplyRule(_doc, 40, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START immediately follows an open brace.\", _rule.testApplyRule(_doc, 41, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a065de5d50becb30bc04c9852574e3a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testNoBrace() throws BadLocationException", "signatureAfterChange": "      public void testNoBrace() throws BadLocationException", "diff": ["-  public void testNoBrace() throws BadLocationException", "-  {", "+  public void testNoBrace() throws BadLocationException {", "-    assertTrue(\"START has no preceding brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START immediately follows an open paren, not a brace.\", !_rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START immediately follows an open paren, not a brace.\", !_rule.applyRule(_doc, _text.length()-1, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no preceding brace.\", !_rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START immediately follows an open paren, not a brace.\", !_rule.testApplyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START immediately follows an open paren, not a brace.\", !_rule.testApplyRule(_doc, _text.length()-1, Indenter.IndentReason.OTHER));"]}], "num": 18794}
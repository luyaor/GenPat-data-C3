{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52d225ce6fcb0f68596e8c5eb8fe3d16", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d20a399db56c6d89a4c7ed4e972b9c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipComments.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["+", "+        doc.move( startPos - currentPos + i);", "+        ReducedModelState state = doc.getStateAtCurrent();", "+        doc.move(-startPos + currentPos - i);", "-        synchronized(doc) {", "-          doc.move( startPos - currentPos + i);", "-          ReducedModelState state = doc.getStateAtCurrent();", "-          doc.move(-startPos + currentPos - i);", "-          ", "-          ", "-          currentChar = text.charAt(i);", "-          ", "-          if (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) return false;", "-          if (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) {  // Handle case: ...*/*", "-            previousChar = '\\0'; ", "-            continue;", "+        ", "+        currentChar = text.charAt(i);", "+        ", "+        if (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) return false;", "+        if (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) {  // Handle case: ...*/*", "+          previousChar = '\\0'; ", "+          continue;", "+        }", "+        if (state.equals(ReducedModelState.FREE)) { // Can prefix still fit on the current line?", "+          if (_prefix.length() > lineLength - i) return false;", "+          else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/') {", "+            // '/' is the only non-WS character that we consume without", "+            // immediately returning false. When we try to match the prefix,", "+            // we also need to reflect this implicit lookahead mechanism.", "+            return true;", "-          if (state.equals(ReducedModelState.FREE)) { // Can prefix still fit on the current line?", "-            if (_prefix.length() > lineLength - i) return false;", "-            else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/') {", "-              // '/' is the only non-WS character that we consume without", "-              // immediately returning false. When we try to match the prefix,", "-              // we also need to reflect this implicit lookahead mechanism.", "-              return true;", "-            }", "-            else if (currentChar == '/') {", "-              if (previousChar == '/') return false;", "-            }", "-            else if (currentChar == ' ' || currentChar == '\\t') {  }", "-            else if (!(currentChar == '*' && previousChar == '/')) return false;", "+          else if (currentChar == '/') {", "+            if (previousChar == '/') return false;", "+          else if (currentChar == ' ' || currentChar == '\\t') {  }", "+          else if (!(currentChar == '*' && previousChar == '/')) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9956cecba6a9b196e4a09fc44dac4e5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBrace.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-    synchronized(doc) {", "-      doc.move(lineStart - origin);", "-      IndentInfo info = doc.getIndentInformation();", "-      doc.move(origin - lineStart);", "-      ", "-      ", "-      if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "-          (info.distToBrace < 0)) {", "-        // Precondition not met: we should have a brace", "-        return false;", "-      }", "-      int bracePos = lineStart - info.distToBrace;", "-      ", "-      // Get position of previous non-WS char (not in comments)", "-      int prevNonWS = -1;", "-      try {", "-        prevNonWS = doc.findPrevNonWSCharPos(bracePos);", "-        char c = doc.getText(prevNonWS,1).charAt(0);", "-        for (int i=0; i<_prefix.length; i++) {", "-          char prefix = _prefix[i];", "-          if (c == prefix) {", "-            return true;", "-          } ", "-        }", "-      }", "-      catch (BadLocationException e) {", "-      }    ", "+    doc.move(lineStart - origin);", "+    IndentInfo info = doc.getIndentInformation();", "+    doc.move(origin - lineStart);", "+    ", "+    ", "+    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+        (info.distToBrace < 0)) {", "+      // Precondition not met: we should have a brace", "+      return false;", "+    int bracePos = lineStart - info.distToBrace;", "+    ", "+    // Get position of previous non-WS char (not in comments)", "+    int prevNonWS = -1;", "+    try {", "+      prevNonWS = doc.findPrevNonWSCharPos(bracePos);", "+      char c = doc.getText(prevNonWS,1).charAt(0);", "+      for (int i=0; i<_prefix.length; i++) {", "+        char prefix = _prefix[i];", "+        if (c == prefix) {", "+          return true;", "+        } ", "+      }", "+    }", "+    catch (BadLocationException e) {", "+    }    "]}], "num": 17223}
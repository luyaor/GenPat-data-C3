{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01cbf40f8664c5a066412ccf69a38847", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5472b4bb4728254edcfe5e0bff6e500b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r   public void testSuccessful()", "signatureAfterChange": "   public void testSuccessful()", "diff": ["-   */\r", "-  public void testSuccessful() {\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".dj1\") && !pathName.getAbsolutePath().endsWith(\"Yay.dj1\");  //we will check Yay.dj1 for 1.4 augmentation\r", "-      }\r", "-    });\r", "-\r", "-    System.out.flush();\r", "-    \r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-    result = llc.convert(testFiles);\r", "-    \r", "-    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-    \r", "-    assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());\r", "-    \r", "-    /**Now make sure that the resulting java files are correct.*/\r", "-    for(int i = 0; i < testFiles.length; i++) {\r", "-      File currFile = testFiles[i];\r", "-      String fileName = currFile.getAbsolutePath();\r", "-      fileName = fileName.substring(0, fileName.length() -4);\r", "-      File resultingFile = new File(fileName + \".java\");\r", "-      File correctFile = new File(fileName + \".expected\");\r", "-      if (correctFile.exists()) {\r", "-        try {\r", "-          assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",\r", "-                       readFileAsString(correctFile),\r", "-                       readFileAsString(resultingFile));\r", "-        }\r", "-        catch (IOException ioe) {\r", "-          fail(ioe.getMessage());\r", "-          // let JUnit throw the exception\r", "-        }\r", "-      }\r", "-    }\r", "-  }\r", "+   */", "+  public void testSuccessful() {", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".dj1\") && !pathName.getAbsolutePath().endsWith(\"Yay.dj1\");  //we will check Yay.dj1 for 1.4 augmentation", "+      }", "+    });", "+", "+    System.out.flush();", "+    ", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    ", "+    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+    ", "+    assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+    ", "+    /**Now make sure that the resulting java files are correct.*/", "+    for(int i = 0; i < testFiles.length; i++) {", "+      File currFile = testFiles[i];", "+      String fileName = currFile.getAbsolutePath();", "+      fileName = fileName.substring(0, fileName.length() -4);", "+      File resultingFile = new File(fileName + \".java\");", "+      File correctFile = new File(fileName + \".expected\");", "+      if (correctFile.exists()) {", "+        try {", "+          assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "+                       IOUtil.toString(correctFile),", "+                       IOUtil.toString(resultingFile));", "+        }", "+        catch (IOException ioe) {", "+          fail(ioe.getMessage());", "+          // let JUnit throw the exception", "+        }", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "570800e3cbe1e112fafd6e081c454a4c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r   public void testSuccessful()", "signatureAfterChange": "   public void testSuccessful()", "diff": ["-   * file is correct.*/\r", "-  public void testSuccessful() {\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".dj0\");\r", "-      }\r", "-    });\r", "-    \r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-    result = llc.convert(testFiles);\r", "-    \r", "-    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-    assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());\r", "-    \r", "-    /**Now make sure that the resulting java files are correct.*/\r", "-    for(int i = 0; i < testFiles.length; i++) {\r", "-      File currFile = testFiles[i];\r", "-      String fileName = currFile.getAbsolutePath();\r", "-      fileName = fileName.substring(0, fileName.length() -4);\r", "-      File resultingFile = new File(fileName + \".java\");\r", "-      File correctFile = new File(fileName + \".expected\");\r", "-      \r", "-      if (correctFile.exists()) {\r", "-        try {\r", "-          assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",\r", "-                       readFileAsString(correctFile),\r", "-                       readFileAsString(resultingFile));\r", "-        }\r", "-        catch (IOException ioe) {\r", "-          fail(ioe.getMessage());\r", "-          // let JUnit throw the exception\r", "-        }\r", "-      }\r", "-    }\r", "-  }\r", "+   * file is correct.*/", "+  public void testSuccessful() {", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".dj0\");", "+      }", "+    });", "+    ", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    ", "+    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+    assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+    ", "+    /**Now make sure that the resulting java files are correct.*/", "+    for(int i = 0; i < testFiles.length; i++) {", "+      File currFile = testFiles[i];", "+      String fileName = currFile.getAbsolutePath();", "+      fileName = fileName.substring(0, fileName.length() -4);", "+      File resultingFile = new File(fileName + \".java\");", "+      File correctFile = new File(fileName + \".expected\");", "+      ", "+      if (correctFile.exists()) {", "+        try {", "+          assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "+                       IOUtil.toString(correctFile),", "+                       IOUtil.toString(resultingFile));", "+        }", "+        catch (IOException ioe) {", "+          fail(ioe.getMessage());", "+          // let JUnit throw the exception", "+        }", "+      }", "+    }", "+  }"]}], "num": 5960}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5c24bc62efa9b74b08f9ddcf15bac47", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "499332270814bd449663d3f92df83224", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": "    public static boolean arrayEquals(Object[] array1, Object[] array2)", "signatureAfterChange": "    public static boolean arrayEquals(Object[] array1, Object[] array2)", "diff": ["-  public static boolean arrayEquals(Object[] array1, Object[] array2) {", "-    if (array1 == null && array2 == null) { return true; }", "-    if (array1 == null || array2 == null) { return false; }", "-    if (array1.length != array2.length) { return false; }", "-    for (int i = 0; i < array1.length; i++) {", "-      if (!array1[i].equals(array2[i])) { return false;}", "-    }", "-    return true;", "-  }", "+  public static boolean arrayEquals(Object[] array1, Object[] array2) { return Arrays.equals(array1, array2); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af70a1d25602373fdfa0d6cce42ec5e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileSuccessTestCase.java", "commitBeforeChange": "0ceee5d462dea01e571a97507c2d04495b971db0", "commitAfterChange": "ab9e3c17a5a3c5f93e2194242f915fa2f6bda14a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected boolean _isGenericCompiler()", "signatureAfterChange": "   protected boolean _isGenericCompiler()", "diff": ["-  protected boolean _isGenericCompiler() {", "-    String name = _model.getCompilerModel().getActiveCompiler().getClass().getName();", "-    for (int i=0; i < CompilerRegistry.GENERIC_JAVA_COMPILERS.length; i++) {", "-      if (name.equals(CompilerRegistry.GENERIC_JAVA_COMPILERS[i])) {", "-        //System.out.println(name + \" supports generics\");", "-        return true;", "-      }", "-    }", "-    //System.out.println(name + \" doesn't support generics\");", "-    return false;", "-  }", "+  protected boolean _isGenericCompiler() { return ! CompilerProxy.VERSION.equals(\"1.4\"); }"]}], "num": 22386}
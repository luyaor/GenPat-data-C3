{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "221fbeda88c53d3a9744a317824a64a9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7346c2caef116fa6f8c72463ba7067", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": "   protected boolean checkForCyclicInheritance(SymbolData sd, LinkedList<SymbolData> hierarchy, TypeDefBase tdb)", "signatureAfterChange": "   protected boolean checkForCyclicInheritance(SymbolData sd, LinkedList<SymbolData> hierarchy, TypeDefBase tdb)", "diff": ["-    boolean doReturn = checkForCyclicInheritance(sd.getSuperClass(), cloneSDList(hierarchy), tdb);", "-    LinkedList<SymbolData> interfaces = sd.getInterfaces();", "-    for (int i = 0; i < interfaces.size(); i++) {", "-      SymbolData currInterface = interfaces.get(i);", "-      doReturn |= checkForCyclicInheritance(currInterface, cloneSDList(hierarchy), tdb);", "+    LinkedList<SymbolData> clonedHierarchy = cloneSDList(hierarchy);", "+    boolean doReturn = checkForCyclicInheritance(sd.getSuperClass(), clonedHierarchy, tdb);", "+    ", "+    //check the interfaces", "+    for (SymbolData iSD: sd.getInterfaces()) {", "+      doReturn |= checkForCyclicInheritance(iSD, clonedHierarchy, tdb);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91de230a4f0cb76d4679c733ce244c35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public synchronized void startup() throws DebugException", "signatureAfterChange": "   public synchronized void startup() throws DebugException", "diff": ["-      List<OpenDefinitionsDocument> list = _model.getDefinitionsDocuments();", "-      for (int i = 0; i < list.size(); i++) {", "-        OpenDefinitionsDocument currDoc = list.get(i);", "-        currDoc.checkIfClassFileInSync();", "+      for (OpenDefinitionsDocument doc: _model.getDefinitionsDocuments()) {", "+        doc.checkIfClassFileInSync();", "-    else {", "+    else", "-    }"]}], "num": 27088}
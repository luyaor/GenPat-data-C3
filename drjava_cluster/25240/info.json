{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c02481f520d94d32c83cb0f2c41675d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "477d90c004c62650392aa4c887a45505", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 623, "methodNumberAfterChange": 624, "signatureBeforeChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset,                                          final boolean shouldHighlight, final boolean shouldAddToHistory)", "signatureAfterChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset,                                          final boolean shouldHighlight, final boolean shouldAddToHistory)", "diff": ["-    final boolean toSameDoc = _model.getActiveDocument().equals(doc);", "+    OpenDefinitionsDocument activeDoc =  _model.getActiveDocument();", "+    final boolean toSameDoc = (activeDoc == doc);", "-        ", "-        // get the line number after the switch of documents was made", "-        int lineNumber = doc.getLineOfOffset(offset) + 1;", "-        ", "-        // this block occurs if the documents is already open and as such has a positive size", "-        if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) { ", "-          EventQueue.invokeLater(new Runnable() { ", "-            public void run() { ", "-              if (! toSameDoc) Utilities.clearEventQueue();  // pause to let async aspects of active document switch complete", "-              _currentDefPane.centerViewOnOffset(offset);", "-              _currentDefPane.requestFocusInWindow();", "-            }", "-          });", "-        }", "-        ", "+", "-          int startOffset = doc._getOffset(lineNumber);  // Much faster to directly search back from offset!", "-          if (startOffset > -1) {", "-            int endOffset = doc._getLineEndPos(startOffset);", "-            if (endOffset > -1) {", "+          int startOffset = doc._getLineStartPos(offset);", "+          if (startOffset >= 0) {", "+            int endOffset = doc._getLineEndPos(offset);", "+            if (endOffset >= 0) {", "+        }", "+        // Is the following test necessary?", "+        if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {", "+          EventQueue.invokeLater(new Runnable() { ", "+            public void run() {", "+              _currentDefPane.centerViewOnOffset(offset);", "+              _currentDefPane.requestFocusInWindow();", "+            }", "+          });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f96caa5cc9dba9096fcbc1ec1437142", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 589, "methodNumberAfterChange": 589, "signatureBeforeChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset,                                          final boolean shouldHighlight, final boolean shouldAddToHistory)", "signatureAfterChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset,                                          final boolean shouldHighlight, final boolean shouldAddToHistory)", "diff": ["+         ", "+    final boolean toSameDoc = _model.getActiveDocument().equals(doc);", "-    boolean toSameDoc = _model.getActiveDocument().equals(doc);", "-    ", "-    if (! toSameDoc) {", "-      _model.setActiveDocument(doc);  // blocks until active document is set internally", "-      _findReplace.updateFirstDocInSearch();", "-    }", "-    else _model.refreshActiveDocument();", "-   ", "-    /* The commented out code caused the debugger to deadlock in some situations.  After frame initialization, this", "-     * method is only called in event thread. */", "-//    Runnable command = new Runnable() {  ", "-//      public void run() {", "+    Runnable command = new Runnable() {", "+      public void run() {", "+        ", "-        if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {      ", "-          _currentDefPane.centerViewOnOffset(offset);", "-          _currentDefPane.requestFocusInWindow();", "+        if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) { ", "+          EventQueue.invokeLater(new Runnable() { ", "+            public void run() { ", "+              if (! toSameDoc) Utilities.clearEventQueue();  // pause to let async aspects of active document switch complete", "+              _currentDefPane.centerViewOnOffset(offset);", "+              _currentDefPane.requestFocusInWindow();", "+            }", "+          });", "-//          doc.acquireReadLock();", "-//          try {", "-//          }", "-//          finally { doc.releaseReadLock(); }", "-        ", "-//        if (shouldAddToHistory) { addToBrowserHistory(); }    ", "-//      }", "-//    };", "+      }", "+    };", "-    /* Comment by mgricken: If ! toSameDoc, the _currentDefPane hasn't been created yet for a new document.   ", "-     * Consequently, we need to use EventQueue.invokeLater if ! toSameDoc. */", "-//    if (toSameDoc) Utilities.invokeLater(command);  ", "-//    else EventQueue.invokeLater(command);", "+    if (! toSameDoc) {", "+      _model.setActiveDocument(doc);  // blocks until active document is set internally", "+      _findReplace.updateFirstDocInSearch();", "+      EventQueue.invokeLater(command);  // postpone running command until everything already in the queue completes.", "+    }", "+    else {", "+      _model.refreshActiveDocument();", "+      command.run();", "+    }"]}], "num": 25240}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "821b873da1cbcb5a35d0c3761f1e707c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a668f51296b341a7975f18623b8d44f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TreeClass.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Iterable<VariableType> declaredTypeParameters()", "signatureAfterChange": "   public Iterable<VariableType> declaredTypeParameters()", "diff": ["-    Iterable<TypeParameter> paramAsts = IterUtil.empty();", "-    if (_ast instanceof GenericClassDeclaration) {", "-      paramAsts = IterUtil.asIterable(((GenericClassDeclaration)_ast).getTypeParameters());", "-    }", "-    else if (_ast instanceof GenericInterfaceDeclaration) {", "-      paramAsts = IterUtil.asIterable(((GenericInterfaceDeclaration)_ast).getTypeParameters());", "+    List<TypeParameter> paramAsts = Collections.emptyList();", "+    if (_ast instanceof TypeDeclaration) {", "+      paramAsts = ((TypeDeclaration) _ast).getTypeParams().unwrap(paramAsts);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e337832bd50907ede504008eeb3a22b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "         private void compileClass(Node ast)", "signatureAfterChange": "         private void compileClass(Node ast)", "diff": ["-      TypeParameter[] paramAsts;", "-      if (ast instanceof GenericClassDeclaration) {", "-        paramAsts = ((GenericClassDeclaration) ast).getTypeParameters();", "+      List<TypeParameter> paramAsts = Collections.emptyList();", "+      if (ast instanceof TypeDeclaration) {", "+        paramAsts = ((TypeDeclaration) ast).getTypeParams().unwrap(paramAsts);", "-      else if (ast instanceof GenericInterfaceDeclaration) {", "-        paramAsts = ((GenericInterfaceDeclaration) ast).getTypeParameters();", "-      }", "-      else { paramAsts = new TypeParameter[0]; }", "-      if (paramAsts.length > 0) { sigBuilder.append(typeParamListSignature(paramAsts)); }", "+      if (!paramAsts.isEmpty()) { sigBuilder.append(typeParamListSignature(paramAsts)); }"]}], "num": 11635}
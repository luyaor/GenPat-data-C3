{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8698158dbc60be6e7ed3c8d4dbe27d6f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485137813422015a3af5409896ff50fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "dc0befa68595a5c499b8803df615b4dd1cb06eb6", "commitAfterChange": "1a1442977dda2bbe384cc0f246999c7f651f6997", "methodNumberBeforeChange": 282, "methodNumberAfterChange": 290, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "diff": ["-      final OpenDefinitionsDocument doc;", "+      final ConcreteOpenDefDoc doc = new ConcreteOpenDefDoc(file);", "-        doc = new ConcreteOpenDefDoc(file, ((DocFile)file).getPackage());", "-      }", "-      else {", "-        doc = new ConcreteOpenDefDoc(file);", "+        DocFile df = (DocFile)file;", "+        Pair<Integer,Integer> scroll = df.getScroll();", "+        Pair<Integer,Integer> sel = df.getSelection();", "+        doc.setPackage(df.getPackage());", "+        doc.setInitialVScroll(scroll.getFirst());", "+        doc.setInitialHScroll(scroll.getSecond());", "+        doc.setInitialSelStart(sel.getFirst());", "+        doc.setInitialSelEnd(sel.getSecond());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7d0a27f217df8e7c414b6dda9d46dca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "714a91a3f9a91ffe3e5ee9ae0bd0c977c7aa4e31", "commitAfterChange": "86cce18ff80f67b178e899650f588fd3636436b4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   static boolean handleCommandLineArgs(String[] args)", "signatureAfterChange": "   static boolean handleCommandLineArgs(String[] args)", "diff": ["+    boolean heapSizeGiven = false;  // indicates whether args includes an argument of the form -Xmx<number>", "-        ", "-      else if ((arg.length() > 1) && (arg.substring(0,2).equals(\"-X\"))) _jmvArgs.add(arg); ", "+      ", "+      else if ((arg.length() > 1) && (arg.substring(0,2).equals(\"-X\"))) {", "+        if (arg.substring(0,4).equals(\"-Xmx\")) heapSizeGiven = true;", "+        _jvmArgs.add(arg); ", "+      }", "+    ", "+    String jvmArgString = getConfig().getSetting(MASTER_JVM_ARGS);", "+    List<String> jvmArgs = ArgumentTokenizer.tokenize(jvmArgString);", "+    if (jvmArgs != null && jvmArgs.size() != 0) _jvmArgs.addAll(jvmArgs);", "+    ", "+    if (! heapSizeGiven && ! jvmArgString.contains(\"-Xmx\")) _jvmArgs.add(DEFAULT_MAX_HEAP_SIZE_ARG);", "+        ", "+    _log.log(\"_jvmArgs = \" + _jvmArgs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de481dbf4d95228b6363f622b80f94b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public synchronized void restartInterpreterJVM()", "diff": ["-  public void restartInterpreterJVM() {", "-    synchronized(this) {", "-      i++;", "-      //DrJava.consoleOut().println(\"MainJVM: iteration \" + i);", "+  public synchronized void restartInterpreterJVM() {", "+    if (_startupInProgress) {", "+      return;", "+    }", "+    _startupInProgress = true;   ", "+    ", "+    // _model may be null if we're running a test on this", "+    if (_model != null)", "+      _model.interactionsResetting();", "+    ", "+    if (_restartThread != null) {", "+      //DrJava.consoleOut().println(\"Disabling _restartThread\");", "+      _restartThread.disable();", "+    }", "+    ", "+    killInterpreter();", "+    ", "+    int debugPort = getDebugPort();", "+    ", "+    String className = InterpreterJVM.class.getName();", "+    String[] args = new String[] { getIdentifier() };", "+    Vector<String> jvmArgs = new Vector<String>();", "+    ", "+    if (allowAssertions()) {", "+      jvmArgs.addElement(\"-ea\");", "+    }", "+    ", "+    if (debugPort > -1) {", "+      jvmArgs.addElement(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=\" + ", "+                         debugPort);", "+      jvmArgs.addElement(\"-Xdebug\");", "+      jvmArgs.addElement(\"-Xnoagent\");", "+      jvmArgs.addElement(\"-Djava.compiler=NONE\");", "+    }", "+    ", "+    String[] jvmArgsArray = new String[jvmArgs.size()];", "+    for (int i=0; i < jvmArgs.size(); i++) {", "+      jvmArgsArray[i] = jvmArgs.elementAt(i);", "+    }", "+    ", "+    //System.out.println(\"starting interpreter... \" + jvmargs[1]);", "+    /*String classpath = _model.getClasspath() +", "+     System.getProperty(\"path.separator\") +", "+     System.getProperty(\"java.class.path\");", "+     */", "+    try {", "+      //DrJava.consoleOut().println(\"In MainJVM: starting interpreter jvm\");", "+      _interpreterProcess = ExecJVM.", "+        runJVMPropogateClassPath(className, args, jvmArgsArray);", "-      if (_startupInProgress) {", "-        return;", "-      }", "-      _startupInProgress = true;   ", "-      ", "-      // _model may be null if we're running a test on this", "-      if (_model != null)", "-        _model.interactionsResetting();", "-      ", "-      if (_restartThread != null) {", "-        //DrJava.consoleOut().println(\"Disabling _restartThread\");", "-        _restartThread.disable();", "-      }", "-", "-      killInterpreter();", "-      ", "-      int debugPort = getDebugPort();", "-", "-      String className = InterpreterJVM.class.getName();", "-      String[] args = new String[] { getIdentifier() };", "-      String[] jvmargs;", "-      if (debugPort > -1) {", "-        jvmargs = new String[] {", "-          //\"-Dcom.apple.backgroundOnly=true\",", "-            // For debug interface:", "-            \"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=\" + debugPort,", "-            \"-Xdebug\",", "-            \"-Xnoagent\",", "-            \"-Djava.compiler=NONE\"", "-            //  \"-ea\"", "-        };", "-      }", "-      else {", "-        jvmargs = new String[] {};", "-      }", "-      ", "-      //System.out.println(\"starting interpreter... \" + jvmargs[1]);", "-      /*String classpath = _model.getClasspath() +", "-        System.getProperty(\"path.separator\") +", "-        System.getProperty(\"java.class.path\");", "-      */", "-      try {", "-        //DrJava.consoleOut().println(\"In MainJVM: starting interpreter jvm\");", "-        _interpreterProcess = ExecJVM.", "-            runJVMPropogateClassPath(className, args, jvmargs);", "-        //DrJava.consoleOut().println(\"In MainJVM: started interpreter jvm \" +i);", "-        ", "-        // Start a thread to wait for the interpreter to die and to fire", "-        // off a new one (and notify model) when it happens", "-        _restartThread = new RestartThread(i) {", "-          public void run() {", "-            try {", "-              int status = _interpreterProcess.waitFor();", "-              //DrJava.consoleOut().println(\"In Thread: interpreterProcess ended. status=\" +", "-              //                            status + \", i = \" + j);", "+      // Start a thread to wait for the interpreter to die and to fire", "+      // off a new one (and notify model) when it happens", "+      _restartThread = new RestartThread() {", "+        public void run() {", "+          try {", "+            int status = _interpreterProcess.waitFor();", "+            synchronized(MainJVM.this) {", "+              if (_shouldReset) {", "+                boolean currentlyStarting = _startupInProgress;", "+                restartInterpreterJVM();", "+                if (!currentlyStarting) {", "+                  replCalledSystemExit(status);", "+                }", "+              }", "+            }", "+          }", "+          catch (InterruptedException ie) {", "+            throw new edu.rice.cs.util.UnexpectedException(ie);", "+          }", "+        }", "+      };", "+      // If RESET_TIME_OUT seconds pass before the new InterpreterJVM registers, try restarting the JVM", "+      _timerThread = new RestartThread() {", "+        public void run() {", "+          _restartTimer = new Timer(RESET_TIME_OUT*1000, new ActionListener() {", "+            int count = 0;", "+            public void actionPerformed(ActionEvent e) {", "-                if (_shouldReset) {", "-                  //DrJava.consoleOut().println(\"I should reset (thread \" + j + \")\");", "-                  boolean currentlyStarting = _startupInProgress;", "-                  //DrJava.consoleOut().println(\"Currently starting for \" + j + \" = \" + currentlyStarting);", "-                  restartInterpreterJVM();", "-                  if (!currentlyStarting) {", "-                    //DrJava.consoleOut().println(\"Not starting up, so display message, thread \" + j);", "-                    replCalledSystemExit(status);", "-                  }", "-                }", "-              }", "-              //DrJava.consoleOut().println(\"Thread finished: \" + j);", "-            }", "-            catch (InterruptedException ie) {", "-              throw new edu.rice.cs.util.UnexpectedException(ie);", "-            }", "-          }", "-        };", "-        // If RESET_TIME_OUT seconds pass before the new InterpreterJVM registers, try restarting the JVM", "-        _timerThread = new RestartThread(i) {", "-          public void run() {", "-            _restartTimer = new Timer(RESET_TIME_OUT*1000, new ActionListener() {", "-              int count = 0;", "-              public void actionPerformed(ActionEvent e) {", "-                synchronized(MainJVM.this) {", "-                  if (!_shouldReset) {", "-                    _stopTimerThread();", "-                    return;", "-                  }", "-                  if (count < 2) {", "-                    _model.printDebugMessage(\"Could not connect to InterpreterJVM, trying again...\");", "-                    restartInterpreterJVM();", "-                    count++;", "-                    return;", "-                  }", "-                  _model.printDebugMessage(\"Connection failed, the interactions window will not work\");", "+                if (!_shouldReset) {", "+                  return;", "+                if (count < 2) {", "+                  _model.printDebugMessage(\"Could not connect to InterpreterJVM, trying again...\");", "+                  restartInterpreterJVM();", "+                  count++;", "+                  return;", "+                }", "+                _model.printDebugMessage(\"Connection failed, the interactions window will not work\");", "+                _stopTimerThread();", "-            });               ", "-            _restartTimer.setRepeats(true);", "-            _restartTimer.start();   ", "-          }", "-        };", "-        //DrJava.consoleOut().println(\"In MainJVM: starting thread \" + i);", "-        _restartThread.start();", "-        _timerThread.start();", "-      }", "-      catch (IOException ioe) {", "-        _threwException(ioe);", "-      }", "-      ", "+            }", "+          });               ", "+          _restartTimer.setRepeats(true);", "+          _restartTimer.start();   ", "+        }", "+      };", "+      _restartThread.start();", "+      _timerThread.start();", "+    }", "+    catch (IOException ioe) {", "+      _threwException(ioe);"]}], "num": 19968}
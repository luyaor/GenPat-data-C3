{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5d2601e31b4b7f83867a9bde472d14b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06f761880cedb21b442a148691abcae1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "7bcdd967752ffe549506dba1c9c4f60803462779", "commitAfterChange": "af1d1f7c09d0639a913d397da4b034d6533c94dd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testGetErrorAtOffset()", "signatureAfterChange": "   public void testGetErrorAtOffset() throws IOException, OperationCanceledException", "diff": ["-  public void testGetErrorAtOffset() {", "+  public void testGetErrorAtOffset() throws IOException, OperationCanceledException {", "-    try {", "-      OpenDefinitionsDocument doc = getter.getDocumentForFile(files[4]);", "-      assertEquals(\"Wrong error at given offset.\", errors[1],", "-                   model.getErrorAtOffset(doc, 125));", "-      doc = getter.getDocumentForFile(files[4]);", "-      assertEquals(\"Wrong error at given offset.\", errors[5],", "-                   model.getErrorAtOffset(doc, 38));", "-    }", "-    catch (IOException e) {", "-      fail(\"Unexpected IOException.\");", "-    }", "-    catch (OperationCanceledException e) {", "-      fail(\"Unexpected OperationCanceledException.\");", "-    }", "+    OpenDefinitionsDocument doc = getter.getDocumentForFile(files[4]);", "+    assertEquals(\"Wrong error at given offset.\", errors[1],", "+                 model.getErrorAtOffset(doc, 125));", "+    doc = getter.getDocumentForFile(files[4]);", "+    assertEquals(\"Wrong error at given offset.\", errors[5],", "+                 model.getErrorAtOffset(doc, 38));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44623ae3b16ec341daf46002d637ee25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "7bcdd967752ffe549506dba1c9c4f60803462779", "commitAfterChange": "af1d1f7c09d0639a913d397da4b034d6533c94dd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testHasErrorsWithPositions()", "signatureAfterChange": "   public void testHasErrorsWithPositions() throws IOException, OperationCanceledException", "diff": ["-  public void testHasErrorsWithPositions() {", "+  public void testHasErrorsWithPositions() throws IOException, OperationCanceledException {", "-    try {", "-      OpenDefinitionsDocument doc = getter.getDocumentForFile(files[4]);", "-      assertTrue(\"File should have errors with lines.\", model.hasErrorsWithPositions(doc));", "-      doc = getter.getDocumentForFile(files[1]);", "-      assertTrue(\"File shouldn't have errors with lines.\", !model.hasErrorsWithPositions(doc));", "-    }", "-    catch (IOException e) {", "-      fail(\"Unexpected IOException.\");", "-    }", "-    catch (OperationCanceledException e) {", "-      fail(\"Unexpected OperationCanceledException.\");", "-    }", "+    OpenDefinitionsDocument doc = getter.getDocumentForFile(files[4]);", "+    assertTrue(\"File should have errors with lines.\", model.hasErrorsWithPositions(doc));", "+    doc = getter.getDocumentForFile(files[1]);", "+    assertTrue(\"File shouldn't have errors with lines.\", !model.hasErrorsWithPositions(doc));    ", "+  }"]}], "num": 12568}
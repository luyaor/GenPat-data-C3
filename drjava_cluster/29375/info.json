{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d7a186df2246f3830a4f92730ac2d5b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261645b2aab164e45e05bb335ebe1182", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "55ffd5d461fa009444744f2527631191c6f9decc", "commitAfterChange": "0fed03351fa05790a48229380b62c5e4589b0332", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "          public CustomCellEditor(final FileTextField textField)", "signatureAfterChange": "          public CustomCellEditor(final FileTextField textField)", "diff": ["+      ", "+      // remove the default editor delegate in order to replace it", "+      textField.removeActionListener(delegate); ", "+      ", "+      // redefine the delegate (protected field)", "+                ", "-          ", "-            if (fd.isNew())", "-              _currentFile = null;", "-            else ", "-              _currentFile = fd.getFile();", "-            ", "-            textField.setFile(fd);", "+            _originalDisplay = fd;", "+            textField.setFileDisplay(fd);", "-            _currentFile = null;", "+            _originalDisplay = null;", "-          File f = textField.getFile();", "-          if (f == null)", "+          FileDisplay fd = textField.getFileDisplay();", "+          if (fd == null)", "-            return _fdManager.makeFileDisplay(f);", "+            return fd;", "+        ", "+        public String toString() { return \"CustomCellEditor.[anonymous].EditorDelegate\"; }", "+      ", "+      // add the new delegate as the action listener"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f80c6e2129209c4793888c75c6295bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeClassLoader.java", "commitBeforeChange": "a0233fef3427e8ddd7241be47fe79cd3cd5d54bc", "commitAfterChange": "bdbf83f4446e0652c53f385c6b6636ed4fa2affd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private static ClassLoader makeParent(ClassLoader p)", "signatureAfterChange": "      private static ClassLoader makeParent(ClassLoader p)", "diff": ["+    Iterable<String> includes =", "+      IterUtil.make(Object.class.getName(),", "+                    String.class.getName(),", "+                    RuntimeBindings.class.getName(),", "+                    TreeClassLoader.class.getName(),", "+                    TreeCompiler.EvaluationAdapter.class.getName(),", "+                    TreeCompiler.BindingsFactory.class.getName());", "+    // For maximum flexibility, we let p load bootstrap classes", "+    // (except those listed above)", "-                               Object.class.getName(),", "-                               String.class.getName(),", "-                               RuntimeBindings.class.getName(),", "-                               TreeClassLoader.class.getName(),", "-                               TreeCompiler.EvaluationAdapter.class.getName(),", "-                               TreeCompiler.BindingsFactory.class.getName());", "+                               includes, true);"]}], "num": 29375}
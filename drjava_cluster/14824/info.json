{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57c49d651c0f8a0ae56324e5d6d1da95", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2321d67a0ba7d78085c468565ab1038d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "       public Process value()", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder)       throws InterruptedException, InvocationTargetException, IOException", "diff": ["-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(new Thunk<Process>() {", "-      public Process value() {", "-        try {", "-          return runJavaProcess(TaskProcess.class.getName(), IterUtil.<String>empty(), classPath, workingDir, ", "-                                properties, jvmParams);", "-        }", "-        catch (IOException e) { throw new WrappedException(e); }", "-      }", "+  public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder)", "+      throws InterruptedException, InvocationTargetException, IOException {", "+    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder).value(); }", "+    catch (WrappedException e) {", "+      Throwable cause = e.getCause();", "+      if (cause instanceof InterruptedException) { throw (InterruptedException) cause; }", "+      else if (cause instanceof InvocationTargetException) { throw (InvocationTargetException) cause; }", "+      else if (cause instanceof IOException) { throw (IOException) cause; }", "+      else { throw e; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "240d1542353c86c2c3215db08b7989a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, InvocationTargetException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "diff": ["-      throws InterruptedException, InvocationTargetException, IOException {", "-    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder, onExit).value(); }", "+      throws InterruptedException, ExecutionException, IOException {", "+    Thunk<Remote> task = new ExportRemoteTask(factory);", "+    try { return new ProcessTaskController<Remote>(jvmBuilder, DIRECT_EXECUTOR, task, onExit).get(); }", "+    // an interrupt on this thread translates into a \"cancel\" because DIRECT_EXECUTOR runs the task on this thread", "+    catch (CancellationException e) { throw new InterruptedException(); }", "-      Throwable cause = e.getCause();", "-      if (cause instanceof InterruptedException) { throw (InterruptedException) cause; }", "-      else if (cause instanceof InvocationTargetException) { throw (InvocationTargetException) cause; }", "-      else if (cause instanceof IOException) { throw (IOException) cause; }", "+      if (e.getCause() instanceof IOException) { throw (IOException) e.getCause(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a0e356fd8878b4738c7ea463396f9d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": "       public Process value()", "signatureAfterChange": "     public Remote value()", "diff": ["-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(new Thunk<Process>() {", "-      public Process value() {", "-        try {", "-          return runJavaProcess(javaCommand, TaskProcess.class.getName(), IterUtil.<String>empty(), classPath,", "-                                workingDir, properties, jvmParams);", "-        }", "-        catch (IOException e) { throw new WrappedException(e); }", "-      }", "+    public ExportRemoteTask(Thunk<? extends Remote> factory) { _factory = factory; }", "+    public Remote value() {", "+      Remote server = _factory.value();", "+      try { return UnicastRemoteObject.exportObject(server, 0); }", "+      catch (RemoteException e) { throw new WrappedException(e); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f472d654ac964ba65979445e3f9b0f39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 41, "signatureBeforeChange": "       public Process value()", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory)       throws InterruptedException, InvocationTargetException, IOException", "diff": ["-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(new Thunk<Process>() {", "-      public Process value() {", "-        try { return runJavaProcess(TaskProcess.class.getName(), IterUtil.<String>empty(), workingDir); }", "-        catch (IOException e) { throw new WrappedException(e); }", "-      }", "+  public static Remote exportInProcess(Thunk<? extends Remote> factory)", "+      throws InterruptedException, InvocationTargetException, IOException {", "+    return exportInProcess(factory, JVMBuilder.DEFAULT);"]}], "num": 14824}
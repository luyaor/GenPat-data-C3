{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "832e09009b91a957b5783400aa9aad3b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21f395d51ec7f7491a40f363ec5a96c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "f835199d645f480bb352cc51cff6dc5ae32e7dc4", "commitAfterChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 128, "signatureBeforeChange": "      private boolean containsInferenceVariable(Type t, Set<? extends VariableType> vars)", "signatureAfterChange": "          public Inferencer(Set<? extends VariableType> vars)", "diff": ["-  private boolean containsInferenceVariable(Type t, Set<? extends VariableType> vars) {", "-    return containsInferenceVariable(t, vars, new RecursionStack<Type>());", "-  }", "+    ", "+    public Inferencer(Set<? extends VariableType> vars) {", "+      _vars = vars;", "+      _subStack = new RecursionStack2<Type, Type>();", "+      _supStack = new RecursionStack2<Type, Type>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edacd6944f1bf7b5c39fb92ec84ab451", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "a1c288a48316b1c91a6ebecbbeffc93089c5ebaa", "commitAfterChange": "df01c8be1037a04090a700d45d88a837db8c2901", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     @Override public Boolean forVariableType(VariableType t)", "signatureAfterChange": "     @Override public Boolean forVariableType(final VariableType t)", "diff": ["-    @Override public Boolean forVariableType(VariableType t) {", "-      return checkBoundedSymbol(t.symbol());", "+    @Override public Boolean forVariableType(final VariableType t) {", "+      Thunk<Boolean> checkVar = new Thunk<Boolean>() {", "+        public Boolean value() { return checkBoundedSymbol(t.symbol()); }", "+      };", "+      return _stack.apply(checkVar, true, t);"]}], "num": 29308}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f2bab5c16d505b74266db145f660c90", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4177025157c6d1f210e5dd44839246de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "3944766b414e9b28f72d0266991dc3ced69d30b0", "commitAfterChange": "30114c083c07270248f814f8a3cab4ee5196d9c1", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 328, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["-          resetModification();", "-          if (! oldFile.equals(file)) {", "-            /* remove regions for this document */", "-            removeFromDebugger();", "-            _breakpointManager.removeRegions(this);", "-            _bookmarkManager.removeRegions(this);", "-            for (RegionManager<MovingDocumentRegion> rm: getFindResultsManagers()) rm.removeRegions(this);", "-            clearBrowserRegions();", "-          }", "-          synchronized(_documentsRepos) {", "-            File f = getRawFile();", "-//            OpenDefinitionsDocument d = _documentsRepos.get(f);", "-            // d == this except in some unit tests where documents are not entered in _documentsRepos", "-//            assert d == this;", "-            _documentsRepos.remove(f);", "-            _documentsRepos.put(file, this);", "-          }", "-          setFile(file);", "-          // this.getPackageName does not return \"\" if this is untitled and contains a legal package declaration     ", "+          if (com.shouldUpdateDocumentState()) {", "+            resetModification();", "+            if (! oldFile.equals(file)) {", "+              /* remove regions for this document */", "+              removeFromDebugger();", "+              _breakpointManager.removeRegions(this);", "+              _bookmarkManager.removeRegions(this);", "+              for (RegionManager<MovingDocumentRegion> rm: getFindResultsManagers()) rm.removeRegions(this);", "+              clearBrowserRegions();", "+            }", "+            synchronized(_documentsRepos) {", "+              File f = getRawFile();", "+//            OpenDefinitionsDocument d = _documentsRepos.get(f);", "+              // d == this except in some unit tests where documents are not entered in _documentsRepos", "+//            assert d == this;", "+              _documentsRepos.remove(f);", "+              _documentsRepos.put(file, this);", "+            }", "+            setFile(file);", "+            ", "+            // this.getPackageName does not return \"\" if this is untitled and contains a legal package declaration     ", "-          setCachedClassFile(FileOps.NULL_FILE);", "-          checkIfClassFileInSync();", "-          ", "+            setCachedClassFile(FileOps.NULL_FILE);", "+            checkIfClassFileInSync();", "+            ", "-          _notifier.fileSaved(openDoc);", "-          ", "-          // Make sure this file is on the appropriate classpaths (does nothing in AbstractGlobalModel)", "-          addDocToClassPath(this);", "-          ", "-          /* update the navigator */", "-          _documentNavigator.refreshDocument(this, fixPathForNavigator(file.getCanonicalPath()));", "-          ", "-          /* set project changed flag */", "-          setProjectChanged(true);          ", "+            _notifier.fileSaved(openDoc);", "+            ", "+            // Make sure this file is on the appropriate classpaths (does nothing in AbstractGlobalModel)", "+            addDocToClassPath(this);", "+            ", "+            /* update the navigator */", "+            _documentNavigator.refreshDocument(this, fixPathForNavigator(file.getCanonicalPath()));", "+            ", "+            /* set project changed flag */", "+            setProjectChanged(true);          ", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cee526cb8771a466c3e3c46064652fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void doubleClicked(MouseEvent e)", "signatureAfterChange": "   public void doubleClicked(MouseEvent e)", "diff": ["-            final OpenDefinitionsDocument newDoc = pim.getCurrentItem().doc;", "-            final boolean docChanged = ! newDoc.equals(_model.getActiveDocument());", "-            final boolean docSwitch = _model.getActiveDocument() != newDoc;", "-            if (docSwitch) _model.setActiveDocument(newDoc);", "-            final int curLine = newDoc.getCurrentLine();", "-            final int last = name.lastIndexOf(':');", "-            if (last >= 0) {", "-              try {", "-                String nend = name.substring(last + 1);", "-                int val = Integer.parseInt(nend);", "-                ", "-                final int lineNum = Math.max(1, val);", "-                Runnable command = new Runnable() {", "-                  public void run() {", "-                    try { _frame._jumpToLine(lineNum); }  // adds this region to browser history", "-                    catch (RuntimeException ex) { _frame._jumpToLine(curLine); }", "+            final OpenDefinitionsDocument newDoc = pim.getCurrentItem().getOpenDefinitionsDocument();", "+            if (newDoc != null) {", "+              final boolean docChanged = ! newDoc.equals(_model.getActiveDocument());", "+              final boolean docSwitch = _model.getActiveDocument() != newDoc;", "+              if (docSwitch) _model.setActiveDocument(newDoc);", "+              final int curLine = newDoc.getCurrentLine();", "+              final int last = name.lastIndexOf(':');", "+              if (last >= 0) {", "+                try {", "+                  String nend = name.substring(last + 1);", "+                  int val = Integer.parseInt(nend);", "+                  ", "+                  final int lineNum = Math.max(1, val);", "+                  Runnable command = new Runnable() {", "+                    public void run() {", "+                      try { _frame._jumpToLine(lineNum); }  // adds this region to browser history", "+                      catch (RuntimeException ex) { _frame._jumpToLine(curLine); }", "+                    }", "+                  };", "+                  if (docSwitch) {", "+                    // postpone running command until after document switch, which is pending in the event queue", "+                    EventQueue.invokeLater(command);", "-                };", "-                if (docSwitch) {", "-                  // postpone running command until after document switch, which is pending in the event queue", "-                  EventQueue.invokeLater(command);", "+                  else command.run();", "-                else command.run();", "+                catch(RuntimeException ex) { /* ignore */ }", "-              catch(RuntimeException ex) { /* ignore */ }", "-            }", "-            else if (docChanged) {", "-              // defer executing this code until after active document switch (if any) is complete", "-              EventQueue.invokeLater(new Runnable() { public void run() { _frame.addToBrowserHistory(); } });", "+              else if (docChanged) {", "+                // defer executing this code until after active document switch (if any) is complete", "+                EventQueue.invokeLater(new Runnable() { public void run() { _frame.addToBrowserHistory(); } });", "+              }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b212cdceb71105dc86817e218bc41c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/repl/EclipseInteractionsModel.java", "commitBeforeChange": "9e872e89ecbb011ef008c884ca8c25835ce56230", "commitAfterChange": "643b18bac8370f79aefcf668722f7c98ff72b6b4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   protected void _resetInteractionsClasspath()", "signatureAfterChange": "   protected void _resetInteractionsClasspath()", "diff": ["-        ", "-        // Get the project's location on disk", "-        IProject proj = jProj.getProject();", "-        IPath projRoot = proj.getDescription().getLocation();", "-        // Note: getLocation returns null if the default location is used", "-        //  (brilliant...)", "-        ", "-        // Get the resolved classpath entries - this should filter out", "-        //   all CPE_VARIABLE and CPE_CONTAINER entries.", "-        IClasspathEntry entries[] = jProj.getResolvedClasspath(true);", "-        ", "-        // For each of the classpath entries...", "-        for(int j = 0; j < entries.length; j++) {", "-          IClasspathEntry entry = entries[j];", "-          ", "-          // Check what kind of entry it is...", "-          int kind = entry.getEntryKind();", "-          ", "-          // And get the appropriate path.", "-          IPath path;", "-          switch (kind) {", "-            case IClasspathEntry.CPE_LIBRARY:", "-              // The raw location of a JAR.", "-              path = entry.getPath();", "-              //System.out.println(\"Adding library: \" + path.toOSString());", "-              addToClassPath(path.toOSString());", "-              break;", "-            case IClasspathEntry.CPE_SOURCE:", "-              // The output location of source.", "-              // Need to append it to the user's workspace directory.", "-              path = entry.getOutputLocation();", "-              if (path == null) {", "-                path = jProj.getOutputLocation();", "-                //System.out.println(\" output location from proj: \" + path);", "-              }", "-              ", "-              // At this point, the output location contains the project", "-              //  name followed by the actual output folder name", "-              ", "-              if (projRoot != null) {", "-                // We have a custom project location, so the project name", "-                //  is not part of the *actual* output directory.  We need", "-                //  to remove the project name (first segment) and then", "-                //  append the rest of the output location to projRoot.", "-                path = path.removeFirstSegments(1);", "-                path = projRoot.append(path);", "-              }", "-              else {", "-                // A null projRoot means use the default location, which", "-                //  *does* include the project name in the output directory.", "-                path = root.getLocation().append(path);", "-              }", "-              ", "-              //System.out.println(\"Adding source: \" + path.toOSString());", "-              addToClassPath(path.toOSString());", "-              break;", "-            case IClasspathEntry.CPE_PROJECT:", "-              // In this case, just the project name is given.", "-              // We don't actually need to add anything to the classpath,", "-              //  since the project is open and we will get its classpath", "-              //  on another pass.", "-              break;", "-            default:", "-              // This should never happen.", "-              throw new RuntimeException(\"Unsupported classpath entry type.\");", "-          }", "-        }", "+        _addProjectToClasspath(jProj, jModel, root);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "846ab97e144a3e7790e3d1b7730d58f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testDebugSourcepath()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testDebugSourcepath()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-    DebugTestListener debugListener = new DebugTestListener() {", "-      public void breakpointSet(Breakpoint bp) {", "-        breakpointSetCount++;", "-      }", "-      public void breakpointReached(Breakpoint bp) {", "-        synchronized(_notifierLock) {", "-          breakpointReachedCount++;", "-          if (printEvents) System.out.println(\"breakpointReached \" + breakpointReachedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void breakpointRemoved(Breakpoint bp) {", "-        //synchronized(_notifierLock) {", "-        breakpointRemovedCount++;", "-        if (printEvents) System.out.println(\"breakpointRemoved \" + breakpointRemovedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void stepRequested() {", "-        //synchronized(_notifierLock) {", "-          stepRequestedCount++;", "-          if (printEvents) System.out.println(\"stepRequested \" + stepRequestedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadSuspended() {", "-        synchronized(_notifierLock) {", "-          currThreadSuspendedCount++;", "-          if (printEvents) System.out.println(\"threadSuspended \" + currThreadSuspendedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void currThreadResumed() {", "-        //synchronized(_notifierLock) {", "-        currThreadResumedCount++;", "-        if (printEvents) System.out.println(\"threadResumed \" + currThreadResumedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadDied() {", "-        synchronized(_notifierLock) {", "-          currThreadDiedCount++;", "-          if (printEvents) System.out.println(\"threadDied \" + currThreadDiedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber){", "-        synchronized(_notifierLock) {", "-          threadLocationUpdatedCount++;", "-          if (printEvents) System.out.println(\"threadUpdated \" + threadLocationUpdatedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerShutdown() {", "-        synchronized(_notifierLock) {", "-          debuggerShutdownCount++;", "-          if (printEvents) System.out.println(\"debuggerShutdown \" + debuggerShutdownCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerStarted() {", "-        synchronized(_notifierLock) {", "-          debuggerStartedCount++;", "-          if (printEvents) System.out.println(\"debuggerStarted \" + debuggerStartedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-    };", "+    StepTestListener debugListener = new StepTestListener();", "-      _startup();  //_debugManager.startup();", "+      _debugManager.startup();", "-    // Source is highlighted because doc is on breakpoint object", "+    // Source is highlighted because document is stored in breakpoint", "-    // Source is highlighted because file is on sourcepath", "+    // Source is highlighted because file is now on sourcepath"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b65799e3436cfe1a293f24cc0a06bd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "diff": ["-      try {", "-        // First, get the class name to use.  This relies on Java's convention of", "-        // one top-level class per file.", "-        String className = getDocument().getQualifiedClassName();", "-        ", "-        // Then clear the current interaction and replace it with a \"java X\" line.", "-        InteractionsDocument iDoc = _interactionsModel.getDocument();", "-        ", "-        synchronized(_interpreterControl) {  // why is this synchronization here?", "+      ", "+      // Get the class name for this document, the first top level class in the document.", "+      final String className = getDocument().getQualifiedClassName();", "+      final InteractionsDocument iDoc = _interactionsModel.getDocument();", "+      if (! checkIfClassFileInSync()) {", "+        iDoc.insertBeforeLastPrompt(DOCUMENT_OUT_OF_SYNC_MSG, InteractionsDocument.ERROR_STYLE);", "+        return;", "+      }", "+      ", "+      _runMain = new DummyGlobalModelListener() {", "+        public void interpreterReady(File wd) {", "+          ", "+          // Load the proper text into the interactions document", "-          if (!checkIfClassFileInSync()) {", "-            iDoc.insertBeforeLastPrompt(DOCUMENT_OUT_OF_SYNC_MSG, InteractionsDocument.ERROR_STYLE);", "-          }", "+          ", "+", "-", "-          // Notify listeners that the file is about to be run.", "-          _notifier.runStarted(this);", "-", "-          // Finally, execute the new interaction.", "+          ", "+          // Finally, execute the new interaction and record that event", "+          _notifier.runStarted(ConcreteOpenDefDoc.this);", "+          SwingUtilities.invokeLater(new Runnable() {", "+            public void run() { ", "+              /* Remove _runMain listener AFTER this interpreterReady listener completes and DROPS it readLock on", "+               * _interactionsModel._notifier. */", "+              _interactionsModel.removeListener(_runMain);", "+            }", "+          });", "+          ", "-      }", "-      catch (EditDocumentException e) {", "-        // This was thrown by insertText - and shouldn't have happened.", "-        throw new UnexpectedException(e);", "-      }", "+      };", "+      ", "+      _interactionsModel.addListener(_runMain);", "+      ", "+      // Reset interactions to the soure root for this document; class will be executed when new interpreter is ready", "+      resetInteractions(getSourceRoot());", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d6f3ce7920a0b4bb5cf25f783d408ee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "   void initGotoFileDialog()", "signatureAfterChange": "   void initGotoFileDialog()", "diff": ["-          if (p.getItem()!=null) {", "-            boolean docChanged = !p.getItem().doc.equals(_model.getActiveDocument());", "-            if (docChanged) {", "-              addToBrowserHistory();", "-            }", "-            _model.setActiveDocument(p.getItem().doc);", "-            final int curLine = _model.getActiveDocument().getCurrentLine();", "-            String t = p.getText();", "-            if (t.lastIndexOf(':')>=0) {", "+          if (p.getItem() != null) {", "+            final OpenDefinitionsDocument newDoc = p.getItem().doc;", "+            final boolean docChanged = ! newDoc.equals(_model.getActiveDocument());", "+            if (docChanged) addToBrowserHistory();", "+            _model.setActiveDocument(newDoc);", "+            final int curLine = newDoc.getCurrentLine();", "+            final String t = p.getText();", "+            final int last = t.lastIndexOf(':');", "+            if (last >= 0) {", "-                String end = t.substring(t.lastIndexOf(':')+1);", "+                String end = t.substring(last + 1);", "-                    try {", "-                      _jumpToLine(lineNum);", "-                    }", "+                    try { _jumpToLine(lineNum); }", "+                    if (docChanged) addToBrowserHistory();", "-            if (docChanged) {", "-              // defer executing this code until after active document switch (if any) is complete", "-              SwingUtilities.invokeLater(new Runnable() {", "-                public void run() {", "-                  addToBrowserHistory();", "-                }", "-              });", "-            }", "+//            if (docChanged) {", "+//              // defer executing this code until after active document switch (if any) is complete", "+//              SwingUtilities.invokeLater(new Runnable() {", "+//                public void run() {", "+//                  addToBrowserHistory();", "+//                }", "+//              });", "+//            }", "-          hourglassOff();", "+          simpleHourglassOff();", "-          hourglassOff();", "+          simpleHourglassOff();", "-          if (b) { hourglassOff(); } else { hourglassOn(); }", "+          if (b) { simpleHourglassOff(); } else { simpleHourglassOn(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a470be59e885618acce788bcb799d86c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AutoCompletePopup.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void show(final Component parent,                    final String title,                    final String initial,                    final int loc,                    final SizedIterable<String> actionNames,                    final SizedIterable<KeyStroke> actionKeyStrokes,                    final int oneMatchActionIndex,                    final Runnable canceledAction,                    final SizedIterable<Runnable4<String,String,Integer,Integer>> acceptedActions)", "signatureAfterChange": "   public void show(final Component parent,                    final String title,                    final String initial,                    final int loc,                    final SizedIterable<String> actionNames,                    final SizedIterable<KeyStroke> actionKeyStrokes,                    final int oneMatchActionIndex,                    final Runnable canceledAction,                    final SizedIterable<Runnable3<AutoCompletePopupEntry,Integer,Integer>> acceptedActions)", "diff": ["-                   final SizedIterable<Runnable4<String,String,Integer,Integer>> acceptedActions) {", "+                   final SizedIterable<Runnable3<AutoCompletePopupEntry,Integer,Integer>> acceptedActions) {", "-        ClassNameAndPackageEntry currentEntry = null;", "-        HashSet<ClassNameAndPackageEntry> set;", "-        if ((DrJava.getConfig().getSetting(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue()) &&", "-            (_mainFrame.getCompleteClassSet().size() > 0)) {", "-          set = new HashSet<ClassNameAndPackageEntry>(_mainFrame.getCompleteClassSet());", "-        }", "-        else {", "-          set = new HashSet<ClassNameAndPackageEntry>(docs.size());", "-          for(OpenDefinitionsDocument d: docs) {", "-            if (d.isUntitled()) continue;", "-            String str = d.toString();", "-            if (str.lastIndexOf('.')>=0) {", "-              str = str.substring(0, str.lastIndexOf('.'));", "-            }", "-            GoToFileListEntry entry = new GoToFileListEntry(d, str);", "-            if (d.equals(_mainFrame.getModel().getActiveDocument())) currentEntry = entry;", "-            set.add(entry);", "+        AutoCompletePopupEntry currentEntry = null;", "+        _docEntries.clear();", "+        for(OpenDefinitionsDocument d: docs) {", "+          if (d.isUntitled()) continue;", "+          String str = d.toString();", "+          if (str.lastIndexOf('.')>=0) {", "+            str = str.substring(0, str.lastIndexOf('.'));", "+          GoToFileListEntry entry = new GoToFileListEntry(d, str);", "+          if (d.equals(_mainFrame.getModel().getActiveDocument())) currentEntry = entry;", "+          _docEntries.add(entry);", "-          addJavaAPIToSet(set);", "+          addJavaAPI();", "-        final PredictiveInputModel<ClassNameAndPackageEntry> pim = ", "-          new PredictiveInputModel<ClassNameAndPackageEntry>(true, new PrefixStrategy<ClassNameAndPackageEntry>(), set);", "+        final PredictiveInputModel<AutoCompletePopupEntry> pim = ", "+          new PredictiveInputModel<AutoCompletePopupEntry>(true, new PrefixStrategy<AutoCompletePopupEntry>(), _allEntries);", "-                Iterator<Runnable4<String,String,Integer,Integer>> actionIt =", "+                Iterator<Runnable3<AutoCompletePopupEntry,Integer,Integer>> actionIt =", "-                Runnable4<String,String,Integer,Integer> action;", "+                Runnable3<AutoCompletePopupEntry,Integer,Integer> action;", "-                action.run(pim.getCurrentItem().getClassName(),", "-                           pim.getCurrentItem().getFullPackage()+pim.getCurrentItem().getClassName(),", "-                           finalStart, loc);", "+                action.run(pim.getCurrentItem(), finalStart, loc);", "-        final PredictiveInputFrame<ClassNameAndPackageEntry> completeWordDialog = ", "+        final PredictiveInputFrame<AutoCompletePopupEntry> completeWordDialog = ", "-        final ClassNameAndPackageEntry finalCurrentEntry = currentEntry;", "+        final AutoCompletePopupEntry finalCurrentEntry = currentEntry;", "+            ", "+            if (_lastState != null) {", "+              completeWordDialog.setFrameState(_lastState);", "+            }", "+            "]}], "num": 18017}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74ba3fbff1adb3ca6121185c14e52e3c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e93e3741a6a6f672a1e497107ae703", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/AbstractLog.java", "commitBeforeChange": "2f448ba8b87bf5374806fe43042efcc34e6f744e", "commitAfterChange": "93219856772483abc62cf5ad83d3a2500e77f448", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void logValues(String[] names, Object... values)", "signatureAfterChange": "   public void logValues(String[] names, Object... values)", "diff": ["-      if (names.length == values.length) {", "-        Iterable<String> namesIter = IterUtil.arrayIterable(names);", "-        Iterable<Object> valuesIter = IterUtil.arrayIterable(values);", "-        SizedIterable<SizedIterable<String>> messages = BinaryMappedIterable.make(namesIter, valuesIter, PROCESS_VALUE);", "-        write(new Date(), th, e, IterUtil.collapse(messages));", "-      }", "-      else {", "-        String err = \"Invalid invocation of logValues() with \" + names.length + \" names and \"  + values.length + \" values\";", "-        write(new Date(), th, e, IterUtil.singleton(err));", "-      }", "+      write(new Date(), th, e, processValues(names, values));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "490a490547678a38021b13d09cc9f6bd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "d187ef0ae751d72da55c4bc4f82be93731c1e46f", "commitAfterChange": "d8ed07c181201a238142caf2537f1e0f6da8bb42", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected void _addDocumentStyles()", "signatureAfterChange": "   protected void _addDocumentStyles()", "diff": ["-    // Default", "-    SimpleAttributeSet defaultS = new SimpleAttributeSet();", "-    _adapter.addDocStyle(InteractionsDocument.DEFAULT_STYLE, defaultS);", "+    // Add AbstractConsoleController styles", "+    super._addDocumentStyles();", "-    // System.out", "-    SimpleAttributeSet s = new SimpleAttributeSet(defaultS);", "-    s.addAttribute(StyleConstants.Foreground, Color.green.darker().darker());", "-    _adapter.addDocStyle(InteractionsDocument.SYSTEM_OUT_STYLE, s);", "-   ", "-    // System.err", "-    s = new SimpleAttributeSet(defaultS);", "-    s.addAttribute(StyleConstants.Foreground, Color.red);", "-    _adapter.addDocStyle(InteractionsDocument.SYSTEM_ERR_STYLE, s);", "-    ", "-    s = new SimpleAttributeSet(defaultS);", "+    SimpleAttributeSet s = new SimpleAttributeSet();", "-    s = new SimpleAttributeSet(defaultS);", "+    s = new SimpleAttributeSet();", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e3c03d7194e070387a9a8e6f7f00b75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "e664df55ae0a7bd09b3050ad4027139ea59836cd", "commitAfterChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "signatureAfterChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "diff": ["-  /** Tag the given type parameters with a new VariableType, and set the bounds appropriately. */", "+   */", "+    checkStructureForTypeParameters(tparams);", "+    ensureWellFormedTypeParameters(tparams);", "+  }", "-      Iterable<ReferenceTypeName> bounds = IterUtil.compose(param.getBound(), param.getInterfaceBounds());", "-      // meet is guaranteed to be nonempty, and thus not TOP", "-      Type upperBound = ts.meet(checkList(bounds));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a2edf5e3667ab7002449bbec96978f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "2fc4395eb72dbc8caeb586fbd5d1fef990083e71", "commitAfterChange": "a2262b2230c42b5cda2b42cb16829b87b361f597", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["-          } else { // Pass an array with all the remaining arguments", "-            assert(typs[typs.length-1].isArray());", "-            Class componentType = typs[typs.length-1].getComponentType();", "-            Object argArray = Array.newInstance(componentType,new int[]{(larg.size()-typs.length+1)});", "-            for(int j = 0; j < larg.size()-typs.length+1; j++){", "-              Object p  = it.next().acceptVisitor(this);", "-              Array.set(argArray, j, performCast(componentType, p));", "-            }", "-            args[typs.length-1] = argArray;", "+          } else { // Pass an array with all the remaining arguments of 'it'", "+            args[typs.length-1] = buildArrayOfRemainingArgs(typs, larg.size(), it );"]}], "num": 15349}
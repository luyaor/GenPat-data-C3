{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e1adfd921e54adbbe77cb3f808bb0c7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7f3b35c6169d10e35362c9b48c715f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "a2b28a9213fa3cc634db7fda88e14ebb0a103974", "commitAfterChange": "56df485f00337d373f1f0b94fc58f7c7b8b714d4", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public boolean isOnMatch()", "signatureAfterChange": "     public boolean isOnMatch()", "diff": ["-   */", "-  public boolean isOnMatch() {", "-    String findWord = this._findWord;", "-    int len, off;", "-    len = findWord.length();", "-    if(!_searchBackwards) {", "-      off = _current.getOffset() - len;", "-    } else {", "-      off = _current.getOffset();", "-    if(off < 0){", "-      return false;", "-    } else if (off + len > _doc.getLength()){", "-      return false;", "-    try {", "-      String matchSpace = _doc.getText(off, len);", "-      if (!_matchCase){", "-        matchSpace = matchSpace.toLowerCase();", "-        findWord = findWord.toLowerCase();", "-      }", "-      return matchSpace.equals(findWord);", "-    }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "-  }", "+    */", "+    public boolean isOnMatch() {", "+        return _state.isOnMatch();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b413c864140b46d02585293b7e749a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "a2b28a9213fa3cc634db7fda88e14ebb0a103974", "commitAfterChange": "56df485f00337d373f1f0b94fc58f7c7b8b714d4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public boolean replaceCurrent()", "signatureAfterChange": "     public boolean replaceCurrent()", "diff": ["+    */", "+    public boolean replaceCurrent() {", "+        return _state.replaceCurrent();", "-  */", "-  public boolean replaceCurrent() {", "-    try {", "-      if (isOnMatch()) {", "-        boolean atStart = false;", "-        int position = getCurrentOffset();", "-        if(!_searchBackwards) {", "-          position -= _findWord.length();", "-        }", "-        _doc.remove(position, _findWord.length());", "-        if (position == 0){", "-          atStart = true;", "-        }", "-        _doc.insertString(getCurrentOffset(), _replaceWord, null);", "-", "-        // the current offset will be the end of the inserted word", "-        //since we keep track of current as a Position.", "-        //The exception is if we are at the beginning of the document,", "-        //in which case the text is inserted AFTER the current position", "-        //So, current offset is correct for forwards searching unless", "-        //we were at the start of the document, in which case it is", "-        //correct for backwards searching.", "-        if(atStart && !_searchBackwards) {", "-          setPosition(_replaceWord.length());", "-        }", "-        if(!atStart && _searchBackwards){", "-          setPosition(getCurrentOffset() - _replaceWord.length());", "-        }", "-", "-        return true;", "-      }", "-      else {", "-        return false;", "-      }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "-  }"]}], "num": 10515}
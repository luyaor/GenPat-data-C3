{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f042596e56b258cf21fe0d09056e90e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80d7089eb78b97a4e4d5f58b97fec06f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "commitAfterChange": "733b3cf4d974c1c6ea9506fe8718b272fd7a917d", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 232, "signatureBeforeChange": "       public boolean changeRegion(R oldRegion, R newRegion)", "signatureAfterChange": "       public void changeRegion(R region, Lambda<Object,R> cmd)", "diff": ["-       *  @return true if a change was made */", "-      public boolean changeRegion(R oldRegion, R newRegion) {", "-        return _superSetManager.changeRegionHelper(oldRegion, newRegion);", "+       *  @param cmd command that mutates the region. */", "+      public void changeRegion(R region, Lambda<Object,R> cmd) {", "+        _superSetManager.changeRegion(region, cmd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2b19215b8a8eb074b47ce65a16d063a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "commitAfterChange": "733b3cf4d974c1c6ea9506fe8718b272fd7a917d", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 222, "signatureBeforeChange": "     public boolean changeRegion(R oldRegion, R newRegion)", "signatureAfterChange": "     public void changeRegion(R region, Lambda<Object,R> cmd)", "diff": ["-     *  @return true if a change was made */", "-    public boolean changeRegion(R oldRegion, R newRegion) {", "-      int index = _regions.indexOf(oldRegion);", "-      if (index<0) { return false; }", "+     *  @param cmd command that mutates the region. */", "+    public void changeRegion(R region, Lambda<Object,R> cmd) {", "+      int index = _regions.indexOf(region);", "+      if (index<0) { return; }", "-      boolean changed = changeRegionHelper(r, newRegion);", "-      if (changed) {", "-        Utilities.invokeLater(new Runnable() { public void run() { ", "-          // notify", "-          _lock.startRead();", "-          try {", "-            for (RegionManagerListener<R> l: _listeners) { l.regionChanged(r); }", "-          } finally { _lock.endRead(); }            ", "-        } });", "-      }", "-      return changed;", "+      cmd.apply(r);", "+      Utilities.invokeLater(new Runnable() { public void run() { ", "+        // notify", "+        _lock.startRead();", "+        try {", "+          for (RegionManagerListener<R> l: _listeners) { l.regionChanged(r); }", "+        } finally { _lock.endRead(); }            ", "+      } });"]}], "num": 3503}
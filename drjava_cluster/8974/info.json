{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d5c4fbc3c985802460eeff8cefbdee9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "324d9097ebf876e427e9eca254714ba2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "1333ad40debe120f6d8fd5fb5ff36c57ce6b1ccf", "commitAfterChange": "3907c0e8430f2d380a191d1ad8364cbfdd1d1b28", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void interactionEnded()", "signatureAfterChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file)     throws IOException, InterruptedException", "diff": ["+   */", "+  protected void doCompile(OpenDefinitionsDocument doc, File file)", "+    throws IOException, InterruptedException", "+  {", "+    doc.saveFile(new FileSelector(file));", "+", "+    CompileShouldSucceedListener listener = new CompileShouldSucceedListener(true);", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc.startCompile();", "+      if (_model.getNumErrors() > 0) {", "+        fail(\"compile failed: \" + doc.getCompilerErrorModel());", "+      }", "+      listener.wait();", "+    }", "+    listener.checkCompileOccurred();", "+    assertCompileErrorsPresent(false);", "+    _model.removeListener(listener);", "+  }", "-    }", "-    public void interactionEnded() {", "-      synchronized(this) {", "-        interactionEndCount++;", "-        this.notify();", "-      }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c78a4e2e6352996f5c066944c0be5e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "d1e77e5d0818e6bb43ce09eb1ecec03bb76646fd", "commitAfterChange": "936df97bedea66175f36cae49ba74b17abf11e8a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testCloseFiles() throws BadLocationException", "signatureAfterChange": "   public void testCloseFiles() throws BadLocationException", "diff": ["+        synchronized(_readyLock) { _readyLock.notify(); }", "-// THIS TEST COMMENTED OUT TEMPORARILY BECAUSE IT IS BROKEN (dlsmith, 2006-08-21)", "-//    _model.closeAllFiles();", "-//    Utilities.clearEventQueue();", "-//    assertNumOpenDocs(1);", "-//    assertLength(0, _model.getActiveDocument());    ", "-//    listener.assertInterpreterReadyCount(1);", "-//    listener.assertNewCount(4);", "-//    listener.assertCloseCount(4);", "-//    listener.assertAbandonCount(4);", "+    _model.closeAllFiles();", "+    Utilities.clearEventQueue();", "+    assertNumOpenDocs(1);", "+    assertLength(0, _model.getActiveDocument()); ", "+    ", "+    // wait for interpreter to be ready", "+    try {", "+      synchronized(_readyLock) {", "+        if (listener.getInterpreterReadyCount() == 0) _readyLock.wait(10000);  // intentionally not a while ", "+      }", "+    }", "+    catch(InterruptedException e) { fail(\"Wait for interpreterReady event was interrupted by \" + e); }", "+    listener.assertInterpreterReadyCount(1);  ", "+    listener.assertNewCount(4);", "+    listener.assertCloseCount(4);", "+    listener.assertAbandonCount(4);"]}], "num": 8974}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8828c34c9d1b7b3498af1ef51a62c41b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6964df0469743aa115dcc124bd834518", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     public Node visit(ClassAllocation node)", "signatureAfterChange": "     public Object visit(ClassAllocation node)", "diff": ["-    public Node visit(ClassAllocation node) {", "+    public Object visit(ClassAllocation node) {", "-      LinkedList<Expression> arguments = null; // Add parameterization <Expression>.", "+      LinkedList arguments = null; // Add parameterization <Expression>.", "-        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "-        Iterator<Expression> it = node.getArguments().iterator();", "+        arguments = new LinkedList(); // Add parameterization <Expression>.", "+        Iterator it = node.getArguments().iterator();", "-          arguments.add((Expression)it.next().acceptVisitor(this));", "+          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "-      LinkedList<Node> members = new LinkedList<Node>(); // Add parameterization <Node>.", "-      Iterator<Node> it = node.getMembers().iterator();", "+      LinkedList members = new LinkedList(); // Add parameterization <Node>.", "+      Iterator it = node.getMembers().iterator();", "-        members.add(it.next().acceptVisitor(this));", "+        members.add((Node)((Node)it.next()).acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70738d98d34985a479495a92915255bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public Node visit(InnerClassAllocation node)", "signatureAfterChange": "     public Object visit(InnerClassAllocation node)", "diff": ["-    public Node visit(InnerClassAllocation node) {", "+    public Object visit(InnerClassAllocation node) {", "-      LinkedList<Expression> arguments = null; // Add parameterization <Expression>.", "+      LinkedList arguments = null; // Add parameterization <Expression>.", "-        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "-        Iterator<Expression> it = node.getArguments().iterator();", "+        arguments = new LinkedList(); // Add parameterization <Expression>.", "+        Iterator it = node.getArguments().iterator();", "-          arguments.add((Expression)it.next().acceptVisitor(this));", "+          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "-      LinkedList<Node> members = new LinkedList<Node>(); // Add parameterization <Node>.", "-      Iterator<Node> it = node.getMembers().iterator();", "+      LinkedList members = new LinkedList(); // Add parameterization <Node>.", "+      Iterator it = node.getMembers().iterator();", "-        members.add(it.next().acceptVisitor(this));", "+        members.add((Node)((Node)it.next()).acceptVisitor(this));"]}], "num": 9174}
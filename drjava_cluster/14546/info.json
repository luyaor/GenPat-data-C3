{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9b5e1edd078d8cd2f60dfadad4a96a9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da704f8854089d5628e18dd1b459b27a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacCompiler.java", "commitBeforeChange": "3b9696a707d284763f4bff7a7d587935d483984c", "commitAfterChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public String transformCommands(String interactionsString)", "signatureAfterChange": "   public String transformCommands(String interactionsString)", "diff": ["-    boolean smart = DrJava.getConfig().getSetting(OptionConstants.SMART_RUN_FOR_APPLETS_AND_PROGRAMS);", "-      if (smart) interactionsString = transformRunCommand(interactionsString);", "-      else interactionsString = transformJavaCommand(interactionsString);", "+      interactionsString = transformJavaCommand(interactionsString);", "-    else if (interactionsString.startsWith(\"applet \")) interactionsString = transformAppletCommand(interactionsString);", "-    // else if (interactionsString.startsWith(\"run \")) interactionsString = transformRunCommand(interactionsString);", "+    else if (interactionsString.startsWith(\"applet \")) {", "+        interactionsString = transformAppletCommand(interactionsString);", "+    }", "+    else if (interactionsString.startsWith(\"run \")) {", "+        interactionsString = transformRunCommand(interactionsString);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfbd03d80e69522220927b829a15ca55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private int _findKeywordAtToplevel(String keyword,                                                   String text,                                                   int textOffset)", "signatureAfterChange": "   private int _findKeywordAtToplevel(String keyword, String text, int textOffset)", "diff": ["-  private int _findKeywordAtToplevel(String keyword,", "-                                                  String text,", "-                                                  int textOffset) {", "-    // throwErrorHuh();", "+  private int _findKeywordAtToplevel(String keyword, String text, int textOffset) {", "-      boolean done = false;", "-      while (!done) {", "+      while (true) {", "-        if (index == -1) {  //not found", "-          done = true;", "-          break;", "-        }", "+        if (index == -1) break; // not found", "-          //found a match, check quality", "+          // found a match, check quality", "-              //if (!_isCommentedOrSpace(index,text)) {", "-              done = true;", "-              if (!posNotInBlock(index)) { //in a paren phrase, gone too far", "-                index = -1;", "-              }", "+              // found a match but may not be at top level", "+              if (!posNotInBlock(index)) index = -1; //in a paren phrase, gone too far", "+              break;", "-            else {", "-              index++;  //move past so we can search again", "-            }", "+            else index++;  //move past so we can search again", "-          else {", "-            // No space found past the keyword", "+          else { // No space found past the keyword", "-            done = true;", "+            break;"]}], "num": 14546}
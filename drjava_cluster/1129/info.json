{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5db379bf1fdc4133f9a8077042e78371", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43ffa549ac39445383db809eeabb439b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TreeClass.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public TreeClass(String fullName, DJClass declaring, Node ast, final TreeClassLoader loader,                    Options opt)", "signatureAfterChange": "   public TreeClass(String fullName, DJClass declaring, Node ast, final TreeClassLoader loader,                    Options opt)", "diff": ["-      public Class<?> value() { return loader.loadTree(TreeClass.this); }", "+      public Class<?> value() {", "+        try { return loader.loadClass(_fullName); }", "+        catch (ClassNotFoundException e) { throw new RuntimeException(\"Error loading class\", e); }", "+        // LinkageError indicates there's something wrong with the compiled class", "+        catch (LinkageError e) { throw new RuntimeException(\"Error loading class\", e); }", "+      }", "+    loader.registerTree(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f67c4d30ba58dc017191317e05d46625", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/SimpleInteractionsModel.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public String getVariableToString(String var)", "signatureAfterChange": "   public String getVariableToString(String var)", "diff": ["-    Object value = _interpreter.getVariable(var);", "-    return value.toString();", "+    try {", "+      Option<Object> value = _interpreter.interpret(var);", "+      try { return TextUtil.toString(Option.unwrap(value, \"\")); }", "+      catch (Throwable t) { throw new EvaluatorException(t); }", "+    }", "+    catch (InterpreterException e) { return \"\"; }"]}], "num": 1129}
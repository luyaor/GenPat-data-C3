{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8635c51add5db419e9a02c9cb2a7a47", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47702e328530f21f8b2381230a033b57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "0a93533cf1b555344278f97d8d989cd2f113c958", "commitAfterChange": "c950bf1122c303a9137db70374c1cd2e2fc01d08", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public String getClasspathString()", "signatureAfterChange": "   public String getClasspathString()", "diff": ["-    List<ClasspathEntry> locpe = classpathManager.getProjectCP();", "-    for (ClasspathEntry e: locpe) {", "-      cp.append(e.getEntry().toString());", "-      cp.append(System.getProperty(\"path.separator\"));", "-    }", "-", "-    locpe = classpathManager.getBuildDirectoryCP();", "-    for (ClasspathEntry e: locpe) {", "-      cp.append(e.getEntry().toString());", "-      cp.append(System.getProperty(\"path.separator\"));", "-    }", "-", "-    locpe = classpathManager.getProjectFilesCP();", "-    for (ClasspathEntry e: locpe) {", "-      cp.append(e.getEntry().toString());", "-      cp.append(System.getProperty(\"path.separator\"));", "-    }", "-", "-    locpe = classpathManager.getExternalFilesCP();", "-    for (ClasspathEntry e: locpe) {", "-      cp.append(e.getEntry().toString());", "-      cp.append(System.getProperty(\"path.separator\"));", "-    }", "-", "-    locpe = classpathManager.getExtraCP();", "-    for (ClasspathEntry e: locpe) {", "-      cp.append(e.getEntry().toString());", "-      cp.append(System.getProperty(\"path.separator\"));", "-    }", "+    ", "+    appendAllClasspaths(classpathManager.getProjectCP(),        cp);", "+    appendAllClasspaths(classpathManager.getBuildDirectoryCP(), cp);", "+    appendAllClasspaths(classpathManager.getProjectFilesCP(),   cp);", "+    appendAllClasspaths(classpathManager.getExternalFilesCP(),  cp);", "+    appendAllClasspaths(classpathManager.getExtraCP(),          cp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bbfb415a4d91fcb8f7190d2a6341690", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "932762732e00ba19898bb0fcbc6f05a9c3384a3e", "commitAfterChange": "79cd8422a68cecd247626713ed61a8eea3d1fada", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   final public List<Node> parseStream() throws ParseException", "signatureAfterChange": "   final public List<Node> parseStream() throws ParseException", "diff": ["-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case FALSE:", "-      case FINAL:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case IMPORT:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NATIVE:", "-      case NEW:", "-      case NULL:", "-      case PACKAGE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case RETURN:", "-      case SHORT:", "-      case STATIC:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRANSIENT:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case VOLATILE:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case LESS:", "-      case BANG:", "-      case TILDE:", "-      case INCREMENT:", "-      case DECREMENT:", "-      case PLUS:", "-      case MINUS:", "+      if (jj_2_1(2147483647)) {", "+      } else {", "+        break label_1;", "+      }", "+      l = StreamItem();", "+                          list.addAll(l);", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case BOOLEAN:", "+    case BYTE:", "+    case CHAR:", "+    case DOUBLE:", "+    case FALSE:", "+    case FLOAT:", "+    case INT:", "+    case LONG:", "+    case NEW:", "+    case NULL:", "+    case SHORT:", "+    case SUPER:", "+    case THIS:", "+    case TRUE:", "+    case VOID:", "+    case INTEGER_LITERAL:", "+    case LONG_LITERAL:", "+    case FLOAT_LITERAL:", "+    case DOUBLE_LITERAL:", "+    case CHARACTER_LITERAL:", "+    case STRING_LITERAL:", "+    case IDENTIFIER:", "+    case LPAREN:", "+    case BANG:", "+    case TILDE:", "+    case INCREMENT:", "+    case DECREMENT:", "+    case PLUS:", "+    case MINUS:", "+      root = expression();", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case SEMICOLON:", "+        jj_consume_token(SEMICOLON);", "-        break label_1;", "+        ;", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case PACKAGE:", "-        root = packageDeclaration();", "-        break;", "-      case IMPORT:", "-        root = importDeclaration();", "-        break;", "-      default:", "-        jj_la1[1] = jj_gen;", "-        if (jj_2_1(2147483647)) {", "-          root = methodDeclaration();", "-        } else if (jj_2_2(2147483647)) {", "-          l = localVariableDeclaration();", "-          jj_consume_token(SEMICOLON);", "-      list.addAll(l);", "-        } else if (jj_2_3(2)) {", "-          root = topLevelStatement();", "-        } else {", "-          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-          case ABSTRACT:", "-          case CLASS:", "-          case FINAL:", "-          case INTERFACE:", "-          case NATIVE:", "-          case PRIVATE:", "-          case PROTECTED:", "-          case PUBLIC:", "-          case STATIC:", "-          case SYNCHRONIZED:", "-          case TRANSIENT:", "-          case VOLATILE:", "-            root = typeDeclaration();", "-            break;", "-          default:", "-            jj_la1[2] = jj_gen;", "-            jj_consume_token(-1);", "-            throw new ParseException();", "-          }", "-        }", "-      }", "-         if (root != null) {", "-           list.add(root);", "-           root = null;", "-         }", "+                                  list.add(root);", "+      break;", "+    default:", "+      jj_la1[1] = jj_gen;", "+      ;", "-         {if (true) return list;}", "+      {if (true) return list;}", "+    throw new Error(\"Missing return statement in function\");", "+  }"]}], "num": 1178}
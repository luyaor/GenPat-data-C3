{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b1cc1709dc9188a6b9ab5291bfd4e6b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06558bfcf830daf87c745b4b658242da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   @Override public TypeContext visit(ImportDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(ImportDeclaration node)", "diff": ["-        if (ts.containsStaticField(t, member)) { result = result.importField(t.ofClass(), member); }", "-        if (ts.containsStaticMethod(t, member)) { result = result.importMethod(t.ofClass(), member); }", "-        if (ts.containsStaticClass(t, member)) { result = result.importMemberClass(t.ofClass(), member); }", "+        if (ts.containsStaticField(t, member, context.accessModule())) {", "+          result = result.importField(t.ofClass(), member);", "+        }", "+        if (ts.containsStaticMethod(t, member, context.accessModule())) {", "+          result = result.importMethod(t.ofClass(), member);", "+        }", "+        if (ts.containsStaticClass(t, member, context.accessModule())) {", "+          result = result.importMemberClass(t.ofClass(), member);", "+        }", "-            if (ts.containsClass(t, split.second())) {", "+            if (ts.containsClass(t, split.second(), context.accessModule())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0798f3bc7251a2ce082f3b594218f4de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException, InterruptedException", "diff": ["+    debug.logStart();", "+    ", "+    debug.log(\"Before wait\");", "+    debug.log(\"After wait\");", "+    ", "+    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6be1c68177058a41f5c4d30bd671a386", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   private void _findAll()", "signatureAfterChange": "   private void _findAll()", "diff": ["+    _machine.setSearchBackwards(false);", "+    _findLabelBot.setText(\"Next\");", "+", "+                                                           _ignoreTestCases.isSelected(),", "-            _machine.getIgnoreCommentsAndStrings(),startDoc, rm, panel);", "+            _machine.getIgnoreCommentsAndStrings(), _ignoreTestCases.isSelected(), startDoc, rm, panel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b7c5561a36ad645538d163abe6f2ee2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "signatureAfterChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "diff": ["-            checkAccessibility(c, node);", "-              classType = ts.lookupStaticClass(outer, className, IterUtil.<Type>empty());", "+              classType = ts.lookupStaticClass(outer, className, IterUtil.<Type>empty(), context.accessModule());", "-          if (ts.containsField(classType, memberName.image())) {", "+          if (ts.containsField(classType, memberName.image(), context.accessModule())) {", "-          else if (ts.containsClass(classType, memberName.image())) {", "+          else if (ts.containsClass(classType, memberName.image(), context.accessModule())) {", "-              ClassType memberType = ts.lookupStaticClass(classType, memberName.image(), IterUtil.<Type>empty());", "-              checkAccessibility(memberType.ofClass(), node);", "+              ClassType memberType = ts.lookupStaticClass(classType, memberName.image(), IterUtil.<Type>empty(),", "+                                                          context.accessModule());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7322a2c95db8ee2dd655a3d37a96812", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "ce42478b992adc6ef5f56e78e788484f10488ff4", "commitAfterChange": "a6ad77fef884f528ddfb31a18f08f168fcd5e3f2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         public static void main(String... args)", "signatureAfterChange": "         public static void main(String... args)", "diff": ["+    argParser.supportOption(\"jls\");", "-    Options opt = Options.DEFAULT;", "+    Options opt = parsedArgs.hasOption(\"jls\") ? new Options(JLSTypeSystem.INSTANCE) : Options.DEFAULT;"]}], "num": 7545}
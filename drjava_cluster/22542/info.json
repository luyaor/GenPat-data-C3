{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f08fc9c6837e7da624329bcab9aecc94", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4a4499bc1f26da55f4a2cc198dbb19e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testCancelOpenFile() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCancelOpenFile() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestIOListener() {", "+    final TestListener listener = new TestIOListener() {", "-    try {", "-      //OpenDefinitionsDocument newDoc =", "-      _model.openFile(new CancelingSelector());", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // we expect this to be thrown", "-    }", "-    finally {", "-      assertNumOpenDocs(2);", "-      listener.assertOpenCount(0);", "-      listener.assertCloseCount(0);", "-      ", "-      List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "-      doc = docs.get(1);", "-      assertModified(true, doc);", "-      assertContents(FOO_TEXT, doc);", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          //OpenDefinitionsDocument newDoc =", "+          _model.openFile(new CancelingSelector());", "+        }", "+        catch(AlreadyOpenException aoe) {", "+          // Should not be open", "+          fail(\"File was already open!\");", "+        }", "+        catch(OperationCanceledException oce) {", "+          // we expect this to be thrown", "+        }", "+        catch(Exception e) {  // should never happen", "+          throw new UnexpectedException(e);  ", "+        }", "+        finally {", "+          assertNumOpenDocs(2);", "+          listener.assertOpenCount(0);", "+          listener.assertCloseCount(0);", "+          ", "+          List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+          OpenDefinitionsDocument doc = docs.get(1);", "+          assertModified(true, doc);", "+          try { assertContents(FOO_TEXT, doc); }", "+          catch(BadLocationException e) { ", "+            fail(\"BadLocation in assertContents test. Traceback: \" + e);", "+          }", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcaf94f5ad3d9e151a8c7aea1900dd26", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "facb31d52d0108009578d6a1708ac1dfc68b98b8", "commitAfterChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     void switchToError(JUnitError error)", "signatureAfterChange": "     void switchToError(JUnitError error)", "diff": ["-", "-      if (errorHasLocation) {", "-        try {", "-          OpenDefinitionsDocument doc = _model.getDocumentForFile(error.file());", "-          JUnitErrorModel errorModel = doc.getJUnitErrorModel();", "-          JUnitError[] errors = errorModel.getErrors();", "-", "-          int index = Arrays.binarySearch(errors, error);", "+      ", "+      try {", "+      ", "+        OpenDefinitionsDocument doc = _model.getDocumentForFile(error.file());", "+        JUnitErrorModel errorModel = doc.getJUnitErrorModel();", "+        ", "+        if (errorHasLocation) {", "+          JUnitError[] errorsWithPositions = errorModel.getErrorsWithPositions();", "+          //System.out.println(\"error has location\" +error.lineNumber() + \" \" + error);", "+          //System.out.println(\"error size: \" + errors.length);", "+          //for (int i=0; i< errors.length; i++) {", "+          //  System.out.println(\"errors [\" + i + \"] \" + errors[i].lineNumber() + \" \" + errors[i]);", "+          //}", "+          ", "+          int index = Arrays.binarySearch(errorsWithPositions, error);", "+          //System.out.println(\"index of error: \" + index);", "-        }", "-        catch (IOException ioe) {", "-          // Don't highlight the source if file can't be opened", "-        }", "-      }", "-      else {", "-        // Remove last highlight", "-        _lastDefPane.removeErrorHighlight();", "-      }", "+        }", "+        ", "+        else {", "+          // Remove last highlight", "+          _lastDefPane.removeErrorHighlight();", "+          ", "+          DefinitionsPane defPane = _frame.getCurrentDefPane();", "+          defPane.getJUnitErrorCaretListener().shouldHighlight(false);", "+          ", "+          // still switch to document despite the fact that the error has no lineNum", "+          _model.setActiveDocument(doc);", "+          _removeListHighlight();", "+        }", "+      }", "+      catch (IOException ioe) {", "+        // Don't highlight the source if file can't be opened", "+      }", "+      ", "+      "]}], "num": 22542}
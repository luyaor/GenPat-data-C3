{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7499704dd21d0be7704a2ea77b4e57a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "454f416945fbf33e9630265a2a2c54e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName,                                            Data enclosing, boolean isClass)", "signatureAfterChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase,                                            String qualifiedTypeName,                                            String partialName,                                            Data enclosing,                                            boolean isClass)", "diff": ["-  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, ", "-                                          Data enclosing, boolean isClass) {", "+  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, ", "+                                          String qualifiedTypeName, ", "+                                          String partialName, ", "+                                          Data enclosing, ", "+                                          boolean isClass) {", "-    SymbolData sd = symbolTable.get(qualifiedClassName);", "+    SymbolData sd = symbolTable.get(qualifiedTypeName);", "-      if (sd.getOuterData() != enclosing) {sd = null;}", "+      if (sd.getOuterData() != enclosing) { sd = null; }", "-      sd = new SymbolData(qualifiedClassName);", "+      sd = new SymbolData(qualifiedTypeName);", "-      if (isClass) {enclosing.getSymbolData().addInnerClass(sd);}", "-      else {(enclosing.getSymbolData()).addInnerInterface(sd);}", "+      if (isClass) { enclosing.getSymbolData().addInnerClass(sd); }", "+      else { enclosing.getSymbolData().addInnerInterface(sd); }", "-      tempSd = getSymbolData(rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+      SourceInfo si = rts[i].getSourceInfo();", "+      String tempName = rts[i].getName();", "+      tempSd = getSymbolData(tempName, si, false, false, false);", "-      if (tempSd != null) {", "-        interfaces.addLast(tempSd);  ", "-      }", "+      if (tempSd != null) { interfaces.addLast(tempSd); }", "-        //check to see if this is an inner class referencing an inner interface", "-        tempSd = enclosing.getInnerClassOrInterface(rts[i].getName());", "+        // Check to see if this is an inner class referencing an inner interface", "+        tempSd = enclosing.getInnerClassOrInterface(tempName);", "-          String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-          tempSd = new SymbolData(qualifyingPart + \"$\" + rts[i].getName());", "+          String qualifyingPart = qualifiedTypeName.substring(0, qualifiedTypeName.lastIndexOf(\".\"));", "+          String qualifiedTempName = qualifyingPart + \".\" + tempName;", "+          // Should we introduce addInnerInterfaceSymbol ?", "+          tempSd = new SymbolData(qualifiedTempName);", "-          continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));          ", "+//          System.err.println(\"Creating inner interface continuation for \" + qualifiedTempName + \" at LLV: 1042\");", "+          continuations.put(qualifiedTempName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));          ", "-          String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-          superClass = new SymbolData(qualifyingPart + \"$\" + superClassName);", "+          String qualifyingPart = qualifiedTypeName.substring(0, qualifiedTypeName.lastIndexOf(\".\"));", "+          superClass = new SymbolData(qualifyingPart + \".\" + superClassName);", "+//          System.err.println(\"Creating continuation for \" + superClassName + \" at LLV:1079\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986780e1d24cabdea7c385c6c64092b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": "   public boolean closeAllFiles()", "signatureAfterChange": "   public boolean closeAllFiles()", "diff": ["-    boolean keepClosing = true;", "-    Iterator<OpenDefinitionsDocument> odds = _documentsRepos.valuesIterator();", "-    while (odds.hasNext() &&  keepClosing) {", "-      OpenDefinitionsDocument next = odds.next();", "-      keepClosing = closeFile(next);", "-      odds = _documentsRepos.valuesIterator(); // call to closeFile can mutate Iterator, so generate a new \"current\" Iterator on each loop ", "-    }", "-    return keepClosing;", "+    Object[] docs; // Erasure bites! Should be: OpenDefinitionsDocument[] docs; ", "+    ", "+    synchronized (_documentsRepos) { docs = _documentsRepos.valuesArray(); }", "+    // cannot use values() method because loop removes elements", "+    ", "+    for (Object d : docs) {", "+      OpenDefinitionsDocument doc = (OpenDefinitionsDocument) d;", "+      boolean closed = closeFile(doc);  // modifies _documentRepos; cast forced by erasure", "+      if (! closed) return false;", "+    }", "+    return true;"]}], "num": 1787}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11dab654d621fe7b70e51f114e4c0db5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e1011ec4d70082833ac95ff23420810", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void testInsertGap()", "signatureAfterChange": "  \tpublic void testInsertGap()", "diff": ["-\t\t\t", "+\t\t\t//inserts a gap. ", "-\t\t\tassertTrue(\"#0.0\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertTrue(\"#0.1\", model1.getCursor().atEnd());", "-\t\t\tassertEquals(\"#0.2\", 4, model1.getCursor().prevItem().getSize());", "-\t\t\tmodel2.getCursor().next();", "+\t\t\tmodel1.move(-4);", "+\t\t\t//checks to make sure it is a gap", "+\t\t\tassertTrue(\"#0.0\", model1.currentToken().isGap());\t\t\t", "+\t\t\tassertEquals(\"#0.2\", 4, model1.currentToken().getSize());", "+\t\t\tmodel1.move(4);", "+\t\t\t//inserts another gap after the afor mentioned gap", "-\t\t\tassertTrue(\"#1.0\", model2.getCursor().prevItem().isGap());", "-\t\t\tassertTrue(\"#1.1\", model2.getCursor().atEnd());", "-\t\t\tassertEquals(\"#1.2\", 5, model2.getCursor().prevItem().getSize());", "+\t\t\tmodel2.move(-5);", "+\t\t\t//makes sure they united to form an Uber gap.", "+\t\t\tassertTrue(\"#1.0\", model2.currentToken().isGap());", "+\t\t\tassertEquals(\"#1.2\", 5, model2.currentToken().getSize());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "559f9ff1c74a169d22a129570b7d321c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void testInsertGap()", "signatureAfterChange": "  \tpublic void testInsertGap()", "diff": ["-\t\t\t", "+\t\t\t//inserts a gap. ", "-\t\t\tassertTrue(\"#0.0\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertTrue(\"#0.1\", model1.getCursor().atEnd());", "-\t\t\tassertEquals(\"#0.2\", 4, model1.getCursor().prevItem().getSize());", "-\t\t\tmodel2.getCursor().next();", "+\t\t\tmodel1.move(-4);", "+\t\t\t//checks to make sure it is a gap", "+\t\t\tassertTrue(\"#0.0\", model1.currentToken().isGap());\t\t\t", "+\t\t\tassertEquals(\"#0.2\", 4, model1.currentToken().getSize());", "+\t\t\tmodel1.move(4);", "+\t\t\t//inserts another gap after the afor mentioned gap", "-\t\t\tassertTrue(\"#1.0\", model2.getCursor().prevItem().isGap());", "-\t\t\tassertTrue(\"#1.1\", model2.getCursor().atEnd());", "-\t\t\tassertEquals(\"#1.2\", 5, model2.getCursor().prevItem().getSize());", "+\t\t\tmodel2.move(-5);", "+\t\t\t//makes sure they united to form an Uber gap.", "+\t\t\tassertTrue(\"#1.0\", model2.currentToken().isGap());", "+\t\t\tassertEquals(\"#1.2\", 5, model2.currentToken().getSize());"]}], "num": 9018}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55787ece419f7a3fc688da3115e66261", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e12b3d21b13d74507fefe067caaffa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "27cb6e93149c6a1991393a8ca4c655137f9f0cb6", "commitAfterChange": "dd2df9abefe60137729d1e2ed7d31fad6497b670", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": "   public void openFolder(JFileChooser chooser)", "signatureAfterChange": "   public void openFolder(DirectoryChooser chooser)", "diff": ["-  public void openFolder(JFileChooser chooser) {", "+  public void openFolder(DirectoryChooser chooser) {", "+    File openDir = null;", "-      File openDir = null;", "-      try{", "-        openDir = _model.getActiveDocument().getFile().getParentFile();", "-      }catch(FileMovedException e){", "-      }catch(IllegalStateException e){", "-      }", "-      ", "-      if (openDir != null && openDir.exists()) {", "-        // We were given a default - use it.", "-        chooser.setCurrentDirectory(openDir);", "-        chooser.setSelectedFile(openDir);", "-      }", "-      ", "-      File [] filesArray = getOpenFiles(chooser);", "-      DrJava.getConfig().setSetting(OptionConstants.OPEN_FOLDER_RECURSIVE, _openRecursiveCheckBox.isSelected());", "-      ", "-      if(filesArray == null || filesArray.length == 0)", "-        return;", "-      ", "-            ", "-      File dir = filesArray[0];", "-      ", "-      ArrayList<File> files;", "-      if(dir != null && dir.isDirectory()){", "-        files = FileOps.getFilesInDir(dir, _openRecursiveCheckBox.isSelected(), new FileFilter(){", "-          public boolean accept(File f){ ", "-            return f.isDirectory() ||", "-              f.isFile() && ", "-              f.getName().endsWith(DrJava.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]);", "-          }", "-        });", "-        ", "-        ", "-        ", "-        if(_model.isProjectActive()){", "-          Collections.sort(files, new Comparator<File>(){", "-            public int compare(File o1,File o2){", "-              return - o1.getAbsolutePath().compareTo(o2.getAbsolutePath());", "-            }", "-            public boolean equals(Object o){", "-              return false;", "-            }", "-          });", "-        }else{", "-          Collections.sort(files, new Comparator<File>(){", "-            public int compare(File o1,File o2){", "-              return - o1.getName().compareTo(o2.getName());", "-            }", "-            public boolean equals(Object o){", "-              return false;", "-            }", "-          });", "+      openDir = _model.getActiveDocument().getFile().getParentFile();", "+    }catch(FileMovedException e){", "+    }catch(IllegalStateException e){", "+    }", "+    ", "+    int result = chooser.showDialog(openDir);", "+    if (result != DirectoryChooser.APPROVE_OPTION) {", "+      return; // canceled or error", "+    }", "+    ", "+    File dir = chooser.getSelectedDirectory();", "+    DrJava.getConfig().setSetting(OptionConstants.OPEN_FOLDER_RECURSIVE, _openRecursiveCheckBox.isSelected());", "+    ", "+    if(dir == null) return; // just in case", "+    ", "+    ArrayList<File> files;", "+    if(dir != null && dir.isDirectory()){", "+      files = FileOps.getFilesInDir(dir, _openRecursiveCheckBox.isSelected(), new FileFilter(){", "+        public boolean accept(File f){ ", "+          return f.isDirectory() ||", "+            f.isFile() && ", "+            f.getName().endsWith(DrJava.LANGUAGE_LEVEL_EXTENSIONS[DrJava.getConfig().getSetting(LANGUAGE_LEVEL)]);", "-        ", "-        final File[] sfiles = files.toArray(new File[0]);", "-        ", "-        open(new FileOpenSelector(){", "-          public File[] getFiles() {", "-            return sfiles;", "+      });", "+      ", "+      if(_model.isProjectActive()){", "+        Collections.sort(files, new Comparator<File>(){", "+          public int compare(File o1,File o2){", "+            return - o1.getAbsolutePath().compareTo(o2.getAbsolutePath());", "+          }", "+          public boolean equals(Object o){", "+            return false;", "+          }", "+        });", "+      }else{", "+        Collections.sort(files, new Comparator<File>(){", "+          public int compare(File o1,File o2){", "+            return - o1.getName().compareTo(o2.getName());", "+          }", "+          public boolean equals(Object o){", "+            return false;", "-    }catch(OperationCanceledException e){", "-      // noop", "+      ", "+      final File[] sfiles = files.toArray(new File[0]);", "+      ", "+      open(new FileOpenSelector(){", "+        public File[] getFiles() {", "+          return sfiles;", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d495595a26fccf073a3f72ee9510534f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/GlobalModelTest.java", "commitBeforeChange": "2ec67558fcc2be0c684677fea7ee9feb674b02bc", "commitAfterChange": "a937ccbbfe3e2271b14c781e19a341556df45efe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 36, "signatureBeforeChange": "      public void testOpenFromFileMenu() throws BadLocationException, IOException", "signatureAfterChange": "   private void _changeDocumentText(String s) throws BadLocationException", "diff": ["-  ", "-  public void testOpenFromFileMenu() throws BadLocationException, IOException {", "-    Document doc = _gm.getDefinitionsDocument();", "-    TestReaderCommand com = new TestReaderCommand(\"blah.txt\", \"blah\");", "-    _gm.openFile(com);", "-    doc = _gm.getDefinitionsDocument();", "-    assertEquals(\"#1.0\", \"openFile \", _recorder.getEventList());", "-    assertTrue(\"#1.1\", !_gm.isModifiedSinceSave());", "-    assertEquals(\"#1.2\", \"blah\", doc.getText(0, doc.getLength()));", "-  }", "+   */", "+  private void _changeDocumentText(String s) throws BadLocationException {", "+    Document doc = _model.getDefinitionsDocument();", "+    doc.remove(0, doc.getLength());", "+    _assertLength(0);", "+    doc.insertString(0, s, null);", "+    _assertModified(true);", "+    _assertContents(s);", "+  }"]}], "num": 1667}